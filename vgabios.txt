00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios_.c"
00003                                           ! 1 typedef unsigned char Bit8u;
00004                                           !BCC_EOS
00005                                           ! 2 typedef unsigned short Bit16u;
00006                                           !BCC_EOS
00007                                           ! 3 typedef unsigned long Bit32u;
00008                                           !BCC_EOS
00009                                           ! 4 typedef unsigned short Boolean;
00010                                           !BCC_EOS
00011                                           ! 5 static Bit8u read_byte();
00012                                           !BCC_EOS
00013                                           ! 6 static Bit16u read_word();
00014                                           !BCC_EOS
00015                                           ! 7 static void write_byte();
00016                                           !BCC_EOS
00017                                           ! 8 static void write_word();
00018                                           !BCC_EOS
00019                                           ! 9 static Bit8u inb();
00020                                           !BCC_EOS
00021                                           ! 10 static Bit16u inw();
00022                                           !BCC_EOS
00023                                           ! 11 static void outb();
00024                                           !BCC_EOS
00025                                           ! 12 static void outw();
00026                                           !BCC_EOS
00027                                           ! 13 static Bit16u get_SS();
00028                                           !BCC_EOS
00029                                           ! 14 static void printf();
00030                                           !BCC_EOS
00031                                           ! 15 static void unimplemented();
00032                                           !BCC_EOS
00033                                           ! 16 static void unknown();
00034                                           !BCC_EOS
00035                                           ! 17 static Bit8u find_vga_entry();
00036                                           !BCC_EOS
00037                                           ! 18 static void memsetb();
00038                                           !BCC_EOS
00039                                           ! 19 static void memsetw();
00040                                           !BCC_EOS
00041                                           ! 20 static void memcpyb();
00042                                           !BCC_EOS
00043                                           ! 21 static void memcpyw();
00044                                           !BCC_EOS
00045                                           ! 22 static void biosfn_set_video_mode();
00046                                           !BCC_EOS
00047                                           ! 23 static void biosfn_set_cursor_shape();
00048                                           !BCC_EOS
00049                                           ! 24 static void biosfn_set_cursor_pos();
00050                                           !BCC_EOS
00051                                           ! 25 static void biosfn_get_cursor_pos();
00052                                           !BCC_EOS
00053                                           ! 26 static void biosfn_set_active_page();
00054                                           !BCC_EOS
00055                                           ! 27 static void biosfn_scroll();
00056                                           !BCC_EOS
00057                                           ! 28 static void biosfn_read_char_attr();
00058                                           !BCC_EOS
00059                                           ! 29 static void biosfn_write_char_attr();
00060                                           !BCC_EOS
00061                                           ! 30 static void biosfn_write_char_only();
00062                                           !BCC_EOS
00063                                           ! 31 static void biosfn_write_pixel();
00064                                           !BCC_EOS
00065                                           ! 32 static void biosfn_read_pixel();
00066                                           !BCC_EOS
00067                                           ! 33 static void biosfn_write_teletype();
00068                                           !BCC_EOS
00069                                           ! 34 static void biosfn_perform_gray_scale_summing();
00070                                           !BCC_EOS
00071                                           ! 35 static void biosfn_load_text_user_pat();
00072                                           !BCC_EOS
00073                                           ! 36 static void biosfn_load_text_8_14_pat();
00074                                           !BCC_EOS
00075                                           ! 37 static void biosfn_load_text_8_8_pat();
00076                                           !BCC_EOS
00077                                           ! 38 static void biosfn_load_text_8_16_pat();
00078                                           !BCC_EOS
00079                                           ! 39 static void biosfn_load_gfx_8_8_chars();
00080                                           !BCC_EOS
00081                                           ! 40 static void biosfn_load_gfx_user_chars();
00082                                           !BCC_EOS
00083                                           ! 41 static void biosfn_load_gfx_8_14_chars();
00084                                           !BCC_EOS
00085                                           ! 42 static void biosfn_load_gfx_8_8_dd_chars();
00086                                           !BCC_EOS
00087                                           ! 43 static void biosfn_load_gfx_8_16_chars();
00088                                           !BCC_EOS
00089                                           ! 44 static void biosfn_get_font_info();
00090                                           !BCC_EOS
00091                                           ! 45 static void biosfn_alternate_prtsc();
00092                                           !BCC_EOS
00093                                           ! 46 static void biosfn_switch_video_interface();
00094                                           !BCC_EOS
00095                                           ! 47 static void biosfn_enable_video_refresh_control();
00096                                           !BCC_EOS
00097                                           ! 48 static void biosfn_write_string();
00098                                           !BCC_EOS
00099                                           ! 49 static void biosfn_read_state_info();
00100                                           !BCC_EOS
00101                                           ! 50 static void biosfn_read_video_state_size();
00102                                           !BCC_EOS
00103                                           ! 51 static Bit16u biosfn_save_video_state();
00104                                           !BCC_EOS
00105                                           ! 52 static Bit16u biosfn_restore_video_state();
00106                                           !BCC_EOS
00107                                           ! 53 extern Bit8u video_save_pointer_table[];
00108                                           !BCC_EOS
00109                                           ! 54 #asm
00110                                           !BCC_ASM
00111                                           MACRO SET_INT_VECTOR
00112                                             push ds
00113                                             xor ax, ax
00114                                             mov ds, ax
00115                                             mov ax, ?3
00116                                             mov ?1*4, ax
00117                                             mov ax, ?2
00118                                             mov ?1*4+2, ax
00119                                             pop ds
00120                                           MEND
00121                                           ! 65 endasm
00122                                           !BCC_ENDASM
00123                                           ! 66 #asm
00124                                           !BCC_ASM
00125                                           
00126 0000                                      .rom
00127 0000                                      .org 0
00128                                           use16 8086
00129                       00000000            vgabios_start:
00130 0000                        55            .byte 0x55, 0xaa
00131 0002                        40            .byte 0x40
00132                       00000003            vgabios_entry_point:
00133 0003           E9         0103              jmp vgabios_init_func
00134 001E                                      .org 0x1e
00135 001E                        49            .ascii "IBM"
00136 0021                        00            .byte 0x00
00137                       00000022            vgabios_name:
00138 0022                        50            .ascii "Plex86/Bochs VGABios"
00139 0036                        20            .ascii " "
00140 0037                        00            .byte 0x00
00141                       00000038            vgabios_version:
00142 0038                        63            .ascii "current-cvs"
00143 0043                        20            .ascii " "
00144                       00000044            vgabios_date:
00145 0044                        31            .ascii "19 Oct 2023"
00146 004F                        0A            .byte 0x0a,0x0d
00147 0051                        00            .byte 0x00
00148                       00000052            vgabios_copyright:
00149 0052                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00150 007B                        0A            .byte 0x0a,0x0d
00151 007D                        00            .byte 0x00
00152                       0000007E            vgabios_license:
00153 007E                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00154 00AE                        0A            .byte 0x0a,0x0d
00155 00B0                        0A            .byte 0x0a,0x0d
00156 00B2                        00            .byte 0x00
00157                       000000B3            vgabios_website:
00158 00B3                        50            .ascii "Please visit :"
00159 00C1                        0A            .byte 0x0a,0x0d
00160                                           ;;.ascii " . http://www.plex86.org"
00161                                           ;;.byte 0x0a,0x0d
00162 00C3                        20            .ascii " . http://bochs.sourceforge.net"
00163 00E2                        0A            .byte 0x0a,0x0d
00164 00E4                        20            .ascii " . http://www.nongnu.org/vgabios"
00165 0104                        0A            .byte 0x0a,0x0d
00166 0106                        0A            .byte 0x0a,0x0d
00167 0108                        00            .byte 0x00
00168                                           ;; ============================================================================================
00169                                           ;;
00170                                           ;; Init Entry point
00171                                           ;;
00172                                           ;; ============================================================================================
00173                       00000109            vgabios_init_func:
00174                                           ;; init vga card
00175 0109           E8         341D              call init_vga_card
00176                                           ;; init basic bios vars
00177 010C           E8         3479              call init_bios_area
00178                                           ;; set int10 vect
00179                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   010F           1E                           push ds
 +a   0110           31C0                         xor ax, ax
 +a   0112           8ED8                         mov ds, ax
 +a   0114           B8                   012A    mov ax,  #vgabios_int10_handler
 +a   0117           A3         0040              mov 0x10*4, ax
 +a   011A           B8                   C000    mov ax,  #0xC000
 +a   011D           A3         0042              mov 0x10*4+2, ax
 +a   0120           1F                           pop ds
00180                                           ;; display splash screen
00181 0121           E8         34B8              call _display_splash_screen
00182                                           ;; init video mode and clear the screen
00183 0124           B8                   0003    mov ax,#0x0003
00184 0127           CD                     10    int #0x10
00185                                           ;; show info
00186                                             ;call _display_info
00187 0129           CB                           retf
00188                                           ! 130 endasm
00189                                           !BCC_ENDASM
00190                                           ! 131 #asm
00191                                           !BCC_ASM
00192                       0000012A            vgabios_int10_handler:
00193 012A           9C                           pushf
00194 012B           80FC                   0F    cmp ah, #0x0f
00195 012E           75           06              jne int10_test_1A
00196 0130           E8         6059              call biosfn_get_video_mode
00197 0133           E9         008B              jmp int10_end
00198                       00000136            int10_test_1A:
00199 0136           80FC                   1A    cmp ah, #0x1a
00200 0139           75           06              jne int10_test_0B
00201 013B           E8         6B9B              call biosfn_group_1A
00202 013E           E9         0080              jmp int10_end
00203                       00000141            int10_test_0B:
00204 0141           80FC                   0B    cmp ah, #0x0b
00205 0144           75           05              jne int10_test_1103
00206 0146           E8         5758              call biosfn_group_0B
00207 0149           EB           76              jmp int10_end
00208                       0000014B            int10_test_1103:
00209 014B           3D                   1103    cmp ax, #0x1103
00210 014E           75           05              jne int10_test_12
00211 0150           E8         6751              call biosfn_set_text_block_specifier
00212 0153           EB           6C              jmp int10_end
00213                       00000155            int10_test_12:
00214 0155           80FC                   12    cmp ah, #0x12
00215 0158           75           3C              jne int10_test_101B
00216 015A           80FB                   10    cmp bl, #0x10
00217 015D           75           05              jne int10_test_BL30
00218 015F           E8         699C              call biosfn_get_ega_info
00219 0162           EB           5D              jmp int10_end
00220                       00000164            int10_test_BL30:
00221 0164           80FB                   30    cmp bl, #0x30
00222 0167           75           05              jne int10_test_BL31
00223 0169           E8         69B6              call biosfn_select_vert_res
00224 016C           EB           53              jmp int10_end
00225                       0000016E            int10_test_BL31:
00226 016E           80FB                   31    cmp bl, #0x31
00227 0171           75           05              jne int10_test_BL32
00228 0173           E8         69FF              call biosfn_enable_default_palette_loading
00229 0176           EB           49              jmp int10_end
00230                       00000178            int10_test_BL32:
00231 0178           80FB                   32    cmp bl, #0x32
00232 017B           75           05              jne int10_test_BL33
00233 017D           E8         6A1A              call biosfn_enable_video_addressing
00234 0180           EB           3F              jmp int10_end
00235                       00000182            int10_test_BL33:
00236 0182           80FB                   33    cmp bl, #0x33
00237 0185           75           05              jne int10_test_BL34
00238 0187           E8         6A2E              call biosfn_enable_grayscale_summing
00239 018A           EB           35              jmp int10_end
00240                       0000018C            int10_test_BL34:
00241 018C           80FB                   34    cmp bl, #0x34
00242 018F           75           14              jne int10_normal
00243 0191           E8         6A48              call biosfn_enable_cursor_emulation
00244 0194           EB           2B              jmp int10_end
00245                       00000196            int10_test_101B:
00246 0196           3D                   101B    cmp ax, #0x101b
00247 0199           74           0A              je int10_normal
00248 019B           80FC                   10    cmp ah, #0x10
00249 019E           75           05              jne int10_normal
00250 01A0           E8         6010              call biosfn_group_10
00251 01A3           EB           1C              jmp int10_end
00252                       000001A5            int10_normal:
00253 01A5           06                           push es
00254 01A6           1E                           push ds
00255                                             ;pusha
00256 01A7           50                           push ax
00257 01A8           51                           push cx
00258 01A9           52                           push dx
00259 01AA           53                           push bx
00260 01AB           54                           push sp ; Should be old SP. But think we are okey.
00261 01AC           55                           push bp
00262 01AD           56                           push si
00263 01AE           57                           push di
00264                                           ;; We have to set ds to access the right data segment
00265 01AF           BB                   C000    mov bx, #0xc000
00266 01B2           8EDB                         mov ds, bx
00267 01B4           E8         346B              call _int10_func
00268                                             ;popa
00269 01B7           5F                           pop di
00270 01B8           5E                           pop si
00271 01B9           5D                           pop bp
00272 01BA           5B                           pop bx ; Should be old SP. Just discard it.
00273 01BB           5B                           pop bx
00274 01BC           5A                           pop dx
00275 01BD           59                           pop cx
00276 01BE           58                           pop ax
00277 01BF           1F                           pop ds
00278 01C0           07                           pop es
00279                       000001C1            int10_end:
00280 01C1           9D                           popf
00281 01C2           CF                           iret
00282                                           ! 222 endasm
00283                                           !BCC_ENDASM
00284                                           ! 223 typedef struct
00285                                           ! 224 {Bit8u svgamode;
00286                                           !BCC_EOS
00287                                           ! 225  Bit8u class;
00288                                           !BCC_EOS
00289                                           ! 226  Bit8u memmodel;
00290                                           !BCC_EOS
00291                                           ! 227  Bit8u pixbits;
00292                                           !BCC_EOS
00293                                           ! 228  Bit16u sstart;
00294                                           !BCC_EOS
00295                                           ! 229  Bit8u pelmask;
00296                                           !BCC_EOS
00297                                           ! 230  Bit8u dacmodel;
00298                                           !BCC_EOS
00299                                           ! 231 } VGAMODES;
00300                                           !BCC_EOS
00301                                           ! 232 static VGAMODES vga_modes[15 +1]=
00302                                           ! 233 {
00303                                           
00304                       000001C3            _vga_modes:
00305                                           ! 234  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00306 01C3                        00            .byte	0
00307 01C4                        00            .byte	0
00308 01C5                        00            .byte	0
00309 01C6                        04            .byte	4
00310 01C7                      B800            .word	$B800
00311 01C9                        FF            .byte	$FF
00312 01CA                        02            .byte	2
00313                                           ! 235  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00314 01CB                        01            .byte	1
00315 01CC                        00            .byte	0
00316 01CD                        00            .byte	0
00317 01CE                        04            .byte	4
00318 01CF                      B800            .word	$B800
00319 01D1                        FF            .byte	$FF
00320 01D2                        02            .byte	2
00321                                           ! 236  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00322 01D3                        02            .byte	2
00323 01D4                        00            .byte	0
00324 01D5                        00            .byte	0
00325 01D6                        04            .byte	4
00326 01D7                      B800            .word	$B800
00327 01D9                        FF            .byte	$FF
00328 01DA                        02            .byte	2
00329                                           ! 237  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00330 01DB                        03            .byte	3
00331 01DC                        00            .byte	0
00332 01DD                        00            .byte	0
00333 01DE                        04            .byte	4
00334 01DF                      B800            .word	$B800
00335 01E1                        FF            .byte	$FF
00336 01E2                        02            .byte	2
00337                                           ! 238  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00338 01E3                        04            .byte	4
00339 01E4                        01            .byte	1
00340 01E5                        02            .byte	2
00341 01E6                        02            .byte	2
00342 01E7                      B800            .word	$B800
00343 01E9                        FF            .byte	$FF
00344 01EA                        01            .byte	1
00345                                           ! 239  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00346 01EB                        05            .byte	5
00347 01EC                        01            .byte	1
00348 01ED                        02            .byte	2
00349 01EE                        02            .byte	2
00350 01EF                      B800            .word	$B800
00351 01F1                        FF            .byte	$FF
00352 01F2                        01            .byte	1
00353                                           ! 240  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00354 01F3                        06            .byte	6
00355 01F4                        01            .byte	1
00356 01F5                        02            .byte	2
00357 01F6                        01            .byte	1
00358 01F7                      B800            .word	$B800
00359 01F9                        FF            .byte	$FF
00360 01FA                        01            .byte	1
00361                                           ! 241  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00362 01FB                        07            .byte	7
00363 01FC                        00            .byte	0
00364 01FD                        01            .byte	1
00365 01FE                        04            .byte	4
00366 01FF                      B000            .word	$B000
00367 0201                        FF            .byte	$FF
00368 0202                        00            .byte	0
00369                                           ! 242  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00370 0203                        0D            .byte	$D
00371 0204                        01            .byte	1
00372 0205                        04            .byte	4
00373 0206                        04            .byte	4
00374 0207                      A000            .word	$A000
00375 0209                        FF            .byte	$FF
00376 020A                        01            .byte	1
00377                                           ! 243  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00378 020B                        0E            .byte	$E
00379 020C                        01            .byte	1
00380 020D                        04            .byte	4
00381 020E                        04            .byte	4
00382 020F                      A000            .word	$A000
00383 0211                        FF            .byte	$FF
00384 0212                        01            .byte	1
00385                                           ! 244  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00386 0213                        0F            .byte	$F
00387 0214                        01            .byte	1
00388 0215                        03            .byte	3
00389 0216                        01            .byte	1
00390 0217                      A000            .word	$A000
00391 0219                        FF            .byte	$FF
00392 021A                        00            .byte	0
00393                                           ! 245  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00394 021B                        10            .byte	$10
00395 021C                        01            .byte	1
00396 021D                        04            .byte	4
00397 021E                        04            .byte	4
00398 021F                      A000            .word	$A000
00399 0221                        FF            .byte	$FF
00400 0222                        02            .byte	2
00401                                           ! 246  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00402 0223                        11            .byte	$11
00403 0224                        01            .byte	1
00404 0225                        03            .byte	3
00405 0226                        01            .byte	1
00406 0227                      A000            .word	$A000
00407 0229                        FF            .byte	$FF
00408 022A                        02            .byte	2
00409                                           ! 247  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00410 022B                        12            .byte	$12
00411 022C                        01            .byte	1
00412 022D                        04            .byte	4
00413 022E                        04            .byte	4
00414 022F                      A000            .word	$A000
00415 0231                        FF            .byte	$FF
00416 0232                        02            .byte	2
00417                                           ! 248  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00418 0233                        13            .byte	$13
00419 0234                        01            .byte	1
00420 0235                        05            .byte	5
00421 0236                        08            .byte	8
00422 0237                      A000            .word	$A000
00423 0239                        FF            .byte	$FF
00424 023A                        03            .byte	3
00425                                           ! 249  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00426 023B                        6A            .byte	$6A
00427 023C                        01            .byte	1
00428 023D                        04            .byte	4
00429 023E                        04            .byte	4
00430 023F                      A000            .word	$A000
00431 0241                        FF            .byte	$FF
00432 0242                        02            .byte	2
00433                                           ! 250 };
00434                                           !BCC_EOS
00435                                           ! 251 static Bit8u line_to_vpti[15 +1]={
00436                       00000243            _line_to_vpti:
00437                                           ! 252     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00438 0243                        17            .byte	$17
00439 0244                        17            .byte	$17
00440 0245                        18            .byte	$18
00441 0246                        18            .byte	$18
00442 0247                        04            .byte	4
00443 0248                        05            .byte	5
00444 0249                        06            .byte	6
00445 024A                        07            .byte	7
00446                                           ! 253     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00447 024B                        0D            .byte	$D
00448 024C                        0E            .byte	$E
00449 024D                        11            .byte	$11
00450 024E                        12            .byte	$12
00451 024F                        1A            .byte	$1A
00452 0250                        1B            .byte	$1B
00453 0251                        1C            .byte	$1C
00454 0252                        1D            .byte	$1D
00455                                           ! 254 };
00456                                           !BCC_EOS
00457                                           ! 255 static Bit8u dac_regs[3 +1]=
00458                                           ! 256 {0x3f,0x3f,0x3f,0xff};
00459                       00000253            _dac_regs:
00460 0253                        3F            .byte	$3F
00461 0254                        3F            .byte	$3F
00462 0255                        3F            .byte	$3F
00463 0256                        FF            .byte	$FF
00464                                           !BCC_EOS
00465                                           ! 257 typedef struct {
00466                                           ! 258     Bit8u twidth;
00467                                           !BCC_EOS
00468                                           ! 259     Bit8u theightm1;
00469                                           !BCC_EOS
00470                                           ! 260     Bit8u cheight;
00471                                           !BCC_EOS
00472                                           ! 261     Bit8u slen
00473                                           ! 261 gth_l;
00474                                           !BCC_EOS
00475                                           ! 262     Bit8u slength_h;
00476                                           !BCC_EOS
00477                                           ! 263     Bit8u sequ_regs[4];
00478                                           !BCC_EOS
00479                                           ! 264     Bit8u miscreg;
00480                                           !BCC_EOS
00481                                           ! 265     Bit8u crtc_regs[25];
00482                                           !BCC_EOS
00483                                           ! 266     Bit8u actl_regs[20];
00484                                           !BCC_EOS
00485                                           ! 267     Bit8u grdc_regs[9];
00486                                           !BCC_EOS
00487                                           ! 268 } VideoParamTableEntry;
00488                                           !BCC_EOS
00489                                           ! 269 static VideoParamTableEntry video_param_table[30] = {
00490                       00000257            _video_param_table:
00491                                           ! 270 {
00492                                           ! 271  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00493 0257                        00            .byte	0
00494 0258                        00            .byte	0
00495 0259                        00            .byte	0
00496 025A                        00            .byte	0
00497 025B                        00            .byte	0
00498 025C                        00            .byte	0
00499 025D                        00            .byte	0
00500 025E                        00            .byte	0
00501                                           ! 272  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00502 025F                        00            .byte	0
00503 0260                        00            .byte	0
00504 0261                        00            .byte	0
00505 0262                        00            .byte	0
00506 0263                        00            .byte	0
00507 0264                        00            .byte	0
00508 0265                        00            .byte	0
00509 0266                        00            .byte	0
00510                                           ! 273  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00511 0267                        00            .byte	0
00512 0268                        00            .byte	0
00513 0269                        00            .byte	0
00514 026A                        00            .byte	0
00515 026B                        00            .byte	0
00516 026C                        00            .byte	0
00517 026D                        00            .byte	0
00518 026E                        00            .byte	0
00519                                           ! 274  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00520 026F                        00            .byte	0
00521 0270                        00            .byte	0
00522 0271                        00            .byte	0
00523 0272                        00            .byte	0
00524 0273                        00            .byte	0
00525 0274                        00            .byte	0
00526 0275                        00            .byte	0
00527 0276                        00            .byte	0
00528                                           ! 275  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00529 0277                        00            .byte	0
00530 0278                        00            .byte	0
00531 0279                        00            .byte	0
00532 027A                        00            .byte	0
00533 027B                        00            .byte	0
00534 027C                        00            .byte	0
00535 027D                        00            .byte	0
00536 027E                        00            .byte	0
00537                                           ! 276  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00538 027F                        00            .byte	0
00539 0280                        00            .byte	0
00540 0281                        00            .byte	0
00541 0282                        00            .byte	0
00542 0283                        00            .byte	0
00543 0284                        00            .byte	0
00544 0285                        00            .byte	0
00545 0286                        00            .byte	0
00546                                           ! 277  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00547 0287                        00            .byte	0
00548 0288                        00            .byte	0
00549 0289                        00            .byte	0
00550 028A                        00            .byte	0
00551 028B                        00            .byte	0
00552 028C                        00            .byte	0
00553 028D                        00            .byte	0
00554 028E                        00            .byte	0
00555                                           ! 278  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00556 028F                        00            .byte	0
00557 0290                        00            .byte	0
00558 0291                        00            .byte	0
00559 0292                        00            .byte	0
00560 0293                        00            .byte	0
00561 0294                        00            .byte	0
00562 0295                        00            .byte	0
00563 0296                        00            .byte	0
00564                                           ! 279 },
00565                                           ! 280 {
00566                                           ! 281  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00567 0297                        00            .byte	0
00568 0298                        00            .byte	0
00569 0299                        00            .byte	0
00570 029A                        00            .byte	0
00571 029B                        00            .byte	0
00572 029C                        00            .byte	0
00573 029D                        00            .byte	0
00574 029E                        00            .byte	0
00575                                           ! 282  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00576 029F                        00            .byte	0
00577 02A0                        00            .byte	0
00578 02A1                        00            .byte	0
00579 02A2                        00            .byte	0
00580 02A3                        00            .byte	0
00581 02A4                        00            .byte	0
00582 02A5                        00            .byte	0
00583 02A6                        00            .byte	0
00584                                           ! 283  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00585 02A7                        00            .byte	0
00586 02A8                        00            .byte	0
00587 02A9                        00            .byte	0
00588 02AA                        00            .byte	0
00589 02AB                        00            .byte	0
00590 02AC                        00            .byte	0
00591 02AD                        00            .byte	0
00592 02AE                        00            .byte	0
00593                                           ! 284  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00594 02AF                        00            .byte	0
00595 02B0                        00            .byte	0
00596 02B1                        00            .byte	0
00597 02B2                        00            .byte	0
00598 02B3                        00            .byte	0
00599 02B4                        00            .byte	0
00600 02B5                        00            .byte	0
00601 02B6                        00            .byte	0
00602                                           ! 285  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00603 02B7                        00            .byte	0
00604 02B8                        00            .byte	0
00605 02B9                        00            .byte	0
00606 02BA                        00            .byte	0
00607 02BB                        00            .byte	0
00608 02BC                        00            .byte	0
00609 02BD                        00            .byte	0
00610 02BE                        00            .byte	0
00611                                           ! 286  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00612 02BF                        00            .byte	0
00613 02C0                        00            .byte	0
00614 02C1                        00            .byte	0
00615 02C2                        00            .byte	0
00616 02C3                        00            .byte	0
00617 02C4                        00            .byte	0
00618 02C5                        00            .byte	0
00619 02C6                        00            .byte	0
00620                                           ! 287  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00621 02C7                        00            .byte	0
00622 02C8                        00            .byte	0
00623 02C9                        00            .byte	0
00624 02CA                        00            .byte	0
00625 02CB                        00            .byte	0
00626 02CC                        00            .byte	0
00627 02CD                        00            .byte	0
00628 02CE                        00            .byte	0
00629                                           ! 288  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00630 02CF                        00            .byte	0
00631 02D0                        00            .byte	0
00632 02D1                        00            .byte	0
00633 02D2                        00            .byte	0
00634 02D3                        00            .byte	0
00635 02D4                        00            .byte	0
00636 02D5                        00            .byte	0
00637 02D6                        00            .byte	0
00638                                           ! 289 },
00639                                           ! 290 {
00640                                           ! 291  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00641 02D7                        00            .byte	0
00642 02D8                        00            .byte	0
00643 02D9                        00            .byte	0
00644 02DA                        00            .byte	0
00645 02DB                        00            .byte	0
00646 02DC                        00            .byte	0
00647 02DD                        00            .byte	0
00648 02DE                        00            .byte	0
00649                                           ! 292  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00650 02DF                        00            .byte	0
00651 02E0                        00            .byte	0
00652 02E1                        00            .byte	0
00653 02E2                        00            .byte	0
00654 02E3                        00            .byte	0
00655 02E4                        00            .byte	0
00656 02E5                        00            .byte	0
00657 02E6                        00            .byte	0
00658                                           ! 293  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00659 02E7                        00            .byte	0
00660 02E8                        00            .byte	0
00661 02E9                        00            .byte	0
00662 02EA                        00            .byte	0
00663 02EB                        00            .byte	0
00664 02EC                        00            .byte	0
00665 02ED                        00            .byte	0
00666 02EE                        00            .byte	0
00667                                           ! 294  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00668 02EF                        00            .byte	0
00669 02F0                        00            .byte	0
00670 02F1                        00            .byte	0
00671 02F2                        00            .byte	0
00672 02F3                        00            .byte	0
00673 02F4                        00            .byte	0
00674 02F5                        00            .byte	0
00675 02F6                        00            .byte	0
00676                                           ! 295  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00677 02F7                        00            .byte	0
00678 02F8                        00            .byte	0
00679 02F9                        00            .byte	0
00680 02FA                        00            .byte	0
00681 02FB                        00            .byte	0
00682 02FC                        00            .byte	0
00683 02FD                        00            .byte	0
00684 02FE                        00            .byte	0
00685                                           ! 296  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00686 02FF                        00            .byte	0
00687 0300                        00            .byte	0
00688 0301                        00            .byte	0
00689 0302                        00            .byte	0
00690 0303                        00            .byte	0
00691 0304                        00            .byte	0
00692 0305                        00            .byte	0
00693 0306                        00            .byte	0
00694                                           ! 297  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00695 0307                        00            .byte	0
00696 0308                        00            .byte	0
00697 0309                        00            .byte	0
00698 030A                        00            .byte	0
00699 030B                        00            .byte	0
00700 030C                        00            .byte	0
00701 030D                        00            .byte	0
00702 030E                        00            .byte	0
00703                                           ! 298  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00704 030F                        00            .byte	0
00705 0310                        00            .byte	0
00706 0311                        00            .byte	0
00707 0312                        00            .byte	0
00708 0313                        00            .byte	0
00709 0314                        00            .byte	0
00710 0315                        00            .byte	0
00711 0316                        00            .byte	0
00712                                           ! 299 },
00713                                           ! 300 {
00714                                           ! 301  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00715 0317                        00            .byte	0
00716 0318                        00            .byte	0
00717 0319                        00            .byte	0
00718 031A                        00            .byte	0
00719 031B                        00            .byte	0
00720 031C                        00            .byte	0
00721 031D                        00            .byte	0
00722 031E                        00            .byte	0
00723                                           ! 302  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00724 031F                        00            .byte	0
00725 0320                        00            .byte	0
00726 0321                        00            .byte	0
00727 0322                        00            .byte	0
00728 0323                        00            .byte	0
00729 0324                        00            .byte	0
00730 0325                        00            .byte	0
00731 0326                        00            .byte	0
00732                                           ! 303  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00733 0327                        00            .byte	0
00734 0328                        00            .byte	0
00735 0329                        00            .byte	0
00736 032A                        00            .byte	0
00737 032B                        00            .byte	0
00738 032C                        00            .byte	0
00739 032D                        00            .byte	0
00740 032E                        00            .byte	0
00741                                           ! 304  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00742 032F                        00            .byte	0
00743 0330                        00            .byte	0
00744 0331                        00            .byte	0
00745 0332                        00            .byte	0
00746 0333                        00            .byte	0
00747 0334                        00            .byte	0
00748 0335                        00            .byte	0
00749 0336                        00            .byte	0
00750                                           ! 305  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00751 0337                        00            .byte	0
00752 0338                        00            .byte	0
00753 0339                        00            .byte	0
00754 033A                        00            .byte	0
00755 033B                        00            .byte	0
00756 033C                        00            .byte	0
00757 033D                        00            .byte	0
00758 033E                        00            .byte	0
00759                                           ! 306  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00760 033F                        00            .byte	0
00761 0340                        00            .byte	0
00762 0341                        00            .byte	0
00763 0342                        00            .byte	0
00764 0343                        00            .byte	0
00765 0344                        00            .byte	0
00766 0345                        00            .byte	0
00767 0346                        00            .byte	0
00768                                           ! 307  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00769 0347                        00            .byte	0
00770 0348                        00            .byte	0
00771 0349                        00            .byte	0
00772 034A                        00            .byte	0
00773 034B                        00            .byte	0
00774 034C                        00            .byte	0
00775 034D                        00            .byte	0
00776 034E                        00            .byte	0
00777                                           ! 308  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00778 034F                        00            .byte	0
00779 0350                        00            .byte	0
00780 0351                        00            .byte	0
00781 0352                        00            .byte	0
00782 0353                        00            .byte	0
00783 0354                        00            .byte	0
00784 0355                        00            .byte	0
00785 0356                        00            .byte	0
00786                                           ! 309 },
00787                                           ! 310 {
00788                                           ! 311  40, 24, 8, 0x00, 0x08,
00789 0357                        28            .byte	$28
00790 0358                        18            .byte	$18
00791 0359                        08            .byte	8
00792 035A                        00            .byte	0
00793 035B                        08            .byte	8
00794                                           ! 312  0x09, 0x03, 0x00, 0x02,
00795 035C                        09            .byte	9
00796 035D                        03            .byte	3
00797 035E                        00            .byte	0
00798 035F                        02            .byte	2
00799                                           ! 313  0x63,
00800 0360                        63            .byte	$63
00801                                           ! 314  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00802 0361                        2D            .byte	$2D
00803 0362                        27            .byte	$27
00804 0363                        28            .byte	$28
00805 0364                        90            .byte	$90
00806 0365                        2B            .byte	$2B
00807 0366                        80            .byte	$80
00808 0367                        BF            .byte	$BF
00809 0368                        1F            .byte	$1F
00810                                           ! 315  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00811 0369                        00            .byte	0
00812 036A                        C1            .byte	$C1
00813 036B                        00            .byte	0
00814 036C                        00            .byte	0
00815 036D                        00            .byte	0
00816 036E                        00            .byte	0
00817 036F                        00            .byte	0
00818 0370                        00            .byte	0
00819                                           ! 316  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
00820 0371                        9C            .byte	$9C
00821 0372                        8E            .byte	$8E
00822 0373                        8F            .byte	$8F
00823 0374                        14            .byte	$14
00824 0375                        00            .byte	0
00825 0376                        96            .byte	$96
00826 0377                        B9            .byte	$B9
00827 0378                        A2            .byte	$A2
00828                                           ! 317  0xff,
00829 0379                        FF            .byte	$FF
00830                                           ! 318  0x00, 0x13, 0x15, 0x17, 
00831 037A                        00            .byte	0
00832 037B                        13            .byte	$13
00833 037C                        15            .byte	$15
00834 037D                        17            .byte	$17
00835                                           ! 318 0x02, 0x04, 0x06, 0x07,
00836 037E                        02            .byte	2
00837 037F                        04            .byte	4
00838 0380                        06            .byte	6
00839 0381                        07            .byte	7
00840                                           ! 319  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00841 0382                        10            .byte	$10
00842 0383                        11            .byte	$11
00843 0384                        12            .byte	$12
00844 0385                        13            .byte	$13
00845 0386                        14            .byte	$14
00846 0387                        15            .byte	$15
00847 0388                        16            .byte	$16
00848 0389                        17            .byte	$17
00849                                           ! 320  0x01, 0x00, 0x03, 0x00,
00850 038A                        01            .byte	1
00851 038B                        00            .byte	0
00852 038C                        03            .byte	3
00853 038D                        00            .byte	0
00854                                           ! 321  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00855 038E                        00            .byte	0
00856 038F                        00            .byte	0
00857 0390                        00            .byte	0
00858 0391                        00            .byte	0
00859 0392                        00            .byte	0
00860 0393                        30            .byte	$30
00861 0394                        0F            .byte	$F
00862 0395                        0F            .byte	$F
00863 0396                        FF            .byte	$FF
00864                                           ! 322 },
00865                                           ! 323 {
00866                                           ! 324  40, 24, 8, 0x00, 0x08,
00867 0397                        28            .byte	$28
00868 0398                        18            .byte	$18
00869 0399                        08            .byte	8
00870 039A                        00            .byte	0
00871 039B                        08            .byte	8
00872                                           ! 325  0x09, 0x03, 0x00, 0x02,
00873 039C                        09            .byte	9
00874 039D                        03            .byte	3
00875 039E                        00            .byte	0
00876 039F                        02            .byte	2
00877                                           ! 326  0x63,
00878 03A0                        63            .byte	$63
00879                                           ! 327  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00880 03A1                        2D            .byte	$2D
00881 03A2                        27            .byte	$27
00882 03A3                        28            .byte	$28
00883 03A4                        90            .byte	$90
00884 03A5                        2B            .byte	$2B
00885 03A6                        80            .byte	$80
00886 03A7                        BF            .byte	$BF
00887 03A8                        1F            .byte	$1F
00888                                           ! 328  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00889 03A9                        00            .byte	0
00890 03AA                        C1            .byte	$C1
00891 03AB                        00            .byte	0
00892 03AC                        00            .byte	0
00893 03AD                        00            .byte	0
00894 03AE                        00            .byte	0
00895 03AF                        00            .byte	0
00896 03B0                        00            .byte	0
00897                                           ! 329  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
00898 03B1                        9C            .byte	$9C
00899 03B2                        8E            .byte	$8E
00900 03B3                        8F            .byte	$8F
00901 03B4                        14            .byte	$14
00902 03B5                        00            .byte	0
00903 03B6                        96            .byte	$96
00904 03B7                        B9            .byte	$B9
00905 03B8                        A2            .byte	$A2
00906                                           ! 330  0xff,
00907 03B9                        FF            .byte	$FF
00908                                           ! 331  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00909 03BA                        00            .byte	0
00910 03BB                        13            .byte	$13
00911 03BC                        15            .byte	$15
00912 03BD                        17            .byte	$17
00913 03BE                        02            .byte	2
00914 03BF                        04            .byte	4
00915 03C0                        06            .byte	6
00916 03C1                        07            .byte	7
00917                                           ! 332  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00918 03C2                        10            .byte	$10
00919 03C3                        11            .byte	$11
00920 03C4                        12            .byte	$12
00921 03C5                        13            .byte	$13
00922 03C6                        14            .byte	$14
00923 03C7                        15            .byte	$15
00924 03C8                        16            .byte	$16
00925 03C9                        17            .byte	$17
00926                                           ! 333  0x01, 0x00, 0x03, 0x00,
00927 03CA                        01            .byte	1
00928 03CB                        00            .byte	0
00929 03CC                        03            .byte	3
00930 03CD                        00            .byte	0
00931                                           ! 334  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00932 03CE                        00            .byte	0
00933 03CF                        00            .byte	0
00934 03D0                        00            .byte	0
00935 03D1                        00            .byte	0
00936 03D2                        00            .byte	0
00937 03D3                        30            .byte	$30
00938 03D4                        0F            .byte	$F
00939 03D5                        0F            .byte	$F
00940 03D6                        FF            .byte	$FF
00941                                           ! 335 },
00942                                           ! 336 {
00943                                           ! 337  80, 24, 8, 0x00, 0x10,
00944 03D7                        50            .byte	$50
00945 03D8                        18            .byte	$18
00946 03D9                        08            .byte	8
00947 03DA                        00            .byte	0
00948 03DB                        10            .byte	$10
00949                                           ! 338  0x01, 0x01, 0x00, 0x06,
00950 03DC                        01            .byte	1
00951 03DD                        01            .byte	1
00952 03DE                        00            .byte	0
00953 03DF                        06            .byte	6
00954                                           ! 339  0x63,
00955 03E0                        63            .byte	$63
00956                                           ! 340  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
00957 03E1                        5F            .byte	$5F
00958 03E2                        4F            .byte	$4F
00959 03E3                        50            .byte	$50
00960 03E4                        82            .byte	$82
00961 03E5                        54            .byte	$54
00962 03E6                        80            .byte	$80
00963 03E7                        BF            .byte	$BF
00964 03E8                        1F            .byte	$1F
00965                                           ! 341  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00966 03E9                        00            .byte	0
00967 03EA                        C1            .byte	$C1
00968 03EB                        00            .byte	0
00969 03EC                        00            .byte	0
00970 03ED                        00            .byte	0
00971 03EE                        00            .byte	0
00972 03EF                        00            .byte	0
00973 03F0                        00            .byte	0
00974                                           ! 342  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
00975 03F1                        9C            .byte	$9C
00976 03F2                        8E            .byte	$8E
00977 03F3                        8F            .byte	$8F
00978 03F4                        28            .byte	$28
00979 03F5                        00            .byte	0
00980 03F6                        96            .byte	$96
00981 03F7                        B9            .byte	$B9
00982 03F8                        C2            .byte	$C2
00983                                           ! 343  0xff,
00984 03F9                        FF            .byte	$FF
00985                                           ! 344  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
00986 03FA                        00            .byte	0
00987 03FB                        17            .byte	$17
00988 03FC                        17            .byte	$17
00989 03FD                        17            .byte	$17
00990 03FE                        17            .byte	$17
00991 03FF                        17            .byte	$17
00992 0400                        17            .byte	$17
00993 0401                        17            .byte	$17
00994                                           ! 345  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
00995 0402                        17            .byte	$17
00996 0403                        17            .byte	$17
00997 0404                        17            .byte	$17
00998 0405                        17            .byte	$17
00999 0406                        17            .byte	$17
01000 0407                        17            .byte	$17
01001 0408                        17            .byte	$17
01002 0409                        17            .byte	$17
01003                                           ! 346  0x01, 0x00, 0x01, 0x00,
01004 040A                        01            .byte	1
01005 040B                        00            .byte	0
01006 040C                        01            .byte	1
01007 040D                        00            .byte	0
01008                                           ! 347  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01009 040E                        00            .byte	0
01010 040F                        00            .byte	0
01011 0410                        00            .byte	0
01012 0411                        00            .byte	0
01013 0412                        00            .byte	0
01014 0413                        00            .byte	0
01015 0414                        0D            .byte	$D
01016 0415                        0F            .byte	$F
01017 0416                        FF            .byte	$FF
01018                                           ! 348 },
01019                                           ! 349 {
01020                                           ! 350  80, 24, 16, 0x00, 0x10,
01021 0417                        50            .byte	$50
01022 0418                        18            .byte	$18
01023 0419                        10            .byte	$10
01024 041A                        00            .byte	0
01025 041B                        10            .byte	$10
01026                                           ! 351  0x00, 0x03, 0x00, 0x02,
01027 041C                        00            .byte	0
01028 041D                        03            .byte	3
01029 041E                        00            .byte	0
01030 041F                        02            .byte	2
01031                                           ! 352  0x66,
01032 0420                        66            .byte	$66
01033                                           ! 353  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01034 0421                        5F            .byte	$5F
01035 0422                        4F            .byte	$4F
01036 0423                        50            .byte	$50
01037 0424                        82            .byte	$82
01038 0425                        55            .byte	$55
01039 0426                        81            .byte	$81
01040 0427                        BF            .byte	$BF
01041 0428                        1F            .byte	$1F
01042                                           ! 354  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01043 0429                        00            .byte	0
01044 042A                        4F            .byte	$4F
01045 042B                        0D            .byte	$D
01046 042C                        0E            .byte	$E
01047 042D                        00            .byte	0
01048 042E                        00            .byte	0
01049 042F                        00            .byte	0
01050 0430                        00            .byte	0
01051                                           ! 355  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01052 0431                        9C            .byte	$9C
01053 0432                        8E            .byte	$8E
01054 0433                        8F            .byte	$8F
01055 0434                        28            .byte	$28
01056 0435                        0F            .byte	$F
01057 0436                        96            .byte	$96
01058 0437                        B9            .byte	$B9
01059 0438                        A3            .byte	$A3
01060                                           ! 356  0xff,
01061 0439                        FF            .byte	$FF
01062                                           ! 357  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01063 043A                        00            .byte	0
01064 043B                        08            .byte	8
01065 043C                        08            .byte	8
01066 043D                        08            .byte	8
01067 043E                        08            .byte	8
01068 043F                        08            .byte	8
01069 0440                        08            .byte	8
01070 0441                        08            .byte	8
01071                                           ! 358  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01072 0442                        10            .byte	$10
01073 0443                        18            .byte	$18
01074 0444                        18            .byte	$18
01075 0445                        18            .byte	$18
01076 0446                        18            .byte	$18
01077 0447                        18            .byte	$18
01078 0448                        18            .byte	$18
01079 0449                        18            .byte	$18
01080                                           ! 359  0x0e, 0x00, 0x0f, 0x08,
01081 044A                        0E            .byte	$E
01082 044B                        00            .byte	0
01083 044C                        0F            .byte	$F
01084 044D                        08            .byte	8
01085                                           ! 360  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01086 044E                        00            .byte	0
01087 044F                        00            .byte	0
01088 0450                        00            .byte	0
01089 0451                        00            .byte	0
01090 0452                        00            .byte	0
01091 0453                        10            .byte	$10
01092 0454                        0A            .byte	$A
01093 0455                        0F            .byte	$F
01094 0456                        FF            .byte	$FF
01095                                           ! 361 },
01096                                           ! 362 {
01097                                           ! 363  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01098 0457                        00            .byte	0
01099 0458                        00            .byte	0
01100 0459                        00            .byte	0
01101 045A                        00            .byte	0
01102 045B                        00            .byte	0
01103 045C                        00            .byte	0
01104 045D                        00            .byte	0
01105 045E                        00            .byte	0
01106                                           ! 364  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01107 045F                        00            .byte	0
01108 0460                        00            .byte	0
01109 0461                        00            .byte	0
01110 0462                        00            .byte	0
01111 0463                        00            .byte	0
01112 0464                        00            .byte	0
01113 0465                        00            .byte	0
01114 0466                        00            .byte	0
01115                                           ! 365  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01116 0467                        00            .byte	0
01117 0468                        00            .byte	0
01118 0469                        00            .byte	0
01119 046A                        00            .byte	0
01120 046B                        00            .byte	0
01121 046C                        00            .byte	0
01122 046D                        00            .byte	0
01123 046E                        00            .byte	0
01124                                           ! 366  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01125 046F                        00            .byte	0
01126 0470                        00            .byte	0
01127 0471                        00            .byte	0
01128 0472                        00            .byte	0
01129 0473                        00            .byte	0
01130 0474                        00            .byte	0
01131 0475                        00            .byte	0
01132 0476                        00            .byte	0
01133                                           ! 367  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01134 0477                        00            .byte	0
01135 0478                        00            .byte	0
01136 0479                        00            .byte	0
01137 047A                        00            .byte	0
01138 047B                        00            .byte	0
01139 047C                        00            .byte	0
01140 047D                        00            .byte	0
01141 047E                        00            .byte	0
01142                                           ! 368  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01143 047F                        00            .byte	0
01144 0480                        00            .byte	0
01145 0481                        00            .byte	0
01146 0482                        00            .byte	0
01147 0483                        00            .byte	0
01148 0484                        00            .byte	0
01149 0485                        00            .byte	0
01150 0486                        00            .byte	0
01151                                           ! 369  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01152 0487                        00            .byte	0
01153 0488                        00            .byte	0
01154 0489                        00            .byte	0
01155 048A                        00            .byte	0
01156 048B                        00            .byte	0
01157 048C                        00            .byte	0
01158 048D                        00            .byte	0
01159 048E                        00            .byte	0
01160                                           ! 370  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01161 048F                        00            .byte	0
01162 0490                        00            .byte	0
01163 0491                        00            .byte	0
01164 0492                        00            .byte	0
01165 0493                        00            .byte	0
01166 0494                        00            .byte	0
01167 0495                        00            .byte	0
01168 0496                        00            .byte	0
01169                                           ! 371 },
01170                                           ! 372 {
01171                                           ! 373  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01172 0497                        00            .byte	0
01173 0498                        00            .byte	0
01174 0499                        00            .byte	0
01175 049A                        00            .byte	0
01176 049B                        00            .byte	0
01177 049C                        00            .byte	0
01178 049D                        00            .byte	0
01179 049E                        00            .byte	0
01180                                           ! 374  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01181 049F                        00            .byte	0
01182 04A0                        00            .byte	0
01183 04A1                        00            .byte	0
01184 04A2                        00            .byte	0
01185 04A3                        00            .byte	0
01186 04A4                        00            .byte	0
01187 04A5                        00            .byte	0
01188 04A6                        00            .byte	0
01189                                           ! 375  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01190 04A7                        00            .byte	0
01191 04A8                        00            .byte	0
01192 04A9                        00            .byte	0
01193 04AA                        00            .byte	0
01194 04AB                        00            .byte	0
01195 04AC                        00            .byte	0
01196 04AD                        00            .byte	0
01197 04AE                        00            .byte	0
01198                                           ! 376  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01199 04AF                        00            .byte	0
01200 04B0                        00            .byte	0
01201 04B1                        00            .byte	0
01202 04B2                        00            .byte	0
01203 04B3                        00            .byte	0
01204 04B4                        00            .byte	0
01205 04B5                        00            .byte	0
01206 04B6                        00            .byte	0
01207                                           ! 377  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01208 04B7                        00            .byte	0
01209 04B8                        00            .byte	0
01210 04B9                        00            .byte	0
01211 04BA                        00            .byte	0
01212 04BB                        00            .byte	0
01213 04BC                        00            .byte	0
01214 04BD                        00            .byte	0
01215 04BE                        00            .byte	0
01216                                           ! 378  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01217 04BF                        00            .byte	0
01218 04C0                        00            .byte	0
01219 04C1                        00            .byte	0
01220 04C2                        00            .byte	0
01221 04C3                        00            .byte	0
01222 04C4                        00            .byte	0
01223 04C5                        00            .byte	0
01224 04C6                        00            .byte	0
01225                                           ! 379  0x00, 0x00, 0x00, 
01226 04C7                        00            .byte	0
01227 04C8                        00            .byte	0
01228 04C9                        00            .byte	0
01229                                           ! 379 0x00, 0x00, 0x00, 0x00, 0x00,
01230 04CA                        00            .byte	0
01231 04CB                        00            .byte	0
01232 04CC                        00            .byte	0
01233 04CD                        00            .byte	0
01234 04CE                        00            .byte	0
01235                                           ! 380  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01236 04CF                        00            .byte	0
01237 04D0                        00            .byte	0
01238 04D1                        00            .byte	0
01239 04D2                        00            .byte	0
01240 04D3                        00            .byte	0
01241 04D4                        00            .byte	0
01242 04D5                        00            .byte	0
01243 04D6                        00            .byte	0
01244                                           ! 381 },
01245                                           ! 382 {
01246                                           ! 383  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01247 04D7                        00            .byte	0
01248 04D8                        00            .byte	0
01249 04D9                        00            .byte	0
01250 04DA                        00            .byte	0
01251 04DB                        00            .byte	0
01252 04DC                        00            .byte	0
01253 04DD                        00            .byte	0
01254 04DE                        00            .byte	0
01255                                           ! 384  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01256 04DF                        00            .byte	0
01257 04E0                        00            .byte	0
01258 04E1                        00            .byte	0
01259 04E2                        00            .byte	0
01260 04E3                        00            .byte	0
01261 04E4                        00            .byte	0
01262 04E5                        00            .byte	0
01263 04E6                        00            .byte	0
01264                                           ! 385  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01265 04E7                        00            .byte	0
01266 04E8                        00            .byte	0
01267 04E9                        00            .byte	0
01268 04EA                        00            .byte	0
01269 04EB                        00            .byte	0
01270 04EC                        00            .byte	0
01271 04ED                        00            .byte	0
01272 04EE                        00            .byte	0
01273                                           ! 386  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01274 04EF                        00            .byte	0
01275 04F0                        00            .byte	0
01276 04F1                        00            .byte	0
01277 04F2                        00            .byte	0
01278 04F3                        00            .byte	0
01279 04F4                        00            .byte	0
01280 04F5                        00            .byte	0
01281 04F6                        00            .byte	0
01282                                           ! 387  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01283 04F7                        00            .byte	0
01284 04F8                        00            .byte	0
01285 04F9                        00            .byte	0
01286 04FA                        00            .byte	0
01287 04FB                        00            .byte	0
01288 04FC                        00            .byte	0
01289 04FD                        00            .byte	0
01290 04FE                        00            .byte	0
01291                                           ! 388  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01292 04FF                        00            .byte	0
01293 0500                        00            .byte	0
01294 0501                        00            .byte	0
01295 0502                        00            .byte	0
01296 0503                        00            .byte	0
01297 0504                        00            .byte	0
01298 0505                        00            .byte	0
01299 0506                        00            .byte	0
01300                                           ! 389  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01301 0507                        00            .byte	0
01302 0508                        00            .byte	0
01303 0509                        00            .byte	0
01304 050A                        00            .byte	0
01305 050B                        00            .byte	0
01306 050C                        00            .byte	0
01307 050D                        00            .byte	0
01308 050E                        00            .byte	0
01309                                           ! 390  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01310 050F                        00            .byte	0
01311 0510                        00            .byte	0
01312 0511                        00            .byte	0
01313 0512                        00            .byte	0
01314 0513                        00            .byte	0
01315 0514                        00            .byte	0
01316 0515                        00            .byte	0
01317 0516                        00            .byte	0
01318                                           ! 391 },
01319                                           ! 392 {
01320                                           ! 393  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01321 0517                        00            .byte	0
01322 0518                        00            .byte	0
01323 0519                        00            .byte	0
01324 051A                        00            .byte	0
01325 051B                        00            .byte	0
01326 051C                        00            .byte	0
01327 051D                        00            .byte	0
01328 051E                        00            .byte	0
01329                                           ! 394  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01330 051F                        00            .byte	0
01331 0520                        00            .byte	0
01332 0521                        00            .byte	0
01333 0522                        00            .byte	0
01334 0523                        00            .byte	0
01335 0524                        00            .byte	0
01336 0525                        00            .byte	0
01337 0526                        00            .byte	0
01338                                           ! 395  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01339 0527                        00            .byte	0
01340 0528                        00            .byte	0
01341 0529                        00            .byte	0
01342 052A                        00            .byte	0
01343 052B                        00            .byte	0
01344 052C                        00            .byte	0
01345 052D                        00            .byte	0
01346 052E                        00            .byte	0
01347                                           ! 396  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01348 052F                        00            .byte	0
01349 0530                        00            .byte	0
01350 0531                        00            .byte	0
01351 0532                        00            .byte	0
01352 0533                        00            .byte	0
01353 0534                        00            .byte	0
01354 0535                        00            .byte	0
01355 0536                        00            .byte	0
01356                                           ! 397  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01357 0537                        00            .byte	0
01358 0538                        00            .byte	0
01359 0539                        00            .byte	0
01360 053A                        00            .byte	0
01361 053B                        00            .byte	0
01362 053C                        00            .byte	0
01363 053D                        00            .byte	0
01364 053E                        00            .byte	0
01365                                           ! 398  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01366 053F                        00            .byte	0
01367 0540                        00            .byte	0
01368 0541                        00            .byte	0
01369 0542                        00            .byte	0
01370 0543                        00            .byte	0
01371 0544                        00            .byte	0
01372 0545                        00            .byte	0
01373 0546                        00            .byte	0
01374                                           ! 399  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01375 0547                        00            .byte	0
01376 0548                        00            .byte	0
01377 0549                        00            .byte	0
01378 054A                        00            .byte	0
01379 054B                        00            .byte	0
01380 054C                        00            .byte	0
01381 054D                        00            .byte	0
01382 054E                        00            .byte	0
01383                                           ! 400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01384 054F                        00            .byte	0
01385 0550                        00            .byte	0
01386 0551                        00            .byte	0
01387 0552                        00            .byte	0
01388 0553                        00            .byte	0
01389 0554                        00            .byte	0
01390 0555                        00            .byte	0
01391 0556                        00            .byte	0
01392                                           ! 401 },
01393                                           ! 402 {
01394                                           ! 403  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01395 0557                        00            .byte	0
01396 0558                        00            .byte	0
01397 0559                        00            .byte	0
01398 055A                        00            .byte	0
01399 055B                        00            .byte	0
01400 055C                        00            .byte	0
01401 055D                        00            .byte	0
01402 055E                        00            .byte	0
01403                                           ! 404  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01404 055F                        00            .byte	0
01405 0560                        00            .byte	0
01406 0561                        00            .byte	0
01407 0562                        00            .byte	0
01408 0563                        00            .byte	0
01409 0564                        00            .byte	0
01410 0565                        00            .byte	0
01411 0566                        00            .byte	0
01412                                           ! 405  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01413 0567                        00            .byte	0
01414 0568                        00            .byte	0
01415 0569                        00            .byte	0
01416 056A                        00            .byte	0
01417 056B                        00            .byte	0
01418 056C                        00            .byte	0
01419 056D                        00            .byte	0
01420 056E                        00            .byte	0
01421                                           ! 406  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01422 056F                        00            .byte	0
01423 0570                        00            .byte	0
01424 0571                        00            .byte	0
01425 0572                        00            .byte	0
01426 0573                        00            .byte	0
01427 0574                        00            .byte	0
01428 0575                        00            .byte	0
01429 0576                        00            .byte	0
01430                                           ! 407  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01431 0577                        00            .byte	0
01432 0578                        00            .byte	0
01433 0579                        00            .byte	0
01434 057A                        00            .byte	0
01435 057B                        00            .byte	0
01436 057C                        00            .byte	0
01437 057D                        00            .byte	0
01438 057E                        00            .byte	0
01439                                           ! 408  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01440 057F                        00            .byte	0
01441 0580                        00            .byte	0
01442 0581                        00            .byte	0
01443 0582                        00            .byte	0
01444 0583                        00            .byte	0
01445 0584                        00            .byte	0
01446 0585                        00            .byte	0
01447 0586                        00            .byte	0
01448                                           ! 409  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01449 0587                        00            .byte	0
01450 0588                        00            .byte	0
01451 0589                        00            .byte	0
01452 058A                        00            .byte	0
01453 058B                        00            .byte	0
01454 058C                        00            .byte	0
01455 058D                        00            .byte	0
01456 058E                        00            .byte	0
01457                                           ! 410  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01458 058F                        00            .byte	0
01459 0590                        00            .byte	0
01460 0591                        00            .byte	0
01461 0592                        00            .byte	0
01462 0593                        00            .byte	0
01463 0594                        00            .byte	0
01464 0595                        00            .byte	0
01465 0596                        00            .byte	0
01466                                           ! 411 },
01467                                           ! 412 {
01468                                           ! 413  40, 24, 8, 0x00, 0x20,
01469 0597                        28            .byte	$28
01470 0598                        18            .byte	$18
01471 0599                        08            .byte	8
01472 059A                        00            .byte	0
01473 059B                        20            .byte	$20
01474                                           ! 414  0x09, 0x0f, 0x00, 0x06,
01475 059C                        09            .byte	9
01476 059D                        0F            .byte	$F
01477 059E                        00            .byte	0
01478 059F                        06            .byte	6
01479                                           ! 415  0x63,
01480 05A0                        63            .byte	$63
01481                                           ! 416  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01482 05A1                        2D            .byte	$2D
01483 05A2                        27            .byte	$27
01484 05A3                        28            .byte	$28
01485 05A4                        90            .byte	$90
01486 05A5                        2B            .byte	$2B
01487 05A6                        80            .byte	$80
01488 05A7                        BF            .byte	$BF
01489 05A8                        1F            .byte	$1F
01490                                           ! 417  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01491 05A9                        00            .byte	0
01492 05AA                        C0            .byte	$C0
01493 05AB                        00            .byte	0
01494 05AC                        00            .byte	0
01495 05AD                        00            .byte	0
01496 05AE                        00            .byte	0
01497 05AF                        00            .byte	0
01498 05B0                        00            .byte	0
01499                                           ! 418  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01500 05B1                        9C            .byte	$9C
01501 05B2                        8E            .byte	$8E
01502 05B3                        8F            .byte	$8F
01503 05B4                        14            .byte	$14
01504 05B5                        00            .byte	0
01505 05B6                        96            .byte	$96
01506 05B7                        B9            .byte	$B9
01507 05B8                        E3            .byte	$E3
01508                                           ! 419  0xff,
01509 05B9                        FF            .byte	$FF
01510                                           ! 420  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01511 05BA                        00            .byte	0
01512 05BB                        01            .byte	1
01513 05BC                        02            .byte	2
01514 05BD                        03            .byte	3
01515 05BE                        04            .byte	4
01516 05BF                        05            .byte	5
01517 05C0                        06            .byte	6
01518 05C1                        07            .byte	7
01519                                           ! 421  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01520 05C2                        10            .byte	$10
01521 05C3                        11            .byte	$11
01522 05C4                        12            .byte	$12
01523 05C5                        13            .byte	$13
01524 05C6                        14            .byte	$14
01525 05C7                        15            .byte	$15
01526 05C8                        16            .byte	$16
01527 05C9                        17            .byte	$17
01528                                           ! 422  0x01, 0x00, 0x0f, 0x00,
01529 05CA                        01            .byte	1
01530 05CB                        00            .byte	0
01531 05CC                        0F            .byte	$F
01532 05CD                        00            .byte	0
01533                                           ! 423  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01534 05CE                        00            .byte	0
01535 05CF                        00            .byte	0
01536 05D0                        00            .byte	0
01537 05D1                        00            .byte	0
01538 05D2                        00            .byte	0
01539 05D3                        00            .byte	0
01540 05D4                        05            .byte	5
01541 05D5                        0F            .byte	$F
01542 05D6                        FF            .byte	$FF
01543                                           ! 424 },
01544                                           ! 425 {
01545                                           ! 426  80, 24, 8, 0x00, 0x40,
01546 05D7                        50            .byte	$50
01547 05D8                        18            .byte	$18
01548 05D9                        08            .byte	8
01549 05DA                        00            .byte	0
01550 05DB                        40            .byte	$40
01551                                           ! 427  0x01, 0x0f, 0x00, 0x06,
01552 05DC                        01            .byte	1
01553 05DD                        0F            .byte	$F
01554 05DE                        00            .byte	0
01555 05DF                        06            .byte	6
01556                                           ! 428  0x63,
01557 05E0                        63            .byte	$63
01558                                           ! 429  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01559 05E1                        5F            .byte	$5F
01560 05E2                        4F            .byte	$4F
01561 05E3                        50            .byte	$50
01562 05E4                        82            .byte	$82
01563 05E5                        54            .byte	$54
01564 05E6                        80            .byte	$80
01565 05E7                        BF            .byte	$BF
01566 05E8                        1F            .byte	$1F
01567                                           ! 430  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01568 05E9                        00            .byte	0
01569 05EA                        C0            .byte	$C0
01570 05EB                        00            .byte	0
01571 05EC                        00            .byte	0
01572 05ED                        00            .byte	0
01573 05EE                        00            .byte	0
01574 05EF                        00            .byte	0
01575 05F0                        00            .byte	0
01576                                           ! 431  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01577 05F1                        9C            .byte	$9C
01578 05F2                        8E            .byte	$8E
01579 05F3                        8F            .byte	$8F
01580 05F4                        28            .byte	$28
01581 05F5                        00            .byte	0
01582 05F6                        96            .byte	$96
01583 05F7                        B9            .byte	$B9
01584 05F8                        E3            .byte	$E3
01585                                           ! 432  0xff,
01586 05F9                        FF            .byte	$FF
01587                                           ! 433  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01588 05FA                        00            .byte	0
01589 05FB                        01            .byte	1
01590 05FC                        02            .byte	2
01591 05FD                        03            .byte	3
01592 05FE                        04            .byte	4
01593 05FF                        05            .byte	5
01594 0600                        06            .byte	6
01595 0601                        07            .byte	7
01596                                           ! 434  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01597 0602                        10            .byte	$10
01598 0603                        11            .byte	$11
01599 0604                        12            .byte	$12
01600 0605                        13            .byte	$13
01601 0606                        14            .byte	$14
01602 0607                        15            .byte	$15
01603 0608                        16            .byte	$16
01604 0609                        17            .byte	$17
01605                                           ! 435  0x01, 0x00, 0x0f, 0x00,
01606 060A                        01            .byte	1
01607 060B                        00            .byte	0
01608 060C                        0F            .byte	$F
01609 060D                        00            .byte	0
01610                                           ! 436  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f
01611 060E                        00            .byte	0
01612 060F                        00            .byte	0
01613 0610                        00            .byte	0
01614 0611                        00            .byte	0
01615 0612                        00            .byte	0
01616 0613                        00            .byte	0
01617 0614                        05            .byte	5
01618                                           ! 436 , 0xff,
01619 0615                        0F            .byte	$F
01620 0616                        FF            .byte	$FF
01621                                           ! 437 },
01622                                           ! 438 {
01623                                           ! 439  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01624 0617                        00            .byte	0
01625 0618                        00            .byte	0
01626 0619                        00            .byte	0
01627 061A                        00            .byte	0
01628 061B                        00            .byte	0
01629 061C                        00            .byte	0
01630 061D                        00            .byte	0
01631 061E                        00            .byte	0
01632                                           ! 440  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01633 061F                        00            .byte	0
01634 0620                        00            .byte	0
01635 0621                        00            .byte	0
01636 0622                        00            .byte	0
01637 0623                        00            .byte	0
01638 0624                        00            .byte	0
01639 0625                        00            .byte	0
01640 0626                        00            .byte	0
01641                                           ! 441  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01642 0627                        00            .byte	0
01643 0628                        00            .byte	0
01644 0629                        00            .byte	0
01645 062A                        00            .byte	0
01646 062B                        00            .byte	0
01647 062C                        00            .byte	0
01648 062D                        00            .byte	0
01649 062E                        00            .byte	0
01650                                           ! 442  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01651 062F                        00            .byte	0
01652 0630                        00            .byte	0
01653 0631                        00            .byte	0
01654 0632                        00            .byte	0
01655 0633                        00            .byte	0
01656 0634                        00            .byte	0
01657 0635                        00            .byte	0
01658 0636                        00            .byte	0
01659                                           ! 443  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01660 0637                        00            .byte	0
01661 0638                        00            .byte	0
01662 0639                        00            .byte	0
01663 063A                        00            .byte	0
01664 063B                        00            .byte	0
01665 063C                        00            .byte	0
01666 063D                        00            .byte	0
01667 063E                        00            .byte	0
01668                                           ! 444  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01669 063F                        00            .byte	0
01670 0640                        00            .byte	0
01671 0641                        00            .byte	0
01672 0642                        00            .byte	0
01673 0643                        00            .byte	0
01674 0644                        00            .byte	0
01675 0645                        00            .byte	0
01676 0646                        00            .byte	0
01677                                           ! 445  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01678 0647                        00            .byte	0
01679 0648                        00            .byte	0
01680 0649                        00            .byte	0
01681 064A                        00            .byte	0
01682 064B                        00            .byte	0
01683 064C                        00            .byte	0
01684 064D                        00            .byte	0
01685 064E                        00            .byte	0
01686                                           ! 446  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01687 064F                        00            .byte	0
01688 0650                        00            .byte	0
01689 0651                        00            .byte	0
01690 0652                        00            .byte	0
01691 0653                        00            .byte	0
01692 0654                        00            .byte	0
01693 0655                        00            .byte	0
01694 0656                        00            .byte	0
01695                                           ! 447 },
01696                                           ! 448 {
01697                                           ! 449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01698 0657                        00            .byte	0
01699 0658                        00            .byte	0
01700 0659                        00            .byte	0
01701 065A                        00            .byte	0
01702 065B                        00            .byte	0
01703 065C                        00            .byte	0
01704 065D                        00            .byte	0
01705 065E                        00            .byte	0
01706                                           ! 450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01707 065F                        00            .byte	0
01708 0660                        00            .byte	0
01709 0661                        00            .byte	0
01710 0662                        00            .byte	0
01711 0663                        00            .byte	0
01712 0664                        00            .byte	0
01713 0665                        00            .byte	0
01714 0666                        00            .byte	0
01715                                           ! 451  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01716 0667                        00            .byte	0
01717 0668                        00            .byte	0
01718 0669                        00            .byte	0
01719 066A                        00            .byte	0
01720 066B                        00            .byte	0
01721 066C                        00            .byte	0
01722 066D                        00            .byte	0
01723 066E                        00            .byte	0
01724                                           ! 452  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01725 066F                        00            .byte	0
01726 0670                        00            .byte	0
01727 0671                        00            .byte	0
01728 0672                        00            .byte	0
01729 0673                        00            .byte	0
01730 0674                        00            .byte	0
01731 0675                        00            .byte	0
01732 0676                        00            .byte	0
01733                                           ! 453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01734 0677                        00            .byte	0
01735 0678                        00            .byte	0
01736 0679                        00            .byte	0
01737 067A                        00            .byte	0
01738 067B                        00            .byte	0
01739 067C                        00            .byte	0
01740 067D                        00            .byte	0
01741 067E                        00            .byte	0
01742                                           ! 454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01743 067F                        00            .byte	0
01744 0680                        00            .byte	0
01745 0681                        00            .byte	0
01746 0682                        00            .byte	0
01747 0683                        00            .byte	0
01748 0684                        00            .byte	0
01749 0685                        00            .byte	0
01750 0686                        00            .byte	0
01751                                           ! 455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01752 0687                        00            .byte	0
01753 0688                        00            .byte	0
01754 0689                        00            .byte	0
01755 068A                        00            .byte	0
01756 068B                        00            .byte	0
01757 068C                        00            .byte	0
01758 068D                        00            .byte	0
01759 068E                        00            .byte	0
01760                                           ! 456  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01761 068F                        00            .byte	0
01762 0690                        00            .byte	0
01763 0691                        00            .byte	0
01764 0692                        00            .byte	0
01765 0693                        00            .byte	0
01766 0694                        00            .byte	0
01767 0695                        00            .byte	0
01768 0696                        00            .byte	0
01769                                           ! 457 },
01770                                           ! 458 {
01771                                           ! 459  80, 24, 14, 0x00, 0x80,
01772 0697                        50            .byte	$50
01773 0698                        18            .byte	$18
01774 0699                        0E            .byte	$E
01775 069A                        00            .byte	0
01776 069B                        80            .byte	$80
01777                                           ! 460  0x01, 0x0f, 0x00, 0x06,
01778 069C                        01            .byte	1
01779 069D                        0F            .byte	$F
01780 069E                        00            .byte	0
01781 069F                        06            .byte	6
01782                                           ! 461  0xa3,
01783 06A0                        A3            .byte	$A3
01784                                           ! 462  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01785 06A1                        5F            .byte	$5F
01786 06A2                        4F            .byte	$4F
01787 06A3                        50            .byte	$50
01788 06A4                        82            .byte	$82
01789 06A5                        54            .byte	$54
01790 06A6                        80            .byte	$80
01791 06A7                        BF            .byte	$BF
01792 06A8                        1F            .byte	$1F
01793                                           ! 463  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01794 06A9                        00            .byte	0
01795 06AA                        40            .byte	$40
01796 06AB                        00            .byte	0
01797 06AC                        00            .byte	0
01798 06AD                        00            .byte	0
01799 06AE                        00            .byte	0
01800 06AF                        00            .byte	0
01801 06B0                        00            .byte	0
01802                                           ! 464  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01803 06B1                        83            .byte	$83
01804 06B2                        85            .byte	$85
01805 06B3                        5D            .byte	$5D
01806 06B4                        28            .byte	$28
01807 06B5                        0F            .byte	$F
01808 06B6                        63            .byte	$63
01809 06B7                        BA            .byte	$BA
01810 06B8                        E3            .byte	$E3
01811                                           ! 465  0xff,
01812 06B9                        FF            .byte	$FF
01813                                           ! 466  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
01814 06BA                        00            .byte	0
01815 06BB                        08            .byte	8
01816 06BC                        00            .byte	0
01817 06BD                        00            .byte	0
01818 06BE                        18            .byte	$18
01819 06BF                        18            .byte	$18
01820 06C0                        00            .byte	0
01821 06C1                        00            .byte	0
01822                                           ! 467  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
01823 06C2                        00            .byte	0
01824 06C3                        08            .byte	8
01825 06C4                        00            .byte	0
01826 06C5                        00            .byte	0
01827 06C6                        00            .byte	0
01828 06C7                        18            .byte	$18
01829 06C8                        00            .byte	0
01830 06C9                        00            .byte	0
01831                                           ! 468  0x01, 0x00, 0x01, 0x00,
01832 06CA                        01            .byte	1
01833 06CB                        00            .byte	0
01834 06CC                        01            .byte	1
01835 06CD                        00            .byte	0
01836                                           ! 469  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01837 06CE                        00            .byte	0
01838 06CF                        00            .byte	0
01839 06D0                        00            .byte	0
01840 06D1                        00            .byte	0
01841 06D2                        00            .byte	0
01842 06D3                        00            .byte	0
01843 06D4                        05            .byte	5
01844 06D5                        0F            .byte	$F
01845 06D6                        FF            .byte	$FF
01846                                           ! 470 },
01847                                           ! 471 {
01848                                           ! 472  80, 24, 14, 0x00, 0x80,
01849 06D7                        50            .byte	$50
01850 06D8                        18            .byte	$18
01851 06D9                        0E            .byte	$E
01852 06DA                        00            .byte	0
01853 06DB                        80            .byte	$80
01854                                           ! 473  0x01, 0x0f, 0x00, 0x06,
01855 06DC                        01            .byte	1
01856 06DD                        0F            .byte	$F
01857 06DE                        00            .byte	0
01858 06DF                        06            .byte	6
01859                                           ! 474  0xa3,
01860 06E0                        A3            .byte	$A3
01861                                           ! 475  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01862 06E1                        5F            .byte	$5F
01863 06E2                        4F            .byte	$4F
01864 06E3                        50            .byte	$50
01865 06E4                        82            .byte	$82
01866 06E5                        54            .byte	$54
01867 06E6                        80            .byte	$80
01868 06E7                        BF            .byte	$BF
01869 06E8                        1F            .byte	$1F
01870                                           ! 476  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01871 06E9                        00            .byte	0
01872 06EA                        40            .byte	$40
01873 06EB                        00            .byte	0
01874 06EC                        00            .byte	0
01875 06ED                        00            .byte	0
01876 06EE                        00            .byte	0
01877 06EF                        00            .byte	0
01878 06F0                        00            .byte	0
01879                                           ! 477  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01880 06F1                        83            .byte	$83
01881 06F2                        85            .byte	$85
01882 06F3                        5D            .byte	$5D
01883 06F4                        28            .byte	$28
01884 06F5                        0F            .byte	$F
01885 06F6                        63            .byte	$63
01886 06F7                        BA            .byte	$BA
01887 06F8                        E3            .byte	$E3
01888                                           ! 478  0xff,
01889 06F9                        FF            .byte	$FF
01890                                           ! 479  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
01891 06FA                        00            .byte	0
01892 06FB                        01            .byte	1
01893 06FC                        02            .byte	2
01894 06FD                        03            .byte	3
01895 06FE                        04            .byte	4
01896 06FF                        05            .byte	5
01897 0700                        14            .byte	$14
01898 0701                        07            .byte	7
01899                                           ! 480  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
01900 0702                        38            .byte	$38
01901 0703                        39            .byte	$39
01902 0704                        3A            .byte	$3A
01903 0705                        3B            .byte	$3B
01904 0706                        3C            .byte	$3C
01905 0707                        3D            .byte	$3D
01906 0708                        3E            .byte	$3E
01907 0709                        3F            .byte	$3F
01908                                           ! 481  0x01, 0x00, 0x0f, 0x00,
01909 070A                        01            .byte	1
01910 070B                        00            .byte	0
01911 070C                        0F            .byte	$F
01912 070D                        00            .byte	0
01913                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01914 070E                        00            .byte	0
01915 070F                        00            .byte	0
01916 0710                        00            .byte	0
01917 0711                        00            .byte	0
01918 0712                        00            .byte	0
01919 0713                        00            .byte	0
01920 0714                        05            .byte	5
01921 0715                        0F            .byte	$F
01922 0716                        FF            .byte	$FF
01923                                           ! 483 },
01924                                           ! 484 {
01925                                           ! 485  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01926 0717                        00            .byte	0
01927 0718                        00            .byte	0
01928 0719                        00            .byte	0
01929 071A                        00            .byte	0
01930 071B                        00            .byte	0
01931 071C                        00            .byte	0
01932 071D                        00            .byte	0
01933 071E                        00            .byte	0
01934                                           ! 486  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01935 071F                        00            .byte	0
01936 0720                        00            .byte	0
01937 0721                        00            .byte	0
01938 0722                        00            .byte	0
01939 0723                        00            .byte	0
01940 0724                        00            .byte	0
01941 0725                        00            .byte	0
01942 0726                        00            .byte	0
01943                                           ! 487  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01944 0727                        00            .byte	0
01945 0728                        00            .byte	0
01946 0729                        00            .byte	0
01947 072A                        00            .byte	0
01948 072B                        00            .byte	0
01949 072C                        00            .byte	0
01950 072D                        00            .byte	0
01951 072E                        00            .byte	0
01952                                           ! 488  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01953 072F                        00            .byte	0
01954 0730                        00            .byte	0
01955 0731                        00            .byte	0
01956 0732                        00            .byte	0
01957 0733                        00            .byte	0
01958 0734                        00            .byte	0
01959 0735                        00            .byte	0
01960 0736                        00            .byte	0
01961                                           ! 489  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01962 0737                        00            .byte	0
01963 0738                        00            .byte	0
01964 0739                        00            .byte	0
01965 073A                        00            .byte	0
01966 073B                        00            .byte	0
01967 073C                        00            .byte	0
01968 073D                        00            .byte	0
01969 073E                        00            .byte	0
01970                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01971 073F                        00            .byte	0
01972 0740                        00            .byte	0
01973 0741                        00            .byte	0
01974 0742                        00            .byte	0
01975 0743                        00            .byte	0
01976 0744                        00            .byte	0
01977 0745                        00            .byte	0
01978 0746                        00            .byte	0
01979                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01980 0747                        00            .byte	0
01981 0748                        00            .byte	0
01982 0749                        00            .byte	0
01983 074A                        00            .byte	0
01984 074B                        00            .byte	0
01985 074C                        00            .byte	0
01986 074D                        00            .byte	0
01987 074E                        00            .byte	0
01988                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01989 074F                        00            .byte	0
01990 0750                        00            .byte	0
01991 0751                        00            .byte	0
01992 0752                        00            .byte	0
01993 0753                        00            .byte	0
01994 0754                        00            .byte	0
01995 0755                        00            .byte	0
01996 0756                        00            .byte	0
01997                                           ! 493 },
01998                                           ! 494 {
01999                                           ! 495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02000 0757                        00            .byte	0
02001 0758                        00            .byte	0
02002 0759                        00            .byte	0
02003 075A                        00            .byte	0
02004 075B                        00            .byte	0
02005 075C                        00            .byte	0
02006 075D                        00            .byte	0
02007 075E                        00            .byte	0
02008                                           ! 496  0x00, 
02009 075F                        00            .byte	0
02010                                           ! 496 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02011 0760                        00            .byte	0
02012 0761                        00            .byte	0
02013 0762                        00            .byte	0
02014 0763                        00            .byte	0
02015 0764                        00            .byte	0
02016 0765                        00            .byte	0
02017 0766                        00            .byte	0
02018                                           ! 497  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02019 0767                        00            .byte	0
02020 0768                        00            .byte	0
02021 0769                        00            .byte	0
02022 076A                        00            .byte	0
02023 076B                        00            .byte	0
02024 076C                        00            .byte	0
02025 076D                        00            .byte	0
02026 076E                        00            .byte	0
02027                                           ! 498  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02028 076F                        00            .byte	0
02029 0770                        00            .byte	0
02030 0771                        00            .byte	0
02031 0772                        00            .byte	0
02032 0773                        00            .byte	0
02033 0774                        00            .byte	0
02034 0775                        00            .byte	0
02035 0776                        00            .byte	0
02036                                           ! 499  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02037 0777                        00            .byte	0
02038 0778                        00            .byte	0
02039 0779                        00            .byte	0
02040 077A                        00            .byte	0
02041 077B                        00            .byte	0
02042 077C                        00            .byte	0
02043 077D                        00            .byte	0
02044 077E                        00            .byte	0
02045                                           ! 500  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02046 077F                        00            .byte	0
02047 0780                        00            .byte	0
02048 0781                        00            .byte	0
02049 0782                        00            .byte	0
02050 0783                        00            .byte	0
02051 0784                        00            .byte	0
02052 0785                        00            .byte	0
02053 0786                        00            .byte	0
02054                                           ! 501  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02055 0787                        00            .byte	0
02056 0788                        00            .byte	0
02057 0789                        00            .byte	0
02058 078A                        00            .byte	0
02059 078B                        00            .byte	0
02060 078C                        00            .byte	0
02061 078D                        00            .byte	0
02062 078E                        00            .byte	0
02063                                           ! 502  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02064 078F                        00            .byte	0
02065 0790                        00            .byte	0
02066 0791                        00            .byte	0
02067 0792                        00            .byte	0
02068 0793                        00            .byte	0
02069 0794                        00            .byte	0
02070 0795                        00            .byte	0
02071 0796                        00            .byte	0
02072                                           ! 503 },
02073                                           ! 504 {
02074                                           ! 505  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02075 0797                        00            .byte	0
02076 0798                        00            .byte	0
02077 0799                        00            .byte	0
02078 079A                        00            .byte	0
02079 079B                        00            .byte	0
02080 079C                        00            .byte	0
02081 079D                        00            .byte	0
02082 079E                        00            .byte	0
02083                                           ! 506  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02084 079F                        00            .byte	0
02085 07A0                        00            .byte	0
02086 07A1                        00            .byte	0
02087 07A2                        00            .byte	0
02088 07A3                        00            .byte	0
02089 07A4                        00            .byte	0
02090 07A5                        00            .byte	0
02091 07A6                        00            .byte	0
02092                                           ! 507  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02093 07A7                        00            .byte	0
02094 07A8                        00            .byte	0
02095 07A9                        00            .byte	0
02096 07AA                        00            .byte	0
02097 07AB                        00            .byte	0
02098 07AC                        00            .byte	0
02099 07AD                        00            .byte	0
02100 07AE                        00            .byte	0
02101                                           ! 508  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02102 07AF                        00            .byte	0
02103 07B0                        00            .byte	0
02104 07B1                        00            .byte	0
02105 07B2                        00            .byte	0
02106 07B3                        00            .byte	0
02107 07B4                        00            .byte	0
02108 07B5                        00            .byte	0
02109 07B6                        00            .byte	0
02110                                           ! 509  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02111 07B7                        00            .byte	0
02112 07B8                        00            .byte	0
02113 07B9                        00            .byte	0
02114 07BA                        00            .byte	0
02115 07BB                        00            .byte	0
02116 07BC                        00            .byte	0
02117 07BD                        00            .byte	0
02118 07BE                        00            .byte	0
02119                                           ! 510  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02120 07BF                        00            .byte	0
02121 07C0                        00            .byte	0
02122 07C1                        00            .byte	0
02123 07C2                        00            .byte	0
02124 07C3                        00            .byte	0
02125 07C4                        00            .byte	0
02126 07C5                        00            .byte	0
02127 07C6                        00            .byte	0
02128                                           ! 511  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02129 07C7                        00            .byte	0
02130 07C8                        00            .byte	0
02131 07C9                        00            .byte	0
02132 07CA                        00            .byte	0
02133 07CB                        00            .byte	0
02134 07CC                        00            .byte	0
02135 07CD                        00            .byte	0
02136 07CE                        00            .byte	0
02137                                           ! 512  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02138 07CF                        00            .byte	0
02139 07D0                        00            .byte	0
02140 07D1                        00            .byte	0
02141 07D2                        00            .byte	0
02142 07D3                        00            .byte	0
02143 07D4                        00            .byte	0
02144 07D5                        00            .byte	0
02145 07D6                        00            .byte	0
02146                                           ! 513 },
02147                                           ! 514 {
02148                                           ! 515  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02149 07D7                        00            .byte	0
02150 07D8                        00            .byte	0
02151 07D9                        00            .byte	0
02152 07DA                        00            .byte	0
02153 07DB                        00            .byte	0
02154 07DC                        00            .byte	0
02155 07DD                        00            .byte	0
02156 07DE                        00            .byte	0
02157                                           ! 516  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02158 07DF                        00            .byte	0
02159 07E0                        00            .byte	0
02160 07E1                        00            .byte	0
02161 07E2                        00            .byte	0
02162 07E3                        00            .byte	0
02163 07E4                        00            .byte	0
02164 07E5                        00            .byte	0
02165 07E6                        00            .byte	0
02166                                           ! 517  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02167 07E7                        00            .byte	0
02168 07E8                        00            .byte	0
02169 07E9                        00            .byte	0
02170 07EA                        00            .byte	0
02171 07EB                        00            .byte	0
02172 07EC                        00            .byte	0
02173 07ED                        00            .byte	0
02174 07EE                        00            .byte	0
02175                                           ! 518  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02176 07EF                        00            .byte	0
02177 07F0                        00            .byte	0
02178 07F1                        00            .byte	0
02179 07F2                        00            .byte	0
02180 07F3                        00            .byte	0
02181 07F4                        00            .byte	0
02182 07F5                        00            .byte	0
02183 07F6                        00            .byte	0
02184                                           ! 519  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02185 07F7                        00            .byte	0
02186 07F8                        00            .byte	0
02187 07F9                        00            .byte	0
02188 07FA                        00            .byte	0
02189 07FB                        00            .byte	0
02190 07FC                        00            .byte	0
02191 07FD                        00            .byte	0
02192 07FE                        00            .byte	0
02193                                           ! 520  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02194 07FF                        00            .byte	0
02195 0800                        00            .byte	0
02196 0801                        00            .byte	0
02197 0802                        00            .byte	0
02198 0803                        00            .byte	0
02199 0804                        00            .byte	0
02200 0805                        00            .byte	0
02201 0806                        00            .byte	0
02202                                           ! 521  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02203 0807                        00            .byte	0
02204 0808                        00            .byte	0
02205 0809                        00            .byte	0
02206 080A                        00            .byte	0
02207 080B                        00            .byte	0
02208 080C                        00            .byte	0
02209 080D                        00            .byte	0
02210 080E                        00            .byte	0
02211                                           ! 522  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02212 080F                        00            .byte	0
02213 0810                        00            .byte	0
02214 0811                        00            .byte	0
02215 0812                        00            .byte	0
02216 0813                        00            .byte	0
02217 0814                        00            .byte	0
02218 0815                        00            .byte	0
02219 0816                        00            .byte	0
02220                                           ! 523 },
02221                                           ! 524 {
02222                                           ! 525  40, 24, 16, 0x00, 0x08,
02223 0817                        28            .byte	$28
02224 0818                        18            .byte	$18
02225 0819                        10            .byte	$10
02226 081A                        00            .byte	0
02227 081B                        08            .byte	8
02228                                           ! 526  0x08, 0x03, 0x00, 0x02,
02229 081C                        08            .byte	8
02230 081D                        03            .byte	3
02231 081E                        00            .byte	0
02232 081F                        02            .byte	2
02233                                           ! 527  0x67,
02234 0820                        67            .byte	$67
02235                                           ! 528  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02236 0821                        2D            .byte	$2D
02237 0822                        27            .byte	$27
02238 0823                        28            .byte	$28
02239 0824                        90            .byte	$90
02240 0825                        2B            .byte	$2B
02241 0826                        A0            .byte	$A0
02242 0827                        BF            .byte	$BF
02243 0828                        1F            .byte	$1F
02244                                           ! 529  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02245 0829                        00            .byte	0
02246 082A                        4F            .byte	$4F
02247 082B                        0D            .byte	$D
02248 082C                        0E            .byte	$E
02249 082D                        00            .byte	0
02250 082E                        00            .byte	0
02251 082F                        00            .byte	0
02252 0830                        00            .byte	0
02253                                           ! 530  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02254 0831                        9C            .byte	$9C
02255 0832                        8E            .byte	$8E
02256 0833                        8F            .byte	$8F
02257 0834                        14            .byte	$14
02258 0835                        1F            .byte	$1F
02259 0836                        96            .byte	$96
02260 0837                        B9            .byte	$B9
02261 0838                        A3            .byte	$A3
02262                                           ! 531  0xff,
02263 0839                        FF            .byte	$FF
02264                                           ! 532  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02265 083A                        00            .byte	0
02266 083B                        01            .byte	1
02267 083C                        02            .byte	2
02268 083D                        03            .byte	3
02269 083E                        04            .byte	4
02270 083F                        05            .byte	5
02271 0840                        14            .byte	$14
02272 0841                        07            .byte	7
02273                                           ! 533  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02274 0842                        38            .byte	$38
02275 0843                        39            .byte	$39
02276 0844                        3A            .byte	$3A
02277 0845                        3B            .byte	$3B
02278 0846                        3C            .byte	$3C
02279 0847                        3D            .byte	$3D
02280 0848                        3E            .byte	$3E
02281 0849                        3F            .byte	$3F
02282                                           ! 534  0x0c, 0x00, 0x0f, 0x08,
02283 084A                        0C            .byte	$C
02284 084B                        00            .byte	0
02285 084C                        0F            .byte	$F
02286 084D                        08            .byte	8
02287                                           ! 535  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02288 084E                        00            .byte	0
02289 084F                        00            .byte	0
02290 0850                        00            .byte	0
02291 0851                        00            .byte	0
02292 0852                        00            .byte	0
02293 0853                        10            .byte	$10
02294 0854                        0E            .byte	$E
02295 0855                        0F            .byte	$F
02296 0856                        FF            .byte	$FF
02297                                           ! 536 },
02298                                           ! 537 {
02299                                           ! 538  80, 24, 16, 0x00, 0x10,
02300 0857                        50            .byte	$50
02301 0858                        18            .byte	$18
02302 0859                        10            .byte	$10
02303 085A                        00            .byte	0
02304 085B                        10            .byte	$10
02305                                           ! 539  0x00, 0x03, 0x00, 0x02,
02306 085C                        00            .byte	0
02307 085D                        03            .byte	3
02308 085E                        00            .byte	0
02309 085F                        02            .byte	2
02310                                           ! 540  0x67,
02311 0860                        67            .byte	$67
02312                                           ! 541  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02313 0861                        5F            .byte	$5F
02314 0862                        4F            .byte	$4F
02315 0863                        50            .byte	$50
02316 0864                        82            .byte	$82
02317 0865                        55            .byte	$55
02318 0866                        81            .byte	$81
02319 0867                        BF            .byte	$BF
02320 0868                        1F            .byte	$1F
02321                                           ! 542  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02322 0869                        00            .byte	0
02323 086A                        4F            .byte	$4F
02324 086B                        0D            .byte	$D
02325 086C                        0E            .byte	$E
02326 086D                        00            .byte	0
02327 086E                        00            .byte	0
02328 086F                        00            .byte	0
02329 0870                        00            .byte	0
02330                                           ! 543  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02331 0871                        9C            .byte	$9C
02332 0872                        8E            .byte	$8E
02333 0873                        8F            .byte	$8F
02334 0874                        28            .byte	$28
02335 0875                        1F            .byte	$1F
02336 0876                        96            .byte	$96
02337 0877                        B9            .byte	$B9
02338 0878                        A3            .byte	$A3
02339                                           ! 544  0xff,
02340 0879                        FF            .byte	$FF
02341                                           ! 545  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02342 087A                        00            .byte	0
02343 087B                        01            .byte	1
02344 087C                        02            .byte	2
02345 087D                        03            .byte	3
02346 087E                        04            .byte	4
02347 087F                        05            .byte	5
02348 0880                        14            .byte	$14
02349 0881                        07            .byte	7
02350                                           ! 546  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02351 0882                        38            .byte	$38
02352 0883                        39            .byte	$39
02353 0884                        3A            .byte	$3A
02354 0885                        3B            .byte	$3B
02355 0886                        3C            .byte	$3C
02356 0887                        3D            .byte	$3D
02357 0888                        3E            .byte	$3E
02358 0889                        3F            .byte	$3F
02359                                           ! 547  0x0c, 0x00, 0x0f, 0x08,
02360 088A                        0C            .byte	$C
02361 088B                        00            .byte	0
02362 088C                        0F            .byte	$F
02363 088D                        08            .byte	8
02364                                           ! 548  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02365 088E                        00            .byte	0
02366 088F                        00            .byte	0
02367 0890                        00            .byte	0
02368 0891                        00            .byte	0
02369 0892                        00            .byte	0
02370 0893                        10            .byte	$10
02371 0894                        0E            .byte	$E
02372 0895                        0F            .byte	$F
02373 0896                        FF            .byte	$FF
02374                                           ! 549 },
02375                                           ! 550 {
02376                                           ! 551  80, 24, 16, 0x00, 0x10,
02377 0897                        50            .byte	$50
02378 0898                        18            .byte	$18
02379 0899                        10            .byte	$10
02380 089A                        00            .byte	0
02381 089B                        10            .byte	$10
02382                                           ! 552  0x00, 0x03, 0x00, 0x02,
02383 089C                        00            .byte	0
02384 089D                        03            .byte	3
02385 089E                        00            .byte	0
02386 089F                        02            .byte	2
02387                                           ! 553  0x66,
02388 08A0                        66            .byte	$66
02389                                           ! 554  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02390 08A1                        5F            .byte	$5F
02391 08A2                        4F            .byte	$4F
02392 08A3                        50            .byte	$50
02393 08A4                        82            .byte	$82
02394 08A5                        55            .byte	$55
02395 08A6                        81            .byte	$81
02396 08A7                        BF            .byte	$BF
02397 08A8                        1F            .byte	$1F
02398                                           ! 555  0x00, 0x4f, 0x0d, 
02399 08A9                        00            .byte	0
02400 08AA                        4F            .byte	$4F
02401 08AB                        0D            .byte	$D
02402                                           ! 555 0x0e, 0x00, 0x00, 0x00, 0x00,
02403 08AC                        0E            .byte	$E
02404 08AD                        00            .byte	0
02405 08AE                        00            .byte	0
02406 08AF                        00            .byte	0
02407 08B0                        00            .byte	0
02408                                           ! 556  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02409 08B1                        9C            .byte	$9C
02410 08B2                        8E            .byte	$8E
02411 08B3                        8F            .byte	$8F
02412 08B4                        28            .byte	$28
02413 08B5                        0F            .byte	$F
02414 08B6                        96            .byte	$96
02415 08B7                        B9            .byte	$B9
02416 08B8                        A3            .byte	$A3
02417                                           ! 557  0xff,
02418 08B9                        FF            .byte	$FF
02419                                           ! 558  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02420 08BA                        00            .byte	0
02421 08BB                        08            .byte	8
02422 08BC                        08            .byte	8
02423 08BD                        08            .byte	8
02424 08BE                        08            .byte	8
02425 08BF                        08            .byte	8
02426 08C0                        08            .byte	8
02427 08C1                        08            .byte	8
02428                                           ! 559  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02429 08C2                        10            .byte	$10
02430 08C3                        18            .byte	$18
02431 08C4                        18            .byte	$18
02432 08C5                        18            .byte	$18
02433 08C6                        18            .byte	$18
02434 08C7                        18            .byte	$18
02435 08C8                        18            .byte	$18
02436 08C9                        18            .byte	$18
02437                                           ! 560  0x0e, 0x00, 0x0f, 0x08,
02438 08CA                        0E            .byte	$E
02439 08CB                        00            .byte	0
02440 08CC                        0F            .byte	$F
02441 08CD                        08            .byte	8
02442                                           ! 561  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02443 08CE                        00            .byte	0
02444 08CF                        00            .byte	0
02445 08D0                        00            .byte	0
02446 08D1                        00            .byte	0
02447 08D2                        00            .byte	0
02448 08D3                        10            .byte	$10
02449 08D4                        0A            .byte	$A
02450 08D5                        0F            .byte	$F
02451 08D6                        FF            .byte	$FF
02452                                           ! 562 },
02453                                           ! 563 {
02454                                           ! 564  80, 29, 16, 0x00, 0x00,
02455 08D7                        50            .byte	$50
02456 08D8                        1D            .byte	$1D
02457 08D9                        10            .byte	$10
02458 08DA                        00            .byte	0
02459 08DB                        00            .byte	0
02460                                           ! 565  0x01, 0x0f, 0x00, 0x06,
02461 08DC                        01            .byte	1
02462 08DD                        0F            .byte	$F
02463 08DE                        00            .byte	0
02464 08DF                        06            .byte	6
02465                                           ! 566  0xe3,
02466 08E0                        E3            .byte	$E3
02467                                           ! 567  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02468 08E1                        5F            .byte	$5F
02469 08E2                        4F            .byte	$4F
02470 08E3                        50            .byte	$50
02471 08E4                        82            .byte	$82
02472 08E5                        54            .byte	$54
02473 08E6                        80            .byte	$80
02474 08E7                        0B            .byte	$B
02475 08E8                        3E            .byte	$3E
02476                                           ! 568  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02477 08E9                        00            .byte	0
02478 08EA                        40            .byte	$40
02479 08EB                        00            .byte	0
02480 08EC                        00            .byte	0
02481 08ED                        00            .byte	0
02482 08EE                        00            .byte	0
02483 08EF                        00            .byte	0
02484 08F0                        00            .byte	0
02485                                           ! 569  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02486 08F1                        EA            .byte	$EA
02487 08F2                        8C            .byte	$8C
02488 08F3                        DF            .byte	$DF
02489 08F4                        28            .byte	$28
02490 08F5                        00            .byte	0
02491 08F6                        E7            .byte	$E7
02492 08F7                        04            .byte	4
02493 08F8                        E3            .byte	$E3
02494                                           ! 570  0xff,
02495 08F9                        FF            .byte	$FF
02496                                           ! 571  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02497 08FA                        00            .byte	0
02498 08FB                        3F            .byte	$3F
02499 08FC                        00            .byte	0
02500 08FD                        3F            .byte	$3F
02501 08FE                        00            .byte	0
02502 08FF                        3F            .byte	$3F
02503 0900                        00            .byte	0
02504 0901                        3F            .byte	$3F
02505                                           ! 572  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02506 0902                        00            .byte	0
02507 0903                        3F            .byte	$3F
02508 0904                        00            .byte	0
02509 0905                        3F            .byte	$3F
02510 0906                        00            .byte	0
02511 0907                        3F            .byte	$3F
02512 0908                        00            .byte	0
02513 0909                        3F            .byte	$3F
02514                                           ! 573  0x01, 0x00, 0x0f, 0x00,
02515 090A                        01            .byte	1
02516 090B                        00            .byte	0
02517 090C                        0F            .byte	$F
02518 090D                        00            .byte	0
02519                                           ! 574  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02520 090E                        00            .byte	0
02521 090F                        00            .byte	0
02522 0910                        00            .byte	0
02523 0911                        00            .byte	0
02524 0912                        00            .byte	0
02525 0913                        00            .byte	0
02526 0914                        05            .byte	5
02527 0915                        0F            .byte	$F
02528 0916                        FF            .byte	$FF
02529                                           ! 575 },
02530                                           ! 576 {
02531                                           ! 577  80, 29, 16, 0x00, 0x00,
02532 0917                        50            .byte	$50
02533 0918                        1D            .byte	$1D
02534 0919                        10            .byte	$10
02535 091A                        00            .byte	0
02536 091B                        00            .byte	0
02537                                           ! 578  0x01, 0x0f, 0x00, 0x06,
02538 091C                        01            .byte	1
02539 091D                        0F            .byte	$F
02540 091E                        00            .byte	0
02541 091F                        06            .byte	6
02542                                           ! 579  0xe3,
02543 0920                        E3            .byte	$E3
02544                                           ! 580  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02545 0921                        5F            .byte	$5F
02546 0922                        4F            .byte	$4F
02547 0923                        50            .byte	$50
02548 0924                        82            .byte	$82
02549 0925                        54            .byte	$54
02550 0926                        80            .byte	$80
02551 0927                        0B            .byte	$B
02552 0928                        3E            .byte	$3E
02553                                           ! 581  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02554 0929                        00            .byte	0
02555 092A                        40            .byte	$40
02556 092B                        00            .byte	0
02557 092C                        00            .byte	0
02558 092D                        00            .byte	0
02559 092E                        00            .byte	0
02560 092F                        00            .byte	0
02561 0930                        00            .byte	0
02562                                           ! 582  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02563 0931                        EA            .byte	$EA
02564 0932                        8C            .byte	$8C
02565 0933                        DF            .byte	$DF
02566 0934                        28            .byte	$28
02567 0935                        00            .byte	0
02568 0936                        E7            .byte	$E7
02569 0937                        04            .byte	4
02570 0938                        E3            .byte	$E3
02571                                           ! 583  0xff,
02572 0939                        FF            .byte	$FF
02573                                           ! 584  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02574 093A                        00            .byte	0
02575 093B                        01            .byte	1
02576 093C                        02            .byte	2
02577 093D                        03            .byte	3
02578 093E                        04            .byte	4
02579 093F                        05            .byte	5
02580 0940                        14            .byte	$14
02581 0941                        07            .byte	7
02582                                           ! 585  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02583 0942                        38            .byte	$38
02584 0943                        39            .byte	$39
02585 0944                        3A            .byte	$3A
02586 0945                        3B            .byte	$3B
02587 0946                        3C            .byte	$3C
02588 0947                        3D            .byte	$3D
02589 0948                        3E            .byte	$3E
02590 0949                        3F            .byte	$3F
02591                                           ! 586  0x01, 0x00, 0x0f, 0x00,
02592 094A                        01            .byte	1
02593 094B                        00            .byte	0
02594 094C                        0F            .byte	$F
02595 094D                        00            .byte	0
02596                                           ! 587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02597 094E                        00            .byte	0
02598 094F                        00            .byte	0
02599 0950                        00            .byte	0
02600 0951                        00            .byte	0
02601 0952                        00            .byte	0
02602 0953                        00            .byte	0
02603 0954                        05            .byte	5
02604 0955                        0F            .byte	$F
02605 0956                        FF            .byte	$FF
02606                                           ! 588 },
02607                                           ! 589 {
02608                                           ! 590  40, 24, 8, 0x00, 0x00,
02609 0957                        28            .byte	$28
02610 0958                        18            .byte	$18
02611 0959                        08            .byte	8
02612 095A                        00            .byte	0
02613 095B                        00            .byte	0
02614                                           ! 591  0x01, 0x0f, 0x00, 0x0e,
02615 095C                        01            .byte	1
02616 095D                        0F            .byte	$F
02617 095E                        00            .byte	0
02618 095F                        0E            .byte	$E
02619                                           ! 592  0x63,
02620 0960                        63            .byte	$63
02621                                           ! 593  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02622 0961                        5F            .byte	$5F
02623 0962                        4F            .byte	$4F
02624 0963                        50            .byte	$50
02625 0964                        82            .byte	$82
02626 0965                        54            .byte	$54
02627 0966                        80            .byte	$80
02628 0967                        BF            .byte	$BF
02629 0968                        1F            .byte	$1F
02630                                           ! 594  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02631 0969                        00            .byte	0
02632 096A                        41            .byte	$41
02633 096B                        00            .byte	0
02634 096C                        00            .byte	0
02635 096D                        00            .byte	0
02636 096E                        00            .byte	0
02637 096F                        00            .byte	0
02638 0970                        00            .byte	0
02639                                           ! 595  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02640 0971                        9C            .byte	$9C
02641 0972                        8E            .byte	$8E
02642 0973                        8F            .byte	$8F
02643 0974                        28            .byte	$28
02644 0975                        40            .byte	$40
02645 0976                        96            .byte	$96
02646 0977                        B9            .byte	$B9
02647 0978                        A3            .byte	$A3
02648                                           ! 596  0xff,
02649 0979                        FF            .byte	$FF
02650                                           ! 597  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02651 097A                        00            .byte	0
02652 097B                        01            .byte	1
02653 097C                        02            .byte	2
02654 097D                        03            .byte	3
02655 097E                        04            .byte	4
02656 097F                        05            .byte	5
02657 0980                        06            .byte	6
02658 0981                        07            .byte	7
02659                                           ! 598  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02660 0982                        08            .byte	8
02661 0983                        09            .byte	9
02662 0984                        0A            .byte	$A
02663 0985                        0B            .byte	$B
02664 0986                        0C            .byte	$C
02665 0987                        0D            .byte	$D
02666 0988                        0E            .byte	$E
02667 0989                        0F            .byte	$F
02668                                           ! 599  0x41, 0x00, 0x0f, 0x00,
02669 098A                        41            .byte	$41
02670 098B                        00            .byte	0
02671 098C                        0F            .byte	$F
02672 098D                        00            .byte	0
02673                                           ! 600  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02674 098E                        00            .byte	0
02675 098F                        00            .byte	0
02676 0990                        00            .byte	0
02677 0991                        00            .byte	0
02678 0992                        00            .byte	0
02679 0993                        40            .byte	$40
02680 0994                        05            .byte	5
02681 0995                        0F            .byte	$F
02682 0996                        FF            .byte	$FF
02683                                           ! 601 },
02684                                           ! 602 {
02685                                           ! 603  100, 36, 16, 0x00, 0x00,
02686 0997                        64            .byte	$64
02687 0998                        24            .byte	$24
02688 0999                        10            .byte	$10
02689 099A                        00            .byte	0
02690 099B                        00            .byte	0
02691                                           ! 604  0x01, 0x0f, 0x00, 0x06,
02692 099C                        01            .byte	1
02693 099D                        0F            .byte	$F
02694 099E                        00            .byte	0
02695 099F                        06            .byte	6
02696                                           ! 605  0xe3,
02697 09A0                        E3            .byte	$E3
02698                                           ! 606  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02699 09A1                        7F            .byte	$7F
02700 09A2                        63            .byte	$63
02701 09A3                        63            .byte	$63
02702 09A4                        83            .byte	$83
02703 09A5                        6B            .byte	$6B
02704 09A6                        1B            .byte	$1B
02705 09A7                        72            .byte	$72
02706 09A8                        F0            .byte	$F0
02707                                           ! 607  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02708 09A9                        00            .byte	0
02709 09AA                        60            .byte	$60
02710 09AB                        00            .byte	0
02711 09AC                        00            .byte	0
02712 09AD                        00            .byte	0
02713 09AE                        00            .byte	0
02714 09AF                        00            .byte	0
02715 09B0                        00            .byte	0
02716                                           ! 608  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
02717 09B1                        59            .byte	$59
02718 09B2                        8D            .byte	$8D
02719 09B3                        57            .byte	$57
02720 09B4                        32            .byte	$32
02721 09B5                        00            .byte	0
02722 09B6                        57            .byte	$57
02723 09B7                        73            .byte	$73
02724 09B8                        E3            .byte	$E3
02725                                           ! 609  0xff,
02726 09B9                        FF            .byte	$FF
02727                                           ! 610  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02728 09BA                        00            .byte	0
02729 09BB                        01            .byte	1
02730 09BC                        02            .byte	2
02731 09BD                        03            .byte	3
02732 09BE                        04            .byte	4
02733 09BF                        05            .byte	5
02734 09C0                        14            .byte	$14
02735 09C1                        07            .byte	7
02736                                           ! 611  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02737 09C2                        38            .byte	$38
02738 09C3                        39            .byte	$39
02739 09C4                        3A            .byte	$3A
02740 09C5                        3B            .byte	$3B
02741 09C6                        3C            .byte	$3C
02742 09C7                        3D            .byte	$3D
02743 09C8                        3E            .byte	$3E
02744 09C9                        3F            .byte	$3F
02745                                           ! 612  0x01, 0x00, 0x0f, 0x00,
02746 09CA                        01            .byte	1
02747 09CB                        00            .byte	0
02748 09CC                        0F            .byte	$F
02749 09CD                        00            .byte	0
02750                                           ! 613  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02751 09CE                        00            .byte	0
02752 09CF                        00            .byte	0
02753 09D0                        00            .byte	0
02754 09D1                        00            .byte	0
02755 09D2                        00            .byte	0
02756 09D3                        00            .byte	0
02757 09D4                        05            .byte	5
02758 09D5                        0F            .byte	$F
02759 09D6                        FF            .byte	$FF
02760                                           ! 614 },
02761                                           ! 615 };
02762                                           !BCC_EOS
02763                                           ! 616 static Bit8u palette0[63+1][3]=
02764                                           ! 617 {
02765                       000009D7            _palette0:
02766                                           ! 618   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
02767 09D7                        00            .byte	0
02768 09D8                        00            .byte	0
02769 09D9                        00            .byte	0
02770 09DA                        00            .byte	0
02771 09DB                        00            .byte	0
02772 09DC                        00            .byte	0
02773 09DD                        00            .byte	0
02774 09DE                        00            .byte	0
02775 09DF                        00            .byte	0
02776 09E0                        00            .byte	0
02777 09E1                        00            .byte	0
02778 09E2                        00            .byte	0
02779 09E3                        00            .byte	0
02780 09E4                        00            .byte	0
02781 09E5                        00            .byte	0
02782 09E6                        00            .byte	0
02783 09E7                        00            .byte	0
02784 09E8                        00            .byte	0
02785 09E9                        00            .byte	0
02786 09EA                        00            .byte	0
02787 09EB                        00            .byte	0
02788 09EC                        00            .byte	0
02789 09ED                        00            .byte	0
02790 09EE                        00            .byte	0
02791                                           ! 619   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a
02792 09EF                        2A            .byte	$2A
02793 09F0                        2A            .byte	$2A
02794 09F1                        2A            .byte	$2A
02795 09F2                        2A            .byte	$2A
02796 09F3                        2A            .byte	$2A
02797 09F4                        2A            .byte	$2A
02798                                           ! 619 ,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02799 09F5                        2A            .byte	$2A
02800 09F6                        2A            .byte	$2A
02801 09F7                        2A            .byte	$2A
02802 09F8                        2A            .byte	$2A
02803 09F9                        2A            .byte	$2A
02804 09FA                        2A            .byte	$2A
02805 09FB                        2A            .byte	$2A
02806 09FC                        2A            .byte	$2A
02807 09FD                        2A            .byte	$2A
02808 09FE                        2A            .byte	$2A
02809 09FF                        2A            .byte	$2A
02810 0A00                        2A            .byte	$2A
02811 0A01                        2A            .byte	$2A
02812 0A02                        2A            .byte	$2A
02813 0A03                        2A            .byte	$2A
02814 0A04                        2A            .byte	$2A
02815 0A05                        2A            .byte	$2A
02816 0A06                        2A            .byte	$2A
02817                                           ! 620   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02818 0A07                        2A            .byte	$2A
02819 0A08                        2A            .byte	$2A
02820 0A09                        2A            .byte	$2A
02821 0A0A                        2A            .byte	$2A
02822 0A0B                        2A            .byte	$2A
02823 0A0C                        2A            .byte	$2A
02824 0A0D                        2A            .byte	$2A
02825 0A0E                        2A            .byte	$2A
02826 0A0F                        2A            .byte	$2A
02827 0A10                        2A            .byte	$2A
02828 0A11                        2A            .byte	$2A
02829 0A12                        2A            .byte	$2A
02830 0A13                        2A            .byte	$2A
02831 0A14                        2A            .byte	$2A
02832 0A15                        2A            .byte	$2A
02833 0A16                        2A            .byte	$2A
02834 0A17                        2A            .byte	$2A
02835 0A18                        2A            .byte	$2A
02836 0A19                        2A            .byte	$2A
02837 0A1A                        2A            .byte	$2A
02838 0A1B                        2A            .byte	$2A
02839 0A1C                        2A            .byte	$2A
02840 0A1D                        2A            .byte	$2A
02841 0A1E                        2A            .byte	$2A
02842                                           ! 621   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
02843 0A1F                        3F            .byte	$3F
02844 0A20                        3F            .byte	$3F
02845 0A21                        3F            .byte	$3F
02846 0A22                        3F            .byte	$3F
02847 0A23                        3F            .byte	$3F
02848 0A24                        3F            .byte	$3F
02849 0A25                        3F            .byte	$3F
02850 0A26                        3F            .byte	$3F
02851 0A27                        3F            .byte	$3F
02852 0A28                        3F            .byte	$3F
02853 0A29                        3F            .byte	$3F
02854 0A2A                        3F            .byte	$3F
02855 0A2B                        3F            .byte	$3F
02856 0A2C                        3F            .byte	$3F
02857 0A2D                        3F            .byte	$3F
02858 0A2E                        3F            .byte	$3F
02859 0A2F                        3F            .byte	$3F
02860 0A30                        3F            .byte	$3F
02861 0A31                        3F            .byte	$3F
02862 0A32                        3F            .byte	$3F
02863 0A33                        3F            .byte	$3F
02864 0A34                        3F            .byte	$3F
02865 0A35                        3F            .byte	$3F
02866 0A36                        3F            .byte	$3F
02867                                           ! 622   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
02868 0A37                        00            .byte	0
02869 0A38                        00            .byte	0
02870 0A39                        00            .byte	0
02871 0A3A                        00            .byte	0
02872 0A3B                        00            .byte	0
02873 0A3C                        00            .byte	0
02874 0A3D                        00            .byte	0
02875 0A3E                        00            .byte	0
02876 0A3F                        00            .byte	0
02877 0A40                        00            .byte	0
02878 0A41                        00            .byte	0
02879 0A42                        00            .byte	0
02880 0A43                        00            .byte	0
02881 0A44                        00            .byte	0
02882 0A45                        00            .byte	0
02883 0A46                        00            .byte	0
02884 0A47                        00            .byte	0
02885 0A48                        00            .byte	0
02886 0A49                        00            .byte	0
02887 0A4A                        00            .byte	0
02888 0A4B                        00            .byte	0
02889 0A4C                        00            .byte	0
02890 0A4D                        00            .byte	0
02891 0A4E                        00            .byte	0
02892                                           ! 623   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02893 0A4F                        2A            .byte	$2A
02894 0A50                        2A            .byte	$2A
02895 0A51                        2A            .byte	$2A
02896 0A52                        2A            .byte	$2A
02897 0A53                        2A            .byte	$2A
02898 0A54                        2A            .byte	$2A
02899 0A55                        2A            .byte	$2A
02900 0A56                        2A            .byte	$2A
02901 0A57                        2A            .byte	$2A
02902 0A58                        2A            .byte	$2A
02903 0A59                        2A            .byte	$2A
02904 0A5A                        2A            .byte	$2A
02905 0A5B                        2A            .byte	$2A
02906 0A5C                        2A            .byte	$2A
02907 0A5D                        2A            .byte	$2A
02908 0A5E                        2A            .byte	$2A
02909 0A5F                        2A            .byte	$2A
02910 0A60                        2A            .byte	$2A
02911 0A61                        2A            .byte	$2A
02912 0A62                        2A            .byte	$2A
02913 0A63                        2A            .byte	$2A
02914 0A64                        2A            .byte	$2A
02915 0A65                        2A            .byte	$2A
02916 0A66                        2A            .byte	$2A
02917                                           ! 624   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02918 0A67                        2A            .byte	$2A
02919 0A68                        2A            .byte	$2A
02920 0A69                        2A            .byte	$2A
02921 0A6A                        2A            .byte	$2A
02922 0A6B                        2A            .byte	$2A
02923 0A6C                        2A            .byte	$2A
02924 0A6D                        2A            .byte	$2A
02925 0A6E                        2A            .byte	$2A
02926 0A6F                        2A            .byte	$2A
02927 0A70                        2A            .byte	$2A
02928 0A71                        2A            .byte	$2A
02929 0A72                        2A            .byte	$2A
02930 0A73                        2A            .byte	$2A
02931 0A74                        2A            .byte	$2A
02932 0A75                        2A            .byte	$2A
02933 0A76                        2A            .byte	$2A
02934 0A77                        2A            .byte	$2A
02935 0A78                        2A            .byte	$2A
02936 0A79                        2A            .byte	$2A
02937 0A7A                        2A            .byte	$2A
02938 0A7B                        2A            .byte	$2A
02939 0A7C                        2A            .byte	$2A
02940 0A7D                        2A            .byte	$2A
02941 0A7E                        2A            .byte	$2A
02942                                           ! 625   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
02943 0A7F                        3F            .byte	$3F
02944 0A80                        3F            .byte	$3F
02945 0A81                        3F            .byte	$3F
02946 0A82                        3F            .byte	$3F
02947 0A83                        3F            .byte	$3F
02948 0A84                        3F            .byte	$3F
02949 0A85                        3F            .byte	$3F
02950 0A86                        3F            .byte	$3F
02951 0A87                        3F            .byte	$3F
02952 0A88                        3F            .byte	$3F
02953 0A89                        3F            .byte	$3F
02954 0A8A                        3F            .byte	$3F
02955 0A8B                        3F            .byte	$3F
02956 0A8C                        3F            .byte	$3F
02957 0A8D                        3F            .byte	$3F
02958 0A8E                        3F            .byte	$3F
02959 0A8F                        3F            .byte	$3F
02960 0A90                        3F            .byte	$3F
02961 0A91                        3F            .byte	$3F
02962 0A92                        3F            .byte	$3F
02963 0A93                        3F            .byte	$3F
02964 0A94                        3F            .byte	$3F
02965 0A95                        3F            .byte	$3F
02966                                           ! 626 };
02967 0A96                        3F            .byte	$3F
02968                                           !BCC_EOS
02969                                           ! 627 static Bit8u palette1[63+1][3]=
02970                                           ! 628 {
02971                       00000A97            _palette1:
02972                                           ! 629   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
02973 0A97                        00            .byte	0
02974 0A98                        00            .byte	0
02975 0A99                        00            .byte	0
02976 0A9A                        00            .byte	0
02977 0A9B                        00            .byte	0
02978 0A9C                        2A            .byte	$2A
02979 0A9D                        00            .byte	0
02980 0A9E                        2A            .byte	$2A
02981 0A9F                        00            .byte	0
02982 0AA0                        00            .byte	0
02983 0AA1                        2A            .byte	$2A
02984 0AA2                        2A            .byte	$2A
02985 0AA3                        2A            .byte	$2A
02986 0AA4                        00            .byte	0
02987 0AA5                        00            .byte	0
02988 0AA6                        2A            .byte	$2A
02989 0AA7                        00            .byte	0
02990 0AA8                        2A            .byte	$2A
02991 0AA9                        2A            .byte	$2A
02992 0AAA                        15            .byte	$15
02993 0AAB                        00            .byte	0
02994 0AAC                        2A            .byte	$2A
02995 0AAD                        2A            .byte	$2A
02996 0AAE                        2A            .byte	$2A
02997                                           ! 630   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
02998 0AAF                        00            .byte	0
02999 0AB0                        00            .byte	0
03000 0AB1                        00            .byte	0
03001 0AB2                        00            .byte	0
03002 0AB3                        00            .byte	0
03003 0AB4                        2A            .byte	$2A
03004 0AB5                        00            .byte	0
03005 0AB6                        2A            .byte	$2A
03006 0AB7                        00            .byte	0
03007 0AB8                        00            .byte	0
03008 0AB9                        2A            .byte	$2A
03009 0ABA                        2A            .byte	$2A
03010 0ABB                        2A            .byte	$2A
03011 0ABC                        00            .byte	0
03012 0ABD                        00            .byte	0
03013 0ABE                        2A            .byte	$2A
03014 0ABF                        00            .byte	0
03015 0AC0                        2A            .byte	$2A
03016 0AC1                        2A            .byte	$2A
03017 0AC2                        15            .byte	$15
03018 0AC3                        00            .byte	0
03019 0AC4                        2A            .byte	$2A
03020 0AC5                        2A            .byte	$2A
03021 0AC6                        2A            .byte	$2A
03022                                           ! 631   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03023 0AC7                        15            .byte	$15
03024 0AC8                        15            .byte	$15
03025 0AC9                        15            .byte	$15
03026 0ACA                        15            .byte	$15
03027 0ACB                        15            .byte	$15
03028 0ACC                        3F            .byte	$3F
03029 0ACD                        15            .byte	$15
03030 0ACE                        3F            .byte	$3F
03031 0ACF                        15            .byte	$15
03032 0AD0                        15            .byte	$15
03033 0AD1                        3F            .byte	$3F
03034 0AD2                        3F            .byte	$3F
03035 0AD3                        3F            .byte	$3F
03036 0AD4                        15            .byte	$15
03037 0AD5                        15            .byte	$15
03038 0AD6                        3F            .byte	$3F
03039 0AD7                        15            .byte	$15
03040 0AD8                        3F            .byte	$3F
03041 0AD9                        3F            .byte	$3F
03042 0ADA                        3F            .byte	$3F
03043 0ADB                        15            .byte	$15
03044 0ADC                        3F            .byte	$3F
03045 0ADD                        3F            .byte	$3F
03046 0ADE                        3F            .byte	$3F
03047                                           ! 632   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03048 0ADF                        15            .byte	$15
03049 0AE0                        15            .byte	$15
03050 0AE1                        15            .byte	$15
03051 0AE2                        15            .byte	$15
03052 0AE3                        15            .byte	$15
03053 0AE4                        3F            .byte	$3F
03054 0AE5                        15            .byte	$15
03055 0AE6                        3F            .byte	$3F
03056 0AE7                        15            .byte	$15
03057 0AE8                        15            .byte	$15
03058 0AE9                        3F            .byte	$3F
03059 0AEA                        3F            .byte	$3F
03060 0AEB                        3F            .byte	$3F
03061 0AEC                        15            .byte	$15
03062 0AED                        15            .byte	$15
03063 0AEE                        3F            .byte	$3F
03064 0AEF                        15            .byte	$15
03065 0AF0                        3F            .byte	$3F
03066 0AF1                        3F            .byte	$3F
03067 0AF2                        3F            .byte	$3F
03068 0AF3                        15            .byte	$15
03069 0AF4                        3F            .byte	$3F
03070 0AF5                        3F            .byte	$3F
03071 0AF6                        3F            .byte	$3F
03072                                           ! 633   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03073 0AF7                        00            .byte	0
03074 0AF8                        00            .byte	0
03075 0AF9                        00            .byte	0
03076 0AFA                        00            .byte	0
03077 0AFB                        00            .byte	0
03078 0AFC                        2A            .byte	$2A
03079 0AFD                        00            .byte	0
03080 0AFE                        2A            .byte	$2A
03081 0AFF                        00            .byte	0
03082 0B00                        00            .byte	0
03083 0B01                        2A            .byte	$2A
03084 0B02                        2A            .byte	$2A
03085 0B03                        2A            .byte	$2A
03086 0B04                        00            .byte	0
03087 0B05                        00            .byte	0
03088 0B06                        2A            .byte	$2A
03089 0B07                        00            .byte	0
03090 0B08                        2A            .byte	$2A
03091 0B09                        2A            .byte	$2A
03092 0B0A                        15            .byte	$15
03093 0B0B                        00            .byte	0
03094 0B0C                        2A            .byte	$2A
03095 0B0D                        2A            .byte	$2A
03096 0B0E                        2A            .byte	$2A
03097                                           ! 634   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03098 0B0F                        00            .byte	0
03099 0B10                        00            .byte	0
03100 0B11                        00            .byte	0
03101 0B12                        00            .byte	0
03102 0B13                        00            .byte	0
03103 0B14                        2A            .byte	$2A
03104 0B15                        00            .byte	0
03105 0B16                        2A            .byte	$2A
03106 0B17                        00            .byte	0
03107 0B18                        00            .byte	0
03108 0B19                        2A            .byte	$2A
03109 0B1A                        2A            .byte	$2A
03110 0B1B                        2A            .byte	$2A
03111 0B1C                        00            .byte	0
03112 0B1D                        00            .byte	0
03113 0B1E                        2A            .byte	$2A
03114 0B1F                        00            .byte	0
03115 0B20                        2A            .byte	$2A
03116 0B21                        2A            .byte	$2A
03117 0B22                        15            .byte	$15
03118 0B23                        00            .byte	0
03119 0B24                        2A            .byte	$2A
03120 0B25                        2A            .byte	$2A
03121 0B26                        2A            .byte	$2A
03122                                           ! 635   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03123 0B27                        15            .byte	$15
03124 0B28                        15            .byte	$15
03125 0B29                        15            .byte	$15
03126 0B2A                        15            .byte	$15
03127 0B2B                        15            .byte	$15
03128 0B2C                        3F            .byte	$3F
03129 0B2D                        15            .byte	$15
03130 0B2E                        3F            .byte	$3F
03131 0B2F                        15            .byte	$15
03132 0B30                        15            .byte	$15
03133 0B31                        3F            .byte	$3F
03134 0B32                        3F            .byte	$3F
03135 0B33                        3F            .byte	$3F
03136 0B34                        15            .byte	$15
03137 0B35                        15            .byte	$15
03138 0B36                        3F            .byte	$3F
03139 0B37                        15            .byte	$15
03140 0B38                        3F            .byte	$3F
03141 0B39                        3F            .byte	$3F
03142 0B3A                        3F            .byte	$3F
03143 0B3B                        15            .byte	$15
03144 0B3C                        3F            .byte	$3F
03145 0B3D                        3F            .byte	$3F
03146 0B3E                        3F            .byte	$3F
03147                                           ! 636   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03148 0B3F                        15            .byte	$15
03149 0B40                        15            .byte	$15
03150 0B41                        15            .byte	$15
03151 0B42                        15            .byte	$15
03152 0B43                        15            .byte	$15
03153 0B44                        3F            .byte	$3F
03154 0B45                        15            .byte	$15
03155 0B46                        3F            .byte	$3F
03156 0B47                        15            .byte	$15
03157 0B48                        15            .byte	$15
03158 0B49                        3F            .byte	$3F
03159 0B4A                        3F            .byte	$3F
03160 0B4B                        3F            .byte	$3F
03161 0B4C                        15            .byte	$15
03162 0B4D                        15            .byte	$15
03163 0B4E                        3F            .byte	$3F
03164 0B4F                        15            .byte	$15
03165 0B50                        3F            .byte	$3F
03166 0B51                        3F            .byte	$3F
03167 0B52                        3F            .byte	$3F
03168 0B53                        15            .byte	$15
03169 0B54                        3F            .byte	$3F
03170 0B55                        3F            .byte	$3F
03171                                           ! 637 };
03172 0B56                        3F            .byte	$3F
03173                                           !BCC_EOS
03174                                           ! 638 static Bit8u palette2[63+1][3]=
03175                                           ! 639 {
03176                       00000B57            _palette2:
03177                                           ! 640   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a
03178 0B57                        00            .byte	0
03179 0B58                        00            .byte	0
03180 0B59                        00            .byte	0
03181 0B5A                        00            .byte	0
03182 0B5B                        00            .byte	0
03183 0B5C                        2A            .byte	$2A
03184 0B5D                        00            .byte	0
03185 0B5E                        2A            .byte	$2A
03186 0B5F                        00            .byte	0
03187 0B60                        00            .byte	0
03188 0B61                        2A            .byte	$2A
03189                                           ! 640 , 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03190 0B62                        2A            .byte	$2A
03191 0B63                        2A            .byte	$2A
03192 0B64                        00            .byte	0
03193 0B65                        00            .byte	0
03194 0B66                        2A            .byte	$2A
03195 0B67                        00            .byte	0
03196 0B68                        2A            .byte	$2A
03197 0B69                        2A            .byte	$2A
03198 0B6A                        2A            .byte	$2A
03199 0B6B                        00            .byte	0
03200 0B6C                        2A            .byte	$2A
03201 0B6D                        2A            .byte	$2A
03202 0B6E                        2A            .byte	$2A
03203                                           ! 641   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03204 0B6F                        00            .byte	0
03205 0B70                        00            .byte	0
03206 0B71                        15            .byte	$15
03207 0B72                        00            .byte	0
03208 0B73                        00            .byte	0
03209 0B74                        3F            .byte	$3F
03210 0B75                        00            .byte	0
03211 0B76                        2A            .byte	$2A
03212 0B77                        15            .byte	$15
03213 0B78                        00            .byte	0
03214 0B79                        2A            .byte	$2A
03215 0B7A                        3F            .byte	$3F
03216 0B7B                        2A            .byte	$2A
03217 0B7C                        00            .byte	0
03218 0B7D                        15            .byte	$15
03219 0B7E                        2A            .byte	$2A
03220 0B7F                        00            .byte	0
03221 0B80                        3F            .byte	$3F
03222 0B81                        2A            .byte	$2A
03223 0B82                        2A            .byte	$2A
03224 0B83                        15            .byte	$15
03225 0B84                        2A            .byte	$2A
03226 0B85                        2A            .byte	$2A
03227 0B86                        3F            .byte	$3F
03228                                           ! 642   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03229 0B87                        00            .byte	0
03230 0B88                        15            .byte	$15
03231 0B89                        00            .byte	0
03232 0B8A                        00            .byte	0
03233 0B8B                        15            .byte	$15
03234 0B8C                        2A            .byte	$2A
03235 0B8D                        00            .byte	0
03236 0B8E                        3F            .byte	$3F
03237 0B8F                        00            .byte	0
03238 0B90                        00            .byte	0
03239 0B91                        3F            .byte	$3F
03240 0B92                        2A            .byte	$2A
03241 0B93                        2A            .byte	$2A
03242 0B94                        15            .byte	$15
03243 0B95                        00            .byte	0
03244 0B96                        2A            .byte	$2A
03245 0B97                        15            .byte	$15
03246 0B98                        2A            .byte	$2A
03247 0B99                        2A            .byte	$2A
03248 0B9A                        3F            .byte	$3F
03249 0B9B                        00            .byte	0
03250 0B9C                        2A            .byte	$2A
03251 0B9D                        3F            .byte	$3F
03252 0B9E                        2A            .byte	$2A
03253                                           ! 643   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03254 0B9F                        00            .byte	0
03255 0BA0                        15            .byte	$15
03256 0BA1                        15            .byte	$15
03257 0BA2                        00            .byte	0
03258 0BA3                        15            .byte	$15
03259 0BA4                        3F            .byte	$3F
03260 0BA5                        00            .byte	0
03261 0BA6                        3F            .byte	$3F
03262 0BA7                        15            .byte	$15
03263 0BA8                        00            .byte	0
03264 0BA9                        3F            .byte	$3F
03265 0BAA                        3F            .byte	$3F
03266 0BAB                        2A            .byte	$2A
03267 0BAC                        15            .byte	$15
03268 0BAD                        15            .byte	$15
03269 0BAE                        2A            .byte	$2A
03270 0BAF                        15            .byte	$15
03271 0BB0                        3F            .byte	$3F
03272 0BB1                        2A            .byte	$2A
03273 0BB2                        3F            .byte	$3F
03274 0BB3                        15            .byte	$15
03275 0BB4                        2A            .byte	$2A
03276 0BB5                        3F            .byte	$3F
03277 0BB6                        3F            .byte	$3F
03278                                           ! 644   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03279 0BB7                        15            .byte	$15
03280 0BB8                        00            .byte	0
03281 0BB9                        00            .byte	0
03282 0BBA                        15            .byte	$15
03283 0BBB                        00            .byte	0
03284 0BBC                        2A            .byte	$2A
03285 0BBD                        15            .byte	$15
03286 0BBE                        2A            .byte	$2A
03287 0BBF                        00            .byte	0
03288 0BC0                        15            .byte	$15
03289 0BC1                        2A            .byte	$2A
03290 0BC2                        2A            .byte	$2A
03291 0BC3                        3F            .byte	$3F
03292 0BC4                        00            .byte	0
03293 0BC5                        00            .byte	0
03294 0BC6                        3F            .byte	$3F
03295 0BC7                        00            .byte	0
03296 0BC8                        2A            .byte	$2A
03297 0BC9                        3F            .byte	$3F
03298 0BCA                        2A            .byte	$2A
03299 0BCB                        00            .byte	0
03300 0BCC                        3F            .byte	$3F
03301 0BCD                        2A            .byte	$2A
03302 0BCE                        2A            .byte	$2A
03303                                           ! 645   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03304 0BCF                        15            .byte	$15
03305 0BD0                        00            .byte	0
03306 0BD1                        15            .byte	$15
03307 0BD2                        15            .byte	$15
03308 0BD3                        00            .byte	0
03309 0BD4                        3F            .byte	$3F
03310 0BD5                        15            .byte	$15
03311 0BD6                        2A            .byte	$2A
03312 0BD7                        15            .byte	$15
03313 0BD8                        15            .byte	$15
03314 0BD9                        2A            .byte	$2A
03315 0BDA                        3F            .byte	$3F
03316 0BDB                        3F            .byte	$3F
03317 0BDC                        00            .byte	0
03318 0BDD                        15            .byte	$15
03319 0BDE                        3F            .byte	$3F
03320 0BDF                        00            .byte	0
03321 0BE0                        3F            .byte	$3F
03322 0BE1                        3F            .byte	$3F
03323 0BE2                        2A            .byte	$2A
03324 0BE3                        15            .byte	$15
03325 0BE4                        3F            .byte	$3F
03326 0BE5                        2A            .byte	$2A
03327 0BE6                        3F            .byte	$3F
03328                                           ! 646   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03329 0BE7                        15            .byte	$15
03330 0BE8                        15            .byte	$15
03331 0BE9                        00            .byte	0
03332 0BEA                        15            .byte	$15
03333 0BEB                        15            .byte	$15
03334 0BEC                        2A            .byte	$2A
03335 0BED                        15            .byte	$15
03336 0BEE                        3F            .byte	$3F
03337 0BEF                        00            .byte	0
03338 0BF0                        15            .byte	$15
03339 0BF1                        3F            .byte	$3F
03340 0BF2                        2A            .byte	$2A
03341 0BF3                        3F            .byte	$3F
03342 0BF4                        15            .byte	$15
03343 0BF5                        00            .byte	0
03344 0BF6                        3F            .byte	$3F
03345 0BF7                        15            .byte	$15
03346 0BF8                        2A            .byte	$2A
03347 0BF9                        3F            .byte	$3F
03348 0BFA                        3F            .byte	$3F
03349 0BFB                        00            .byte	0
03350 0BFC                        3F            .byte	$3F
03351 0BFD                        3F            .byte	$3F
03352 0BFE                        2A            .byte	$2A
03353                                           ! 647   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03354 0BFF                        15            .byte	$15
03355 0C00                        15            .byte	$15
03356 0C01                        15            .byte	$15
03357 0C02                        15            .byte	$15
03358 0C03                        15            .byte	$15
03359 0C04                        3F            .byte	$3F
03360 0C05                        15            .byte	$15
03361 0C06                        3F            .byte	$3F
03362 0C07                        15            .byte	$15
03363 0C08                        15            .byte	$15
03364 0C09                        3F            .byte	$3F
03365 0C0A                        3F            .byte	$3F
03366 0C0B                        3F            .byte	$3F
03367 0C0C                        15            .byte	$15
03368 0C0D                        15            .byte	$15
03369 0C0E                        3F            .byte	$3F
03370 0C0F                        15            .byte	$15
03371 0C10                        3F            .byte	$3F
03372 0C11                        3F            .byte	$3F
03373 0C12                        3F            .byte	$3F
03374 0C13                        15            .byte	$15
03375 0C14                        3F            .byte	$3F
03376 0C15                        3F            .byte	$3F
03377                                           ! 648 };
03378 0C16                        3F            .byte	$3F
03379                                           !BCC_EOS
03380                                           ! 649 static Bit8u palette3[256][3]=
03381                                           ! 650 {
03382                       00000C17            _palette3:
03383                                           ! 651   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03384 0C17                        00            .byte	0
03385 0C18                        00            .byte	0
03386 0C19                        00            .byte	0
03387 0C1A                        00            .byte	0
03388 0C1B                        00            .byte	0
03389 0C1C                        2A            .byte	$2A
03390 0C1D                        00            .byte	0
03391 0C1E                        2A            .byte	$2A
03392 0C1F                        00            .byte	0
03393 0C20                        00            .byte	0
03394 0C21                        2A            .byte	$2A
03395 0C22                        2A            .byte	$2A
03396 0C23                        2A            .byte	$2A
03397 0C24                        00            .byte	0
03398 0C25                        00            .byte	0
03399 0C26                        2A            .byte	$2A
03400 0C27                        00            .byte	0
03401 0C28                        2A            .byte	$2A
03402 0C29                        2A            .byte	$2A
03403 0C2A                        15            .byte	$15
03404 0C2B                        00            .byte	0
03405 0C2C                        2A            .byte	$2A
03406 0C2D                        2A            .byte	$2A
03407 0C2E                        2A            .byte	$2A
03408                                           ! 652   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03409 0C2F                        15            .byte	$15
03410 0C30                        15            .byte	$15
03411 0C31                        15            .byte	$15
03412 0C32                        15            .byte	$15
03413 0C33                        15            .byte	$15
03414 0C34                        3F            .byte	$3F
03415 0C35                        15            .byte	$15
03416 0C36                        3F            .byte	$3F
03417 0C37                        15            .byte	$15
03418 0C38                        15            .byte	$15
03419 0C39                        3F            .byte	$3F
03420 0C3A                        3F            .byte	$3F
03421 0C3B                        3F            .byte	$3F
03422 0C3C                        15            .byte	$15
03423 0C3D                        15            .byte	$15
03424 0C3E                        3F            .byte	$3F
03425 0C3F                        15            .byte	$15
03426 0C40                        3F            .byte	$3F
03427 0C41                        3F            .byte	$3F
03428 0C42                        3F            .byte	$3F
03429 0C43                        15            .byte	$15
03430 0C44                        3F            .byte	$3F
03431 0C45                        3F            .byte	$3F
03432 0C46                        3F            .byte	$3F
03433                                           ! 653   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03434 0C47                        00            .byte	0
03435 0C48                        00            .byte	0
03436 0C49                        00            .byte	0
03437 0C4A                        05            .byte	5
03438 0C4B                        05            .byte	5
03439 0C4C                        05            .byte	5
03440 0C4D                        08            .byte	8
03441 0C4E                        08            .byte	8
03442 0C4F                        08            .byte	8
03443 0C50                        0B            .byte	$B
03444 0C51                        0B            .byte	$B
03445 0C52                        0B            .byte	$B
03446 0C53                        0E            .byte	$E
03447 0C54                        0E            .byte	$E
03448 0C55                        0E            .byte	$E
03449 0C56                        11            .byte	$11
03450 0C57                        11            .byte	$11
03451 0C58                        11            .byte	$11
03452 0C59                        14            .byte	$14
03453 0C5A                        14            .byte	$14
03454 0C5B                        14            .byte	$14
03455 0C5C                        18            .byte	$18
03456 0C5D                        18            .byte	$18
03457 0C5E                        18            .byte	$18
03458                                           ! 654   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03459 0C5F                        1C            .byte	$1C
03460 0C60                        1C            .byte	$1C
03461 0C61                        1C            .byte	$1C
03462 0C62                        20            .byte	$20
03463 0C63                        20            .byte	$20
03464 0C64                        20            .byte	$20
03465 0C65                        24            .byte	$24
03466 0C66                        24            .byte	$24
03467 0C67                        24            .byte	$24
03468 0C68                        28            .byte	$28
03469 0C69                        28            .byte	$28
03470 0C6A                        28            .byte	$28
03471 0C6B                        2D            .byte	$2D
03472 0C6C                        2D            .byte	$2D
03473 0C6D                        2D            .byte	$2D
03474 0C6E                        32            .byte	$32
03475 0C6F                        32            .byte	$32
03476 0C70                        32            .byte	$32
03477 0C71                        38            .byte	$38
03478 0C72                        38            .byte	$38
03479 0C73                        38            .byte	$38
03480 0C74                        3F            .byte	$3F
03481 0C75                        3F            .byte	$3F
03482 0C76                        3F            .byte	$3F
03483                                           ! 655   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03484 0C77                        00            .byte	0
03485 0C78                        00            .byte	0
03486 0C79                        3F            .byte	$3F
03487 0C7A                        10            .byte	$10
03488 0C7B                        00            .byte	0
03489 0C7C                        3F            .byte	$3F
03490 0C7D                        1F            .byte	$1F
03491 0C7E                        00            .byte	0
03492 0C7F                        3F            .byte	$3F
03493 0C80                        2F            .byte	$2F
03494 0C81                        00            .byte	0
03495 0C82                        3F            .byte	$3F
03496 0C83                        3F            .byte	$3F
03497 0C84                        00            .byte	0
03498 0C85                        3F            .byte	$3F
03499 0C86                        3F            .byte	$3F
03500 0C87                        00            .byte	0
03501 0C88                        2F            .byte	$2F
03502 0C89                        3F            .byte	$3F
03503 0C8A                        00            .byte	0
03504 0C8B                        1F            .byte	$1F
03505 0C8C                        3F            .byte	$3F
03506 0C8D                        00            .byte	0
03507 0C8E                        10            .byte	$10
03508                                           ! 656   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03509 0C8F                        3F            .byte	$3F
03510 0C90                        00            .byte	0
03511 0C91                        00            .byte	0
03512 0C92                        3F            .byte	$3F
03513 0C93                        10            .byte	$10
03514 0C94                        00            .byte	0
03515 0C95                        3F            .byte	$3F
03516 0C96                        1F            .byte	$1F
03517 0C97                        00            .byte	0
03518 0C98                        3F            .byte	$3F
03519 0C99                        2F            .byte	$2F
03520 0C9A                        00            .byte	0
03521 0C9B                        3F            .byte	$3F
03522 0C9C                        3F            .byte	$3F
03523 0C9D                        00            .byte	0
03524 0C9E                        2F            .byte	$2F
03525 0C9F                        3F            .byte	$3F
03526 0CA0                        00            .byte	0
03527 0CA1                        1F            .byte	$1F
03528 0CA2                        3F            .byte	$3F
03529 0CA3                        00            .byte	0
03530 0CA4                        10            .byte	$10
03531 0CA5                        3F            .byte	$3F
03532 0CA6                        00            .byte	0
03533                                           ! 657   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03534 0CA7                        00            .byte	0
03535 0CA8                        3F            .byte	$3F
03536 0CA9                        00            .byte	0
03537 0CAA                        00            .byte	0
03538 0CAB                        3F            .byte	$3F
03539 0CAC                        10            .byte	$10
03540 0CAD                        00            .byte	0
03541 0CAE                        3F            .byte	$3F
03542 0CAF                        1F            .byte	$1F
03543 0CB0                        00            .byte	0
03544 0CB1                        3F            .byte	$3F
03545 0CB2                        2F            .byte	$2F
03546 0CB3                        00            .byte	0
03547 0CB4                        3F            .byte	$3F
03548 0CB5                        3F            .byte	$3F
03549 0CB6                        00            .byte	0
03550 0CB7                        2F            .byte	$2F
03551 0CB8                        3F            .byte	$3F
03552 0CB9                        00            .byte	0
03553 0CBA                        1F            .byte	$1F
03554 0CBB                        3F            .byte	$3F
03555 0CBC                        00            .byte	0
03556 0CBD                        10            .byte	$10
03557 0CBE                        3F            .byte	$3F
03558                                           ! 658   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x2
03559 0CBF                        1F            .byte	$1F
03560 0CC0                        1F            .byte	$1F
03561 0CC1                        3F            .byte	$3F
03562 0CC2                        27            .byte	$27
03563 0CC3                        1F            .byte	$1F
03564 0CC4                        3F            .byte	$3F
03565 0CC5                        2F            .byte	$2F
03566 0CC6                        1F            .byte	$1F
03567 0CC7                        3F            .byte	$3F
03568 0CC8                        37            .byte	$37
03569 0CC9                        1F            .byte	$1F
03570 0CCA                        3F            .byte	$3F
03571 0CCB                        3F            .byte	$3F
03572 0CCC                        1F            .byte	$1F
03573 0CCD                        3F            .byte	$3F
03574 0CCE                        3F            .byte	$3F
03575 0CCF                        1F            .byte	$1F
03576 0CD0                        37            .byte	$37
03577 0CD1                        3F            .byte	$3F
03578 0CD2                        1F            .byte	$1F
03579 0CD3                        2F            .byte	$2F
03580 0CD4                        3F            .byte	$3F
03581 0CD5                        1F            .byte	$1F
03582                                           ! 658 7,
03583 0CD6                        27            .byte	$27
03584                                           ! 659   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03585 0CD7                        3F            .byte	$3F
03586 0CD8                        1F            .byte	$1F
03587 0CD9                        1F            .byte	$1F
03588 0CDA                        3F            .byte	$3F
03589 0CDB                        27            .byte	$27
03590 0CDC                        1F            .byte	$1F
03591 0CDD                        3F            .byte	$3F
03592 0CDE                        2F            .byte	$2F
03593 0CDF                        1F            .byte	$1F
03594 0CE0                        3F            .byte	$3F
03595 0CE1                        37            .byte	$37
03596 0CE2                        1F            .byte	$1F
03597 0CE3                        3F            .byte	$3F
03598 0CE4                        3F            .byte	$3F
03599 0CE5                        1F            .byte	$1F
03600 0CE6                        37            .byte	$37
03601 0CE7                        3F            .byte	$3F
03602 0CE8                        1F            .byte	$1F
03603 0CE9                        2F            .byte	$2F
03604 0CEA                        3F            .byte	$3F
03605 0CEB                        1F            .byte	$1F
03606 0CEC                        27            .byte	$27
03607 0CED                        3F            .byte	$3F
03608 0CEE                        1F            .byte	$1F
03609                                           ! 660   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03610 0CEF                        1F            .byte	$1F
03611 0CF0                        3F            .byte	$3F
03612 0CF1                        1F            .byte	$1F
03613 0CF2                        1F            .byte	$1F
03614 0CF3                        3F            .byte	$3F
03615 0CF4                        27            .byte	$27
03616 0CF5                        1F            .byte	$1F
03617 0CF6                        3F            .byte	$3F
03618 0CF7                        2F            .byte	$2F
03619 0CF8                        1F            .byte	$1F
03620 0CF9                        3F            .byte	$3F
03621 0CFA                        37            .byte	$37
03622 0CFB                        1F            .byte	$1F
03623 0CFC                        3F            .byte	$3F
03624 0CFD                        3F            .byte	$3F
03625 0CFE                        1F            .byte	$1F
03626 0CFF                        37            .byte	$37
03627 0D00                        3F            .byte	$3F
03628 0D01                        1F            .byte	$1F
03629 0D02                        2F            .byte	$2F
03630 0D03                        3F            .byte	$3F
03631 0D04                        1F            .byte	$1F
03632 0D05                        27            .byte	$27
03633 0D06                        3F            .byte	$3F
03634                                           ! 661   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03635 0D07                        2D            .byte	$2D
03636 0D08                        2D            .byte	$2D
03637 0D09                        3F            .byte	$3F
03638 0D0A                        31            .byte	$31
03639 0D0B                        2D            .byte	$2D
03640 0D0C                        3F            .byte	$3F
03641 0D0D                        36            .byte	$36
03642 0D0E                        2D            .byte	$2D
03643 0D0F                        3F            .byte	$3F
03644 0D10                        3A            .byte	$3A
03645 0D11                        2D            .byte	$2D
03646 0D12                        3F            .byte	$3F
03647 0D13                        3F            .byte	$3F
03648 0D14                        2D            .byte	$2D
03649 0D15                        3F            .byte	$3F
03650 0D16                        3F            .byte	$3F
03651 0D17                        2D            .byte	$2D
03652 0D18                        3A            .byte	$3A
03653 0D19                        3F            .byte	$3F
03654 0D1A                        2D            .byte	$2D
03655 0D1B                        36            .byte	$36
03656 0D1C                        3F            .byte	$3F
03657 0D1D                        2D            .byte	$2D
03658 0D1E                        31            .byte	$31
03659                                           ! 662   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03660 0D1F                        3F            .byte	$3F
03661 0D20                        2D            .byte	$2D
03662 0D21                        2D            .byte	$2D
03663 0D22                        3F            .byte	$3F
03664 0D23                        31            .byte	$31
03665 0D24                        2D            .byte	$2D
03666 0D25                        3F            .byte	$3F
03667 0D26                        36            .byte	$36
03668 0D27                        2D            .byte	$2D
03669 0D28                        3F            .byte	$3F
03670 0D29                        3A            .byte	$3A
03671 0D2A                        2D            .byte	$2D
03672 0D2B                        3F            .byte	$3F
03673 0D2C                        3F            .byte	$3F
03674 0D2D                        2D            .byte	$2D
03675 0D2E                        3A            .byte	$3A
03676 0D2F                        3F            .byte	$3F
03677 0D30                        2D            .byte	$2D
03678 0D31                        36            .byte	$36
03679 0D32                        3F            .byte	$3F
03680 0D33                        2D            .byte	$2D
03681 0D34                        31            .byte	$31
03682 0D35                        3F            .byte	$3F
03683 0D36                        2D            .byte	$2D
03684                                           ! 663   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03685 0D37                        2D            .byte	$2D
03686 0D38                        3F            .byte	$3F
03687 0D39                        2D            .byte	$2D
03688 0D3A                        2D            .byte	$2D
03689 0D3B                        3F            .byte	$3F
03690 0D3C                        31            .byte	$31
03691 0D3D                        2D            .byte	$2D
03692 0D3E                        3F            .byte	$3F
03693 0D3F                        36            .byte	$36
03694 0D40                        2D            .byte	$2D
03695 0D41                        3F            .byte	$3F
03696 0D42                        3A            .byte	$3A
03697 0D43                        2D            .byte	$2D
03698 0D44                        3F            .byte	$3F
03699 0D45                        3F            .byte	$3F
03700 0D46                        2D            .byte	$2D
03701 0D47                        3A            .byte	$3A
03702 0D48                        3F            .byte	$3F
03703 0D49                        2D            .byte	$2D
03704 0D4A                        36            .byte	$36
03705 0D4B                        3F            .byte	$3F
03706 0D4C                        2D            .byte	$2D
03707 0D4D                        31            .byte	$31
03708 0D4E                        3F            .byte	$3F
03709                                           ! 664   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
03710 0D4F                        00            .byte	0
03711 0D50                        00            .byte	0
03712 0D51                        1C            .byte	$1C
03713 0D52                        07            .byte	7
03714 0D53                        00            .byte	0
03715 0D54                        1C            .byte	$1C
03716 0D55                        0E            .byte	$E
03717 0D56                        00            .byte	0
03718 0D57                        1C            .byte	$1C
03719 0D58                        15            .byte	$15
03720 0D59                        00            .byte	0
03721 0D5A                        1C            .byte	$1C
03722 0D5B                        1C            .byte	$1C
03723 0D5C                        00            .byte	0
03724 0D5D                        1C            .byte	$1C
03725 0D5E                        1C            .byte	$1C
03726 0D5F                        00            .byte	0
03727 0D60                        15            .byte	$15
03728 0D61                        1C            .byte	$1C
03729 0D62                        00            .byte	0
03730 0D63                        0E            .byte	$E
03731 0D64                        1C            .byte	$1C
03732 0D65                        00            .byte	0
03733 0D66                        07            .byte	7
03734                                           ! 665   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
03735 0D67                        1C            .byte	$1C
03736 0D68                        00            .byte	0
03737 0D69                        00            .byte	0
03738 0D6A                        1C            .byte	$1C
03739 0D6B                        07            .byte	7
03740 0D6C                        00            .byte	0
03741 0D6D                        1C            .byte	$1C
03742 0D6E                        0E            .byte	$E
03743 0D6F                        00            .byte	0
03744 0D70                        1C            .byte	$1C
03745 0D71                        15            .byte	$15
03746 0D72                        00            .byte	0
03747 0D73                        1C            .byte	$1C
03748 0D74                        1C            .byte	$1C
03749 0D75                        00            .byte	0
03750 0D76                        15            .byte	$15
03751 0D77                        1C            .byte	$1C
03752 0D78                        00            .byte	0
03753 0D79                        0E            .byte	$E
03754 0D7A                        1C            .byte	$1C
03755 0D7B                        00            .byte	0
03756 0D7C                        07            .byte	7
03757 0D7D                        1C            .byte	$1C
03758 0D7E                        00            .byte	0
03759                                           ! 666   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
03760 0D7F                        00            .byte	0
03761 0D80                        1C            .byte	$1C
03762 0D81                        00            .byte	0
03763 0D82                        00            .byte	0
03764 0D83                        1C            .byte	$1C
03765 0D84                        07            .byte	7
03766 0D85                        00            .byte	0
03767 0D86                        1C            .byte	$1C
03768 0D87                        0E            .byte	$E
03769 0D88                        00            .byte	0
03770 0D89                        1C            .byte	$1C
03771 0D8A                        15            .byte	$15
03772 0D8B                        00            .byte	0
03773 0D8C                        1C            .byte	$1C
03774 0D8D                        1C            .byte	$1C
03775 0D8E                        00            .byte	0
03776 0D8F                        15            .byte	$15
03777 0D90                        1C            .byte	$1C
03778 0D91                        00            .byte	0
03779 0D92                        0E            .byte	$E
03780 0D93                        1C            .byte	$1C
03781 0D94                        00            .byte	0
03782 0D95                        07            .byte	7
03783 0D96                        1C            .byte	$1C
03784                                           ! 667   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
03785 0D97                        0E            .byte	$E
03786 0D98                        0E            .byte	$E
03787 0D99                        1C            .byte	$1C
03788 0D9A                        11            .byte	$11
03789 0D9B                        0E            .byte	$E
03790 0D9C                        1C            .byte	$1C
03791 0D9D                        15            .byte	$15
03792 0D9E                        0E            .byte	$E
03793 0D9F                        1C            .byte	$1C
03794 0DA0                        18            .byte	$18
03795 0DA1                        0E            .byte	$E
03796 0DA2                        1C            .byte	$1C
03797 0DA3                        1C            .byte	$1C
03798 0DA4                        0E            .byte	$E
03799 0DA5                        1C            .byte	$1C
03800 0DA6                        1C            .byte	$1C
03801 0DA7                        0E            .byte	$E
03802 0DA8                        18            .byte	$18
03803 0DA9                        1C            .byte	$1C
03804 0DAA                        0E            .byte	$E
03805 0DAB                        15            .byte	$15
03806 0DAC                        1C            .byte	$1C
03807 0DAD                        0E            .byte	$E
03808 0DAE                        11            .byte	$11
03809                                           ! 668   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
03810 0DAF                        1C            .byte	$1C
03811 0DB0                        0E            .byte	$E
03812 0DB1                        0E            .byte	$E
03813 0DB2                        1C            .byte	$1C
03814 0DB3                        11            .byte	$11
03815 0DB4                        0E            .byte	$E
03816 0DB5                        1C            .byte	$1C
03817 0DB6                        15            .byte	$15
03818 0DB7                        0E            .byte	$E
03819 0DB8                        1C            .byte	$1C
03820 0DB9                        18            .byte	$18
03821 0DBA                        0E            .byte	$E
03822 0DBB                        1C            .byte	$1C
03823 0DBC                        1C            .byte	$1C
03824 0DBD                        0E            .byte	$E
03825 0DBE                        18            .byte	$18
03826 0DBF                        1C            .byte	$1C
03827 0DC0                        0E            .byte	$E
03828 0DC1                        15            .byte	$15
03829 0DC2                        1C            .byte	$1C
03830 0DC3                        0E            .byte	$E
03831 0DC4                        11            .byte	$11
03832 0DC5                        1C            .byte	$1C
03833 0DC6                        0E            .byte	$E
03834                                           ! 669   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
03835 0DC7                        0E            .byte	$E
03836 0DC8                        1C            .byte	$1C
03837 0DC9                        0E            .byte	$E
03838 0DCA                        0E            .byte	$E
03839 0DCB                        1C            .byte	$1C
03840 0DCC                        11            .byte	$11
03841 0DCD                        0E            .byte	$E
03842 0DCE                        1C            .byte	$1C
03843 0DCF                        15            .byte	$15
03844 0DD0                        0E            .byte	$E
03845 0DD1                        1C            .byte	$1C
03846 0DD2                        18            .byte	$18
03847 0DD3                        0E            .byte	$E
03848 0DD4                        1C            .byte	$1C
03849 0DD5                        1C            .byte	$1C
03850 0DD6                        0E            .byte	$E
03851 0DD7                        18            .byte	$18
03852 0DD8                        1C            .byte	$1C
03853 0DD9                        0E            .byte	$E
03854 0DDA                        15            .byte	$15
03855 0DDB                        1C            .byte	$1C
03856 0DDC                        0E            .byte	$E
03857 0DDD                        11            .byte	$11
03858 0DDE                        1C            .byte	$1C
03859                                           ! 670   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
03860 0DDF                        14            .byte	$14
03861 0DE0                        14            .byte	$14
03862 0DE1                        1C            .byte	$1C
03863 0DE2                        16            .byte	$16
03864 0DE3                        14            .byte	$14
03865 0DE4                        1C            .byte	$1C
03866 0DE5                        18            .byte	$18
03867 0DE6                        14            .byte	$14
03868 0DE7                        1C            .byte	$1C
03869 0DE8                        1A            .byte	$1A
03870 0DE9                        14            .byte	$14
03871 0DEA                        1C            .byte	$1C
03872 0DEB                        1C            .byte	$1C
03873 0DEC                        14            .byte	$14
03874 0DED                        1C            .byte	$1C
03875 0DEE                        1C            .byte	$1C
03876 0DEF                        14            .byte	$14
03877 0DF0                        1A            .byte	$1A
03878 0DF1                        1C            .byte	$1C
03879 0DF2                        14            .byte	$14
03880 0DF3                        18            .byte	$18
03881 0DF4                        1C            .byte	$1C
03882 0DF5                        14            .byte	$14
03883 0DF6                        16            .byte	$16
03884                                           ! 671   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
03885 0DF7                        1C            .byte	$1C
03886 0DF8                        14            .byte	$14
03887 0DF9                        14            .byte	$14
03888 0DFA                        1C            .byte	$1C
03889 0DFB                        16            .byte	$16
03890 0DFC                        14            .byte	$14
03891 0DFD                        1C            .byte	$1C
03892 0DFE                        18            .byte	$18
03893 0DFF                        14            .byte	$14
03894 0E00                        1C            .byte	$1C
03895 0E01                        1A            .byte	$1A
03896 0E02                        14            .byte	$14
03897 0E03                        1C            .byte	$1C
03898 0E04                        1C            .byte	$1C
03899 0E05                        14            .byte	$14
03900 0E06                        1A            .byte	$1A
03901 0E07                        1C            .byte	$1C
03902 0E08                        14            .byte	$14
03903 0E09                        18            .byte	$18
03904 0E0A                        1C            .byte	$1C
03905 0E0B                        14            .byte	$14
03906 0E0C                        16            .byte	$16
03907 0E0D                        1C            .byte	$1C
03908 0E0E                        14            .byte	$14
03909                                           ! 672   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
03910 0E0F                        14            .byte	$14
03911 0E10                        1C            .byte	$1C
03912 0E11                        14            .byte	$14
03913 0E12                        14            .byte	$14
03914 0E13                        1C            .byte	$1C
03915 0E14                        16            .byte	$16
03916 0E15                        14            .byte	$14
03917 0E16                        1C            .byte	$1C
03918 0E17                        18            .byte	$18
03919 0E18                        14            .byte	$14
03920 0E19                        1C            .byte	$1C
03921 0E1A                        1A            .byte	$1A
03922 0E1B                        14            .byte	$14
03923 0E1C                        1C            .byte	$1C
03924 0E1D                        1C            .byte	$1C
03925 0E1E                        14            .byte	$14
03926 0E1F                        1A            .byte	$1A
03927 0E20                        1C            .byte	$1C
03928 0E21                        14            .byte	$14
03929 0E22                        18            .byte	$18
03930 0E23                        1C            .byte	$1C
03931 0E24                        14            .byte	$14
03932 0E25                        16            .byte	$16
03933 0E26                        1C            .byte	$1C
03934                                           ! 673   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
03935 0E27                        00            .byte	0
03936 0E28                        00            .byte	0
03937 0E29                        10            .byte	$10
03938 0E2A                        04            .byte	4
03939 0E2B                        00            .byte	0
03940 0E2C                        10            .byte	$10
03941 0E2D                        08            .byte	8
03942 0E2E                        00            .byte	0
03943 0E2F                        10            .byte	$10
03944 0E30                        0C            .byte	$C
03945 0E31                        00            .byte	0
03946 0E32                        10            .byte	$10
03947 0E33                        10            .byte	$10
03948 0E34                        00            .byte	0
03949 0E35                        10            .byte	$10
03950 0E36                        10            .byte	$10
03951 0E37                        00            .byte	0
03952 0E38                        0C            .byte	$C
03953 0E39                        10            .byte	$10
03954 0E3A                        00            .byte	0
03955 0E3B                        08            .byte	8
03956 0E3C                        10            .byte	$10
03957 0E3D                        00            .byte	0
03958 0E3E                        04            .byte	4
03959                                           ! 674   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x0
03960 0E3F                        10            .byte	$10
03961 0E40                        00            .byte	0
03962 0E41                        00            .byte	0
03963 0E42                        10            .byte	$10
03964 0E43                        04            .byte	4
03965 0E44                        00            .byte	0
03966 0E45                        10            .byte	$10
03967 0E46                        08            .byte	8
03968 0E47                        00            .byte	0
03969 0E48                        10            .byte	$10
03970 0E49                        0C            .byte	$C
03971 0E4A                        00            .byte	0
03972 0E4B                        10            .byte	$10
03973 0E4C                        10            .byte	$10
03974 0E4D                        00            .byte	0
03975 0E4E                        0C            .byte	$C
03976 0E4F                        10            .byte	$10
03977                                           ! 674 0, 0x08,0x10,0x00, 0x04,0x10,0x00,
03978 0E50                        00            .byte	0
03979 0E51                        08            .byte	8
03980 0E52                        10            .byte	$10
03981 0E53                        00            .byte	0
03982 0E54                        04            .byte	4
03983 0E55                        10            .byte	$10
03984 0E56                        00            .byte	0
03985                                           ! 675   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
03986 0E57                        00            .byte	0
03987 0E58                        10            .byte	$10
03988 0E59                        00            .byte	0
03989 0E5A                        00            .byte	0
03990 0E5B                        10            .byte	$10
03991 0E5C                        04            .byte	4
03992 0E5D                        00            .byte	0
03993 0E5E                        10            .byte	$10
03994 0E5F                        08            .byte	8
03995 0E60                        00            .byte	0
03996 0E61                        10            .byte	$10
03997 0E62                        0C            .byte	$C
03998 0E63                        00            .byte	0
03999 0E64                        10            .byte	$10
04000 0E65                        10            .byte	$10
04001 0E66                        00            .byte	0
04002 0E67                        0C            .byte	$C
04003 0E68                        10            .byte	$10
04004 0E69                        00            .byte	0
04005 0E6A                        08            .byte	8
04006 0E6B                        10            .byte	$10
04007 0E6C                        00            .byte	0
04008 0E6D                        04            .byte	4
04009 0E6E                        10            .byte	$10
04010                                           ! 676   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04011 0E6F                        08            .byte	8
04012 0E70                        08            .byte	8
04013 0E71                        10            .byte	$10
04014 0E72                        0A            .byte	$A
04015 0E73                        08            .byte	8
04016 0E74                        10            .byte	$10
04017 0E75                        0C            .byte	$C
04018 0E76                        08            .byte	8
04019 0E77                        10            .byte	$10
04020 0E78                        0E            .byte	$E
04021 0E79                        08            .byte	8
04022 0E7A                        10            .byte	$10
04023 0E7B                        10            .byte	$10
04024 0E7C                        08            .byte	8
04025 0E7D                        10            .byte	$10
04026 0E7E                        10            .byte	$10
04027 0E7F                        08            .byte	8
04028 0E80                        0E            .byte	$E
04029 0E81                        10            .byte	$10
04030 0E82                        08            .byte	8
04031 0E83                        0C            .byte	$C
04032 0E84                        10            .byte	$10
04033 0E85                        08            .byte	8
04034 0E86                        0A            .byte	$A
04035                                           ! 677   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04036 0E87                        10            .byte	$10
04037 0E88                        08            .byte	8
04038 0E89                        08            .byte	8
04039 0E8A                        10            .byte	$10
04040 0E8B                        0A            .byte	$A
04041 0E8C                        08            .byte	8
04042 0E8D                        10            .byte	$10
04043 0E8E                        0C            .byte	$C
04044 0E8F                        08            .byte	8
04045 0E90                        10            .byte	$10
04046 0E91                        0E            .byte	$E
04047 0E92                        08            .byte	8
04048 0E93                        10            .byte	$10
04049 0E94                        10            .byte	$10
04050 0E95                        08            .byte	8
04051 0E96                        0E            .byte	$E
04052 0E97                        10            .byte	$10
04053 0E98                        08            .byte	8
04054 0E99                        0C            .byte	$C
04055 0E9A                        10            .byte	$10
04056 0E9B                        08            .byte	8
04057 0E9C                        0A            .byte	$A
04058 0E9D                        10            .byte	$10
04059 0E9E                        08            .byte	8
04060                                           ! 678   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04061 0E9F                        08            .byte	8
04062 0EA0                        10            .byte	$10
04063 0EA1                        08            .byte	8
04064 0EA2                        08            .byte	8
04065 0EA3                        10            .byte	$10
04066 0EA4                        0A            .byte	$A
04067 0EA5                        08            .byte	8
04068 0EA6                        10            .byte	$10
04069 0EA7                        0C            .byte	$C
04070 0EA8                        08            .byte	8
04071 0EA9                        10            .byte	$10
04072 0EAA                        0E            .byte	$E
04073 0EAB                        08            .byte	8
04074 0EAC                        10            .byte	$10
04075 0EAD                        10            .byte	$10
04076 0EAE                        08            .byte	8
04077 0EAF                        0E            .byte	$E
04078 0EB0                        10            .byte	$10
04079 0EB1                        08            .byte	8
04080 0EB2                        0C            .byte	$C
04081 0EB3                        10            .byte	$10
04082 0EB4                        08            .byte	8
04083 0EB5                        0A            .byte	$A
04084 0EB6                        10            .byte	$10
04085                                           ! 679   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04086 0EB7                        0B            .byte	$B
04087 0EB8                        0B            .byte	$B
04088 0EB9                        10            .byte	$10
04089 0EBA                        0C            .byte	$C
04090 0EBB                        0B            .byte	$B
04091 0EBC                        10            .byte	$10
04092 0EBD                        0D            .byte	$D
04093 0EBE                        0B            .byte	$B
04094 0EBF                        10            .byte	$10
04095 0EC0                        0F            .byte	$F
04096 0EC1                        0B            .byte	$B
04097 0EC2                        10            .byte	$10
04098 0EC3                        10            .byte	$10
04099 0EC4                        0B            .byte	$B
04100 0EC5                        10            .byte	$10
04101 0EC6                        10            .byte	$10
04102 0EC7                        0B            .byte	$B
04103 0EC8                        0F            .byte	$F
04104 0EC9                        10            .byte	$10
04105 0ECA                        0B            .byte	$B
04106 0ECB                        0D            .byte	$D
04107 0ECC                        10            .byte	$10
04108 0ECD                        0B            .byte	$B
04109 0ECE                        0C            .byte	$C
04110                                           ! 680   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04111 0ECF                        10            .byte	$10
04112 0ED0                        0B            .byte	$B
04113 0ED1                        0B            .byte	$B
04114 0ED2                        10            .byte	$10
04115 0ED3                        0C            .byte	$C
04116 0ED4                        0B            .byte	$B
04117 0ED5                        10            .byte	$10
04118 0ED6                        0D            .byte	$D
04119 0ED7                        0B            .byte	$B
04120 0ED8                        10            .byte	$10
04121 0ED9                        0F            .byte	$F
04122 0EDA                        0B            .byte	$B
04123 0EDB                        10            .byte	$10
04124 0EDC                        10            .byte	$10
04125 0EDD                        0B            .byte	$B
04126 0EDE                        0F            .byte	$F
04127 0EDF                        10            .byte	$10
04128 0EE0                        0B            .byte	$B
04129 0EE1                        0D            .byte	$D
04130 0EE2                        10            .byte	$10
04131 0EE3                        0B            .byte	$B
04132 0EE4                        0C            .byte	$C
04133 0EE5                        10            .byte	$10
04134 0EE6                        0B            .byte	$B
04135                                           ! 681   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04136 0EE7                        0B            .byte	$B
04137 0EE8                        10            .byte	$10
04138 0EE9                        0B            .byte	$B
04139 0EEA                        0B            .byte	$B
04140 0EEB                        10            .byte	$10
04141 0EEC                        0C            .byte	$C
04142 0EED                        0B            .byte	$B
04143 0EEE                        10            .byte	$10
04144 0EEF                        0D            .byte	$D
04145 0EF0                        0B            .byte	$B
04146 0EF1                        10            .byte	$10
04147 0EF2                        0F            .byte	$F
04148 0EF3                        0B            .byte	$B
04149 0EF4                        10            .byte	$10
04150 0EF5                        10            .byte	$10
04151 0EF6                        0B            .byte	$B
04152 0EF7                        0F            .byte	$F
04153 0EF8                        10            .byte	$10
04154 0EF9                        0B            .byte	$B
04155 0EFA                        0D            .byte	$D
04156 0EFB                        10            .byte	$10
04157 0EFC                        0B            .byte	$B
04158 0EFD                        0C            .byte	$C
04159 0EFE                        10            .byte	$10
04160                                           ! 682   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04161 0EFF                        00            .byte	0
04162 0F00                        00            .byte	0
04163 0F01                        00            .byte	0
04164 0F02                        00            .byte	0
04165 0F03                        00            .byte	0
04166 0F04                        00            .byte	0
04167 0F05                        00            .byte	0
04168 0F06                        00            .byte	0
04169 0F07                        00            .byte	0
04170 0F08                        00            .byte	0
04171 0F09                        00            .byte	0
04172 0F0A                        00            .byte	0
04173 0F0B                        00            .byte	0
04174 0F0C                        00            .byte	0
04175 0F0D                        00            .byte	0
04176 0F0E                        00            .byte	0
04177 0F0F                        00            .byte	0
04178 0F10                        00            .byte	0
04179 0F11                        00            .byte	0
04180 0F12                        00            .byte	0
04181 0F13                        00            .byte	0
04182 0F14                        00            .byte	0
04183 0F15                        00            .byte	0
04184                                           ! 683 };
04185 0F16                        00            .byte	0
04186                                           !BCC_EOS
04187                                           ! 684 static Bit8u static_functionality[0x10]=
04188                                           ! 685 {
04189                       00000F17            _static_functionality:
04190                                           ! 686          0xff,
04191 0F17                        FF            .byte	$FF
04192                                           ! 687          0xe0,
04193 0F18                        E0            .byte	$E0
04194                                           ! 688          0x0f,
04195 0F19                        0F            .byte	$F
04196                                           ! 689          0x00, 0x00, 0x00, 0x00,
04197 0F1A                        00            .byte	0
04198 0F1B                        00            .byte	0
04199 0F1C                        00            .byte	0
04200 0F1D                        00            .byte	0
04201                                           ! 690          0x07,
04202 0F1E                        07            .byte	7
04203                                           ! 691          0x02,
04204 0F1F                        02            .byte	2
04205                                           ! 692          0x08,
04206 0F20                        08            .byte	8
04207                                           ! 693          0xe7,
04208 0F21                        E7            .byte	$E7
04209                                           ! 694          0x0c,
04210 0F22                        0C            .byte	$C
04211                                           ! 695          0x00,
04212 0F23                        00            .byte	0
04213                                           ! 696          0x00,
04214 0F24                        00            .byte	0
04215                                           ! 697          0x00,
04216 0F25                        00            .byte	0
04217                                           ! 698          0x00
04218                                           ! 699 };
04219 0F26                        00            .byte	0
04220                                           !BCC_EOS
04221                                           ! 700 static Bit8u vgafont8[256*8]=
04222                                           ! 701 {
04223                       00000F27            _vgafont8:
04224                                           ! 702  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04225 0F27                        00            .byte	0
04226 0F28                        00            .byte	0
04227 0F29                        00            .byte	0
04228 0F2A                        00            .byte	0
04229 0F2B                        00            .byte	0
04230 0F2C                        00            .byte	0
04231 0F2D                        00            .byte	0
04232 0F2E                        00            .byte	0
04233                                           ! 703  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04234 0F2F                        7E            .byte	$7E
04235 0F30                        81            .byte	$81
04236 0F31                        A5            .byte	$A5
04237 0F32                        81            .byte	$81
04238 0F33                        BD            .byte	$BD
04239 0F34                        99            .byte	$99
04240 0F35                        81            .byte	$81
04241 0F36                        7E            .byte	$7E
04242                                           ! 704  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04243 0F37                        7E            .byte	$7E
04244 0F38                        FF            .byte	$FF
04245 0F39                        DB            .byte	$DB
04246 0F3A                        FF            .byte	$FF
04247 0F3B                        C3            .byte	$C3
04248 0F3C                        E7            .byte	$E7
04249 0F3D                        FF            .byte	$FF
04250 0F3E                        7E            .byte	$7E
04251                                           ! 705  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04252 0F3F                        6C            .byte	$6C
04253 0F40                        FE            .byte	$FE
04254 0F41                        FE            .byte	$FE
04255 0F42                        FE            .byte	$FE
04256 0F43                        7C            .byte	$7C
04257 0F44                        38            .byte	$38
04258 0F45                        10            .byte	$10
04259 0F46                        00            .byte	0
04260                                           ! 706  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04261 0F47                        10            .byte	$10
04262 0F48                        38            .byte	$38
04263 0F49                        7C            .byte	$7C
04264 0F4A                        FE            .byte	$FE
04265 0F4B                        7C            .byte	$7C
04266 0F4C                        38            .byte	$38
04267 0F4D                        10            .byte	$10
04268 0F4E                        00            .byte	0
04269                                           ! 707  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04270 0F4F                        38            .byte	$38
04271 0F50                        7C            .byte	$7C
04272 0F51                        38            .byte	$38
04273 0F52                        FE            .byte	$FE
04274 0F53                        FE            .byte	$FE
04275 0F54                        7C            .byte	$7C
04276 0F55                        38            .byte	$38
04277 0F56                        7C            .byte	$7C
04278                                           ! 708  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04279 0F57                        10            .byte	$10
04280 0F58                        10            .byte	$10
04281 0F59                        38            .byte	$38
04282 0F5A                        7C            .byte	$7C
04283 0F5B                        FE            .byte	$FE
04284 0F5C                        7C            .byte	$7C
04285 0F5D                        38            .byte	$38
04286 0F5E                        7C            .byte	$7C
04287                                           ! 709  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04288 0F5F                        00            .byte	0
04289 0F60                        00            .byte	0
04290 0F61                        18            .byte	$18
04291 0F62                        3C            .byte	$3C
04292 0F63                        3C            .byte	$3C
04293 0F64                        18            .byte	$18
04294 0F65                        00            .byte	0
04295 0F66                        00            .byte	0
04296                                           ! 710  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04297 0F67                        FF            .byte	$FF
04298 0F68                        FF            .byte	$FF
04299 0F69                        E7            .byte	$E7
04300 0F6A                        C3            .byte	$C3
04301 0F6B                        C3            .byte	$C3
04302 0F6C                        E7            .byte	$E7
04303 0F6D                        FF            .byte	$FF
04304 0F6E                        FF            .byte	$FF
04305                                           ! 711  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04306 0F6F                        00            .byte	0
04307 0F70                        3C            .byte	$3C
04308 0F71                        66            .byte	$66
04309 0F72                        42            .byte	$42
04310 0F73                        42            .byte	$42
04311 0F74                        66            .byte	$66
04312 0F75                        3C            .byte	$3C
04313 0F76                        00            .byte	0
04314                                           ! 712  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04315 0F77                        FF            .byte	$FF
04316 0F78                        C3            .byte	$C3
04317 0F79                        99            .byte	$99
04318 0F7A                        BD            .byte	$BD
04319 0F7B                        BD            .byte	$BD
04320 0F7C                        99            .byte	$99
04321 0F7D                        C3            .byte	$C3
04322 0F7E                        FF            .byte	$FF
04323                                           ! 713  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04324 0F7F                        0F            .byte	$F
04325 0F80                        07            .byte	7
04326 0F81                        0F            .byte	$F
04327 0F82                        7D            .byte	$7D
04328 0F83                        CC            .byte	$CC
04329 0F84                        CC            .byte	$CC
04330 0F85                        CC            .byte	$CC
04331 0F86                        78            .byte	$78
04332                                           ! 714  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04333 0F87                        3C            .byte	$3C
04334 0F88                        66            .byte	$66
04335 0F89                        66            .byte	$66
04336 0F8A                        66            .byte	$66
04337 0F8B                        3C            .byte	$3C
04338 0F8C                        18            .byte	$18
04339 0F8D                        7E            .byte	$7E
04340 0F8E                        18            .byte	$18
04341                                           ! 715  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0
04342 0F8F                        3F            .byte	$3F
04343 0F90                        33            .byte	$33
04344 0F91                        3F            .byte	$3F
04345 0F92                        30            .byte	$30
04346 0F93                        30            .byte	$30
04347 0F94                        70            .byte	$70
04348 0F95                        F0            .byte	$F0
04349                                           ! 715 xe0,
04350 0F96                        E0            .byte	$E0
04351                                           ! 716  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04352 0F97                        7F            .byte	$7F
04353 0F98                        63            .byte	$63
04354 0F99                        7F            .byte	$7F
04355 0F9A                        63            .byte	$63
04356 0F9B                        63            .byte	$63
04357 0F9C                        67            .byte	$67
04358 0F9D                        E6            .byte	$E6
04359 0F9E                        C0            .byte	$C0
04360                                           ! 717  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04361 0F9F                        99            .byte	$99
04362 0FA0                        5A            .byte	$5A
04363 0FA1                        3C            .byte	$3C
04364 0FA2                        E7            .byte	$E7
04365 0FA3                        E7            .byte	$E7
04366 0FA4                        3C            .byte	$3C
04367 0FA5                        5A            .byte	$5A
04368 0FA6                        99            .byte	$99
04369                                           ! 718  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04370 0FA7                        80            .byte	$80
04371 0FA8                        E0            .byte	$E0
04372 0FA9                        F8            .byte	$F8
04373 0FAA                        FE            .byte	$FE
04374 0FAB                        F8            .byte	$F8
04375 0FAC                        E0            .byte	$E0
04376 0FAD                        80            .byte	$80
04377 0FAE                        00            .byte	0
04378                                           ! 719  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04379 0FAF                        02            .byte	2
04380 0FB0                        0E            .byte	$E
04381 0FB1                        3E            .byte	$3E
04382 0FB2                        FE            .byte	$FE
04383 0FB3                        3E            .byte	$3E
04384 0FB4                        0E            .byte	$E
04385 0FB5                        02            .byte	2
04386 0FB6                        00            .byte	0
04387                                           ! 720  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04388 0FB7                        18            .byte	$18
04389 0FB8                        3C            .byte	$3C
04390 0FB9                        7E            .byte	$7E
04391 0FBA                        18            .byte	$18
04392 0FBB                        18            .byte	$18
04393 0FBC                        7E            .byte	$7E
04394 0FBD                        3C            .byte	$3C
04395 0FBE                        18            .byte	$18
04396                                           ! 721  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04397 0FBF                        66            .byte	$66
04398 0FC0                        66            .byte	$66
04399 0FC1                        66            .byte	$66
04400 0FC2                        66            .byte	$66
04401 0FC3                        66            .byte	$66
04402 0FC4                        00            .byte	0
04403 0FC5                        66            .byte	$66
04404 0FC6                        00            .byte	0
04405                                           ! 722  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04406 0FC7                        7F            .byte	$7F
04407 0FC8                        DB            .byte	$DB
04408 0FC9                        DB            .byte	$DB
04409 0FCA                        7B            .byte	$7B
04410 0FCB                        1B            .byte	$1B
04411 0FCC                        1B            .byte	$1B
04412 0FCD                        1B            .byte	$1B
04413 0FCE                        00            .byte	0
04414                                           ! 723  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04415 0FCF                        3E            .byte	$3E
04416 0FD0                        63            .byte	$63
04417 0FD1                        38            .byte	$38
04418 0FD2                        6C            .byte	$6C
04419 0FD3                        6C            .byte	$6C
04420 0FD4                        38            .byte	$38
04421 0FD5                        CC            .byte	$CC
04422 0FD6                        78            .byte	$78
04423                                           ! 724  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04424 0FD7                        00            .byte	0
04425 0FD8                        00            .byte	0
04426 0FD9                        00            .byte	0
04427 0FDA                        00            .byte	0
04428 0FDB                        7E            .byte	$7E
04429 0FDC                        7E            .byte	$7E
04430 0FDD                        7E            .byte	$7E
04431 0FDE                        00            .byte	0
04432                                           ! 725  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04433 0FDF                        18            .byte	$18
04434 0FE0                        3C            .byte	$3C
04435 0FE1                        7E            .byte	$7E
04436 0FE2                        18            .byte	$18
04437 0FE3                        7E            .byte	$7E
04438 0FE4                        3C            .byte	$3C
04439 0FE5                        18            .byte	$18
04440 0FE6                        FF            .byte	$FF
04441                                           ! 726  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04442 0FE7                        18            .byte	$18
04443 0FE8                        3C            .byte	$3C
04444 0FE9                        7E            .byte	$7E
04445 0FEA                        18            .byte	$18
04446 0FEB                        18            .byte	$18
04447 0FEC                        18            .byte	$18
04448 0FED                        18            .byte	$18
04449 0FEE                        00            .byte	0
04450                                           ! 727  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04451 0FEF                        18            .byte	$18
04452 0FF0                        18            .byte	$18
04453 0FF1                        18            .byte	$18
04454 0FF2                        18            .byte	$18
04455 0FF3                        7E            .byte	$7E
04456 0FF4                        3C            .byte	$3C
04457 0FF5                        18            .byte	$18
04458 0FF6                        00            .byte	0
04459                                           ! 728  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04460 0FF7                        00            .byte	0
04461 0FF8                        18            .byte	$18
04462 0FF9                        0C            .byte	$C
04463 0FFA                        FE            .byte	$FE
04464 0FFB                        0C            .byte	$C
04465 0FFC                        18            .byte	$18
04466 0FFD                        00            .byte	0
04467 0FFE                        00            .byte	0
04468                                           ! 729  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04469 0FFF                        00            .byte	0
04470 1000                        30            .byte	$30
04471 1001                        60            .byte	$60
04472 1002                        FE            .byte	$FE
04473 1003                        60            .byte	$60
04474 1004                        30            .byte	$30
04475 1005                        00            .byte	0
04476 1006                        00            .byte	0
04477                                           ! 730  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04478 1007                        00            .byte	0
04479 1008                        00            .byte	0
04480 1009                        C0            .byte	$C0
04481 100A                        C0            .byte	$C0
04482 100B                        C0            .byte	$C0
04483 100C                        FE            .byte	$FE
04484 100D                        00            .byte	0
04485 100E                        00            .byte	0
04486                                           ! 731  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04487 100F                        00            .byte	0
04488 1010                        24            .byte	$24
04489 1011                        66            .byte	$66
04490 1012                        FF            .byte	$FF
04491 1013                        66            .byte	$66
04492 1014                        24            .byte	$24
04493 1015                        00            .byte	0
04494 1016                        00            .byte	0
04495                                           ! 732  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04496 1017                        00            .byte	0
04497 1018                        18            .byte	$18
04498 1019                        3C            .byte	$3C
04499 101A                        7E            .byte	$7E
04500 101B                        FF            .byte	$FF
04501 101C                        FF            .byte	$FF
04502 101D                        00            .byte	0
04503 101E                        00            .byte	0
04504                                           ! 733  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04505 101F                        00            .byte	0
04506 1020                        FF            .byte	$FF
04507 1021                        FF            .byte	$FF
04508 1022                        7E            .byte	$7E
04509 1023                        3C            .byte	$3C
04510 1024                        18            .byte	$18
04511 1025                        00            .byte	0
04512 1026                        00            .byte	0
04513                                           ! 734  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04514 1027                        00            .byte	0
04515 1028                        00            .byte	0
04516 1029                        00            .byte	0
04517 102A                        00            .byte	0
04518 102B                        00            .byte	0
04519 102C                        00            .byte	0
04520 102D                        00            .byte	0
04521 102E                        00            .byte	0
04522                                           ! 735  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04523 102F                        30            .byte	$30
04524 1030                        78            .byte	$78
04525 1031                        78            .byte	$78
04526 1032                        30            .byte	$30
04527 1033                        30            .byte	$30
04528 1034                        00            .byte	0
04529 1035                        30            .byte	$30
04530 1036                        00            .byte	0
04531                                           ! 736  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04532 1037                        6C            .byte	$6C
04533 1038                        6C            .byte	$6C
04534 1039                        6C            .byte	$6C
04535 103A                        00            .byte	0
04536 103B                        00            .byte	0
04537 103C                        00            .byte	0
04538 103D                        00            .byte	0
04539 103E                        00            .byte	0
04540                                           ! 737  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04541 103F                        6C            .byte	$6C
04542 1040                        6C            .byte	$6C
04543 1041                        FE            .byte	$FE
04544 1042                        6C            .byte	$6C
04545 1043                        FE            .byte	$FE
04546 1044                        6C            .byte	$6C
04547 1045                        6C            .byte	$6C
04548 1046                        00            .byte	0
04549                                           ! 738  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04550 1047                        30            .byte	$30
04551 1048                        7C            .byte	$7C
04552 1049                        C0            .byte	$C0
04553 104A                        78            .byte	$78
04554 104B                        0C            .byte	$C
04555 104C                        F8            .byte	$F8
04556 104D                        30            .byte	$30
04557 104E                        00            .byte	0
04558                                           ! 739  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04559 104F                        00            .byte	0
04560 1050                        C6            .byte	$C6
04561 1051                        CC            .byte	$CC
04562 1052                        18            .byte	$18
04563 1053                        30            .byte	$30
04564 1054                        66            .byte	$66
04565 1055                        C6            .byte	$C6
04566 1056                        00            .byte	0
04567                                           ! 740  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04568 1057                        38            .byte	$38
04569 1058                        6C            .byte	$6C
04570 1059                        38            .byte	$38
04571 105A                        76            .byte	$76
04572 105B                        DC            .byte	$DC
04573 105C                        CC            .byte	$CC
04574 105D                        76            .byte	$76
04575 105E                        00            .byte	0
04576                                           ! 741  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04577 105F                        60            .byte	$60
04578 1060                        60            .byte	$60
04579 1061                        C0            .byte	$C0
04580 1062                        00            .byte	0
04581 1063                        00            .byte	0
04582 1064                        00            .byte	0
04583 1065                        00            .byte	0
04584 1066                        00            .byte	0
04585                                           ! 742  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04586 1067                        18            .byte	$18
04587 1068                        30            .byte	$30
04588 1069                        60            .byte	$60
04589 106A                        60            .byte	$60
04590 106B                        60            .byte	$60
04591 106C                        30            .byte	$30
04592 106D                        18            .byte	$18
04593 106E                        00            .byte	0
04594                                           ! 743  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04595 106F                        60            .byte	$60
04596 1070                        30            .byte	$30
04597 1071                        18            .byte	$18
04598 1072                        18            .byte	$18
04599 1073                        18            .byte	$18
04600 1074                        30            .byte	$30
04601 1075                        60            .byte	$60
04602 1076                        00            .byte	0
04603                                           ! 744  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04604 1077                        00            .byte	0
04605 1078                        66            .byte	$66
04606 1079                        3C            .byte	$3C
04607 107A                        FF            .byte	$FF
04608 107B                        3C            .byte	$3C
04609 107C                        66            .byte	$66
04610 107D                        00            .byte	0
04611 107E                        00            .byte	0
04612                                           ! 745  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04613 107F                        00            .byte	0
04614 1080                        30            .byte	$30
04615 1081                        30            .byte	$30
04616 1082                        FC            .byte	$FC
04617 1083                        30            .byte	$30
04618 1084                        30            .byte	$30
04619 1085                        00            .byte	0
04620 1086                        00            .byte	0
04621                                           ! 746  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04622 1087                        00            .byte	0
04623 1088                        00            .byte	0
04624 1089                        00            .byte	0
04625 108A                        00            .byte	0
04626 108B                        00            .byte	0
04627 108C                        30            .byte	$30
04628 108D                        30            .byte	$30
04629 108E                        60            .byte	$60
04630                                           ! 747  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04631 108F                        00            .byte	0
04632 1090                        00            .byte	0
04633 1091                        00            .byte	0
04634 1092                        FC            .byte	$FC
04635 1093                        00            .byte	0
04636 1094                        00            .byte	0
04637 1095                        00            .byte	0
04638 1096                        00            .byte	0
04639                                           ! 748  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04640 1097                        00            .byte	0
04641 1098                        00            .byte	0
04642 1099                        00            .byte	0
04643 109A                        00            .byte	0
04644 109B                        00            .byte	0
04645 109C                        30            .byte	$30
04646 109D                        30            .byte	$30
04647 109E                        00            .byte	0
04648                                           ! 749  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04649 109F                        06            .byte	6
04650 10A0                        0C            .byte	$C
04651 10A1                        18            .byte	$18
04652 10A2                        30            .byte	$30
04653 10A3                        60            .byte	$60
04654 10A4                        C0            .byte	$C0
04655 10A5                        80            .byte	$80
04656 10A6                        00            .byte	0
04657                                           ! 750  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04658 10A7                        7C            .byte	$7C
04659 10A8                        C6            .byte	$C6
04660 10A9                        CE            .byte	$CE
04661 10AA                        DE            .byte	$DE
04662 10AB                        F6            .byte	$F6
04663 10AC                        E6            .byte	$E6
04664 10AD                        7C            .byte	$7C
04665 10AE                        00            .byte	0
04666                                           ! 751  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04667 10AF                        30            .byte	$30
04668 10B0                        70            .byte	$70
04669 10B1                        30            .byte	$30
04670 10B2                        30            .byte	$30
04671 10B3                        30            .byte	$30
04672 10B4                        30            .byte	$30
04673 10B5                        FC            .byte	$FC
04674 10B6                        00            .byte	0
04675                                           ! 752  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04676 10B7                        78            .byte	$78
04677 10B8                        CC            .byte	$CC
04678 10B9                        0C            .byte	$C
04679 10BA                        38            .byte	$38
04680 10BB                        60            .byte	$60
04681 10BC                        CC            .byte	$CC
04682 10BD                        FC            .byte	$FC
04683 10BE                        00            .byte	0
04684                                           ! 753  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04685 10BF                        78            .byte	$78
04686 10C0                        CC            .byte	$CC
04687 10C1                        0C            .byte	$C
04688 10C2                        38            .byte	$38
04689 10C3                        0C            .byte	$C
04690 10C4                        CC            .byte	$CC
04691 10C5                        78            .byte	$78
04692 10C6                        00            .byte	0
04693                                           ! 754  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04694 10C7                        1C            .byte	$1C
04695 10C8                        3C            .byte	$3C
04696 10C9                        6C            .byte	$6C
04697 10CA                        CC            .byte	$CC
04698 10CB                        FE            .byte	$FE
04699 10CC                        0C            .byte	$C
04700 10CD                        1E            .byte	$1E
04701 10CE                        00            .byte	0
04702                                           ! 755  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
04703 10CF                        FC            .byte	$FC
04704 10D0                        C0            .byte	$C0
04705 10D1                        F8            .byte	$F8
04706 10D2                        0C            .byte	$C
04707 10D3                        0C            .byte	$C
04708 10D4                        CC            .byte	$CC
04709 10D5                        78            .byte	$78
04710 10D6                        00            .byte	0
04711                                           ! 756  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
04712 10D7                        38            .byte	$38
04713 10D8                        60            .byte	$60
04714 10D9                        C0            .byte	$C0
04715 10DA                        F8            .byte	$F8
04716 10DB                        CC            .byte	$CC
04717 10DC                        CC            .byte	$CC
04718 10DD                        78            .byte	$78
04719 10DE                        00            .byte	0
04720                                           ! 757  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x3
04721 10DF                        FC            .byte	$FC
04722 10E0                        CC            .byte	$CC
04723 10E1                        0C            .byte	$C
04724 10E2                        18            .byte	$18
04725 10E3                        30            .byte	$30
04726                                           ! 757 0, 0x30, 0x00,
04727 10E4                        30            .byte	$30
04728 10E5                        30            .byte	$30
04729 10E6                        00            .byte	0
04730                                           ! 758  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
04731 10E7                        78            .byte	$78
04732 10E8                        CC            .byte	$CC
04733 10E9                        CC            .byte	$CC
04734 10EA                        78            .byte	$78
04735 10EB                        CC            .byte	$CC
04736 10EC                        CC            .byte	$CC
04737 10ED                        78            .byte	$78
04738 10EE                        00            .byte	0
04739                                           ! 759  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
04740 10EF                        78            .byte	$78
04741 10F0                        CC            .byte	$CC
04742 10F1                        CC            .byte	$CC
04743 10F2                        7C            .byte	$7C
04744 10F3                        0C            .byte	$C
04745 10F4                        18            .byte	$18
04746 10F5                        70            .byte	$70
04747 10F6                        00            .byte	0
04748                                           ! 760  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
04749 10F7                        00            .byte	0
04750 10F8                        30            .byte	$30
04751 10F9                        30            .byte	$30
04752 10FA                        00            .byte	0
04753 10FB                        00            .byte	0
04754 10FC                        30            .byte	$30
04755 10FD                        30            .byte	$30
04756 10FE                        00            .byte	0
04757                                           ! 761  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
04758 10FF                        00            .byte	0
04759 1100                        30            .byte	$30
04760 1101                        30            .byte	$30
04761 1102                        00            .byte	0
04762 1103                        00            .byte	0
04763 1104                        30            .byte	$30
04764 1105                        30            .byte	$30
04765 1106                        60            .byte	$60
04766                                           ! 762  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
04767 1107                        18            .byte	$18
04768 1108                        30            .byte	$30
04769 1109                        60            .byte	$60
04770 110A                        C0            .byte	$C0
04771 110B                        60            .byte	$60
04772 110C                        30            .byte	$30
04773 110D                        18            .byte	$18
04774 110E                        00            .byte	0
04775                                           ! 763  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
04776 110F                        00            .byte	0
04777 1110                        00            .byte	0
04778 1111                        FC            .byte	$FC
04779 1112                        00            .byte	0
04780 1113                        00            .byte	0
04781 1114                        FC            .byte	$FC
04782 1115                        00            .byte	0
04783 1116                        00            .byte	0
04784                                           ! 764  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
04785 1117                        60            .byte	$60
04786 1118                        30            .byte	$30
04787 1119                        18            .byte	$18
04788 111A                        0C            .byte	$C
04789 111B                        18            .byte	$18
04790 111C                        30            .byte	$30
04791 111D                        60            .byte	$60
04792 111E                        00            .byte	0
04793                                           ! 765  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
04794 111F                        78            .byte	$78
04795 1120                        CC            .byte	$CC
04796 1121                        0C            .byte	$C
04797 1122                        18            .byte	$18
04798 1123                        30            .byte	$30
04799 1124                        00            .byte	0
04800 1125                        30            .byte	$30
04801 1126                        00            .byte	0
04802                                           ! 766  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
04803 1127                        7C            .byte	$7C
04804 1128                        C6            .byte	$C6
04805 1129                        DE            .byte	$DE
04806 112A                        DE            .byte	$DE
04807 112B                        DE            .byte	$DE
04808 112C                        C0            .byte	$C0
04809 112D                        78            .byte	$78
04810 112E                        00            .byte	0
04811                                           ! 767  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
04812 112F                        30            .byte	$30
04813 1130                        78            .byte	$78
04814 1131                        CC            .byte	$CC
04815 1132                        CC            .byte	$CC
04816 1133                        FC            .byte	$FC
04817 1134                        CC            .byte	$CC
04818 1135                        CC            .byte	$CC
04819 1136                        00            .byte	0
04820                                           ! 768  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
04821 1137                        FC            .byte	$FC
04822 1138                        66            .byte	$66
04823 1139                        66            .byte	$66
04824 113A                        7C            .byte	$7C
04825 113B                        66            .byte	$66
04826 113C                        66            .byte	$66
04827 113D                        FC            .byte	$FC
04828 113E                        00            .byte	0
04829                                           ! 769  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
04830 113F                        3C            .byte	$3C
04831 1140                        66            .byte	$66
04832 1141                        C0            .byte	$C0
04833 1142                        C0            .byte	$C0
04834 1143                        C0            .byte	$C0
04835 1144                        66            .byte	$66
04836 1145                        3C            .byte	$3C
04837 1146                        00            .byte	0
04838                                           ! 770  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
04839 1147                        F8            .byte	$F8
04840 1148                        6C            .byte	$6C
04841 1149                        66            .byte	$66
04842 114A                        66            .byte	$66
04843 114B                        66            .byte	$66
04844 114C                        6C            .byte	$6C
04845 114D                        F8            .byte	$F8
04846 114E                        00            .byte	0
04847                                           ! 771  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
04848 114F                        FE            .byte	$FE
04849 1150                        62            .byte	$62
04850 1151                        68            .byte	$68
04851 1152                        78            .byte	$78
04852 1153                        68            .byte	$68
04853 1154                        62            .byte	$62
04854 1155                        FE            .byte	$FE
04855 1156                        00            .byte	0
04856                                           ! 772  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
04857 1157                        FE            .byte	$FE
04858 1158                        62            .byte	$62
04859 1159                        68            .byte	$68
04860 115A                        78            .byte	$78
04861 115B                        68            .byte	$68
04862 115C                        60            .byte	$60
04863 115D                        F0            .byte	$F0
04864 115E                        00            .byte	0
04865                                           ! 773  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
04866 115F                        3C            .byte	$3C
04867 1160                        66            .byte	$66
04868 1161                        C0            .byte	$C0
04869 1162                        C0            .byte	$C0
04870 1163                        CE            .byte	$CE
04871 1164                        66            .byte	$66
04872 1165                        3E            .byte	$3E
04873 1166                        00            .byte	0
04874                                           ! 774  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
04875 1167                        CC            .byte	$CC
04876 1168                        CC            .byte	$CC
04877 1169                        CC            .byte	$CC
04878 116A                        FC            .byte	$FC
04879 116B                        CC            .byte	$CC
04880 116C                        CC            .byte	$CC
04881 116D                        CC            .byte	$CC
04882 116E                        00            .byte	0
04883                                           ! 775  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04884 116F                        78            .byte	$78
04885 1170                        30            .byte	$30
04886 1171                        30            .byte	$30
04887 1172                        30            .byte	$30
04888 1173                        30            .byte	$30
04889 1174                        30            .byte	$30
04890 1175                        78            .byte	$78
04891 1176                        00            .byte	0
04892                                           ! 776  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
04893 1177                        1E            .byte	$1E
04894 1178                        0C            .byte	$C
04895 1179                        0C            .byte	$C
04896 117A                        0C            .byte	$C
04897 117B                        CC            .byte	$CC
04898 117C                        CC            .byte	$CC
04899 117D                        78            .byte	$78
04900 117E                        00            .byte	0
04901                                           ! 777  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
04902 117F                        E6            .byte	$E6
04903 1180                        66            .byte	$66
04904 1181                        6C            .byte	$6C
04905 1182                        78            .byte	$78
04906 1183                        6C            .byte	$6C
04907 1184                        66            .byte	$66
04908 1185                        E6            .byte	$E6
04909 1186                        00            .byte	0
04910                                           ! 778  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
04911 1187                        F0            .byte	$F0
04912 1188                        60            .byte	$60
04913 1189                        60            .byte	$60
04914 118A                        60            .byte	$60
04915 118B                        62            .byte	$62
04916 118C                        66            .byte	$66
04917 118D                        FE            .byte	$FE
04918 118E                        00            .byte	0
04919                                           ! 779  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
04920 118F                        C6            .byte	$C6
04921 1190                        EE            .byte	$EE
04922 1191                        FE            .byte	$FE
04923 1192                        FE            .byte	$FE
04924 1193                        D6            .byte	$D6
04925 1194                        C6            .byte	$C6
04926 1195                        C6            .byte	$C6
04927 1196                        00            .byte	0
04928                                           ! 780  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
04929 1197                        C6            .byte	$C6
04930 1198                        E6            .byte	$E6
04931 1199                        F6            .byte	$F6
04932 119A                        DE            .byte	$DE
04933 119B                        CE            .byte	$CE
04934 119C                        C6            .byte	$C6
04935 119D                        C6            .byte	$C6
04936 119E                        00            .byte	0
04937                                           ! 781  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
04938 119F                        38            .byte	$38
04939 11A0                        6C            .byte	$6C
04940 11A1                        C6            .byte	$C6
04941 11A2                        C6            .byte	$C6
04942 11A3                        C6            .byte	$C6
04943 11A4                        6C            .byte	$6C
04944 11A5                        38            .byte	$38
04945 11A6                        00            .byte	0
04946                                           ! 782  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
04947 11A7                        FC            .byte	$FC
04948 11A8                        66            .byte	$66
04949 11A9                        66            .byte	$66
04950 11AA                        7C            .byte	$7C
04951 11AB                        60            .byte	$60
04952 11AC                        60            .byte	$60
04953 11AD                        F0            .byte	$F0
04954 11AE                        00            .byte	0
04955                                           ! 783  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
04956 11AF                        78            .byte	$78
04957 11B0                        CC            .byte	$CC
04958 11B1                        CC            .byte	$CC
04959 11B2                        CC            .byte	$CC
04960 11B3                        DC            .byte	$DC
04961 11B4                        78            .byte	$78
04962 11B5                        1C            .byte	$1C
04963 11B6                        00            .byte	0
04964                                           ! 784  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
04965 11B7                        FC            .byte	$FC
04966 11B8                        66            .byte	$66
04967 11B9                        66            .byte	$66
04968 11BA                        7C            .byte	$7C
04969 11BB                        6C            .byte	$6C
04970 11BC                        66            .byte	$66
04971 11BD                        E6            .byte	$E6
04972 11BE                        00            .byte	0
04973                                           ! 785  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
04974 11BF                        78            .byte	$78
04975 11C0                        CC            .byte	$CC
04976 11C1                        E0            .byte	$E0
04977 11C2                        70            .byte	$70
04978 11C3                        1C            .byte	$1C
04979 11C4                        CC            .byte	$CC
04980 11C5                        78            .byte	$78
04981 11C6                        00            .byte	0
04982                                           ! 786  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04983 11C7                        FC            .byte	$FC
04984 11C8                        B4            .byte	$B4
04985 11C9                        30            .byte	$30
04986 11CA                        30            .byte	$30
04987 11CB                        30            .byte	$30
04988 11CC                        30            .byte	$30
04989 11CD                        78            .byte	$78
04990 11CE                        00            .byte	0
04991                                           ! 787  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
04992 11CF                        CC            .byte	$CC
04993 11D0                        CC            .byte	$CC
04994 11D1                        CC            .byte	$CC
04995 11D2                        CC            .byte	$CC
04996 11D3                        CC            .byte	$CC
04997 11D4                        CC            .byte	$CC
04998 11D5                        FC            .byte	$FC
04999 11D6                        00            .byte	0
05000                                           ! 788  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05001 11D7                        CC            .byte	$CC
05002 11D8                        CC            .byte	$CC
05003 11D9                        CC            .byte	$CC
05004 11DA                        CC            .byte	$CC
05005 11DB                        CC            .byte	$CC
05006 11DC                        78            .byte	$78
05007 11DD                        30            .byte	$30
05008 11DE                        00            .byte	0
05009                                           ! 789  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05010 11DF                        C6            .byte	$C6
05011 11E0                        C6            .byte	$C6
05012 11E1                        C6            .byte	$C6
05013 11E2                        D6            .byte	$D6
05014 11E3                        FE            .byte	$FE
05015 11E4                        EE            .byte	$EE
05016 11E5                        C6            .byte	$C6
05017 11E6                        00            .byte	0
05018                                           ! 790  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05019 11E7                        C6            .byte	$C6
05020 11E8                        C6            .byte	$C6
05021 11E9                        6C            .byte	$6C
05022 11EA                        38            .byte	$38
05023 11EB                        38            .byte	$38
05024 11EC                        6C            .byte	$6C
05025 11ED                        C6            .byte	$C6
05026 11EE                        00            .byte	0
05027                                           ! 791  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05028 11EF                        CC            .byte	$CC
05029 11F0                        CC            .byte	$CC
05030 11F1                        CC            .byte	$CC
05031 11F2                        78            .byte	$78
05032 11F3                        30            .byte	$30
05033 11F4                        30            .byte	$30
05034 11F5                        78            .byte	$78
05035 11F6                        00            .byte	0
05036                                           ! 792  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05037 11F7                        FE            .byte	$FE
05038 11F8                        C6            .byte	$C6
05039 11F9                        8C            .byte	$8C
05040 11FA                        18            .byte	$18
05041 11FB                        32            .byte	$32
05042 11FC                        66            .byte	$66
05043 11FD                        FE            .byte	$FE
05044 11FE                        00            .byte	0
05045                                           ! 793  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05046 11FF                        78            .byte	$78
05047 1200                        60            .byte	$60
05048 1201                        60            .byte	$60
05049 1202                        60            .byte	$60
05050 1203                        60            .byte	$60
05051 1204                        60            .byte	$60
05052 1205                        78            .byte	$78
05053 1206                        00            .byte	0
05054                                           ! 794  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05055 1207                        C0            .byte	$C0
05056 1208                        60            .byte	$60
05057 1209                        30            .byte	$30
05058 120A                        18            .byte	$18
05059 120B                        0C            .byte	$C
05060 120C                        06            .byte	6
05061 120D                        02            .byte	2
05062 120E                        00            .byte	0
05063                                           ! 795  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05064 120F                        78            .byte	$78
05065 1210                        18            .byte	$18
05066 1211                        18            .byte	$18
05067 1212                        18            .byte	$18
05068 1213                        18            .byte	$18
05069 1214                        18            .byte	$18
05070 1215                        78            .byte	$78
05071 1216                        00            .byte	0
05072                                           ! 796  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05073 1217                        10            .byte	$10
05074 1218                        38            .byte	$38
05075 1219                        6C            .byte	$6C
05076 121A                        C6            .byte	$C6
05077 121B                        00            .byte	0
05078 121C                        00            .byte	0
05079 121D                        00            .byte	0
05080 121E                        00            .byte	0
05081                                           ! 797  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05082 121F                        00            .byte	0
05083 1220                        00            .byte	0
05084 1221                        00            .byte	0
05085 1222                        00            .byte	0
05086 1223                        00            .byte	0
05087 1224                        00            .byte	0
05088 1225                        00            .byte	0
05089 1226                        FF            .byte	$FF
05090                                           ! 798  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05091 1227                        30            .byte	$30
05092 1228                        30            .byte	$30
05093 1229                        18            .byte	$18
05094 122A                        00            .byte	0
05095 122B                        00            .byte	0
05096 122C                        00            .byte	0
05097 122D                        00            .byte	0
05098 122E                        00            .byte	0
05099                                           ! 799  0x00, 0x00, 0x78, 0x0c,
05100 122F                        00            .byte	0
05101 1230                        00            .byte	0
05102 1231                        78            .byte	$78
05103                                           ! 799  0x7c, 0xcc, 0x76, 0x00,
05104 1232                        0C            .byte	$C
05105 1233                        7C            .byte	$7C
05106 1234                        CC            .byte	$CC
05107 1235                        76            .byte	$76
05108 1236                        00            .byte	0
05109                                           ! 800  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05110 1237                        E0            .byte	$E0
05111 1238                        60            .byte	$60
05112 1239                        60            .byte	$60
05113 123A                        7C            .byte	$7C
05114 123B                        66            .byte	$66
05115 123C                        66            .byte	$66
05116 123D                        DC            .byte	$DC
05117 123E                        00            .byte	0
05118                                           ! 801  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05119 123F                        00            .byte	0
05120 1240                        00            .byte	0
05121 1241                        78            .byte	$78
05122 1242                        CC            .byte	$CC
05123 1243                        C0            .byte	$C0
05124 1244                        CC            .byte	$CC
05125 1245                        78            .byte	$78
05126 1246                        00            .byte	0
05127                                           ! 802  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05128 1247                        1C            .byte	$1C
05129 1248                        0C            .byte	$C
05130 1249                        0C            .byte	$C
05131 124A                        7C            .byte	$7C
05132 124B                        CC            .byte	$CC
05133 124C                        CC            .byte	$CC
05134 124D                        76            .byte	$76
05135 124E                        00            .byte	0
05136                                           ! 803  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05137 124F                        00            .byte	0
05138 1250                        00            .byte	0
05139 1251                        78            .byte	$78
05140 1252                        CC            .byte	$CC
05141 1253                        FC            .byte	$FC
05142 1254                        C0            .byte	$C0
05143 1255                        78            .byte	$78
05144 1256                        00            .byte	0
05145                                           ! 804  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05146 1257                        38            .byte	$38
05147 1258                        6C            .byte	$6C
05148 1259                        60            .byte	$60
05149 125A                        F0            .byte	$F0
05150 125B                        60            .byte	$60
05151 125C                        60            .byte	$60
05152 125D                        F0            .byte	$F0
05153 125E                        00            .byte	0
05154                                           ! 805  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05155 125F                        00            .byte	0
05156 1260                        00            .byte	0
05157 1261                        76            .byte	$76
05158 1262                        CC            .byte	$CC
05159 1263                        CC            .byte	$CC
05160 1264                        7C            .byte	$7C
05161 1265                        0C            .byte	$C
05162 1266                        F8            .byte	$F8
05163                                           ! 806  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05164 1267                        E0            .byte	$E0
05165 1268                        60            .byte	$60
05166 1269                        6C            .byte	$6C
05167 126A                        76            .byte	$76
05168 126B                        66            .byte	$66
05169 126C                        66            .byte	$66
05170 126D                        E6            .byte	$E6
05171 126E                        00            .byte	0
05172                                           ! 807  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05173 126F                        30            .byte	$30
05174 1270                        00            .byte	0
05175 1271                        70            .byte	$70
05176 1272                        30            .byte	$30
05177 1273                        30            .byte	$30
05178 1274                        30            .byte	$30
05179 1275                        78            .byte	$78
05180 1276                        00            .byte	0
05181                                           ! 808  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05182 1277                        0C            .byte	$C
05183 1278                        00            .byte	0
05184 1279                        0C            .byte	$C
05185 127A                        0C            .byte	$C
05186 127B                        0C            .byte	$C
05187 127C                        CC            .byte	$CC
05188 127D                        CC            .byte	$CC
05189 127E                        78            .byte	$78
05190                                           ! 809  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05191 127F                        E0            .byte	$E0
05192 1280                        60            .byte	$60
05193 1281                        66            .byte	$66
05194 1282                        6C            .byte	$6C
05195 1283                        78            .byte	$78
05196 1284                        6C            .byte	$6C
05197 1285                        E6            .byte	$E6
05198 1286                        00            .byte	0
05199                                           ! 810  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05200 1287                        70            .byte	$70
05201 1288                        30            .byte	$30
05202 1289                        30            .byte	$30
05203 128A                        30            .byte	$30
05204 128B                        30            .byte	$30
05205 128C                        30            .byte	$30
05206 128D                        78            .byte	$78
05207 128E                        00            .byte	0
05208                                           ! 811  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05209 128F                        00            .byte	0
05210 1290                        00            .byte	0
05211 1291                        CC            .byte	$CC
05212 1292                        FE            .byte	$FE
05213 1293                        FE            .byte	$FE
05214 1294                        D6            .byte	$D6
05215 1295                        C6            .byte	$C6
05216 1296                        00            .byte	0
05217                                           ! 812  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05218 1297                        00            .byte	0
05219 1298                        00            .byte	0
05220 1299                        F8            .byte	$F8
05221 129A                        CC            .byte	$CC
05222 129B                        CC            .byte	$CC
05223 129C                        CC            .byte	$CC
05224 129D                        CC            .byte	$CC
05225 129E                        00            .byte	0
05226                                           ! 813  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05227 129F                        00            .byte	0
05228 12A0                        00            .byte	0
05229 12A1                        78            .byte	$78
05230 12A2                        CC            .byte	$CC
05231 12A3                        CC            .byte	$CC
05232 12A4                        CC            .byte	$CC
05233 12A5                        78            .byte	$78
05234 12A6                        00            .byte	0
05235                                           ! 814  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05236 12A7                        00            .byte	0
05237 12A8                        00            .byte	0
05238 12A9                        DC            .byte	$DC
05239 12AA                        66            .byte	$66
05240 12AB                        66            .byte	$66
05241 12AC                        7C            .byte	$7C
05242 12AD                        60            .byte	$60
05243 12AE                        F0            .byte	$F0
05244                                           ! 815  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05245 12AF                        00            .byte	0
05246 12B0                        00            .byte	0
05247 12B1                        76            .byte	$76
05248 12B2                        CC            .byte	$CC
05249 12B3                        CC            .byte	$CC
05250 12B4                        7C            .byte	$7C
05251 12B5                        0C            .byte	$C
05252 12B6                        1E            .byte	$1E
05253                                           ! 816  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05254 12B7                        00            .byte	0
05255 12B8                        00            .byte	0
05256 12B9                        DC            .byte	$DC
05257 12BA                        76            .byte	$76
05258 12BB                        66            .byte	$66
05259 12BC                        60            .byte	$60
05260 12BD                        F0            .byte	$F0
05261 12BE                        00            .byte	0
05262                                           ! 817  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05263 12BF                        00            .byte	0
05264 12C0                        00            .byte	0
05265 12C1                        7C            .byte	$7C
05266 12C2                        C0            .byte	$C0
05267 12C3                        78            .byte	$78
05268 12C4                        0C            .byte	$C
05269 12C5                        F8            .byte	$F8
05270 12C6                        00            .byte	0
05271                                           ! 818  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05272 12C7                        10            .byte	$10
05273 12C8                        30            .byte	$30
05274 12C9                        7C            .byte	$7C
05275 12CA                        30            .byte	$30
05276 12CB                        30            .byte	$30
05277 12CC                        34            .byte	$34
05278 12CD                        18            .byte	$18
05279 12CE                        00            .byte	0
05280                                           ! 819  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05281 12CF                        00            .byte	0
05282 12D0                        00            .byte	0
05283 12D1                        CC            .byte	$CC
05284 12D2                        CC            .byte	$CC
05285 12D3                        CC            .byte	$CC
05286 12D4                        CC            .byte	$CC
05287 12D5                        76            .byte	$76
05288 12D6                        00            .byte	0
05289                                           ! 820  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05290 12D7                        00            .byte	0
05291 12D8                        00            .byte	0
05292 12D9                        CC            .byte	$CC
05293 12DA                        CC            .byte	$CC
05294 12DB                        CC            .byte	$CC
05295 12DC                        78            .byte	$78
05296 12DD                        30            .byte	$30
05297 12DE                        00            .byte	0
05298                                           ! 821  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05299 12DF                        00            .byte	0
05300 12E0                        00            .byte	0
05301 12E1                        C6            .byte	$C6
05302 12E2                        D6            .byte	$D6
05303 12E3                        FE            .byte	$FE
05304 12E4                        FE            .byte	$FE
05305 12E5                        6C            .byte	$6C
05306 12E6                        00            .byte	0
05307                                           ! 822  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05308 12E7                        00            .byte	0
05309 12E8                        00            .byte	0
05310 12E9                        C6            .byte	$C6
05311 12EA                        6C            .byte	$6C
05312 12EB                        38            .byte	$38
05313 12EC                        6C            .byte	$6C
05314 12ED                        C6            .byte	$C6
05315 12EE                        00            .byte	0
05316                                           ! 823  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05317 12EF                        00            .byte	0
05318 12F0                        00            .byte	0
05319 12F1                        CC            .byte	$CC
05320 12F2                        CC            .byte	$CC
05321 12F3                        CC            .byte	$CC
05322 12F4                        7C            .byte	$7C
05323 12F5                        0C            .byte	$C
05324 12F6                        F8            .byte	$F8
05325                                           ! 824  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05326 12F7                        00            .byte	0
05327 12F8                        00            .byte	0
05328 12F9                        FC            .byte	$FC
05329 12FA                        98            .byte	$98
05330 12FB                        30            .byte	$30
05331 12FC                        64            .byte	$64
05332 12FD                        FC            .byte	$FC
05333 12FE                        00            .byte	0
05334                                           ! 825  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05335 12FF                        1C            .byte	$1C
05336 1300                        30            .byte	$30
05337 1301                        30            .byte	$30
05338 1302                        E0            .byte	$E0
05339 1303                        30            .byte	$30
05340 1304                        30            .byte	$30
05341 1305                        1C            .byte	$1C
05342 1306                        00            .byte	0
05343                                           ! 826  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05344 1307                        18            .byte	$18
05345 1308                        18            .byte	$18
05346 1309                        18            .byte	$18
05347 130A                        00            .byte	0
05348 130B                        18            .byte	$18
05349 130C                        18            .byte	$18
05350 130D                        18            .byte	$18
05351 130E                        00            .byte	0
05352                                           ! 827  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05353 130F                        E0            .byte	$E0
05354 1310                        30            .byte	$30
05355 1311                        30            .byte	$30
05356 1312                        1C            .byte	$1C
05357 1313                        30            .byte	$30
05358 1314                        30            .byte	$30
05359 1315                        E0            .byte	$E0
05360 1316                        00            .byte	0
05361                                           ! 828  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05362 1317                        76            .byte	$76
05363 1318                        DC            .byte	$DC
05364 1319                        00            .byte	0
05365 131A                        00            .byte	0
05366 131B                        00            .byte	0
05367 131C                        00            .byte	0
05368 131D                        00            .byte	0
05369 131E                        00            .byte	0
05370                                           ! 829  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05371 131F                        00            .byte	0
05372 1320                        10            .byte	$10
05373 1321                        38            .byte	$38
05374 1322                        6C            .byte	$6C
05375 1323                        C6            .byte	$C6
05376 1324                        C6            .byte	$C6
05377 1325                        FE            .byte	$FE
05378 1326                        00            .byte	0
05379                                           ! 830  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05380 1327                        78            .byte	$78
05381 1328                        CC            .byte	$CC
05382 1329                        C0            .byte	$C0
05383 132A                        CC            .byte	$CC
05384 132B                        78            .byte	$78
05385 132C                        18            .byte	$18
05386 132D                        0C            .byte	$C
05387 132E                        78            .byte	$78
05388                                           ! 831  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05389 132F                        00            .byte	0
05390 1330                        CC            .byte	$CC
05391 1331                        00            .byte	0
05392 1332                        CC            .byte	$CC
05393 1333                        CC            .byte	$CC
05394 1334                        CC            .byte	$CC
05395 1335                        7E            .byte	$7E
05396 1336                        00            .byte	0
05397                                           ! 832  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05398 1337                        1C            .byte	$1C
05399 1338                        00            .byte	0
05400 1339                        78            .byte	$78
05401 133A                        CC            .byte	$CC
05402 133B                        FC            .byte	$FC
05403 133C                        C0            .byte	$C0
05404 133D                        78            .byte	$78
05405 133E                        00            .byte	0
05406                                           ! 833  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05407 133F                        7E            .byte	$7E
05408 1340                        C3            .byte	$C3
05409 1341                        3C            .byte	$3C
05410 1342                        06            .byte	6
05411 1343                        3E            .byte	$3E
05412 1344                        66            .byte	$66
05413 1345                        3F            .byte	$3F
05414 1346                        00            .byte	0
05415                                           ! 834  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05416 1347                        CC            .byte	$CC
05417 1348                        00            .byte	0
05418 1349                        78            .byte	$78
05419 134A                        0C            .byte	$C
05420 134B                        7C            .byte	$7C
05421 134C                        CC            .byte	$CC
05422 134D                        7E            .byte	$7E
05423 134E                        00            .byte	0
05424                                           ! 835  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05425 134F                        E0            .byte	$E0
05426 1350                        00            .byte	0
05427 1351                        78            .byte	$78
05428 1352                        0C            .byte	$C
05429 1353                        7C            .byte	$7C
05430 1354                        CC            .byte	$CC
05431 1355                        7E            .byte	$7E
05432 1356                        00            .byte	0
05433                                           ! 836  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05434 1357                        30            .byte	$30
05435 1358                        30            .byte	$30
05436 1359                        78            .byte	$78
05437 135A                        0C            .byte	$C
05438 135B                        7C            .byte	$7C
05439 135C                        CC            .byte	$CC
05440 135D                        7E            .byte	$7E
05441 135E                        00            .byte	0
05442                                           ! 837  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05443 135F                        00            .byte	0
05444 1360                        00            .byte	0
05445 1361                        78            .byte	$78
05446 1362                        C0            .byte	$C0
05447 1363                        C0            .byte	$C0
05448 1364                        78            .byte	$78
05449 1365                        0C            .byte	$C
05450 1366                        38            .byte	$38
05451                                           ! 838  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05452 1367                        7E            .byte	$7E
05453 1368                        C3            .byte	$C3
05454 1369                        3C            .byte	$3C
05455 136A                        66            .byte	$66
05456 136B                        7E            .byte	$7E
05457 136C                        60            .byte	$60
05458 136D                        3C            .byte	$3C
05459 136E                        00            .byte	0
05460                                           ! 839  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05461 136F                        CC            .byte	$CC
05462 1370                        00            .byte	0
05463 1371                        78            .byte	$78
05464 1372                        CC            .byte	$CC
05465 1373                        FC            .byte	$FC
05466 1374                        C0            .byte	$C0
05467 1375                        78            .byte	$78
05468 1376                        00            .byte	0
05469                                           ! 840  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05470 1377                        E0            .byte	$E0
05471 1378                        00            .byte	0
05472 1379                        78            .byte	$78
05473 137A                        CC            .byte	$CC
05474 137B                        FC            .byte	$FC
05475 137C                        C0            .byte	$C0
05476 137D                        78            .byte	$78
05477 137E                        00            .byte	0
05478                                           ! 841  0xcc, 0x00, 0
05479 137F                        CC            .byte	$CC
05480 1380                        00            .byte	0
05481                                           ! 841 x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05482 1381                        70            .byte	$70
05483 1382                        30            .byte	$30
05484 1383                        30            .byte	$30
05485 1384                        30            .byte	$30
05486 1385                        78            .byte	$78
05487 1386                        00            .byte	0
05488                                           ! 842  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05489 1387                        7C            .byte	$7C
05490 1388                        C6            .byte	$C6
05491 1389                        38            .byte	$38
05492 138A                        18            .byte	$18
05493 138B                        18            .byte	$18
05494 138C                        18            .byte	$18
05495 138D                        3C            .byte	$3C
05496 138E                        00            .byte	0
05497                                           ! 843  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05498 138F                        E0            .byte	$E0
05499 1390                        00            .byte	0
05500 1391                        70            .byte	$70
05501 1392                        30            .byte	$30
05502 1393                        30            .byte	$30
05503 1394                        30            .byte	$30
05504 1395                        78            .byte	$78
05505 1396                        00            .byte	0
05506                                           ! 844  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05507 1397                        C6            .byte	$C6
05508 1398                        38            .byte	$38
05509 1399                        6C            .byte	$6C
05510 139A                        C6            .byte	$C6
05511 139B                        FE            .byte	$FE
05512 139C                        C6            .byte	$C6
05513 139D                        C6            .byte	$C6
05514 139E                        00            .byte	0
05515                                           ! 845  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05516 139F                        30            .byte	$30
05517 13A0                        30            .byte	$30
05518 13A1                        00            .byte	0
05519 13A2                        78            .byte	$78
05520 13A3                        CC            .byte	$CC
05521 13A4                        FC            .byte	$FC
05522 13A5                        CC            .byte	$CC
05523 13A6                        00            .byte	0
05524                                           ! 846  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05525 13A7                        1C            .byte	$1C
05526 13A8                        00            .byte	0
05527 13A9                        FC            .byte	$FC
05528 13AA                        60            .byte	$60
05529 13AB                        78            .byte	$78
05530 13AC                        60            .byte	$60
05531 13AD                        FC            .byte	$FC
05532 13AE                        00            .byte	0
05533                                           ! 847  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05534 13AF                        00            .byte	0
05535 13B0                        00            .byte	0
05536 13B1                        7F            .byte	$7F
05537 13B2                        0C            .byte	$C
05538 13B3                        7F            .byte	$7F
05539 13B4                        CC            .byte	$CC
05540 13B5                        7F            .byte	$7F
05541 13B6                        00            .byte	0
05542                                           ! 848  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05543 13B7                        3E            .byte	$3E
05544 13B8                        6C            .byte	$6C
05545 13B9                        CC            .byte	$CC
05546 13BA                        FE            .byte	$FE
05547 13BB                        CC            .byte	$CC
05548 13BC                        CC            .byte	$CC
05549 13BD                        CE            .byte	$CE
05550 13BE                        00            .byte	0
05551                                           ! 849  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05552 13BF                        78            .byte	$78
05553 13C0                        CC            .byte	$CC
05554 13C1                        00            .byte	0
05555 13C2                        78            .byte	$78
05556 13C3                        CC            .byte	$CC
05557 13C4                        CC            .byte	$CC
05558 13C5                        78            .byte	$78
05559 13C6                        00            .byte	0
05560                                           ! 850  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05561 13C7                        00            .byte	0
05562 13C8                        CC            .byte	$CC
05563 13C9                        00            .byte	0
05564 13CA                        78            .byte	$78
05565 13CB                        CC            .byte	$CC
05566 13CC                        CC            .byte	$CC
05567 13CD                        78            .byte	$78
05568 13CE                        00            .byte	0
05569                                           ! 851  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05570 13CF                        00            .byte	0
05571 13D0                        E0            .byte	$E0
05572 13D1                        00            .byte	0
05573 13D2                        78            .byte	$78
05574 13D3                        CC            .byte	$CC
05575 13D4                        CC            .byte	$CC
05576 13D5                        78            .byte	$78
05577 13D6                        00            .byte	0
05578                                           ! 852  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05579 13D7                        78            .byte	$78
05580 13D8                        CC            .byte	$CC
05581 13D9                        00            .byte	0
05582 13DA                        CC            .byte	$CC
05583 13DB                        CC            .byte	$CC
05584 13DC                        CC            .byte	$CC
05585 13DD                        7E            .byte	$7E
05586 13DE                        00            .byte	0
05587                                           ! 853  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05588 13DF                        00            .byte	0
05589 13E0                        E0            .byte	$E0
05590 13E1                        00            .byte	0
05591 13E2                        CC            .byte	$CC
05592 13E3                        CC            .byte	$CC
05593 13E4                        CC            .byte	$CC
05594 13E5                        7E            .byte	$7E
05595 13E6                        00            .byte	0
05596                                           ! 854  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05597 13E7                        00            .byte	0
05598 13E8                        CC            .byte	$CC
05599 13E9                        00            .byte	0
05600 13EA                        CC            .byte	$CC
05601 13EB                        CC            .byte	$CC
05602 13EC                        7C            .byte	$7C
05603 13ED                        0C            .byte	$C
05604 13EE                        F8            .byte	$F8
05605                                           ! 855  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05606 13EF                        C3            .byte	$C3
05607 13F0                        18            .byte	$18
05608 13F1                        3C            .byte	$3C
05609 13F2                        66            .byte	$66
05610 13F3                        66            .byte	$66
05611 13F4                        3C            .byte	$3C
05612 13F5                        18            .byte	$18
05613 13F6                        00            .byte	0
05614                                           ! 856  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05615 13F7                        CC            .byte	$CC
05616 13F8                        00            .byte	0
05617 13F9                        CC            .byte	$CC
05618 13FA                        CC            .byte	$CC
05619 13FB                        CC            .byte	$CC
05620 13FC                        CC            .byte	$CC
05621 13FD                        78            .byte	$78
05622 13FE                        00            .byte	0
05623                                           ! 857  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05624 13FF                        18            .byte	$18
05625 1400                        18            .byte	$18
05626 1401                        7E            .byte	$7E
05627 1402                        C0            .byte	$C0
05628 1403                        C0            .byte	$C0
05629 1404                        7E            .byte	$7E
05630 1405                        18            .byte	$18
05631 1406                        18            .byte	$18
05632                                           ! 858  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05633 1407                        38            .byte	$38
05634 1408                        6C            .byte	$6C
05635 1409                        64            .byte	$64
05636 140A                        F0            .byte	$F0
05637 140B                        60            .byte	$60
05638 140C                        E6            .byte	$E6
05639 140D                        FC            .byte	$FC
05640 140E                        00            .byte	0
05641                                           ! 859  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05642 140F                        CC            .byte	$CC
05643 1410                        CC            .byte	$CC
05644 1411                        78            .byte	$78
05645 1412                        FC            .byte	$FC
05646 1413                        30            .byte	$30
05647 1414                        FC            .byte	$FC
05648 1415                        30            .byte	$30
05649 1416                        30            .byte	$30
05650                                           ! 860  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05651 1417                        F8            .byte	$F8
05652 1418                        CC            .byte	$CC
05653 1419                        CC            .byte	$CC
05654 141A                        FA            .byte	$FA
05655 141B                        C6            .byte	$C6
05656 141C                        CF            .byte	$CF
05657 141D                        C6            .byte	$C6
05658 141E                        C7            .byte	$C7
05659                                           ! 861  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05660 141F                        0E            .byte	$E
05661 1420                        1B            .byte	$1B
05662 1421                        18            .byte	$18
05663 1422                        3C            .byte	$3C
05664 1423                        18            .byte	$18
05665 1424                        18            .byte	$18
05666 1425                        D8            .byte	$D8
05667 1426                        70            .byte	$70
05668                                           ! 862  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05669 1427                        1C            .byte	$1C
05670 1428                        00            .byte	0
05671 1429                        78            .byte	$78
05672 142A                        0C            .byte	$C
05673 142B                        7C            .byte	$7C
05674 142C                        CC            .byte	$CC
05675 142D                        7E            .byte	$7E
05676 142E                        00            .byte	0
05677                                           ! 863  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05678 142F                        38            .byte	$38
05679 1430                        00            .byte	0
05680 1431                        70            .byte	$70
05681 1432                        30            .byte	$30
05682 1433                        30            .byte	$30
05683 1434                        30            .byte	$30
05684 1435                        78            .byte	$78
05685 1436                        00            .byte	0
05686                                           ! 864  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05687 1437                        00            .byte	0
05688 1438                        1C            .byte	$1C
05689 1439                        00            .byte	0
05690 143A                        78            .byte	$78
05691 143B                        CC            .byte	$CC
05692 143C                        CC            .byte	$CC
05693 143D                        78            .byte	$78
05694 143E                        00            .byte	0
05695                                           ! 865  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05696 143F                        00            .byte	0
05697 1440                        1C            .byte	$1C
05698 1441                        00            .byte	0
05699 1442                        CC            .byte	$CC
05700 1443                        CC            .byte	$CC
05701 1444                        CC            .byte	$CC
05702 1445                        7E            .byte	$7E
05703 1446                        00            .byte	0
05704                                           ! 866  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
05705 1447                        00            .byte	0
05706 1448                        F8            .byte	$F8
05707 1449                        00            .byte	0
05708 144A                        F8            .byte	$F8
05709 144B                        CC            .byte	$CC
05710 144C                        CC            .byte	$CC
05711 144D                        CC            .byte	$CC
05712 144E                        00            .byte	0
05713                                           ! 867  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
05714 144F                        FC            .byte	$FC
05715 1450                        00            .byte	0
05716 1451                        CC            .byte	$CC
05717 1452                        EC            .byte	$EC
05718 1453                        FC            .byte	$FC
05719 1454                        DC            .byte	$DC
05720 1455                        CC            .byte	$CC
05721 1456                        00            .byte	0
05722                                           ! 868  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
05723 1457                        3C            .byte	$3C
05724 1458                        6C            .byte	$6C
05725 1459                        6C            .byte	$6C
05726 145A                        3E            .byte	$3E
05727 145B                        00            .byte	0
05728 145C                        7E            .byte	$7E
05729 145D                        00            .byte	0
05730 145E                        00            .byte	0
05731                                           ! 869  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
05732 145F                        38            .byte	$38
05733 1460                        6C            .byte	$6C
05734 1461                        6C            .byte	$6C
05735 1462                        38            .byte	$38
05736 1463                        00            .byte	0
05737 1464                        7C            .byte	$7C
05738 1465                        00            .byte	0
05739 1466                        00            .byte	0
05740                                           ! 870  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
05741 1467                        30            .byte	$30
05742 1468                        00            .byte	0
05743 1469                        30            .byte	$30
05744 146A                        60            .byte	$60
05745 146B                        C0            .byte	$C0
05746 146C                        CC            .byte	$CC
05747 146D                        78            .byte	$78
05748 146E                        00            .byte	0
05749                                           ! 871  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
05750 146F                        00            .byte	0
05751 1470                        00            .byte	0
05752 1471                        00            .byte	0
05753 1472                        FC            .byte	$FC
05754 1473                        C0            .byte	$C0
05755 1474                        C0            .byte	$C0
05756 1475                        00            .byte	0
05757 1476                        00            .byte	0
05758                                           ! 872  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
05759 1477                        00            .byte	0
05760 1478                        00            .byte	0
05761 1479                        00            .byte	0
05762 147A                        FC            .byte	$FC
05763 147B                        0C            .byte	$C
05764 147C                        0C            .byte	$C
05765 147D                        00            .byte	0
05766 147E                        00            .byte	0
05767                                           ! 873  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
05768 147F                        C3            .byte	$C3
05769 1480                        C6            .byte	$C6
05770 1481                        CC            .byte	$CC
05771 1482                        DE            .byte	$DE
05772 1483                        33            .byte	$33
05773 1484                        66            .byte	$66
05774 1485                        CC            .byte	$CC
05775 1486                        0F            .byte	$F
05776                                           ! 874  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
05777 1487                        C3            .byte	$C3
05778 1488                        C6            .byte	$C6
05779 1489                        CC            .byte	$CC
05780 148A                        DB            .byte	$DB
05781 148B                        37            .byte	$37
05782 148C                        6F            .byte	$6F
05783 148D                        CF            .byte	$CF
05784 148E                        03            .byte	3
05785                                           ! 875  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
05786 148F                        18            .byte	$18
05787 1490                        18            .byte	$18
05788 1491                        00            .byte	0
05789 1492                        18            .byte	$18
05790 1493                        18            .byte	$18
05791 1494                        18            .byte	$18
05792 1495                        18            .byte	$18
05793 1496                        00            .byte	0
05794                                           ! 876  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
05795 1497                        00            .byte	0
05796 1498                        33            .byte	$33
05797 1499                        66            .byte	$66
05798 149A                        CC            .byte	$CC
05799 149B                        66            .byte	$66
05800 149C                        33            .byte	$33
05801 149D                        00            .byte	0
05802 149E                        00            .byte	0
05803                                           ! 877  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
05804 149F                        00            .byte	0
05805 14A0                        CC            .byte	$CC
05806 14A1                        66            .byte	$66
05807 14A2                        33            .byte	$33
05808 14A3                        66            .byte	$66
05809 14A4                        CC            .byte	$CC
05810 14A5                        00            .byte	0
05811 14A6                        00            .byte	0
05812                                           ! 878  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
05813 14A7                        22            .byte	$22
05814 14A8                        88            .byte	$88
05815 14A9                        22            .byte	$22
05816 14AA                        88            .byte	$88
05817 14AB                        22            .byte	$22
05818 14AC                        88            .byte	$88
05819 14AD                        22            .byte	$22
05820 14AE                        88            .byte	$88
05821                                           ! 879  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
05822 14AF                        55            .byte	$55
05823 14B0                        AA            .byte	$AA
05824 14B1                        55            .byte	$55
05825 14B2                        AA            .byte	$AA
05826 14B3                        55            .byte	$55
05827 14B4                        AA            .byte	$AA
05828 14B5                        55            .byte	$55
05829 14B6                        AA            .byte	$AA
05830                                           ! 880  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
05831 14B7                        DB            .byte	$DB
05832 14B8                        77            .byte	$77
05833 14B9                        DB            .byte	$DB
05834 14BA                        EE            .byte	$EE
05835 14BB                        DB            .byte	$DB
05836 14BC                        77            .byte	$77
05837 14BD                        DB            .byte	$DB
05838 14BE                        EE            .byte	$EE
05839                                           ! 881  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
05840 14BF                        18            .byte	$18
05841 14C0                        18            .byte	$18
05842 14C1                        18            .byte	$18
05843 14C2                        18            .byte	$18
05844 14C3                        18            .byte	$18
05845 14C4                        18            .byte	$18
05846 14C5                        18            .byte	$18
05847 14C6                        18            .byte	$18
05848                                           ! 882  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
05849 14C7                        18            .byte	$18
05850 14C8                        18            .byte	$18
05851 14C9                        18            .byte	$18
05852 14CA                        18            .byte	$18
05853 14CB                        F8            .byte	$F8
05854 14CC                        18            .byte	$18
05855 14CD                        18            .byte	$18
05856 14CE                        18            .byte	$18
05857                                           ! 883  0x1
05858                                           ! 883 8, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05859 14CF                        18            .byte	$18
05860 14D0                        18            .byte	$18
05861 14D1                        F8            .byte	$F8
05862 14D2                        18            .byte	$18
05863 14D3                        F8            .byte	$F8
05864 14D4                        18            .byte	$18
05865 14D5                        18            .byte	$18
05866 14D6                        18            .byte	$18
05867                                           ! 884  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
05868 14D7                        36            .byte	$36
05869 14D8                        36            .byte	$36
05870 14D9                        36            .byte	$36
05871 14DA                        36            .byte	$36
05872 14DB                        F6            .byte	$F6
05873 14DC                        36            .byte	$36
05874 14DD                        36            .byte	$36
05875 14DE                        36            .byte	$36
05876                                           ! 885  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
05877 14DF                        00            .byte	0
05878 14E0                        00            .byte	0
05879 14E1                        00            .byte	0
05880 14E2                        00            .byte	0
05881 14E3                        FE            .byte	$FE
05882 14E4                        36            .byte	$36
05883 14E5                        36            .byte	$36
05884 14E6                        36            .byte	$36
05885                                           ! 886  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05886 14E7                        00            .byte	0
05887 14E8                        00            .byte	0
05888 14E9                        F8            .byte	$F8
05889 14EA                        18            .byte	$18
05890 14EB                        F8            .byte	$F8
05891 14EC                        18            .byte	$18
05892 14ED                        18            .byte	$18
05893 14EE                        18            .byte	$18
05894                                           ! 887  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
05895 14EF                        36            .byte	$36
05896 14F0                        36            .byte	$36
05897 14F1                        F6            .byte	$F6
05898 14F2                        06            .byte	6
05899 14F3                        F6            .byte	$F6
05900 14F4                        36            .byte	$36
05901 14F5                        36            .byte	$36
05902 14F6                        36            .byte	$36
05903                                           ! 888  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
05904 14F7                        36            .byte	$36
05905 14F8                        36            .byte	$36
05906 14F9                        36            .byte	$36
05907 14FA                        36            .byte	$36
05908 14FB                        36            .byte	$36
05909 14FC                        36            .byte	$36
05910 14FD                        36            .byte	$36
05911 14FE                        36            .byte	$36
05912                                           ! 889  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
05913 14FF                        00            .byte	0
05914 1500                        00            .byte	0
05915 1501                        FE            .byte	$FE
05916 1502                        06            .byte	6
05917 1503                        F6            .byte	$F6
05918 1504                        36            .byte	$36
05919 1505                        36            .byte	$36
05920 1506                        36            .byte	$36
05921                                           ! 890  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
05922 1507                        36            .byte	$36
05923 1508                        36            .byte	$36
05924 1509                        F6            .byte	$F6
05925 150A                        06            .byte	6
05926 150B                        FE            .byte	$FE
05927 150C                        00            .byte	0
05928 150D                        00            .byte	0
05929 150E                        00            .byte	0
05930                                           ! 891  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
05931 150F                        36            .byte	$36
05932 1510                        36            .byte	$36
05933 1511                        36            .byte	$36
05934 1512                        36            .byte	$36
05935 1513                        FE            .byte	$FE
05936 1514                        00            .byte	0
05937 1515                        00            .byte	0
05938 1516                        00            .byte	0
05939                                           ! 892  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
05940 1517                        18            .byte	$18
05941 1518                        18            .byte	$18
05942 1519                        F8            .byte	$F8
05943 151A                        18            .byte	$18
05944 151B                        F8            .byte	$F8
05945 151C                        00            .byte	0
05946 151D                        00            .byte	0
05947 151E                        00            .byte	0
05948                                           ! 893  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
05949 151F                        00            .byte	0
05950 1520                        00            .byte	0
05951 1521                        00            .byte	0
05952 1522                        00            .byte	0
05953 1523                        F8            .byte	$F8
05954 1524                        18            .byte	$18
05955 1525                        18            .byte	$18
05956 1526                        18            .byte	$18
05957                                           ! 894  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
05958 1527                        18            .byte	$18
05959 1528                        18            .byte	$18
05960 1529                        18            .byte	$18
05961 152A                        18            .byte	$18
05962 152B                        1F            .byte	$1F
05963 152C                        00            .byte	0
05964 152D                        00            .byte	0
05965 152E                        00            .byte	0
05966                                           ! 895  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
05967 152F                        18            .byte	$18
05968 1530                        18            .byte	$18
05969 1531                        18            .byte	$18
05970 1532                        18            .byte	$18
05971 1533                        FF            .byte	$FF
05972 1534                        00            .byte	0
05973 1535                        00            .byte	0
05974 1536                        00            .byte	0
05975                                           ! 896  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
05976 1537                        00            .byte	0
05977 1538                        00            .byte	0
05978 1539                        00            .byte	0
05979 153A                        00            .byte	0
05980 153B                        FF            .byte	$FF
05981 153C                        18            .byte	$18
05982 153D                        18            .byte	$18
05983 153E                        18            .byte	$18
05984                                           ! 897  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
05985 153F                        18            .byte	$18
05986 1540                        18            .byte	$18
05987 1541                        18            .byte	$18
05988 1542                        18            .byte	$18
05989 1543                        1F            .byte	$1F
05990 1544                        18            .byte	$18
05991 1545                        18            .byte	$18
05992 1546                        18            .byte	$18
05993                                           ! 898  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
05994 1547                        00            .byte	0
05995 1548                        00            .byte	0
05996 1549                        00            .byte	0
05997 154A                        00            .byte	0
05998 154B                        FF            .byte	$FF
05999 154C                        00            .byte	0
06000 154D                        00            .byte	0
06001 154E                        00            .byte	0
06002                                           ! 899  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06003 154F                        18            .byte	$18
06004 1550                        18            .byte	$18
06005 1551                        18            .byte	$18
06006 1552                        18            .byte	$18
06007 1553                        FF            .byte	$FF
06008 1554                        18            .byte	$18
06009 1555                        18            .byte	$18
06010 1556                        18            .byte	$18
06011                                           ! 900  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06012 1557                        18            .byte	$18
06013 1558                        18            .byte	$18
06014 1559                        1F            .byte	$1F
06015 155A                        18            .byte	$18
06016 155B                        1F            .byte	$1F
06017 155C                        18            .byte	$18
06018 155D                        18            .byte	$18
06019 155E                        18            .byte	$18
06020                                           ! 901  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06021 155F                        36            .byte	$36
06022 1560                        36            .byte	$36
06023 1561                        36            .byte	$36
06024 1562                        36            .byte	$36
06025 1563                        37            .byte	$37
06026 1564                        36            .byte	$36
06027 1565                        36            .byte	$36
06028 1566                        36            .byte	$36
06029                                           ! 902  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06030 1567                        36            .byte	$36
06031 1568                        36            .byte	$36
06032 1569                        37            .byte	$37
06033 156A                        30            .byte	$30
06034 156B                        3F            .byte	$3F
06035 156C                        00            .byte	0
06036 156D                        00            .byte	0
06037 156E                        00            .byte	0
06038                                           ! 903  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06039 156F                        00            .byte	0
06040 1570                        00            .byte	0
06041 1571                        3F            .byte	$3F
06042 1572                        30            .byte	$30
06043 1573                        37            .byte	$37
06044 1574                        36            .byte	$36
06045 1575                        36            .byte	$36
06046 1576                        36            .byte	$36
06047                                           ! 904  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06048 1577                        36            .byte	$36
06049 1578                        36            .byte	$36
06050 1579                        F7            .byte	$F7
06051 157A                        00            .byte	0
06052 157B                        FF            .byte	$FF
06053 157C                        00            .byte	0
06054 157D                        00            .byte	0
06055 157E                        00            .byte	0
06056                                           ! 905  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06057 157F                        00            .byte	0
06058 1580                        00            .byte	0
06059 1581                        FF            .byte	$FF
06060 1582                        00            .byte	0
06061 1583                        F7            .byte	$F7
06062 1584                        36            .byte	$36
06063 1585                        36            .byte	$36
06064 1586                        36            .byte	$36
06065                                           ! 906  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06066 1587                        36            .byte	$36
06067 1588                        36            .byte	$36
06068 1589                        37            .byte	$37
06069 158A                        30            .byte	$30
06070 158B                        37            .byte	$37
06071 158C                        36            .byte	$36
06072 158D                        36            .byte	$36
06073 158E                        36            .byte	$36
06074                                           ! 907  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06075 158F                        00            .byte	0
06076 1590                        00            .byte	0
06077 1591                        FF            .byte	$FF
06078 1592                        00            .byte	0
06079 1593                        FF            .byte	$FF
06080 1594                        00            .byte	0
06081 1595                        00            .byte	0
06082 1596                        00            .byte	0
06083                                           ! 908  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06084 1597                        36            .byte	$36
06085 1598                        36            .byte	$36
06086 1599                        F7            .byte	$F7
06087 159A                        00            .byte	0
06088 159B                        F7            .byte	$F7
06089 159C                        36            .byte	$36
06090 159D                        36            .byte	$36
06091 159E                        36            .byte	$36
06092                                           ! 909  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06093 159F                        18            .byte	$18
06094 15A0                        18            .byte	$18
06095 15A1                        FF            .byte	$FF
06096 15A2                        00            .byte	0
06097 15A3                        FF            .byte	$FF
06098 15A4                        00            .byte	0
06099 15A5                        00            .byte	0
06100 15A6                        00            .byte	0
06101                                           ! 910  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06102 15A7                        36            .byte	$36
06103 15A8                        36            .byte	$36
06104 15A9                        36            .byte	$36
06105 15AA                        36            .byte	$36
06106 15AB                        FF            .byte	$FF
06107 15AC                        00            .byte	0
06108 15AD                        00            .byte	0
06109 15AE                        00            .byte	0
06110                                           ! 911  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06111 15AF                        00            .byte	0
06112 15B0                        00            .byte	0
06113 15B1                        FF            .byte	$FF
06114 15B2                        00            .byte	0
06115 15B3                        FF            .byte	$FF
06116 15B4                        18            .byte	$18
06117 15B5                        18            .byte	$18
06118 15B6                        18            .byte	$18
06119                                           ! 912  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06120 15B7                        00            .byte	0
06121 15B8                        00            .byte	0
06122 15B9                        00            .byte	0
06123 15BA                        00            .byte	0
06124 15BB                        FF            .byte	$FF
06125 15BC                        36            .byte	$36
06126 15BD                        36            .byte	$36
06127 15BE                        36            .byte	$36
06128                                           ! 913  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06129 15BF                        36            .byte	$36
06130 15C0                        36            .byte	$36
06131 15C1                        36            .byte	$36
06132 15C2                        36            .byte	$36
06133 15C3                        3F            .byte	$3F
06134 15C4                        00            .byte	0
06135 15C5                        00            .byte	0
06136 15C6                        00            .byte	0
06137                                           ! 914  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06138 15C7                        18            .byte	$18
06139 15C8                        18            .byte	$18
06140 15C9                        1F            .byte	$1F
06141 15CA                        18            .byte	$18
06142 15CB                        1F            .byte	$1F
06143 15CC                        00            .byte	0
06144 15CD                        00            .byte	0
06145 15CE                        00            .byte	0
06146                                           ! 915  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06147 15CF                        00            .byte	0
06148 15D0                        00            .byte	0
06149 15D1                        1F            .byte	$1F
06150 15D2                        18            .byte	$18
06151 15D3                        1F            .byte	$1F
06152 15D4                        18            .byte	$18
06153 15D5                        18            .byte	$18
06154 15D6                        18            .byte	$18
06155                                           ! 916  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06156 15D7                        00            .byte	0
06157 15D8                        00            .byte	0
06158 15D9                        00            .byte	0
06159 15DA                        00            .byte	0
06160 15DB                        3F            .byte	$3F
06161 15DC                        36            .byte	$36
06162 15DD                        36            .byte	$36
06163 15DE                        36            .byte	$36
06164                                           ! 917  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06165 15DF                        36            .byte	$36
06166 15E0                        36            .byte	$36
06167 15E1                        36            .byte	$36
06168 15E2                        36            .byte	$36
06169 15E3                        FF            .byte	$FF
06170 15E4                        36            .byte	$36
06171 15E5                        36            .byte	$36
06172 15E6                        36            .byte	$36
06173                                           ! 918  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06174 15E7                        18            .byte	$18
06175 15E8                        18            .byte	$18
06176 15E9                        FF            .byte	$FF
06177 15EA                        18            .byte	$18
06178 15EB                        FF            .byte	$FF
06179 15EC                        18            .byte	$18
06180 15ED                        18            .byte	$18
06181 15EE                        18            .byte	$18
06182                                           ! 919  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06183 15EF                        18            .byte	$18
06184 15F0                        18            .byte	$18
06185 15F1                        18            .byte	$18
06186 15F2                        18            .byte	$18
06187 15F3                        F8            .byte	$F8
06188 15F4                        00            .byte	0
06189 15F5                        00            .byte	0
06190 15F6                        00            .byte	0
06191                                           ! 920  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06192 15F7                        00            .byte	0
06193 15F8                        00            .byte	0
06194 15F9                        00            .byte	0
06195 15FA                        00            .byte	0
06196 15FB                        1F            .byte	$1F
06197 15FC                        18            .byte	$18
06198 15FD                        18            .byte	$18
06199 15FE                        18            .byte	$18
06200                                           ! 921  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06201 15FF                        FF            .byte	$FF
06202 1600                        FF            .byte	$FF
06203 1601                        FF            .byte	$FF
06204 1602                        FF            .byte	$FF
06205 1603                        FF            .byte	$FF
06206 1604                        FF            .byte	$FF
06207 1605                        FF            .byte	$FF
06208 1606                        FF            .byte	$FF
06209                                           ! 922  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06210 1607                        00            .byte	0
06211 1608                        00            .byte	0
06212 1609                        00            .byte	0
06213 160A                        00            .byte	0
06214 160B                        FF            .byte	$FF
06215 160C                        FF            .byte	$FF
06216 160D                        FF            .byte	$FF
06217 160E                        FF            .byte	$FF
06218                                           ! 923  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06219 160F                        F0            .byte	$F0
06220 1610                        F0            .byte	$F0
06221 1611                        F0            .byte	$F0
06222 1612                        F0            .byte	$F0
06223 1613                        F0            .byte	$F0
06224 1614                        F0            .byte	$F0
06225 1615                        F0            .byte	$F0
06226 1616                        F0            .byte	$F0
06227                                           ! 924  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
06228 1617                        0F            .byte	$F
06229 1618                        0F            .byte	$F
06230 1619                        0F            .byte	$F
06231 161A                        0F            .byte	$F
06232 161B                        0F            .byte	$F
06233 161C                        0F            .byte	$F
06234 161D                        0F            .byte	$F
06235                                           ! 924 0x0f,
06236 161E                        0F            .byte	$F
06237                                           ! 925  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06238 161F                        FF            .byte	$FF
06239 1620                        FF            .byte	$FF
06240 1621                        FF            .byte	$FF
06241 1622                        FF            .byte	$FF
06242 1623                        00            .byte	0
06243 1624                        00            .byte	0
06244 1625                        00            .byte	0
06245 1626                        00            .byte	0
06246                                           ! 926  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06247 1627                        00            .byte	0
06248 1628                        00            .byte	0
06249 1629                        76            .byte	$76
06250 162A                        DC            .byte	$DC
06251 162B                        C8            .byte	$C8
06252 162C                        DC            .byte	$DC
06253 162D                        76            .byte	$76
06254 162E                        00            .byte	0
06255                                           ! 927  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06256 162F                        00            .byte	0
06257 1630                        78            .byte	$78
06258 1631                        CC            .byte	$CC
06259 1632                        F8            .byte	$F8
06260 1633                        CC            .byte	$CC
06261 1634                        F8            .byte	$F8
06262 1635                        C0            .byte	$C0
06263 1636                        C0            .byte	$C0
06264                                           ! 928  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06265 1637                        00            .byte	0
06266 1638                        FC            .byte	$FC
06267 1639                        CC            .byte	$CC
06268 163A                        C0            .byte	$C0
06269 163B                        C0            .byte	$C0
06270 163C                        C0            .byte	$C0
06271 163D                        C0            .byte	$C0
06272 163E                        00            .byte	0
06273                                           ! 929  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06274 163F                        00            .byte	0
06275 1640                        FE            .byte	$FE
06276 1641                        6C            .byte	$6C
06277 1642                        6C            .byte	$6C
06278 1643                        6C            .byte	$6C
06279 1644                        6C            .byte	$6C
06280 1645                        6C            .byte	$6C
06281 1646                        00            .byte	0
06282                                           ! 930  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06283 1647                        FC            .byte	$FC
06284 1648                        CC            .byte	$CC
06285 1649                        60            .byte	$60
06286 164A                        30            .byte	$30
06287 164B                        60            .byte	$60
06288 164C                        CC            .byte	$CC
06289 164D                        FC            .byte	$FC
06290 164E                        00            .byte	0
06291                                           ! 931  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06292 164F                        00            .byte	0
06293 1650                        00            .byte	0
06294 1651                        7E            .byte	$7E
06295 1652                        D8            .byte	$D8
06296 1653                        D8            .byte	$D8
06297 1654                        D8            .byte	$D8
06298 1655                        70            .byte	$70
06299 1656                        00            .byte	0
06300                                           ! 932  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06301 1657                        00            .byte	0
06302 1658                        66            .byte	$66
06303 1659                        66            .byte	$66
06304 165A                        66            .byte	$66
06305 165B                        66            .byte	$66
06306 165C                        7C            .byte	$7C
06307 165D                        60            .byte	$60
06308 165E                        C0            .byte	$C0
06309                                           ! 933  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06310 165F                        00            .byte	0
06311 1660                        76            .byte	$76
06312 1661                        DC            .byte	$DC
06313 1662                        18            .byte	$18
06314 1663                        18            .byte	$18
06315 1664                        18            .byte	$18
06316 1665                        18            .byte	$18
06317 1666                        00            .byte	0
06318                                           ! 934  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06319 1667                        FC            .byte	$FC
06320 1668                        30            .byte	$30
06321 1669                        78            .byte	$78
06322 166A                        CC            .byte	$CC
06323 166B                        CC            .byte	$CC
06324 166C                        78            .byte	$78
06325 166D                        30            .byte	$30
06326 166E                        FC            .byte	$FC
06327                                           ! 935  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06328 166F                        38            .byte	$38
06329 1670                        6C            .byte	$6C
06330 1671                        C6            .byte	$C6
06331 1672                        FE            .byte	$FE
06332 1673                        C6            .byte	$C6
06333 1674                        6C            .byte	$6C
06334 1675                        38            .byte	$38
06335 1676                        00            .byte	0
06336                                           ! 936  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06337 1677                        38            .byte	$38
06338 1678                        6C            .byte	$6C
06339 1679                        C6            .byte	$C6
06340 167A                        C6            .byte	$C6
06341 167B                        6C            .byte	$6C
06342 167C                        6C            .byte	$6C
06343 167D                        EE            .byte	$EE
06344 167E                        00            .byte	0
06345                                           ! 937  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06346 167F                        1C            .byte	$1C
06347 1680                        30            .byte	$30
06348 1681                        18            .byte	$18
06349 1682                        7C            .byte	$7C
06350 1683                        CC            .byte	$CC
06351 1684                        CC            .byte	$CC
06352 1685                        78            .byte	$78
06353 1686                        00            .byte	0
06354                                           ! 938  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06355 1687                        00            .byte	0
06356 1688                        00            .byte	0
06357 1689                        7E            .byte	$7E
06358 168A                        DB            .byte	$DB
06359 168B                        DB            .byte	$DB
06360 168C                        7E            .byte	$7E
06361 168D                        00            .byte	0
06362 168E                        00            .byte	0
06363                                           ! 939  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06364 168F                        06            .byte	6
06365 1690                        0C            .byte	$C
06366 1691                        7E            .byte	$7E
06367 1692                        DB            .byte	$DB
06368 1693                        DB            .byte	$DB
06369 1694                        7E            .byte	$7E
06370 1695                        60            .byte	$60
06371 1696                        C0            .byte	$C0
06372                                           ! 940  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06373 1697                        38            .byte	$38
06374 1698                        60            .byte	$60
06375 1699                        C0            .byte	$C0
06376 169A                        F8            .byte	$F8
06377 169B                        C0            .byte	$C0
06378 169C                        60            .byte	$60
06379 169D                        38            .byte	$38
06380 169E                        00            .byte	0
06381                                           ! 941  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06382 169F                        78            .byte	$78
06383 16A0                        CC            .byte	$CC
06384 16A1                        CC            .byte	$CC
06385 16A2                        CC            .byte	$CC
06386 16A3                        CC            .byte	$CC
06387 16A4                        CC            .byte	$CC
06388 16A5                        CC            .byte	$CC
06389 16A6                        00            .byte	0
06390                                           ! 942  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06391 16A7                        00            .byte	0
06392 16A8                        FC            .byte	$FC
06393 16A9                        00            .byte	0
06394 16AA                        FC            .byte	$FC
06395 16AB                        00            .byte	0
06396 16AC                        FC            .byte	$FC
06397 16AD                        00            .byte	0
06398 16AE                        00            .byte	0
06399                                           ! 943  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06400 16AF                        30            .byte	$30
06401 16B0                        30            .byte	$30
06402 16B1                        FC            .byte	$FC
06403 16B2                        30            .byte	$30
06404 16B3                        30            .byte	$30
06405 16B4                        00            .byte	0
06406 16B5                        FC            .byte	$FC
06407 16B6                        00            .byte	0
06408                                           ! 944  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06409 16B7                        60            .byte	$60
06410 16B8                        30            .byte	$30
06411 16B9                        18            .byte	$18
06412 16BA                        30            .byte	$30
06413 16BB                        60            .byte	$60
06414 16BC                        00            .byte	0
06415 16BD                        FC            .byte	$FC
06416 16BE                        00            .byte	0
06417                                           ! 945  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06418 16BF                        18            .byte	$18
06419 16C0                        30            .byte	$30
06420 16C1                        60            .byte	$60
06421 16C2                        30            .byte	$30
06422 16C3                        18            .byte	$18
06423 16C4                        00            .byte	0
06424 16C5                        FC            .byte	$FC
06425 16C6                        00            .byte	0
06426                                           ! 946  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06427 16C7                        0E            .byte	$E
06428 16C8                        1B            .byte	$1B
06429 16C9                        1B            .byte	$1B
06430 16CA                        18            .byte	$18
06431 16CB                        18            .byte	$18
06432 16CC                        18            .byte	$18
06433 16CD                        18            .byte	$18
06434 16CE                        18            .byte	$18
06435                                           ! 947  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06436 16CF                        18            .byte	$18
06437 16D0                        18            .byte	$18
06438 16D1                        18            .byte	$18
06439 16D2                        18            .byte	$18
06440 16D3                        18            .byte	$18
06441 16D4                        D8            .byte	$D8
06442 16D5                        D8            .byte	$D8
06443 16D6                        70            .byte	$70
06444                                           ! 948  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06445 16D7                        30            .byte	$30
06446 16D8                        30            .byte	$30
06447 16D9                        00            .byte	0
06448 16DA                        FC            .byte	$FC
06449 16DB                        00            .byte	0
06450 16DC                        30            .byte	$30
06451 16DD                        30            .byte	$30
06452 16DE                        00            .byte	0
06453                                           ! 949  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06454 16DF                        00            .byte	0
06455 16E0                        76            .byte	$76
06456 16E1                        DC            .byte	$DC
06457 16E2                        00            .byte	0
06458 16E3                        76            .byte	$76
06459 16E4                        DC            .byte	$DC
06460 16E5                        00            .byte	0
06461 16E6                        00            .byte	0
06462                                           ! 950  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06463 16E7                        38            .byte	$38
06464 16E8                        6C            .byte	$6C
06465 16E9                        6C            .byte	$6C
06466 16EA                        38            .byte	$38
06467 16EB                        00            .byte	0
06468 16EC                        00            .byte	0
06469 16ED                        00            .byte	0
06470 16EE                        00            .byte	0
06471                                           ! 951  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06472 16EF                        00            .byte	0
06473 16F0                        00            .byte	0
06474 16F1                        00            .byte	0
06475 16F2                        18            .byte	$18
06476 16F3                        18            .byte	$18
06477 16F4                        00            .byte	0
06478 16F5                        00            .byte	0
06479 16F6                        00            .byte	0
06480                                           ! 952  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06481 16F7                        00            .byte	0
06482 16F8                        00            .byte	0
06483 16F9                        00            .byte	0
06484 16FA                        00            .byte	0
06485 16FB                        18            .byte	$18
06486 16FC                        00            .byte	0
06487 16FD                        00            .byte	0
06488 16FE                        00            .byte	0
06489                                           ! 953  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06490 16FF                        0F            .byte	$F
06491 1700                        0C            .byte	$C
06492 1701                        0C            .byte	$C
06493 1702                        0C            .byte	$C
06494 1703                        EC            .byte	$EC
06495 1704                        6C            .byte	$6C
06496 1705                        3C            .byte	$3C
06497 1706                        1C            .byte	$1C
06498                                           ! 954  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06499 1707                        78            .byte	$78
06500 1708                        6C            .byte	$6C
06501 1709                        6C            .byte	$6C
06502 170A                        6C            .byte	$6C
06503 170B                        6C            .byte	$6C
06504 170C                        00            .byte	0
06505 170D                        00            .byte	0
06506 170E                        00            .byte	0
06507                                           ! 955  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06508 170F                        70            .byte	$70
06509 1710                        18            .byte	$18
06510 1711                        30            .byte	$30
06511 1712                        60            .byte	$60
06512 1713                        78            .byte	$78
06513 1714                        00            .byte	0
06514 1715                        00            .byte	0
06515 1716                        00            .byte	0
06516                                           ! 956  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06517 1717                        00            .byte	0
06518 1718                        00            .byte	0
06519 1719                        3C            .byte	$3C
06520 171A                        3C            .byte	$3C
06521 171B                        3C            .byte	$3C
06522 171C                        3C            .byte	$3C
06523 171D                        00            .byte	0
06524 171E                        00            .byte	0
06525                                           ! 957  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06526 171F                        00            .byte	0
06527 1720                        00            .byte	0
06528 1721                        00            .byte	0
06529 1722                        00            .byte	0
06530 1723                        00            .byte	0
06531 1724                        00            .byte	0
06532 1725                        00            .byte	0
06533                                           ! 958 };
06534 1726                        00            .byte	0
06535                                           !BCC_EOS
06536                                           ! 959 static Bit8u vgafont14[256*14]=
06537                                           ! 960 {
06538                       00001727            _vgafont14:
06539                                           ! 961  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06540 1727                        00            .byte	0
06541 1728                        00            .byte	0
06542 1729                        00            .byte	0
06543 172A                        00            .byte	0
06544 172B                        00            .byte	0
06545 172C                        00            .byte	0
06546 172D                        00            .byte	0
06547 172E                        00            .byte	0
06548 172F                        00            .byte	0
06549 1730                        00            .byte	0
06550 1731                        00            .byte	0
06551 1732                        00            .byte	0
06552 1733                        00            .byte	0
06553 1734                        00            .byte	0
06554                                           ! 962  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06555 1735                        00            .byte	0
06556 1736                        00            .byte	0
06557 1737                        7E            .byte	$7E
06558 1738                        81            .byte	$81
06559 1739                        A5            .byte	$A5
06560 173A                        81            .byte	$81
06561 173B                        81            .byte	$81
06562 173C                        BD            .byte	$BD
06563 173D                        99            .byte	$99
06564 173E                        81            .byte	$81
06565 173F                        7E            .byte	$7E
06566 1740                        00            .byte	0
06567 1741                        00            .byte	0
06568 1742                        00            .byte	0
06569                                           ! 963  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06570 1743                        00            .byte	0
06571 1744                        00            .byte	0
06572 1745                        7E            .byte	$7E
06573 1746                        FF            .byte	$FF
06574 1747                        DB            .byte	$DB
06575 1748                        FF            .byte	$FF
06576 1749                        FF            .byte	$FF
06577 174A                        C3            .byte	$C3
06578 174B                        E7            .byte	$E7
06579 174C                        FF            .byte	$FF
06580 174D                        7E            .byte	$7E
06581 174E                        00            .byte	0
06582 174F                        00            .byte	0
06583 1750                        00            .byte	0
06584                                           ! 964  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06585 1751                        00            .byte	0
06586 1752                        00            .byte	0
06587 1753                        00            .byte	0
06588 1754                        6C            .byte	$6C
06589 1755                        FE            .byte	$FE
06590 1756                        FE            .byte	$FE
06591 1757                        FE            .byte	$FE
06592 1758                        FE            .byte	$FE
06593 1759                        7C            .byte	$7C
06594 175A                        38            .byte	$38
06595 175B                        10            .byte	$10
06596 175C                        00            .byte	0
06597 175D                        00            .byte	0
06598 175E                        00            .byte	0
06599                                           ! 965  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 
06600 175F                        00            .byte	0
06601 1760                        00            .byte	0
06602 1761                        00            .byte	0
06603 1762                        10            .byte	$10
06604 1763                        38            .byte	$38
06605 1764                        7C            .byte	$7C
06606 1765                        FE            .byte	$FE
06607 1766                        7C            .byte	$7C
06608                                           ! 965 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06609 1767                        38            .byte	$38
06610 1768                        10            .byte	$10
06611 1769                        00            .byte	0
06612 176A                        00            .byte	0
06613 176B                        00            .byte	0
06614 176C                        00            .byte	0
06615                                           ! 966  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06616 176D                        00            .byte	0
06617 176E                        00            .byte	0
06618 176F                        18            .byte	$18
06619 1770                        3C            .byte	$3C
06620 1771                        3C            .byte	$3C
06621 1772                        E7            .byte	$E7
06622 1773                        E7            .byte	$E7
06623 1774                        E7            .byte	$E7
06624 1775                        18            .byte	$18
06625 1776                        18            .byte	$18
06626 1777                        3C            .byte	$3C
06627 1778                        00            .byte	0
06628 1779                        00            .byte	0
06629 177A                        00            .byte	0
06630                                           ! 967  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06631 177B                        00            .byte	0
06632 177C                        00            .byte	0
06633 177D                        18            .byte	$18
06634 177E                        3C            .byte	$3C
06635 177F                        7E            .byte	$7E
06636 1780                        FF            .byte	$FF
06637 1781                        FF            .byte	$FF
06638 1782                        7E            .byte	$7E
06639 1783                        18            .byte	$18
06640 1784                        18            .byte	$18
06641 1785                        3C            .byte	$3C
06642 1786                        00            .byte	0
06643 1787                        00            .byte	0
06644 1788                        00            .byte	0
06645                                           ! 968  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06646 1789                        00            .byte	0
06647 178A                        00            .byte	0
06648 178B                        00            .byte	0
06649 178C                        00            .byte	0
06650 178D                        00            .byte	0
06651 178E                        18            .byte	$18
06652 178F                        3C            .byte	$3C
06653 1790                        3C            .byte	$3C
06654 1791                        18            .byte	$18
06655 1792                        00            .byte	0
06656 1793                        00            .byte	0
06657 1794                        00            .byte	0
06658 1795                        00            .byte	0
06659 1796                        00            .byte	0
06660                                           ! 969  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06661 1797                        FF            .byte	$FF
06662 1798                        FF            .byte	$FF
06663 1799                        FF            .byte	$FF
06664 179A                        FF            .byte	$FF
06665 179B                        FF            .byte	$FF
06666 179C                        E7            .byte	$E7
06667 179D                        C3            .byte	$C3
06668 179E                        C3            .byte	$C3
06669 179F                        E7            .byte	$E7
06670 17A0                        FF            .byte	$FF
06671 17A1                        FF            .byte	$FF
06672 17A2                        FF            .byte	$FF
06673 17A3                        FF            .byte	$FF
06674 17A4                        FF            .byte	$FF
06675                                           ! 970  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06676 17A5                        00            .byte	0
06677 17A6                        00            .byte	0
06678 17A7                        00            .byte	0
06679 17A8                        00            .byte	0
06680 17A9                        3C            .byte	$3C
06681 17AA                        66            .byte	$66
06682 17AB                        42            .byte	$42
06683 17AC                        42            .byte	$42
06684 17AD                        66            .byte	$66
06685 17AE                        3C            .byte	$3C
06686 17AF                        00            .byte	0
06687 17B0                        00            .byte	0
06688 17B1                        00            .byte	0
06689 17B2                        00            .byte	0
06690                                           ! 971  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06691 17B3                        FF            .byte	$FF
06692 17B4                        FF            .byte	$FF
06693 17B5                        FF            .byte	$FF
06694 17B6                        FF            .byte	$FF
06695 17B7                        C3            .byte	$C3
06696 17B8                        99            .byte	$99
06697 17B9                        BD            .byte	$BD
06698 17BA                        BD            .byte	$BD
06699 17BB                        99            .byte	$99
06700 17BC                        C3            .byte	$C3
06701 17BD                        FF            .byte	$FF
06702 17BE                        FF            .byte	$FF
06703 17BF                        FF            .byte	$FF
06704 17C0                        FF            .byte	$FF
06705                                           ! 972  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
06706 17C1                        00            .byte	0
06707 17C2                        00            .byte	0
06708 17C3                        1E            .byte	$1E
06709 17C4                        0E            .byte	$E
06710 17C5                        1A            .byte	$1A
06711 17C6                        32            .byte	$32
06712 17C7                        78            .byte	$78
06713 17C8                        CC            .byte	$CC
06714 17C9                        CC            .byte	$CC
06715 17CA                        CC            .byte	$CC
06716 17CB                        78            .byte	$78
06717 17CC                        00            .byte	0
06718 17CD                        00            .byte	0
06719 17CE                        00            .byte	0
06720                                           ! 973  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
06721 17CF                        00            .byte	0
06722 17D0                        00            .byte	0
06723 17D1                        3C            .byte	$3C
06724 17D2                        66            .byte	$66
06725 17D3                        66            .byte	$66
06726 17D4                        66            .byte	$66
06727 17D5                        3C            .byte	$3C
06728 17D6                        18            .byte	$18
06729 17D7                        7E            .byte	$7E
06730 17D8                        18            .byte	$18
06731 17D9                        18            .byte	$18
06732 17DA                        00            .byte	0
06733 17DB                        00            .byte	0
06734 17DC                        00            .byte	0
06735                                           ! 974  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
06736 17DD                        00            .byte	0
06737 17DE                        00            .byte	0
06738 17DF                        3F            .byte	$3F
06739 17E0                        33            .byte	$33
06740 17E1                        3F            .byte	$3F
06741 17E2                        30            .byte	$30
06742 17E3                        30            .byte	$30
06743 17E4                        30            .byte	$30
06744 17E5                        70            .byte	$70
06745 17E6                        F0            .byte	$F0
06746 17E7                        E0            .byte	$E0
06747 17E8                        00            .byte	0
06748 17E9                        00            .byte	0
06749 17EA                        00            .byte	0
06750                                           ! 975  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
06751 17EB                        00            .byte	0
06752 17EC                        00            .byte	0
06753 17ED                        7F            .byte	$7F
06754 17EE                        63            .byte	$63
06755 17EF                        7F            .byte	$7F
06756 17F0                        63            .byte	$63
06757 17F1                        63            .byte	$63
06758 17F2                        63            .byte	$63
06759 17F3                        67            .byte	$67
06760 17F4                        E7            .byte	$E7
06761 17F5                        E6            .byte	$E6
06762 17F6                        C0            .byte	$C0
06763 17F7                        00            .byte	0
06764 17F8                        00            .byte	0
06765                                           ! 976  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
06766 17F9                        00            .byte	0
06767 17FA                        00            .byte	0
06768 17FB                        18            .byte	$18
06769 17FC                        18            .byte	$18
06770 17FD                        DB            .byte	$DB
06771 17FE                        3C            .byte	$3C
06772 17FF                        E7            .byte	$E7
06773 1800                        3C            .byte	$3C
06774 1801                        DB            .byte	$DB
06775 1802                        18            .byte	$18
06776 1803                        18            .byte	$18
06777 1804                        00            .byte	0
06778 1805                        00            .byte	0
06779 1806                        00            .byte	0
06780                                           ! 977  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
06781 1807                        00            .byte	0
06782 1808                        00            .byte	0
06783 1809                        80            .byte	$80
06784 180A                        C0            .byte	$C0
06785 180B                        E0            .byte	$E0
06786 180C                        F8            .byte	$F8
06787 180D                        FE            .byte	$FE
06788 180E                        F8            .byte	$F8
06789 180F                        E0            .byte	$E0
06790 1810                        C0            .byte	$C0
06791 1811                        80            .byte	$80
06792 1812                        00            .byte	0
06793 1813                        00            .byte	0
06794 1814                        00            .byte	0
06795                                           ! 978  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
06796 1815                        00            .byte	0
06797 1816                        00            .byte	0
06798 1817                        02            .byte	2
06799 1818                        06            .byte	6
06800 1819                        0E            .byte	$E
06801 181A                        3E            .byte	$3E
06802 181B                        FE            .byte	$FE
06803 181C                        3E            .byte	$3E
06804 181D                        0E            .byte	$E
06805 181E                        06            .byte	6
06806 181F                        02            .byte	2
06807 1820                        00            .byte	0
06808 1821                        00            .byte	0
06809 1822                        00            .byte	0
06810                                           ! 979  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06811 1823                        00            .byte	0
06812 1824                        00            .byte	0
06813 1825                        18            .byte	$18
06814 1826                        3C            .byte	$3C
06815 1827                        7E            .byte	$7E
06816 1828                        18            .byte	$18
06817 1829                        18            .byte	$18
06818 182A                        18            .byte	$18
06819 182B                        7E            .byte	$7E
06820 182C                        3C            .byte	$3C
06821 182D                        18            .byte	$18
06822 182E                        00            .byte	0
06823 182F                        00            .byte	0
06824 1830                        00            .byte	0
06825                                           ! 980  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
06826 1831                        00            .byte	0
06827 1832                        00            .byte	0
06828 1833                        66            .byte	$66
06829 1834                        66            .byte	$66
06830 1835                        66            .byte	$66
06831 1836                        66            .byte	$66
06832 1837                        66            .byte	$66
06833 1838                        66            .byte	$66
06834 1839                        00            .byte	0
06835 183A                        66            .byte	$66
06836 183B                        66            .byte	$66
06837 183C                        00            .byte	0
06838 183D                        00            .byte	0
06839 183E                        00            .byte	0
06840                                           ! 981  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
06841 183F                        00            .byte	0
06842 1840                        00            .byte	0
06843 1841                        7F            .byte	$7F
06844 1842                        DB            .byte	$DB
06845 1843                        DB            .byte	$DB
06846 1844                        DB            .byte	$DB
06847 1845                        7B            .byte	$7B
06848 1846                        1B            .byte	$1B
06849 1847                        1B            .byte	$1B
06850 1848                        1B            .byte	$1B
06851 1849                        1B            .byte	$1B
06852 184A                        00            .byte	0
06853 184B                        00            .byte	0
06854 184C                        00            .byte	0
06855                                           ! 982  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
06856 184D                        00            .byte	0
06857 184E                        7C            .byte	$7C
06858 184F                        C6            .byte	$C6
06859 1850                        60            .byte	$60
06860 1851                        38            .byte	$38
06861 1852                        6C            .byte	$6C
06862 1853                        C6            .byte	$C6
06863 1854                        C6            .byte	$C6
06864 1855                        6C            .byte	$6C
06865 1856                        38            .byte	$38
06866 1857                        0C            .byte	$C
06867 1858                        C6            .byte	$C6
06868 1859                        7C            .byte	$7C
06869 185A                        00            .byte	0
06870                                           ! 983  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
06871 185B                        00            .byte	0
06872 185C                        00            .byte	0
06873 185D                        00            .byte	0
06874 185E                        00            .byte	0
06875 185F                        00            .byte	0
06876 1860                        00            .byte	0
06877 1861                        00            .byte	0
06878 1862                        00            .byte	0
06879 1863                        FE            .byte	$FE
06880 1864                        FE            .byte	$FE
06881 1865                        FE            .byte	$FE
06882 1866                        00            .byte	0
06883 1867                        00            .byte	0
06884 1868                        00            .byte	0
06885                                           ! 984  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
06886 1869                        00            .byte	0
06887 186A                        00            .byte	0
06888 186B                        18            .byte	$18
06889 186C                        3C            .byte	$3C
06890 186D                        7E            .byte	$7E
06891 186E                        18            .byte	$18
06892 186F                        18            .byte	$18
06893 1870                        18            .byte	$18
06894 1871                        7E            .byte	$7E
06895 1872                        3C            .byte	$3C
06896 1873                        18            .byte	$18
06897 1874                        7E            .byte	$7E
06898 1875                        00            .byte	0
06899 1876                        00            .byte	0
06900                                           ! 985  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
06901 1877                        00            .byte	0
06902 1878                        00            .byte	0
06903 1879                        18            .byte	$18
06904 187A                        3C            .byte	$3C
06905 187B                        7E            .byte	$7E
06906 187C                        18            .byte	$18
06907 187D                        18            .byte	$18
06908 187E                        18            .byte	$18
06909 187F                        18            .byte	$18
06910 1880                        18            .byte	$18
06911 1881                        18            .byte	$18
06912 1882                        00            .byte	0
06913 1883                        00            .byte	0
06914 1884                        00            .byte	0
06915                                           ! 986  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06916 1885                        00            .byte	0
06917 1886                        00            .byte	0
06918 1887                        18            .byte	$18
06919 1888                        18            .byte	$18
06920 1889                        18            .byte	$18
06921 188A                        18            .byte	$18
06922 188B                        18            .byte	$18
06923 188C                        18            .byte	$18
06924 188D                        7E            .byte	$7E
06925 188E                        3C            .byte	$3C
06926 188F                        18            .byte	$18
06927 1890                        00            .byte	0
06928 1891                        00            .byte	0
06929 1892                        00            .byte	0
06930                                           ! 987  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06931 1893                        00            .byte	0
06932 1894                        00            .byte	0
06933 1895                        00            .byte	0
06934 1896                        00            .byte	0
06935 1897                        18            .byte	$18
06936 1898                        0C            .byte	$C
06937 1899                        FE            .byte	$FE
06938 189A                        0C            .byte	$C
06939 189B                        18            .byte	$18
06940 189C                        00            .byte	0
06941 189D                        00            .byte	0
06942 189E                        00            .byte	0
06943 189F                        00            .byte	0
06944 18A0                        00            .byte	0
06945                                           ! 988  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
06946 18A1                        00            .byte	0
06947 18A2                        00            .byte	0
06948 18A3                        00            .byte	0
06949 18A4                        00            .byte	0
06950 18A5                        30            .byte	$30
06951 18A6                        60            .byte	$60
06952 18A7                        FE            .byte	$FE
06953 18A8                        60            .byte	$60
06954 18A9                        30            .byte	$30
06955 18AA                        00            .byte	0
06956 18AB                        00            .byte	0
06957 18AC                        00            .byte	0
06958 18AD                        00            .byte	0
06959 18AE                        00            .byte	0
06960                                           ! 989  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x
06961 18AF                        00            .byte	0
06962 18B0                        00            .byte	0
06963 18B1                        00            .byte	0
06964 18B2                        00            .byte	0
06965 18B3                        00            .byte	0
06966 18B4                        C0            .byte	$C0
06967 18B5                        C0            .byte	$C0
06968 18B6                        C0            .byte	$C0
06969 18B7                        FE            .byte	$FE
06970                                           ! 989 00, 0x00, 0x00, 0x00, 0x00,
06971 18B8                        00            .byte	0
06972 18B9                        00            .byte	0
06973 18BA                        00            .byte	0
06974 18BB                        00            .byte	0
06975 18BC                        00            .byte	0
06976                                           ! 990  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
06977 18BD                        00            .byte	0
06978 18BE                        00            .byte	0
06979 18BF                        00            .byte	0
06980 18C0                        00            .byte	0
06981 18C1                        28            .byte	$28
06982 18C2                        6C            .byte	$6C
06983 18C3                        FE            .byte	$FE
06984 18C4                        6C            .byte	$6C
06985 18C5                        28            .byte	$28
06986 18C6                        00            .byte	0
06987 18C7                        00            .byte	0
06988 18C8                        00            .byte	0
06989 18C9                        00            .byte	0
06990 18CA                        00            .byte	0
06991                                           ! 991  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
06992 18CB                        00            .byte	0
06993 18CC                        00            .byte	0
06994 18CD                        00            .byte	0
06995 18CE                        10            .byte	$10
06996 18CF                        38            .byte	$38
06997 18D0                        38            .byte	$38
06998 18D1                        7C            .byte	$7C
06999 18D2                        7C            .byte	$7C
07000 18D3                        FE            .byte	$FE
07001 18D4                        FE            .byte	$FE
07002 18D5                        00            .byte	0
07003 18D6                        00            .byte	0
07004 18D7                        00            .byte	0
07005 18D8                        00            .byte	0
07006                                           ! 992  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07007 18D9                        00            .byte	0
07008 18DA                        00            .byte	0
07009 18DB                        00            .byte	0
07010 18DC                        FE            .byte	$FE
07011 18DD                        FE            .byte	$FE
07012 18DE                        7C            .byte	$7C
07013 18DF                        7C            .byte	$7C
07014 18E0                        38            .byte	$38
07015 18E1                        38            .byte	$38
07016 18E2                        10            .byte	$10
07017 18E3                        00            .byte	0
07018 18E4                        00            .byte	0
07019 18E5                        00            .byte	0
07020 18E6                        00            .byte	0
07021                                           ! 993  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07022 18E7                        00            .byte	0
07023 18E8                        00            .byte	0
07024 18E9                        00            .byte	0
07025 18EA                        00            .byte	0
07026 18EB                        00            .byte	0
07027 18EC                        00            .byte	0
07028 18ED                        00            .byte	0
07029 18EE                        00            .byte	0
07030 18EF                        00            .byte	0
07031 18F0                        00            .byte	0
07032 18F1                        00            .byte	0
07033 18F2                        00            .byte	0
07034 18F3                        00            .byte	0
07035 18F4                        00            .byte	0
07036                                           ! 994  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07037 18F5                        00            .byte	0
07038 18F6                        00            .byte	0
07039 18F7                        18            .byte	$18
07040 18F8                        3C            .byte	$3C
07041 18F9                        3C            .byte	$3C
07042 18FA                        3C            .byte	$3C
07043 18FB                        18            .byte	$18
07044 18FC                        18            .byte	$18
07045 18FD                        00            .byte	0
07046 18FE                        18            .byte	$18
07047 18FF                        18            .byte	$18
07048 1900                        00            .byte	0
07049 1901                        00            .byte	0
07050 1902                        00            .byte	0
07051                                           ! 995  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07052 1903                        00            .byte	0
07053 1904                        66            .byte	$66
07054 1905                        66            .byte	$66
07055 1906                        66            .byte	$66
07056 1907                        24            .byte	$24
07057 1908                        00            .byte	0
07058 1909                        00            .byte	0
07059 190A                        00            .byte	0
07060 190B                        00            .byte	0
07061 190C                        00            .byte	0
07062 190D                        00            .byte	0
07063 190E                        00            .byte	0
07064 190F                        00            .byte	0
07065 1910                        00            .byte	0
07066                                           ! 996  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07067 1911                        00            .byte	0
07068 1912                        00            .byte	0
07069 1913                        6C            .byte	$6C
07070 1914                        6C            .byte	$6C
07071 1915                        FE            .byte	$FE
07072 1916                        6C            .byte	$6C
07073 1917                        6C            .byte	$6C
07074 1918                        6C            .byte	$6C
07075 1919                        FE            .byte	$FE
07076 191A                        6C            .byte	$6C
07077 191B                        6C            .byte	$6C
07078 191C                        00            .byte	0
07079 191D                        00            .byte	0
07080 191E                        00            .byte	0
07081                                           ! 997  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07082 191F                        18            .byte	$18
07083 1920                        18            .byte	$18
07084 1921                        7C            .byte	$7C
07085 1922                        C6            .byte	$C6
07086 1923                        C2            .byte	$C2
07087 1924                        C0            .byte	$C0
07088 1925                        7C            .byte	$7C
07089 1926                        06            .byte	6
07090 1927                        86            .byte	$86
07091 1928                        C6            .byte	$C6
07092 1929                        7C            .byte	$7C
07093 192A                        18            .byte	$18
07094 192B                        18            .byte	$18
07095 192C                        00            .byte	0
07096                                           ! 998  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07097 192D                        00            .byte	0
07098 192E                        00            .byte	0
07099 192F                        00            .byte	0
07100 1930                        00            .byte	0
07101 1931                        C2            .byte	$C2
07102 1932                        C6            .byte	$C6
07103 1933                        0C            .byte	$C
07104 1934                        18            .byte	$18
07105 1935                        30            .byte	$30
07106 1936                        66            .byte	$66
07107 1937                        C6            .byte	$C6
07108 1938                        00            .byte	0
07109 1939                        00            .byte	0
07110 193A                        00            .byte	0
07111                                           ! 999  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07112 193B                        00            .byte	0
07113 193C                        00            .byte	0
07114 193D                        38            .byte	$38
07115 193E                        6C            .byte	$6C
07116 193F                        6C            .byte	$6C
07117 1940                        38            .byte	$38
07118 1941                        76            .byte	$76
07119 1942                        DC            .byte	$DC
07120 1943                        CC            .byte	$CC
07121 1944                        CC            .byte	$CC
07122 1945                        76            .byte	$76
07123 1946                        00            .byte	0
07124 1947                        00            .byte	0
07125 1948                        00            .byte	0
07126                                           ! 1000  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07127 1949                        00            .byte	0
07128 194A                        30            .byte	$30
07129 194B                        30            .byte	$30
07130 194C                        30            .byte	$30
07131 194D                        60            .byte	$60
07132 194E                        00            .byte	0
07133 194F                        00            .byte	0
07134 1950                        00            .byte	0
07135 1951                        00            .byte	0
07136 1952                        00            .byte	0
07137 1953                        00            .byte	0
07138 1954                        00            .byte	0
07139 1955                        00            .byte	0
07140 1956                        00            .byte	0
07141                                           ! 1001  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07142 1957                        00            .byte	0
07143 1958                        00            .byte	0
07144 1959                        0C            .byte	$C
07145 195A                        18            .byte	$18
07146 195B                        30            .byte	$30
07147 195C                        30            .byte	$30
07148 195D                        30            .byte	$30
07149 195E                        30            .byte	$30
07150 195F                        30            .byte	$30
07151 1960                        18            .byte	$18
07152 1961                        0C            .byte	$C
07153 1962                        00            .byte	0
07154 1963                        00            .byte	0
07155 1964                        00            .byte	0
07156                                           ! 1002  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07157 1965                        00            .byte	0
07158 1966                        00            .byte	0
07159 1967                        30            .byte	$30
07160 1968                        18            .byte	$18
07161 1969                        0C            .byte	$C
07162 196A                        0C            .byte	$C
07163 196B                        0C            .byte	$C
07164 196C                        0C            .byte	$C
07165 196D                        0C            .byte	$C
07166 196E                        18            .byte	$18
07167 196F                        30            .byte	$30
07168 1970                        00            .byte	0
07169 1971                        00            .byte	0
07170 1972                        00            .byte	0
07171                                           ! 1003  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07172 1973                        00            .byte	0
07173 1974                        00            .byte	0
07174 1975                        00            .byte	0
07175 1976                        00            .byte	0
07176 1977                        66            .byte	$66
07177 1978                        3C            .byte	$3C
07178 1979                        FF            .byte	$FF
07179 197A                        3C            .byte	$3C
07180 197B                        66            .byte	$66
07181 197C                        00            .byte	0
07182 197D                        00            .byte	0
07183 197E                        00            .byte	0
07184 197F                        00            .byte	0
07185 1980                        00            .byte	0
07186                                           ! 1004  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07187 1981                        00            .byte	0
07188 1982                        00            .byte	0
07189 1983                        00            .byte	0
07190 1984                        00            .byte	0
07191 1985                        18            .byte	$18
07192 1986                        18            .byte	$18
07193 1987                        7E            .byte	$7E
07194 1988                        18            .byte	$18
07195 1989                        18            .byte	$18
07196 198A                        00            .byte	0
07197 198B                        00            .byte	0
07198 198C                        00            .byte	0
07199 198D                        00            .byte	0
07200 198E                        00            .byte	0
07201                                           ! 1005  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07202 198F                        00            .byte	0
07203 1990                        00            .byte	0
07204 1991                        00            .byte	0
07205 1992                        00            .byte	0
07206 1993                        00            .byte	0
07207 1994                        00            .byte	0
07208 1995                        00            .byte	0
07209 1996                        00            .byte	0
07210 1997                        18            .byte	$18
07211 1998                        18            .byte	$18
07212 1999                        18            .byte	$18
07213 199A                        30            .byte	$30
07214 199B                        00            .byte	0
07215 199C                        00            .byte	0
07216                                           ! 1006  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07217 199D                        00            .byte	0
07218 199E                        00            .byte	0
07219 199F                        00            .byte	0
07220 19A0                        00            .byte	0
07221 19A1                        00            .byte	0
07222 19A2                        00            .byte	0
07223 19A3                        FE            .byte	$FE
07224 19A4                        00            .byte	0
07225 19A5                        00            .byte	0
07226 19A6                        00            .byte	0
07227 19A7                        00            .byte	0
07228 19A8                        00            .byte	0
07229 19A9                        00            .byte	0
07230 19AA                        00            .byte	0
07231                                           ! 1007  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07232 19AB                        00            .byte	0
07233 19AC                        00            .byte	0
07234 19AD                        00            .byte	0
07235 19AE                        00            .byte	0
07236 19AF                        00            .byte	0
07237 19B0                        00            .byte	0
07238 19B1                        00            .byte	0
07239 19B2                        00            .byte	0
07240 19B3                        00            .byte	0
07241 19B4                        18            .byte	$18
07242 19B5                        18            .byte	$18
07243 19B6                        00            .byte	0
07244 19B7                        00            .byte	0
07245 19B8                        00            .byte	0
07246                                           ! 1008  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07247 19B9                        00            .byte	0
07248 19BA                        00            .byte	0
07249 19BB                        02            .byte	2
07250 19BC                        06            .byte	6
07251 19BD                        0C            .byte	$C
07252 19BE                        18            .byte	$18
07253 19BF                        30            .byte	$30
07254 19C0                        60            .byte	$60
07255 19C1                        C0            .byte	$C0
07256 19C2                        80            .byte	$80
07257 19C3                        00            .byte	0
07258 19C4                        00            .byte	0
07259 19C5                        00            .byte	0
07260 19C6                        00            .byte	0
07261                                           ! 1009  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07262 19C7                        00            .byte	0
07263 19C8                        00            .byte	0
07264 19C9                        7C            .byte	$7C
07265 19CA                        C6            .byte	$C6
07266 19CB                        CE            .byte	$CE
07267 19CC                        DE            .byte	$DE
07268 19CD                        F6            .byte	$F6
07269 19CE                        E6            .byte	$E6
07270 19CF                        C6            .byte	$C6
07271 19D0                        C6            .byte	$C6
07272 19D1                        7C            .byte	$7C
07273 19D2                        00            .byte	0
07274 19D3                        00            .byte	0
07275 19D4                        00            .byte	0
07276                                           ! 1010  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07277 19D5                        00            .byte	0
07278 19D6                        00            .byte	0
07279 19D7                        18            .byte	$18
07280 19D8                        38            .byte	$38
07281 19D9                        78            .byte	$78
07282 19DA                        18            .byte	$18
07283 19DB                        18            .byte	$18
07284 19DC                        18            .byte	$18
07285 19DD                        18            .byte	$18
07286 19DE                        18            .byte	$18
07287 19DF                        7E            .byte	$7E
07288 19E0                        00            .byte	0
07289 19E1                        00            .byte	0
07290 19E2                        00            .byte	0
07291                                           ! 1011  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07292 19E3                        00            .byte	0
07293 19E4                        00            .byte	0
07294 19E5                        7C            .byte	$7C
07295 19E6                        C6            .byte	$C6
07296 19E7                        06            .byte	6
07297 19E8                        0C            .byte	$C
07298 19E9                        18            .byte	$18
07299 19EA                        30            .byte	$30
07300 19EB                        60            .byte	$60
07301 19EC                        C6            .byte	$C6
07302 19ED                        FE            .byte	$FE
07303 19EE                        00            .byte	0
07304 19EF                        00            .byte	0
07305 19F0                        00            .byte	0
07306                                           ! 1012  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07307 19F1                        00            .byte	0
07308 19F2                        00            .byte	0
07309 19F3                        7C            .byte	$7C
07310 19F4                        C6            .byte	$C6
07311 19F5                        06            .byte	6
07312 19F6                        06            .byte	6
07313 19F7                        3C            .byte	$3C
07314 19F8                        06            .byte	6
07315 19F9                        06            .byte	6
07316 19FA                        C6            .byte	$C6
07317 19FB                        7C            .byte	$7C
07318 19FC                        00            .byte	0
07319 19FD                        00            .byte	0
07320 19FE                        00            .byte	0
07321                                           ! 1013  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e
07322 19FF                        00            .byte	0
07323 1A00                        00            .byte	0
07324 1A01                        0C            .byte	$C
07325 1A02                        1C            .byte	$1C
07326 1A03                        3C            .byte	$3C
07327 1A04                        6C            .byte	$6C
07328 1A05                        CC            .byte	$CC
07329 1A06                        FE            .byte	$FE
07330 1A07                        0C            .byte	$C
07331 1A08                        0C            .byte	$C
07332                                           ! 1013 , 0x00, 0x00, 0x00,
07333 1A09                        1E            .byte	$1E
07334 1A0A                        00            .byte	0
07335 1A0B                        00            .byte	0
07336 1A0C                        00            .byte	0
07337                                           ! 1014  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07338 1A0D                        00            .byte	0
07339 1A0E                        00            .byte	0
07340 1A0F                        FE            .byte	$FE
07341 1A10                        C0            .byte	$C0
07342 1A11                        C0            .byte	$C0
07343 1A12                        C0            .byte	$C0
07344 1A13                        FC            .byte	$FC
07345 1A14                        06            .byte	6
07346 1A15                        06            .byte	6
07347 1A16                        C6            .byte	$C6
07348 1A17                        7C            .byte	$7C
07349 1A18                        00            .byte	0
07350 1A19                        00            .byte	0
07351 1A1A                        00            .byte	0
07352                                           ! 1015  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07353 1A1B                        00            .byte	0
07354 1A1C                        00            .byte	0
07355 1A1D                        38            .byte	$38
07356 1A1E                        60            .byte	$60
07357 1A1F                        C0            .byte	$C0
07358 1A20                        C0            .byte	$C0
07359 1A21                        FC            .byte	$FC
07360 1A22                        C6            .byte	$C6
07361 1A23                        C6            .byte	$C6
07362 1A24                        C6            .byte	$C6
07363 1A25                        7C            .byte	$7C
07364 1A26                        00            .byte	0
07365 1A27                        00            .byte	0
07366 1A28                        00            .byte	0
07367                                           ! 1016  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07368 1A29                        00            .byte	0
07369 1A2A                        00            .byte	0
07370 1A2B                        FE            .byte	$FE
07371 1A2C                        C6            .byte	$C6
07372 1A2D                        06            .byte	6
07373 1A2E                        0C            .byte	$C
07374 1A2F                        18            .byte	$18
07375 1A30                        30            .byte	$30
07376 1A31                        30            .byte	$30
07377 1A32                        30            .byte	$30
07378 1A33                        30            .byte	$30
07379 1A34                        00            .byte	0
07380 1A35                        00            .byte	0
07381 1A36                        00            .byte	0
07382                                           ! 1017  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07383 1A37                        00            .byte	0
07384 1A38                        00            .byte	0
07385 1A39                        7C            .byte	$7C
07386 1A3A                        C6            .byte	$C6
07387 1A3B                        C6            .byte	$C6
07388 1A3C                        C6            .byte	$C6
07389 1A3D                        7C            .byte	$7C
07390 1A3E                        C6            .byte	$C6
07391 1A3F                        C6            .byte	$C6
07392 1A40                        C6            .byte	$C6
07393 1A41                        7C            .byte	$7C
07394 1A42                        00            .byte	0
07395 1A43                        00            .byte	0
07396 1A44                        00            .byte	0
07397                                           ! 1018  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07398 1A45                        00            .byte	0
07399 1A46                        00            .byte	0
07400 1A47                        7C            .byte	$7C
07401 1A48                        C6            .byte	$C6
07402 1A49                        C6            .byte	$C6
07403 1A4A                        C6            .byte	$C6
07404 1A4B                        7E            .byte	$7E
07405 1A4C                        06            .byte	6
07406 1A4D                        06            .byte	6
07407 1A4E                        0C            .byte	$C
07408 1A4F                        78            .byte	$78
07409 1A50                        00            .byte	0
07410 1A51                        00            .byte	0
07411 1A52                        00            .byte	0
07412                                           ! 1019  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07413 1A53                        00            .byte	0
07414 1A54                        00            .byte	0
07415 1A55                        00            .byte	0
07416 1A56                        18            .byte	$18
07417 1A57                        18            .byte	$18
07418 1A58                        00            .byte	0
07419 1A59                        00            .byte	0
07420 1A5A                        00            .byte	0
07421 1A5B                        18            .byte	$18
07422 1A5C                        18            .byte	$18
07423 1A5D                        00            .byte	0
07424 1A5E                        00            .byte	0
07425 1A5F                        00            .byte	0
07426 1A60                        00            .byte	0
07427                                           ! 1020  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07428 1A61                        00            .byte	0
07429 1A62                        00            .byte	0
07430 1A63                        00            .byte	0
07431 1A64                        18            .byte	$18
07432 1A65                        18            .byte	$18
07433 1A66                        00            .byte	0
07434 1A67                        00            .byte	0
07435 1A68                        00            .byte	0
07436 1A69                        18            .byte	$18
07437 1A6A                        18            .byte	$18
07438 1A6B                        30            .byte	$30
07439 1A6C                        00            .byte	0
07440 1A6D                        00            .byte	0
07441 1A6E                        00            .byte	0
07442                                           ! 1021  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07443 1A6F                        00            .byte	0
07444 1A70                        00            .byte	0
07445 1A71                        06            .byte	6
07446 1A72                        0C            .byte	$C
07447 1A73                        18            .byte	$18
07448 1A74                        30            .byte	$30
07449 1A75                        60            .byte	$60
07450 1A76                        30            .byte	$30
07451 1A77                        18            .byte	$18
07452 1A78                        0C            .byte	$C
07453 1A79                        06            .byte	6
07454 1A7A                        00            .byte	0
07455 1A7B                        00            .byte	0
07456 1A7C                        00            .byte	0
07457                                           ! 1022  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07458 1A7D                        00            .byte	0
07459 1A7E                        00            .byte	0
07460 1A7F                        00            .byte	0
07461 1A80                        00            .byte	0
07462 1A81                        00            .byte	0
07463 1A82                        7E            .byte	$7E
07464 1A83                        00            .byte	0
07465 1A84                        00            .byte	0
07466 1A85                        7E            .byte	$7E
07467 1A86                        00            .byte	0
07468 1A87                        00            .byte	0
07469 1A88                        00            .byte	0
07470 1A89                        00            .byte	0
07471 1A8A                        00            .byte	0
07472                                           ! 1023  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07473 1A8B                        00            .byte	0
07474 1A8C                        00            .byte	0
07475 1A8D                        60            .byte	$60
07476 1A8E                        30            .byte	$30
07477 1A8F                        18            .byte	$18
07478 1A90                        0C            .byte	$C
07479 1A91                        06            .byte	6
07480 1A92                        0C            .byte	$C
07481 1A93                        18            .byte	$18
07482 1A94                        30            .byte	$30
07483 1A95                        60            .byte	$60
07484 1A96                        00            .byte	0
07485 1A97                        00            .byte	0
07486 1A98                        00            .byte	0
07487                                           ! 1024  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07488 1A99                        00            .byte	0
07489 1A9A                        00            .byte	0
07490 1A9B                        7C            .byte	$7C
07491 1A9C                        C6            .byte	$C6
07492 1A9D                        C6            .byte	$C6
07493 1A9E                        0C            .byte	$C
07494 1A9F                        18            .byte	$18
07495 1AA0                        18            .byte	$18
07496 1AA1                        00            .byte	0
07497 1AA2                        18            .byte	$18
07498 1AA3                        18            .byte	$18
07499 1AA4                        00            .byte	0
07500 1AA5                        00            .byte	0
07501 1AA6                        00            .byte	0
07502                                           ! 1025  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07503 1AA7                        00            .byte	0
07504 1AA8                        00            .byte	0
07505 1AA9                        7C            .byte	$7C
07506 1AAA                        C6            .byte	$C6
07507 1AAB                        C6            .byte	$C6
07508 1AAC                        DE            .byte	$DE
07509 1AAD                        DE            .byte	$DE
07510 1AAE                        DE            .byte	$DE
07511 1AAF                        DC            .byte	$DC
07512 1AB0                        C0            .byte	$C0
07513 1AB1                        7C            .byte	$7C
07514 1AB2                        00            .byte	0
07515 1AB3                        00            .byte	0
07516 1AB4                        00            .byte	0
07517                                           ! 1026  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07518 1AB5                        00            .byte	0
07519 1AB6                        00            .byte	0
07520 1AB7                        10            .byte	$10
07521 1AB8                        38            .byte	$38
07522 1AB9                        6C            .byte	$6C
07523 1ABA                        C6            .byte	$C6
07524 1ABB                        C6            .byte	$C6
07525 1ABC                        FE            .byte	$FE
07526 1ABD                        C6            .byte	$C6
07527 1ABE                        C6            .byte	$C6
07528 1ABF                        C6            .byte	$C6
07529 1AC0                        00            .byte	0
07530 1AC1                        00            .byte	0
07531 1AC2                        00            .byte	0
07532                                           ! 1027  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07533 1AC3                        00            .byte	0
07534 1AC4                        00            .byte	0
07535 1AC5                        FC            .byte	$FC
07536 1AC6                        66            .byte	$66
07537 1AC7                        66            .byte	$66
07538 1AC8                        66            .byte	$66
07539 1AC9                        7C            .byte	$7C
07540 1ACA                        66            .byte	$66
07541 1ACB                        66            .byte	$66
07542 1ACC                        66            .byte	$66
07543 1ACD                        FC            .byte	$FC
07544 1ACE                        00            .byte	0
07545 1ACF                        00            .byte	0
07546 1AD0                        00            .byte	0
07547                                           ! 1028  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07548 1AD1                        00            .byte	0
07549 1AD2                        00            .byte	0
07550 1AD3                        3C            .byte	$3C
07551 1AD4                        66            .byte	$66
07552 1AD5                        C2            .byte	$C2
07553 1AD6                        C0            .byte	$C0
07554 1AD7                        C0            .byte	$C0
07555 1AD8                        C0            .byte	$C0
07556 1AD9                        C2            .byte	$C2
07557 1ADA                        66            .byte	$66
07558 1ADB                        3C            .byte	$3C
07559 1ADC                        00            .byte	0
07560 1ADD                        00            .byte	0
07561 1ADE                        00            .byte	0
07562                                           ! 1029  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07563 1ADF                        00            .byte	0
07564 1AE0                        00            .byte	0
07565 1AE1                        F8            .byte	$F8
07566 1AE2                        6C            .byte	$6C
07567 1AE3                        66            .byte	$66
07568 1AE4                        66            .byte	$66
07569 1AE5                        66            .byte	$66
07570 1AE6                        66            .byte	$66
07571 1AE7                        66            .byte	$66
07572 1AE8                        6C            .byte	$6C
07573 1AE9                        F8            .byte	$F8
07574 1AEA                        00            .byte	0
07575 1AEB                        00            .byte	0
07576 1AEC                        00            .byte	0
07577                                           ! 1030  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07578 1AED                        00            .byte	0
07579 1AEE                        00            .byte	0
07580 1AEF                        FE            .byte	$FE
07581 1AF0                        66            .byte	$66
07582 1AF1                        62            .byte	$62
07583 1AF2                        68            .byte	$68
07584 1AF3                        78            .byte	$78
07585 1AF4                        68            .byte	$68
07586 1AF5                        62            .byte	$62
07587 1AF6                        66            .byte	$66
07588 1AF7                        FE            .byte	$FE
07589 1AF8                        00            .byte	0
07590 1AF9                        00            .byte	0
07591 1AFA                        00            .byte	0
07592                                           ! 1031  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07593 1AFB                        00            .byte	0
07594 1AFC                        00            .byte	0
07595 1AFD                        FE            .byte	$FE
07596 1AFE                        66            .byte	$66
07597 1AFF                        62            .byte	$62
07598 1B00                        68            .byte	$68
07599 1B01                        78            .byte	$78
07600 1B02                        68            .byte	$68
07601 1B03                        60            .byte	$60
07602 1B04                        60            .byte	$60
07603 1B05                        F0            .byte	$F0
07604 1B06                        00            .byte	0
07605 1B07                        00            .byte	0
07606 1B08                        00            .byte	0
07607                                           ! 1032  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07608 1B09                        00            .byte	0
07609 1B0A                        00            .byte	0
07610 1B0B                        3C            .byte	$3C
07611 1B0C                        66            .byte	$66
07612 1B0D                        C2            .byte	$C2
07613 1B0E                        C0            .byte	$C0
07614 1B0F                        C0            .byte	$C0
07615 1B10                        DE            .byte	$DE
07616 1B11                        C6            .byte	$C6
07617 1B12                        66            .byte	$66
07618 1B13                        3A            .byte	$3A
07619 1B14                        00            .byte	0
07620 1B15                        00            .byte	0
07621 1B16                        00            .byte	0
07622                                           ! 1033  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07623 1B17                        00            .byte	0
07624 1B18                        00            .byte	0
07625 1B19                        C6            .byte	$C6
07626 1B1A                        C6            .byte	$C6
07627 1B1B                        C6            .byte	$C6
07628 1B1C                        C6            .byte	$C6
07629 1B1D                        FE            .byte	$FE
07630 1B1E                        C6            .byte	$C6
07631 1B1F                        C6            .byte	$C6
07632 1B20                        C6            .byte	$C6
07633 1B21                        C6            .byte	$C6
07634 1B22                        00            .byte	0
07635 1B23                        00            .byte	0
07636 1B24                        00            .byte	0
07637                                           ! 1034  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07638 1B25                        00            .byte	0
07639 1B26                        00            .byte	0
07640 1B27                        3C            .byte	$3C
07641 1B28                        18            .byte	$18
07642 1B29                        18            .byte	$18
07643 1B2A                        18            .byte	$18
07644 1B2B                        18            .byte	$18
07645 1B2C                        18            .byte	$18
07646 1B2D                        18            .byte	$18
07647 1B2E                        18            .byte	$18
07648 1B2F                        3C            .byte	$3C
07649 1B30                        00            .byte	0
07650 1B31                        00            .byte	0
07651 1B32                        00            .byte	0
07652                                           ! 1035  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07653 1B33                        00            .byte	0
07654 1B34                        00            .byte	0
07655 1B35                        1E            .byte	$1E
07656 1B36                        0C            .byte	$C
07657 1B37                        0C            .byte	$C
07658 1B38                        0C            .byte	$C
07659 1B39                        0C            .byte	$C
07660 1B3A                        0C            .byte	$C
07661 1B3B                        CC            .byte	$CC
07662 1B3C                        CC            .byte	$CC
07663 1B3D                        78            .byte	$78
07664 1B3E                        00            .byte	0
07665 1B3F                        00            .byte	0
07666 1B40                        00            .byte	0
07667                                           ! 1036  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07668 1B41                        00            .byte	0
07669 1B42                        00            .byte	0
07670 1B43                        E6            .byte	$E6
07671 1B44                        66            .byte	$66
07672 1B45                        6C            .byte	$6C
07673 1B46                        6C            .byte	$6C
07674 1B47                        78            .byte	$78
07675 1B48                        6C            .byte	$6C
07676 1B49                        6C            .byte	$6C
07677 1B4A                        66            .byte	$66
07678 1B4B                        E6            .byte	$E6
07679 1B4C                        00            .byte	0
07680 1B4D                        00            .byte	0
07681 1B4E                        00            .byte	0
07682                                           ! 1037  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 
07683 1B4F                        00            .byte	0
07684 1B50                        00            .byte	0
07685 1B51                        F0            .byte	$F0
07686 1B52                        60            .byte	$60
07687 1B53                        60            .byte	$60
07688 1B54                        60            .byte	$60
07689 1B55                        60            .byte	$60
07690 1B56                        60            .byte	$60
07691 1B57                        62            .byte	$62
07692 1B58                        66            .byte	$66
07693 1B59                        FE            .byte	$FE
07694 1B5A                        00            .byte	0
07695                                           ! 1037 0x00, 0x00,
07696 1B5B                        00            .byte	0
07697 1B5C                        00            .byte	0
07698                                           ! 1038  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07699 1B5D                        00            .byte	0
07700 1B5E                        00            .byte	0
07701 1B5F                        C6            .byte	$C6
07702 1B60                        EE            .byte	$EE
07703 1B61                        FE            .byte	$FE
07704 1B62                        FE            .byte	$FE
07705 1B63                        D6            .byte	$D6
07706 1B64                        C6            .byte	$C6
07707 1B65                        C6            .byte	$C6
07708 1B66                        C6            .byte	$C6
07709 1B67                        C6            .byte	$C6
07710 1B68                        00            .byte	0
07711 1B69                        00            .byte	0
07712 1B6A                        00            .byte	0
07713                                           ! 1039  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07714 1B6B                        00            .byte	0
07715 1B6C                        00            .byte	0
07716 1B6D                        C6            .byte	$C6
07717 1B6E                        E6            .byte	$E6
07718 1B6F                        F6            .byte	$F6
07719 1B70                        FE            .byte	$FE
07720 1B71                        DE            .byte	$DE
07721 1B72                        CE            .byte	$CE
07722 1B73                        C6            .byte	$C6
07723 1B74                        C6            .byte	$C6
07724 1B75                        C6            .byte	$C6
07725 1B76                        00            .byte	0
07726 1B77                        00            .byte	0
07727 1B78                        00            .byte	0
07728                                           ! 1040  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
07729 1B79                        00            .byte	0
07730 1B7A                        00            .byte	0
07731 1B7B                        38            .byte	$38
07732 1B7C                        6C            .byte	$6C
07733 1B7D                        C6            .byte	$C6
07734 1B7E                        C6            .byte	$C6
07735 1B7F                        C6            .byte	$C6
07736 1B80                        C6            .byte	$C6
07737 1B81                        C6            .byte	$C6
07738 1B82                        6C            .byte	$6C
07739 1B83                        38            .byte	$38
07740 1B84                        00            .byte	0
07741 1B85                        00            .byte	0
07742 1B86                        00            .byte	0
07743                                           ! 1041  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07744 1B87                        00            .byte	0
07745 1B88                        00            .byte	0
07746 1B89                        FC            .byte	$FC
07747 1B8A                        66            .byte	$66
07748 1B8B                        66            .byte	$66
07749 1B8C                        66            .byte	$66
07750 1B8D                        7C            .byte	$7C
07751 1B8E                        60            .byte	$60
07752 1B8F                        60            .byte	$60
07753 1B90                        60            .byte	$60
07754 1B91                        F0            .byte	$F0
07755 1B92                        00            .byte	0
07756 1B93                        00            .byte	0
07757 1B94                        00            .byte	0
07758                                           ! 1042  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
07759 1B95                        00            .byte	0
07760 1B96                        00            .byte	0
07761 1B97                        7C            .byte	$7C
07762 1B98                        C6            .byte	$C6
07763 1B99                        C6            .byte	$C6
07764 1B9A                        C6            .byte	$C6
07765 1B9B                        C6            .byte	$C6
07766 1B9C                        D6            .byte	$D6
07767 1B9D                        DE            .byte	$DE
07768 1B9E                        7C            .byte	$7C
07769 1B9F                        0C            .byte	$C
07770 1BA0                        0E            .byte	$E
07771 1BA1                        00            .byte	0
07772 1BA2                        00            .byte	0
07773                                           ! 1043  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
07774 1BA3                        00            .byte	0
07775 1BA4                        00            .byte	0
07776 1BA5                        FC            .byte	$FC
07777 1BA6                        66            .byte	$66
07778 1BA7                        66            .byte	$66
07779 1BA8                        66            .byte	$66
07780 1BA9                        7C            .byte	$7C
07781 1BAA                        6C            .byte	$6C
07782 1BAB                        66            .byte	$66
07783 1BAC                        66            .byte	$66
07784 1BAD                        E6            .byte	$E6
07785 1BAE                        00            .byte	0
07786 1BAF                        00            .byte	0
07787 1BB0                        00            .byte	0
07788                                           ! 1044  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07789 1BB1                        00            .byte	0
07790 1BB2                        00            .byte	0
07791 1BB3                        7C            .byte	$7C
07792 1BB4                        C6            .byte	$C6
07793 1BB5                        C6            .byte	$C6
07794 1BB6                        60            .byte	$60
07795 1BB7                        38            .byte	$38
07796 1BB8                        0C            .byte	$C
07797 1BB9                        C6            .byte	$C6
07798 1BBA                        C6            .byte	$C6
07799 1BBB                        7C            .byte	$7C
07800 1BBC                        00            .byte	0
07801 1BBD                        00            .byte	0
07802 1BBE                        00            .byte	0
07803                                           ! 1045  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07804 1BBF                        00            .byte	0
07805 1BC0                        00            .byte	0
07806 1BC1                        7E            .byte	$7E
07807 1BC2                        7E            .byte	$7E
07808 1BC3                        5A            .byte	$5A
07809 1BC4                        18            .byte	$18
07810 1BC5                        18            .byte	$18
07811 1BC6                        18            .byte	$18
07812 1BC7                        18            .byte	$18
07813 1BC8                        18            .byte	$18
07814 1BC9                        3C            .byte	$3C
07815 1BCA                        00            .byte	0
07816 1BCB                        00            .byte	0
07817 1BCC                        00            .byte	0
07818                                           ! 1046  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07819 1BCD                        00            .byte	0
07820 1BCE                        00            .byte	0
07821 1BCF                        C6            .byte	$C6
07822 1BD0                        C6            .byte	$C6
07823 1BD1                        C6            .byte	$C6
07824 1BD2                        C6            .byte	$C6
07825 1BD3                        C6            .byte	$C6
07826 1BD4                        C6            .byte	$C6
07827 1BD5                        C6            .byte	$C6
07828 1BD6                        C6            .byte	$C6
07829 1BD7                        7C            .byte	$7C
07830 1BD8                        00            .byte	0
07831 1BD9                        00            .byte	0
07832 1BDA                        00            .byte	0
07833                                           ! 1047  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
07834 1BDB                        00            .byte	0
07835 1BDC                        00            .byte	0
07836 1BDD                        C6            .byte	$C6
07837 1BDE                        C6            .byte	$C6
07838 1BDF                        C6            .byte	$C6
07839 1BE0                        C6            .byte	$C6
07840 1BE1                        C6            .byte	$C6
07841 1BE2                        C6            .byte	$C6
07842 1BE3                        6C            .byte	$6C
07843 1BE4                        38            .byte	$38
07844 1BE5                        10            .byte	$10
07845 1BE6                        00            .byte	0
07846 1BE7                        00            .byte	0
07847 1BE8                        00            .byte	0
07848                                           ! 1048  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
07849 1BE9                        00            .byte	0
07850 1BEA                        00            .byte	0
07851 1BEB                        C6            .byte	$C6
07852 1BEC                        C6            .byte	$C6
07853 1BED                        C6            .byte	$C6
07854 1BEE                        C6            .byte	$C6
07855 1BEF                        D6            .byte	$D6
07856 1BF0                        D6            .byte	$D6
07857 1BF1                        FE            .byte	$FE
07858 1BF2                        7C            .byte	$7C
07859 1BF3                        6C            .byte	$6C
07860 1BF4                        00            .byte	0
07861 1BF5                        00            .byte	0
07862 1BF6                        00            .byte	0
07863                                           ! 1049  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07864 1BF7                        00            .byte	0
07865 1BF8                        00            .byte	0
07866 1BF9                        C6            .byte	$C6
07867 1BFA                        C6            .byte	$C6
07868 1BFB                        6C            .byte	$6C
07869 1BFC                        38            .byte	$38
07870 1BFD                        38            .byte	$38
07871 1BFE                        38            .byte	$38
07872 1BFF                        6C            .byte	$6C
07873 1C00                        C6            .byte	$C6
07874 1C01                        C6            .byte	$C6
07875 1C02                        00            .byte	0
07876 1C03                        00            .byte	0
07877 1C04                        00            .byte	0
07878                                           ! 1050  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07879 1C05                        00            .byte	0
07880 1C06                        00            .byte	0
07881 1C07                        66            .byte	$66
07882 1C08                        66            .byte	$66
07883 1C09                        66            .byte	$66
07884 1C0A                        66            .byte	$66
07885 1C0B                        3C            .byte	$3C
07886 1C0C                        18            .byte	$18
07887 1C0D                        18            .byte	$18
07888 1C0E                        18            .byte	$18
07889 1C0F                        3C            .byte	$3C
07890 1C10                        00            .byte	0
07891 1C11                        00            .byte	0
07892 1C12                        00            .byte	0
07893                                           ! 1051  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07894 1C13                        00            .byte	0
07895 1C14                        00            .byte	0
07896 1C15                        FE            .byte	$FE
07897 1C16                        C6            .byte	$C6
07898 1C17                        8C            .byte	$8C
07899 1C18                        18            .byte	$18
07900 1C19                        30            .byte	$30
07901 1C1A                        60            .byte	$60
07902 1C1B                        C2            .byte	$C2
07903 1C1C                        C6            .byte	$C6
07904 1C1D                        FE            .byte	$FE
07905 1C1E                        00            .byte	0
07906 1C1F                        00            .byte	0
07907 1C20                        00            .byte	0
07908                                           ! 1052  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
07909 1C21                        00            .byte	0
07910 1C22                        00            .byte	0
07911 1C23                        3C            .byte	$3C
07912 1C24                        30            .byte	$30
07913 1C25                        30            .byte	$30
07914 1C26                        30            .byte	$30
07915 1C27                        30            .byte	$30
07916 1C28                        30            .byte	$30
07917 1C29                        30            .byte	$30
07918 1C2A                        30            .byte	$30
07919 1C2B                        3C            .byte	$3C
07920 1C2C                        00            .byte	0
07921 1C2D                        00            .byte	0
07922 1C2E                        00            .byte	0
07923                                           ! 1053  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07924 1C2F                        00            .byte	0
07925 1C30                        00            .byte	0
07926 1C31                        80            .byte	$80
07927 1C32                        C0            .byte	$C0
07928 1C33                        E0            .byte	$E0
07929 1C34                        70            .byte	$70
07930 1C35                        38            .byte	$38
07931 1C36                        1C            .byte	$1C
07932 1C37                        0E            .byte	$E
07933 1C38                        06            .byte	6
07934 1C39                        02            .byte	2
07935 1C3A                        00            .byte	0
07936 1C3B                        00            .byte	0
07937 1C3C                        00            .byte	0
07938                                           ! 1054  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
07939 1C3D                        00            .byte	0
07940 1C3E                        00            .byte	0
07941 1C3F                        3C            .byte	$3C
07942 1C40                        0C            .byte	$C
07943 1C41                        0C            .byte	$C
07944 1C42                        0C            .byte	$C
07945 1C43                        0C            .byte	$C
07946 1C44                        0C            .byte	$C
07947 1C45                        0C            .byte	$C
07948 1C46                        0C            .byte	$C
07949 1C47                        3C            .byte	$3C
07950 1C48                        00            .byte	0
07951 1C49                        00            .byte	0
07952 1C4A                        00            .byte	0
07953                                           ! 1055  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07954 1C4B                        10            .byte	$10
07955 1C4C                        38            .byte	$38
07956 1C4D                        6C            .byte	$6C
07957 1C4E                        C6            .byte	$C6
07958 1C4F                        00            .byte	0
07959 1C50                        00            .byte	0
07960 1C51                        00            .byte	0
07961 1C52                        00            .byte	0
07962 1C53                        00            .byte	0
07963 1C54                        00            .byte	0
07964 1C55                        00            .byte	0
07965 1C56                        00            .byte	0
07966 1C57                        00            .byte	0
07967 1C58                        00            .byte	0
07968                                           ! 1056  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
07969 1C59                        00            .byte	0
07970 1C5A                        00            .byte	0
07971 1C5B                        00            .byte	0
07972 1C5C                        00            .byte	0
07973 1C5D                        00            .byte	0
07974 1C5E                        00            .byte	0
07975 1C5F                        00            .byte	0
07976 1C60                        00            .byte	0
07977 1C61                        00            .byte	0
07978 1C62                        00            .byte	0
07979 1C63                        00            .byte	0
07980 1C64                        00            .byte	0
07981 1C65                        FF            .byte	$FF
07982 1C66                        00            .byte	0
07983                                           ! 1057  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07984 1C67                        30            .byte	$30
07985 1C68                        30            .byte	$30
07986 1C69                        18            .byte	$18
07987 1C6A                        00            .byte	0
07988 1C6B                        00            .byte	0
07989 1C6C                        00            .byte	0
07990 1C6D                        00            .byte	0
07991 1C6E                        00            .byte	0
07992 1C6F                        00            .byte	0
07993 1C70                        00            .byte	0
07994 1C71                        00            .byte	0
07995 1C72                        00            .byte	0
07996 1C73                        00            .byte	0
07997 1C74                        00            .byte	0
07998                                           ! 1058  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07999 1C75                        00            .byte	0
08000 1C76                        00            .byte	0
08001 1C77                        00            .byte	0
08002 1C78                        00            .byte	0
08003 1C79                        00            .byte	0
08004 1C7A                        78            .byte	$78
08005 1C7B                        0C            .byte	$C
08006 1C7C                        7C            .byte	$7C
08007 1C7D                        CC            .byte	$CC
08008 1C7E                        CC            .byte	$CC
08009 1C7F                        76            .byte	$76
08010 1C80                        00            .byte	0
08011 1C81                        00            .byte	0
08012 1C82                        00            .byte	0
08013                                           ! 1059  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08014 1C83                        00            .byte	0
08015 1C84                        00            .byte	0
08016 1C85                        E0            .byte	$E0
08017 1C86                        60            .byte	$60
08018 1C87                        60            .byte	$60
08019 1C88                        78            .byte	$78
08020 1C89                        6C            .byte	$6C
08021 1C8A                        66            .byte	$66
08022 1C8B                        66            .byte	$66
08023 1C8C                        66            .byte	$66
08024 1C8D                        7C            .byte	$7C
08025 1C8E                        00            .byte	0
08026 1C8F                        00            .byte	0
08027 1C90                        00            .byte	0
08028                                           ! 1060  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08029 1C91                        00            .byte	0
08030 1C92                        00            .byte	0
08031 1C93                        00            .byte	0
08032 1C94                        00            .byte	0
08033 1C95                        00            .byte	0
08034 1C96                        7C            .byte	$7C
08035 1C97                        C6            .byte	$C6
08036 1C98                        C0            .byte	$C0
08037 1C99                        C0            .byte	$C0
08038 1C9A                        C6            .byte	$C6
08039 1C9B                        7C            .byte	$7C
08040 1C9C                        00            .byte	0
08041 1C9D                        00            .byte	0
08042 1C9E                        00            .byte	0
08043                                           ! 1061  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x
08044 1C9F                        00            .byte	0
08045 1CA0                        00            .byte	0
08046 1CA1                        1C            .byte	$1C
08047 1CA2                        0C            .byte	$C
08048 1CA3                        0C            .byte	$C
08049 1CA4                        3C            .byte	$3C
08050 1CA5                        6C            .byte	$6C
08051 1CA6                        CC            .byte	$CC
08052 1CA7                        CC            .byte	$CC
08053 1CA8                        CC            .byte	$CC
08054 1CA9                        76            .byte	$76
08055 1CAA                        00            .byte	0
08056 1CAB                        00            .byte	0
08057                                           ! 1061 00,
08058 1CAC                        00            .byte	0
08059                                           ! 1062  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08060 1CAD                        00            .byte	0
08061 1CAE                        00            .byte	0
08062 1CAF                        00            .byte	0
08063 1CB0                        00            .byte	0
08064 1CB1                        00            .byte	0
08065 1CB2                        7C            .byte	$7C
08066 1CB3                        C6            .byte	$C6
08067 1CB4                        FE            .byte	$FE
08068 1CB5                        C0            .byte	$C0
08069 1CB6                        C6            .byte	$C6
08070 1CB7                        7C            .byte	$7C
08071 1CB8                        00            .byte	0
08072 1CB9                        00            .byte	0
08073 1CBA                        00            .byte	0
08074                                           ! 1063  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08075 1CBB                        00            .byte	0
08076 1CBC                        00            .byte	0
08077 1CBD                        38            .byte	$38
08078 1CBE                        6C            .byte	$6C
08079 1CBF                        64            .byte	$64
08080 1CC0                        60            .byte	$60
08081 1CC1                        F0            .byte	$F0
08082 1CC2                        60            .byte	$60
08083 1CC3                        60            .byte	$60
08084 1CC4                        60            .byte	$60
08085 1CC5                        F0            .byte	$F0
08086 1CC6                        00            .byte	0
08087 1CC7                        00            .byte	0
08088 1CC8                        00            .byte	0
08089                                           ! 1064  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08090 1CC9                        00            .byte	0
08091 1CCA                        00            .byte	0
08092 1CCB                        00            .byte	0
08093 1CCC                        00            .byte	0
08094 1CCD                        00            .byte	0
08095 1CCE                        76            .byte	$76
08096 1CCF                        CC            .byte	$CC
08097 1CD0                        CC            .byte	$CC
08098 1CD1                        CC            .byte	$CC
08099 1CD2                        7C            .byte	$7C
08100 1CD3                        0C            .byte	$C
08101 1CD4                        CC            .byte	$CC
08102 1CD5                        78            .byte	$78
08103 1CD6                        00            .byte	0
08104                                           ! 1065  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08105 1CD7                        00            .byte	0
08106 1CD8                        00            .byte	0
08107 1CD9                        E0            .byte	$E0
08108 1CDA                        60            .byte	$60
08109 1CDB                        60            .byte	$60
08110 1CDC                        6C            .byte	$6C
08111 1CDD                        76            .byte	$76
08112 1CDE                        66            .byte	$66
08113 1CDF                        66            .byte	$66
08114 1CE0                        66            .byte	$66
08115 1CE1                        E6            .byte	$E6
08116 1CE2                        00            .byte	0
08117 1CE3                        00            .byte	0
08118 1CE4                        00            .byte	0
08119                                           ! 1066  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08120 1CE5                        00            .byte	0
08121 1CE6                        00            .byte	0
08122 1CE7                        18            .byte	$18
08123 1CE8                        18            .byte	$18
08124 1CE9                        00            .byte	0
08125 1CEA                        38            .byte	$38
08126 1CEB                        18            .byte	$18
08127 1CEC                        18            .byte	$18
08128 1CED                        18            .byte	$18
08129 1CEE                        18            .byte	$18
08130 1CEF                        3C            .byte	$3C
08131 1CF0                        00            .byte	0
08132 1CF1                        00            .byte	0
08133 1CF2                        00            .byte	0
08134                                           ! 1067  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08135 1CF3                        00            .byte	0
08136 1CF4                        00            .byte	0
08137 1CF5                        06            .byte	6
08138 1CF6                        06            .byte	6
08139 1CF7                        00            .byte	0
08140 1CF8                        0E            .byte	$E
08141 1CF9                        06            .byte	6
08142 1CFA                        06            .byte	6
08143 1CFB                        06            .byte	6
08144 1CFC                        06            .byte	6
08145 1CFD                        66            .byte	$66
08146 1CFE                        66            .byte	$66
08147 1CFF                        3C            .byte	$3C
08148 1D00                        00            .byte	0
08149                                           ! 1068  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08150 1D01                        00            .byte	0
08151 1D02                        00            .byte	0
08152 1D03                        E0            .byte	$E0
08153 1D04                        60            .byte	$60
08154 1D05                        60            .byte	$60
08155 1D06                        66            .byte	$66
08156 1D07                        6C            .byte	$6C
08157 1D08                        78            .byte	$78
08158 1D09                        6C            .byte	$6C
08159 1D0A                        66            .byte	$66
08160 1D0B                        E6            .byte	$E6
08161 1D0C                        00            .byte	0
08162 1D0D                        00            .byte	0
08163 1D0E                        00            .byte	0
08164                                           ! 1069  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08165 1D0F                        00            .byte	0
08166 1D10                        00            .byte	0
08167 1D11                        38            .byte	$38
08168 1D12                        18            .byte	$18
08169 1D13                        18            .byte	$18
08170 1D14                        18            .byte	$18
08171 1D15                        18            .byte	$18
08172 1D16                        18            .byte	$18
08173 1D17                        18            .byte	$18
08174 1D18                        18            .byte	$18
08175 1D19                        3C            .byte	$3C
08176 1D1A                        00            .byte	0
08177 1D1B                        00            .byte	0
08178 1D1C                        00            .byte	0
08179                                           ! 1070  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08180 1D1D                        00            .byte	0
08181 1D1E                        00            .byte	0
08182 1D1F                        00            .byte	0
08183 1D20                        00            .byte	0
08184 1D21                        00            .byte	0
08185 1D22                        EC            .byte	$EC
08186 1D23                        FE            .byte	$FE
08187 1D24                        D6            .byte	$D6
08188 1D25                        D6            .byte	$D6
08189 1D26                        D6            .byte	$D6
08190 1D27                        C6            .byte	$C6
08191 1D28                        00            .byte	0
08192 1D29                        00            .byte	0
08193 1D2A                        00            .byte	0
08194                                           ! 1071  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08195 1D2B                        00            .byte	0
08196 1D2C                        00            .byte	0
08197 1D2D                        00            .byte	0
08198 1D2E                        00            .byte	0
08199 1D2F                        00            .byte	0
08200 1D30                        DC            .byte	$DC
08201 1D31                        66            .byte	$66
08202 1D32                        66            .byte	$66
08203 1D33                        66            .byte	$66
08204 1D34                        66            .byte	$66
08205 1D35                        66            .byte	$66
08206 1D36                        00            .byte	0
08207 1D37                        00            .byte	0
08208 1D38                        00            .byte	0
08209                                           ! 1072  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08210 1D39                        00            .byte	0
08211 1D3A                        00            .byte	0
08212 1D3B                        00            .byte	0
08213 1D3C                        00            .byte	0
08214 1D3D                        00            .byte	0
08215 1D3E                        7C            .byte	$7C
08216 1D3F                        C6            .byte	$C6
08217 1D40                        C6            .byte	$C6
08218 1D41                        C6            .byte	$C6
08219 1D42                        C6            .byte	$C6
08220 1D43                        7C            .byte	$7C
08221 1D44                        00            .byte	0
08222 1D45                        00            .byte	0
08223 1D46                        00            .byte	0
08224                                           ! 1073  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08225 1D47                        00            .byte	0
08226 1D48                        00            .byte	0
08227 1D49                        00            .byte	0
08228 1D4A                        00            .byte	0
08229 1D4B                        00            .byte	0
08230 1D4C                        DC            .byte	$DC
08231 1D4D                        66            .byte	$66
08232 1D4E                        66            .byte	$66
08233 1D4F                        66            .byte	$66
08234 1D50                        7C            .byte	$7C
08235 1D51                        60            .byte	$60
08236 1D52                        60            .byte	$60
08237 1D53                        F0            .byte	$F0
08238 1D54                        00            .byte	0
08239                                           ! 1074  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08240 1D55                        00            .byte	0
08241 1D56                        00            .byte	0
08242 1D57                        00            .byte	0
08243 1D58                        00            .byte	0
08244 1D59                        00            .byte	0
08245 1D5A                        76            .byte	$76
08246 1D5B                        CC            .byte	$CC
08247 1D5C                        CC            .byte	$CC
08248 1D5D                        CC            .byte	$CC
08249 1D5E                        7C            .byte	$7C
08250 1D5F                        0C            .byte	$C
08251 1D60                        0C            .byte	$C
08252 1D61                        1E            .byte	$1E
08253 1D62                        00            .byte	0
08254                                           ! 1075  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08255 1D63                        00            .byte	0
08256 1D64                        00            .byte	0
08257 1D65                        00            .byte	0
08258 1D66                        00            .byte	0
08259 1D67                        00            .byte	0
08260 1D68                        DC            .byte	$DC
08261 1D69                        76            .byte	$76
08262 1D6A                        66            .byte	$66
08263 1D6B                        60            .byte	$60
08264 1D6C                        60            .byte	$60
08265 1D6D                        F0            .byte	$F0
08266 1D6E                        00            .byte	0
08267 1D6F                        00            .byte	0
08268 1D70                        00            .byte	0
08269                                           ! 1076  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08270 1D71                        00            .byte	0
08271 1D72                        00            .byte	0
08272 1D73                        00            .byte	0
08273 1D74                        00            .byte	0
08274 1D75                        00            .byte	0
08275 1D76                        7C            .byte	$7C
08276 1D77                        C6            .byte	$C6
08277 1D78                        70            .byte	$70
08278 1D79                        1C            .byte	$1C
08279 1D7A                        C6            .byte	$C6
08280 1D7B                        7C            .byte	$7C
08281 1D7C                        00            .byte	0
08282 1D7D                        00            .byte	0
08283 1D7E                        00            .byte	0
08284                                           ! 1077  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08285 1D7F                        00            .byte	0
08286 1D80                        00            .byte	0
08287 1D81                        10            .byte	$10
08288 1D82                        30            .byte	$30
08289 1D83                        30            .byte	$30
08290 1D84                        FC            .byte	$FC
08291 1D85                        30            .byte	$30
08292 1D86                        30            .byte	$30
08293 1D87                        30            .byte	$30
08294 1D88                        36            .byte	$36
08295 1D89                        1C            .byte	$1C
08296 1D8A                        00            .byte	0
08297 1D8B                        00            .byte	0
08298 1D8C                        00            .byte	0
08299                                           ! 1078  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08300 1D8D                        00            .byte	0
08301 1D8E                        00            .byte	0
08302 1D8F                        00            .byte	0
08303 1D90                        00            .byte	0
08304 1D91                        00            .byte	0
08305 1D92                        CC            .byte	$CC
08306 1D93                        CC            .byte	$CC
08307 1D94                        CC            .byte	$CC
08308 1D95                        CC            .byte	$CC
08309 1D96                        CC            .byte	$CC
08310 1D97                        76            .byte	$76
08311 1D98                        00            .byte	0
08312 1D99                        00            .byte	0
08313 1D9A                        00            .byte	0
08314                                           ! 1079  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08315 1D9B                        00            .byte	0
08316 1D9C                        00            .byte	0
08317 1D9D                        00            .byte	0
08318 1D9E                        00            .byte	0
08319 1D9F                        00            .byte	0
08320 1DA0                        66            .byte	$66
08321 1DA1                        66            .byte	$66
08322 1DA2                        66            .byte	$66
08323 1DA3                        66            .byte	$66
08324 1DA4                        3C            .byte	$3C
08325 1DA5                        18            .byte	$18
08326 1DA6                        00            .byte	0
08327 1DA7                        00            .byte	0
08328 1DA8                        00            .byte	0
08329                                           ! 1080  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08330 1DA9                        00            .byte	0
08331 1DAA                        00            .byte	0
08332 1DAB                        00            .byte	0
08333 1DAC                        00            .byte	0
08334 1DAD                        00            .byte	0
08335 1DAE                        C6            .byte	$C6
08336 1DAF                        C6            .byte	$C6
08337 1DB0                        D6            .byte	$D6
08338 1DB1                        D6            .byte	$D6
08339 1DB2                        FE            .byte	$FE
08340 1DB3                        6C            .byte	$6C
08341 1DB4                        00            .byte	0
08342 1DB5                        00            .byte	0
08343 1DB6                        00            .byte	0
08344                                           ! 1081  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08345 1DB7                        00            .byte	0
08346 1DB8                        00            .byte	0
08347 1DB9                        00            .byte	0
08348 1DBA                        00            .byte	0
08349 1DBB                        00            .byte	0
08350 1DBC                        C6            .byte	$C6
08351 1DBD                        6C            .byte	$6C
08352 1DBE                        38            .byte	$38
08353 1DBF                        38            .byte	$38
08354 1DC0                        6C            .byte	$6C
08355 1DC1                        C6            .byte	$C6
08356 1DC2                        00            .byte	0
08357 1DC3                        00            .byte	0
08358 1DC4                        00            .byte	0
08359                                           ! 1082  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08360 1DC5                        00            .byte	0
08361 1DC6                        00            .byte	0
08362 1DC7                        00            .byte	0
08363 1DC8                        00            .byte	0
08364 1DC9                        00            .byte	0
08365 1DCA                        C6            .byte	$C6
08366 1DCB                        C6            .byte	$C6
08367 1DCC                        C6            .byte	$C6
08368 1DCD                        C6            .byte	$C6
08369 1DCE                        7E            .byte	$7E
08370 1DCF                        06            .byte	6
08371 1DD0                        0C            .byte	$C
08372 1DD1                        F8            .byte	$F8
08373 1DD2                        00            .byte	0
08374                                           ! 1083  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08375 1DD3                        00            .byte	0
08376 1DD4                        00            .byte	0
08377 1DD5                        00            .byte	0
08378 1DD6                        00            .byte	0
08379 1DD7                        00            .byte	0
08380 1DD8                        FE            .byte	$FE
08381 1DD9                        CC            .byte	$CC
08382 1DDA                        18            .byte	$18
08383 1DDB                        30            .byte	$30
08384 1DDC                        66            .byte	$66
08385 1DDD                        FE            .byte	$FE
08386 1DDE                        00            .byte	0
08387 1DDF                        00            .byte	0
08388 1DE0                        00            .byte	0
08389                                           ! 1084  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08390 1DE1                        00            .byte	0
08391 1DE2                        00            .byte	0
08392 1DE3                        0E            .byte	$E
08393 1DE4                        18            .byte	$18
08394 1DE5                        18            .byte	$18
08395 1DE6                        18            .byte	$18
08396 1DE7                        70            .byte	$70
08397 1DE8                        18            .byte	$18
08398 1DE9                        18            .byte	$18
08399 1DEA                        18            .byte	$18
08400 1DEB                        0E            .byte	$E
08401 1DEC                        00            .byte	0
08402 1DED                        00            .byte	0
08403 1DEE                        00            .byte	0
08404                                           ! 1085  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08405 1DEF                        00            .byte	0
08406 1DF0                        00            .byte	0
08407 1DF1                        18            .byte	$18
08408 1DF2                        18            .byte	$18
08409 1DF3                        18            .byte	$18
08410 1DF4                        18            .byte	$18
08411 1DF5                        00            .byte	0
08412 1DF6                        18            .byte	$18
08413 1DF7                        18            .byte	$18
08414 1DF8                        18            .byte	$18
08415 1DF9                        18            .byte	$18
08416 1DFA                        00            .byte	0
08417 1DFB                        00            .byte	0
08418 1DFC                        00            .byte	0
08419                                           ! 1086  0x0
08420                                           ! 1086 0, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08421 1DFD                        00            .byte	0
08422 1DFE                        00            .byte	0
08423 1DFF                        70            .byte	$70
08424 1E00                        18            .byte	$18
08425 1E01                        18            .byte	$18
08426 1E02                        18            .byte	$18
08427 1E03                        0E            .byte	$E
08428 1E04                        18            .byte	$18
08429 1E05                        18            .byte	$18
08430 1E06                        18            .byte	$18
08431 1E07                        70            .byte	$70
08432 1E08                        00            .byte	0
08433 1E09                        00            .byte	0
08434 1E0A                        00            .byte	0
08435                                           ! 1087  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08436 1E0B                        00            .byte	0
08437 1E0C                        00            .byte	0
08438 1E0D                        76            .byte	$76
08439 1E0E                        DC            .byte	$DC
08440 1E0F                        00            .byte	0
08441 1E10                        00            .byte	0
08442 1E11                        00            .byte	0
08443 1E12                        00            .byte	0
08444 1E13                        00            .byte	0
08445 1E14                        00            .byte	0
08446 1E15                        00            .byte	0
08447 1E16                        00            .byte	0
08448 1E17                        00            .byte	0
08449 1E18                        00            .byte	0
08450                                           ! 1088  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08451 1E19                        00            .byte	0
08452 1E1A                        00            .byte	0
08453 1E1B                        00            .byte	0
08454 1E1C                        00            .byte	0
08455 1E1D                        10            .byte	$10
08456 1E1E                        38            .byte	$38
08457 1E1F                        6C            .byte	$6C
08458 1E20                        C6            .byte	$C6
08459 1E21                        C6            .byte	$C6
08460 1E22                        FE            .byte	$FE
08461 1E23                        00            .byte	0
08462 1E24                        00            .byte	0
08463 1E25                        00            .byte	0
08464 1E26                        00            .byte	0
08465                                           ! 1089  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08466 1E27                        00            .byte	0
08467 1E28                        00            .byte	0
08468 1E29                        3C            .byte	$3C
08469 1E2A                        66            .byte	$66
08470 1E2B                        C2            .byte	$C2
08471 1E2C                        C0            .byte	$C0
08472 1E2D                        C0            .byte	$C0
08473 1E2E                        C2            .byte	$C2
08474 1E2F                        66            .byte	$66
08475 1E30                        3C            .byte	$3C
08476 1E31                        0C            .byte	$C
08477 1E32                        06            .byte	6
08478 1E33                        7C            .byte	$7C
08479 1E34                        00            .byte	0
08480                                           ! 1090  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08481 1E35                        00            .byte	0
08482 1E36                        00            .byte	0
08483 1E37                        CC            .byte	$CC
08484 1E38                        CC            .byte	$CC
08485 1E39                        00            .byte	0
08486 1E3A                        CC            .byte	$CC
08487 1E3B                        CC            .byte	$CC
08488 1E3C                        CC            .byte	$CC
08489 1E3D                        CC            .byte	$CC
08490 1E3E                        CC            .byte	$CC
08491 1E3F                        76            .byte	$76
08492 1E40                        00            .byte	0
08493 1E41                        00            .byte	0
08494 1E42                        00            .byte	0
08495                                           ! 1091  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08496 1E43                        00            .byte	0
08497 1E44                        0C            .byte	$C
08498 1E45                        18            .byte	$18
08499 1E46                        30            .byte	$30
08500 1E47                        00            .byte	0
08501 1E48                        7C            .byte	$7C
08502 1E49                        C6            .byte	$C6
08503 1E4A                        FE            .byte	$FE
08504 1E4B                        C0            .byte	$C0
08505 1E4C                        C6            .byte	$C6
08506 1E4D                        7C            .byte	$7C
08507 1E4E                        00            .byte	0
08508 1E4F                        00            .byte	0
08509 1E50                        00            .byte	0
08510                                           ! 1092  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08511 1E51                        00            .byte	0
08512 1E52                        10            .byte	$10
08513 1E53                        38            .byte	$38
08514 1E54                        6C            .byte	$6C
08515 1E55                        00            .byte	0
08516 1E56                        78            .byte	$78
08517 1E57                        0C            .byte	$C
08518 1E58                        7C            .byte	$7C
08519 1E59                        CC            .byte	$CC
08520 1E5A                        CC            .byte	$CC
08521 1E5B                        76            .byte	$76
08522 1E5C                        00            .byte	0
08523 1E5D                        00            .byte	0
08524 1E5E                        00            .byte	0
08525                                           ! 1093  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08526 1E5F                        00            .byte	0
08527 1E60                        00            .byte	0
08528 1E61                        CC            .byte	$CC
08529 1E62                        CC            .byte	$CC
08530 1E63                        00            .byte	0
08531 1E64                        78            .byte	$78
08532 1E65                        0C            .byte	$C
08533 1E66                        7C            .byte	$7C
08534 1E67                        CC            .byte	$CC
08535 1E68                        CC            .byte	$CC
08536 1E69                        76            .byte	$76
08537 1E6A                        00            .byte	0
08538 1E6B                        00            .byte	0
08539 1E6C                        00            .byte	0
08540                                           ! 1094  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08541 1E6D                        00            .byte	0
08542 1E6E                        60            .byte	$60
08543 1E6F                        30            .byte	$30
08544 1E70                        18            .byte	$18
08545 1E71                        00            .byte	0
08546 1E72                        78            .byte	$78
08547 1E73                        0C            .byte	$C
08548 1E74                        7C            .byte	$7C
08549 1E75                        CC            .byte	$CC
08550 1E76                        CC            .byte	$CC
08551 1E77                        76            .byte	$76
08552 1E78                        00            .byte	0
08553 1E79                        00            .byte	0
08554 1E7A                        00            .byte	0
08555                                           ! 1095  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08556 1E7B                        00            .byte	0
08557 1E7C                        38            .byte	$38
08558 1E7D                        6C            .byte	$6C
08559 1E7E                        38            .byte	$38
08560 1E7F                        00            .byte	0
08561 1E80                        78            .byte	$78
08562 1E81                        0C            .byte	$C
08563 1E82                        7C            .byte	$7C
08564 1E83                        CC            .byte	$CC
08565 1E84                        CC            .byte	$CC
08566 1E85                        76            .byte	$76
08567 1E86                        00            .byte	0
08568 1E87                        00            .byte	0
08569 1E88                        00            .byte	0
08570                                           ! 1096  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08571 1E89                        00            .byte	0
08572 1E8A                        00            .byte	0
08573 1E8B                        00            .byte	0
08574 1E8C                        00            .byte	0
08575 1E8D                        3C            .byte	$3C
08576 1E8E                        66            .byte	$66
08577 1E8F                        60            .byte	$60
08578 1E90                        66            .byte	$66
08579 1E91                        3C            .byte	$3C
08580 1E92                        0C            .byte	$C
08581 1E93                        06            .byte	6
08582 1E94                        3C            .byte	$3C
08583 1E95                        00            .byte	0
08584 1E96                        00            .byte	0
08585                                           ! 1097  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08586 1E97                        00            .byte	0
08587 1E98                        10            .byte	$10
08588 1E99                        38            .byte	$38
08589 1E9A                        6C            .byte	$6C
08590 1E9B                        00            .byte	0
08591 1E9C                        7C            .byte	$7C
08592 1E9D                        C6            .byte	$C6
08593 1E9E                        FE            .byte	$FE
08594 1E9F                        C0            .byte	$C0
08595 1EA0                        C6            .byte	$C6
08596 1EA1                        7C            .byte	$7C
08597 1EA2                        00            .byte	0
08598 1EA3                        00            .byte	0
08599 1EA4                        00            .byte	0
08600                                           ! 1098  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08601 1EA5                        00            .byte	0
08602 1EA6                        00            .byte	0
08603 1EA7                        CC            .byte	$CC
08604 1EA8                        CC            .byte	$CC
08605 1EA9                        00            .byte	0
08606 1EAA                        7C            .byte	$7C
08607 1EAB                        C6            .byte	$C6
08608 1EAC                        FE            .byte	$FE
08609 1EAD                        C0            .byte	$C0
08610 1EAE                        C6            .byte	$C6
08611 1EAF                        7C            .byte	$7C
08612 1EB0                        00            .byte	0
08613 1EB1                        00            .byte	0
08614 1EB2                        00            .byte	0
08615                                           ! 1099  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08616 1EB3                        00            .byte	0
08617 1EB4                        60            .byte	$60
08618 1EB5                        30            .byte	$30
08619 1EB6                        18            .byte	$18
08620 1EB7                        00            .byte	0
08621 1EB8                        7C            .byte	$7C
08622 1EB9                        C6            .byte	$C6
08623 1EBA                        FE            .byte	$FE
08624 1EBB                        C0            .byte	$C0
08625 1EBC                        C6            .byte	$C6
08626 1EBD                        7C            .byte	$7C
08627 1EBE                        00            .byte	0
08628 1EBF                        00            .byte	0
08629 1EC0                        00            .byte	0
08630                                           ! 1100  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08631 1EC1                        00            .byte	0
08632 1EC2                        00            .byte	0
08633 1EC3                        66            .byte	$66
08634 1EC4                        66            .byte	$66
08635 1EC5                        00            .byte	0
08636 1EC6                        38            .byte	$38
08637 1EC7                        18            .byte	$18
08638 1EC8                        18            .byte	$18
08639 1EC9                        18            .byte	$18
08640 1ECA                        18            .byte	$18
08641 1ECB                        3C            .byte	$3C
08642 1ECC                        00            .byte	0
08643 1ECD                        00            .byte	0
08644 1ECE                        00            .byte	0
08645                                           ! 1101  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08646 1ECF                        00            .byte	0
08647 1ED0                        18            .byte	$18
08648 1ED1                        3C            .byte	$3C
08649 1ED2                        66            .byte	$66
08650 1ED3                        00            .byte	0
08651 1ED4                        38            .byte	$38
08652 1ED5                        18            .byte	$18
08653 1ED6                        18            .byte	$18
08654 1ED7                        18            .byte	$18
08655 1ED8                        18            .byte	$18
08656 1ED9                        3C            .byte	$3C
08657 1EDA                        00            .byte	0
08658 1EDB                        00            .byte	0
08659 1EDC                        00            .byte	0
08660                                           ! 1102  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08661 1EDD                        00            .byte	0
08662 1EDE                        60            .byte	$60
08663 1EDF                        30            .byte	$30
08664 1EE0                        18            .byte	$18
08665 1EE1                        00            .byte	0
08666 1EE2                        38            .byte	$38
08667 1EE3                        18            .byte	$18
08668 1EE4                        18            .byte	$18
08669 1EE5                        18            .byte	$18
08670 1EE6                        18            .byte	$18
08671 1EE7                        3C            .byte	$3C
08672 1EE8                        00            .byte	0
08673 1EE9                        00            .byte	0
08674 1EEA                        00            .byte	0
08675                                           ! 1103  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08676 1EEB                        00            .byte	0
08677 1EEC                        C6            .byte	$C6
08678 1EED                        C6            .byte	$C6
08679 1EEE                        10            .byte	$10
08680 1EEF                        38            .byte	$38
08681 1EF0                        6C            .byte	$6C
08682 1EF1                        C6            .byte	$C6
08683 1EF2                        C6            .byte	$C6
08684 1EF3                        FE            .byte	$FE
08685 1EF4                        C6            .byte	$C6
08686 1EF5                        C6            .byte	$C6
08687 1EF6                        00            .byte	0
08688 1EF7                        00            .byte	0
08689 1EF8                        00            .byte	0
08690                                           ! 1104  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08691 1EF9                        38            .byte	$38
08692 1EFA                        6C            .byte	$6C
08693 1EFB                        38            .byte	$38
08694 1EFC                        00            .byte	0
08695 1EFD                        38            .byte	$38
08696 1EFE                        6C            .byte	$6C
08697 1EFF                        C6            .byte	$C6
08698 1F00                        C6            .byte	$C6
08699 1F01                        FE            .byte	$FE
08700 1F02                        C6            .byte	$C6
08701 1F03                        C6            .byte	$C6
08702 1F04                        00            .byte	0
08703 1F05                        00            .byte	0
08704 1F06                        00            .byte	0
08705                                           ! 1105  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
08706 1F07                        18            .byte	$18
08707 1F08                        30            .byte	$30
08708 1F09                        60            .byte	$60
08709 1F0A                        00            .byte	0
08710 1F0B                        FE            .byte	$FE
08711 1F0C                        66            .byte	$66
08712 1F0D                        60            .byte	$60
08713 1F0E                        7C            .byte	$7C
08714 1F0F                        60            .byte	$60
08715 1F10                        66            .byte	$66
08716 1F11                        FE            .byte	$FE
08717 1F12                        00            .byte	0
08718 1F13                        00            .byte	0
08719 1F14                        00            .byte	0
08720                                           ! 1106  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
08721 1F15                        00            .byte	0
08722 1F16                        00            .byte	0
08723 1F17                        00            .byte	0
08724 1F18                        00            .byte	0
08725 1F19                        CC            .byte	$CC
08726 1F1A                        76            .byte	$76
08727 1F1B                        36            .byte	$36
08728 1F1C                        7E            .byte	$7E
08729 1F1D                        D8            .byte	$D8
08730 1F1E                        D8            .byte	$D8
08731 1F1F                        6E            .byte	$6E
08732 1F20                        00            .byte	0
08733 1F21                        00            .byte	0
08734 1F22                        00            .byte	0
08735                                           ! 1107  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
08736 1F23                        00            .byte	0
08737 1F24                        00            .byte	0
08738 1F25                        3E            .byte	$3E
08739 1F26                        6C            .byte	$6C
08740 1F27                        CC            .byte	$CC
08741 1F28                        CC            .byte	$CC
08742 1F29                        FE            .byte	$FE
08743 1F2A                        CC            .byte	$CC
08744 1F2B                        CC            .byte	$CC
08745 1F2C                        CC            .byte	$CC
08746 1F2D                        CE            .byte	$CE
08747 1F2E                        00            .byte	0
08748 1F2F                        00            .byte	0
08749 1F30                        00            .byte	0
08750                                           ! 1108  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08751 1F31                        00            .byte	0
08752 1F32                        10            .byte	$10
08753 1F33                        38            .byte	$38
08754 1F34                        6C            .byte	$6C
08755 1F35                        00            .byte	0
08756 1F36                        7C            .byte	$7C
08757 1F37                        C6            .byte	$C6
08758 1F38                        C6            .byte	$C6
08759 1F39                        C6            .byte	$C6
08760 1F3A                        C6            .byte	$C6
08761 1F3B                        7C            .byte	$7C
08762 1F3C                        00            .byte	0
08763 1F3D                        00            .byte	0
08764 1F3E                        00            .byte	0
08765                                           ! 1109  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08766 1F3F                        00            .byte	0
08767 1F40                        00            .byte	0
08768 1F41                        C6            .byte	$C6
08769 1F42                        C6            .byte	$C6
08770 1F43                        00            .byte	0
08771 1F44                        7C            .byte	$7C
08772 1F45                        C6            .byte	$C6
08773 1F46                        C6            .byte	$C6
08774 1F47                        C6            .byte	$C6
08775 1F48                        C6            .byte	$C6
08776 1F49                        7C            .byte	$7C
08777 1F4A                        00            .byte	0
08778 1F4B                        00            .byte	0
08779 1F4C                        00            .byte	0
08780                                           ! 1110  0x00, 0x60,
08781 1F4D                        00            .byte	0
08782                                           ! 1110  0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08783 1F4E                        60            .byte	$60
08784 1F4F                        30            .byte	$30
08785 1F50                        18            .byte	$18
08786 1F51                        00            .byte	0
08787 1F52                        7C            .byte	$7C
08788 1F53                        C6            .byte	$C6
08789 1F54                        C6            .byte	$C6
08790 1F55                        C6            .byte	$C6
08791 1F56                        C6            .byte	$C6
08792 1F57                        7C            .byte	$7C
08793 1F58                        00            .byte	0
08794 1F59                        00            .byte	0
08795 1F5A                        00            .byte	0
08796                                           ! 1111  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08797 1F5B                        00            .byte	0
08798 1F5C                        30            .byte	$30
08799 1F5D                        78            .byte	$78
08800 1F5E                        CC            .byte	$CC
08801 1F5F                        00            .byte	0
08802 1F60                        CC            .byte	$CC
08803 1F61                        CC            .byte	$CC
08804 1F62                        CC            .byte	$CC
08805 1F63                        CC            .byte	$CC
08806 1F64                        CC            .byte	$CC
08807 1F65                        76            .byte	$76
08808 1F66                        00            .byte	0
08809 1F67                        00            .byte	0
08810 1F68                        00            .byte	0
08811                                           ! 1112  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08812 1F69                        00            .byte	0
08813 1F6A                        60            .byte	$60
08814 1F6B                        30            .byte	$30
08815 1F6C                        18            .byte	$18
08816 1F6D                        00            .byte	0
08817 1F6E                        CC            .byte	$CC
08818 1F6F                        CC            .byte	$CC
08819 1F70                        CC            .byte	$CC
08820 1F71                        CC            .byte	$CC
08821 1F72                        CC            .byte	$CC
08822 1F73                        76            .byte	$76
08823 1F74                        00            .byte	0
08824 1F75                        00            .byte	0
08825 1F76                        00            .byte	0
08826                                           ! 1113  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
08827 1F77                        00            .byte	0
08828 1F78                        00            .byte	0
08829 1F79                        C6            .byte	$C6
08830 1F7A                        C6            .byte	$C6
08831 1F7B                        00            .byte	0
08832 1F7C                        C6            .byte	$C6
08833 1F7D                        C6            .byte	$C6
08834 1F7E                        C6            .byte	$C6
08835 1F7F                        C6            .byte	$C6
08836 1F80                        7E            .byte	$7E
08837 1F81                        06            .byte	6
08838 1F82                        0C            .byte	$C
08839 1F83                        78            .byte	$78
08840 1F84                        00            .byte	0
08841                                           ! 1114  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08842 1F85                        00            .byte	0
08843 1F86                        C6            .byte	$C6
08844 1F87                        C6            .byte	$C6
08845 1F88                        38            .byte	$38
08846 1F89                        6C            .byte	$6C
08847 1F8A                        C6            .byte	$C6
08848 1F8B                        C6            .byte	$C6
08849 1F8C                        C6            .byte	$C6
08850 1F8D                        C6            .byte	$C6
08851 1F8E                        6C            .byte	$6C
08852 1F8F                        38            .byte	$38
08853 1F90                        00            .byte	0
08854 1F91                        00            .byte	0
08855 1F92                        00            .byte	0
08856                                           ! 1115  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08857 1F93                        00            .byte	0
08858 1F94                        C6            .byte	$C6
08859 1F95                        C6            .byte	$C6
08860 1F96                        00            .byte	0
08861 1F97                        C6            .byte	$C6
08862 1F98                        C6            .byte	$C6
08863 1F99                        C6            .byte	$C6
08864 1F9A                        C6            .byte	$C6
08865 1F9B                        C6            .byte	$C6
08866 1F9C                        C6            .byte	$C6
08867 1F9D                        7C            .byte	$7C
08868 1F9E                        00            .byte	0
08869 1F9F                        00            .byte	0
08870 1FA0                        00            .byte	0
08871                                           ! 1116  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
08872 1FA1                        00            .byte	0
08873 1FA2                        18            .byte	$18
08874 1FA3                        18            .byte	$18
08875 1FA4                        3C            .byte	$3C
08876 1FA5                        66            .byte	$66
08877 1FA6                        60            .byte	$60
08878 1FA7                        60            .byte	$60
08879 1FA8                        66            .byte	$66
08880 1FA9                        3C            .byte	$3C
08881 1FAA                        18            .byte	$18
08882 1FAB                        18            .byte	$18
08883 1FAC                        00            .byte	0
08884 1FAD                        00            .byte	0
08885 1FAE                        00            .byte	0
08886                                           ! 1117  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
08887 1FAF                        00            .byte	0
08888 1FB0                        38            .byte	$38
08889 1FB1                        6C            .byte	$6C
08890 1FB2                        64            .byte	$64
08891 1FB3                        60            .byte	$60
08892 1FB4                        F0            .byte	$F0
08893 1FB5                        60            .byte	$60
08894 1FB6                        60            .byte	$60
08895 1FB7                        60            .byte	$60
08896 1FB8                        E6            .byte	$E6
08897 1FB9                        FC            .byte	$FC
08898 1FBA                        00            .byte	0
08899 1FBB                        00            .byte	0
08900 1FBC                        00            .byte	0
08901                                           ! 1118  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
08902 1FBD                        00            .byte	0
08903 1FBE                        00            .byte	0
08904 1FBF                        66            .byte	$66
08905 1FC0                        66            .byte	$66
08906 1FC1                        3C            .byte	$3C
08907 1FC2                        18            .byte	$18
08908 1FC3                        7E            .byte	$7E
08909 1FC4                        18            .byte	$18
08910 1FC5                        7E            .byte	$7E
08911 1FC6                        18            .byte	$18
08912 1FC7                        18            .byte	$18
08913 1FC8                        00            .byte	0
08914 1FC9                        00            .byte	0
08915 1FCA                        00            .byte	0
08916                                           ! 1119  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
08917 1FCB                        00            .byte	0
08918 1FCC                        F8            .byte	$F8
08919 1FCD                        CC            .byte	$CC
08920 1FCE                        CC            .byte	$CC
08921 1FCF                        F8            .byte	$F8
08922 1FD0                        C4            .byte	$C4
08923 1FD1                        CC            .byte	$CC
08924 1FD2                        DE            .byte	$DE
08925 1FD3                        CC            .byte	$CC
08926 1FD4                        CC            .byte	$CC
08927 1FD5                        C6            .byte	$C6
08928 1FD6                        00            .byte	0
08929 1FD7                        00            .byte	0
08930 1FD8                        00            .byte	0
08931                                           ! 1120  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
08932 1FD9                        00            .byte	0
08933 1FDA                        0E            .byte	$E
08934 1FDB                        1B            .byte	$1B
08935 1FDC                        18            .byte	$18
08936 1FDD                        18            .byte	$18
08937 1FDE                        18            .byte	$18
08938 1FDF                        7E            .byte	$7E
08939 1FE0                        18            .byte	$18
08940 1FE1                        18            .byte	$18
08941 1FE2                        18            .byte	$18
08942 1FE3                        18            .byte	$18
08943 1FE4                        D8            .byte	$D8
08944 1FE5                        70            .byte	$70
08945 1FE6                        00            .byte	0
08946                                           ! 1121  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08947 1FE7                        00            .byte	0
08948 1FE8                        18            .byte	$18
08949 1FE9                        30            .byte	$30
08950 1FEA                        60            .byte	$60
08951 1FEB                        00            .byte	0
08952 1FEC                        78            .byte	$78
08953 1FED                        0C            .byte	$C
08954 1FEE                        7C            .byte	$7C
08955 1FEF                        CC            .byte	$CC
08956 1FF0                        CC            .byte	$CC
08957 1FF1                        76            .byte	$76
08958 1FF2                        00            .byte	0
08959 1FF3                        00            .byte	0
08960 1FF4                        00            .byte	0
08961                                           ! 1122  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08962 1FF5                        00            .byte	0
08963 1FF6                        0C            .byte	$C
08964 1FF7                        18            .byte	$18
08965 1FF8                        30            .byte	$30
08966 1FF9                        00            .byte	0
08967 1FFA                        38            .byte	$38
08968 1FFB                        18            .byte	$18
08969 1FFC                        18            .byte	$18
08970 1FFD                        18            .byte	$18
08971 1FFE                        18            .byte	$18
08972 1FFF                        3C            .byte	$3C
08973 2000                        00            .byte	0
08974 2001                        00            .byte	0
08975 2002                        00            .byte	0
08976                                           ! 1123  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08977 2003                        00            .byte	0
08978 2004                        18            .byte	$18
08979 2005                        30            .byte	$30
08980 2006                        60            .byte	$60
08981 2007                        00            .byte	0
08982 2008                        7C            .byte	$7C
08983 2009                        C6            .byte	$C6
08984 200A                        C6            .byte	$C6
08985 200B                        C6            .byte	$C6
08986 200C                        C6            .byte	$C6
08987 200D                        7C            .byte	$7C
08988 200E                        00            .byte	0
08989 200F                        00            .byte	0
08990 2010                        00            .byte	0
08991                                           ! 1124  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08992 2011                        00            .byte	0
08993 2012                        18            .byte	$18
08994 2013                        30            .byte	$30
08995 2014                        60            .byte	$60
08996 2015                        00            .byte	0
08997 2016                        CC            .byte	$CC
08998 2017                        CC            .byte	$CC
08999 2018                        CC            .byte	$CC
09000 2019                        CC            .byte	$CC
09001 201A                        CC            .byte	$CC
09002 201B                        76            .byte	$76
09003 201C                        00            .byte	0
09004 201D                        00            .byte	0
09005 201E                        00            .byte	0
09006                                           ! 1125  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09007 201F                        00            .byte	0
09008 2020                        00            .byte	0
09009 2021                        76            .byte	$76
09010 2022                        DC            .byte	$DC
09011 2023                        00            .byte	0
09012 2024                        DC            .byte	$DC
09013 2025                        66            .byte	$66
09014 2026                        66            .byte	$66
09015 2027                        66            .byte	$66
09016 2028                        66            .byte	$66
09017 2029                        66            .byte	$66
09018 202A                        00            .byte	0
09019 202B                        00            .byte	0
09020 202C                        00            .byte	0
09021                                           ! 1126  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09022 202D                        76            .byte	$76
09023 202E                        DC            .byte	$DC
09024 202F                        00            .byte	0
09025 2030                        C6            .byte	$C6
09026 2031                        E6            .byte	$E6
09027 2032                        F6            .byte	$F6
09028 2033                        FE            .byte	$FE
09029 2034                        DE            .byte	$DE
09030 2035                        CE            .byte	$CE
09031 2036                        C6            .byte	$C6
09032 2037                        C6            .byte	$C6
09033 2038                        00            .byte	0
09034 2039                        00            .byte	0
09035 203A                        00            .byte	0
09036                                           ! 1127  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09037 203B                        00            .byte	0
09038 203C                        3C            .byte	$3C
09039 203D                        6C            .byte	$6C
09040 203E                        6C            .byte	$6C
09041 203F                        3E            .byte	$3E
09042 2040                        00            .byte	0
09043 2041                        7E            .byte	$7E
09044 2042                        00            .byte	0
09045 2043                        00            .byte	0
09046 2044                        00            .byte	0
09047 2045                        00            .byte	0
09048 2046                        00            .byte	0
09049 2047                        00            .byte	0
09050 2048                        00            .byte	0
09051                                           ! 1128  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09052 2049                        00            .byte	0
09053 204A                        38            .byte	$38
09054 204B                        6C            .byte	$6C
09055 204C                        6C            .byte	$6C
09056 204D                        38            .byte	$38
09057 204E                        00            .byte	0
09058 204F                        7C            .byte	$7C
09059 2050                        00            .byte	0
09060 2051                        00            .byte	0
09061 2052                        00            .byte	0
09062 2053                        00            .byte	0
09063 2054                        00            .byte	0
09064 2055                        00            .byte	0
09065 2056                        00            .byte	0
09066                                           ! 1129  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09067 2057                        00            .byte	0
09068 2058                        00            .byte	0
09069 2059                        30            .byte	$30
09070 205A                        30            .byte	$30
09071 205B                        00            .byte	0
09072 205C                        30            .byte	$30
09073 205D                        30            .byte	$30
09074 205E                        60            .byte	$60
09075 205F                        C6            .byte	$C6
09076 2060                        C6            .byte	$C6
09077 2061                        7C            .byte	$7C
09078 2062                        00            .byte	0
09079 2063                        00            .byte	0
09080 2064                        00            .byte	0
09081                                           ! 1130  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09082 2065                        00            .byte	0
09083 2066                        00            .byte	0
09084 2067                        00            .byte	0
09085 2068                        00            .byte	0
09086 2069                        00            .byte	0
09087 206A                        00            .byte	0
09088 206B                        FE            .byte	$FE
09089 206C                        C0            .byte	$C0
09090 206D                        C0            .byte	$C0
09091 206E                        C0            .byte	$C0
09092 206F                        00            .byte	0
09093 2070                        00            .byte	0
09094 2071                        00            .byte	0
09095 2072                        00            .byte	0
09096                                           ! 1131  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09097 2073                        00            .byte	0
09098 2074                        00            .byte	0
09099 2075                        00            .byte	0
09100 2076                        00            .byte	0
09101 2077                        00            .byte	0
09102 2078                        00            .byte	0
09103 2079                        FE            .byte	$FE
09104 207A                        06            .byte	6
09105 207B                        06            .byte	6
09106 207C                        06            .byte	6
09107 207D                        00            .byte	0
09108 207E                        00            .byte	0
09109 207F                        00            .byte	0
09110 2080                        00            .byte	0
09111                                           ! 1132  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09112 2081                        00            .byte	0
09113 2082                        C0            .byte	$C0
09114 2083                        C0            .byte	$C0
09115 2084                        C6            .byte	$C6
09116 2085                        CC            .byte	$CC
09117 2086                        D8            .byte	$D8
09118 2087                        30            .byte	$30
09119 2088                        60            .byte	$60
09120 2089                        DC            .byte	$DC
09121 208A                        86            .byte	$86
09122 208B                        0C            .byte	$C
09123 208C                        18            .byte	$18
09124 208D                        3E            .byte	$3E
09125 208E                        00            .byte	0
09126                                           ! 1133  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09127 208F                        00            .byte	0
09128 2090                        C0            .byte	$C0
09129 2091                        C0            .byte	$C0
09130 2092                        C6            .byte	$C6
09131 2093                        CC            .byte	$CC
09132 2094                        D8            .byte	$D8
09133 2095                        30            .byte	$30
09134 2096                        66            .byte	$66
09135 2097                        CE            .byte	$CE
09136 2098                        9E            .byte	$9E
09137 2099                        3E            .byte	$3E
09138 209A                        06            .byte	6
09139 209B                        06            .byte	6
09140 209C                        00            .byte	0
09141                                           ! 1134  0x00, 0x00, 0x18, 0
09142 209D                        00            .byte	0
09143 209E                        00            .byte	0
09144 209F                        18            .byte	$18
09145                                           ! 1134 x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09146 20A0                        18            .byte	$18
09147 20A1                        00            .byte	0
09148 20A2                        18            .byte	$18
09149 20A3                        18            .byte	$18
09150 20A4                        3C            .byte	$3C
09151 20A5                        3C            .byte	$3C
09152 20A6                        3C            .byte	$3C
09153 20A7                        18            .byte	$18
09154 20A8                        00            .byte	0
09155 20A9                        00            .byte	0
09156 20AA                        00            .byte	0
09157                                           ! 1135  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09158 20AB                        00            .byte	0
09159 20AC                        00            .byte	0
09160 20AD                        00            .byte	0
09161 20AE                        00            .byte	0
09162 20AF                        36            .byte	$36
09163 20B0                        6C            .byte	$6C
09164 20B1                        D8            .byte	$D8
09165 20B2                        6C            .byte	$6C
09166 20B3                        36            .byte	$36
09167 20B4                        00            .byte	0
09168 20B5                        00            .byte	0
09169 20B6                        00            .byte	0
09170 20B7                        00            .byte	0
09171 20B8                        00            .byte	0
09172                                           ! 1136  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09173 20B9                        00            .byte	0
09174 20BA                        00            .byte	0
09175 20BB                        00            .byte	0
09176 20BC                        00            .byte	0
09177 20BD                        D8            .byte	$D8
09178 20BE                        6C            .byte	$6C
09179 20BF                        36            .byte	$36
09180 20C0                        6C            .byte	$6C
09181 20C1                        D8            .byte	$D8
09182 20C2                        00            .byte	0
09183 20C3                        00            .byte	0
09184 20C4                        00            .byte	0
09185 20C5                        00            .byte	0
09186 20C6                        00            .byte	0
09187                                           ! 1137  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09188 20C7                        11            .byte	$11
09189 20C8                        44            .byte	$44
09190 20C9                        11            .byte	$11
09191 20CA                        44            .byte	$44
09192 20CB                        11            .byte	$11
09193 20CC                        44            .byte	$44
09194 20CD                        11            .byte	$11
09195 20CE                        44            .byte	$44
09196 20CF                        11            .byte	$11
09197 20D0                        44            .byte	$44
09198 20D1                        11            .byte	$11
09199 20D2                        44            .byte	$44
09200 20D3                        11            .byte	$11
09201 20D4                        44            .byte	$44
09202                                           ! 1138  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09203 20D5                        55            .byte	$55
09204 20D6                        AA            .byte	$AA
09205 20D7                        55            .byte	$55
09206 20D8                        AA            .byte	$AA
09207 20D9                        55            .byte	$55
09208 20DA                        AA            .byte	$AA
09209 20DB                        55            .byte	$55
09210 20DC                        AA            .byte	$AA
09211 20DD                        55            .byte	$55
09212 20DE                        AA            .byte	$AA
09213 20DF                        55            .byte	$55
09214 20E0                        AA            .byte	$AA
09215 20E1                        55            .byte	$55
09216 20E2                        AA            .byte	$AA
09217                                           ! 1139  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09218 20E3                        DD            .byte	$DD
09219 20E4                        77            .byte	$77
09220 20E5                        DD            .byte	$DD
09221 20E6                        77            .byte	$77
09222 20E7                        DD            .byte	$DD
09223 20E8                        77            .byte	$77
09224 20E9                        DD            .byte	$DD
09225 20EA                        77            .byte	$77
09226 20EB                        DD            .byte	$DD
09227 20EC                        77            .byte	$77
09228 20ED                        DD            .byte	$DD
09229 20EE                        77            .byte	$77
09230 20EF                        DD            .byte	$DD
09231 20F0                        77            .byte	$77
09232                                           ! 1140  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09233 20F1                        18            .byte	$18
09234 20F2                        18            .byte	$18
09235 20F3                        18            .byte	$18
09236 20F4                        18            .byte	$18
09237 20F5                        18            .byte	$18
09238 20F6                        18            .byte	$18
09239 20F7                        18            .byte	$18
09240 20F8                        18            .byte	$18
09241 20F9                        18            .byte	$18
09242 20FA                        18            .byte	$18
09243 20FB                        18            .byte	$18
09244 20FC                        18            .byte	$18
09245 20FD                        18            .byte	$18
09246 20FE                        18            .byte	$18
09247                                           ! 1141  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09248 20FF                        18            .byte	$18
09249 2100                        18            .byte	$18
09250 2101                        18            .byte	$18
09251 2102                        18            .byte	$18
09252 2103                        18            .byte	$18
09253 2104                        18            .byte	$18
09254 2105                        18            .byte	$18
09255 2106                        F8            .byte	$F8
09256 2107                        18            .byte	$18
09257 2108                        18            .byte	$18
09258 2109                        18            .byte	$18
09259 210A                        18            .byte	$18
09260 210B                        18            .byte	$18
09261 210C                        18            .byte	$18
09262                                           ! 1142  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09263 210D                        18            .byte	$18
09264 210E                        18            .byte	$18
09265 210F                        18            .byte	$18
09266 2110                        18            .byte	$18
09267 2111                        18            .byte	$18
09268 2112                        F8            .byte	$F8
09269 2113                        18            .byte	$18
09270 2114                        F8            .byte	$F8
09271 2115                        18            .byte	$18
09272 2116                        18            .byte	$18
09273 2117                        18            .byte	$18
09274 2118                        18            .byte	$18
09275 2119                        18            .byte	$18
09276 211A                        18            .byte	$18
09277                                           ! 1143  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09278 211B                        36            .byte	$36
09279 211C                        36            .byte	$36
09280 211D                        36            .byte	$36
09281 211E                        36            .byte	$36
09282 211F                        36            .byte	$36
09283 2120                        36            .byte	$36
09284 2121                        36            .byte	$36
09285 2122                        F6            .byte	$F6
09286 2123                        36            .byte	$36
09287 2124                        36            .byte	$36
09288 2125                        36            .byte	$36
09289 2126                        36            .byte	$36
09290 2127                        36            .byte	$36
09291 2128                        36            .byte	$36
09292                                           ! 1144  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09293 2129                        00            .byte	0
09294 212A                        00            .byte	0
09295 212B                        00            .byte	0
09296 212C                        00            .byte	0
09297 212D                        00            .byte	0
09298 212E                        00            .byte	0
09299 212F                        00            .byte	0
09300 2130                        FE            .byte	$FE
09301 2131                        36            .byte	$36
09302 2132                        36            .byte	$36
09303 2133                        36            .byte	$36
09304 2134                        36            .byte	$36
09305 2135                        36            .byte	$36
09306 2136                        36            .byte	$36
09307                                           ! 1145  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09308 2137                        00            .byte	0
09309 2138                        00            .byte	0
09310 2139                        00            .byte	0
09311 213A                        00            .byte	0
09312 213B                        00            .byte	0
09313 213C                        F8            .byte	$F8
09314 213D                        18            .byte	$18
09315 213E                        F8            .byte	$F8
09316 213F                        18            .byte	$18
09317 2140                        18            .byte	$18
09318 2141                        18            .byte	$18
09319 2142                        18            .byte	$18
09320 2143                        18            .byte	$18
09321 2144                        18            .byte	$18
09322                                           ! 1146  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09323 2145                        36            .byte	$36
09324 2146                        36            .byte	$36
09325 2147                        36            .byte	$36
09326 2148                        36            .byte	$36
09327 2149                        36            .byte	$36
09328 214A                        F6            .byte	$F6
09329 214B                        06            .byte	6
09330 214C                        F6            .byte	$F6
09331 214D                        36            .byte	$36
09332 214E                        36            .byte	$36
09333 214F                        36            .byte	$36
09334 2150                        36            .byte	$36
09335 2151                        36            .byte	$36
09336 2152                        36            .byte	$36
09337                                           ! 1147  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09338 2153                        36            .byte	$36
09339 2154                        36            .byte	$36
09340 2155                        36            .byte	$36
09341 2156                        36            .byte	$36
09342 2157                        36            .byte	$36
09343 2158                        36            .byte	$36
09344 2159                        36            .byte	$36
09345 215A                        36            .byte	$36
09346 215B                        36            .byte	$36
09347 215C                        36            .byte	$36
09348 215D                        36            .byte	$36
09349 215E                        36            .byte	$36
09350 215F                        36            .byte	$36
09351 2160                        36            .byte	$36
09352                                           ! 1148  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09353 2161                        00            .byte	0
09354 2162                        00            .byte	0
09355 2163                        00            .byte	0
09356 2164                        00            .byte	0
09357 2165                        00            .byte	0
09358 2166                        FE            .byte	$FE
09359 2167                        06            .byte	6
09360 2168                        F6            .byte	$F6
09361 2169                        36            .byte	$36
09362 216A                        36            .byte	$36
09363 216B                        36            .byte	$36
09364 216C                        36            .byte	$36
09365 216D                        36            .byte	$36
09366 216E                        36            .byte	$36
09367                                           ! 1149  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09368 216F                        36            .byte	$36
09369 2170                        36            .byte	$36
09370 2171                        36            .byte	$36
09371 2172                        36            .byte	$36
09372 2173                        36            .byte	$36
09373 2174                        F6            .byte	$F6
09374 2175                        06            .byte	6
09375 2176                        FE            .byte	$FE
09376 2177                        00            .byte	0
09377 2178                        00            .byte	0
09378 2179                        00            .byte	0
09379 217A                        00            .byte	0
09380 217B                        00            .byte	0
09381 217C                        00            .byte	0
09382                                           ! 1150  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09383 217D                        36            .byte	$36
09384 217E                        36            .byte	$36
09385 217F                        36            .byte	$36
09386 2180                        36            .byte	$36
09387 2181                        36            .byte	$36
09388 2182                        36            .byte	$36
09389 2183                        36            .byte	$36
09390 2184                        FE            .byte	$FE
09391 2185                        00            .byte	0
09392 2186                        00            .byte	0
09393 2187                        00            .byte	0
09394 2188                        00            .byte	0
09395 2189                        00            .byte	0
09396 218A                        00            .byte	0
09397                                           ! 1151  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09398 218B                        18            .byte	$18
09399 218C                        18            .byte	$18
09400 218D                        18            .byte	$18
09401 218E                        18            .byte	$18
09402 218F                        18            .byte	$18
09403 2190                        F8            .byte	$F8
09404 2191                        18            .byte	$18
09405 2192                        F8            .byte	$F8
09406 2193                        00            .byte	0
09407 2194                        00            .byte	0
09408 2195                        00            .byte	0
09409 2196                        00            .byte	0
09410 2197                        00            .byte	0
09411 2198                        00            .byte	0
09412                                           ! 1152  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09413 2199                        00            .byte	0
09414 219A                        00            .byte	0
09415 219B                        00            .byte	0
09416 219C                        00            .byte	0
09417 219D                        00            .byte	0
09418 219E                        00            .byte	0
09419 219F                        00            .byte	0
09420 21A0                        F8            .byte	$F8
09421 21A1                        18            .byte	$18
09422 21A2                        18            .byte	$18
09423 21A3                        18            .byte	$18
09424 21A4                        18            .byte	$18
09425 21A5                        18            .byte	$18
09426 21A6                        18            .byte	$18
09427                                           ! 1153  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09428 21A7                        18            .byte	$18
09429 21A8                        18            .byte	$18
09430 21A9                        18            .byte	$18
09431 21AA                        18            .byte	$18
09432 21AB                        18            .byte	$18
09433 21AC                        18            .byte	$18
09434 21AD                        18            .byte	$18
09435 21AE                        1F            .byte	$1F
09436 21AF                        00            .byte	0
09437 21B0                        00            .byte	0
09438 21B1                        00            .byte	0
09439 21B2                        00            .byte	0
09440 21B3                        00            .byte	0
09441 21B4                        00            .byte	0
09442                                           ! 1154  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09443 21B5                        18            .byte	$18
09444 21B6                        18            .byte	$18
09445 21B7                        18            .byte	$18
09446 21B8                        18            .byte	$18
09447 21B9                        18            .byte	$18
09448 21BA                        18            .byte	$18
09449 21BB                        18            .byte	$18
09450 21BC                        FF            .byte	$FF
09451 21BD                        00            .byte	0
09452 21BE                        00            .byte	0
09453 21BF                        00            .byte	0
09454 21C0                        00            .byte	0
09455 21C1                        00            .byte	0
09456 21C2                        00            .byte	0
09457                                           ! 1155  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09458 21C3                        00            .byte	0
09459 21C4                        00            .byte	0
09460 21C5                        00            .byte	0
09461 21C6                        00            .byte	0
09462 21C7                        00            .byte	0
09463 21C8                        00            .byte	0
09464 21C9                        00            .byte	0
09465 21CA                        FF            .byte	$FF
09466 21CB                        18            .byte	$18
09467 21CC                        18            .byte	$18
09468 21CD                        18            .byte	$18
09469 21CE                        18            .byte	$18
09470 21CF                        18            .byte	$18
09471 21D0                        18            .byte	$18
09472                                           ! 1156  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09473 21D1                        18            .byte	$18
09474 21D2                        18            .byte	$18
09475 21D3                        18            .byte	$18
09476 21D4                        18            .byte	$18
09477 21D5                        18            .byte	$18
09478 21D6                        18            .byte	$18
09479 21D7                        18            .byte	$18
09480 21D8                        1F            .byte	$1F
09481 21D9                        18            .byte	$18
09482 21DA                        18            .byte	$18
09483 21DB                        18            .byte	$18
09484 21DC                        18            .byte	$18
09485 21DD                        18            .byte	$18
09486 21DE                        18            .byte	$18
09487                                           ! 1157  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09488 21DF                        00            .byte	0
09489 21E0                        00            .byte	0
09490 21E1                        00            .byte	0
09491 21E2                        00            .byte	0
09492 21E3                        00            .byte	0
09493 21E4                        00            .byte	0
09494 21E5                        00            .byte	0
09495 21E6                        FF            .byte	$FF
09496 21E7                        00            .byte	0
09497 21E8                        00            .byte	0
09498 21E9                        00            .byte	0
09499 21EA                        00            .byte	0
09500 21EB                        00            .byte	0
09501 21EC                        00            .byte	0
09502                                           ! 1158  0x18, 0x18, 0x18, 0x18, 0x1
09503 21ED                        18            .byte	$18
09504 21EE                        18            .byte	$18
09505 21EF                        18            .byte	$18
09506 21F0                        18            .byte	$18
09507                                           ! 1158 8, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09508 21F1                        18            .byte	$18
09509 21F2                        18            .byte	$18
09510 21F3                        18            .byte	$18
09511 21F4                        FF            .byte	$FF
09512 21F5                        18            .byte	$18
09513 21F6                        18            .byte	$18
09514 21F7                        18            .byte	$18
09515 21F8                        18            .byte	$18
09516 21F9                        18            .byte	$18
09517 21FA                        18            .byte	$18
09518                                           ! 1159  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09519 21FB                        18            .byte	$18
09520 21FC                        18            .byte	$18
09521 21FD                        18            .byte	$18
09522 21FE                        18            .byte	$18
09523 21FF                        18            .byte	$18
09524 2200                        1F            .byte	$1F
09525 2201                        18            .byte	$18
09526 2202                        1F            .byte	$1F
09527 2203                        18            .byte	$18
09528 2204                        18            .byte	$18
09529 2205                        18            .byte	$18
09530 2206                        18            .byte	$18
09531 2207                        18            .byte	$18
09532 2208                        18            .byte	$18
09533                                           ! 1160  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09534 2209                        36            .byte	$36
09535 220A                        36            .byte	$36
09536 220B                        36            .byte	$36
09537 220C                        36            .byte	$36
09538 220D                        36            .byte	$36
09539 220E                        36            .byte	$36
09540 220F                        36            .byte	$36
09541 2210                        37            .byte	$37
09542 2211                        36            .byte	$36
09543 2212                        36            .byte	$36
09544 2213                        36            .byte	$36
09545 2214                        36            .byte	$36
09546 2215                        36            .byte	$36
09547 2216                        36            .byte	$36
09548                                           ! 1161  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09549 2217                        36            .byte	$36
09550 2218                        36            .byte	$36
09551 2219                        36            .byte	$36
09552 221A                        36            .byte	$36
09553 221B                        36            .byte	$36
09554 221C                        37            .byte	$37
09555 221D                        30            .byte	$30
09556 221E                        3F            .byte	$3F
09557 221F                        00            .byte	0
09558 2220                        00            .byte	0
09559 2221                        00            .byte	0
09560 2222                        00            .byte	0
09561 2223                        00            .byte	0
09562 2224                        00            .byte	0
09563                                           ! 1162  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09564 2225                        00            .byte	0
09565 2226                        00            .byte	0
09566 2227                        00            .byte	0
09567 2228                        00            .byte	0
09568 2229                        00            .byte	0
09569 222A                        3F            .byte	$3F
09570 222B                        30            .byte	$30
09571 222C                        37            .byte	$37
09572 222D                        36            .byte	$36
09573 222E                        36            .byte	$36
09574 222F                        36            .byte	$36
09575 2230                        36            .byte	$36
09576 2231                        36            .byte	$36
09577 2232                        36            .byte	$36
09578                                           ! 1163  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09579 2233                        36            .byte	$36
09580 2234                        36            .byte	$36
09581 2235                        36            .byte	$36
09582 2236                        36            .byte	$36
09583 2237                        36            .byte	$36
09584 2238                        F7            .byte	$F7
09585 2239                        00            .byte	0
09586 223A                        FF            .byte	$FF
09587 223B                        00            .byte	0
09588 223C                        00            .byte	0
09589 223D                        00            .byte	0
09590 223E                        00            .byte	0
09591 223F                        00            .byte	0
09592 2240                        00            .byte	0
09593                                           ! 1164  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09594 2241                        00            .byte	0
09595 2242                        00            .byte	0
09596 2243                        00            .byte	0
09597 2244                        00            .byte	0
09598 2245                        00            .byte	0
09599 2246                        FF            .byte	$FF
09600 2247                        00            .byte	0
09601 2248                        F7            .byte	$F7
09602 2249                        36            .byte	$36
09603 224A                        36            .byte	$36
09604 224B                        36            .byte	$36
09605 224C                        36            .byte	$36
09606 224D                        36            .byte	$36
09607 224E                        36            .byte	$36
09608                                           ! 1165  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09609 224F                        36            .byte	$36
09610 2250                        36            .byte	$36
09611 2251                        36            .byte	$36
09612 2252                        36            .byte	$36
09613 2253                        36            .byte	$36
09614 2254                        37            .byte	$37
09615 2255                        30            .byte	$30
09616 2256                        37            .byte	$37
09617 2257                        36            .byte	$36
09618 2258                        36            .byte	$36
09619 2259                        36            .byte	$36
09620 225A                        36            .byte	$36
09621 225B                        36            .byte	$36
09622 225C                        36            .byte	$36
09623                                           ! 1166  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09624 225D                        00            .byte	0
09625 225E                        00            .byte	0
09626 225F                        00            .byte	0
09627 2260                        00            .byte	0
09628 2261                        00            .byte	0
09629 2262                        FF            .byte	$FF
09630 2263                        00            .byte	0
09631 2264                        FF            .byte	$FF
09632 2265                        00            .byte	0
09633 2266                        00            .byte	0
09634 2267                        00            .byte	0
09635 2268                        00            .byte	0
09636 2269                        00            .byte	0
09637 226A                        00            .byte	0
09638                                           ! 1167  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09639 226B                        36            .byte	$36
09640 226C                        36            .byte	$36
09641 226D                        36            .byte	$36
09642 226E                        36            .byte	$36
09643 226F                        36            .byte	$36
09644 2270                        F7            .byte	$F7
09645 2271                        00            .byte	0
09646 2272                        F7            .byte	$F7
09647 2273                        36            .byte	$36
09648 2274                        36            .byte	$36
09649 2275                        36            .byte	$36
09650 2276                        36            .byte	$36
09651 2277                        36            .byte	$36
09652 2278                        36            .byte	$36
09653                                           ! 1168  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09654 2279                        18            .byte	$18
09655 227A                        18            .byte	$18
09656 227B                        18            .byte	$18
09657 227C                        18            .byte	$18
09658 227D                        18            .byte	$18
09659 227E                        FF            .byte	$FF
09660 227F                        00            .byte	0
09661 2280                        FF            .byte	$FF
09662 2281                        00            .byte	0
09663 2282                        00            .byte	0
09664 2283                        00            .byte	0
09665 2284                        00            .byte	0
09666 2285                        00            .byte	0
09667 2286                        00            .byte	0
09668                                           ! 1169  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09669 2287                        36            .byte	$36
09670 2288                        36            .byte	$36
09671 2289                        36            .byte	$36
09672 228A                        36            .byte	$36
09673 228B                        36            .byte	$36
09674 228C                        36            .byte	$36
09675 228D                        36            .byte	$36
09676 228E                        FF            .byte	$FF
09677 228F                        00            .byte	0
09678 2290                        00            .byte	0
09679 2291                        00            .byte	0
09680 2292                        00            .byte	0
09681 2293                        00            .byte	0
09682 2294                        00            .byte	0
09683                                           ! 1170  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09684 2295                        00            .byte	0
09685 2296                        00            .byte	0
09686 2297                        00            .byte	0
09687 2298                        00            .byte	0
09688 2299                        00            .byte	0
09689 229A                        FF            .byte	$FF
09690 229B                        00            .byte	0
09691 229C                        FF            .byte	$FF
09692 229D                        18            .byte	$18
09693 229E                        18            .byte	$18
09694 229F                        18            .byte	$18
09695 22A0                        18            .byte	$18
09696 22A1                        18            .byte	$18
09697 22A2                        18            .byte	$18
09698                                           ! 1171  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09699 22A3                        00            .byte	0
09700 22A4                        00            .byte	0
09701 22A5                        00            .byte	0
09702 22A6                        00            .byte	0
09703 22A7                        00            .byte	0
09704 22A8                        00            .byte	0
09705 22A9                        00            .byte	0
09706 22AA                        FF            .byte	$FF
09707 22AB                        36            .byte	$36
09708 22AC                        36            .byte	$36
09709 22AD                        36            .byte	$36
09710 22AE                        36            .byte	$36
09711 22AF                        36            .byte	$36
09712 22B0                        36            .byte	$36
09713                                           ! 1172  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09714 22B1                        36            .byte	$36
09715 22B2                        36            .byte	$36
09716 22B3                        36            .byte	$36
09717 22B4                        36            .byte	$36
09718 22B5                        36            .byte	$36
09719 22B6                        36            .byte	$36
09720 22B7                        36            .byte	$36
09721 22B8                        3F            .byte	$3F
09722 22B9                        00            .byte	0
09723 22BA                        00            .byte	0
09724 22BB                        00            .byte	0
09725 22BC                        00            .byte	0
09726 22BD                        00            .byte	0
09727 22BE                        00            .byte	0
09728                                           ! 1173  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09729 22BF                        18            .byte	$18
09730 22C0                        18            .byte	$18
09731 22C1                        18            .byte	$18
09732 22C2                        18            .byte	$18
09733 22C3                        18            .byte	$18
09734 22C4                        1F            .byte	$1F
09735 22C5                        18            .byte	$18
09736 22C6                        1F            .byte	$1F
09737 22C7                        00            .byte	0
09738 22C8                        00            .byte	0
09739 22C9                        00            .byte	0
09740 22CA                        00            .byte	0
09741 22CB                        00            .byte	0
09742 22CC                        00            .byte	0
09743                                           ! 1174  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09744 22CD                        00            .byte	0
09745 22CE                        00            .byte	0
09746 22CF                        00            .byte	0
09747 22D0                        00            .byte	0
09748 22D1                        00            .byte	0
09749 22D2                        1F            .byte	$1F
09750 22D3                        18            .byte	$18
09751 22D4                        1F            .byte	$1F
09752 22D5                        18            .byte	$18
09753 22D6                        18            .byte	$18
09754 22D7                        18            .byte	$18
09755 22D8                        18            .byte	$18
09756 22D9                        18            .byte	$18
09757 22DA                        18            .byte	$18
09758                                           ! 1175  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09759 22DB                        00            .byte	0
09760 22DC                        00            .byte	0
09761 22DD                        00            .byte	0
09762 22DE                        00            .byte	0
09763 22DF                        00            .byte	0
09764 22E0                        00            .byte	0
09765 22E1                        00            .byte	0
09766 22E2                        3F            .byte	$3F
09767 22E3                        36            .byte	$36
09768 22E4                        36            .byte	$36
09769 22E5                        36            .byte	$36
09770 22E6                        36            .byte	$36
09771 22E7                        36            .byte	$36
09772 22E8                        36            .byte	$36
09773                                           ! 1176  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09774 22E9                        36            .byte	$36
09775 22EA                        36            .byte	$36
09776 22EB                        36            .byte	$36
09777 22EC                        36            .byte	$36
09778 22ED                        36            .byte	$36
09779 22EE                        36            .byte	$36
09780 22EF                        36            .byte	$36
09781 22F0                        FF            .byte	$FF
09782 22F1                        36            .byte	$36
09783 22F2                        36            .byte	$36
09784 22F3                        36            .byte	$36
09785 22F4                        36            .byte	$36
09786 22F5                        36            .byte	$36
09787 22F6                        36            .byte	$36
09788                                           ! 1177  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09789 22F7                        18            .byte	$18
09790 22F8                        18            .byte	$18
09791 22F9                        18            .byte	$18
09792 22FA                        18            .byte	$18
09793 22FB                        18            .byte	$18
09794 22FC                        FF            .byte	$FF
09795 22FD                        18            .byte	$18
09796 22FE                        FF            .byte	$FF
09797 22FF                        18            .byte	$18
09798 2300                        18            .byte	$18
09799 2301                        18            .byte	$18
09800 2302                        18            .byte	$18
09801 2303                        18            .byte	$18
09802 2304                        18            .byte	$18
09803                                           ! 1178  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09804 2305                        18            .byte	$18
09805 2306                        18            .byte	$18
09806 2307                        18            .byte	$18
09807 2308                        18            .byte	$18
09808 2309                        18            .byte	$18
09809 230A                        18            .byte	$18
09810 230B                        18            .byte	$18
09811 230C                        F8            .byte	$F8
09812 230D                        00            .byte	0
09813 230E                        00            .byte	0
09814 230F                        00            .byte	0
09815 2310                        00            .byte	0
09816 2311                        00            .byte	0
09817 2312                        00            .byte	0
09818                                           ! 1179  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09819 2313                        00            .byte	0
09820 2314                        00            .byte	0
09821 2315                        00            .byte	0
09822 2316                        00            .byte	0
09823 2317                        00            .byte	0
09824 2318                        00            .byte	0
09825 2319                        00            .byte	0
09826 231A                        1F            .byte	$1F
09827 231B                        18            .byte	$18
09828 231C                        18            .byte	$18
09829 231D                        18            .byte	$18
09830 231E                        18            .byte	$18
09831 231F                        18            .byte	$18
09832 2320                        18            .byte	$18
09833                                           ! 1180  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09834 2321                        FF            .byte	$FF
09835 2322                        FF            .byte	$FF
09836 2323                        FF            .byte	$FF
09837 2324                        FF            .byte	$FF
09838 2325                        FF            .byte	$FF
09839 2326                        FF            .byte	$FF
09840 2327                        FF            .byte	$FF
09841 2328                        FF            .byte	$FF
09842 2329                        FF            .byte	$FF
09843 232A                        FF            .byte	$FF
09844 232B                        FF            .byte	$FF
09845 232C                        FF            .byte	$FF
09846 232D                        FF            .byte	$FF
09847 232E                        FF            .byte	$FF
09848                                           ! 1181  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09849 232F                        00            .byte	0
09850 2330                        00            .byte	0
09851 2331                        00            .byte	0
09852 2332                        00            .byte	0
09853 2333                        00            .byte	0
09854 2334                        00            .byte	0
09855 2335                        00            .byte	0
09856 2336                        FF            .byte	$FF
09857 2337                        FF            .byte	$FF
09858 2338                        FF            .byte	$FF
09859 2339                        FF            .byte	$FF
09860 233A                        FF            .byte	$FF
09861 233B                        FF            .byte	$FF
09862 233C                        FF            .byte	$FF
09863                                           ! 1182  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
09864 233D                        F0            .byte	$F0
09865 233E                        F0            .byte	$F0
09866 233F                        F0            .byte	$F0
09867 2340                        F0            .byte	$F0
09868 2341                        F0            .byte	$F0
09869                                           ! 1182  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
09870 2342                        F0            .byte	$F0
09871 2343                        F0            .byte	$F0
09872 2344                        F0            .byte	$F0
09873 2345                        F0            .byte	$F0
09874 2346                        F0            .byte	$F0
09875 2347                        F0            .byte	$F0
09876 2348                        F0            .byte	$F0
09877 2349                        F0            .byte	$F0
09878 234A                        F0            .byte	$F0
09879                                           ! 1183  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
09880 234B                        0F            .byte	$F
09881 234C                        0F            .byte	$F
09882 234D                        0F            .byte	$F
09883 234E                        0F            .byte	$F
09884 234F                        0F            .byte	$F
09885 2350                        0F            .byte	$F
09886 2351                        0F            .byte	$F
09887 2352                        0F            .byte	$F
09888 2353                        0F            .byte	$F
09889 2354                        0F            .byte	$F
09890 2355                        0F            .byte	$F
09891 2356                        0F            .byte	$F
09892 2357                        0F            .byte	$F
09893 2358                        0F            .byte	$F
09894                                           ! 1184  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09895 2359                        FF            .byte	$FF
09896 235A                        FF            .byte	$FF
09897 235B                        FF            .byte	$FF
09898 235C                        FF            .byte	$FF
09899 235D                        FF            .byte	$FF
09900 235E                        FF            .byte	$FF
09901 235F                        FF            .byte	$FF
09902 2360                        00            .byte	0
09903 2361                        00            .byte	0
09904 2362                        00            .byte	0
09905 2363                        00            .byte	0
09906 2364                        00            .byte	0
09907 2365                        00            .byte	0
09908 2366                        00            .byte	0
09909                                           ! 1185  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
09910 2367                        00            .byte	0
09911 2368                        00            .byte	0
09912 2369                        00            .byte	0
09913 236A                        00            .byte	0
09914 236B                        00            .byte	0
09915 236C                        76            .byte	$76
09916 236D                        DC            .byte	$DC
09917 236E                        D8            .byte	$D8
09918 236F                        D8            .byte	$D8
09919 2370                        DC            .byte	$DC
09920 2371                        76            .byte	$76
09921 2372                        00            .byte	0
09922 2373                        00            .byte	0
09923 2374                        00            .byte	0
09924                                           ! 1186  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
09925 2375                        00            .byte	0
09926 2376                        00            .byte	0
09927 2377                        00            .byte	0
09928 2378                        00            .byte	0
09929 2379                        7C            .byte	$7C
09930 237A                        C6            .byte	$C6
09931 237B                        FC            .byte	$FC
09932 237C                        C6            .byte	$C6
09933 237D                        C6            .byte	$C6
09934 237E                        FC            .byte	$FC
09935 237F                        C0            .byte	$C0
09936 2380                        C0            .byte	$C0
09937 2381                        40            .byte	$40
09938 2382                        00            .byte	0
09939                                           ! 1187  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
09940 2383                        00            .byte	0
09941 2384                        00            .byte	0
09942 2385                        FE            .byte	$FE
09943 2386                        C6            .byte	$C6
09944 2387                        C6            .byte	$C6
09945 2388                        C0            .byte	$C0
09946 2389                        C0            .byte	$C0
09947 238A                        C0            .byte	$C0
09948 238B                        C0            .byte	$C0
09949 238C                        C0            .byte	$C0
09950 238D                        C0            .byte	$C0
09951 238E                        00            .byte	0
09952 238F                        00            .byte	0
09953 2390                        00            .byte	0
09954                                           ! 1188  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
09955 2391                        00            .byte	0
09956 2392                        00            .byte	0
09957 2393                        00            .byte	0
09958 2394                        00            .byte	0
09959 2395                        FE            .byte	$FE
09960 2396                        6C            .byte	$6C
09961 2397                        6C            .byte	$6C
09962 2398                        6C            .byte	$6C
09963 2399                        6C            .byte	$6C
09964 239A                        6C            .byte	$6C
09965 239B                        6C            .byte	$6C
09966 239C                        00            .byte	0
09967 239D                        00            .byte	0
09968 239E                        00            .byte	0
09969                                           ! 1189  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
09970 239F                        00            .byte	0
09971 23A0                        00            .byte	0
09972 23A1                        FE            .byte	$FE
09973 23A2                        C6            .byte	$C6
09974 23A3                        60            .byte	$60
09975 23A4                        30            .byte	$30
09976 23A5                        18            .byte	$18
09977 23A6                        30            .byte	$30
09978 23A7                        60            .byte	$60
09979 23A8                        C6            .byte	$C6
09980 23A9                        FE            .byte	$FE
09981 23AA                        00            .byte	0
09982 23AB                        00            .byte	0
09983 23AC                        00            .byte	0
09984                                           ! 1190  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
09985 23AD                        00            .byte	0
09986 23AE                        00            .byte	0
09987 23AF                        00            .byte	0
09988 23B0                        00            .byte	0
09989 23B1                        00            .byte	0
09990 23B2                        7E            .byte	$7E
09991 23B3                        D8            .byte	$D8
09992 23B4                        D8            .byte	$D8
09993 23B5                        D8            .byte	$D8
09994 23B6                        D8            .byte	$D8
09995 23B7                        70            .byte	$70
09996 23B8                        00            .byte	0
09997 23B9                        00            .byte	0
09998 23BA                        00            .byte	0
09999                                           ! 1191  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10000 23BB                        00            .byte	0
10001 23BC                        00            .byte	0
10002 23BD                        00            .byte	0
10003 23BE                        00            .byte	0
10004 23BF                        66            .byte	$66
10005 23C0                        66            .byte	$66
10006 23C1                        66            .byte	$66
10007 23C2                        66            .byte	$66
10008 23C3                        7C            .byte	$7C
10009 23C4                        60            .byte	$60
10010 23C5                        60            .byte	$60
10011 23C6                        C0            .byte	$C0
10012 23C7                        00            .byte	0
10013 23C8                        00            .byte	0
10014                                           ! 1192  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10015 23C9                        00            .byte	0
10016 23CA                        00            .byte	0
10017 23CB                        00            .byte	0
10018 23CC                        00            .byte	0
10019 23CD                        76            .byte	$76
10020 23CE                        DC            .byte	$DC
10021 23CF                        18            .byte	$18
10022 23D0                        18            .byte	$18
10023 23D1                        18            .byte	$18
10024 23D2                        18            .byte	$18
10025 23D3                        18            .byte	$18
10026 23D4                        00            .byte	0
10027 23D5                        00            .byte	0
10028 23D6                        00            .byte	0
10029                                           ! 1193  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10030 23D7                        00            .byte	0
10031 23D8                        00            .byte	0
10032 23D9                        7E            .byte	$7E
10033 23DA                        18            .byte	$18
10034 23DB                        3C            .byte	$3C
10035 23DC                        66            .byte	$66
10036 23DD                        66            .byte	$66
10037 23DE                        66            .byte	$66
10038 23DF                        3C            .byte	$3C
10039 23E0                        18            .byte	$18
10040 23E1                        7E            .byte	$7E
10041 23E2                        00            .byte	0
10042 23E3                        00            .byte	0
10043 23E4                        00            .byte	0
10044                                           ! 1194  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10045 23E5                        00            .byte	0
10046 23E6                        00            .byte	0
10047 23E7                        38            .byte	$38
10048 23E8                        6C            .byte	$6C
10049 23E9                        C6            .byte	$C6
10050 23EA                        C6            .byte	$C6
10051 23EB                        FE            .byte	$FE
10052 23EC                        C6            .byte	$C6
10053 23ED                        C6            .byte	$C6
10054 23EE                        6C            .byte	$6C
10055 23EF                        38            .byte	$38
10056 23F0                        00            .byte	0
10057 23F1                        00            .byte	0
10058 23F2                        00            .byte	0
10059                                           ! 1195  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10060 23F3                        00            .byte	0
10061 23F4                        00            .byte	0
10062 23F5                        38            .byte	$38
10063 23F6                        6C            .byte	$6C
10064 23F7                        C6            .byte	$C6
10065 23F8                        C6            .byte	$C6
10066 23F9                        C6            .byte	$C6
10067 23FA                        6C            .byte	$6C
10068 23FB                        6C            .byte	$6C
10069 23FC                        6C            .byte	$6C
10070 23FD                        EE            .byte	$EE
10071 23FE                        00            .byte	0
10072 23FF                        00            .byte	0
10073 2400                        00            .byte	0
10074                                           ! 1196  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10075 2401                        00            .byte	0
10076 2402                        00            .byte	0
10077 2403                        1E            .byte	$1E
10078 2404                        30            .byte	$30
10079 2405                        18            .byte	$18
10080 2406                        0C            .byte	$C
10081 2407                        3E            .byte	$3E
10082 2408                        66            .byte	$66
10083 2409                        66            .byte	$66
10084 240A                        66            .byte	$66
10085 240B                        3C            .byte	$3C
10086 240C                        00            .byte	0
10087 240D                        00            .byte	0
10088 240E                        00            .byte	0
10089                                           ! 1197  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10090 240F                        00            .byte	0
10091 2410                        00            .byte	0
10092 2411                        00            .byte	0
10093 2412                        00            .byte	0
10094 2413                        00            .byte	0
10095 2414                        7E            .byte	$7E
10096 2415                        DB            .byte	$DB
10097 2416                        DB            .byte	$DB
10098 2417                        7E            .byte	$7E
10099 2418                        00            .byte	0
10100 2419                        00            .byte	0
10101 241A                        00            .byte	0
10102 241B                        00            .byte	0
10103 241C                        00            .byte	0
10104                                           ! 1198  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10105 241D                        00            .byte	0
10106 241E                        00            .byte	0
10107 241F                        03            .byte	3
10108 2420                        06            .byte	6
10109 2421                        7E            .byte	$7E
10110 2422                        DB            .byte	$DB
10111 2423                        DB            .byte	$DB
10112 2424                        F3            .byte	$F3
10113 2425                        7E            .byte	$7E
10114 2426                        60            .byte	$60
10115 2427                        C0            .byte	$C0
10116 2428                        00            .byte	0
10117 2429                        00            .byte	0
10118 242A                        00            .byte	0
10119                                           ! 1199  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10120 242B                        00            .byte	0
10121 242C                        00            .byte	0
10122 242D                        1C            .byte	$1C
10123 242E                        30            .byte	$30
10124 242F                        60            .byte	$60
10125 2430                        60            .byte	$60
10126 2431                        7C            .byte	$7C
10127 2432                        60            .byte	$60
10128 2433                        60            .byte	$60
10129 2434                        30            .byte	$30
10130 2435                        1C            .byte	$1C
10131 2436                        00            .byte	0
10132 2437                        00            .byte	0
10133 2438                        00            .byte	0
10134                                           ! 1200  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10135 2439                        00            .byte	0
10136 243A                        00            .byte	0
10137 243B                        00            .byte	0
10138 243C                        7C            .byte	$7C
10139 243D                        C6            .byte	$C6
10140 243E                        C6            .byte	$C6
10141 243F                        C6            .byte	$C6
10142 2440                        C6            .byte	$C6
10143 2441                        C6            .byte	$C6
10144 2442                        C6            .byte	$C6
10145 2443                        C6            .byte	$C6
10146 2444                        00            .byte	0
10147 2445                        00            .byte	0
10148 2446                        00            .byte	0
10149                                           ! 1201  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10150 2447                        00            .byte	0
10151 2448                        00            .byte	0
10152 2449                        00            .byte	0
10153 244A                        FE            .byte	$FE
10154 244B                        00            .byte	0
10155 244C                        00            .byte	0
10156 244D                        FE            .byte	$FE
10157 244E                        00            .byte	0
10158 244F                        00            .byte	0
10159 2450                        FE            .byte	$FE
10160 2451                        00            .byte	0
10161 2452                        00            .byte	0
10162 2453                        00            .byte	0
10163 2454                        00            .byte	0
10164                                           ! 1202  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10165 2455                        00            .byte	0
10166 2456                        00            .byte	0
10167 2457                        00            .byte	0
10168 2458                        18            .byte	$18
10169 2459                        18            .byte	$18
10170 245A                        7E            .byte	$7E
10171 245B                        18            .byte	$18
10172 245C                        18            .byte	$18
10173 245D                        00            .byte	0
10174 245E                        00            .byte	0
10175 245F                        FF            .byte	$FF
10176 2460                        00            .byte	0
10177 2461                        00            .byte	0
10178 2462                        00            .byte	0
10179                                           ! 1203  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10180 2463                        00            .byte	0
10181 2464                        00            .byte	0
10182 2465                        30            .byte	$30
10183 2466                        18            .byte	$18
10184 2467                        0C            .byte	$C
10185 2468                        06            .byte	6
10186 2469                        0C            .byte	$C
10187 246A                        18            .byte	$18
10188 246B                        30            .byte	$30
10189 246C                        00            .byte	0
10190 246D                        7E            .byte	$7E
10191 246E                        00            .byte	0
10192 246F                        00            .byte	0
10193 2470                        00            .byte	0
10194                                           ! 1204  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10195 2471                        00            .byte	0
10196 2472                        00            .byte	0
10197 2473                        0C            .byte	$C
10198 2474                        18            .byte	$18
10199 2475                        30            .byte	$30
10200 2476                        60            .byte	$60
10201 2477                        30            .byte	$30
10202 2478                        18            .byte	$18
10203 2479                        0C            .byte	$C
10204 247A                        00            .byte	0
10205 247B                        7E            .byte	$7E
10206 247C                        00            .byte	0
10207 247D                        00            .byte	0
10208 247E                        00            .byte	0
10209                                           ! 1205  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10210 247F                        00            .byte	0
10211 2480                        00            .byte	0
10212 2481                        0E            .byte	$E
10213 2482                        1B            .byte	$1B
10214 2483                        1B            .byte	$1B
10215 2484                        18            .byte	$18
10216 2485                        18            .byte	$18
10217 2486                        18            .byte	$18
10218 2487                        18            .byte	$18
10219 2488                        18            .byte	$18
10220 2489                        18            .byte	$18
10221 248A                        18            .byte	$18
10222 248B                        18            .byte	$18
10223 248C                        18            .byte	$18
10224                                           ! 1206  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0
10225 248D                        18            .byte	$18
10226 248E                        18            .byte	$18
10227 248F                        18            .byte	$18
10228 2490                        18            .byte	$18
10229 2491                        18            .byte	$18
10230 2492                        18            .byte	$18
10231 2493                        18            .byte	$18
10232                                           ! 1206 x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10233 2494                        18            .byte	$18
10234 2495                        D8            .byte	$D8
10235 2496                        D8            .byte	$D8
10236 2497                        70            .byte	$70
10237 2498                        00            .byte	0
10238 2499                        00            .byte	0
10239 249A                        00            .byte	0
10240                                           ! 1207  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10241 249B                        00            .byte	0
10242 249C                        00            .byte	0
10243 249D                        00            .byte	0
10244 249E                        18            .byte	$18
10245 249F                        18            .byte	$18
10246 24A0                        00            .byte	0
10247 24A1                        7E            .byte	$7E
10248 24A2                        00            .byte	0
10249 24A3                        18            .byte	$18
10250 24A4                        18            .byte	$18
10251 24A5                        00            .byte	0
10252 24A6                        00            .byte	0
10253 24A7                        00            .byte	0
10254 24A8                        00            .byte	0
10255                                           ! 1208  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10256 24A9                        00            .byte	0
10257 24AA                        00            .byte	0
10258 24AB                        00            .byte	0
10259 24AC                        00            .byte	0
10260 24AD                        76            .byte	$76
10261 24AE                        DC            .byte	$DC
10262 24AF                        00            .byte	0
10263 24B0                        76            .byte	$76
10264 24B1                        DC            .byte	$DC
10265 24B2                        00            .byte	0
10266 24B3                        00            .byte	0
10267 24B4                        00            .byte	0
10268 24B5                        00            .byte	0
10269 24B6                        00            .byte	0
10270                                           ! 1209  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10271 24B7                        00            .byte	0
10272 24B8                        38            .byte	$38
10273 24B9                        6C            .byte	$6C
10274 24BA                        6C            .byte	$6C
10275 24BB                        38            .byte	$38
10276 24BC                        00            .byte	0
10277 24BD                        00            .byte	0
10278 24BE                        00            .byte	0
10279 24BF                        00            .byte	0
10280 24C0                        00            .byte	0
10281 24C1                        00            .byte	0
10282 24C2                        00            .byte	0
10283 24C3                        00            .byte	0
10284 24C4                        00            .byte	0
10285                                           ! 1210  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10286 24C5                        00            .byte	0
10287 24C6                        00            .byte	0
10288 24C7                        00            .byte	0
10289 24C8                        00            .byte	0
10290 24C9                        00            .byte	0
10291 24CA                        00            .byte	0
10292 24CB                        18            .byte	$18
10293 24CC                        18            .byte	$18
10294 24CD                        00            .byte	0
10295 24CE                        00            .byte	0
10296 24CF                        00            .byte	0
10297 24D0                        00            .byte	0
10298 24D1                        00            .byte	0
10299 24D2                        00            .byte	0
10300                                           ! 1211  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10301 24D3                        00            .byte	0
10302 24D4                        00            .byte	0
10303 24D5                        00            .byte	0
10304 24D6                        00            .byte	0
10305 24D7                        00            .byte	0
10306 24D8                        00            .byte	0
10307 24D9                        00            .byte	0
10308 24DA                        18            .byte	$18
10309 24DB                        00            .byte	0
10310 24DC                        00            .byte	0
10311 24DD                        00            .byte	0
10312 24DE                        00            .byte	0
10313 24DF                        00            .byte	0
10314 24E0                        00            .byte	0
10315                                           ! 1212  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10316 24E1                        00            .byte	0
10317 24E2                        0F            .byte	$F
10318 24E3                        0C            .byte	$C
10319 24E4                        0C            .byte	$C
10320 24E5                        0C            .byte	$C
10321 24E6                        0C            .byte	$C
10322 24E7                        0C            .byte	$C
10323 24E8                        EC            .byte	$EC
10324 24E9                        6C            .byte	$6C
10325 24EA                        3C            .byte	$3C
10326 24EB                        1C            .byte	$1C
10327 24EC                        00            .byte	0
10328 24ED                        00            .byte	0
10329 24EE                        00            .byte	0
10330                                           ! 1213  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10331 24EF                        00            .byte	0
10332 24F0                        D8            .byte	$D8
10333 24F1                        6C            .byte	$6C
10334 24F2                        6C            .byte	$6C
10335 24F3                        6C            .byte	$6C
10336 24F4                        6C            .byte	$6C
10337 24F5                        6C            .byte	$6C
10338 24F6                        00            .byte	0
10339 24F7                        00            .byte	0
10340 24F8                        00            .byte	0
10341 24F9                        00            .byte	0
10342 24FA                        00            .byte	0
10343 24FB                        00            .byte	0
10344 24FC                        00            .byte	0
10345                                           ! 1214  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10346 24FD                        00            .byte	0
10347 24FE                        70            .byte	$70
10348 24FF                        D8            .byte	$D8
10349 2500                        30            .byte	$30
10350 2501                        60            .byte	$60
10351 2502                        C8            .byte	$C8
10352 2503                        F8            .byte	$F8
10353 2504                        00            .byte	0
10354 2505                        00            .byte	0
10355 2506                        00            .byte	0
10356 2507                        00            .byte	0
10357 2508                        00            .byte	0
10358 2509                        00            .byte	0
10359 250A                        00            .byte	0
10360                                           ! 1215  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10361 250B                        00            .byte	0
10362 250C                        00            .byte	0
10363 250D                        00            .byte	0
10364 250E                        00            .byte	0
10365 250F                        7C            .byte	$7C
10366 2510                        7C            .byte	$7C
10367 2511                        7C            .byte	$7C
10368 2512                        7C            .byte	$7C
10369 2513                        7C            .byte	$7C
10370 2514                        7C            .byte	$7C
10371 2515                        00            .byte	0
10372 2516                        00            .byte	0
10373 2517                        00            .byte	0
10374 2518                        00            .byte	0
10375                                           ! 1216  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10376 2519                        00            .byte	0
10377 251A                        00            .byte	0
10378 251B                        00            .byte	0
10379 251C                        00            .byte	0
10380 251D                        00            .byte	0
10381 251E                        00            .byte	0
10382 251F                        00            .byte	0
10383 2520                        00            .byte	0
10384 2521                        00            .byte	0
10385 2522                        00            .byte	0
10386 2523                        00            .byte	0
10387 2524                        00            .byte	0
10388 2525                        00            .byte	0
10389                                           ! 1217 };
10390 2526                        00            .byte	0
10391                                           !BCC_EOS
10392                                           ! 1218 static Bit8u vgafont16[256*16]=
10393                                           ! 1219 {
10394                       00002527            _vgafont16:
10395                                           ! 1220  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10396 2527                        00            .byte	0
10397 2528                        00            .byte	0
10398 2529                        00            .byte	0
10399 252A                        00            .byte	0
10400 252B                        00            .byte	0
10401 252C                        00            .byte	0
10402 252D                        00            .byte	0
10403 252E                        00            .byte	0
10404 252F                        00            .byte	0
10405 2530                        00            .byte	0
10406 2531                        00            .byte	0
10407 2532                        00            .byte	0
10408 2533                        00            .byte	0
10409 2534                        00            .byte	0
10410 2535                        00            .byte	0
10411 2536                        00            .byte	0
10412                                           ! 1221  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10413 2537                        00            .byte	0
10414 2538                        00            .byte	0
10415 2539                        7E            .byte	$7E
10416 253A                        81            .byte	$81
10417 253B                        A5            .byte	$A5
10418 253C                        81            .byte	$81
10419 253D                        81            .byte	$81
10420 253E                        BD            .byte	$BD
10421 253F                        99            .byte	$99
10422 2540                        81            .byte	$81
10423 2541                        81            .byte	$81
10424 2542                        7E            .byte	$7E
10425 2543                        00            .byte	0
10426 2544                        00            .byte	0
10427 2545                        00            .byte	0
10428 2546                        00            .byte	0
10429                                           ! 1222  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10430 2547                        00            .byte	0
10431 2548                        00            .byte	0
10432 2549                        7E            .byte	$7E
10433 254A                        FF            .byte	$FF
10434 254B                        DB            .byte	$DB
10435 254C                        FF            .byte	$FF
10436 254D                        FF            .byte	$FF
10437 254E                        C3            .byte	$C3
10438 254F                        E7            .byte	$E7
10439 2550                        FF            .byte	$FF
10440 2551                        FF            .byte	$FF
10441 2552                        7E            .byte	$7E
10442 2553                        00            .byte	0
10443 2554                        00            .byte	0
10444 2555                        00            .byte	0
10445 2556                        00            .byte	0
10446                                           ! 1223  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10447 2557                        00            .byte	0
10448 2558                        00            .byte	0
10449 2559                        00            .byte	0
10450 255A                        00            .byte	0
10451 255B                        6C            .byte	$6C
10452 255C                        FE            .byte	$FE
10453 255D                        FE            .byte	$FE
10454 255E                        FE            .byte	$FE
10455 255F                        FE            .byte	$FE
10456 2560                        7C            .byte	$7C
10457 2561                        38            .byte	$38
10458 2562                        10            .byte	$10
10459 2563                        00            .byte	0
10460 2564                        00            .byte	0
10461 2565                        00            .byte	0
10462 2566                        00            .byte	0
10463                                           ! 1224  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10464 2567                        00            .byte	0
10465 2568                        00            .byte	0
10466 2569                        00            .byte	0
10467 256A                        00            .byte	0
10468 256B                        10            .byte	$10
10469 256C                        38            .byte	$38
10470 256D                        7C            .byte	$7C
10471 256E                        FE            .byte	$FE
10472 256F                        7C            .byte	$7C
10473 2570                        38            .byte	$38
10474 2571                        10            .byte	$10
10475 2572                        00            .byte	0
10476 2573                        00            .byte	0
10477 2574                        00            .byte	0
10478 2575                        00            .byte	0
10479 2576                        00            .byte	0
10480                                           ! 1225  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10481 2577                        00            .byte	0
10482 2578                        00            .byte	0
10483 2579                        00            .byte	0
10484 257A                        18            .byte	$18
10485 257B                        3C            .byte	$3C
10486 257C                        3C            .byte	$3C
10487 257D                        E7            .byte	$E7
10488 257E                        E7            .byte	$E7
10489 257F                        E7            .byte	$E7
10490 2580                        18            .byte	$18
10491 2581                        18            .byte	$18
10492 2582                        3C            .byte	$3C
10493 2583                        00            .byte	0
10494 2584                        00            .byte	0
10495 2585                        00            .byte	0
10496 2586                        00            .byte	0
10497                                           ! 1226  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10498 2587                        00            .byte	0
10499 2588                        00            .byte	0
10500 2589                        00            .byte	0
10501 258A                        18            .byte	$18
10502 258B                        3C            .byte	$3C
10503 258C                        7E            .byte	$7E
10504 258D                        FF            .byte	$FF
10505 258E                        FF            .byte	$FF
10506 258F                        7E            .byte	$7E
10507 2590                        18            .byte	$18
10508 2591                        18            .byte	$18
10509 2592                        3C            .byte	$3C
10510 2593                        00            .byte	0
10511 2594                        00            .byte	0
10512 2595                        00            .byte	0
10513 2596                        00            .byte	0
10514                                           ! 1227  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10515 2597                        00            .byte	0
10516 2598                        00            .byte	0
10517 2599                        00            .byte	0
10518 259A                        00            .byte	0
10519 259B                        00            .byte	0
10520 259C                        00            .byte	0
10521 259D                        18            .byte	$18
10522 259E                        3C            .byte	$3C
10523 259F                        3C            .byte	$3C
10524 25A0                        18            .byte	$18
10525 25A1                        00            .byte	0
10526 25A2                        00            .byte	0
10527 25A3                        00            .byte	0
10528 25A4                        00            .byte	0
10529 25A5                        00            .byte	0
10530 25A6                        00            .byte	0
10531                                           ! 1228  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10532 25A7                        FF            .byte	$FF
10533 25A8                        FF            .byte	$FF
10534 25A9                        FF            .byte	$FF
10535 25AA                        FF            .byte	$FF
10536 25AB                        FF            .byte	$FF
10537 25AC                        FF            .byte	$FF
10538 25AD                        E7            .byte	$E7
10539 25AE                        C3            .byte	$C3
10540 25AF                        C3            .byte	$C3
10541 25B0                        E7            .byte	$E7
10542 25B1                        FF            .byte	$FF
10543 25B2                        FF            .byte	$FF
10544 25B3                        FF            .byte	$FF
10545 25B4                        FF            .byte	$FF
10546 25B5                        FF            .byte	$FF
10547 25B6                        FF            .byte	$FF
10548                                           ! 1229  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10549 25B7                        00            .byte	0
10550 25B8                        00            .byte	0
10551 25B9                        00            .byte	0
10552 25BA                        00            .byte	0
10553 25BB                        00            .byte	0
10554 25BC                        3C            .byte	$3C
10555 25BD                        66            .byte	$66
10556 25BE                        42            .byte	$42
10557 25BF                        42            .byte	$42
10558 25C0                        66            .byte	$66
10559 25C1                        3C            .byte	$3C
10560 25C2                        00            .byte	0
10561 25C3                        00            .byte	0
10562 25C4                        00            .byte	0
10563 25C5                        00            .byte	0
10564 25C6                        00            .byte	0
10565                                           ! 1230  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10566 25C7                        FF            .byte	$FF
10567 25C8                        FF            .byte	$FF
10568 25C9                        FF            .byte	$FF
10569 25CA                        FF            .byte	$FF
10570 25CB                        FF            .byte	$FF
10571 25CC                        C3            .byte	$C3
10572 25CD                        99            .byte	$99
10573 25CE                        BD            .byte	$BD
10574 25CF                        BD            .byte	$BD
10575 25D0                        99            .byte	$99
10576 25D1                        C3            .byte	$C3
10577 25D2                        FF            .byte	$FF
10578 25D3                        FF            .byte	$FF
10579 25D4                        FF            .byte	$FF
10580 25D5                        FF            .byte	$FF
10581 25D6                        FF            .byte	$FF
10582                                           ! 1231  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc,
10583 25D7                        00            .byte	0
10584 25D8                        00            .byte	0
10585 25D9                        1E            .byte	$1E
10586 25DA                        0E            .byte	$E
10587 25DB                        1A            .byte	$1A
10588 25DC                        32            .byte	$32
10589 25DD                        78            .byte	$78
10590 25DE                        CC            .byte	$CC
10591                                           ! 1231  0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10592 25DF                        CC            .byte	$CC
10593 25E0                        CC            .byte	$CC
10594 25E1                        CC            .byte	$CC
10595 25E2                        78            .byte	$78
10596 25E3                        00            .byte	0
10597 25E4                        00            .byte	0
10598 25E5                        00            .byte	0
10599 25E6                        00            .byte	0
10600                                           ! 1232  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10601 25E7                        00            .byte	0
10602 25E8                        00            .byte	0
10603 25E9                        3C            .byte	$3C
10604 25EA                        66            .byte	$66
10605 25EB                        66            .byte	$66
10606 25EC                        66            .byte	$66
10607 25ED                        66            .byte	$66
10608 25EE                        3C            .byte	$3C
10609 25EF                        18            .byte	$18
10610 25F0                        7E            .byte	$7E
10611 25F1                        18            .byte	$18
10612 25F2                        18            .byte	$18
10613 25F3                        00            .byte	0
10614 25F4                        00            .byte	0
10615 25F5                        00            .byte	0
10616 25F6                        00            .byte	0
10617                                           ! 1233  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10618 25F7                        00            .byte	0
10619 25F8                        00            .byte	0
10620 25F9                        3F            .byte	$3F
10621 25FA                        33            .byte	$33
10622 25FB                        3F            .byte	$3F
10623 25FC                        30            .byte	$30
10624 25FD                        30            .byte	$30
10625 25FE                        30            .byte	$30
10626 25FF                        30            .byte	$30
10627 2600                        70            .byte	$70
10628 2601                        F0            .byte	$F0
10629 2602                        E0            .byte	$E0
10630 2603                        00            .byte	0
10631 2604                        00            .byte	0
10632 2605                        00            .byte	0
10633 2606                        00            .byte	0
10634                                           ! 1234  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10635 2607                        00            .byte	0
10636 2608                        00            .byte	0
10637 2609                        7F            .byte	$7F
10638 260A                        63            .byte	$63
10639 260B                        7F            .byte	$7F
10640 260C                        63            .byte	$63
10641 260D                        63            .byte	$63
10642 260E                        63            .byte	$63
10643 260F                        63            .byte	$63
10644 2610                        67            .byte	$67
10645 2611                        E7            .byte	$E7
10646 2612                        E6            .byte	$E6
10647 2613                        C0            .byte	$C0
10648 2614                        00            .byte	0
10649 2615                        00            .byte	0
10650 2616                        00            .byte	0
10651                                           ! 1235  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10652 2617                        00            .byte	0
10653 2618                        00            .byte	0
10654 2619                        00            .byte	0
10655 261A                        18            .byte	$18
10656 261B                        18            .byte	$18
10657 261C                        DB            .byte	$DB
10658 261D                        3C            .byte	$3C
10659 261E                        E7            .byte	$E7
10660 261F                        3C            .byte	$3C
10661 2620                        DB            .byte	$DB
10662 2621                        18            .byte	$18
10663 2622                        18            .byte	$18
10664 2623                        00            .byte	0
10665 2624                        00            .byte	0
10666 2625                        00            .byte	0
10667 2626                        00            .byte	0
10668                                           ! 1236  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10669 2627                        00            .byte	0
10670 2628                        80            .byte	$80
10671 2629                        C0            .byte	$C0
10672 262A                        E0            .byte	$E0
10673 262B                        F0            .byte	$F0
10674 262C                        F8            .byte	$F8
10675 262D                        FE            .byte	$FE
10676 262E                        F8            .byte	$F8
10677 262F                        F0            .byte	$F0
10678 2630                        E0            .byte	$E0
10679 2631                        C0            .byte	$C0
10680 2632                        80            .byte	$80
10681 2633                        00            .byte	0
10682 2634                        00            .byte	0
10683 2635                        00            .byte	0
10684 2636                        00            .byte	0
10685                                           ! 1237  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10686 2637                        00            .byte	0
10687 2638                        02            .byte	2
10688 2639                        06            .byte	6
10689 263A                        0E            .byte	$E
10690 263B                        1E            .byte	$1E
10691 263C                        3E            .byte	$3E
10692 263D                        FE            .byte	$FE
10693 263E                        3E            .byte	$3E
10694 263F                        1E            .byte	$1E
10695 2640                        0E            .byte	$E
10696 2641                        06            .byte	6
10697 2642                        02            .byte	2
10698 2643                        00            .byte	0
10699 2644                        00            .byte	0
10700 2645                        00            .byte	0
10701 2646                        00            .byte	0
10702                                           ! 1238  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
10703 2647                        00            .byte	0
10704 2648                        00            .byte	0
10705 2649                        18            .byte	$18
10706 264A                        3C            .byte	$3C
10707 264B                        7E            .byte	$7E
10708 264C                        18            .byte	$18
10709 264D                        18            .byte	$18
10710 264E                        18            .byte	$18
10711 264F                        7E            .byte	$7E
10712 2650                        3C            .byte	$3C
10713 2651                        18            .byte	$18
10714 2652                        00            .byte	0
10715 2653                        00            .byte	0
10716 2654                        00            .byte	0
10717 2655                        00            .byte	0
10718 2656                        00            .byte	0
10719                                           ! 1239  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
10720 2657                        00            .byte	0
10721 2658                        00            .byte	0
10722 2659                        66            .byte	$66
10723 265A                        66            .byte	$66
10724 265B                        66            .byte	$66
10725 265C                        66            .byte	$66
10726 265D                        66            .byte	$66
10727 265E                        66            .byte	$66
10728 265F                        66            .byte	$66
10729 2660                        00            .byte	0
10730 2661                        66            .byte	$66
10731 2662                        66            .byte	$66
10732 2663                        00            .byte	0
10733 2664                        00            .byte	0
10734 2665                        00            .byte	0
10735 2666                        00            .byte	0
10736                                           ! 1240  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
10737 2667                        00            .byte	0
10738 2668                        00            .byte	0
10739 2669                        7F            .byte	$7F
10740 266A                        DB            .byte	$DB
10741 266B                        DB            .byte	$DB
10742 266C                        DB            .byte	$DB
10743 266D                        7B            .byte	$7B
10744 266E                        1B            .byte	$1B
10745 266F                        1B            .byte	$1B
10746 2670                        1B            .byte	$1B
10747 2671                        1B            .byte	$1B
10748 2672                        1B            .byte	$1B
10749 2673                        00            .byte	0
10750 2674                        00            .byte	0
10751 2675                        00            .byte	0
10752 2676                        00            .byte	0
10753                                           ! 1241  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
10754 2677                        00            .byte	0
10755 2678                        7C            .byte	$7C
10756 2679                        C6            .byte	$C6
10757 267A                        60            .byte	$60
10758 267B                        38            .byte	$38
10759 267C                        6C            .byte	$6C
10760 267D                        C6            .byte	$C6
10761 267E                        C6            .byte	$C6
10762 267F                        6C            .byte	$6C
10763 2680                        38            .byte	$38
10764 2681                        0C            .byte	$C
10765 2682                        C6            .byte	$C6
10766 2683                        7C            .byte	$7C
10767 2684                        00            .byte	0
10768 2685                        00            .byte	0
10769 2686                        00            .byte	0
10770                                           ! 1242  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
10771 2687                        00            .byte	0
10772 2688                        00            .byte	0
10773 2689                        00            .byte	0
10774 268A                        00            .byte	0
10775 268B                        00            .byte	0
10776 268C                        00            .byte	0
10777 268D                        00            .byte	0
10778 268E                        00            .byte	0
10779 268F                        FE            .byte	$FE
10780 2690                        FE            .byte	$FE
10781 2691                        FE            .byte	$FE
10782 2692                        FE            .byte	$FE
10783 2693                        00            .byte	0
10784 2694                        00            .byte	0
10785 2695                        00            .byte	0
10786 2696                        00            .byte	0
10787                                           ! 1243  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
10788 2697                        00            .byte	0
10789 2698                        00            .byte	0
10790 2699                        18            .byte	$18
10791 269A                        3C            .byte	$3C
10792 269B                        7E            .byte	$7E
10793 269C                        18            .byte	$18
10794 269D                        18            .byte	$18
10795 269E                        18            .byte	$18
10796 269F                        7E            .byte	$7E
10797 26A0                        3C            .byte	$3C
10798 26A1                        18            .byte	$18
10799 26A2                        7E            .byte	$7E
10800 26A3                        00            .byte	0
10801 26A4                        00            .byte	0
10802 26A5                        00            .byte	0
10803 26A6                        00            .byte	0
10804                                           ! 1244  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10805 26A7                        00            .byte	0
10806 26A8                        00            .byte	0
10807 26A9                        18            .byte	$18
10808 26AA                        3C            .byte	$3C
10809 26AB                        7E            .byte	$7E
10810 26AC                        18            .byte	$18
10811 26AD                        18            .byte	$18
10812 26AE                        18            .byte	$18
10813 26AF                        18            .byte	$18
10814 26B0                        18            .byte	$18
10815 26B1                        18            .byte	$18
10816 26B2                        18            .byte	$18
10817 26B3                        00            .byte	0
10818 26B4                        00            .byte	0
10819 26B5                        00            .byte	0
10820 26B6                        00            .byte	0
10821                                           ! 1245  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
10822 26B7                        00            .byte	0
10823 26B8                        00            .byte	0
10824 26B9                        18            .byte	$18
10825 26BA                        18            .byte	$18
10826 26BB                        18            .byte	$18
10827 26BC                        18            .byte	$18
10828 26BD                        18            .byte	$18
10829 26BE                        18            .byte	$18
10830 26BF                        18            .byte	$18
10831 26C0                        7E            .byte	$7E
10832 26C1                        3C            .byte	$3C
10833 26C2                        18            .byte	$18
10834 26C3                        00            .byte	0
10835 26C4                        00            .byte	0
10836 26C5                        00            .byte	0
10837 26C6                        00            .byte	0
10838                                           ! 1246  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10839 26C7                        00            .byte	0
10840 26C8                        00            .byte	0
10841 26C9                        00            .byte	0
10842 26CA                        00            .byte	0
10843 26CB                        00            .byte	0
10844 26CC                        18            .byte	$18
10845 26CD                        0C            .byte	$C
10846 26CE                        FE            .byte	$FE
10847 26CF                        0C            .byte	$C
10848 26D0                        18            .byte	$18
10849 26D1                        00            .byte	0
10850 26D2                        00            .byte	0
10851 26D3                        00            .byte	0
10852 26D4                        00            .byte	0
10853 26D5                        00            .byte	0
10854 26D6                        00            .byte	0
10855                                           ! 1247  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10856 26D7                        00            .byte	0
10857 26D8                        00            .byte	0
10858 26D9                        00            .byte	0
10859 26DA                        00            .byte	0
10860 26DB                        00            .byte	0
10861 26DC                        30            .byte	$30
10862 26DD                        60            .byte	$60
10863 26DE                        FE            .byte	$FE
10864 26DF                        60            .byte	$60
10865 26E0                        30            .byte	$30
10866 26E1                        00            .byte	0
10867 26E2                        00            .byte	0
10868 26E3                        00            .byte	0
10869 26E4                        00            .byte	0
10870 26E5                        00            .byte	0
10871 26E6                        00            .byte	0
10872                                           ! 1248  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10873 26E7                        00            .byte	0
10874 26E8                        00            .byte	0
10875 26E9                        00            .byte	0
10876 26EA                        00            .byte	0
10877 26EB                        00            .byte	0
10878 26EC                        00            .byte	0
10879 26ED                        C0            .byte	$C0
10880 26EE                        C0            .byte	$C0
10881 26EF                        C0            .byte	$C0
10882 26F0                        FE            .byte	$FE
10883 26F1                        00            .byte	0
10884 26F2                        00            .byte	0
10885 26F3                        00            .byte	0
10886 26F4                        00            .byte	0
10887 26F5                        00            .byte	0
10888 26F6                        00            .byte	0
10889                                           ! 1249  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10890 26F7                        00            .byte	0
10891 26F8                        00            .byte	0
10892 26F9                        00            .byte	0
10893 26FA                        00            .byte	0
10894 26FB                        00            .byte	0
10895 26FC                        24            .byte	$24
10896 26FD                        66            .byte	$66
10897 26FE                        FF            .byte	$FF
10898 26FF                        66            .byte	$66
10899 2700                        24            .byte	$24
10900 2701                        00            .byte	0
10901 2702                        00            .byte	0
10902 2703                        00            .byte	0
10903 2704                        00            .byte	0
10904 2705                        00            .byte	0
10905 2706                        00            .byte	0
10906                                           ! 1250  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
10907 2707                        00            .byte	0
10908 2708                        00            .byte	0
10909 2709                        00            .byte	0
10910 270A                        00            .byte	0
10911 270B                        10            .byte	$10
10912 270C                        38            .byte	$38
10913 270D                        38            .byte	$38
10914 270E                        7C            .byte	$7C
10915 270F                        7C            .byte	$7C
10916 2710                        FE            .byte	$FE
10917 2711                        FE            .byte	$FE
10918 2712                        00            .byte	0
10919 2713                        00            .byte	0
10920 2714                        00            .byte	0
10921 2715                        00            .byte	0
10922 2716                        00            .byte	0
10923                                           ! 1251  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10924 2717                        00            .byte	0
10925 2718                        00            .byte	0
10926 2719                        00            .byte	0
10927 271A                        00            .byte	0
10928 271B                        FE            .byte	$FE
10929 271C                        FE            .byte	$FE
10930 271D                        7C            .byte	$7C
10931 271E                        7C            .byte	$7C
10932 271F                        38            .byte	$38
10933 2720                        38            .byte	$38
10934 2721                        10            .byte	$10
10935 2722                        00            .byte	0
10936 2723                        00            .byte	0
10937 2724                        00            .byte	0
10938 2725                        00            .byte	0
10939 2726                        00            .byte	0
10940                                           ! 1252  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10941 2727                        00            .byte	0
10942 2728                        00            .byte	0
10943 2729                        00            .byte	0
10944 272A                        00            .byte	0
10945 272B                        00            .byte	0
10946 272C                        00            .byte	0
10947 272D                        00            .byte	0
10948 272E                        00            .byte	0
10949 272F                        00            .byte	0
10950 2730                        00            .byte	0
10951                                           ! 1252 , 0x00, 0x00, 0x00, 0x00, 0x00,
10952 2731                        00            .byte	0
10953 2732                        00            .byte	0
10954 2733                        00            .byte	0
10955 2734                        00            .byte	0
10956 2735                        00            .byte	0
10957 2736                        00            .byte	0
10958                                           ! 1253  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10959 2737                        00            .byte	0
10960 2738                        00            .byte	0
10961 2739                        18            .byte	$18
10962 273A                        3C            .byte	$3C
10963 273B                        3C            .byte	$3C
10964 273C                        3C            .byte	$3C
10965 273D                        18            .byte	$18
10966 273E                        18            .byte	$18
10967 273F                        18            .byte	$18
10968 2740                        00            .byte	0
10969 2741                        18            .byte	$18
10970 2742                        18            .byte	$18
10971 2743                        00            .byte	0
10972 2744                        00            .byte	0
10973 2745                        00            .byte	0
10974 2746                        00            .byte	0
10975                                           ! 1254  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10976 2747                        00            .byte	0
10977 2748                        66            .byte	$66
10978 2749                        66            .byte	$66
10979 274A                        66            .byte	$66
10980 274B                        24            .byte	$24
10981 274C                        00            .byte	0
10982 274D                        00            .byte	0
10983 274E                        00            .byte	0
10984 274F                        00            .byte	0
10985 2750                        00            .byte	0
10986 2751                        00            .byte	0
10987 2752                        00            .byte	0
10988 2753                        00            .byte	0
10989 2754                        00            .byte	0
10990 2755                        00            .byte	0
10991 2756                        00            .byte	0
10992                                           ! 1255  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
10993 2757                        00            .byte	0
10994 2758                        00            .byte	0
10995 2759                        00            .byte	0
10996 275A                        6C            .byte	$6C
10997 275B                        6C            .byte	$6C
10998 275C                        FE            .byte	$FE
10999 275D                        6C            .byte	$6C
11000 275E                        6C            .byte	$6C
11001 275F                        6C            .byte	$6C
11002 2760                        FE            .byte	$FE
11003 2761                        6C            .byte	$6C
11004 2762                        6C            .byte	$6C
11005 2763                        00            .byte	0
11006 2764                        00            .byte	0
11007 2765                        00            .byte	0
11008 2766                        00            .byte	0
11009                                           ! 1256  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11010 2767                        18            .byte	$18
11011 2768                        18            .byte	$18
11012 2769                        7C            .byte	$7C
11013 276A                        C6            .byte	$C6
11014 276B                        C2            .byte	$C2
11015 276C                        C0            .byte	$C0
11016 276D                        7C            .byte	$7C
11017 276E                        06            .byte	6
11018 276F                        06            .byte	6
11019 2770                        86            .byte	$86
11020 2771                        C6            .byte	$C6
11021 2772                        7C            .byte	$7C
11022 2773                        18            .byte	$18
11023 2774                        18            .byte	$18
11024 2775                        00            .byte	0
11025 2776                        00            .byte	0
11026                                           ! 1257  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11027 2777                        00            .byte	0
11028 2778                        00            .byte	0
11029 2779                        00            .byte	0
11030 277A                        00            .byte	0
11031 277B                        C2            .byte	$C2
11032 277C                        C6            .byte	$C6
11033 277D                        0C            .byte	$C
11034 277E                        18            .byte	$18
11035 277F                        30            .byte	$30
11036 2780                        60            .byte	$60
11037 2781                        C6            .byte	$C6
11038 2782                        86            .byte	$86
11039 2783                        00            .byte	0
11040 2784                        00            .byte	0
11041 2785                        00            .byte	0
11042 2786                        00            .byte	0
11043                                           ! 1258  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11044 2787                        00            .byte	0
11045 2788                        00            .byte	0
11046 2789                        38            .byte	$38
11047 278A                        6C            .byte	$6C
11048 278B                        6C            .byte	$6C
11049 278C                        38            .byte	$38
11050 278D                        76            .byte	$76
11051 278E                        DC            .byte	$DC
11052 278F                        CC            .byte	$CC
11053 2790                        CC            .byte	$CC
11054 2791                        CC            .byte	$CC
11055 2792                        76            .byte	$76
11056 2793                        00            .byte	0
11057 2794                        00            .byte	0
11058 2795                        00            .byte	0
11059 2796                        00            .byte	0
11060                                           ! 1259  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11061 2797                        00            .byte	0
11062 2798                        30            .byte	$30
11063 2799                        30            .byte	$30
11064 279A                        30            .byte	$30
11065 279B                        60            .byte	$60
11066 279C                        00            .byte	0
11067 279D                        00            .byte	0
11068 279E                        00            .byte	0
11069 279F                        00            .byte	0
11070 27A0                        00            .byte	0
11071 27A1                        00            .byte	0
11072 27A2                        00            .byte	0
11073 27A3                        00            .byte	0
11074 27A4                        00            .byte	0
11075 27A5                        00            .byte	0
11076 27A6                        00            .byte	0
11077                                           ! 1260  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11078 27A7                        00            .byte	0
11079 27A8                        00            .byte	0
11080 27A9                        0C            .byte	$C
11081 27AA                        18            .byte	$18
11082 27AB                        30            .byte	$30
11083 27AC                        30            .byte	$30
11084 27AD                        30            .byte	$30
11085 27AE                        30            .byte	$30
11086 27AF                        30            .byte	$30
11087 27B0                        30            .byte	$30
11088 27B1                        18            .byte	$18
11089 27B2                        0C            .byte	$C
11090 27B3                        00            .byte	0
11091 27B4                        00            .byte	0
11092 27B5                        00            .byte	0
11093 27B6                        00            .byte	0
11094                                           ! 1261  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11095 27B7                        00            .byte	0
11096 27B8                        00            .byte	0
11097 27B9                        30            .byte	$30
11098 27BA                        18            .byte	$18
11099 27BB                        0C            .byte	$C
11100 27BC                        0C            .byte	$C
11101 27BD                        0C            .byte	$C
11102 27BE                        0C            .byte	$C
11103 27BF                        0C            .byte	$C
11104 27C0                        0C            .byte	$C
11105 27C1                        18            .byte	$18
11106 27C2                        30            .byte	$30
11107 27C3                        00            .byte	0
11108 27C4                        00            .byte	0
11109 27C5                        00            .byte	0
11110 27C6                        00            .byte	0
11111                                           ! 1262  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11112 27C7                        00            .byte	0
11113 27C8                        00            .byte	0
11114 27C9                        00            .byte	0
11115 27CA                        00            .byte	0
11116 27CB                        00            .byte	0
11117 27CC                        66            .byte	$66
11118 27CD                        3C            .byte	$3C
11119 27CE                        FF            .byte	$FF
11120 27CF                        3C            .byte	$3C
11121 27D0                        66            .byte	$66
11122 27D1                        00            .byte	0
11123 27D2                        00            .byte	0
11124 27D3                        00            .byte	0
11125 27D4                        00            .byte	0
11126 27D5                        00            .byte	0
11127 27D6                        00            .byte	0
11128                                           ! 1263  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11129 27D7                        00            .byte	0
11130 27D8                        00            .byte	0
11131 27D9                        00            .byte	0
11132 27DA                        00            .byte	0
11133 27DB                        00            .byte	0
11134 27DC                        18            .byte	$18
11135 27DD                        18            .byte	$18
11136 27DE                        7E            .byte	$7E
11137 27DF                        18            .byte	$18
11138 27E0                        18            .byte	$18
11139 27E1                        00            .byte	0
11140 27E2                        00            .byte	0
11141 27E3                        00            .byte	0
11142 27E4                        00            .byte	0
11143 27E5                        00            .byte	0
11144 27E6                        00            .byte	0
11145                                           ! 1264  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11146 27E7                        00            .byte	0
11147 27E8                        00            .byte	0
11148 27E9                        00            .byte	0
11149 27EA                        00            .byte	0
11150 27EB                        00            .byte	0
11151 27EC                        00            .byte	0
11152 27ED                        00            .byte	0
11153 27EE                        00            .byte	0
11154 27EF                        00            .byte	0
11155 27F0                        18            .byte	$18
11156 27F1                        18            .byte	$18
11157 27F2                        18            .byte	$18
11158 27F3                        30            .byte	$30
11159 27F4                        00            .byte	0
11160 27F5                        00            .byte	0
11161 27F6                        00            .byte	0
11162                                           ! 1265  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11163 27F7                        00            .byte	0
11164 27F8                        00            .byte	0
11165 27F9                        00            .byte	0
11166 27FA                        00            .byte	0
11167 27FB                        00            .byte	0
11168 27FC                        00            .byte	0
11169 27FD                        00            .byte	0
11170 27FE                        FE            .byte	$FE
11171 27FF                        00            .byte	0
11172 2800                        00            .byte	0
11173 2801                        00            .byte	0
11174 2802                        00            .byte	0
11175 2803                        00            .byte	0
11176 2804                        00            .byte	0
11177 2805                        00            .byte	0
11178 2806                        00            .byte	0
11179                                           ! 1266  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11180 2807                        00            .byte	0
11181 2808                        00            .byte	0
11182 2809                        00            .byte	0
11183 280A                        00            .byte	0
11184 280B                        00            .byte	0
11185 280C                        00            .byte	0
11186 280D                        00            .byte	0
11187 280E                        00            .byte	0
11188 280F                        00            .byte	0
11189 2810                        00            .byte	0
11190 2811                        18            .byte	$18
11191 2812                        18            .byte	$18
11192 2813                        00            .byte	0
11193 2814                        00            .byte	0
11194 2815                        00            .byte	0
11195 2816                        00            .byte	0
11196                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11197 2817                        00            .byte	0
11198 2818                        00            .byte	0
11199 2819                        00            .byte	0
11200 281A                        00            .byte	0
11201 281B                        02            .byte	2
11202 281C                        06            .byte	6
11203 281D                        0C            .byte	$C
11204 281E                        18            .byte	$18
11205 281F                        30            .byte	$30
11206 2820                        60            .byte	$60
11207 2821                        C0            .byte	$C0
11208 2822                        80            .byte	$80
11209 2823                        00            .byte	0
11210 2824                        00            .byte	0
11211 2825                        00            .byte	0
11212 2826                        00            .byte	0
11213                                           ! 1268  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11214 2827                        00            .byte	0
11215 2828                        00            .byte	0
11216 2829                        3C            .byte	$3C
11217 282A                        66            .byte	$66
11218 282B                        C3            .byte	$C3
11219 282C                        C3            .byte	$C3
11220 282D                        DB            .byte	$DB
11221 282E                        DB            .byte	$DB
11222 282F                        C3            .byte	$C3
11223 2830                        C3            .byte	$C3
11224 2831                        66            .byte	$66
11225 2832                        3C            .byte	$3C
11226 2833                        00            .byte	0
11227 2834                        00            .byte	0
11228 2835                        00            .byte	0
11229 2836                        00            .byte	0
11230                                           ! 1269  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11231 2837                        00            .byte	0
11232 2838                        00            .byte	0
11233 2839                        18            .byte	$18
11234 283A                        38            .byte	$38
11235 283B                        78            .byte	$78
11236 283C                        18            .byte	$18
11237 283D                        18            .byte	$18
11238 283E                        18            .byte	$18
11239 283F                        18            .byte	$18
11240 2840                        18            .byte	$18
11241 2841                        18            .byte	$18
11242 2842                        7E            .byte	$7E
11243 2843                        00            .byte	0
11244 2844                        00            .byte	0
11245 2845                        00            .byte	0
11246 2846                        00            .byte	0
11247                                           ! 1270  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11248 2847                        00            .byte	0
11249 2848                        00            .byte	0
11250 2849                        7C            .byte	$7C
11251 284A                        C6            .byte	$C6
11252 284B                        06            .byte	6
11253 284C                        0C            .byte	$C
11254 284D                        18            .byte	$18
11255 284E                        30            .byte	$30
11256 284F                        60            .byte	$60
11257 2850                        C0            .byte	$C0
11258 2851                        C6            .byte	$C6
11259 2852                        FE            .byte	$FE
11260 2853                        00            .byte	0
11261 2854                        00            .byte	0
11262 2855                        00            .byte	0
11263 2856                        00            .byte	0
11264                                           ! 1271  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11265 2857                        00            .byte	0
11266 2858                        00            .byte	0
11267 2859                        7C            .byte	$7C
11268 285A                        C6            .byte	$C6
11269 285B                        06            .byte	6
11270 285C                        06            .byte	6
11271 285D                        3C            .byte	$3C
11272 285E                        06            .byte	6
11273 285F                        06            .byte	6
11274 2860                        06            .byte	6
11275 2861                        C6            .byte	$C6
11276 2862                        7C            .byte	$7C
11277 2863                        00            .byte	0
11278 2864                        00            .byte	0
11279 2865                        00            .byte	0
11280 2866                        00            .byte	0
11281                                           ! 1272  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11282 2867                        00            .byte	0
11283 2868                        00            .byte	0
11284 2869                        0C            .byte	$C
11285 286A                        1C            .byte	$1C
11286 286B                        3C            .byte	$3C
11287 286C                        6C            .byte	$6C
11288 286D                        CC            .byte	$CC
11289 286E                        FE            .byte	$FE
11290 286F                        0C            .byte	$C
11291 2870                        0C            .byte	$C
11292 2871                        0C            .byte	$C
11293 2872                        1E            .byte	$1E
11294 2873                        00            .byte	0
11295 2874                        00            .byte	0
11296 2875                        00            .byte	0
11297 2876                        00            .byte	0
11298                                           ! 1273  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x0
11299 2877                        00            .byte	0
11300 2878                        00            .byte	0
11301 2879                        FE            .byte	$FE
11302 287A                        C0            .byte	$C0
11303 287B                        C0            .byte	$C0
11304 287C                        C0            .byte	$C0
11305 287D                        FC            .byte	$FC
11306 287E                        06            .byte	6
11307 287F                        06            .byte	6
11308 2880                        06            .byte	6
11309 2881                        C6            .byte	$C6
11310 2882                        7C            .byte	$7C
11311                                           ! 1273 0, 0x00, 0x00, 0x00,
11312 2883                        00            .byte	0
11313 2884                        00            .byte	0
11314 2885                        00            .byte	0
11315 2886                        00            .byte	0
11316                                           ! 1274  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11317 2887                        00            .byte	0
11318 2888                        00            .byte	0
11319 2889                        38            .byte	$38
11320 288A                        60            .byte	$60
11321 288B                        C0            .byte	$C0
11322 288C                        C0            .byte	$C0
11323 288D                        FC            .byte	$FC
11324 288E                        C6            .byte	$C6
11325 288F                        C6            .byte	$C6
11326 2890                        C6            .byte	$C6
11327 2891                        C6            .byte	$C6
11328 2892                        7C            .byte	$7C
11329 2893                        00            .byte	0
11330 2894                        00            .byte	0
11331 2895                        00            .byte	0
11332 2896                        00            .byte	0
11333                                           ! 1275  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11334 2897                        00            .byte	0
11335 2898                        00            .byte	0
11336 2899                        FE            .byte	$FE
11337 289A                        C6            .byte	$C6
11338 289B                        06            .byte	6
11339 289C                        06            .byte	6
11340 289D                        0C            .byte	$C
11341 289E                        18            .byte	$18
11342 289F                        30            .byte	$30
11343 28A0                        30            .byte	$30
11344 28A1                        30            .byte	$30
11345 28A2                        30            .byte	$30
11346 28A3                        00            .byte	0
11347 28A4                        00            .byte	0
11348 28A5                        00            .byte	0
11349 28A6                        00            .byte	0
11350                                           ! 1276  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11351 28A7                        00            .byte	0
11352 28A8                        00            .byte	0
11353 28A9                        7C            .byte	$7C
11354 28AA                        C6            .byte	$C6
11355 28AB                        C6            .byte	$C6
11356 28AC                        C6            .byte	$C6
11357 28AD                        7C            .byte	$7C
11358 28AE                        C6            .byte	$C6
11359 28AF                        C6            .byte	$C6
11360 28B0                        C6            .byte	$C6
11361 28B1                        C6            .byte	$C6
11362 28B2                        7C            .byte	$7C
11363 28B3                        00            .byte	0
11364 28B4                        00            .byte	0
11365 28B5                        00            .byte	0
11366 28B6                        00            .byte	0
11367                                           ! 1277  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11368 28B7                        00            .byte	0
11369 28B8                        00            .byte	0
11370 28B9                        7C            .byte	$7C
11371 28BA                        C6            .byte	$C6
11372 28BB                        C6            .byte	$C6
11373 28BC                        C6            .byte	$C6
11374 28BD                        7E            .byte	$7E
11375 28BE                        06            .byte	6
11376 28BF                        06            .byte	6
11377 28C0                        06            .byte	6
11378 28C1                        0C            .byte	$C
11379 28C2                        78            .byte	$78
11380 28C3                        00            .byte	0
11381 28C4                        00            .byte	0
11382 28C5                        00            .byte	0
11383 28C6                        00            .byte	0
11384                                           ! 1278  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11385 28C7                        00            .byte	0
11386 28C8                        00            .byte	0
11387 28C9                        00            .byte	0
11388 28CA                        00            .byte	0
11389 28CB                        18            .byte	$18
11390 28CC                        18            .byte	$18
11391 28CD                        00            .byte	0
11392 28CE                        00            .byte	0
11393 28CF                        00            .byte	0
11394 28D0                        18            .byte	$18
11395 28D1                        18            .byte	$18
11396 28D2                        00            .byte	0
11397 28D3                        00            .byte	0
11398 28D4                        00            .byte	0
11399 28D5                        00            .byte	0
11400 28D6                        00            .byte	0
11401                                           ! 1279  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11402 28D7                        00            .byte	0
11403 28D8                        00            .byte	0
11404 28D9                        00            .byte	0
11405 28DA                        00            .byte	0
11406 28DB                        18            .byte	$18
11407 28DC                        18            .byte	$18
11408 28DD                        00            .byte	0
11409 28DE                        00            .byte	0
11410 28DF                        00            .byte	0
11411 28E0                        18            .byte	$18
11412 28E1                        18            .byte	$18
11413 28E2                        30            .byte	$30
11414 28E3                        00            .byte	0
11415 28E4                        00            .byte	0
11416 28E5                        00            .byte	0
11417 28E6                        00            .byte	0
11418                                           ! 1280  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11419 28E7                        00            .byte	0
11420 28E8                        00            .byte	0
11421 28E9                        00            .byte	0
11422 28EA                        06            .byte	6
11423 28EB                        0C            .byte	$C
11424 28EC                        18            .byte	$18
11425 28ED                        30            .byte	$30
11426 28EE                        60            .byte	$60
11427 28EF                        30            .byte	$30
11428 28F0                        18            .byte	$18
11429 28F1                        0C            .byte	$C
11430 28F2                        06            .byte	6
11431 28F3                        00            .byte	0
11432 28F4                        00            .byte	0
11433 28F5                        00            .byte	0
11434 28F6                        00            .byte	0
11435                                           ! 1281  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11436 28F7                        00            .byte	0
11437 28F8                        00            .byte	0
11438 28F9                        00            .byte	0
11439 28FA                        00            .byte	0
11440 28FB                        00            .byte	0
11441 28FC                        7E            .byte	$7E
11442 28FD                        00            .byte	0
11443 28FE                        00            .byte	0
11444 28FF                        7E            .byte	$7E
11445 2900                        00            .byte	0
11446 2901                        00            .byte	0
11447 2902                        00            .byte	0
11448 2903                        00            .byte	0
11449 2904                        00            .byte	0
11450 2905                        00            .byte	0
11451 2906                        00            .byte	0
11452                                           ! 1282  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11453 2907                        00            .byte	0
11454 2908                        00            .byte	0
11455 2909                        00            .byte	0
11456 290A                        60            .byte	$60
11457 290B                        30            .byte	$30
11458 290C                        18            .byte	$18
11459 290D                        0C            .byte	$C
11460 290E                        06            .byte	6
11461 290F                        0C            .byte	$C
11462 2910                        18            .byte	$18
11463 2911                        30            .byte	$30
11464 2912                        60            .byte	$60
11465 2913                        00            .byte	0
11466 2914                        00            .byte	0
11467 2915                        00            .byte	0
11468 2916                        00            .byte	0
11469                                           ! 1283  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11470 2917                        00            .byte	0
11471 2918                        00            .byte	0
11472 2919                        7C            .byte	$7C
11473 291A                        C6            .byte	$C6
11474 291B                        C6            .byte	$C6
11475 291C                        0C            .byte	$C
11476 291D                        18            .byte	$18
11477 291E                        18            .byte	$18
11478 291F                        18            .byte	$18
11479 2920                        00            .byte	0
11480 2921                        18            .byte	$18
11481 2922                        18            .byte	$18
11482 2923                        00            .byte	0
11483 2924                        00            .byte	0
11484 2925                        00            .byte	0
11485 2926                        00            .byte	0
11486                                           ! 1284  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11487 2927                        00            .byte	0
11488 2928                        00            .byte	0
11489 2929                        00            .byte	0
11490 292A                        7C            .byte	$7C
11491 292B                        C6            .byte	$C6
11492 292C                        C6            .byte	$C6
11493 292D                        DE            .byte	$DE
11494 292E                        DE            .byte	$DE
11495 292F                        DE            .byte	$DE
11496 2930                        DC            .byte	$DC
11497 2931                        C0            .byte	$C0
11498 2932                        7C            .byte	$7C
11499 2933                        00            .byte	0
11500 2934                        00            .byte	0
11501 2935                        00            .byte	0
11502 2936                        00            .byte	0
11503                                           ! 1285  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11504 2937                        00            .byte	0
11505 2938                        00            .byte	0
11506 2939                        10            .byte	$10
11507 293A                        38            .byte	$38
11508 293B                        6C            .byte	$6C
11509 293C                        C6            .byte	$C6
11510 293D                        C6            .byte	$C6
11511 293E                        FE            .byte	$FE
11512 293F                        C6            .byte	$C6
11513 2940                        C6            .byte	$C6
11514 2941                        C6            .byte	$C6
11515 2942                        C6            .byte	$C6
11516 2943                        00            .byte	0
11517 2944                        00            .byte	0
11518 2945                        00            .byte	0
11519 2946                        00            .byte	0
11520                                           ! 1286  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11521 2947                        00            .byte	0
11522 2948                        00            .byte	0
11523 2949                        FC            .byte	$FC
11524 294A                        66            .byte	$66
11525 294B                        66            .byte	$66
11526 294C                        66            .byte	$66
11527 294D                        7C            .byte	$7C
11528 294E                        66            .byte	$66
11529 294F                        66            .byte	$66
11530 2950                        66            .byte	$66
11531 2951                        66            .byte	$66
11532 2952                        FC            .byte	$FC
11533 2953                        00            .byte	0
11534 2954                        00            .byte	0
11535 2955                        00            .byte	0
11536 2956                        00            .byte	0
11537                                           ! 1287  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11538 2957                        00            .byte	0
11539 2958                        00            .byte	0
11540 2959                        3C            .byte	$3C
11541 295A                        66            .byte	$66
11542 295B                        C2            .byte	$C2
11543 295C                        C0            .byte	$C0
11544 295D                        C0            .byte	$C0
11545 295E                        C0            .byte	$C0
11546 295F                        C0            .byte	$C0
11547 2960                        C2            .byte	$C2
11548 2961                        66            .byte	$66
11549 2962                        3C            .byte	$3C
11550 2963                        00            .byte	0
11551 2964                        00            .byte	0
11552 2965                        00            .byte	0
11553 2966                        00            .byte	0
11554                                           ! 1288  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11555 2967                        00            .byte	0
11556 2968                        00            .byte	0
11557 2969                        F8            .byte	$F8
11558 296A                        6C            .byte	$6C
11559 296B                        66            .byte	$66
11560 296C                        66            .byte	$66
11561 296D                        66            .byte	$66
11562 296E                        66            .byte	$66
11563 296F                        66            .byte	$66
11564 2970                        66            .byte	$66
11565 2971                        6C            .byte	$6C
11566 2972                        F8            .byte	$F8
11567 2973                        00            .byte	0
11568 2974                        00            .byte	0
11569 2975                        00            .byte	0
11570 2976                        00            .byte	0
11571                                           ! 1289  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11572 2977                        00            .byte	0
11573 2978                        00            .byte	0
11574 2979                        FE            .byte	$FE
11575 297A                        66            .byte	$66
11576 297B                        62            .byte	$62
11577 297C                        68            .byte	$68
11578 297D                        78            .byte	$78
11579 297E                        68            .byte	$68
11580 297F                        60            .byte	$60
11581 2980                        62            .byte	$62
11582 2981                        66            .byte	$66
11583 2982                        FE            .byte	$FE
11584 2983                        00            .byte	0
11585 2984                        00            .byte	0
11586 2985                        00            .byte	0
11587 2986                        00            .byte	0
11588                                           ! 1290  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11589 2987                        00            .byte	0
11590 2988                        00            .byte	0
11591 2989                        FE            .byte	$FE
11592 298A                        66            .byte	$66
11593 298B                        62            .byte	$62
11594 298C                        68            .byte	$68
11595 298D                        78            .byte	$78
11596 298E                        68            .byte	$68
11597 298F                        60            .byte	$60
11598 2990                        60            .byte	$60
11599 2991                        60            .byte	$60
11600 2992                        F0            .byte	$F0
11601 2993                        00            .byte	0
11602 2994                        00            .byte	0
11603 2995                        00            .byte	0
11604 2996                        00            .byte	0
11605                                           ! 1291  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11606 2997                        00            .byte	0
11607 2998                        00            .byte	0
11608 2999                        3C            .byte	$3C
11609 299A                        66            .byte	$66
11610 299B                        C2            .byte	$C2
11611 299C                        C0            .byte	$C0
11612 299D                        C0            .byte	$C0
11613 299E                        DE            .byte	$DE
11614 299F                        C6            .byte	$C6
11615 29A0                        C6            .byte	$C6
11616 29A1                        66            .byte	$66
11617 29A2                        3A            .byte	$3A
11618 29A3                        00            .byte	0
11619 29A4                        00            .byte	0
11620 29A5                        00            .byte	0
11621 29A6                        00            .byte	0
11622                                           ! 1292  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11623 29A7                        00            .byte	0
11624 29A8                        00            .byte	0
11625 29A9                        C6            .byte	$C6
11626 29AA                        C6            .byte	$C6
11627 29AB                        C6            .byte	$C6
11628 29AC                        C6            .byte	$C6
11629 29AD                        FE            .byte	$FE
11630 29AE                        C6            .byte	$C6
11631 29AF                        C6            .byte	$C6
11632 29B0                        C6            .byte	$C6
11633 29B1                        C6            .byte	$C6
11634 29B2                        C6            .byte	$C6
11635 29B3                        00            .byte	0
11636 29B4                        00            .byte	0
11637 29B5                        00            .byte	0
11638 29B6                        00            .byte	0
11639                                           ! 1293  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11640 29B7                        00            .byte	0
11641 29B8                        00            .byte	0
11642 29B9                        3C            .byte	$3C
11643 29BA                        18            .byte	$18
11644 29BB                        18            .byte	$18
11645 29BC                        18            .byte	$18
11646 29BD                        18            .byte	$18
11647 29BE                        18            .byte	$18
11648 29BF                        18            .byte	$18
11649 29C0                        18            .byte	$18
11650 29C1                        18            .byte	$18
11651 29C2                        3C            .byte	$3C
11652 29C3                        00            .byte	0
11653 29C4                        00            .byte	0
11654 29C5                        00            .byte	0
11655 29C6                        00            .byte	0
11656                                           ! 1294  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x
11657 29C7                        00            .byte	0
11658 29C8                        00            .byte	0
11659 29C9                        1E            .byte	$1E
11660 29CA                        0C            .byte	$C
11661 29CB                        0C            .byte	$C
11662 29CC                        0C            .byte	$C
11663 29CD                        0C            .byte	$C
11664 29CE                        0C            .byte	$C
11665 29CF                        CC            .byte	$CC
11666 29D0                        CC            .byte	$CC
11667 29D1                        CC            .byte	$CC
11668 29D2                        78            .byte	$78
11669 29D3                        00            .byte	0
11670 29D4                        00            .byte	0
11671                                           ! 1294 00, 0x00,
11672 29D5                        00            .byte	0
11673 29D6                        00            .byte	0
11674                                           ! 1295  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11675 29D7                        00            .byte	0
11676 29D8                        00            .byte	0
11677 29D9                        E6            .byte	$E6
11678 29DA                        66            .byte	$66
11679 29DB                        66            .byte	$66
11680 29DC                        6C            .byte	$6C
11681 29DD                        78            .byte	$78
11682 29DE                        78            .byte	$78
11683 29DF                        6C            .byte	$6C
11684 29E0                        66            .byte	$66
11685 29E1                        66            .byte	$66
11686 29E2                        E6            .byte	$E6
11687 29E3                        00            .byte	0
11688 29E4                        00            .byte	0
11689 29E5                        00            .byte	0
11690 29E6                        00            .byte	0
11691                                           ! 1296  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11692 29E7                        00            .byte	0
11693 29E8                        00            .byte	0
11694 29E9                        F0            .byte	$F0
11695 29EA                        60            .byte	$60
11696 29EB                        60            .byte	$60
11697 29EC                        60            .byte	$60
11698 29ED                        60            .byte	$60
11699 29EE                        60            .byte	$60
11700 29EF                        60            .byte	$60
11701 29F0                        62            .byte	$62
11702 29F1                        66            .byte	$66
11703 29F2                        FE            .byte	$FE
11704 29F3                        00            .byte	0
11705 29F4                        00            .byte	0
11706 29F5                        00            .byte	0
11707 29F6                        00            .byte	0
11708                                           ! 1297  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11709 29F7                        00            .byte	0
11710 29F8                        00            .byte	0
11711 29F9                        C3            .byte	$C3
11712 29FA                        E7            .byte	$E7
11713 29FB                        FF            .byte	$FF
11714 29FC                        FF            .byte	$FF
11715 29FD                        DB            .byte	$DB
11716 29FE                        C3            .byte	$C3
11717 29FF                        C3            .byte	$C3
11718 2A00                        C3            .byte	$C3
11719 2A01                        C3            .byte	$C3
11720 2A02                        C3            .byte	$C3
11721 2A03                        00            .byte	0
11722 2A04                        00            .byte	0
11723 2A05                        00            .byte	0
11724 2A06                        00            .byte	0
11725                                           ! 1298  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11726 2A07                        00            .byte	0
11727 2A08                        00            .byte	0
11728 2A09                        C6            .byte	$C6
11729 2A0A                        E6            .byte	$E6
11730 2A0B                        F6            .byte	$F6
11731 2A0C                        FE            .byte	$FE
11732 2A0D                        DE            .byte	$DE
11733 2A0E                        CE            .byte	$CE
11734 2A0F                        C6            .byte	$C6
11735 2A10                        C6            .byte	$C6
11736 2A11                        C6            .byte	$C6
11737 2A12                        C6            .byte	$C6
11738 2A13                        00            .byte	0
11739 2A14                        00            .byte	0
11740 2A15                        00            .byte	0
11741 2A16                        00            .byte	0
11742                                           ! 1299  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11743 2A17                        00            .byte	0
11744 2A18                        00            .byte	0
11745 2A19                        7C            .byte	$7C
11746 2A1A                        C6            .byte	$C6
11747 2A1B                        C6            .byte	$C6
11748 2A1C                        C6            .byte	$C6
11749 2A1D                        C6            .byte	$C6
11750 2A1E                        C6            .byte	$C6
11751 2A1F                        C6            .byte	$C6
11752 2A20                        C6            .byte	$C6
11753 2A21                        C6            .byte	$C6
11754 2A22                        7C            .byte	$7C
11755 2A23                        00            .byte	0
11756 2A24                        00            .byte	0
11757 2A25                        00            .byte	0
11758 2A26                        00            .byte	0
11759                                           ! 1300  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11760 2A27                        00            .byte	0
11761 2A28                        00            .byte	0
11762 2A29                        FC            .byte	$FC
11763 2A2A                        66            .byte	$66
11764 2A2B                        66            .byte	$66
11765 2A2C                        66            .byte	$66
11766 2A2D                        7C            .byte	$7C
11767 2A2E                        60            .byte	$60
11768 2A2F                        60            .byte	$60
11769 2A30                        60            .byte	$60
11770 2A31                        60            .byte	$60
11771 2A32                        F0            .byte	$F0
11772 2A33                        00            .byte	0
11773 2A34                        00            .byte	0
11774 2A35                        00            .byte	0
11775 2A36                        00            .byte	0
11776                                           ! 1301  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
11777 2A37                        00            .byte	0
11778 2A38                        00            .byte	0
11779 2A39                        7C            .byte	$7C
11780 2A3A                        C6            .byte	$C6
11781 2A3B                        C6            .byte	$C6
11782 2A3C                        C6            .byte	$C6
11783 2A3D                        C6            .byte	$C6
11784 2A3E                        C6            .byte	$C6
11785 2A3F                        C6            .byte	$C6
11786 2A40                        D6            .byte	$D6
11787 2A41                        DE            .byte	$DE
11788 2A42                        7C            .byte	$7C
11789 2A43                        0C            .byte	$C
11790 2A44                        0E            .byte	$E
11791 2A45                        00            .byte	0
11792 2A46                        00            .byte	0
11793                                           ! 1302  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11794 2A47                        00            .byte	0
11795 2A48                        00            .byte	0
11796 2A49                        FC            .byte	$FC
11797 2A4A                        66            .byte	$66
11798 2A4B                        66            .byte	$66
11799 2A4C                        66            .byte	$66
11800 2A4D                        7C            .byte	$7C
11801 2A4E                        6C            .byte	$6C
11802 2A4F                        66            .byte	$66
11803 2A50                        66            .byte	$66
11804 2A51                        66            .byte	$66
11805 2A52                        E6            .byte	$E6
11806 2A53                        00            .byte	0
11807 2A54                        00            .byte	0
11808 2A55                        00            .byte	0
11809 2A56                        00            .byte	0
11810                                           ! 1303  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11811 2A57                        00            .byte	0
11812 2A58                        00            .byte	0
11813 2A59                        7C            .byte	$7C
11814 2A5A                        C6            .byte	$C6
11815 2A5B                        C6            .byte	$C6
11816 2A5C                        60            .byte	$60
11817 2A5D                        38            .byte	$38
11818 2A5E                        0C            .byte	$C
11819 2A5F                        06            .byte	6
11820 2A60                        C6            .byte	$C6
11821 2A61                        C6            .byte	$C6
11822 2A62                        7C            .byte	$7C
11823 2A63                        00            .byte	0
11824 2A64                        00            .byte	0
11825 2A65                        00            .byte	0
11826 2A66                        00            .byte	0
11827                                           ! 1304  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11828 2A67                        00            .byte	0
11829 2A68                        00            .byte	0
11830 2A69                        FF            .byte	$FF
11831 2A6A                        DB            .byte	$DB
11832 2A6B                        99            .byte	$99
11833 2A6C                        18            .byte	$18
11834 2A6D                        18            .byte	$18
11835 2A6E                        18            .byte	$18
11836 2A6F                        18            .byte	$18
11837 2A70                        18            .byte	$18
11838 2A71                        18            .byte	$18
11839 2A72                        3C            .byte	$3C
11840 2A73                        00            .byte	0
11841 2A74                        00            .byte	0
11842 2A75                        00            .byte	0
11843 2A76                        00            .byte	0
11844                                           ! 1305  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11845 2A77                        00            .byte	0
11846 2A78                        00            .byte	0
11847 2A79                        C6            .byte	$C6
11848 2A7A                        C6            .byte	$C6
11849 2A7B                        C6            .byte	$C6
11850 2A7C                        C6            .byte	$C6
11851 2A7D                        C6            .byte	$C6
11852 2A7E                        C6            .byte	$C6
11853 2A7F                        C6            .byte	$C6
11854 2A80                        C6            .byte	$C6
11855 2A81                        C6            .byte	$C6
11856 2A82                        7C            .byte	$7C
11857 2A83                        00            .byte	0
11858 2A84                        00            .byte	0
11859 2A85                        00            .byte	0
11860 2A86                        00            .byte	0
11861                                           ! 1306  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11862 2A87                        00            .byte	0
11863 2A88                        00            .byte	0
11864 2A89                        C3            .byte	$C3
11865 2A8A                        C3            .byte	$C3
11866 2A8B                        C3            .byte	$C3
11867 2A8C                        C3            .byte	$C3
11868 2A8D                        C3            .byte	$C3
11869 2A8E                        C3            .byte	$C3
11870 2A8F                        C3            .byte	$C3
11871 2A90                        66            .byte	$66
11872 2A91                        3C            .byte	$3C
11873 2A92                        18            .byte	$18
11874 2A93                        00            .byte	0
11875 2A94                        00            .byte	0
11876 2A95                        00            .byte	0
11877 2A96                        00            .byte	0
11878                                           ! 1307  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11879 2A97                        00            .byte	0
11880 2A98                        00            .byte	0
11881 2A99                        C3            .byte	$C3
11882 2A9A                        C3            .byte	$C3
11883 2A9B                        C3            .byte	$C3
11884 2A9C                        C3            .byte	$C3
11885 2A9D                        C3            .byte	$C3
11886 2A9E                        DB            .byte	$DB
11887 2A9F                        DB            .byte	$DB
11888 2AA0                        FF            .byte	$FF
11889 2AA1                        66            .byte	$66
11890 2AA2                        66            .byte	$66
11891 2AA3                        00            .byte	0
11892 2AA4                        00            .byte	0
11893 2AA5                        00            .byte	0
11894 2AA6                        00            .byte	0
11895                                           ! 1308  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11896 2AA7                        00            .byte	0
11897 2AA8                        00            .byte	0
11898 2AA9                        C3            .byte	$C3
11899 2AAA                        C3            .byte	$C3
11900 2AAB                        66            .byte	$66
11901 2AAC                        3C            .byte	$3C
11902 2AAD                        18            .byte	$18
11903 2AAE                        18            .byte	$18
11904 2AAF                        3C            .byte	$3C
11905 2AB0                        66            .byte	$66
11906 2AB1                        C3            .byte	$C3
11907 2AB2                        C3            .byte	$C3
11908 2AB3                        00            .byte	0
11909 2AB4                        00            .byte	0
11910 2AB5                        00            .byte	0
11911 2AB6                        00            .byte	0
11912                                           ! 1309  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11913 2AB7                        00            .byte	0
11914 2AB8                        00            .byte	0
11915 2AB9                        C3            .byte	$C3
11916 2ABA                        C3            .byte	$C3
11917 2ABB                        C3            .byte	$C3
11918 2ABC                        66            .byte	$66
11919 2ABD                        3C            .byte	$3C
11920 2ABE                        18            .byte	$18
11921 2ABF                        18            .byte	$18
11922 2AC0                        18            .byte	$18
11923 2AC1                        18            .byte	$18
11924 2AC2                        3C            .byte	$3C
11925 2AC3                        00            .byte	0
11926 2AC4                        00            .byte	0
11927 2AC5                        00            .byte	0
11928 2AC6                        00            .byte	0
11929                                           ! 1310  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
11930 2AC7                        00            .byte	0
11931 2AC8                        00            .byte	0
11932 2AC9                        FF            .byte	$FF
11933 2ACA                        C3            .byte	$C3
11934 2ACB                        86            .byte	$86
11935 2ACC                        0C            .byte	$C
11936 2ACD                        18            .byte	$18
11937 2ACE                        30            .byte	$30
11938 2ACF                        60            .byte	$60
11939 2AD0                        C1            .byte	$C1
11940 2AD1                        C3            .byte	$C3
11941 2AD2                        FF            .byte	$FF
11942 2AD3                        00            .byte	0
11943 2AD4                        00            .byte	0
11944 2AD5                        00            .byte	0
11945 2AD6                        00            .byte	0
11946                                           ! 1311  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
11947 2AD7                        00            .byte	0
11948 2AD8                        00            .byte	0
11949 2AD9                        3C            .byte	$3C
11950 2ADA                        30            .byte	$30
11951 2ADB                        30            .byte	$30
11952 2ADC                        30            .byte	$30
11953 2ADD                        30            .byte	$30
11954 2ADE                        30            .byte	$30
11955 2ADF                        30            .byte	$30
11956 2AE0                        30            .byte	$30
11957 2AE1                        30            .byte	$30
11958 2AE2                        3C            .byte	$3C
11959 2AE3                        00            .byte	0
11960 2AE4                        00            .byte	0
11961 2AE5                        00            .byte	0
11962 2AE6                        00            .byte	0
11963                                           ! 1312  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
11964 2AE7                        00            .byte	0
11965 2AE8                        00            .byte	0
11966 2AE9                        00            .byte	0
11967 2AEA                        80            .byte	$80
11968 2AEB                        C0            .byte	$C0
11969 2AEC                        E0            .byte	$E0
11970 2AED                        70            .byte	$70
11971 2AEE                        38            .byte	$38
11972 2AEF                        1C            .byte	$1C
11973 2AF0                        0E            .byte	$E
11974 2AF1                        06            .byte	6
11975 2AF2                        02            .byte	2
11976 2AF3                        00            .byte	0
11977 2AF4                        00            .byte	0
11978 2AF5                        00            .byte	0
11979 2AF6                        00            .byte	0
11980                                           ! 1313  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
11981 2AF7                        00            .byte	0
11982 2AF8                        00            .byte	0
11983 2AF9                        3C            .byte	$3C
11984 2AFA                        0C            .byte	$C
11985 2AFB                        0C            .byte	$C
11986 2AFC                        0C            .byte	$C
11987 2AFD                        0C            .byte	$C
11988 2AFE                        0C            .byte	$C
11989 2AFF                        0C            .byte	$C
11990 2B00                        0C            .byte	$C
11991 2B01                        0C            .byte	$C
11992 2B02                        3C            .byte	$3C
11993 2B03                        00            .byte	0
11994 2B04                        00            .byte	0
11995 2B05                        00            .byte	0
11996 2B06                        00            .byte	0
11997                                           ! 1314  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11998 2B07                        10            .byte	$10
11999 2B08                        38            .byte	$38
12000 2B09                        6C            .byte	$6C
12001 2B0A                        C6            .byte	$C6
12002 2B0B                        00            .byte	0
12003 2B0C                        00            .byte	0
12004 2B0D                        00            .byte	0
12005 2B0E                        00            .byte	0
12006 2B0F                        00            .byte	0
12007 2B10                        00            .byte	0
12008 2B11                        00            .byte	0
12009 2B12                        00            .byte	0
12010 2B13                        00            .byte	0
12011 2B14                        00            .byte	0
12012 2B15                        00            .byte	0
12013 2B16                        00            .byte	0
12014                                           ! 1315  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12015 2B17                        00            .byte	0
12016 2B18                        00            .byte	0
12017 2B19                        00            .byte	0
12018 2B1A                        00            .byte	0
12019 2B1B                        00            .byte	0
12020 2B1C                        00            .byte	0
12021 2B1D                        00            .byte	0
12022 2B1E                        00            .byte	0
12023 2B1F                        00            .byte	0
12024 2B20                        00            .byte	0
12025 2B21                        00            .byte	0
12026 2B22                        00            .byte	0
12027 2B23                        00            .byte	0
12028 2B24                        FF            .byte	$FF
12029 2B25                        00            .byte	0
12030 2B26                        00            .byte	0
12031                                           ! 1316  
12032                                           ! 1316 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12033 2B27                        30            .byte	$30
12034 2B28                        30            .byte	$30
12035 2B29                        18            .byte	$18
12036 2B2A                        00            .byte	0
12037 2B2B                        00            .byte	0
12038 2B2C                        00            .byte	0
12039 2B2D                        00            .byte	0
12040 2B2E                        00            .byte	0
12041 2B2F                        00            .byte	0
12042 2B30                        00            .byte	0
12043 2B31                        00            .byte	0
12044 2B32                        00            .byte	0
12045 2B33                        00            .byte	0
12046 2B34                        00            .byte	0
12047 2B35                        00            .byte	0
12048 2B36                        00            .byte	0
12049                                           ! 1317  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12050 2B37                        00            .byte	0
12051 2B38                        00            .byte	0
12052 2B39                        00            .byte	0
12053 2B3A                        00            .byte	0
12054 2B3B                        00            .byte	0
12055 2B3C                        78            .byte	$78
12056 2B3D                        0C            .byte	$C
12057 2B3E                        7C            .byte	$7C
12058 2B3F                        CC            .byte	$CC
12059 2B40                        CC            .byte	$CC
12060 2B41                        CC            .byte	$CC
12061 2B42                        76            .byte	$76
12062 2B43                        00            .byte	0
12063 2B44                        00            .byte	0
12064 2B45                        00            .byte	0
12065 2B46                        00            .byte	0
12066                                           ! 1318  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12067 2B47                        00            .byte	0
12068 2B48                        00            .byte	0
12069 2B49                        E0            .byte	$E0
12070 2B4A                        60            .byte	$60
12071 2B4B                        60            .byte	$60
12072 2B4C                        78            .byte	$78
12073 2B4D                        6C            .byte	$6C
12074 2B4E                        66            .byte	$66
12075 2B4F                        66            .byte	$66
12076 2B50                        66            .byte	$66
12077 2B51                        66            .byte	$66
12078 2B52                        7C            .byte	$7C
12079 2B53                        00            .byte	0
12080 2B54                        00            .byte	0
12081 2B55                        00            .byte	0
12082 2B56                        00            .byte	0
12083                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12084 2B57                        00            .byte	0
12085 2B58                        00            .byte	0
12086 2B59                        00            .byte	0
12087 2B5A                        00            .byte	0
12088 2B5B                        00            .byte	0
12089 2B5C                        7C            .byte	$7C
12090 2B5D                        C6            .byte	$C6
12091 2B5E                        C0            .byte	$C0
12092 2B5F                        C0            .byte	$C0
12093 2B60                        C0            .byte	$C0
12094 2B61                        C6            .byte	$C6
12095 2B62                        7C            .byte	$7C
12096 2B63                        00            .byte	0
12097 2B64                        00            .byte	0
12098 2B65                        00            .byte	0
12099 2B66                        00            .byte	0
12100                                           ! 1320  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12101 2B67                        00            .byte	0
12102 2B68                        00            .byte	0
12103 2B69                        1C            .byte	$1C
12104 2B6A                        0C            .byte	$C
12105 2B6B                        0C            .byte	$C
12106 2B6C                        3C            .byte	$3C
12107 2B6D                        6C            .byte	$6C
12108 2B6E                        CC            .byte	$CC
12109 2B6F                        CC            .byte	$CC
12110 2B70                        CC            .byte	$CC
12111 2B71                        CC            .byte	$CC
12112 2B72                        76            .byte	$76
12113 2B73                        00            .byte	0
12114 2B74                        00            .byte	0
12115 2B75                        00            .byte	0
12116 2B76                        00            .byte	0
12117                                           ! 1321  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12118 2B77                        00            .byte	0
12119 2B78                        00            .byte	0
12120 2B79                        00            .byte	0
12121 2B7A                        00            .byte	0
12122 2B7B                        00            .byte	0
12123 2B7C                        7C            .byte	$7C
12124 2B7D                        C6            .byte	$C6
12125 2B7E                        FE            .byte	$FE
12126 2B7F                        C0            .byte	$C0
12127 2B80                        C0            .byte	$C0
12128 2B81                        C6            .byte	$C6
12129 2B82                        7C            .byte	$7C
12130 2B83                        00            .byte	0
12131 2B84                        00            .byte	0
12132 2B85                        00            .byte	0
12133 2B86                        00            .byte	0
12134                                           ! 1322  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12135 2B87                        00            .byte	0
12136 2B88                        00            .byte	0
12137 2B89                        38            .byte	$38
12138 2B8A                        6C            .byte	$6C
12139 2B8B                        64            .byte	$64
12140 2B8C                        60            .byte	$60
12141 2B8D                        F0            .byte	$F0
12142 2B8E                        60            .byte	$60
12143 2B8F                        60            .byte	$60
12144 2B90                        60            .byte	$60
12145 2B91                        60            .byte	$60
12146 2B92                        F0            .byte	$F0
12147 2B93                        00            .byte	0
12148 2B94                        00            .byte	0
12149 2B95                        00            .byte	0
12150 2B96                        00            .byte	0
12151                                           ! 1323  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12152 2B97                        00            .byte	0
12153 2B98                        00            .byte	0
12154 2B99                        00            .byte	0
12155 2B9A                        00            .byte	0
12156 2B9B                        00            .byte	0
12157 2B9C                        76            .byte	$76
12158 2B9D                        CC            .byte	$CC
12159 2B9E                        CC            .byte	$CC
12160 2B9F                        CC            .byte	$CC
12161 2BA0                        CC            .byte	$CC
12162 2BA1                        CC            .byte	$CC
12163 2BA2                        7C            .byte	$7C
12164 2BA3                        0C            .byte	$C
12165 2BA4                        CC            .byte	$CC
12166 2BA5                        78            .byte	$78
12167 2BA6                        00            .byte	0
12168                                           ! 1324  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12169 2BA7                        00            .byte	0
12170 2BA8                        00            .byte	0
12171 2BA9                        E0            .byte	$E0
12172 2BAA                        60            .byte	$60
12173 2BAB                        60            .byte	$60
12174 2BAC                        6C            .byte	$6C
12175 2BAD                        76            .byte	$76
12176 2BAE                        66            .byte	$66
12177 2BAF                        66            .byte	$66
12178 2BB0                        66            .byte	$66
12179 2BB1                        66            .byte	$66
12180 2BB2                        E6            .byte	$E6
12181 2BB3                        00            .byte	0
12182 2BB4                        00            .byte	0
12183 2BB5                        00            .byte	0
12184 2BB6                        00            .byte	0
12185                                           ! 1325  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12186 2BB7                        00            .byte	0
12187 2BB8                        00            .byte	0
12188 2BB9                        18            .byte	$18
12189 2BBA                        18            .byte	$18
12190 2BBB                        00            .byte	0
12191 2BBC                        38            .byte	$38
12192 2BBD                        18            .byte	$18
12193 2BBE                        18            .byte	$18
12194 2BBF                        18            .byte	$18
12195 2BC0                        18            .byte	$18
12196 2BC1                        18            .byte	$18
12197 2BC2                        3C            .byte	$3C
12198 2BC3                        00            .byte	0
12199 2BC4                        00            .byte	0
12200 2BC5                        00            .byte	0
12201 2BC6                        00            .byte	0
12202                                           ! 1326  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12203 2BC7                        00            .byte	0
12204 2BC8                        00            .byte	0
12205 2BC9                        06            .byte	6
12206 2BCA                        06            .byte	6
12207 2BCB                        00            .byte	0
12208 2BCC                        0E            .byte	$E
12209 2BCD                        06            .byte	6
12210 2BCE                        06            .byte	6
12211 2BCF                        06            .byte	6
12212 2BD0                        06            .byte	6
12213 2BD1                        06            .byte	6
12214 2BD2                        06            .byte	6
12215 2BD3                        66            .byte	$66
12216 2BD4                        66            .byte	$66
12217 2BD5                        3C            .byte	$3C
12218 2BD6                        00            .byte	0
12219                                           ! 1327  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12220 2BD7                        00            .byte	0
12221 2BD8                        00            .byte	0
12222 2BD9                        E0            .byte	$E0
12223 2BDA                        60            .byte	$60
12224 2BDB                        60            .byte	$60
12225 2BDC                        66            .byte	$66
12226 2BDD                        6C            .byte	$6C
12227 2BDE                        78            .byte	$78
12228 2BDF                        78            .byte	$78
12229 2BE0                        6C            .byte	$6C
12230 2BE1                        66            .byte	$66
12231 2BE2                        E6            .byte	$E6
12232 2BE3                        00            .byte	0
12233 2BE4                        00            .byte	0
12234 2BE5                        00            .byte	0
12235 2BE6                        00            .byte	0
12236                                           ! 1328  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12237 2BE7                        00            .byte	0
12238 2BE8                        00            .byte	0
12239 2BE9                        38            .byte	$38
12240 2BEA                        18            .byte	$18
12241 2BEB                        18            .byte	$18
12242 2BEC                        18            .byte	$18
12243 2BED                        18            .byte	$18
12244 2BEE                        18            .byte	$18
12245 2BEF                        18            .byte	$18
12246 2BF0                        18            .byte	$18
12247 2BF1                        18            .byte	$18
12248 2BF2                        3C            .byte	$3C
12249 2BF3                        00            .byte	0
12250 2BF4                        00            .byte	0
12251 2BF5                        00            .byte	0
12252 2BF6                        00            .byte	0
12253                                           ! 1329  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12254 2BF7                        00            .byte	0
12255 2BF8                        00            .byte	0
12256 2BF9                        00            .byte	0
12257 2BFA                        00            .byte	0
12258 2BFB                        00            .byte	0
12259 2BFC                        E6            .byte	$E6
12260 2BFD                        FF            .byte	$FF
12261 2BFE                        DB            .byte	$DB
12262 2BFF                        DB            .byte	$DB
12263 2C00                        DB            .byte	$DB
12264 2C01                        DB            .byte	$DB
12265 2C02                        DB            .byte	$DB
12266 2C03                        00            .byte	0
12267 2C04                        00            .byte	0
12268 2C05                        00            .byte	0
12269 2C06                        00            .byte	0
12270                                           ! 1330  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12271 2C07                        00            .byte	0
12272 2C08                        00            .byte	0
12273 2C09                        00            .byte	0
12274 2C0A                        00            .byte	0
12275 2C0B                        00            .byte	0
12276 2C0C                        DC            .byte	$DC
12277 2C0D                        66            .byte	$66
12278 2C0E                        66            .byte	$66
12279 2C0F                        66            .byte	$66
12280 2C10                        66            .byte	$66
12281 2C11                        66            .byte	$66
12282 2C12                        66            .byte	$66
12283 2C13                        00            .byte	0
12284 2C14                        00            .byte	0
12285 2C15                        00            .byte	0
12286 2C16                        00            .byte	0
12287                                           ! 1331  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12288 2C17                        00            .byte	0
12289 2C18                        00            .byte	0
12290 2C19                        00            .byte	0
12291 2C1A                        00            .byte	0
12292 2C1B                        00            .byte	0
12293 2C1C                        7C            .byte	$7C
12294 2C1D                        C6            .byte	$C6
12295 2C1E                        C6            .byte	$C6
12296 2C1F                        C6            .byte	$C6
12297 2C20                        C6            .byte	$C6
12298 2C21                        C6            .byte	$C6
12299 2C22                        7C            .byte	$7C
12300 2C23                        00            .byte	0
12301 2C24                        00            .byte	0
12302 2C25                        00            .byte	0
12303 2C26                        00            .byte	0
12304                                           ! 1332  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12305 2C27                        00            .byte	0
12306 2C28                        00            .byte	0
12307 2C29                        00            .byte	0
12308 2C2A                        00            .byte	0
12309 2C2B                        00            .byte	0
12310 2C2C                        DC            .byte	$DC
12311 2C2D                        66            .byte	$66
12312 2C2E                        66            .byte	$66
12313 2C2F                        66            .byte	$66
12314 2C30                        66            .byte	$66
12315 2C31                        66            .byte	$66
12316 2C32                        7C            .byte	$7C
12317 2C33                        60            .byte	$60
12318 2C34                        60            .byte	$60
12319 2C35                        F0            .byte	$F0
12320 2C36                        00            .byte	0
12321                                           ! 1333  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12322 2C37                        00            .byte	0
12323 2C38                        00            .byte	0
12324 2C39                        00            .byte	0
12325 2C3A                        00            .byte	0
12326 2C3B                        00            .byte	0
12327 2C3C                        76            .byte	$76
12328 2C3D                        CC            .byte	$CC
12329 2C3E                        CC            .byte	$CC
12330 2C3F                        CC            .byte	$CC
12331 2C40                        CC            .byte	$CC
12332 2C41                        CC            .byte	$CC
12333 2C42                        7C            .byte	$7C
12334 2C43                        0C            .byte	$C
12335 2C44                        0C            .byte	$C
12336 2C45                        1E            .byte	$1E
12337 2C46                        00            .byte	0
12338                                           ! 1334  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12339 2C47                        00            .byte	0
12340 2C48                        00            .byte	0
12341 2C49                        00            .byte	0
12342 2C4A                        00            .byte	0
12343 2C4B                        00            .byte	0
12344 2C4C                        DC            .byte	$DC
12345 2C4D                        76            .byte	$76
12346 2C4E                        66            .byte	$66
12347 2C4F                        60            .byte	$60
12348 2C50                        60            .byte	$60
12349 2C51                        60            .byte	$60
12350 2C52                        F0            .byte	$F0
12351 2C53                        00            .byte	0
12352 2C54                        00            .byte	0
12353 2C55                        00            .byte	0
12354 2C56                        00            .byte	0
12355                                           ! 1335  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12356 2C57                        00            .byte	0
12357 2C58                        00            .byte	0
12358 2C59                        00            .byte	0
12359 2C5A                        00            .byte	0
12360 2C5B                        00            .byte	0
12361 2C5C                        7C            .byte	$7C
12362 2C5D                        C6            .byte	$C6
12363 2C5E                        60            .byte	$60
12364 2C5F                        38            .byte	$38
12365 2C60                        0C            .byte	$C
12366 2C61                        C6            .byte	$C6
12367 2C62                        7C            .byte	$7C
12368 2C63                        00            .byte	0
12369 2C64                        00            .byte	0
12370 2C65                        00            .byte	0
12371 2C66                        00            .byte	0
12372                                           ! 1336  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12373 2C67                        00            .byte	0
12374 2C68                        00            .byte	0
12375 2C69                        10            .byte	$10
12376 2C6A                        30            .byte	$30
12377 2C6B                        30            .byte	$30
12378 2C6C                        FC            .byte	$FC
12379 2C6D                        30            .byte	$30
12380 2C6E                        30            .byte	$30
12381 2C6F                        30            .byte	$30
12382 2C70                        30            .byte	$30
12383 2C71                        36            .byte	$36
12384 2C72                        1C            .byte	$1C
12385 2C73                        00            .byte	0
12386 2C74                        00            .byte	0
12387 2C75                        00            .byte	0
12388 2C76                        00            .byte	0
12389                                           ! 1337  0x00, 0x00,
12390 2C77                        00            .byte	0
12391                                           ! 1337  0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12392 2C78                        00            .byte	0
12393 2C79                        00            .byte	0
12394 2C7A                        00            .byte	0
12395 2C7B                        00            .byte	0
12396 2C7C                        CC            .byte	$CC
12397 2C7D                        CC            .byte	$CC
12398 2C7E                        CC            .byte	$CC
12399 2C7F                        CC            .byte	$CC
12400 2C80                        CC            .byte	$CC
12401 2C81                        CC            .byte	$CC
12402 2C82                        76            .byte	$76
12403 2C83                        00            .byte	0
12404 2C84                        00            .byte	0
12405 2C85                        00            .byte	0
12406 2C86                        00            .byte	0
12407                                           ! 1338  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12408 2C87                        00            .byte	0
12409 2C88                        00            .byte	0
12410 2C89                        00            .byte	0
12411 2C8A                        00            .byte	0
12412 2C8B                        00            .byte	0
12413 2C8C                        C3            .byte	$C3
12414 2C8D                        C3            .byte	$C3
12415 2C8E                        C3            .byte	$C3
12416 2C8F                        C3            .byte	$C3
12417 2C90                        66            .byte	$66
12418 2C91                        3C            .byte	$3C
12419 2C92                        18            .byte	$18
12420 2C93                        00            .byte	0
12421 2C94                        00            .byte	0
12422 2C95                        00            .byte	0
12423 2C96                        00            .byte	0
12424                                           ! 1339  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12425 2C97                        00            .byte	0
12426 2C98                        00            .byte	0
12427 2C99                        00            .byte	0
12428 2C9A                        00            .byte	0
12429 2C9B                        00            .byte	0
12430 2C9C                        C3            .byte	$C3
12431 2C9D                        C3            .byte	$C3
12432 2C9E                        C3            .byte	$C3
12433 2C9F                        DB            .byte	$DB
12434 2CA0                        DB            .byte	$DB
12435 2CA1                        FF            .byte	$FF
12436 2CA2                        66            .byte	$66
12437 2CA3                        00            .byte	0
12438 2CA4                        00            .byte	0
12439 2CA5                        00            .byte	0
12440 2CA6                        00            .byte	0
12441                                           ! 1340  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12442 2CA7                        00            .byte	0
12443 2CA8                        00            .byte	0
12444 2CA9                        00            .byte	0
12445 2CAA                        00            .byte	0
12446 2CAB                        00            .byte	0
12447 2CAC                        C3            .byte	$C3
12448 2CAD                        66            .byte	$66
12449 2CAE                        3C            .byte	$3C
12450 2CAF                        18            .byte	$18
12451 2CB0                        3C            .byte	$3C
12452 2CB1                        66            .byte	$66
12453 2CB2                        C3            .byte	$C3
12454 2CB3                        00            .byte	0
12455 2CB4                        00            .byte	0
12456 2CB5                        00            .byte	0
12457 2CB6                        00            .byte	0
12458                                           ! 1341  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12459 2CB7                        00            .byte	0
12460 2CB8                        00            .byte	0
12461 2CB9                        00            .byte	0
12462 2CBA                        00            .byte	0
12463 2CBB                        00            .byte	0
12464 2CBC                        C6            .byte	$C6
12465 2CBD                        C6            .byte	$C6
12466 2CBE                        C6            .byte	$C6
12467 2CBF                        C6            .byte	$C6
12468 2CC0                        C6            .byte	$C6
12469 2CC1                        C6            .byte	$C6
12470 2CC2                        7E            .byte	$7E
12471 2CC3                        06            .byte	6
12472 2CC4                        0C            .byte	$C
12473 2CC5                        F8            .byte	$F8
12474 2CC6                        00            .byte	0
12475                                           ! 1342  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12476 2CC7                        00            .byte	0
12477 2CC8                        00            .byte	0
12478 2CC9                        00            .byte	0
12479 2CCA                        00            .byte	0
12480 2CCB                        00            .byte	0
12481 2CCC                        FE            .byte	$FE
12482 2CCD                        CC            .byte	$CC
12483 2CCE                        18            .byte	$18
12484 2CCF                        30            .byte	$30
12485 2CD0                        60            .byte	$60
12486 2CD1                        C6            .byte	$C6
12487 2CD2                        FE            .byte	$FE
12488 2CD3                        00            .byte	0
12489 2CD4                        00            .byte	0
12490 2CD5                        00            .byte	0
12491 2CD6                        00            .byte	0
12492                                           ! 1343  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12493 2CD7                        00            .byte	0
12494 2CD8                        00            .byte	0
12495 2CD9                        0E            .byte	$E
12496 2CDA                        18            .byte	$18
12497 2CDB                        18            .byte	$18
12498 2CDC                        18            .byte	$18
12499 2CDD                        70            .byte	$70
12500 2CDE                        18            .byte	$18
12501 2CDF                        18            .byte	$18
12502 2CE0                        18            .byte	$18
12503 2CE1                        18            .byte	$18
12504 2CE2                        0E            .byte	$E
12505 2CE3                        00            .byte	0
12506 2CE4                        00            .byte	0
12507 2CE5                        00            .byte	0
12508 2CE6                        00            .byte	0
12509                                           ! 1344  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12510 2CE7                        00            .byte	0
12511 2CE8                        00            .byte	0
12512 2CE9                        18            .byte	$18
12513 2CEA                        18            .byte	$18
12514 2CEB                        18            .byte	$18
12515 2CEC                        18            .byte	$18
12516 2CED                        00            .byte	0
12517 2CEE                        18            .byte	$18
12518 2CEF                        18            .byte	$18
12519 2CF0                        18            .byte	$18
12520 2CF1                        18            .byte	$18
12521 2CF2                        18            .byte	$18
12522 2CF3                        00            .byte	0
12523 2CF4                        00            .byte	0
12524 2CF5                        00            .byte	0
12525 2CF6                        00            .byte	0
12526                                           ! 1345  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12527 2CF7                        00            .byte	0
12528 2CF8                        00            .byte	0
12529 2CF9                        70            .byte	$70
12530 2CFA                        18            .byte	$18
12531 2CFB                        18            .byte	$18
12532 2CFC                        18            .byte	$18
12533 2CFD                        0E            .byte	$E
12534 2CFE                        18            .byte	$18
12535 2CFF                        18            .byte	$18
12536 2D00                        18            .byte	$18
12537 2D01                        18            .byte	$18
12538 2D02                        70            .byte	$70
12539 2D03                        00            .byte	0
12540 2D04                        00            .byte	0
12541 2D05                        00            .byte	0
12542 2D06                        00            .byte	0
12543                                           ! 1346  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12544 2D07                        00            .byte	0
12545 2D08                        00            .byte	0
12546 2D09                        76            .byte	$76
12547 2D0A                        DC            .byte	$DC
12548 2D0B                        00            .byte	0
12549 2D0C                        00            .byte	0
12550 2D0D                        00            .byte	0
12551 2D0E                        00            .byte	0
12552 2D0F                        00            .byte	0
12553 2D10                        00            .byte	0
12554 2D11                        00            .byte	0
12555 2D12                        00            .byte	0
12556 2D13                        00            .byte	0
12557 2D14                        00            .byte	0
12558 2D15                        00            .byte	0
12559 2D16                        00            .byte	0
12560                                           ! 1347  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12561 2D17                        00            .byte	0
12562 2D18                        00            .byte	0
12563 2D19                        00            .byte	0
12564 2D1A                        00            .byte	0
12565 2D1B                        10            .byte	$10
12566 2D1C                        38            .byte	$38
12567 2D1D                        6C            .byte	$6C
12568 2D1E                        C6            .byte	$C6
12569 2D1F                        C6            .byte	$C6
12570 2D20                        C6            .byte	$C6
12571 2D21                        FE            .byte	$FE
12572 2D22                        00            .byte	0
12573 2D23                        00            .byte	0
12574 2D24                        00            .byte	0
12575 2D25                        00            .byte	0
12576 2D26                        00            .byte	0
12577                                           ! 1348  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12578 2D27                        00            .byte	0
12579 2D28                        00            .byte	0
12580 2D29                        3C            .byte	$3C
12581 2D2A                        66            .byte	$66
12582 2D2B                        C2            .byte	$C2
12583 2D2C                        C0            .byte	$C0
12584 2D2D                        C0            .byte	$C0
12585 2D2E                        C0            .byte	$C0
12586 2D2F                        C2            .byte	$C2
12587 2D30                        66            .byte	$66
12588 2D31                        3C            .byte	$3C
12589 2D32                        0C            .byte	$C
12590 2D33                        06            .byte	6
12591 2D34                        7C            .byte	$7C
12592 2D35                        00            .byte	0
12593 2D36                        00            .byte	0
12594                                           ! 1349  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12595 2D37                        00            .byte	0
12596 2D38                        00            .byte	0
12597 2D39                        CC            .byte	$CC
12598 2D3A                        00            .byte	0
12599 2D3B                        00            .byte	0
12600 2D3C                        CC            .byte	$CC
12601 2D3D                        CC            .byte	$CC
12602 2D3E                        CC            .byte	$CC
12603 2D3F                        CC            .byte	$CC
12604 2D40                        CC            .byte	$CC
12605 2D41                        CC            .byte	$CC
12606 2D42                        76            .byte	$76
12607 2D43                        00            .byte	0
12608 2D44                        00            .byte	0
12609 2D45                        00            .byte	0
12610 2D46                        00            .byte	0
12611                                           ! 1350  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12612 2D47                        00            .byte	0
12613 2D48                        0C            .byte	$C
12614 2D49                        18            .byte	$18
12615 2D4A                        30            .byte	$30
12616 2D4B                        00            .byte	0
12617 2D4C                        7C            .byte	$7C
12618 2D4D                        C6            .byte	$C6
12619 2D4E                        FE            .byte	$FE
12620 2D4F                        C0            .byte	$C0
12621 2D50                        C0            .byte	$C0
12622 2D51                        C6            .byte	$C6
12623 2D52                        7C            .byte	$7C
12624 2D53                        00            .byte	0
12625 2D54                        00            .byte	0
12626 2D55                        00            .byte	0
12627 2D56                        00            .byte	0
12628                                           ! 1351  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12629 2D57                        00            .byte	0
12630 2D58                        10            .byte	$10
12631 2D59                        38            .byte	$38
12632 2D5A                        6C            .byte	$6C
12633 2D5B                        00            .byte	0
12634 2D5C                        78            .byte	$78
12635 2D5D                        0C            .byte	$C
12636 2D5E                        7C            .byte	$7C
12637 2D5F                        CC            .byte	$CC
12638 2D60                        CC            .byte	$CC
12639 2D61                        CC            .byte	$CC
12640 2D62                        76            .byte	$76
12641 2D63                        00            .byte	0
12642 2D64                        00            .byte	0
12643 2D65                        00            .byte	0
12644 2D66                        00            .byte	0
12645                                           ! 1352  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12646 2D67                        00            .byte	0
12647 2D68                        00            .byte	0
12648 2D69                        CC            .byte	$CC
12649 2D6A                        00            .byte	0
12650 2D6B                        00            .byte	0
12651 2D6C                        78            .byte	$78
12652 2D6D                        0C            .byte	$C
12653 2D6E                        7C            .byte	$7C
12654 2D6F                        CC            .byte	$CC
12655 2D70                        CC            .byte	$CC
12656 2D71                        CC            .byte	$CC
12657 2D72                        76            .byte	$76
12658 2D73                        00            .byte	0
12659 2D74                        00            .byte	0
12660 2D75                        00            .byte	0
12661 2D76                        00            .byte	0
12662                                           ! 1353  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12663 2D77                        00            .byte	0
12664 2D78                        60            .byte	$60
12665 2D79                        30            .byte	$30
12666 2D7A                        18            .byte	$18
12667 2D7B                        00            .byte	0
12668 2D7C                        78            .byte	$78
12669 2D7D                        0C            .byte	$C
12670 2D7E                        7C            .byte	$7C
12671 2D7F                        CC            .byte	$CC
12672 2D80                        CC            .byte	$CC
12673 2D81                        CC            .byte	$CC
12674 2D82                        76            .byte	$76
12675 2D83                        00            .byte	0
12676 2D84                        00            .byte	0
12677 2D85                        00            .byte	0
12678 2D86                        00            .byte	0
12679                                           ! 1354  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12680 2D87                        00            .byte	0
12681 2D88                        38            .byte	$38
12682 2D89                        6C            .byte	$6C
12683 2D8A                        38            .byte	$38
12684 2D8B                        00            .byte	0
12685 2D8C                        78            .byte	$78
12686 2D8D                        0C            .byte	$C
12687 2D8E                        7C            .byte	$7C
12688 2D8F                        CC            .byte	$CC
12689 2D90                        CC            .byte	$CC
12690 2D91                        CC            .byte	$CC
12691 2D92                        76            .byte	$76
12692 2D93                        00            .byte	0
12693 2D94                        00            .byte	0
12694 2D95                        00            .byte	0
12695 2D96                        00            .byte	0
12696                                           ! 1355  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12697 2D97                        00            .byte	0
12698 2D98                        00            .byte	0
12699 2D99                        00            .byte	0
12700 2D9A                        00            .byte	0
12701 2D9B                        3C            .byte	$3C
12702 2D9C                        66            .byte	$66
12703 2D9D                        60            .byte	$60
12704 2D9E                        60            .byte	$60
12705 2D9F                        66            .byte	$66
12706 2DA0                        3C            .byte	$3C
12707 2DA1                        0C            .byte	$C
12708 2DA2                        06            .byte	6
12709 2DA3                        3C            .byte	$3C
12710 2DA4                        00            .byte	0
12711 2DA5                        00            .byte	0
12712 2DA6                        00            .byte	0
12713                                           ! 1356  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12714 2DA7                        00            .byte	0
12715 2DA8                        10            .byte	$10
12716 2DA9                        38            .byte	$38
12717 2DAA                        6C            .byte	$6C
12718 2DAB                        00            .byte	0
12719 2DAC                        7C            .byte	$7C
12720 2DAD                        C6            .byte	$C6
12721 2DAE                        FE            .byte	$FE
12722 2DAF                        C0            .byte	$C0
12723 2DB0                        C0            .byte	$C0
12724 2DB1                        C6            .byte	$C6
12725 2DB2                        7C            .byte	$7C
12726 2DB3                        00            .byte	0
12727 2DB4                        00            .byte	0
12728 2DB5                        00            .byte	0
12729 2DB6                        00            .byte	0
12730                                           ! 1357  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12731 2DB7                        00            .byte	0
12732 2DB8                        00            .byte	0
12733 2DB9                        C6            .byte	$C6
12734 2DBA                        00            .byte	0
12735 2DBB                        00            .byte	0
12736 2DBC                        7C            .byte	$7C
12737 2DBD                        C6            .byte	$C6
12738 2DBE                        FE            .byte	$FE
12739 2DBF                        C0            .byte	$C0
12740 2DC0                        C0            .byte	$C0
12741 2DC1                        C6            .byte	$C6
12742 2DC2                        7C            .byte	$7C
12743 2DC3                        00            .byte	0
12744 2DC4                        00            .byte	0
12745 2DC5                        00            .byte	0
12746 2DC6                        00            .byte	0
12747                                           ! 1358  0x00, 0x60, 0x30, 0x18
12748 2DC7                        00            .byte	0
12749 2DC8                        60            .byte	$60
12750 2DC9                        30            .byte	$30
12751                                           ! 1358 , 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12752 2DCA                        18            .byte	$18
12753 2DCB                        00            .byte	0
12754 2DCC                        7C            .byte	$7C
12755 2DCD                        C6            .byte	$C6
12756 2DCE                        FE            .byte	$FE
12757 2DCF                        C0            .byte	$C0
12758 2DD0                        C0            .byte	$C0
12759 2DD1                        C6            .byte	$C6
12760 2DD2                        7C            .byte	$7C
12761 2DD3                        00            .byte	0
12762 2DD4                        00            .byte	0
12763 2DD5                        00            .byte	0
12764 2DD6                        00            .byte	0
12765                                           ! 1359  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12766 2DD7                        00            .byte	0
12767 2DD8                        00            .byte	0
12768 2DD9                        66            .byte	$66
12769 2DDA                        00            .byte	0
12770 2DDB                        00            .byte	0
12771 2DDC                        38            .byte	$38
12772 2DDD                        18            .byte	$18
12773 2DDE                        18            .byte	$18
12774 2DDF                        18            .byte	$18
12775 2DE0                        18            .byte	$18
12776 2DE1                        18            .byte	$18
12777 2DE2                        3C            .byte	$3C
12778 2DE3                        00            .byte	0
12779 2DE4                        00            .byte	0
12780 2DE5                        00            .byte	0
12781 2DE6                        00            .byte	0
12782                                           ! 1360  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12783 2DE7                        00            .byte	0
12784 2DE8                        18            .byte	$18
12785 2DE9                        3C            .byte	$3C
12786 2DEA                        66            .byte	$66
12787 2DEB                        00            .byte	0
12788 2DEC                        38            .byte	$38
12789 2DED                        18            .byte	$18
12790 2DEE                        18            .byte	$18
12791 2DEF                        18            .byte	$18
12792 2DF0                        18            .byte	$18
12793 2DF1                        18            .byte	$18
12794 2DF2                        3C            .byte	$3C
12795 2DF3                        00            .byte	0
12796 2DF4                        00            .byte	0
12797 2DF5                        00            .byte	0
12798 2DF6                        00            .byte	0
12799                                           ! 1361  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12800 2DF7                        00            .byte	0
12801 2DF8                        60            .byte	$60
12802 2DF9                        30            .byte	$30
12803 2DFA                        18            .byte	$18
12804 2DFB                        00            .byte	0
12805 2DFC                        38            .byte	$38
12806 2DFD                        18            .byte	$18
12807 2DFE                        18            .byte	$18
12808 2DFF                        18            .byte	$18
12809 2E00                        18            .byte	$18
12810 2E01                        18            .byte	$18
12811 2E02                        3C            .byte	$3C
12812 2E03                        00            .byte	0
12813 2E04                        00            .byte	0
12814 2E05                        00            .byte	0
12815 2E06                        00            .byte	0
12816                                           ! 1362  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12817 2E07                        00            .byte	0
12818 2E08                        C6            .byte	$C6
12819 2E09                        00            .byte	0
12820 2E0A                        10            .byte	$10
12821 2E0B                        38            .byte	$38
12822 2E0C                        6C            .byte	$6C
12823 2E0D                        C6            .byte	$C6
12824 2E0E                        C6            .byte	$C6
12825 2E0F                        FE            .byte	$FE
12826 2E10                        C6            .byte	$C6
12827 2E11                        C6            .byte	$C6
12828 2E12                        C6            .byte	$C6
12829 2E13                        00            .byte	0
12830 2E14                        00            .byte	0
12831 2E15                        00            .byte	0
12832 2E16                        00            .byte	0
12833                                           ! 1363  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12834 2E17                        38            .byte	$38
12835 2E18                        6C            .byte	$6C
12836 2E19                        38            .byte	$38
12837 2E1A                        00            .byte	0
12838 2E1B                        38            .byte	$38
12839 2E1C                        6C            .byte	$6C
12840 2E1D                        C6            .byte	$C6
12841 2E1E                        C6            .byte	$C6
12842 2E1F                        FE            .byte	$FE
12843 2E20                        C6            .byte	$C6
12844 2E21                        C6            .byte	$C6
12845 2E22                        C6            .byte	$C6
12846 2E23                        00            .byte	0
12847 2E24                        00            .byte	0
12848 2E25                        00            .byte	0
12849 2E26                        00            .byte	0
12850                                           ! 1364  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
12851 2E27                        18            .byte	$18
12852 2E28                        30            .byte	$30
12853 2E29                        60            .byte	$60
12854 2E2A                        00            .byte	0
12855 2E2B                        FE            .byte	$FE
12856 2E2C                        66            .byte	$66
12857 2E2D                        60            .byte	$60
12858 2E2E                        7C            .byte	$7C
12859 2E2F                        60            .byte	$60
12860 2E30                        60            .byte	$60
12861 2E31                        66            .byte	$66
12862 2E32                        FE            .byte	$FE
12863 2E33                        00            .byte	0
12864 2E34                        00            .byte	0
12865 2E35                        00            .byte	0
12866 2E36                        00            .byte	0
12867                                           ! 1365  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
12868 2E37                        00            .byte	0
12869 2E38                        00            .byte	0
12870 2E39                        00            .byte	0
12871 2E3A                        00            .byte	0
12872 2E3B                        00            .byte	0
12873 2E3C                        6E            .byte	$6E
12874 2E3D                        3B            .byte	$3B
12875 2E3E                        1B            .byte	$1B
12876 2E3F                        7E            .byte	$7E
12877 2E40                        D8            .byte	$D8
12878 2E41                        DC            .byte	$DC
12879 2E42                        77            .byte	$77
12880 2E43                        00            .byte	0
12881 2E44                        00            .byte	0
12882 2E45                        00            .byte	0
12883 2E46                        00            .byte	0
12884                                           ! 1366  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
12885 2E47                        00            .byte	0
12886 2E48                        00            .byte	0
12887 2E49                        3E            .byte	$3E
12888 2E4A                        6C            .byte	$6C
12889 2E4B                        CC            .byte	$CC
12890 2E4C                        CC            .byte	$CC
12891 2E4D                        FE            .byte	$FE
12892 2E4E                        CC            .byte	$CC
12893 2E4F                        CC            .byte	$CC
12894 2E50                        CC            .byte	$CC
12895 2E51                        CC            .byte	$CC
12896 2E52                        CE            .byte	$CE
12897 2E53                        00            .byte	0
12898 2E54                        00            .byte	0
12899 2E55                        00            .byte	0
12900 2E56                        00            .byte	0
12901                                           ! 1367  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12902 2E57                        00            .byte	0
12903 2E58                        10            .byte	$10
12904 2E59                        38            .byte	$38
12905 2E5A                        6C            .byte	$6C
12906 2E5B                        00            .byte	0
12907 2E5C                        7C            .byte	$7C
12908 2E5D                        C6            .byte	$C6
12909 2E5E                        C6            .byte	$C6
12910 2E5F                        C6            .byte	$C6
12911 2E60                        C6            .byte	$C6
12912 2E61                        C6            .byte	$C6
12913 2E62                        7C            .byte	$7C
12914 2E63                        00            .byte	0
12915 2E64                        00            .byte	0
12916 2E65                        00            .byte	0
12917 2E66                        00            .byte	0
12918                                           ! 1368  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12919 2E67                        00            .byte	0
12920 2E68                        00            .byte	0
12921 2E69                        C6            .byte	$C6
12922 2E6A                        00            .byte	0
12923 2E6B                        00            .byte	0
12924 2E6C                        7C            .byte	$7C
12925 2E6D                        C6            .byte	$C6
12926 2E6E                        C6            .byte	$C6
12927 2E6F                        C6            .byte	$C6
12928 2E70                        C6            .byte	$C6
12929 2E71                        C6            .byte	$C6
12930 2E72                        7C            .byte	$7C
12931 2E73                        00            .byte	0
12932 2E74                        00            .byte	0
12933 2E75                        00            .byte	0
12934 2E76                        00            .byte	0
12935                                           ! 1369  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12936 2E77                        00            .byte	0
12937 2E78                        60            .byte	$60
12938 2E79                        30            .byte	$30
12939 2E7A                        18            .byte	$18
12940 2E7B                        00            .byte	0
12941 2E7C                        7C            .byte	$7C
12942 2E7D                        C6            .byte	$C6
12943 2E7E                        C6            .byte	$C6
12944 2E7F                        C6            .byte	$C6
12945 2E80                        C6            .byte	$C6
12946 2E81                        C6            .byte	$C6
12947 2E82                        7C            .byte	$7C
12948 2E83                        00            .byte	0
12949 2E84                        00            .byte	0
12950 2E85                        00            .byte	0
12951 2E86                        00            .byte	0
12952                                           ! 1370  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12953 2E87                        00            .byte	0
12954 2E88                        30            .byte	$30
12955 2E89                        78            .byte	$78
12956 2E8A                        CC            .byte	$CC
12957 2E8B                        00            .byte	0
12958 2E8C                        CC            .byte	$CC
12959 2E8D                        CC            .byte	$CC
12960 2E8E                        CC            .byte	$CC
12961 2E8F                        CC            .byte	$CC
12962 2E90                        CC            .byte	$CC
12963 2E91                        CC            .byte	$CC
12964 2E92                        76            .byte	$76
12965 2E93                        00            .byte	0
12966 2E94                        00            .byte	0
12967 2E95                        00            .byte	0
12968 2E96                        00            .byte	0
12969                                           ! 1371  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12970 2E97                        00            .byte	0
12971 2E98                        60            .byte	$60
12972 2E99                        30            .byte	$30
12973 2E9A                        18            .byte	$18
12974 2E9B                        00            .byte	0
12975 2E9C                        CC            .byte	$CC
12976 2E9D                        CC            .byte	$CC
12977 2E9E                        CC            .byte	$CC
12978 2E9F                        CC            .byte	$CC
12979 2EA0                        CC            .byte	$CC
12980 2EA1                        CC            .byte	$CC
12981 2EA2                        76            .byte	$76
12982 2EA3                        00            .byte	0
12983 2EA4                        00            .byte	0
12984 2EA5                        00            .byte	0
12985 2EA6                        00            .byte	0
12986                                           ! 1372  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
12987 2EA7                        00            .byte	0
12988 2EA8                        00            .byte	0
12989 2EA9                        C6            .byte	$C6
12990 2EAA                        00            .byte	0
12991 2EAB                        00            .byte	0
12992 2EAC                        C6            .byte	$C6
12993 2EAD                        C6            .byte	$C6
12994 2EAE                        C6            .byte	$C6
12995 2EAF                        C6            .byte	$C6
12996 2EB0                        C6            .byte	$C6
12997 2EB1                        C6            .byte	$C6
12998 2EB2                        7E            .byte	$7E
12999 2EB3                        06            .byte	6
13000 2EB4                        0C            .byte	$C
13001 2EB5                        78            .byte	$78
13002 2EB6                        00            .byte	0
13003                                           ! 1373  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13004 2EB7                        00            .byte	0
13005 2EB8                        C6            .byte	$C6
13006 2EB9                        00            .byte	0
13007 2EBA                        7C            .byte	$7C
13008 2EBB                        C6            .byte	$C6
13009 2EBC                        C6            .byte	$C6
13010 2EBD                        C6            .byte	$C6
13011 2EBE                        C6            .byte	$C6
13012 2EBF                        C6            .byte	$C6
13013 2EC0                        C6            .byte	$C6
13014 2EC1                        C6            .byte	$C6
13015 2EC2                        7C            .byte	$7C
13016 2EC3                        00            .byte	0
13017 2EC4                        00            .byte	0
13018 2EC5                        00            .byte	0
13019 2EC6                        00            .byte	0
13020                                           ! 1374  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13021 2EC7                        00            .byte	0
13022 2EC8                        C6            .byte	$C6
13023 2EC9                        00            .byte	0
13024 2ECA                        C6            .byte	$C6
13025 2ECB                        C6            .byte	$C6
13026 2ECC                        C6            .byte	$C6
13027 2ECD                        C6            .byte	$C6
13028 2ECE                        C6            .byte	$C6
13029 2ECF                        C6            .byte	$C6
13030 2ED0                        C6            .byte	$C6
13031 2ED1                        C6            .byte	$C6
13032 2ED2                        7C            .byte	$7C
13033 2ED3                        00            .byte	0
13034 2ED4                        00            .byte	0
13035 2ED5                        00            .byte	0
13036 2ED6                        00            .byte	0
13037                                           ! 1375  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13038 2ED7                        00            .byte	0
13039 2ED8                        18            .byte	$18
13040 2ED9                        18            .byte	$18
13041 2EDA                        7E            .byte	$7E
13042 2EDB                        C3            .byte	$C3
13043 2EDC                        C0            .byte	$C0
13044 2EDD                        C0            .byte	$C0
13045 2EDE                        C0            .byte	$C0
13046 2EDF                        C3            .byte	$C3
13047 2EE0                        7E            .byte	$7E
13048 2EE1                        18            .byte	$18
13049 2EE2                        18            .byte	$18
13050 2EE3                        00            .byte	0
13051 2EE4                        00            .byte	0
13052 2EE5                        00            .byte	0
13053 2EE6                        00            .byte	0
13054                                           ! 1376  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13055 2EE7                        00            .byte	0
13056 2EE8                        38            .byte	$38
13057 2EE9                        6C            .byte	$6C
13058 2EEA                        64            .byte	$64
13059 2EEB                        60            .byte	$60
13060 2EEC                        F0            .byte	$F0
13061 2EED                        60            .byte	$60
13062 2EEE                        60            .byte	$60
13063 2EEF                        60            .byte	$60
13064 2EF0                        60            .byte	$60
13065 2EF1                        E6            .byte	$E6
13066 2EF2                        FC            .byte	$FC
13067 2EF3                        00            .byte	0
13068 2EF4                        00            .byte	0
13069 2EF5                        00            .byte	0
13070 2EF6                        00            .byte	0
13071                                           ! 1377  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13072 2EF7                        00            .byte	0
13073 2EF8                        00            .byte	0
13074 2EF9                        C3            .byte	$C3
13075 2EFA                        66            .byte	$66
13076 2EFB                        3C            .byte	$3C
13077 2EFC                        18            .byte	$18
13078 2EFD                        FF            .byte	$FF
13079 2EFE                        18            .byte	$18
13080 2EFF                        FF            .byte	$FF
13081 2F00                        18            .byte	$18
13082 2F01                        18            .byte	$18
13083 2F02                        18            .byte	$18
13084 2F03                        00            .byte	0
13085 2F04                        00            .byte	0
13086 2F05                        00            .byte	0
13087 2F06                        00            .byte	0
13088                                           ! 1378  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13089 2F07                        00            .byte	0
13090 2F08                        FC            .byte	$FC
13091 2F09                        66            .byte	$66
13092 2F0A                        66            .byte	$66
13093 2F0B                        7C            .byte	$7C
13094 2F0C                        62            .byte	$62
13095 2F0D                        66            .byte	$66
13096 2F0E                        6F            .byte	$6F
13097 2F0F                        66            .byte	$66
13098 2F10                        66            .byte	$66
13099 2F11                        66            .byte	$66
13100 2F12                        F3            .byte	$F3
13101 2F13                        00            .byte	0
13102 2F14                        00            .byte	0
13103 2F15                        00            .byte	0
13104 2F16                        00            .byte	0
13105                                           ! 1379  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x1
13106 2F17                        00            .byte	0
13107 2F18                        0E            .byte	$E
13108 2F19                        1B            .byte	$1B
13109 2F1A                        18            .byte	$18
13110 2F1B                        18            .byte	$18
13111                                           ! 1379 8, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13112 2F1C                        18            .byte	$18
13113 2F1D                        7E            .byte	$7E
13114 2F1E                        18            .byte	$18
13115 2F1F                        18            .byte	$18
13116 2F20                        18            .byte	$18
13117 2F21                        18            .byte	$18
13118 2F22                        18            .byte	$18
13119 2F23                        D8            .byte	$D8
13120 2F24                        70            .byte	$70
13121 2F25                        00            .byte	0
13122 2F26                        00            .byte	0
13123                                           ! 1380  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13124 2F27                        00            .byte	0
13125 2F28                        18            .byte	$18
13126 2F29                        30            .byte	$30
13127 2F2A                        60            .byte	$60
13128 2F2B                        00            .byte	0
13129 2F2C                        78            .byte	$78
13130 2F2D                        0C            .byte	$C
13131 2F2E                        7C            .byte	$7C
13132 2F2F                        CC            .byte	$CC
13133 2F30                        CC            .byte	$CC
13134 2F31                        CC            .byte	$CC
13135 2F32                        76            .byte	$76
13136 2F33                        00            .byte	0
13137 2F34                        00            .byte	0
13138 2F35                        00            .byte	0
13139 2F36                        00            .byte	0
13140                                           ! 1381  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13141 2F37                        00            .byte	0
13142 2F38                        0C            .byte	$C
13143 2F39                        18            .byte	$18
13144 2F3A                        30            .byte	$30
13145 2F3B                        00            .byte	0
13146 2F3C                        38            .byte	$38
13147 2F3D                        18            .byte	$18
13148 2F3E                        18            .byte	$18
13149 2F3F                        18            .byte	$18
13150 2F40                        18            .byte	$18
13151 2F41                        18            .byte	$18
13152 2F42                        3C            .byte	$3C
13153 2F43                        00            .byte	0
13154 2F44                        00            .byte	0
13155 2F45                        00            .byte	0
13156 2F46                        00            .byte	0
13157                                           ! 1382  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13158 2F47                        00            .byte	0
13159 2F48                        18            .byte	$18
13160 2F49                        30            .byte	$30
13161 2F4A                        60            .byte	$60
13162 2F4B                        00            .byte	0
13163 2F4C                        7C            .byte	$7C
13164 2F4D                        C6            .byte	$C6
13165 2F4E                        C6            .byte	$C6
13166 2F4F                        C6            .byte	$C6
13167 2F50                        C6            .byte	$C6
13168 2F51                        C6            .byte	$C6
13169 2F52                        7C            .byte	$7C
13170 2F53                        00            .byte	0
13171 2F54                        00            .byte	0
13172 2F55                        00            .byte	0
13173 2F56                        00            .byte	0
13174                                           ! 1383  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13175 2F57                        00            .byte	0
13176 2F58                        18            .byte	$18
13177 2F59                        30            .byte	$30
13178 2F5A                        60            .byte	$60
13179 2F5B                        00            .byte	0
13180 2F5C                        CC            .byte	$CC
13181 2F5D                        CC            .byte	$CC
13182 2F5E                        CC            .byte	$CC
13183 2F5F                        CC            .byte	$CC
13184 2F60                        CC            .byte	$CC
13185 2F61                        CC            .byte	$CC
13186 2F62                        76            .byte	$76
13187 2F63                        00            .byte	0
13188 2F64                        00            .byte	0
13189 2F65                        00            .byte	0
13190 2F66                        00            .byte	0
13191                                           ! 1384  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13192 2F67                        00            .byte	0
13193 2F68                        00            .byte	0
13194 2F69                        76            .byte	$76
13195 2F6A                        DC            .byte	$DC
13196 2F6B                        00            .byte	0
13197 2F6C                        DC            .byte	$DC
13198 2F6D                        66            .byte	$66
13199 2F6E                        66            .byte	$66
13200 2F6F                        66            .byte	$66
13201 2F70                        66            .byte	$66
13202 2F71                        66            .byte	$66
13203 2F72                        66            .byte	$66
13204 2F73                        00            .byte	0
13205 2F74                        00            .byte	0
13206 2F75                        00            .byte	0
13207 2F76                        00            .byte	0
13208                                           ! 1385  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13209 2F77                        76            .byte	$76
13210 2F78                        DC            .byte	$DC
13211 2F79                        00            .byte	0
13212 2F7A                        C6            .byte	$C6
13213 2F7B                        E6            .byte	$E6
13214 2F7C                        F6            .byte	$F6
13215 2F7D                        FE            .byte	$FE
13216 2F7E                        DE            .byte	$DE
13217 2F7F                        CE            .byte	$CE
13218 2F80                        C6            .byte	$C6
13219 2F81                        C6            .byte	$C6
13220 2F82                        C6            .byte	$C6
13221 2F83                        00            .byte	0
13222 2F84                        00            .byte	0
13223 2F85                        00            .byte	0
13224 2F86                        00            .byte	0
13225                                           ! 1386  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13226 2F87                        00            .byte	0
13227 2F88                        3C            .byte	$3C
13228 2F89                        6C            .byte	$6C
13229 2F8A                        6C            .byte	$6C
13230 2F8B                        3E            .byte	$3E
13231 2F8C                        00            .byte	0
13232 2F8D                        7E            .byte	$7E
13233 2F8E                        00            .byte	0
13234 2F8F                        00            .byte	0
13235 2F90                        00            .byte	0
13236 2F91                        00            .byte	0
13237 2F92                        00            .byte	0
13238 2F93                        00            .byte	0
13239 2F94                        00            .byte	0
13240 2F95                        00            .byte	0
13241 2F96                        00            .byte	0
13242                                           ! 1387  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13243 2F97                        00            .byte	0
13244 2F98                        38            .byte	$38
13245 2F99                        6C            .byte	$6C
13246 2F9A                        6C            .byte	$6C
13247 2F9B                        38            .byte	$38
13248 2F9C                        00            .byte	0
13249 2F9D                        7C            .byte	$7C
13250 2F9E                        00            .byte	0
13251 2F9F                        00            .byte	0
13252 2FA0                        00            .byte	0
13253 2FA1                        00            .byte	0
13254 2FA2                        00            .byte	0
13255 2FA3                        00            .byte	0
13256 2FA4                        00            .byte	0
13257 2FA5                        00            .byte	0
13258 2FA6                        00            .byte	0
13259                                           ! 1388  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13260 2FA7                        00            .byte	0
13261 2FA8                        00            .byte	0
13262 2FA9                        30            .byte	$30
13263 2FAA                        30            .byte	$30
13264 2FAB                        00            .byte	0
13265 2FAC                        30            .byte	$30
13266 2FAD                        30            .byte	$30
13267 2FAE                        60            .byte	$60
13268 2FAF                        C0            .byte	$C0
13269 2FB0                        C6            .byte	$C6
13270 2FB1                        C6            .byte	$C6
13271 2FB2                        7C            .byte	$7C
13272 2FB3                        00            .byte	0
13273 2FB4                        00            .byte	0
13274 2FB5                        00            .byte	0
13275 2FB6                        00            .byte	0
13276                                           ! 1389  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13277 2FB7                        00            .byte	0
13278 2FB8                        00            .byte	0
13279 2FB9                        00            .byte	0
13280 2FBA                        00            .byte	0
13281 2FBB                        00            .byte	0
13282 2FBC                        00            .byte	0
13283 2FBD                        FE            .byte	$FE
13284 2FBE                        C0            .byte	$C0
13285 2FBF                        C0            .byte	$C0
13286 2FC0                        C0            .byte	$C0
13287 2FC1                        C0            .byte	$C0
13288 2FC2                        00            .byte	0
13289 2FC3                        00            .byte	0
13290 2FC4                        00            .byte	0
13291 2FC5                        00            .byte	0
13292 2FC6                        00            .byte	0
13293                                           ! 1390  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13294 2FC7                        00            .byte	0
13295 2FC8                        00            .byte	0
13296 2FC9                        00            .byte	0
13297 2FCA                        00            .byte	0
13298 2FCB                        00            .byte	0
13299 2FCC                        00            .byte	0
13300 2FCD                        FE            .byte	$FE
13301 2FCE                        06            .byte	6
13302 2FCF                        06            .byte	6
13303 2FD0                        06            .byte	6
13304 2FD1                        06            .byte	6
13305 2FD2                        00            .byte	0
13306 2FD3                        00            .byte	0
13307 2FD4                        00            .byte	0
13308 2FD5                        00            .byte	0
13309 2FD6                        00            .byte	0
13310                                           ! 1391  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13311 2FD7                        00            .byte	0
13312 2FD8                        C0            .byte	$C0
13313 2FD9                        C0            .byte	$C0
13314 2FDA                        C2            .byte	$C2
13315 2FDB                        C6            .byte	$C6
13316 2FDC                        CC            .byte	$CC
13317 2FDD                        18            .byte	$18
13318 2FDE                        30            .byte	$30
13319 2FDF                        60            .byte	$60
13320 2FE0                        CE            .byte	$CE
13321 2FE1                        9B            .byte	$9B
13322 2FE2                        06            .byte	6
13323 2FE3                        0C            .byte	$C
13324 2FE4                        1F            .byte	$1F
13325 2FE5                        00            .byte	0
13326 2FE6                        00            .byte	0
13327                                           ! 1392  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13328 2FE7                        00            .byte	0
13329 2FE8                        C0            .byte	$C0
13330 2FE9                        C0            .byte	$C0
13331 2FEA                        C2            .byte	$C2
13332 2FEB                        C6            .byte	$C6
13333 2FEC                        CC            .byte	$CC
13334 2FED                        18            .byte	$18
13335 2FEE                        30            .byte	$30
13336 2FEF                        66            .byte	$66
13337 2FF0                        CE            .byte	$CE
13338 2FF1                        96            .byte	$96
13339 2FF2                        3E            .byte	$3E
13340 2FF3                        06            .byte	6
13341 2FF4                        06            .byte	6
13342 2FF5                        00            .byte	0
13343 2FF6                        00            .byte	0
13344                                           ! 1393  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13345 2FF7                        00            .byte	0
13346 2FF8                        00            .byte	0
13347 2FF9                        18            .byte	$18
13348 2FFA                        18            .byte	$18
13349 2FFB                        00            .byte	0
13350 2FFC                        18            .byte	$18
13351 2FFD                        18            .byte	$18
13352 2FFE                        18            .byte	$18
13353 2FFF                        3C            .byte	$3C
13354 3000                        3C            .byte	$3C
13355 3001                        3C            .byte	$3C
13356 3002                        18            .byte	$18
13357 3003                        00            .byte	0
13358 3004                        00            .byte	0
13359 3005                        00            .byte	0
13360 3006                        00            .byte	0
13361                                           ! 1394  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13362 3007                        00            .byte	0
13363 3008                        00            .byte	0
13364 3009                        00            .byte	0
13365 300A                        00            .byte	0
13366 300B                        00            .byte	0
13367 300C                        36            .byte	$36
13368 300D                        6C            .byte	$6C
13369 300E                        D8            .byte	$D8
13370 300F                        6C            .byte	$6C
13371 3010                        36            .byte	$36
13372 3011                        00            .byte	0
13373 3012                        00            .byte	0
13374 3013                        00            .byte	0
13375 3014                        00            .byte	0
13376 3015                        00            .byte	0
13377 3016                        00            .byte	0
13378                                           ! 1395  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13379 3017                        00            .byte	0
13380 3018                        00            .byte	0
13381 3019                        00            .byte	0
13382 301A                        00            .byte	0
13383 301B                        00            .byte	0
13384 301C                        D8            .byte	$D8
13385 301D                        6C            .byte	$6C
13386 301E                        36            .byte	$36
13387 301F                        6C            .byte	$6C
13388 3020                        D8            .byte	$D8
13389 3021                        00            .byte	0
13390 3022                        00            .byte	0
13391 3023                        00            .byte	0
13392 3024                        00            .byte	0
13393 3025                        00            .byte	0
13394 3026                        00            .byte	0
13395                                           ! 1396  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13396 3027                        11            .byte	$11
13397 3028                        44            .byte	$44
13398 3029                        11            .byte	$11
13399 302A                        44            .byte	$44
13400 302B                        11            .byte	$11
13401 302C                        44            .byte	$44
13402 302D                        11            .byte	$11
13403 302E                        44            .byte	$44
13404 302F                        11            .byte	$11
13405 3030                        44            .byte	$44
13406 3031                        11            .byte	$11
13407 3032                        44            .byte	$44
13408 3033                        11            .byte	$11
13409 3034                        44            .byte	$44
13410 3035                        11            .byte	$11
13411 3036                        44            .byte	$44
13412                                           ! 1397  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13413 3037                        55            .byte	$55
13414 3038                        AA            .byte	$AA
13415 3039                        55            .byte	$55
13416 303A                        AA            .byte	$AA
13417 303B                        55            .byte	$55
13418 303C                        AA            .byte	$AA
13419 303D                        55            .byte	$55
13420 303E                        AA            .byte	$AA
13421 303F                        55            .byte	$55
13422 3040                        AA            .byte	$AA
13423 3041                        55            .byte	$55
13424 3042                        AA            .byte	$AA
13425 3043                        55            .byte	$55
13426 3044                        AA            .byte	$AA
13427 3045                        55            .byte	$55
13428 3046                        AA            .byte	$AA
13429                                           ! 1398  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13430 3047                        DD            .byte	$DD
13431 3048                        77            .byte	$77
13432 3049                        DD            .byte	$DD
13433 304A                        77            .byte	$77
13434 304B                        DD            .byte	$DD
13435 304C                        77            .byte	$77
13436 304D                        DD            .byte	$DD
13437 304E                        77            .byte	$77
13438 304F                        DD            .byte	$DD
13439 3050                        77            .byte	$77
13440 3051                        DD            .byte	$DD
13441 3052                        77            .byte	$77
13442 3053                        DD            .byte	$DD
13443 3054                        77            .byte	$77
13444 3055                        DD            .byte	$DD
13445 3056                        77            .byte	$77
13446                                           ! 1399  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13447 3057                        18            .byte	$18
13448 3058                        18            .byte	$18
13449 3059                        18            .byte	$18
13450 305A                        18            .byte	$18
13451 305B                        18            .byte	$18
13452 305C                        18            .byte	$18
13453 305D                        18            .byte	$18
13454 305E                        18            .byte	$18
13455 305F                        18            .byte	$18
13456 3060                        18            .byte	$18
13457 3061                        18            .byte	$18
13458 3062                        18            .byte	$18
13459 3063                        18            .byte	$18
13460 3064                        18            .byte	$18
13461 3065                        18            .byte	$18
13462 3066                        18            .byte	$18
13463                                           ! 1400  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x
13464 3067                        18            .byte	$18
13465 3068                        18            .byte	$18
13466 3069                        18            .byte	$18
13467 306A                        18            .byte	$18
13468 306B                        18            .byte	$18
13469 306C                        18            .byte	$18
13470 306D                        18            .byte	$18
13471                                           ! 1400 f8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13472 306E                        F8            .byte	$F8
13473 306F                        18            .byte	$18
13474 3070                        18            .byte	$18
13475 3071                        18            .byte	$18
13476 3072                        18            .byte	$18
13477 3073                        18            .byte	$18
13478 3074                        18            .byte	$18
13479 3075                        18            .byte	$18
13480 3076                        18            .byte	$18
13481                                           ! 1401  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13482 3077                        18            .byte	$18
13483 3078                        18            .byte	$18
13484 3079                        18            .byte	$18
13485 307A                        18            .byte	$18
13486 307B                        18            .byte	$18
13487 307C                        F8            .byte	$F8
13488 307D                        18            .byte	$18
13489 307E                        F8            .byte	$F8
13490 307F                        18            .byte	$18
13491 3080                        18            .byte	$18
13492 3081                        18            .byte	$18
13493 3082                        18            .byte	$18
13494 3083                        18            .byte	$18
13495 3084                        18            .byte	$18
13496 3085                        18            .byte	$18
13497 3086                        18            .byte	$18
13498                                           ! 1402  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13499 3087                        36            .byte	$36
13500 3088                        36            .byte	$36
13501 3089                        36            .byte	$36
13502 308A                        36            .byte	$36
13503 308B                        36            .byte	$36
13504 308C                        36            .byte	$36
13505 308D                        36            .byte	$36
13506 308E                        F6            .byte	$F6
13507 308F                        36            .byte	$36
13508 3090                        36            .byte	$36
13509 3091                        36            .byte	$36
13510 3092                        36            .byte	$36
13511 3093                        36            .byte	$36
13512 3094                        36            .byte	$36
13513 3095                        36            .byte	$36
13514 3096                        36            .byte	$36
13515                                           ! 1403  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13516 3097                        00            .byte	0
13517 3098                        00            .byte	0
13518 3099                        00            .byte	0
13519 309A                        00            .byte	0
13520 309B                        00            .byte	0
13521 309C                        00            .byte	0
13522 309D                        00            .byte	0
13523 309E                        FE            .byte	$FE
13524 309F                        36            .byte	$36
13525 30A0                        36            .byte	$36
13526 30A1                        36            .byte	$36
13527 30A2                        36            .byte	$36
13528 30A3                        36            .byte	$36
13529 30A4                        36            .byte	$36
13530 30A5                        36            .byte	$36
13531 30A6                        36            .byte	$36
13532                                           ! 1404  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13533 30A7                        00            .byte	0
13534 30A8                        00            .byte	0
13535 30A9                        00            .byte	0
13536 30AA                        00            .byte	0
13537 30AB                        00            .byte	0
13538 30AC                        F8            .byte	$F8
13539 30AD                        18            .byte	$18
13540 30AE                        F8            .byte	$F8
13541 30AF                        18            .byte	$18
13542 30B0                        18            .byte	$18
13543 30B1                        18            .byte	$18
13544 30B2                        18            .byte	$18
13545 30B3                        18            .byte	$18
13546 30B4                        18            .byte	$18
13547 30B5                        18            .byte	$18
13548 30B6                        18            .byte	$18
13549                                           ! 1405  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13550 30B7                        36            .byte	$36
13551 30B8                        36            .byte	$36
13552 30B9                        36            .byte	$36
13553 30BA                        36            .byte	$36
13554 30BB                        36            .byte	$36
13555 30BC                        F6            .byte	$F6
13556 30BD                        06            .byte	6
13557 30BE                        F6            .byte	$F6
13558 30BF                        36            .byte	$36
13559 30C0                        36            .byte	$36
13560 30C1                        36            .byte	$36
13561 30C2                        36            .byte	$36
13562 30C3                        36            .byte	$36
13563 30C4                        36            .byte	$36
13564 30C5                        36            .byte	$36
13565 30C6                        36            .byte	$36
13566                                           ! 1406  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13567 30C7                        36            .byte	$36
13568 30C8                        36            .byte	$36
13569 30C9                        36            .byte	$36
13570 30CA                        36            .byte	$36
13571 30CB                        36            .byte	$36
13572 30CC                        36            .byte	$36
13573 30CD                        36            .byte	$36
13574 30CE                        36            .byte	$36
13575 30CF                        36            .byte	$36
13576 30D0                        36            .byte	$36
13577 30D1                        36            .byte	$36
13578 30D2                        36            .byte	$36
13579 30D3                        36            .byte	$36
13580 30D4                        36            .byte	$36
13581 30D5                        36            .byte	$36
13582 30D6                        36            .byte	$36
13583                                           ! 1407  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13584 30D7                        00            .byte	0
13585 30D8                        00            .byte	0
13586 30D9                        00            .byte	0
13587 30DA                        00            .byte	0
13588 30DB                        00            .byte	0
13589 30DC                        FE            .byte	$FE
13590 30DD                        06            .byte	6
13591 30DE                        F6            .byte	$F6
13592 30DF                        36            .byte	$36
13593 30E0                        36            .byte	$36
13594 30E1                        36            .byte	$36
13595 30E2                        36            .byte	$36
13596 30E3                        36            .byte	$36
13597 30E4                        36            .byte	$36
13598 30E5                        36            .byte	$36
13599 30E6                        36            .byte	$36
13600                                           ! 1408  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13601 30E7                        36            .byte	$36
13602 30E8                        36            .byte	$36
13603 30E9                        36            .byte	$36
13604 30EA                        36            .byte	$36
13605 30EB                        36            .byte	$36
13606 30EC                        F6            .byte	$F6
13607 30ED                        06            .byte	6
13608 30EE                        FE            .byte	$FE
13609 30EF                        00            .byte	0
13610 30F0                        00            .byte	0
13611 30F1                        00            .byte	0
13612 30F2                        00            .byte	0
13613 30F3                        00            .byte	0
13614 30F4                        00            .byte	0
13615 30F5                        00            .byte	0
13616 30F6                        00            .byte	0
13617                                           ! 1409  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13618 30F7                        36            .byte	$36
13619 30F8                        36            .byte	$36
13620 30F9                        36            .byte	$36
13621 30FA                        36            .byte	$36
13622 30FB                        36            .byte	$36
13623 30FC                        36            .byte	$36
13624 30FD                        36            .byte	$36
13625 30FE                        FE            .byte	$FE
13626 30FF                        00            .byte	0
13627 3100                        00            .byte	0
13628 3101                        00            .byte	0
13629 3102                        00            .byte	0
13630 3103                        00            .byte	0
13631 3104                        00            .byte	0
13632 3105                        00            .byte	0
13633 3106                        00            .byte	0
13634                                           ! 1410  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13635 3107                        18            .byte	$18
13636 3108                        18            .byte	$18
13637 3109                        18            .byte	$18
13638 310A                        18            .byte	$18
13639 310B                        18            .byte	$18
13640 310C                        F8            .byte	$F8
13641 310D                        18            .byte	$18
13642 310E                        F8            .byte	$F8
13643 310F                        00            .byte	0
13644 3110                        00            .byte	0
13645 3111                        00            .byte	0
13646 3112                        00            .byte	0
13647 3113                        00            .byte	0
13648 3114                        00            .byte	0
13649 3115                        00            .byte	0
13650 3116                        00            .byte	0
13651                                           ! 1411  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13652 3117                        00            .byte	0
13653 3118                        00            .byte	0
13654 3119                        00            .byte	0
13655 311A                        00            .byte	0
13656 311B                        00            .byte	0
13657 311C                        00            .byte	0
13658 311D                        00            .byte	0
13659 311E                        F8            .byte	$F8
13660 311F                        18            .byte	$18
13661 3120                        18            .byte	$18
13662 3121                        18            .byte	$18
13663 3122                        18            .byte	$18
13664 3123                        18            .byte	$18
13665 3124                        18            .byte	$18
13666 3125                        18            .byte	$18
13667 3126                        18            .byte	$18
13668                                           ! 1412  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13669 3127                        18            .byte	$18
13670 3128                        18            .byte	$18
13671 3129                        18            .byte	$18
13672 312A                        18            .byte	$18
13673 312B                        18            .byte	$18
13674 312C                        18            .byte	$18
13675 312D                        18            .byte	$18
13676 312E                        1F            .byte	$1F
13677 312F                        00            .byte	0
13678 3130                        00            .byte	0
13679 3131                        00            .byte	0
13680 3132                        00            .byte	0
13681 3133                        00            .byte	0
13682 3134                        00            .byte	0
13683 3135                        00            .byte	0
13684 3136                        00            .byte	0
13685                                           ! 1413  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13686 3137                        18            .byte	$18
13687 3138                        18            .byte	$18
13688 3139                        18            .byte	$18
13689 313A                        18            .byte	$18
13690 313B                        18            .byte	$18
13691 313C                        18            .byte	$18
13692 313D                        18            .byte	$18
13693 313E                        FF            .byte	$FF
13694 313F                        00            .byte	0
13695 3140                        00            .byte	0
13696 3141                        00            .byte	0
13697 3142                        00            .byte	0
13698 3143                        00            .byte	0
13699 3144                        00            .byte	0
13700 3145                        00            .byte	0
13701 3146                        00            .byte	0
13702                                           ! 1414  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13703 3147                        00            .byte	0
13704 3148                        00            .byte	0
13705 3149                        00            .byte	0
13706 314A                        00            .byte	0
13707 314B                        00            .byte	0
13708 314C                        00            .byte	0
13709 314D                        00            .byte	0
13710 314E                        FF            .byte	$FF
13711 314F                        18            .byte	$18
13712 3150                        18            .byte	$18
13713 3151                        18            .byte	$18
13714 3152                        18            .byte	$18
13715 3153                        18            .byte	$18
13716 3154                        18            .byte	$18
13717 3155                        18            .byte	$18
13718 3156                        18            .byte	$18
13719                                           ! 1415  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13720 3157                        18            .byte	$18
13721 3158                        18            .byte	$18
13722 3159                        18            .byte	$18
13723 315A                        18            .byte	$18
13724 315B                        18            .byte	$18
13725 315C                        18            .byte	$18
13726 315D                        18            .byte	$18
13727 315E                        1F            .byte	$1F
13728 315F                        18            .byte	$18
13729 3160                        18            .byte	$18
13730 3161                        18            .byte	$18
13731 3162                        18            .byte	$18
13732 3163                        18            .byte	$18
13733 3164                        18            .byte	$18
13734 3165                        18            .byte	$18
13735 3166                        18            .byte	$18
13736                                           ! 1416  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13737 3167                        00            .byte	0
13738 3168                        00            .byte	0
13739 3169                        00            .byte	0
13740 316A                        00            .byte	0
13741 316B                        00            .byte	0
13742 316C                        00            .byte	0
13743 316D                        00            .byte	0
13744 316E                        FF            .byte	$FF
13745 316F                        00            .byte	0
13746 3170                        00            .byte	0
13747 3171                        00            .byte	0
13748 3172                        00            .byte	0
13749 3173                        00            .byte	0
13750 3174                        00            .byte	0
13751 3175                        00            .byte	0
13752 3176                        00            .byte	0
13753                                           ! 1417  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13754 3177                        18            .byte	$18
13755 3178                        18            .byte	$18
13756 3179                        18            .byte	$18
13757 317A                        18            .byte	$18
13758 317B                        18            .byte	$18
13759 317C                        18            .byte	$18
13760 317D                        18            .byte	$18
13761 317E                        FF            .byte	$FF
13762 317F                        18            .byte	$18
13763 3180                        18            .byte	$18
13764 3181                        18            .byte	$18
13765 3182                        18            .byte	$18
13766 3183                        18            .byte	$18
13767 3184                        18            .byte	$18
13768 3185                        18            .byte	$18
13769 3186                        18            .byte	$18
13770                                           ! 1418  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13771 3187                        18            .byte	$18
13772 3188                        18            .byte	$18
13773 3189                        18            .byte	$18
13774 318A                        18            .byte	$18
13775 318B                        18            .byte	$18
13776 318C                        1F            .byte	$1F
13777 318D                        18            .byte	$18
13778 318E                        1F            .byte	$1F
13779 318F                        18            .byte	$18
13780 3190                        18            .byte	$18
13781 3191                        18            .byte	$18
13782 3192                        18            .byte	$18
13783 3193                        18            .byte	$18
13784 3194                        18            .byte	$18
13785 3195                        18            .byte	$18
13786 3196                        18            .byte	$18
13787                                           ! 1419  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13788 3197                        36            .byte	$36
13789 3198                        36            .byte	$36
13790 3199                        36            .byte	$36
13791 319A                        36            .byte	$36
13792 319B                        36            .byte	$36
13793 319C                        36            .byte	$36
13794 319D                        36            .byte	$36
13795 319E                        37            .byte	$37
13796 319F                        36            .byte	$36
13797 31A0                        36            .byte	$36
13798 31A1                        36            .byte	$36
13799 31A2                        36            .byte	$36
13800 31A3                        36            .byte	$36
13801 31A4                        36            .byte	$36
13802 31A5                        36            .byte	$36
13803 31A6                        36            .byte	$36
13804                                           ! 1420  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13805 31A7                        36            .byte	$36
13806 31A8                        36            .byte	$36
13807 31A9                        36            .byte	$36
13808 31AA                        36            .byte	$36
13809 31AB                        36            .byte	$36
13810 31AC                        37            .byte	$37
13811 31AD                        30            .byte	$30
13812 31AE                        3F            .byte	$3F
13813 31AF                        00            .byte	0
13814 31B0                        00            .byte	0
13815 31B1                        00            .byte	0
13816 31B2                        00            .byte	0
13817 31B3                        00            .byte	0
13818 31B4                        00            .byte	0
13819 31B5                        00            .byte	0
13820 31B6                        00            .byte	0
13821                                           ! 1421  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0
13822 31B7                        00            .byte	0
13823 31B8                        00            .byte	0
13824 31B9                        00            .byte	0
13825 31BA                        00            .byte	0
13826 31BB                        00            .byte	0
13827 31BC                        3F            .byte	$3F
13828 31BD                        30            .byte	$30
13829 31BE                        37            .byte	$37
13830 31BF                        36            .byte	$36
13831                                           ! 1421 x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13832 31C0                        36            .byte	$36
13833 31C1                        36            .byte	$36
13834 31C2                        36            .byte	$36
13835 31C3                        36            .byte	$36
13836 31C4                        36            .byte	$36
13837 31C5                        36            .byte	$36
13838 31C6                        36            .byte	$36
13839                                           ! 1422  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13840 31C7                        36            .byte	$36
13841 31C8                        36            .byte	$36
13842 31C9                        36            .byte	$36
13843 31CA                        36            .byte	$36
13844 31CB                        36            .byte	$36
13845 31CC                        F7            .byte	$F7
13846 31CD                        00            .byte	0
13847 31CE                        FF            .byte	$FF
13848 31CF                        00            .byte	0
13849 31D0                        00            .byte	0
13850 31D1                        00            .byte	0
13851 31D2                        00            .byte	0
13852 31D3                        00            .byte	0
13853 31D4                        00            .byte	0
13854 31D5                        00            .byte	0
13855 31D6                        00            .byte	0
13856                                           ! 1423  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13857 31D7                        00            .byte	0
13858 31D8                        00            .byte	0
13859 31D9                        00            .byte	0
13860 31DA                        00            .byte	0
13861 31DB                        00            .byte	0
13862 31DC                        FF            .byte	$FF
13863 31DD                        00            .byte	0
13864 31DE                        F7            .byte	$F7
13865 31DF                        36            .byte	$36
13866 31E0                        36            .byte	$36
13867 31E1                        36            .byte	$36
13868 31E2                        36            .byte	$36
13869 31E3                        36            .byte	$36
13870 31E4                        36            .byte	$36
13871 31E5                        36            .byte	$36
13872 31E6                        36            .byte	$36
13873                                           ! 1424  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13874 31E7                        36            .byte	$36
13875 31E8                        36            .byte	$36
13876 31E9                        36            .byte	$36
13877 31EA                        36            .byte	$36
13878 31EB                        36            .byte	$36
13879 31EC                        37            .byte	$37
13880 31ED                        30            .byte	$30
13881 31EE                        37            .byte	$37
13882 31EF                        36            .byte	$36
13883 31F0                        36            .byte	$36
13884 31F1                        36            .byte	$36
13885 31F2                        36            .byte	$36
13886 31F3                        36            .byte	$36
13887 31F4                        36            .byte	$36
13888 31F5                        36            .byte	$36
13889 31F6                        36            .byte	$36
13890                                           ! 1425  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13891 31F7                        00            .byte	0
13892 31F8                        00            .byte	0
13893 31F9                        00            .byte	0
13894 31FA                        00            .byte	0
13895 31FB                        00            .byte	0
13896 31FC                        FF            .byte	$FF
13897 31FD                        00            .byte	0
13898 31FE                        FF            .byte	$FF
13899 31FF                        00            .byte	0
13900 3200                        00            .byte	0
13901 3201                        00            .byte	0
13902 3202                        00            .byte	0
13903 3203                        00            .byte	0
13904 3204                        00            .byte	0
13905 3205                        00            .byte	0
13906 3206                        00            .byte	0
13907                                           ! 1426  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13908 3207                        36            .byte	$36
13909 3208                        36            .byte	$36
13910 3209                        36            .byte	$36
13911 320A                        36            .byte	$36
13912 320B                        36            .byte	$36
13913 320C                        F7            .byte	$F7
13914 320D                        00            .byte	0
13915 320E                        F7            .byte	$F7
13916 320F                        36            .byte	$36
13917 3210                        36            .byte	$36
13918 3211                        36            .byte	$36
13919 3212                        36            .byte	$36
13920 3213                        36            .byte	$36
13921 3214                        36            .byte	$36
13922 3215                        36            .byte	$36
13923 3216                        36            .byte	$36
13924                                           ! 1427  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13925 3217                        18            .byte	$18
13926 3218                        18            .byte	$18
13927 3219                        18            .byte	$18
13928 321A                        18            .byte	$18
13929 321B                        18            .byte	$18
13930 321C                        FF            .byte	$FF
13931 321D                        00            .byte	0
13932 321E                        FF            .byte	$FF
13933 321F                        00            .byte	0
13934 3220                        00            .byte	0
13935 3221                        00            .byte	0
13936 3222                        00            .byte	0
13937 3223                        00            .byte	0
13938 3224                        00            .byte	0
13939 3225                        00            .byte	0
13940 3226                        00            .byte	0
13941                                           ! 1428  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13942 3227                        36            .byte	$36
13943 3228                        36            .byte	$36
13944 3229                        36            .byte	$36
13945 322A                        36            .byte	$36
13946 322B                        36            .byte	$36
13947 322C                        36            .byte	$36
13948 322D                        36            .byte	$36
13949 322E                        FF            .byte	$FF
13950 322F                        00            .byte	0
13951 3230                        00            .byte	0
13952 3231                        00            .byte	0
13953 3232                        00            .byte	0
13954 3233                        00            .byte	0
13955 3234                        00            .byte	0
13956 3235                        00            .byte	0
13957 3236                        00            .byte	0
13958                                           ! 1429  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13959 3237                        00            .byte	0
13960 3238                        00            .byte	0
13961 3239                        00            .byte	0
13962 323A                        00            .byte	0
13963 323B                        00            .byte	0
13964 323C                        FF            .byte	$FF
13965 323D                        00            .byte	0
13966 323E                        FF            .byte	$FF
13967 323F                        18            .byte	$18
13968 3240                        18            .byte	$18
13969 3241                        18            .byte	$18
13970 3242                        18            .byte	$18
13971 3243                        18            .byte	$18
13972 3244                        18            .byte	$18
13973 3245                        18            .byte	$18
13974 3246                        18            .byte	$18
13975                                           ! 1430  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13976 3247                        00            .byte	0
13977 3248                        00            .byte	0
13978 3249                        00            .byte	0
13979 324A                        00            .byte	0
13980 324B                        00            .byte	0
13981 324C                        00            .byte	0
13982 324D                        00            .byte	0
13983 324E                        FF            .byte	$FF
13984 324F                        36            .byte	$36
13985 3250                        36            .byte	$36
13986 3251                        36            .byte	$36
13987 3252                        36            .byte	$36
13988 3253                        36            .byte	$36
13989 3254                        36            .byte	$36
13990 3255                        36            .byte	$36
13991 3256                        36            .byte	$36
13992                                           ! 1431  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13993 3257                        36            .byte	$36
13994 3258                        36            .byte	$36
13995 3259                        36            .byte	$36
13996 325A                        36            .byte	$36
13997 325B                        36            .byte	$36
13998 325C                        36            .byte	$36
13999 325D                        36            .byte	$36
14000 325E                        3F            .byte	$3F
14001 325F                        00            .byte	0
14002 3260                        00            .byte	0
14003 3261                        00            .byte	0
14004 3262                        00            .byte	0
14005 3263                        00            .byte	0
14006 3264                        00            .byte	0
14007 3265                        00            .byte	0
14008 3266                        00            .byte	0
14009                                           ! 1432  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14010 3267                        18            .byte	$18
14011 3268                        18            .byte	$18
14012 3269                        18            .byte	$18
14013 326A                        18            .byte	$18
14014 326B                        18            .byte	$18
14015 326C                        1F            .byte	$1F
14016 326D                        18            .byte	$18
14017 326E                        1F            .byte	$1F
14018 326F                        00            .byte	0
14019 3270                        00            .byte	0
14020 3271                        00            .byte	0
14021 3272                        00            .byte	0
14022 3273                        00            .byte	0
14023 3274                        00            .byte	0
14024 3275                        00            .byte	0
14025 3276                        00            .byte	0
14026                                           ! 1433  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14027 3277                        00            .byte	0
14028 3278                        00            .byte	0
14029 3279                        00            .byte	0
14030 327A                        00            .byte	0
14031 327B                        00            .byte	0
14032 327C                        1F            .byte	$1F
14033 327D                        18            .byte	$18
14034 327E                        1F            .byte	$1F
14035 327F                        18            .byte	$18
14036 3280                        18            .byte	$18
14037 3281                        18            .byte	$18
14038 3282                        18            .byte	$18
14039 3283                        18            .byte	$18
14040 3284                        18            .byte	$18
14041 3285                        18            .byte	$18
14042 3286                        18            .byte	$18
14043                                           ! 1434  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14044 3287                        00            .byte	0
14045 3288                        00            .byte	0
14046 3289                        00            .byte	0
14047 328A                        00            .byte	0
14048 328B                        00            .byte	0
14049 328C                        00            .byte	0
14050 328D                        00            .byte	0
14051 328E                        3F            .byte	$3F
14052 328F                        36            .byte	$36
14053 3290                        36            .byte	$36
14054 3291                        36            .byte	$36
14055 3292                        36            .byte	$36
14056 3293                        36            .byte	$36
14057 3294                        36            .byte	$36
14058 3295                        36            .byte	$36
14059 3296                        36            .byte	$36
14060                                           ! 1435  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14061 3297                        36            .byte	$36
14062 3298                        36            .byte	$36
14063 3299                        36            .byte	$36
14064 329A                        36            .byte	$36
14065 329B                        36            .byte	$36
14066 329C                        36            .byte	$36
14067 329D                        36            .byte	$36
14068 329E                        FF            .byte	$FF
14069 329F                        36            .byte	$36
14070 32A0                        36            .byte	$36
14071 32A1                        36            .byte	$36
14072 32A2                        36            .byte	$36
14073 32A3                        36            .byte	$36
14074 32A4                        36            .byte	$36
14075 32A5                        36            .byte	$36
14076 32A6                        36            .byte	$36
14077                                           ! 1436  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14078 32A7                        18            .byte	$18
14079 32A8                        18            .byte	$18
14080 32A9                        18            .byte	$18
14081 32AA                        18            .byte	$18
14082 32AB                        18            .byte	$18
14083 32AC                        FF            .byte	$FF
14084 32AD                        18            .byte	$18
14085 32AE                        FF            .byte	$FF
14086 32AF                        18            .byte	$18
14087 32B0                        18            .byte	$18
14088 32B1                        18            .byte	$18
14089 32B2                        18            .byte	$18
14090 32B3                        18            .byte	$18
14091 32B4                        18            .byte	$18
14092 32B5                        18            .byte	$18
14093 32B6                        18            .byte	$18
14094                                           ! 1437  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14095 32B7                        18            .byte	$18
14096 32B8                        18            .byte	$18
14097 32B9                        18            .byte	$18
14098 32BA                        18            .byte	$18
14099 32BB                        18            .byte	$18
14100 32BC                        18            .byte	$18
14101 32BD                        18            .byte	$18
14102 32BE                        F8            .byte	$F8
14103 32BF                        00            .byte	0
14104 32C0                        00            .byte	0
14105 32C1                        00            .byte	0
14106 32C2                        00            .byte	0
14107 32C3                        00            .byte	0
14108 32C4                        00            .byte	0
14109 32C5                        00            .byte	0
14110 32C6                        00            .byte	0
14111                                           ! 1438  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14112 32C7                        00            .byte	0
14113 32C8                        00            .byte	0
14114 32C9                        00            .byte	0
14115 32CA                        00            .byte	0
14116 32CB                        00            .byte	0
14117 32CC                        00            .byte	0
14118 32CD                        00            .byte	0
14119 32CE                        1F            .byte	$1F
14120 32CF                        18            .byte	$18
14121 32D0                        18            .byte	$18
14122 32D1                        18            .byte	$18
14123 32D2                        18            .byte	$18
14124 32D3                        18            .byte	$18
14125 32D4                        18            .byte	$18
14126 32D5                        18            .byte	$18
14127 32D6                        18            .byte	$18
14128                                           ! 1439  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14129 32D7                        FF            .byte	$FF
14130 32D8                        FF            .byte	$FF
14131 32D9                        FF            .byte	$FF
14132 32DA                        FF            .byte	$FF
14133 32DB                        FF            .byte	$FF
14134 32DC                        FF            .byte	$FF
14135 32DD                        FF            .byte	$FF
14136 32DE                        FF            .byte	$FF
14137 32DF                        FF            .byte	$FF
14138 32E0                        FF            .byte	$FF
14139 32E1                        FF            .byte	$FF
14140 32E2                        FF            .byte	$FF
14141 32E3                        FF            .byte	$FF
14142 32E4                        FF            .byte	$FF
14143 32E5                        FF            .byte	$FF
14144 32E6                        FF            .byte	$FF
14145                                           ! 1440  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14146 32E7                        00            .byte	0
14147 32E8                        00            .byte	0
14148 32E9                        00            .byte	0
14149 32EA                        00            .byte	0
14150 32EB                        00            .byte	0
14151 32EC                        00            .byte	0
14152 32ED                        00            .byte	0
14153 32EE                        FF            .byte	$FF
14154 32EF                        FF            .byte	$FF
14155 32F0                        FF            .byte	$FF
14156 32F1                        FF            .byte	$FF
14157 32F2                        FF            .byte	$FF
14158 32F3                        FF            .byte	$FF
14159 32F4                        FF            .byte	$FF
14160 32F5                        FF            .byte	$FF
14161 32F6                        FF            .byte	$FF
14162                                           ! 1441  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14163 32F7                        F0            .byte	$F0
14164 32F8                        F0            .byte	$F0
14165 32F9                        F0            .byte	$F0
14166 32FA                        F0            .byte	$F0
14167 32FB                        F0            .byte	$F0
14168 32FC                        F0            .byte	$F0
14169 32FD                        F0            .byte	$F0
14170 32FE                        F0            .byte	$F0
14171 32FF                        F0            .byte	$F0
14172 3300                        F0            .byte	$F0
14173 3301                        F0            .byte	$F0
14174 3302                        F0            .byte	$F0
14175 3303                        F0            .byte	$F0
14176 3304                        F0            .byte	$F0
14177 3305                        F0            .byte	$F0
14178 3306                        F0            .byte	$F0
14179                                           ! 1442  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
14180 3307                        0F            .byte	$F
14181 3308                        0F            .byte	$F
14182 3309                        0F            .byte	$F
14183 330A                        0F            .byte	$F
14184 330B                        0F            .byte	$F
14185 330C                        0F            .byte	$F
14186 330D                        0F            .byte	$F
14187 330E                        0F            .byte	$F
14188 330F                        0F            .byte	$F
14189 3310                        0F            .byte	$F
14190 3311                        0F            .byte	$F
14191                                           ! 1442 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14192 3312                        0F            .byte	$F
14193 3313                        0F            .byte	$F
14194 3314                        0F            .byte	$F
14195 3315                        0F            .byte	$F
14196 3316                        0F            .byte	$F
14197                                           ! 1443  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14198 3317                        FF            .byte	$FF
14199 3318                        FF            .byte	$FF
14200 3319                        FF            .byte	$FF
14201 331A                        FF            .byte	$FF
14202 331B                        FF            .byte	$FF
14203 331C                        FF            .byte	$FF
14204 331D                        FF            .byte	$FF
14205 331E                        00            .byte	0
14206 331F                        00            .byte	0
14207 3320                        00            .byte	0
14208 3321                        00            .byte	0
14209 3322                        00            .byte	0
14210 3323                        00            .byte	0
14211 3324                        00            .byte	0
14212 3325                        00            .byte	0
14213 3326                        00            .byte	0
14214                                           ! 1444  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14215 3327                        00            .byte	0
14216 3328                        00            .byte	0
14217 3329                        00            .byte	0
14218 332A                        00            .byte	0
14219 332B                        00            .byte	0
14220 332C                        76            .byte	$76
14221 332D                        DC            .byte	$DC
14222 332E                        D8            .byte	$D8
14223 332F                        D8            .byte	$D8
14224 3330                        D8            .byte	$D8
14225 3331                        DC            .byte	$DC
14226 3332                        76            .byte	$76
14227 3333                        00            .byte	0
14228 3334                        00            .byte	0
14229 3335                        00            .byte	0
14230 3336                        00            .byte	0
14231                                           ! 1445  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14232 3337                        00            .byte	0
14233 3338                        00            .byte	0
14234 3339                        78            .byte	$78
14235 333A                        CC            .byte	$CC
14236 333B                        CC            .byte	$CC
14237 333C                        CC            .byte	$CC
14238 333D                        D8            .byte	$D8
14239 333E                        CC            .byte	$CC
14240 333F                        C6            .byte	$C6
14241 3340                        C6            .byte	$C6
14242 3341                        C6            .byte	$C6
14243 3342                        CC            .byte	$CC
14244 3343                        00            .byte	0
14245 3344                        00            .byte	0
14246 3345                        00            .byte	0
14247 3346                        00            .byte	0
14248                                           ! 1446  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14249 3347                        00            .byte	0
14250 3348                        00            .byte	0
14251 3349                        FE            .byte	$FE
14252 334A                        C6            .byte	$C6
14253 334B                        C6            .byte	$C6
14254 334C                        C0            .byte	$C0
14255 334D                        C0            .byte	$C0
14256 334E                        C0            .byte	$C0
14257 334F                        C0            .byte	$C0
14258 3350                        C0            .byte	$C0
14259 3351                        C0            .byte	$C0
14260 3352                        C0            .byte	$C0
14261 3353                        00            .byte	0
14262 3354                        00            .byte	0
14263 3355                        00            .byte	0
14264 3356                        00            .byte	0
14265                                           ! 1447  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14266 3357                        00            .byte	0
14267 3358                        00            .byte	0
14268 3359                        00            .byte	0
14269 335A                        00            .byte	0
14270 335B                        FE            .byte	$FE
14271 335C                        6C            .byte	$6C
14272 335D                        6C            .byte	$6C
14273 335E                        6C            .byte	$6C
14274 335F                        6C            .byte	$6C
14275 3360                        6C            .byte	$6C
14276 3361                        6C            .byte	$6C
14277 3362                        6C            .byte	$6C
14278 3363                        00            .byte	0
14279 3364                        00            .byte	0
14280 3365                        00            .byte	0
14281 3366                        00            .byte	0
14282                                           ! 1448  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14283 3367                        00            .byte	0
14284 3368                        00            .byte	0
14285 3369                        00            .byte	0
14286 336A                        FE            .byte	$FE
14287 336B                        C6            .byte	$C6
14288 336C                        60            .byte	$60
14289 336D                        30            .byte	$30
14290 336E                        18            .byte	$18
14291 336F                        30            .byte	$30
14292 3370                        60            .byte	$60
14293 3371                        C6            .byte	$C6
14294 3372                        FE            .byte	$FE
14295 3373                        00            .byte	0
14296 3374                        00            .byte	0
14297 3375                        00            .byte	0
14298 3376                        00            .byte	0
14299                                           ! 1449  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14300 3377                        00            .byte	0
14301 3378                        00            .byte	0
14302 3379                        00            .byte	0
14303 337A                        00            .byte	0
14304 337B                        00            .byte	0
14305 337C                        7E            .byte	$7E
14306 337D                        D8            .byte	$D8
14307 337E                        D8            .byte	$D8
14308 337F                        D8            .byte	$D8
14309 3380                        D8            .byte	$D8
14310 3381                        D8            .byte	$D8
14311 3382                        70            .byte	$70
14312 3383                        00            .byte	0
14313 3384                        00            .byte	0
14314 3385                        00            .byte	0
14315 3386                        00            .byte	0
14316                                           ! 1450  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14317 3387                        00            .byte	0
14318 3388                        00            .byte	0
14319 3389                        00            .byte	0
14320 338A                        00            .byte	0
14321 338B                        66            .byte	$66
14322 338C                        66            .byte	$66
14323 338D                        66            .byte	$66
14324 338E                        66            .byte	$66
14325 338F                        66            .byte	$66
14326 3390                        7C            .byte	$7C
14327 3391                        60            .byte	$60
14328 3392                        60            .byte	$60
14329 3393                        C0            .byte	$C0
14330 3394                        00            .byte	0
14331 3395                        00            .byte	0
14332 3396                        00            .byte	0
14333                                           ! 1451  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14334 3397                        00            .byte	0
14335 3398                        00            .byte	0
14336 3399                        00            .byte	0
14337 339A                        00            .byte	0
14338 339B                        76            .byte	$76
14339 339C                        DC            .byte	$DC
14340 339D                        18            .byte	$18
14341 339E                        18            .byte	$18
14342 339F                        18            .byte	$18
14343 33A0                        18            .byte	$18
14344 33A1                        18            .byte	$18
14345 33A2                        18            .byte	$18
14346 33A3                        00            .byte	0
14347 33A4                        00            .byte	0
14348 33A5                        00            .byte	0
14349 33A6                        00            .byte	0
14350                                           ! 1452  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14351 33A7                        00            .byte	0
14352 33A8                        00            .byte	0
14353 33A9                        00            .byte	0
14354 33AA                        7E            .byte	$7E
14355 33AB                        18            .byte	$18
14356 33AC                        3C            .byte	$3C
14357 33AD                        66            .byte	$66
14358 33AE                        66            .byte	$66
14359 33AF                        66            .byte	$66
14360 33B0                        3C            .byte	$3C
14361 33B1                        18            .byte	$18
14362 33B2                        7E            .byte	$7E
14363 33B3                        00            .byte	0
14364 33B4                        00            .byte	0
14365 33B5                        00            .byte	0
14366 33B6                        00            .byte	0
14367                                           ! 1453  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14368 33B7                        00            .byte	0
14369 33B8                        00            .byte	0
14370 33B9                        00            .byte	0
14371 33BA                        38            .byte	$38
14372 33BB                        6C            .byte	$6C
14373 33BC                        C6            .byte	$C6
14374 33BD                        C6            .byte	$C6
14375 33BE                        FE            .byte	$FE
14376 33BF                        C6            .byte	$C6
14377 33C0                        C6            .byte	$C6
14378 33C1                        6C            .byte	$6C
14379 33C2                        38            .byte	$38
14380 33C3                        00            .byte	0
14381 33C4                        00            .byte	0
14382 33C5                        00            .byte	0
14383 33C6                        00            .byte	0
14384                                           ! 1454  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14385 33C7                        00            .byte	0
14386 33C8                        00            .byte	0
14387 33C9                        38            .byte	$38
14388 33CA                        6C            .byte	$6C
14389 33CB                        C6            .byte	$C6
14390 33CC                        C6            .byte	$C6
14391 33CD                        C6            .byte	$C6
14392 33CE                        6C            .byte	$6C
14393 33CF                        6C            .byte	$6C
14394 33D0                        6C            .byte	$6C
14395 33D1                        6C            .byte	$6C
14396 33D2                        EE            .byte	$EE
14397 33D3                        00            .byte	0
14398 33D4                        00            .byte	0
14399 33D5                        00            .byte	0
14400 33D6                        00            .byte	0
14401                                           ! 1455  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14402 33D7                        00            .byte	0
14403 33D8                        00            .byte	0
14404 33D9                        1E            .byte	$1E
14405 33DA                        30            .byte	$30
14406 33DB                        18            .byte	$18
14407 33DC                        0C            .byte	$C
14408 33DD                        3E            .byte	$3E
14409 33DE                        66            .byte	$66
14410 33DF                        66            .byte	$66
14411 33E0                        66            .byte	$66
14412 33E1                        66            .byte	$66
14413 33E2                        3C            .byte	$3C
14414 33E3                        00            .byte	0
14415 33E4                        00            .byte	0
14416 33E5                        00            .byte	0
14417 33E6                        00            .byte	0
14418                                           ! 1456  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14419 33E7                        00            .byte	0
14420 33E8                        00            .byte	0
14421 33E9                        00            .byte	0
14422 33EA                        00            .byte	0
14423 33EB                        00            .byte	0
14424 33EC                        7E            .byte	$7E
14425 33ED                        DB            .byte	$DB
14426 33EE                        DB            .byte	$DB
14427 33EF                        DB            .byte	$DB
14428 33F0                        7E            .byte	$7E
14429 33F1                        00            .byte	0
14430 33F2                        00            .byte	0
14431 33F3                        00            .byte	0
14432 33F4                        00            .byte	0
14433 33F5                        00            .byte	0
14434 33F6                        00            .byte	0
14435                                           ! 1457  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14436 33F7                        00            .byte	0
14437 33F8                        00            .byte	0
14438 33F9                        00            .byte	0
14439 33FA                        03            .byte	3
14440 33FB                        06            .byte	6
14441 33FC                        7E            .byte	$7E
14442 33FD                        DB            .byte	$DB
14443 33FE                        DB            .byte	$DB
14444 33FF                        F3            .byte	$F3
14445 3400                        7E            .byte	$7E
14446 3401                        60            .byte	$60
14447 3402                        C0            .byte	$C0
14448 3403                        00            .byte	0
14449 3404                        00            .byte	0
14450 3405                        00            .byte	0
14451 3406                        00            .byte	0
14452                                           ! 1458  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14453 3407                        00            .byte	0
14454 3408                        00            .byte	0
14455 3409                        1C            .byte	$1C
14456 340A                        30            .byte	$30
14457 340B                        60            .byte	$60
14458 340C                        60            .byte	$60
14459 340D                        7C            .byte	$7C
14460 340E                        60            .byte	$60
14461 340F                        60            .byte	$60
14462 3410                        60            .byte	$60
14463 3411                        30            .byte	$30
14464 3412                        1C            .byte	$1C
14465 3413                        00            .byte	0
14466 3414                        00            .byte	0
14467 3415                        00            .byte	0
14468 3416                        00            .byte	0
14469                                           ! 1459  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14470 3417                        00            .byte	0
14471 3418                        00            .byte	0
14472 3419                        00            .byte	0
14473 341A                        7C            .byte	$7C
14474 341B                        C6            .byte	$C6
14475 341C                        C6            .byte	$C6
14476 341D                        C6            .byte	$C6
14477 341E                        C6            .byte	$C6
14478 341F                        C6            .byte	$C6
14479 3420                        C6            .byte	$C6
14480 3421                        C6            .byte	$C6
14481 3422                        C6            .byte	$C6
14482 3423                        00            .byte	0
14483 3424                        00            .byte	0
14484 3425                        00            .byte	0
14485 3426                        00            .byte	0
14486                                           ! 1460  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14487 3427                        00            .byte	0
14488 3428                        00            .byte	0
14489 3429                        00            .byte	0
14490 342A                        00            .byte	0
14491 342B                        FE            .byte	$FE
14492 342C                        00            .byte	0
14493 342D                        00            .byte	0
14494 342E                        FE            .byte	$FE
14495 342F                        00            .byte	0
14496 3430                        00            .byte	0
14497 3431                        FE            .byte	$FE
14498 3432                        00            .byte	0
14499 3433                        00            .byte	0
14500 3434                        00            .byte	0
14501 3435                        00            .byte	0
14502 3436                        00            .byte	0
14503                                           ! 1461  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14504 3437                        00            .byte	0
14505 3438                        00            .byte	0
14506 3439                        00            .byte	0
14507 343A                        00            .byte	0
14508 343B                        18            .byte	$18
14509 343C                        18            .byte	$18
14510 343D                        7E            .byte	$7E
14511 343E                        18            .byte	$18
14512 343F                        18            .byte	$18
14513 3440                        00            .byte	0
14514 3441                        00            .byte	0
14515 3442                        FF            .byte	$FF
14516 3443                        00            .byte	0
14517 3444                        00            .byte	0
14518 3445                        00            .byte	0
14519 3446                        00            .byte	0
14520                                           ! 1462  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14521 3447                        00            .byte	0
14522 3448                        00            .byte	0
14523 3449                        00            .byte	0
14524 344A                        30            .byte	$30
14525 344B                        18            .byte	$18
14526 344C                        0C            .byte	$C
14527 344D                        06            .byte	6
14528 344E                        0C            .byte	$C
14529 344F                        18            .byte	$18
14530 3450                        30            .byte	$30
14531 3451                        00            .byte	0
14532 3452                        7E            .byte	$7E
14533 3453                        00            .byte	0
14534 3454                        00            .byte	0
14535 3455                        00            .byte	0
14536 3456                        00            .byte	0
14537                                           ! 1463  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00,
14538 3457                        00            .byte	0
14539 3458                        00            .byte	0
14540 3459                        00            .byte	0
14541 345A                        0C            .byte	$C
14542 345B                        18            .byte	$18
14543 345C                        30            .byte	$30
14544 345D                        60            .byte	$60
14545 345E                        30            .byte	$30
14546 345F                        18            .byte	$18
14547 3460                        0C            .byte	$C
14548 3461                        00            .byte	0
14549 3462                        7E            .byte	$7E
14550                                           ! 1463  0x00, 0x00, 0x00,
14551 3463                        00            .byte	0
14552 3464                        00            .byte	0
14553 3465                        00            .byte	0
14554 3466                        00            .byte	0
14555                                           ! 1464  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14556 3467                        00            .byte	0
14557 3468                        00            .byte	0
14558 3469                        0E            .byte	$E
14559 346A                        1B            .byte	$1B
14560 346B                        1B            .byte	$1B
14561 346C                        18            .byte	$18
14562 346D                        18            .byte	$18
14563 346E                        18            .byte	$18
14564 346F                        18            .byte	$18
14565 3470                        18            .byte	$18
14566 3471                        18            .byte	$18
14567 3472                        18            .byte	$18
14568 3473                        18            .byte	$18
14569 3474                        18            .byte	$18
14570 3475                        18            .byte	$18
14571 3476                        18            .byte	$18
14572                                           ! 1465  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14573 3477                        18            .byte	$18
14574 3478                        18            .byte	$18
14575 3479                        18            .byte	$18
14576 347A                        18            .byte	$18
14577 347B                        18            .byte	$18
14578 347C                        18            .byte	$18
14579 347D                        18            .byte	$18
14580 347E                        18            .byte	$18
14581 347F                        D8            .byte	$D8
14582 3480                        D8            .byte	$D8
14583 3481                        D8            .byte	$D8
14584 3482                        70            .byte	$70
14585 3483                        00            .byte	0
14586 3484                        00            .byte	0
14587 3485                        00            .byte	0
14588 3486                        00            .byte	0
14589                                           ! 1466  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14590 3487                        00            .byte	0
14591 3488                        00            .byte	0
14592 3489                        00            .byte	0
14593 348A                        00            .byte	0
14594 348B                        18            .byte	$18
14595 348C                        18            .byte	$18
14596 348D                        00            .byte	0
14597 348E                        7E            .byte	$7E
14598 348F                        00            .byte	0
14599 3490                        18            .byte	$18
14600 3491                        18            .byte	$18
14601 3492                        00            .byte	0
14602 3493                        00            .byte	0
14603 3494                        00            .byte	0
14604 3495                        00            .byte	0
14605 3496                        00            .byte	0
14606                                           ! 1467  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14607 3497                        00            .byte	0
14608 3498                        00            .byte	0
14609 3499                        00            .byte	0
14610 349A                        00            .byte	0
14611 349B                        00            .byte	0
14612 349C                        76            .byte	$76
14613 349D                        DC            .byte	$DC
14614 349E                        00            .byte	0
14615 349F                        76            .byte	$76
14616 34A0                        DC            .byte	$DC
14617 34A1                        00            .byte	0
14618 34A2                        00            .byte	0
14619 34A3                        00            .byte	0
14620 34A4                        00            .byte	0
14621 34A5                        00            .byte	0
14622 34A6                        00            .byte	0
14623                                           ! 1468  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14624 34A7                        00            .byte	0
14625 34A8                        38            .byte	$38
14626 34A9                        6C            .byte	$6C
14627 34AA                        6C            .byte	$6C
14628 34AB                        38            .byte	$38
14629 34AC                        00            .byte	0
14630 34AD                        00            .byte	0
14631 34AE                        00            .byte	0
14632 34AF                        00            .byte	0
14633 34B0                        00            .byte	0
14634 34B1                        00            .byte	0
14635 34B2                        00            .byte	0
14636 34B3                        00            .byte	0
14637 34B4                        00            .byte	0
14638 34B5                        00            .byte	0
14639 34B6                        00            .byte	0
14640                                           ! 1469  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14641 34B7                        00            .byte	0
14642 34B8                        00            .byte	0
14643 34B9                        00            .byte	0
14644 34BA                        00            .byte	0
14645 34BB                        00            .byte	0
14646 34BC                        00            .byte	0
14647 34BD                        00            .byte	0
14648 34BE                        18            .byte	$18
14649 34BF                        18            .byte	$18
14650 34C0                        00            .byte	0
14651 34C1                        00            .byte	0
14652 34C2                        00            .byte	0
14653 34C3                        00            .byte	0
14654 34C4                        00            .byte	0
14655 34C5                        00            .byte	0
14656 34C6                        00            .byte	0
14657                                           ! 1470  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14658 34C7                        00            .byte	0
14659 34C8                        00            .byte	0
14660 34C9                        00            .byte	0
14661 34CA                        00            .byte	0
14662 34CB                        00            .byte	0
14663 34CC                        00            .byte	0
14664 34CD                        00            .byte	0
14665 34CE                        00            .byte	0
14666 34CF                        18            .byte	$18
14667 34D0                        00            .byte	0
14668 34D1                        00            .byte	0
14669 34D2                        00            .byte	0
14670 34D3                        00            .byte	0
14671 34D4                        00            .byte	0
14672 34D5                        00            .byte	0
14673 34D6                        00            .byte	0
14674                                           ! 1471  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14675 34D7                        00            .byte	0
14676 34D8                        0F            .byte	$F
14677 34D9                        0C            .byte	$C
14678 34DA                        0C            .byte	$C
14679 34DB                        0C            .byte	$C
14680 34DC                        0C            .byte	$C
14681 34DD                        0C            .byte	$C
14682 34DE                        EC            .byte	$EC
14683 34DF                        6C            .byte	$6C
14684 34E0                        6C            .byte	$6C
14685 34E1                        3C            .byte	$3C
14686 34E2                        1C            .byte	$1C
14687 34E3                        00            .byte	0
14688 34E4                        00            .byte	0
14689 34E5                        00            .byte	0
14690 34E6                        00            .byte	0
14691                                           ! 1472  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14692 34E7                        00            .byte	0
14693 34E8                        D8            .byte	$D8
14694 34E9                        6C            .byte	$6C
14695 34EA                        6C            .byte	$6C
14696 34EB                        6C            .byte	$6C
14697 34EC                        6C            .byte	$6C
14698 34ED                        6C            .byte	$6C
14699 34EE                        00            .byte	0
14700 34EF                        00            .byte	0
14701 34F0                        00            .byte	0
14702 34F1                        00            .byte	0
14703 34F2                        00            .byte	0
14704 34F3                        00            .byte	0
14705 34F4                        00            .byte	0
14706 34F5                        00            .byte	0
14707 34F6                        00            .byte	0
14708                                           ! 1473  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14709 34F7                        00            .byte	0
14710 34F8                        70            .byte	$70
14711 34F9                        D8            .byte	$D8
14712 34FA                        30            .byte	$30
14713 34FB                        60            .byte	$60
14714 34FC                        C8            .byte	$C8
14715 34FD                        F8            .byte	$F8
14716 34FE                        00            .byte	0
14717 34FF                        00            .byte	0
14718 3500                        00            .byte	0
14719 3501                        00            .byte	0
14720 3502                        00            .byte	0
14721 3503                        00            .byte	0
14722 3504                        00            .byte	0
14723 3505                        00            .byte	0
14724 3506                        00            .byte	0
14725                                           ! 1474  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
14726 3507                        00            .byte	0
14727 3508                        00            .byte	0
14728 3509                        00            .byte	0
14729 350A                        00            .byte	0
14730 350B                        7C            .byte	$7C
14731 350C                        7C            .byte	$7C
14732 350D                        7C            .byte	$7C
14733 350E                        7C            .byte	$7C
14734 350F                        7C            .byte	$7C
14735 3510                        7C            .byte	$7C
14736 3511                        7C            .byte	$7C
14737 3512                        00            .byte	0
14738 3513                        00            .byte	0
14739 3514                        00            .byte	0
14740 3515                        00            .byte	0
14741 3516                        00            .byte	0
14742                                           ! 1475  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
14743 3517                        00            .byte	0
14744 3518                        00            .byte	0
14745 3519                        00            .byte	0
14746 351A                        00            .byte	0
14747 351B                        00            .byte	0
14748 351C                        00            .byte	0
14749 351D                        00            .byte	0
14750 351E                        00            .byte	0
14751 351F                        00            .byte	0
14752 3520                        00            .byte	0
14753 3521                        00            .byte	0
14754 3522                        00            .byte	0
14755 3523                        00            .byte	0
14756 3524                        00            .byte	0
14757 3525                        00            .byte	0
14758                                           ! 1476 };
14759 3526                        00            .byte	0
14760                                           !BCC_EOS
14761                                           ! 1477 static Bit8u vgafont14alt[1]={0x00};
14762                       00003527            _vgafont14alt:
14763 3527                        00            .byte	0
14764                                           !BCC_EOS
14765                                           ! 1478 static Bit8u vgafont16alt[1]={0x00};
14766                       00003528            _vgafont16alt:
14767 3528                        00            .byte	0
14768                                           !BCC_EOS
14769                                           ! 1479 #asm
14770                                           !BCC_ASM
14771                       00003529            init_vga_card:
14772                                           ;; switch to color mode and enable CPU access 480 lines
14773 3529           BA                   03C2    mov dx, #0x3C2
14774 352C           B0                     C3    mov al, #0xC3
14775 352E           EE                           outb dx,al
14776                                           ;; more than 64k 3C4/04
14777 352F           BA                   03C4    mov dx, #0x3C4
14778 3532           B0                     04    mov al, #0x04
14779 3534           EE                           outb dx,al
14780 3535           BA                   03C5    mov dx, #0x3C5
14781 3538           B0                     02    mov al, #0x02
14782 353A           EE                           outb dx,al
14783 353B           BB                   3545    mov bx, #msg_vga_init
14784 353E           53                           push bx
14785 353F           E8         4696              call _printf
14786 3542           44                           inc sp
14787 3543           44                           inc sp
14788 3544           C3                           ret
14789                       00003545            msg_vga_init:
14790 3545                        56            .ascii "VGABios $Id: vgabios.c,v 1.69 2009/04/07 18:18:20 vruppert Exp $"
14791 3585                        0D            .byte 0x0d,0x0a,0x00
14792                                           ! 1501 endasm
14793                                           !BCC_ENDASM
14794                                           ! 1502 #asm
14795                                           !BCC_ASM
14796                       00003588            init_bios_area:
14797 3588           1E                           push ds
14798 3589           B8                   0040    mov ax, # 0x40
14799 358C           8ED8                         mov ds, ax
14800                                           ;; init detected hardware BIOS Area
14801 358E           BB                   0010    mov bx, # 0x10
14802 3591           8B07                         mov ax, [bx]
14803 3593           25                   FFCF    and ax, #0xffcf
14804                                           ;; set 80x25 color (not clear from RBIL but usual)
14805 3596           0D                   0020    or ax, #0x0020
14806 3599           8907                         mov [bx], ax
14807                                           ;; Just for the first int10 find its children
14808                                           ;; the default char height
14809 359B           BB                   0085    mov bx, # 0x85
14810 359E           B0                     10    mov al, #0x10
14811 35A0           8807                         mov [bx], al
14812                                           ;; Clear the screen
14813 35A2           BB                   0087    mov bx, # 0x87
14814 35A5           B0                     60    mov al, #0x60
14815 35A7           8807                         mov [bx], al
14816                                           ;; Set the basic screen we have
14817 35A9           BB                   0088    mov bx, # 0x88
14818 35AC           B0                     F9    mov al, #0xf9
14819 35AE           8807                         mov [bx], al
14820                                           ;; Set the basic modeset options
14821 35B0           BB                   0089    mov bx, # 0x89
14822 35B3           B0                     51    mov al, #0x51
14823 35B5           8807                         mov [bx], al
14824                                           ;; Set the default MSR
14825 35B7           BB                   0065    mov bx, # 0x65
14826 35BA           B0                     09    mov al, #0x09
14827 35BC           8807                         mov [bx], al
14828 35BE           1F                           pop ds
14829 35BF           C3                           ret
14830                       000035C0            _video_save_pointer_table:
14831 35C0                      0257              .word _video_param_table
14832 35C2                      C000              .word 0xc000
14833 35C4                      0000              .word 0
14834 35C6                      0000              .word 0
14835 35C8                      0000              .word 0
14836 35CA                      0000              .word 0
14837 35CC                      0000              .word 0
14838 35CE                      0000              .word 0
14839 35D0                      0000              .word 0
14840 35D2                      0000              .word 0
14841 35D4                      0000              .word 0
14842 35D6                      0000              .word 0
14843 35D8                      0000              .word 0
14844 35DA                      0000              .word 0
14845                                           ! 1552 endasm
14846                                           !BCC_ENDASM
14847                                           ! 1553 static void display_splash_screen()
14848                                           ! 1554 {
14849                                           
14850                       000035DC            _display_splash_screen:
14851                                           ! 1555 }
14852 35DC           C3                         ret
14853                                           ! 1556 static void display_info()
14854                                           ! 1557 {
14855                       000035DD            _display_info:
14856                                           ! 1558 #asm
14857                                           !BCC_ASM
14858 35DD           B8                   C000   mov ax,#0xc000
14859 35E0           8ED8                        mov ds,ax
14860 35E2           BE                   0022   mov si,#vgabios_name
14861 35E5           E8         0013             call _display_string
14862 35E8           BE                   0038   mov si,#vgabios_version
14863 35EB           E8         000D             call _display_string
14864                                            ;;mov si,#vgabios_copyright
14865                                            ;;call _display_string
14866                                            ;;mov si,#crlf
14867                                            ;;call _display_string
14868 35EE           BE                   007E   mov si,#vgabios_license
14869 35F1           E8         0007             call _display_string
14870 35F4           BE                   00B3   mov si,#vgabios_website
14871 35F7           E8         0001             call _display_string
14872                                           ! 1573 endasm
14873                                           !BCC_ENDASM
14874                                           ! 1574 }
14875 35FA           C3                         ret
14876                                           ! 1575 static void display_string()
14877                                           ! 1576 {
14878                       000035FB            _display_string:
14879                                           ! 1577 #asm
14880                                           !BCC_ASM
14881 35FB           8CD8                        mov ax,ds
14882 35FD           8EC0                        mov es,ax
14883 35FF           89F7                        mov di,si
14884 3601           31C9                        xor cx,cx
14885 3603           F7D1                        not cx
14886 3605           30C0                        xor al,al
14887 3607           FC                          cld
14888 3608           F2                          repne
14889 3609           AE                           scasb
14890 360A           F7D1                        not cx
14891 360C           49                          dec cx
14892 360D           51                          push cx
14893 360E           B8                   0300   mov ax,#0x0300
14894 3611           BB                   0000   mov bx,#0x0000
14895 3614           CD                     10   int #0x10
14896 3616           59                          pop cx
14897 3617           B8                   1301   mov ax,#0x1301
14898 361A           BB                   000B   mov bx,#0x000b
14899 361D           89F5                        mov bp,si
14900 361F           CD                     10   int #0x10
14901                                           ! 1598 endasm
14902                                           !BCC_ENDASM
14903                                           ! 1599 }
14904 3621           C3                         ret
14905                                           ! 1600 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
14906                                           ! 1601   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
14907                       00003622            _int10_func:
14908                                           !BCC_EOS
14909                                           ! 1602 {
14910                                           ! 1603  switch(( AX >> 8 ))
14911 3622           55                         push	bp
14912 3623           89E5                       mov	bp,sp
14913                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
14914 3625           8B46         12            mov	ax,$12[bp]
14915 3628           88E0                       mov	al,ah
14916 362A           30E4                       xor	ah,ah
14917                                           ! 1604   {
14918 362C           E9         0433            br 	.3
14919                                           ! 1605    case 0x00:
14920                                           ! 1606      biosfn_set_video_mode(( AX & 0x00ff ));
14921                       0000362F            .4:
14922                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14923 362F           8A46         12            mov	al,$12[bp]
14924                                           ! Debug: list unsigned char = al+0 (used reg = )
14925 3632           30E4                       xor	ah,ah
14926 3634           50                         push	ax
14927                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
14928 3635           E8         047C            call	_biosfn_set_video_mode
14929 3638           44                         inc	sp
14930 3639           44                         inc	sp
14931                                           !BCC_EOS
14932                                           ! 1607      switch(( AX & 0x00ff )&0x7F)
14933                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14934 363A           8A46         12            mov	al,$12[bp]
14935                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
14936 363D           24                     7F  and	al,*$7F
14937                                           ! 1608       {case 6:
14938 363F           EB           24            jmp .7
14939                                           ! 1609         AX = ((AX & 0xff00) | (0x3F));
14940                       00003641            .8:
14941                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14942 3641           8B46         12            mov	ax,$12[bp]
14943 3644           30C0                       xor	al,al
14944                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
14945 3646           0C                     3F  or	al,*$3F
14946                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14947 3648           8946         12            mov	$12[bp],ax
14948                                           !BCC_EOS
14949                                           ! 1610         break;
14950 364B           EB           3D            jmp .5
14951                                           !BCC_EOS
14952                                           ! 1611        case 0:
14953                                           ! 1612        case 1:
14954                       0000364D            .9:
14955                                           ! 1613        case 2:
14956                       0000364D            .A:
14957                                           ! 1614        case 3:
14958                       0000364D            .B:
14959                                           ! 1615        case 4:
14960                       0000364D            .C:
14961                                           ! 1616        case 5:
14962                       0000364D            .D:
14963                                           ! 1617        case 7:
14964                       0000364D            .E:
14965                                           ! 1618         AX = ((AX & 0xff00) | (0x30));
14966                       0000364D            .F:
14967                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14968 364D           8B46         12            mov	ax,$12[bp]
14969 3650           30C0                       xor	al,al
14970                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
14971 3652           0C                     30  or	al,*$30
14972                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14973 3654           8946         12            mov	$12[bp],ax
14974                                           !BCC_EOS
14975                                           ! 1619         break;
14976 3657           EB           31            jmp .5
14977                                           !BCC_EOS
14978                                           ! 1620       default:
14979                                           ! 1621         AX = ((AX & 0xff00) | (0x20));
14980                       00003659            .10:
14981                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14982 3659           8B46         12            mov	ax,$12[bp]
14983 365C           30C0                       xor	al,al
14984                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
14985 365E           0C                     20  or	al,*$20
14986                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14987 3660           8946         12            mov	$12[bp],ax
14988                                           !BCC_EOS
14989                                           ! 1622       }
14990                                           ! 1623      break;
14991 3663           EB           25            jmp .5
14992                       00003665            .7:
14993 3665           2C                     00  sub	al,*0
14994 3667           72           F0            jb 	.10
14995 3669           3C                     07  cmp	al,*7
14996 366B           77           1B            ja  	.11
14997 366D           30E4                       xor	ah,ah
14998 366F           D1E0                       shl	ax,*1
14999 3671           89C3                       mov	bx,ax
15000 3673           2E                         seg	cs
15001 3674           FFA7       3678            br	.12[bx]
15002                       00003678            .12:
15003 3678                      364D            .word	.9
15004 367A                      364D            .word	.A
15005 367C                      364D            .word	.B
15006 367E                      364D            .word	.C
15007 3680                      364D            .word	.D
15008 3682                      364D            .word	.E
15009 3684                      3641            .word	.8
15010 3686                      364D            .word	.F
15011                       00003688            .11:
15012 3688           EB           CF            jmp	.10
15013                       0000368A            .5:
15014 368A           E9         0425            br 	.1
15015                                           !BCC_EOS
15016                                           ! 1624    case 0x01:
15017                                           ! 1625      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15018                       0000368D            .13:
15019                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15020 368D           8A46         10            mov	al,$10[bp]
15021                                           ! Debug: list unsigned char = al+0 (used reg = )
15022 3690           30E4                       xor	ah,ah
15023 3692           50                         push	ax
15024                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15025 3693           8B46         10            mov	ax,$10[bp]
15026 3696           88E0                       mov	al,ah
15027 3698           30E4                       xor	ah,ah
15028                                           ! Debug: list unsigned int = ax+0 (used reg = )
15029 369A           50                         push	ax
15030                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15031 369B           E8         0AA2            call	_biosfn_set_cursor_shape
15032 369E           83C4                   04  add	sp,*4
15033                                           !BCC_EOS
15034                                           ! 1626      break;
15035 36A1           E9         040E            br 	.1
15036                                           !BCC_EOS
15037                                           ! 1627    case 0x02:
15038                                           ! 1628      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15039                       000036A4            .14:
15040                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15041 36A4           FF76         0E            push	$E[bp]
15042                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15043 36A7           8B46         0C            mov	ax,$C[bp]
15044 36AA           88E0                       mov	al,ah
15045 36AC           30E4                       xor	ah,ah
15046                                           ! Debug: list unsigned int = ax+0 (used reg = )
15047 36AE           50                         push	ax
15048                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15049 36AF           E8         0BA9            call	_biosfn_set_cursor_pos
15050 36B2           83C4                   04  add	sp,*4
15051                                           !BCC_EOS
15052                                           ! 1629      break;
15053 36B5           E9         03FA            br 	.1
15054                                           !BCC_EOS
15055                                           ! 1630    case 0x03:
15056                                           ! 1631      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15057                       000036B8            .15:
15058                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15059 36B8           8D5E         0E            lea	bx,$E[bp]
15060 36BB           53                         push	bx
15061                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15062 36BC           8D5E         10            lea	bx,$10[bp]
15063 36BF           53                         push	bx
15064                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15065 36C0           8B46         0C            mov	ax,$C[bp]
15066 36C3           88E0                       mov	al,ah
15067 36C5           30E4                       xor	ah,ah
15068                                           ! Debug: list unsigned int = ax+0 (used reg = )
15069 36C7           50                         push	ax
15070                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15071 36C8           E8         0C91            call	_biosfn_get_cursor_pos
15072 36CB           83C4                   06  add	sp,*6
15073                                           !BCC_EOS
15074                                           ! 1632      break;
15075 36CE           E9         03E1            br 	.1
15076                                           !BCC_EOS
15077                                           ! 1633    case 0x04:
15078                                           ! 1634      AX=0x00;
15079                       000036D1            .16:
15080                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15081 36D1           31C0                       xor	ax,ax
15082 36D3           8946         12            mov	$12[bp],ax
15083                                           !BCC_EOS
15084                                           ! 1635      BX=0x00;
15085                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15086 36D6           31C0                       xor	ax,ax
15087 36D8           8946         0C            mov	$C[bp],ax
15088                                           !BCC_EOS
15089                                           ! 1636      CX=0x00;
15090                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15091 36DB           31C0                       xor	ax,ax
15092 36DD           8946         10            mov	$10[bp],ax
15093                                           !BCC_EOS
15094                                           ! 1637      DX=0x00;
15095                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15096 36E0           31C0                       xor	ax,ax
15097 36E2           8946         0E            mov	$E[bp],ax
15098                                           !BCC_EOS
15099                                           ! 1638      break;
15100 36E5           E9         03CA            br 	.1
15101                                           !BCC_EOS
15102                                           ! 1639    case 0x05:
15103                                           ! 1640      biosfn_set_active_p
15104                                           ! 1640 age(( AX & 0x00ff ));
15105                       000036E8            .17:
15106                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15107 36E8           8A46         12            mov	al,$12[bp]
15108                                           ! Debug: list unsigned char = al+0 (used reg = )
15109 36EB           30E4                       xor	ah,ah
15110 36ED           50                         push	ax
15111                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15112 36EE           E8         0CE0            call	_biosfn_set_active_page
15113 36F1           44                         inc	sp
15114 36F2           44                         inc	sp
15115                                           !BCC_EOS
15116                                           ! 1641      break;
15117 36F3           E9         03BC            br 	.1
15118                                           !BCC_EOS
15119                                           ! 1642    case 0x06:
15120                                           ! 1643      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15121                       000036F6            .18:
15122                                           ! Debug: list int = const 1 (used reg = )
15123 36F6           B8                   0001  mov	ax,*1
15124 36F9           50                         push	ax
15125                                           ! Debug: list int = const $FF (used reg = )
15126 36FA           B8                   00FF  mov	ax,#$FF
15127 36FD           50                         push	ax
15128                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15129 36FE           8A46         0E            mov	al,$E[bp]
15130                                           ! Debug: list unsigned char = al+0 (used reg = )
15131 3701           30E4                       xor	ah,ah
15132 3703           50                         push	ax
15133                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15134 3704           8B46         0E            mov	ax,$E[bp]
15135 3707           88E0                       mov	al,ah
15136 3709           30E4                       xor	ah,ah
15137                                           ! Debug: list unsigned int = ax+0 (used reg = )
15138 370B           50                         push	ax
15139                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15140 370C           8A46         10            mov	al,$10[bp]
15141                                           ! Debug: list unsigned char = al+0 (used reg = )
15142 370F           30E4                       xor	ah,ah
15143 3711           50                         push	ax
15144                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15145 3712           8B46         10            mov	ax,$10[bp]
15146 3715           88E0                       mov	al,ah
15147 3717           30E4                       xor	ah,ah
15148                                           ! Debug: list unsigned int = ax+0 (used reg = )
15149 3719           50                         push	ax
15150                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15151 371A           8B46         0C            mov	ax,$C[bp]
15152 371D           88E0                       mov	al,ah
15153 371F           30E4                       xor	ah,ah
15154                                           ! Debug: list unsigned int = ax+0 (used reg = )
15155 3721           50                         push	ax
15156                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15157 3722           8A46         12            mov	al,$12[bp]
15158                                           ! Debug: list unsigned char = al+0 (used reg = )
15159 3725           30E4                       xor	ah,ah
15160 3727           50                         push	ax
15161                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15162 3728           E8         112A            call	_biosfn_scroll
15163 372B           83C4                   10  add	sp,*$10
15164                                           !BCC_EOS
15165                                           ! 1644      break;
15166 372E           E9         0381            br 	.1
15167                                           !BCC_EOS
15168                                           ! 1645    case 0x07:
15169                                           ! 1646      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15170                       00003731            .19:
15171                                           ! Debug: list int = const 0 (used reg = )
15172 3731           31C0                       xor	ax,ax
15173 3733           50                         push	ax
15174                                           ! Debug: list int = const $FF (used reg = )
15175 3734           B8                   00FF  mov	ax,#$FF
15176 3737           50                         push	ax
15177                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15178 3738           8A46         0E            mov	al,$E[bp]
15179                                           ! Debug: list unsigned char = al+0 (used reg = )
15180 373B           30E4                       xor	ah,ah
15181 373D           50                         push	ax
15182                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15183 373E           8B46         0E            mov	ax,$E[bp]
15184 3741           88E0                       mov	al,ah
15185 3743           30E4                       xor	ah,ah
15186                                           ! Debug: list unsigned int = ax+0 (used reg = )
15187 3745           50                         push	ax
15188                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15189 3746           8A46         10            mov	al,$10[bp]
15190                                           ! Debug: list unsigned char = al+0 (used reg = )
15191 3749           30E4                       xor	ah,ah
15192 374B           50                         push	ax
15193                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15194 374C           8B46         10            mov	ax,$10[bp]
15195 374F           88E0                       mov	al,ah
15196 3751           30E4                       xor	ah,ah
15197                                           ! Debug: list unsigned int = ax+0 (used reg = )
15198 3753           50                         push	ax
15199                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15200 3754           8B46         0C            mov	ax,$C[bp]
15201 3757           88E0                       mov	al,ah
15202 3759           30E4                       xor	ah,ah
15203                                           ! Debug: list unsigned int = ax+0 (used reg = )
15204 375B           50                         push	ax
15205                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15206 375C           8A46         12            mov	al,$12[bp]
15207                                           ! Debug: list unsigned char = al+0 (used reg = )
15208 375F           30E4                       xor	ah,ah
15209 3761           50                         push	ax
15210                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15211 3762           E8         10F0            call	_biosfn_scroll
15212 3765           83C4                   10  add	sp,*$10
15213                                           !BCC_EOS
15214                                           ! 1647      break;
15215 3768           E9         0347            br 	.1
15216                                           !BCC_EOS
15217                                           ! 1648    case 0x08:
15218                                           ! 1649      biosfn_read_char_attr(( BX >> 8 ),&AX);
15219                       0000376B            .1A:
15220                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15221 376B           8D5E         12            lea	bx,$12[bp]
15222 376E           53                         push	bx
15223                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15224 376F           8B46         0C            mov	ax,$C[bp]
15225 3772           88E0                       mov	al,ah
15226 3774           30E4                       xor	ah,ah
15227                                           ! Debug: list unsigned int = ax+0 (used reg = )
15228 3776           50                         push	ax
15229                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15230 3777           E8         17EE            call	_biosfn_read_char_attr
15231 377A           83C4                   04  add	sp,*4
15232                                           !BCC_EOS
15233                                           ! 1650      break;
15234 377D           E9         0332            br 	.1
15235                                           !BCC_EOS
15236                                           ! 1651    case 0x09:
15237                                           ! 1652      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15238                       00003780            .1B:
15239                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15240 3780           FF76         10            push	$10[bp]
15241                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15242 3783           8A46         0C            mov	al,$C[bp]
15243                                           ! Debug: list unsigned char = al+0 (used reg = )
15244 3786           30E4                       xor	ah,ah
15245 3788           50                         push	ax
15246                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15247 3789           8B46         0C            mov	ax,$C[bp]
15248 378C           88E0                       mov	al,ah
15249 378E           30E4                       xor	ah,ah
15250                                           ! Debug: list unsigned int = ax+0 (used reg = )
15251 3790           50                         push	ax
15252                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15253 3791           8A46         12            mov	al,$12[bp]
15254                                           ! Debug: list unsigned char = al+0 (used reg = )
15255 3794           30E4                       xor	ah,ah
15256 3796           50                         push	ax
15257                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15258 3797           E8         1D19            call	_biosfn_write_char_attr
15259 379A           83C4                   08  add	sp,*8
15260                                           !BCC_EOS
15261                                           ! 1653      break;
15262 379D           E9         0312            br 	.1
15263                                           !BCC_EOS
15264                                           ! 1654    case 0x0A:
15265                                           ! 1655      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15266                       000037A0            .1C:
15267                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15268 37A0           FF76         10            push	$10[bp]
15269                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15270 37A3           8A46         0C            mov	al,$C[bp]
15271                                           ! Debug: list unsigned char = al+0 (used reg = )
15272 37A6           30E4                       xor	ah,ah
15273 37A8           50                         push	ax
15274                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15275 37A9           8B46         0C            mov	ax,$C[bp]
15276 37AC           88E0                       mov	al,ah
15277 37AE           30E4                       xor	ah,ah
15278                                           ! Debug: list unsigned int = ax+0 (used reg = )
15279 37B0           50                         push	ax
15280                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15281 37B1           8A46         12            mov	al,$12[bp]
15282                                           ! Debug: list unsigned char = al+0 (used reg = )
15283 37B4           30E4                       xor	ah,ah
15284 37B6           50                         push	ax
15285                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15286 37B7           E8         1EEE            call	_biosfn_write_char_only
15287 37BA           83C4                   08  add	sp,*8
15288                                           !BCC_EOS
15289                                           ! 1656      break;
15290 37BD           E9         02F2            br 	.1
15291                                           !BCC_EOS
15292                                           ! 1657    case 0x0C:
15293                                           ! 1658      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15294                       000037C0            .1D:
15295                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15296 37C0           FF76         0E            push	$E[bp]
15297                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15298 37C3           FF76         10            push	$10[bp]
15299                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15300 37C6           8A46         12            mov	al,$12[bp]
15301                                           ! Debug: list unsigned char = al+0 (used reg = )
15302 37C9           30E4                       xor	ah,ah
15303 37CB           50                         push	ax
15304                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15305 37CC           8B46         0C            mov	ax,$C[bp]
15306 37CF           88E0                       mov	al,ah
15307 37D1           30E4                       xor	ah,ah
15308                                           ! Debug: list unsigned int = ax+0 (used reg = )
15309 37D3           50                         push	ax
15310                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15311 37D4           E8         2142            call	_biosfn_write_pixel
15312 37D7           83C4                   08  add	sp,*8
15313                                           !BCC_EOS
15314                                           ! 1659      break;
15315 37DA           E9         02D5            br 	.1
15316                                           !BCC_EOS
15317                                           ! 1660    case 0x0D:
15318                                           ! 1661      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15319                       000037DD            .1E:
15320                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15321 37DD           8D5E         12            lea	bx,$12[bp]
15322 37E0           53                         push	bx
15323                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15324 37E1           FF76         0E            push	$E[bp]
15325                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15326 37E4           FF76         10            push	$10[bp]
15327                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15328 37E7           8B46         0C            mov	ax,$C[bp]
15329 37EA           88E0                       mov	al,ah
15330 37EC           30E4                       xor	ah,ah
15331                                           ! Debug: list unsigned int = ax+0 (used reg = )
15332 37EE           50                         push	ax
15333                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15334 37EF           E8         23C6            call	_biosfn_read_pixel
15335 37F2           83C4                   08  add	sp,*8
15336                                           !BCC_EOS
15337                                           ! 1662      break;
15338 37F5           E9         02BA            br 	.1
15339                                           !BCC_EOS
15340                                           ! 1663    case 0x0E:
15341                                           ! 1664      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15342                       000037F8            .1F:
15343                                           ! Debug: list int = const 2 (used reg = )
15344 37F8           B8                   0002  mov	ax,*2
15345 37FB           50                         push	ax
15346                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15347 37FC           8A46         0C            mov	al,$C[bp]
15348                                           ! Debug: list unsigned char = al+0 (used reg = )
15349 37FF           30E4                       xor	ah,ah
15350 3801           50                         push	ax
15351                                           ! Debug: list int = const $FF (used reg = )
15352 3802           B8                   00FF  mov	ax,#$FF
15353 3805           50                         push	ax
15354                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15355 3806           8A46         12            mov	al,$12[bp]
15356                                           ! Debug: list unsigned char = al+0 (used reg = )
15357 3809           30E4                       xor	ah,ah
15358 380B           50                         push	ax
15359                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15360 380C           E8         25B2            call	_biosfn_write_teletype
15361 380F           83C4                   08  add	sp,*8
15362                                           !BCC_EOS
15363                                           ! 1665      break;
15364 3812           E9         029D            br 	.1
15365                                           !BCC_EOS
15366                                           ! 1666    case 0x10:
15367                                           ! 1667      biosfn_perform_gray_scale_summing(BX,CX);
15368                       00003815            .20:
15369                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15370 3815           FF76         10            push	$10[bp]
15371                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15372 3818           FF76         0C            push	$C[bp]
15373                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15374 381B           E8         2C19            call	_biosfn_perform_gray_scale_summing
15375 381E           83C4                   04  add	sp,*4
15376                                           !BCC_EOS
15377                                           ! 1668      break;
15378 3821           E9         028E            br 	.1
15379                                           !BCC_EOS
15380                                           ! 1669    case 0x11:
15381                                           ! 1670      switch(( AX & 0x00ff ))
15382                       00003824            .21:
15383                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15384 3824           8A46         12            mov	al,$12[bp]
15385                                           ! 1671       {
15386 3827           E9         00E1            br 	.24
15387                                           ! 1672        case 0x00:
15388                                           ! 1673        case 0x10:
15389                       0000382A            .25:
15390                                           ! 1674         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15391                       0000382A            .26:
15392                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15393 382A           8B46         0C            mov	ax,$C[bp]
15394 382D           88E0                       mov	al,ah
15395 382F           30E4                       xor	ah,ah
15396                                           ! Debug: list unsigned int = ax+0 (used reg = )
15397 3831           50                         push	ax
15398                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15399 3832           8A46         0C            mov	al,$C[bp]
15400                                           ! Debug: list unsigned char = al+0 (used reg = )
15401 3835           30E4                       xor	ah,ah
15402 3837           50                         push	ax
15403                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15404 3838           FF76         0E            push	$E[bp]
15405                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15406 383B           FF76         10            push	$10[bp]
15407                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15408 383E           FF76         08            push	8[bp]
15409                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15410 3841           FF76         16            push	$16[bp]
15411                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15412 3844           8A46         12            mov	al,$12[bp]
15413                                           ! Debug: list unsigned char = al+0 (used reg = )
15414 3847           30E4                       xor	ah,ah
15415 3849           50                         push	ax
15416                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15417 384A           E8         2E93            call	_biosfn_load_text_user_pat
15418 384D           83C4                   0E  add	sp,*$E
15419                                           !BCC_EOS
15420                                           ! 1675         break;
15421 3850           E9         011A            br 	.22
15422                                           !BCC_EOS
15423                                           ! 1676        case 0x01:
15424                                           ! 1677        case 0x11:
15425                       00003853            .27:
15426                                           ! 1678         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15427                       00003853            .28:
15428                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15429 3853           8A46         0C            mov	al,$C[bp]
15430                                           ! Debug: list unsigned char = al+0 (used reg = )
15431 3856           30E4                       xor	ah,ah
15432 3858           50                         push	ax
15433                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15434 3859           8A46         12            mov	al,$12[bp]
15435                                           ! Debug: list unsigned char = al+0 (used reg = )
15436 385C           30E4                       xor	ah,ah
15437 385E           50                         push	ax
15438                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15439 385F           E8         2F1A            call	_biosfn_load_text_8_14_pat
15440 3862           83C4                   04  add	sp,*4
15441                                           !BCC_EOS
15442                                           ! 1679         break;
15443 3865           E9         0105            br 	.22
15444                                           !BCC_EOS
15445                                           ! 1680        case 0x02:
15446                                           ! 1681        case 0x12:
15447                       00003868            .29:
15448                                           ! 1682         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15449                       00003868            .2A:
15450                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15451 3868           8A46         0C            mov	al,$C[bp]
15452                                           ! Debug: list unsigned char = al+0 (used reg = )
15453 386B           30E4                       xor	ah,ah
15454 386D           50                         push	ax
15455                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15456 386E           8A46         12            mov	al,$12[bp]
15457                                           ! Debug: list unsigned char = al+0 (used reg = )
15458 3871           30E4                       xor	ah,ah
15459 3873           50                         push	ax
15460                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15461 3874           E8         2F9C            call	_biosfn_load_text_8_8_pat
15462 3877           83C4                   04  add	sp,*4
15463                                           !BCC_EOS
15464                                           ! 1683         break;
15465 387A           E9         00F0            br 	.22
15466                                           !BCC_EOS
15467                                           ! 1684        case 0x04:
15468                                           ! 1685        case 0x14:
15469                       0000387D            .2B:
15470                                           ! 1686         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15471                       0000387D            .2C:
15472                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15473 387D           8A46         0C            mov	al,$C[bp]
15474                                           ! Debug: list unsigned char = al+0 (used reg = )
15475 3880           30E4                       xor	ah,ah
15476 3882           50                         push	ax
15477                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15478 3883           8A46         12            mov	al,$12[bp]
15479                                           ! Debug: list unsigned char = al+0 (used reg = )
15480 3886           30E4                       xor	ah,ah
15481 3888           50                         push	ax
15482                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15483 3889           E8         3025            call	_biosfn_load_text_8_16_pat
15484 388C           83C4                   04  add	sp,*4
15485                                           !BCC_EOS
15486                                           ! 1687         break;
15487 388F           E9         00DB            br 	.22
15488                                           !BCC_EOS
15489                                           ! 1688        case 0x20:
15490                                           ! 1689         biosfn_load_gfx_8_8_chars(ES,BP);
15491                       00003892            .2D:
15492                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15493 3892           FF76         08            push	8[bp]
15494                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15495 3895           FF76         16            push	$16[bp]
15496                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15497 3898           E8         30A7            call	_biosfn_load_gfx_8_8_chars
15498 389B           83C4                   04  add	sp,*4
15499                                           !BCC_EOS
15500                                           ! 1690         break;
15501 389E           E9         00CC            br 	.22
15502                                           !BCC_EOS
15503                                           ! 1691        case 0x21:
15504                                           ! 1692         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15505                       000038A1            .2E:
15506                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15507 38A1           8A46         0E            mov	al,$E[bp]
15508                                           ! Debug: list unsigned char = al+0 (used reg = )
15509 38A4           30E4                       xor	ah,ah
15510 38A6           50                         push	ax
15511                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15512 38A7           8A46         0C            mov	al,$C[bp]
15513                                           ! Debug: list unsigned char = al+0 (used reg = )
15514 38AA           30E4                       xor	ah,ah
15515 38AC           50                         push	ax
15516                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15517 38AD           FF76         10            push	$10[bp]
15518                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15519 38B0           FF76         08            push	8[bp]
15520                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15521 38B3           FF76         16            push	$16[bp]
15522                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15523 38B6           E8         308A            call	_biosfn_load_gfx_user_chars
15524 38B9           83C4                   0A  add	sp,*$A
15525                                           !BCC_EOS
15526                                           ! 1693         break;
15527 38BC           E9         00AE            br 	.22
15528                                           !BCC_EOS
15529                                           ! 1694        case 0x22:
15530                                           ! 1695         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15531                       000038BF            .2F:
15532                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15533 38BF           8A46         0C            mov	al,$C[bp]
15534                                           ! Debug: list unsigned char = al+0 (used reg = )
15535 38C2           30E4                       xor	ah,ah
15536 38C4           50                         push	ax
15537                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15538 38C5           E8         307C            call	_biosfn_load_gfx_8_14_chars
15539 38C8           44                         inc	sp
15540 38C9           44                         inc	sp
15541                                           !BCC_EOS
15542                                           ! 1696         break;
15543 38CA           E9         00A0            br 	.22
15544                                           !BCC_EOS
15545                                           ! 1697        case 0x23:
15546                                           ! 1698         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15547                       000038CD            .30:
15548                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15549 38CD           8A46         0C            mov	al,$C[bp]
15550                                           ! Debug: list unsigned char = al+0 (used reg = )
15551 38D0           30E4                       xor	ah,ah
15552 38D2           50                         push	ax
15553                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15554 38D3           E8         306F            call	_biosfn_load_gfx_8_8_dd_chars
15555 38D6           44                         inc	sp
15556 38D7           44                         inc	sp
15557                                           !BCC_EOS
15558                                           ! 1699         break;
15559 38D8           E9         0092            br 	.22
15560                                           !BCC_EOS
15561                                           ! 1700        case 0x24:
15562                                           ! 1701         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15563                       000038DB            .31:
15564                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15565 38DB           8A46         0C            mov	al,$C[bp]
15566                                           ! Debug: list unsigned char = al+0 (used reg = )
15567 38DE           30E4                       xor	ah,ah
15568 38E0           50                         push	ax
15569                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15570 38E1           E8         3062            call	_biosfn_load_gfx_8_16_chars
15571 38E4           44                         inc	sp
15572 38E5           44                         inc	sp
15573                                           !BCC_EOS
15574                                           ! 1702         break;
15575 38E6           E9         0084            br 	.22
15576                                           !BCC_EOS
15577                                           ! 1703        case 0x30:
15578                                           ! 1704         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15579                       000038E9            .32:
15580                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15581 38E9           8D5E         0E            lea	bx,$E[bp]
15582 38EC           53                         push	bx
15583                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15584 38ED           8D5E         10            lea	bx,$10[bp]
15585 38F0           53                         push	bx
15586                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15587 38F1           8D5E         08            lea	bx,8[bp]
15588 38F4           53                         push	bx
15589                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15590 38F5           8D5E         16            lea	bx,$16[bp]
15591 38F8           53                         push	bx
15592                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15593 38F9           8B46         0C            mov	ax,$C[bp]
15594 38FC           88E0                       mov	al,ah
15595 38FE           30E4                       xor	ah,ah
15596                                           ! Debug: list unsigned int = ax+0 (used reg = )
15597 3900           50                         push	ax
15598                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15599 3901           E8         3043            call	_biosfn_get_font_info
15600 3904           83C4                   0A  add	sp,*$A
15601                                           !BCC_EOS
15602                                           ! 1705         break;
15603 3907           EB           64            jmp .22
15604                                           !BCC_EOS
15605                                           ! 1706       }
15606                                           ! 1707      break;
15607 3909           EB           62            jmp .22
15608                       0000390B            .24:
15609 390B           2C                     00  sub	al,*0
15610 390D   7503    E9         FF18            beq 	.25
15611 3912           2C                     01  sub	al,*1
15612 3914   7503    E9         FF3A            beq 	.27
15613 3919           2C                     01  sub	al,*1
15614 391B   7503    E9         FF48            beq 	.29
15615 3920           2C                     02  sub	al,*2
15616 3922   7503    E9         FF56            beq 	.2B
15617 3927           2C                     0C  sub	al,*$C
15618 3929   7503    E9         FEFC            beq 	.26
15619 392E           2C                     01  sub	al,*1
15620 3930   7503    E9         FF1E            beq 	.28
15621 3935           2C                     01  sub	al,*1
15622 3937   7503    E9         FF2C            beq 	.2A
15623 393C           2C                     02  sub	al,*2
15624 393E   7503    E9         FF3A            beq 	.2C
15625 3943           2C                     0C  sub	al,*$C
15626 3945   7503    E9         FF48            beq 	.2D
15627 394A           2C                     01  sub	al,*1
15628 394C   7503    E9         FF50            beq 	.2E
15629 3951           2C                     01  sub	al,*1
15630 3953   7503    E9         FF67            beq 	.2F
15631 3958           2C                     01  sub	al,*1
15632 395A   7503    E9         FF6E            beq 	.30
15633 395F           2C                     01  sub	al,*1
15634 3961   7503    E9         FF75            beq 	.31
15635 3966           2C                     0C  sub	al,*$C
15636 3968   7503    E9         FF7C            beq 	.32
15637                       0000396D            .22:
15638 396D           E9         0142            br 	.1
15639                                           !BCC_EOS
15640                                           ! 1708    case 0x12:
15641                                           ! 1709      switch((
15642                       00003970            .33:
15643                                           ! 1709  BX & 0x00ff ))
15644                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15645 3970           8A46         0C            mov	al,$C[bp]
15646                                           ! 1710       {
15647 3973           EB           3C            jmp .36
15648                                           ! 1711        case 0x20:
15649                                           ! 1712         biosfn_alternate_prtsc();
15650                       00003975            .37:
15651                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15652 3975           E8         31A9            call	_biosfn_alternate_prtsc
15653                                           !BCC_EOS
15654                                           ! 1713         break;
15655 3978           EB           43            jmp .34
15656                                           !BCC_EOS
15657                                           ! 1714        case 0x35:
15658                                           ! 1715         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
15659                       0000397A            .38:
15660                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15661 397A           FF76         0E            push	$E[bp]
15662                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15663 397D           FF76         16            push	$16[bp]
15664                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15665 3980           8A46         12            mov	al,$12[bp]
15666                                           ! Debug: list unsigned char = al+0 (used reg = )
15667 3983           30E4                       xor	ah,ah
15668 3985           50                         push	ax
15669                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15670 3986           E8         3275            call	_biosfn_switch_video_interface
15671 3989           83C4                   06  add	sp,*6
15672                                           !BCC_EOS
15673                                           ! 1716         AX = ((AX & 0xff00) | (0x12));
15674                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15675 398C           8B46         12            mov	ax,$12[bp]
15676 398F           30C0                       xor	al,al
15677                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15678 3991           0C                     12  or	al,*$12
15679                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15680 3993           8946         12            mov	$12[bp],ax
15681                                           !BCC_EOS
15682                                           ! 1717         break;
15683 3996           EB           25            jmp .34
15684                                           !BCC_EOS
15685                                           ! 1718        case 0x36:
15686                                           ! 1719         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15687                       00003998            .39:
15688                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15689 3998           8A46         12            mov	al,$12[bp]
15690                                           ! Debug: list unsigned char = al+0 (used reg = )
15691 399B           30E4                       xor	ah,ah
15692 399D           50                         push	ax
15693                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15694 399E           E8         325E            call	_biosfn_enable_video_refresh_control
15695 39A1           44                         inc	sp
15696 39A2           44                         inc	sp
15697                                           !BCC_EOS
15698                                           ! 1720         AX = ((AX & 0xff00) | (0x12));
15699                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15700 39A3           8B46         12            mov	ax,$12[bp]
15701 39A6           30C0                       xor	al,al
15702                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15703 39A8           0C                     12  or	al,*$12
15704                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15705 39AA           8946         12            mov	$12[bp],ax
15706                                           !BCC_EOS
15707                                           ! 1721         break;
15708 39AD           EB           0E            jmp .34
15709                                           !BCC_EOS
15710                                           ! 1722       }
15711                                           ! 1723      break;
15712 39AF           EB           0C            jmp .34
15713                       000039B1            .36:
15714 39B1           2C                     20  sub	al,*$20
15715 39B3           74           C0            je 	.37
15716 39B5           2C                     15  sub	al,*$15
15717 39B7           74           C1            je 	.38
15718 39B9           2C                     01  sub	al,*1
15719 39BB           74           DB            je 	.39
15720                       000039BD            .34:
15721 39BD           E9         00F2            br 	.1
15722                                           !BCC_EOS
15723                                           ! 1724    case 0x13:
15724                                           ! 1725      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
15725                       000039C0            .3A:
15726                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15727 39C0           FF76         08            push	8[bp]
15728                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15729 39C3           FF76         16            push	$16[bp]
15730                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15731 39C6           8A46         0E            mov	al,$E[bp]
15732                                           ! Debug: list unsigned char = al+0 (used reg = )
15733 39C9           30E4                       xor	ah,ah
15734 39CB           50                         push	ax
15735                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15736 39CC           8B46         0E            mov	ax,$E[bp]
15737 39CF           88E0                       mov	al,ah
15738 39D1           30E4                       xor	ah,ah
15739                                           ! Debug: list unsigned int = ax+0 (used reg = )
15740 39D3           50                         push	ax
15741                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
15742 39D4           FF76         10            push	$10[bp]
15743                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
15744 39D7           8A46         0C            mov	al,$C[bp]
15745                                           ! Debug: list unsigned char = al+0 (used reg = )
15746 39DA           30E4                       xor	ah,ah
15747 39DC           50                         push	ax
15748                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15749 39DD           8B46         0C            mov	ax,$C[bp]
15750 39E0           88E0                       mov	al,ah
15751 39E2           30E4                       xor	ah,ah
15752                                           ! Debug: list unsigned int = ax+0 (used reg = )
15753 39E4           50                         push	ax
15754                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15755 39E5           8A46         12            mov	al,$12[bp]
15756                                           ! Debug: list unsigned char = al+0 (used reg = )
15757 39E8           30E4                       xor	ah,ah
15758 39EA           50                         push	ax
15759                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
15760 39EB           E8         3212            call	_biosfn_write_string
15761 39EE           83C4                   10  add	sp,*$10
15762                                           !BCC_EOS
15763                                           ! 1726      break;
15764 39F1           E9         00BE            br 	.1
15765                                           !BCC_EOS
15766                                           ! 1727    case 0x1B:
15767                                           ! 1728      biosfn_read_state_info(BX,ES,DI);
15768                       000039F4            .3B:
15769                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
15770 39F4           FF76         04            push	4[bp]
15771                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15772 39F7           FF76         16            push	$16[bp]
15773                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15774 39FA           FF76         0C            push	$C[bp]
15775                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
15776 39FD           E8         330C            call	_biosfn_read_state_info
15777 3A00           83C4                   06  add	sp,*6
15778                                           !BCC_EOS
15779                                           ! 1729      AX = ((AX & 0xff00) | (0x1B));
15780                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15781 3A03           8B46         12            mov	ax,$12[bp]
15782 3A06           30C0                       xor	al,al
15783                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
15784 3A08           0C                     1B  or	al,*$1B
15785                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15786 3A0A           8946         12            mov	$12[bp],ax
15787                                           !BCC_EOS
15788                                           ! 1730      break;
15789 3A0D           E9         00A2            br 	.1
15790                                           !BCC_EOS
15791                                           ! 1731    case 0x1C:
15792                                           ! 1732      switch(( AX & 0x00ff ))
15793                       00003A10            .3C:
15794                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15795 3A10           8A46         12            mov	al,$12[bp]
15796                                           ! 1733       {
15797 3A13           EB           33            jmp .3F
15798                                           ! 1734        case 0x00:
15799                                           ! 1735         biosfn_read_video_state_size(CX,&BX);
15800                       00003A15            .40:
15801                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
15802 3A15           8D5E         0C            lea	bx,$C[bp]
15803 3A18           53                         push	bx
15804                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15805 3A19           FF76         10            push	$10[bp]
15806                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
15807 3A1C           E8         346C            call	_biosfn_read_video_state_size
15808 3A1F           83C4                   04  add	sp,*4
15809                                           !BCC_EOS
15810                                           ! 1736         break;
15811 3A22           EB           30            jmp .3D
15812                                           !BCC_EOS
15813                                           ! 1737        case 0x01:
15814                                           ! 1738         biosfn_save_video_state(CX,ES,BX);
15815                       00003A24            .41:
15816                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15817 3A24           FF76         0C            push	$C[bp]
15818                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15819 3A27           FF76         16            push	$16[bp]
15820                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15821 3A2A           FF76         10            push	$10[bp]
15822                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
15823 3A2D           E8         347F            call	_biosfn_save_video_state
15824 3A30           83C4                   06  add	sp,*6
15825                                           !BCC_EOS
15826                                           ! 1739         break;
15827 3A33           EB           1F            jmp .3D
15828                                           !BCC_EOS
15829                                           ! 1740        case 0x02:
15830                                           ! 1741         biosfn_restore_video_state(CX,ES,BX);
15831                       00003A35            .42:
15832                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15833 3A35           FF76         0C            push	$C[bp]
15834                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15835 3A38           FF76         16            push	$16[bp]
15836                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15837 3A3B           FF76         10            push	$10[bp]
15838                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
15839 3A3E           E8         3A3B            call	_biosfn_restore_video_state
15840 3A41           83C4                   06  add	sp,*6
15841                                           !BCC_EOS
15842                                           ! 1742         break;
15843 3A44           EB           0E            jmp .3D
15844                                           !BCC_EOS
15845                                           ! 1743       }
15846                                           ! 1744      AX = ((AX & 0xff00) | (0x1C));
15847 3A46           EB           0C            jmp .3D
15848                       00003A48            .3F:
15849 3A48           2C                     00  sub	al,*0
15850 3A4A           74           C9            je 	.40
15851 3A4C           2C                     01  sub	al,*1
15852 3A4E           74           D4            je 	.41
15853 3A50           2C                     01  sub	al,*1
15854 3A52           74           E1            je 	.42
15855                       00003A54            .3D:
15856                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15857 3A54           8B46         12            mov	ax,$12[bp]
15858 3A57           30C0                       xor	al,al
15859                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
15860 3A59           0C                     1C  or	al,*$1C
15861                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15862 3A5B           8946         12            mov	$12[bp],ax
15863                                           !BCC_EOS
15864                                           ! 1745      break;
15865 3A5E           EB           52            jmp .1
15866                                           !BCC_EOS
15867                                           ! 1746   }
15868                                           ! 1747 }
15869 3A60           EB           50            jmp .1
15870                       00003A62            .3:
15871 3A62           2D                   0000  sub	ax,*0
15872 3A65           7C           4B            jl  	.1
15873 3A67           3D                   001C  cmp	ax,*$1C
15874 3A6A   7603    E9         0043            bhi 	.43
15875 3A6F           D1E0                       shl	ax,*1
15876 3A71           89C3                       mov	bx,ax
15877 3A73           2E                         seg	cs
15878 3A74           FFA7       3A78            br	.44[bx]
15879                       00003A78            .44:
15880 3A78                      362F            .word	.4
15881 3A7A                      368D            .word	.13
15882 3A7C                      36A4            .word	.14
15883 3A7E                      36B8            .word	.15
15884 3A80                      36D1            .word	.16
15885 3A82                      36E8            .word	.17
15886 3A84                      36F6            .word	.18
15887 3A86                      3731            .word	.19
15888 3A88                      376B            .word	.1A
15889 3A8A                      3780            .word	.1B
15890 3A8C                      37A0            .word	.1C
15891 3A8E                      3AB2            .word	.1
15892 3A90                      37C0            .word	.1D
15893 3A92                      37DD            .word	.1E
15894 3A94                      37F8            .word	.1F
15895 3A96                      3AB2            .word	.1
15896 3A98                      3815            .word	.20
15897 3A9A                      3824            .word	.21
15898 3A9C                      3970            .word	.33
15899 3A9E                      39C0            .word	.3A
15900 3AA0                      3AB2            .word	.1
15901 3AA2                      3AB2            .word	.1
15902 3AA4                      3AB2            .word	.1
15903 3AA6                      3AB2            .word	.1
15904 3AA8                      3AB2            .word	.1
15905 3AAA                      3AB2            .word	.1
15906 3AAC                      3AB2            .word	.1
15907 3AAE                      39F4            .word	.3B
15908 3AB0                      3A10            .word	.3C
15909                       00003AB2            .43:
15910                       00003AB2            .1:
15911                       FFFFFFFE            ..FFFF	=	-2
15912 3AB2           5D                         pop	bp
15913 3AB3           C3                         ret
15914                                           ! 1748 static void biosfn_set_video_mode(mode) Bit8u mode;
15915                                           ! Register BX used in function int10_func
15916                       00003AB4            _biosfn_set_video_mode:
15917                                           !BCC_EOS
15918                                           ! 1749 {
15919                                           ! 1750  Bit8u noclearmem=mode&0x80;
15920 3AB4           55                         push	bp
15921 3AB5           89E5                       mov	bp,sp
15922 3AB7           4C                         dec	sp
15923                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
15924 3AB8           8A46         04            mov	al,4[bp]
15925 3ABB           24                     80  and	al,#$80
15926                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
15927 3ABD           8846         FF            mov	-1[bp],al
15928                                           !BCC_EOS
15929                                           ! 1751  Bit8u line,mmask,*palette,vpti;
15930                                           !BCC_EOS
15931                                           ! 1752  Bit16u i,twidth,theightm1,cheight;
15932                                           !BCC_EOS
15933                                           ! 1753  Bit8u modeset_ctl,video_ctl,vga_switches;
15934                                           !BCC_EOS
15935                                           ! 1754  Bit16u crtc_addr;
15936                                           !BCC_EOS
15937                                           ! 1755  mode=mode&0x7f;
15938 3AC0           83C4                   EB  add	sp,*-$15
15939                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
15940 3AC3           8A46         04            mov	al,4[bp]
15941 3AC6           24                     7F  and	al,*$7F
15942                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
15943 3AC8           8846         04            mov	4[bp],al
15944                                           !BCC_EOS
15945                                           ! 1756  line=find_vga_entry(mode);
15946                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
15947 3ACB           8A46         04            mov	al,4[bp]
15948 3ACE           30E4                       xor	ah,ah
15949 3AD0           50                         push	ax
15950                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
15951 3AD1           E8         3F89            call	_find_vga_entry
15952 3AD4           44                         inc	sp
15953 3AD5           44                         inc	sp
15954                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
15955 3AD6           8846         FE            mov	-2[bp],al
15956                                           !BCC_EOS
15957                                           ! 1757  if(line==0xFF)
15958                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
15959 3AD9           8A46         FE            mov	al,-2[bp]
15960 3ADC           3C                     FF  cmp	al,#$FF
15961 3ADE           75           04            jne 	.45
15962                       00003AE0            .46:
15963                                           ! 1758   return;
15964 3AE0           89EC                       mov	sp,bp
15965 3AE2           5D                         pop	bp
15966 3AE3           C3                         ret
15967                                           !BCC_EOS
15968                                           ! 1759  vpti=line_to_vpti[line];
15969                       00003AE4            .45:
15970                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
15971 3AE4           8A46         FE            mov	al,-2[bp]
15972 3AE7           30E4                       xor	ah,ah
15973 3AE9           89C3                       mov	bx,ax
15974                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
15975 3AEB           8A87       0243            mov	al,_line_to_vpti[bx]
15976 3AEF           8846         F9            mov	-7[bp],al
15977                                           !BCC_EOS
15978                                           ! 1760  twidth=video_param_table[vpti].twidth;
15979                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
15980 3AF2           8A46         F9            mov	al,-7[bp]
15981 3AF5           30E4                       xor	ah,ah
15982 3AF7           B1                     06  mov	cl,*6
15983 3AF9           D3E0                       shl	ax,cl
15984 3AFB           89C3                       mov	bx,ax
15985                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
15986 3AFD           8A87       0257            mov	al,_video_param_table[bx]
15987 3B01           30E4                       xor	ah,ah
15988 3B03           8946         F4            mov	-$C[bp],ax
15989                                           !BCC_EOS
15990                                           ! 1761  theightm1=video_param_table[vpti].theightm1;
15991                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
15992 3B06           8A46         F9            mov	al,-7[bp]
15993 3B09           30E4                       xor	ah,ah
15994 3B0B           B1                     06  mov	cl,*6
15995 3B0D           D3E0                       shl	ax,cl
15996 3B0F           89C3                       mov	bx,ax
15997 3B11           81C3                 0257  add	bx,#_video_param_table
15998                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
15999 3B15           8A47         01            mov	al,1[bx]
16000 3B18           30E4                       xor	ah,ah
16001 3B1A           8946         F2            mov	-$E[bp],ax
16002                                           !BCC_EOS
16003                                           ! 1762  cheight=video_param_table[vpti].cheight;
16004                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16005 3B1D           8A46         F9            mov	al,-7[bp]
16006 3B20           30E4                       xor	ah,ah
16007 3B22           B1                     06  mov	cl,*6
16008 3B24           D3E0                       shl	ax,cl
16009 3B26           89C3                       mov	bx,ax
16010 3B28           81C3                 0257  add	bx,#_video_param_table
16011                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16012 3B2C           8A47         02            mov	al,2[bx]
16013 3B2F           30E4                       xor	ah,ah
16014 3B31           8946         F0            mov	-$10[bp],ax
16015                                           !BCC_EOS
16016                                           ! 1763  video_ctl=read_byte(0x40,0x87);
16017                                           ! Debug: list int = const $87 (used reg = )
16018 3B34           B8                   0087  mov	ax,#$87
16019 3B37           50                         push	ax
16020                                           ! Debug: list int = const $40 (used reg = )
16021 3B38           B8                   0040  mov	ax,*$40
16022 3B3B           50                         push	ax
16023                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16024 3B3C           E8         400A            call	_read_byte
16025 3B3F           83C4                   04  add	sp,*4
16026                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16027 3B42           8846         EE            mov	-$12[bp],al
16028                                           !BCC_EOS
16029                                           ! 1764  vga_switches=read_byte(0x40,0x88);
16030                                           ! Debug: list int = const $88 (used reg = )
16031 3B45           B8                   0088  mov	ax,#$88
16032 3B48           50                         push	ax
16033                                           ! Debug: list int = const $40 (used reg = )
16034 3B49           B8                   0040  mov	ax,*$40
16035 3B4C           50                         push	ax
16036                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16037 3B4D           E8         3FF9            call	_read_byte
16038 3B50           83C4                   04  add	sp,*4
16039                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16040 3B53           8846         ED            mov	-$13[bp],al
16041                                           !BCC_EOS
16042                                           ! 1765  modeset_ctl=read_byte(0x40,0x89);
16043                                           ! Debug: list int = const $89 (used reg = )
16044 3B56           B8                   0089  mov	ax,#$89
16045 3B59           50                         push	ax
16046                                           ! Debug: list int = const $40 (used reg = )
16047 3B5A           B8                   0040  mov	ax,*$40
16048 3B5D           50                         push	ax
16049                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16050 3B5E           E8         3FE8            call	_read_byte
16051 3B61           83C4                   04  add	sp,*4
16052                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16053 3B64           8846         EF            mov	-$11[bp],al
16054                                           !BCC_EOS
16055                                           ! 1766  if((modeset_ctl&0x08)==0)
16056                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16057 3B67           8A46         EF            mov	al,-$11[bp]
16058 3B6A           24                     08  and	al,*8
16059                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16060 3B6C           84C0                       test	al,al
16061 3B6E   7403    E9         0146            bne 	.47
16062                       00003B73            .48:
16063                                           ! 1767   {
16064                                           ! 1768    outb(0x3c6,vga_modes[line].pelmask);
16065                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16066 3B73           8A46         FE            mov	al,-2[bp]
16067 3B76           30E4                       xor	ah,ah
16068 3B78           B1                     03  mov	cl,*3
16069 3B7A           D3E0                       shl	ax,cl
16070 3B7C           89C3                       mov	bx,ax
16071 3B7E           81C3                 01C3  add	bx,#_vga_modes
16072                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16073 3B82           8A47         06            mov	al,6[bx]
16074 3B85           30E4                       xor	ah,ah
16075 3B87           50                         push	ax
16076                                           ! Debug: list int = const $3C6 (used reg = )
16077 3B88           B8                   03C6  mov	ax,#$3C6
16078 3B8B           50                         push	ax
16079                                           ! Debug: func () void = outb+0 (used reg = )
16080 3B8C           E8         4026            call	_outb
16081 3B8F           83C4                   04  add	sp,*4
16082                                           !BCC_EOS
16083                                           ! 1769    outb(0x3c8,0x00);
16084                                           ! Debug: list int = const 0 (used reg = )
16085 3B92           31C0                       xor	ax,ax
16086 3B94           50                         push	ax
16087                                           ! Debug: list int = const $3C8 (used reg = )
16088 3B95           B8                   03C8  mov	ax,#$3C8
16089 3B98           50                         push	ax
16090                                           ! Debug: func () void = outb+0 (used reg = )
16091 3B99           E8         4019            call	_outb
16092 3B9C           83C4                   04  add	sp,*4
16093                                           !BCC_EOS
16094                                           ! 1770    switch(vga_modes[line].dacmodel)
16095                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16096 3B9F           8A46         FE            mov	al,-2[bp]
16097 3BA2           30E4                       xor	ah,ah
16098 3BA4           B1                     03  mov	cl,*3
16099 3BA6           D3E0                       shl	ax,cl
16100 3BA8           89C3                       mov	bx,ax
16101 3BAA           81C3                 01C3  add	bx,#_vga_modes
16102 3BAE           8A47         07            mov	al,7[bx]
16103                                           ! 1771     {case 0:
16104 3BB1           EB           22            jmp .4B
16105                                           ! 1772       palette=&palette0;
16106                       00003BB3            .4C:
16107                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16108 3BB3           BB                   09D7  mov	bx,#_palette0
16109 3BB6           895E         FA            mov	-6[bp],bx
16110                                           !BCC_EOS
16111                                           ! 1773       break;
16112 3BB9           EB           2A            jmp .49
16113                                           !BCC_EOS
16114                                           ! 1774      case 1:
16115                                           ! 1775       palette=&palette1;
16116                       00003BBB            .4D:
16117                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16118 3BBB           BB                   0A97  mov	bx,#_palette1
16119 3BBE           895E         FA            mov	-6[bp],bx
16120                                           !BCC_EOS
16121                                           ! 1776       break;
16122 3BC1           EB           22            jmp .49
16123                                           !BCC_EOS
16124                                           ! 1777      case 2:
16125                                           ! 1778       palette=&palette2;
16126                       00003BC3            .4E:
16127                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16128 3BC3           BB                   0B57  mov	bx,#_palette2
16129 3BC6           895E         FA            mov	-6[bp],bx
16130                                           !BCC_EOS
16131                                           ! 1779       break;
16132 3BC9           EB           1A            jmp .49
16133                                           !BCC_EOS
16134                                           ! 1780      case 3:
16135                                           ! 1781       palette=&palette3;
16136                       00003BCB            .4F:
16137                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16138 3BCB           BB                   0C17  mov	bx,#_palette3
16139 3BCE           895E         FA            mov	-6[bp],bx
16140                                           !BCC_EOS
16141                                           ! 1782       break;
16142 3BD1           EB           12            jmp .49
16143                                           !BCC_EOS
16144                                           ! 1783     }
16145                                           ! 1784    for(i=0;i<0x0100;i++)
16146 3BD3           EB           10            jmp .49
16147                       00003BD5            .4B:
16148 3BD5           2C                     00  sub	al,*0
16149 3BD7           74           DA            je 	.4C
16150 3BD9           2C                     01  sub	al,*1
16151 3BDB           74           DE            je 	.4D
16152 3BDD           2C                     01  sub	al,*1
16153 3BDF           74           E2            je 	.4E
16154 3BE1           2C                     01  sub	al,*1
16155 3BE3           74           E6            je 	.4F
16156                       00003BE5            .49:
16157                       FFFFFFE8            ..FFFE	=	-$18
16158                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16159 3BE5           31C0                       xor	ax,ax
16160 3BE7           8946         F6            mov	-$A[bp],ax
16161                                           !BCC_EOS
16162                                           !BCC_EOS
16163                                           ! 1785     {if(i<=dac_regs[vga_modes[line].dacmodel])
16164 3BEA           E9         00AB            br 	.52
16165                       00003BED            .53:
16166                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16167 3BED           8A46         FE            mov	al,-2[bp]
16168 3BF0           30E4                       xor	ah,ah
16169 3BF2           B1                     03  mov	cl,*3
16170 3BF4           D3E0                       shl	ax,cl
16171 3BF6           89C3                       mov	bx,ax
16172 3BF8           81C3                 01C3  add	bx,#_vga_modes
16173                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16174 3BFC           8A47         07            mov	al,7[bx]
16175 3BFF           30E4                       xor	ah,ah
16176 3C01           89C3                       mov	bx,ax
16177                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16178 3C03           8A87       0253            mov	al,_dac_regs[bx]
16179 3C07           30E4                       xor	ah,ah
16180 3C09           3B46         F6            cmp	ax,-$A[bp]
16181 3C0C           72           5C            jb  	.54
16182                       00003C0E            .55:
16183                                           ! 1786       {outb(0x3c9,palette[(i*3)+0]);
16184                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16185 3C0E           8B46         F6            mov	ax,-$A[bp]
16186 3C11           89C2                       mov	dx,ax
16187 3C13           D1E0                       shl	ax,*1
16188 3C15           01D0                       add	ax,dx
16189                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16190                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16191 3C17           0346         FA            add	ax,-6[bp]
16192 3C1A           89C3                       mov	bx,ax
16193                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16194 3C1C           8A07                       mov	al,[bx]
16195 3C1E           30E4                       xor	ah,ah
16196 3C20           50                         push	ax
16197                                           ! Debug: list int = const $3C9 (used reg = )
16198 3C21           B8                   03C9  mov	ax,#$3C9
16199 3C24           50                         push	ax
16200                                           ! Debug: func () void = outb+0 (used reg = )
16201 3C25           E8         3F8D            call	_outb
16202 3C28           83C4                   04  add	sp,*4
16203                                           !BCC_EOS
16204                                           ! 1787        outb(0x3c9,palette[(i*3)+1]);
16205                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16206 3C2B           8B46         F6            mov	ax,-$A[bp]
16207 3C2E           89C2                       mov	dx,ax
16208 3C30           D1E0                       shl	ax,*1
16209 3C32           01D0                       add	ax,dx
16210                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16211                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16212 3C34           40                         inc	ax
16213 3C35           0346         FA            add	ax,-6[bp]
16214 3C38           89C3                       mov	bx,ax
16215                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16216 3C3A           8A07                       mov	al,[bx]
16217 3C3C           30E4                       xor	ah,ah
16218 3C3E           50                         push	ax
16219                                           ! Debug: list int = const $3C9 (used reg = )
16220 3C3F           B8                   03C9  mov	ax,#$3C9
16221 3C42           50                         push	ax
16222                                           ! Debug: func () void = outb+0 (used reg = )
16223 3C43           E8         3F6F            call	_outb
16224 3C46           83C4                   04  add	sp,*4
16225                                           !BCC_EOS
16226                                           ! 1788        outb(0x3c9,palette[(i*3)+2]);
16227                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16228 3C49           8B46         F6            mov	ax,-$A[bp]
16229 3C4C           89C2                       mov	dx,ax
16230 3C4E           D1E0                       shl	ax,*1
16231 3C50           01D0                       add	ax,dx
16232                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16233                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16234 3C52           40                         inc	ax
16235 3C53           40                         inc	ax
16236 3C54           0346         FA            add	ax,-6[bp]
16237 3C57           89C3                       mov	bx,ax
16238                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16239 3C59           8A07                       mov	al,[bx]
16240 3C5B           30E4                       xor	ah,ah
16241 3C5D           50                         push	ax
16242                                           ! Debug: list int = const $3C9 (used reg = )
16243 3C5E           B8                   03C9  mov	ax,#$3C9
16244 3C61           50                         push	ax
16245                                           ! Debug: func () void = outb+0 (used reg = )
16246 3C62           E8         3F50            call	_outb
16247 3C65           83C4                   04  add	sp,*4
16248                                           !BCC_EOS
16249                                           ! 1789       }
16250                                           ! 1790      else
16251                                           ! 1791      
16252                                           ! 1791  {outb(0x3c9,0);
16253 3C68           EB           27            jmp .56
16254                       00003C6A            .54:
16255                                           ! Debug: list int = const 0 (used reg = )
16256 3C6A           31C0                       xor	ax,ax
16257 3C6C           50                         push	ax
16258                                           ! Debug: list int = const $3C9 (used reg = )
16259 3C6D           B8                   03C9  mov	ax,#$3C9
16260 3C70           50                         push	ax
16261                                           ! Debug: func () void = outb+0 (used reg = )
16262 3C71           E8         3F41            call	_outb
16263 3C74           83C4                   04  add	sp,*4
16264                                           !BCC_EOS
16265                                           ! 1792        outb(0x3c9,0);
16266                                           ! Debug: list int = const 0 (used reg = )
16267 3C77           31C0                       xor	ax,ax
16268 3C79           50                         push	ax
16269                                           ! Debug: list int = const $3C9 (used reg = )
16270 3C7A           B8                   03C9  mov	ax,#$3C9
16271 3C7D           50                         push	ax
16272                                           ! Debug: func () void = outb+0 (used reg = )
16273 3C7E           E8         3F34            call	_outb
16274 3C81           83C4                   04  add	sp,*4
16275                                           !BCC_EOS
16276                                           ! 1793        outb(0x3c9,0);
16277                                           ! Debug: list int = const 0 (used reg = )
16278 3C84           31C0                       xor	ax,ax
16279 3C86           50                         push	ax
16280                                           ! Debug: list int = const $3C9 (used reg = )
16281 3C87           B8                   03C9  mov	ax,#$3C9
16282 3C8A           50                         push	ax
16283                                           ! Debug: func () void = outb+0 (used reg = )
16284 3C8B           E8         3F27            call	_outb
16285 3C8E           83C4                   04  add	sp,*4
16286                                           !BCC_EOS
16287                                           ! 1794       }
16288                                           ! 1795     }
16289                       00003C91            .56:
16290                                           ! 1796    if((modeset_ctl&0x02)==0x02)
16291                       00003C91            .51:
16292                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16293 3C91           8B46         F6            mov	ax,-$A[bp]
16294 3C94           40                         inc	ax
16295 3C95           8946         F6            mov	-$A[bp],ax
16296                       00003C98            .52:
16297                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16298 3C98           8B46         F6            mov	ax,-$A[bp]
16299 3C9B           3D                   0100  cmp	ax,#$100
16300 3C9E   7303    E9         FF4A            blo 	.53
16301                       00003CA3            .57:
16302                       00003CA3            .50:
16303                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16304 3CA3           8A46         EF            mov	al,-$11[bp]
16305 3CA6           24                     02  and	al,*2
16306                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16307 3CA8           3C                     02  cmp	al,*2
16308 3CAA           75           0D            jne 	.58
16309                       00003CAC            .59:
16310                                           ! 1797     {
16311                                           ! 1798      biosfn_perform_gray_scale_summing(0x00, 0x100);
16312                                           ! Debug: list int = const $100 (used reg = )
16313 3CAC           B8                   0100  mov	ax,#$100
16314 3CAF           50                         push	ax
16315                                           ! Debug: list int = const 0 (used reg = )
16316 3CB0           31C0                       xor	ax,ax
16317 3CB2           50                         push	ax
16318                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16319 3CB3           E8         2781            call	_biosfn_perform_gray_scale_summing
16320 3CB6           83C4                   04  add	sp,*4
16321                                           !BCC_EOS
16322                                           ! 1799     }
16323                                           ! 1800   }
16324                       00003CB9            .58:
16325                                           ! 1801  inb(0x3da);
16326                       00003CB9            .47:
16327                                           ! Debug: list int = const $3DA (used reg = )
16328 3CB9           B8                   03DA  mov	ax,#$3DA
16329 3CBC           50                         push	ax
16330                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16331 3CBD           E8         3EDF            call	_inb
16332 3CC0           44                         inc	sp
16333 3CC1           44                         inc	sp
16334                                           !BCC_EOS
16335                                           ! 1802  for(i=0;i<=0x13;i++)
16336                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16337 3CC2           31C0                       xor	ax,ax
16338 3CC4           8946         F6            mov	-$A[bp],ax
16339                                           !BCC_EOS
16340                                           !BCC_EOS
16341                                           ! 1803   {outb(0x3c0,i);
16342 3CC7           EB           38            jmp .5C
16343                       00003CC9            .5D:
16344                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16345 3CC9           FF76         F6            push	-$A[bp]
16346                                           ! Debug: list int = const $3C0 (used reg = )
16347 3CCC           B8                   03C0  mov	ax,#$3C0
16348 3CCF           50                         push	ax
16349                                           ! Debug: func () void = outb+0 (used reg = )
16350 3CD0           E8         3EE2            call	_outb
16351 3CD3           83C4                   04  add	sp,*4
16352                                           !BCC_EOS
16353                                           ! 1804    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16354                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16355 3CD6           8A46         F9            mov	al,-7[bp]
16356 3CD9           30E4                       xor	ah,ah
16357 3CDB           B1                     06  mov	cl,*6
16358 3CDD           D3E0                       shl	ax,cl
16359 3CDF           89C3                       mov	bx,ax
16360 3CE1           81C3                 0257  add	bx,#_video_param_table
16361                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16362 3CE5           8B46         F6            mov	ax,-$A[bp]
16363 3CE8           01C3                       add	bx,ax
16364                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16365 3CEA           8A47         23            mov	al,$23[bx]
16366 3CED           30E4                       xor	ah,ah
16367 3CEF           50                         push	ax
16368                                           ! Debug: list int = const $3C0 (used reg = )
16369 3CF0           B8                   03C0  mov	ax,#$3C0
16370 3CF3           50                         push	ax
16371                                           ! Debug: func () void = outb+0 (used reg = )
16372 3CF4           E8         3EBE            call	_outb
16373 3CF7           83C4                   04  add	sp,*4
16374                                           !BCC_EOS
16375                                           ! 1805   }
16376                                           ! 1806  outb(0x3c0,0x14);
16377                       00003CFA            .5B:
16378                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16379 3CFA           8B46         F6            mov	ax,-$A[bp]
16380 3CFD           40                         inc	ax
16381 3CFE           8946         F6            mov	-$A[bp],ax
16382                       00003D01            .5C:
16383                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16384 3D01           8B46         F6            mov	ax,-$A[bp]
16385 3D04           3D                   0013  cmp	ax,*$13
16386 3D07           76           C0            jbe	.5D
16387                       00003D09            .5E:
16388                       00003D09            .5A:
16389                                           ! Debug: list int = const $14 (used reg = )
16390 3D09           B8                   0014  mov	ax,*$14
16391 3D0C           50                         push	ax
16392                                           ! Debug: list int = const $3C0 (used reg = )
16393 3D0D           B8                   03C0  mov	ax,#$3C0
16394 3D10           50                         push	ax
16395                                           ! Debug: func () void = outb+0 (used reg = )
16396 3D11           E8         3EA1            call	_outb
16397 3D14           83C4                   04  add	sp,*4
16398                                           !BCC_EOS
16399                                           ! 1807  outb(0x3c0,0x00);
16400                                           ! Debug: list int = const 0 (used reg = )
16401 3D17           31C0                       xor	ax,ax
16402 3D19           50                         push	ax
16403                                           ! Debug: list int = const $3C0 (used reg = )
16404 3D1A           B8                   03C0  mov	ax,#$3C0
16405 3D1D           50                         push	ax
16406                                           ! Debug: func () void = outb+0 (used reg = )
16407 3D1E           E8         3E94            call	_outb
16408 3D21           83C4                   04  add	sp,*4
16409                                           !BCC_EOS
16410                                           ! 1808  outb(0x3c4,0);
16411                                           ! Debug: list int = const 0 (used reg = )
16412 3D24           31C0                       xor	ax,ax
16413 3D26           50                         push	ax
16414                                           ! Debug: list int = const $3C4 (used reg = )
16415 3D27           B8                   03C4  mov	ax,#$3C4
16416 3D2A           50                         push	ax
16417                                           ! Debug: func () void = outb+0 (used reg = )
16418 3D2B           E8         3E87            call	_outb
16419 3D2E           83C4                   04  add	sp,*4
16420                                           !BCC_EOS
16421                                           ! 1809  outb(0x3c5,0x03);
16422                                           ! Debug: list int = const 3 (used reg = )
16423 3D31           B8                   0003  mov	ax,*3
16424 3D34           50                         push	ax
16425                                           ! Debug: list int = const $3C5 (used reg = )
16426 3D35           B8                   03C5  mov	ax,#$3C5
16427 3D38           50                         push	ax
16428                                           ! Debug: func () void = outb+0 (used reg = )
16429 3D39           E8         3E79            call	_outb
16430 3D3C           83C4                   04  add	sp,*4
16431                                           !BCC_EOS
16432                                           ! 1810  for(i=1;i<=4;i++)
16433                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16434 3D3F           B8                   0001  mov	ax,*1
16435 3D42           8946         F6            mov	-$A[bp],ax
16436                                           !BCC_EOS
16437                                           !BCC_EOS
16438                                           ! 1811   {outb(0x3c4,i);
16439 3D45           EB           3F            jmp .61
16440                       00003D47            .62:
16441                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16442 3D47           FF76         F6            push	-$A[bp]
16443                                           ! Debug: list int = const $3C4 (used reg = )
16444 3D4A           B8                   03C4  mov	ax,#$3C4
16445 3D4D           50                         push	ax
16446                                           ! Debug: func () void = outb+0 (used reg = )
16447 3D4E           E8         3E64            call	_outb
16448 3D51           83C4                   04  add	sp,*4
16449                                           !BCC_EOS
16450                                           ! 1812    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16451                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16452 3D54           8B46         F6            mov	ax,-$A[bp]
16453 3D57           48                         dec	ax
16454 3D58           50                         push	ax
16455                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16456 3D59           8A46         F9            mov	al,-7[bp]
16457 3D5C           30E4                       xor	ah,ah
16458 3D5E           B1                     06  mov	cl,*6
16459 3D60           D3E0                       shl	ax,cl
16460 3D62           89C3                       mov	bx,ax
16461 3D64           81C3                 0257  add	bx,#_video_param_table
16462                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16463 3D68           8B46         E8            mov	ax,-$18[bp]
16464 3D6B           01C3                       add	bx,ax
16465 3D6D           44                         inc	sp
16466 3D6E           44                         inc	sp
16467                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16468 3D6F           8A47         05            mov	al,5[bx]
16469 3D72           30E4                       xor	ah,ah
16470 3D74           50                         push	ax
16471                                           ! Debug: list int = const $3C5 (used reg = )
16472 3D75           B8                   03C5  mov	ax,#$3C5
16473 3D78           50                         push	ax
16474                                           ! Debug: func () void = outb+0 (used reg = )
16475 3D79           E8         3E39            call	_outb
16476 3D7C           83C4                   04  add	sp,*4
16477                                           !BCC_EOS
16478                                           ! 1813   }
16479                                           ! 1814  for(i=0;i<=8;i++)
16480                       00003D7F            .60:
16481                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16482 3D7F           8B46         F6            mov	ax,-$A[bp]
16483 3D82           40                         inc	ax
16484 3D83           8946         F6            mov	-$A[bp],ax
16485                       00003D86            .61:
16486                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16487 3D86           8B46         F6            mov	ax,-$A[bp]
16488 3D89           3D                   0004  cmp	ax,*4
16489 3D8C           76           B9            jbe	.62
16490                       00003D8E            .63:
16491                       00003D8E            .5F:
16492                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16493 3D8E           31C0                       xor	ax,ax
16494 3D90           8946         F6            mov	-$A[bp],ax
16495                                           !BCC_EOS
16496                                           !BCC_EOS
16497                                           ! 1815   {outb(0x3ce,i);
16498 3D93           EB           38            jmp .66
16499                       00003D95            .67:
16500                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16501 3D95           FF76         F6            push	-$A[bp]
16502                                           ! Debug: list int = const $3CE (used reg = )
16503 3D98           B8                   03CE  mov	ax,#$3CE
16504 3D9B           50                         push	ax
16505                                           ! Debug: func () void = outb+0 (used reg = )
16506 3D9C           E8         3E16            call	_outb
16507 3D9F           83C4                   04  add	sp,*4
16508                                           !BCC_EOS
16509                                           ! 1816    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16510                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16511 3DA2           8A46         F9            mov	al,-7[bp]
16512 3DA5           30E4                       xor	ah,ah
16513 3DA7           B1                     06  mov	cl,*6
16514 3DA9           D3E0                       shl	ax,cl
16515 3DAB           89C3                       mov	bx,ax
16516 3DAD           81C3                 0257  add	bx,#_video_param_table
16517                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16518 3DB1           8B46         F6            mov	ax,-$A[bp]
16519 3DB4           01C3                       add	bx,ax
16520                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16521 3DB6           8A47         37            mov	al,$37[bx]
16522 3DB9           30E4                       xor	ah,ah
16523 3DBB           50                         push	ax
16524                                           ! Debug: list int = const $3CF (used reg = )
16525 3DBC           B8                   03CF  mov	ax,#$3CF
16526 3DBF           50                         push	ax
16527                                           ! Debug: func () void = outb+0 (used reg = )
16528 3DC0           E8         3DF2            call	_outb
16529 3DC3           83C4                   04  add	sp,*4
16530                                           !BCC_EOS
16531                                           ! 1817   }
16532                                           ! 1818  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
16533                       00003DC6            .65:
16534                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16535 3DC6           8B46         F6            mov	ax,-$A[bp]
16536 3DC9           40                         inc	ax
16537 3DCA           8946         F6            mov	-$A[bp],ax
16538                       00003DCD            .66:
16539                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
16540 3DCD           8B46         F6            mov	ax,-$A[bp]
16541 3DD0           3D                   0008  cmp	ax,*8
16542 3DD3           76           C0            jbe	.67
16543                       00003DD5            .68:
16544                       00003DD5            .64:
16545                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16546 3DD5           8A46         FE            mov	al,-2[bp]
16547 3DD8           30E4                       xor	ah,ah
16548 3DDA           B1                     03  mov	cl,*3
16549 3DDC           D3E0                       shl	ax,cl
16550 3DDE           89C3                       mov	bx,ax
16551 3DE0           81C3                 01C3  add	bx,#_vga_modes
16552                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
16553 3DE4           8A47         02            mov	al,2[bx]
16554 3DE7           3C                     01  cmp	al,*1
16555 3DE9           75           05            jne 	.69
16556                       00003DEB            .6A:
16557 3DEB           B8                   03B4  mov	ax,#$3B4
16558 3DEE           EB           03            jmp .6B
16559                       00003DF0            .69:
16560 3DF0           B8                   03D4  mov	ax,#$3D4
16561                       00003DF3            .6B:
16562                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
16563 3DF3           8946         EA            mov	-$16[bp],ax
16564                                           !BCC_EOS
16565                                           ! 1819  outw(crtc_addr,0x0011);
16566                                           ! Debug: list int = const $11 (used reg = )
16567 3DF6           B8                   0011  mov	ax,*$11
16568 3DF9           50                         push	ax
16569                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16570 3DFA           FF76         EA            push	-$16[bp]
16571                                           ! Debug: func () void = outw+0 (used reg = )
16572 3DFD           E8         3DC5            call	_outw
16573 3E00           83C4                   04  add	sp,*4
16574                                           !BCC_EOS
16575                                           ! 1820  for(i=0;i<=0x18;i++)
16576                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16577 3E03           31C0                       xor	ax,ax
16578 3E05           8946         F6            mov	-$A[bp],ax
16579                                           !BCC_EOS
16580                                           !BCC_EOS
16581                                           ! 1821   {outb(crtc_addr,i);
16582 3E08           EB           38            jmp .6E
16583                       00003E0A            .6F:
16584                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16585 3E0A           FF76         F6            push	-$A[bp]
16586                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16587 3E0D           FF76         EA            push	-$16[bp]
16588                                           ! Debug: func () void = outb+0 (used reg = )
16589 3E10           E8         3DA2            call	_outb
16590 3E13           83C4                   04  add	sp,*4
16591                                           !BCC_EOS
16592                                           ! 1822    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
16593                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16594 3E16           8A46         F9            mov	al,-7[bp]
16595 3E19           30E4                       xor	ah,ah
16596 3E1B           B1                     06  mov	cl,*6
16597 3E1D           D3E0                       shl	ax,cl
16598 3E1F           89C3                       mov	bx,ax
16599 3E21           81C3                 0257  add	bx,#_video_param_table
16600                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
16601 3E25           8B46         F6            mov	ax,-$A[bp]
16602 3E28           01C3                       add	bx,ax
16603                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
16604 3E2A           8A47         0A            mov	al,$A[bx]
16605 3E2D           30E4                       xor	ah,ah
16606 3E2F           50                         push	ax
16607                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16608 3E30           8B46         EA            mov	ax,-$16[bp]
16609                                           ! Debug: list unsigned int = ax+1 (used reg = )
16610 3E33           40                         inc	ax
16611 3E34           50                         push	ax
16612                                           ! Debug: func () void = outb+0 (used reg = )
16613 3E35           E8         3D7D            call	_outb
16614 3E38           83C4                   04  add	sp,*4
16615                                           !BCC_EOS
16616                                           ! 1823   }
16617                                           ! 1824  outb(0x3c2,video_param_table[vpti].miscreg);
16618                       00003E3B            .6D:
16619                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16620 3E3B           8B46         F6            mov	ax,-$A[bp]
16621 3E3E           40                         inc	ax
16622 3E3F           8946         F6            mov	-$A[bp],ax
16623                       00003E42            .6E:
16624                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
16625 3E42           8B46         F6            mov	ax,-$A[bp]
16626 3E45           3D                   0018  cmp	ax,*$18
16627 3E48           76           C0            jbe	.6F
16628                       00003E4A            .70:
16629                       00003E4A            .6C:
16630                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16631 3E4A           8A46         F9            mov	al,-7[bp]
16632 3E4D           30E4                       xor	ah,ah
16633 3E4F           B1                     06  mov	cl,*6
16634 3E51           D3E0                       shl	ax,cl
16635 3E53           89C3                       mov	bx,ax
16636 3E55           81C3                 0257  add	bx,#_video_param_table
16637                                           ! Debug: list unsigned char = [bx+9] (used reg = )
16638 3E59           8A47         09            mov	al,9[bx]
16639 3E5C           30E4                       xor	ah,ah
16640 3E5E           50                         push	ax
16641                                           ! Debug: list int = const $3C2 (used reg = )
16642 3E5F           B8                   03C2  mov	ax,#$3C2
16643 3E62           50                         push	ax
16644                                           ! Debug: func () void = outb+0 (used reg = )
16645 3E63           E8         3D4F            call	_outb
16646 3E66           83C4                   04  add	sp,*4
16647                                           !BCC_EOS
16648                                           ! 1825  outb(0x3c0,0x20);
16649                                           ! Debug: list int = const $20 (used reg = )
16650 3E69           B8                   0020  mov	ax,*$20
16651 3E6C           50                         push	ax
16652                                           ! Debug: list int = const $3C0 (used reg = )
16653 3E6D           B8                   03C0  mov	ax,#$3C0
16654 3E70           50                         push	ax
16655                                           ! Debug: func () void = outb+0 (used reg = )
16656 3E71           E8         3D41            call	_outb
16657 3E74           83C4                   04  add	sp,*4
16658                                           !BCC_EOS
16659                                           ! 1826  inb(0x3da);
16660                                           ! Debug: list int = const $3DA (used reg = )
16661 3E77           B8                   03DA  mov	ax,#$3DA
16662 3E7A           50                         push	ax
16663                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16664 3E7B           E8         3D21            call	_inb
16665 3E7E           44                         inc	sp
16666 3E7F           44                         inc	sp
16667                                           !BCC_EOS
16668                                           ! 1827  if(noclearmem==0x00)
16669                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
16670 3E80           8A46         FF            mov	al,-1[bp]
16671 3E83           84C0                       test	al,al
16672 3E85   7403    E9         00C1            bne 	.71
16673                       00003E8A            .72:
16674                                           ! 1828   {
16675                                           ! 1829    if(vga_modes[line].class==0x00)
16676                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16677 3E8A           8A46         FE            mov	al,-2[bp]
16678 3E8D           30E4                       xor	ah,ah
16679 3E8F           B1                     03  mov	cl,*3
16680 3E91           D3E0                       shl	ax,cl
16681 3E93           89C3                       mov	bx,ax
16682 3E95           81C3                 01C3  add	bx,#_vga_modes
16683                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
16684 3E99           8A47         01            mov	al,1[bx]
16685 3E9C           84C0                       test	al,al
16686 3E9E           75           26            jne 	.73
16687                       00003EA0            .74:
16688                                           ! 1830     {
16689                                           ! 1831      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
16690                                           ! Debug: list int = const $4000 (used reg = )
16691 3EA0           B8                   4000  mov	ax,#$4000
16692 3EA3           50                         push	ax
16693                                           ! Debug: list int = const $720 (used reg = )
16694 3EA4           B8                   0720  mov	ax,#$720
16695 3EA7           50                         push	ax
16696                                           ! Debug: list int = const 0 (used reg = )
16697 3EA8           31C0                       xor	ax,ax
16698 3EAA           50                         push	ax
16699                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16700 3EAB           8A46         FE            mov	al,-2[bp]
16701 3EAE           30E4                       xor	ah,ah
16702 3EB0           B1                     03  mov	cl,*3
16703 3EB2           D3E0                       shl	ax,cl
16704 3EB4           89C3                       mov	bx,ax
16705 3EB6           81C3                 01C3  add	bx,#_vga_modes
16706                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16707 3EBA           FF77         04            push	4[bx]
16708                                           ! Debug: func () void = memsetw+0 (used reg = )
16709 3EBD           E8         3C04            call	_memsetw
16710 3EC0           83C4                   08  add	sp,*8
16711                                           !BCC_EOS
16712                                           ! 1832     }
16713                                           ! 1833    else
16714                                           ! 1834     {
16715 3EC3           E9         0085            br 	.75
16716                       00003EC6            .73:
16717                                           ! 1835      if(mode<0x0d)
16718                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
16719 3EC6           8A46         04            mov	al,4[bp]
16720 3EC9           3C                     0D  cmp	al,*$D
16721 3ECB           73           24            jae 	.76
16722                       00003ECD            .77:
16723                                           ! 1836       {
16724                                           ! 1837        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
16725                                           ! Debug: list int = const $4000 (used reg = )
16726 3ECD           B8                   4000  mov	ax,#$4000
16727 3ED0           50                         push	ax
16728                                           ! Debug: list int = const 0 (used reg = )
16729 3ED1           31C0                       xor	ax,ax
16730 3ED3           50                         push	ax
16731                                           ! Debug: list int = const 0 (used reg = )
16732 3ED4           31C0                       xor	ax,ax
16733 3ED6           50                         push	ax
16734                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16735 3ED7           8A46         FE            mov	al,-2[bp]
16736 3EDA           30E4                       xor	ah,ah
16737 3EDC           B1                     03  mov	cl,*3
16738 3EDE           D3E0                       shl	ax,cl
16739 3EE0           89C3                       mov	bx,ax
16740 3EE2           81C3                 01C3  add	bx,#_vga_modes
16741                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16742 3EE6           FF77         04            push	4[bx]
16743                                           ! Debug: func () void = memsetw+0 (used reg = )
16744 3EE9           E8         3BD8            call	_memsetw
16745 3EEC           83C4                   08  add	sp,*8
16746                                           !BCC_EOS
16747                                           ! 1838       }
16748                                           ! 1839      else
16749                                           ! 1840       {
16750 3EEF           EB           5A            jmp .78
16751                       00003EF1            .76:
16752                                           ! 1841        outb( 0x3c4, 0x02 );
16753                                           ! Debug: list int = const 2 (used reg = )
16754 3EF1           B8                   0002  mov	ax,*2
16755 3EF4           50                         push	ax
16756                                           ! Debug: list int = const $3C4 (used reg = )
16757 3EF5           B8                   03C4  mov	ax,#$3C4
16758 3EF8           50                         push	ax
16759                                           ! Debug: func () void = outb+0 (used reg = )
16760 3EF9           E8         3CB9            call	_outb
16761 3EFC           83C4                   04  add	sp,*4
16762                                           !BCC_EOS
16763                                           ! 1842        mmask = inb( 0x3c5 );
16764                                           ! Debug: list int = const $3C5 (used reg = )
16765 3EFF           B8                   03C5  mov	ax,#$3C5
16766 3F02           50                         push	ax
16767                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16768 3F03           E8         3C99            call	_inb
16769 3F06           44                         inc	sp
16770 3F07           44                         inc	sp
16771                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
16772 3F08           8846         FD            mov	-3[bp],al
16773                                           !BCC_EOS
16774                                           ! 1843        outb( 0x3c5, 0x0f );
16775                                           ! Debug: list int = const $F (used reg = )
16776 3F0B           B8                   000F  mov	ax,*$F
16777 3F0E           50                         push	ax
16778                                           ! Debug: list int = const $3C5 (used reg = )
16779 3F0F           B8                   03C5  mov	ax,#$3C5
16780 3F12           50                         push	ax
16781                                           ! Debug: func () void = outb+0 (used reg = )
16782 3F13           E8         3C9F            call	_outb
16783 3F16           83C4                   04  add	sp,*4
16784                                           !BCC_EOS
16785                                           ! 1844        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
16786                                           ! Debug: list unsigned int = const $8000 (used reg = )
16787 3F19           B8                   8000  mov	ax,#$8000
16788 3F1C           50                         push	ax
16789                                           ! Debug: list int = const 0 (used reg = )
16790 3F1D           31C0                       xor	ax,ax
16791 3F1F           50                         push	ax
16792                                           ! Debug: list int = const 0 (used reg = )
16793 3F20           31C0                       xor	ax,ax
16794 3F22           50                         push	ax
16795                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16796 3F23           8A46         FE            mov	al,-2[bp]
16797 3F26           30E4                       xor	ah,ah
16798 3F28           B1                     03  mov	cl,*3
16799 3F2A           D3E0                       shl	ax,cl
16800 3F2C           89C3                       mov	bx,ax
16801 3F2E           81C3                 01C3  add	bx,#_vga_modes
16802                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16803 3F32           FF77         04            push	4[bx]
16804                                           ! Debug: func () void = memsetw+0 (used reg = )
16805 3F35           E8         3B8C            call	_memsetw
16806 3F38           83C4                   08  add	sp,*8
16807                                           !BCC_EOS
16808                                           ! 1845        outb( 0x3c5, mmask );
16809                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
16810 3F3B           8A46         FD            mov	al,-3[bp]
16811 3F3E           30E4                       xor	ah,ah
16812 3F40           50                         push	ax
16813                                           ! Debug: list int = const $3C5 (used reg = )
16814 3F41           B8                   03C5  mov	ax,#$3C5
16815 3F44           50                         push	ax
16816                                           ! Debug: func () void = outb+0 (used reg = )
16817 3F45           E8         3C6D            call	_outb
16818 3F48           83C4                   04  add	sp,*4
16819                                           !BCC_EOS
16820                                           ! 1846       }
16821                                           ! 1847     }
16822                       00003F4B            .78:
16823                                           ! 1848   }
16824                       00003F4B            .75:
16825                                           ! 1849  write_byte(0x40,0x49,mode);
16826                       00003F4B            .71:
16827                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16828 3F4B           8A46         04            mov	al,4[bp]
16829 3F4E           30E4                       xor	ah,ah
16830 3F50           50                         push	ax
16831                                           ! Debug: list int = const $49 (used reg = )
16832 3F51           B8                   0049  mov	ax,*$49
16833 3F54           50                         push	ax
16834                                           ! Debug: list int = const $40 (used reg = )
16835 3F55           B8                   0040  mov	ax,*$40
16836 3F58           50                         push	ax
16837                                           ! Debug: func () void = write_byte+0 (used reg = )
16838 3F59           E8         3C13            call	_write_byte
16839 3F5C           83C4                   06  add	sp,*6
16840                                           !BCC_EOS
16841                                           ! 1850  write_word(0x40,0x4A,twidth);
16842                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
16843 3F5F           FF76         F4            push	-$C[bp]
16844                                           ! Debug: list int = const $4A (used reg = )
16845 3F62           B8                   004A  mov	ax,*$4A
16846 3F65           50                         push	ax
16847                                           ! Debug: list int = const $40 (used reg = )
16848 3F66           B8                   0040  mov	ax,*$40
16849 3F69           50                         push	ax
16850                                           ! Debug: func () void = write_word+0 (used reg = )
16851 3F6A           E8         3C1A            call	_write_word
16852 3F6D           83C4                   06  add	sp,*6
16853                                           !BCC_EOS
16854                                           ! 1851  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
16855                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16856 3F70           8A46         F9            mov	al,-7[bp]
16857 3F73           30E4                       xor	ah,ah
16858 3F75           B1                     06  mov	cl,*6
16859 3F77           D3E0                       shl	ax,cl
16860 3F79           89C3                       mov	bx,ax
16861 3F7B           81C3                 0257  add	bx,#_video_param_table
16862                                           ! Debug: address unsigned char = [bx+3] (used reg = )
16863                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
16864                                           ! Debug: list unsigned short = [bx+3] (used reg = )
16865 3F7F           FF77         03            push	3[bx]
16866                                           ! Debug: list int = const $4C (used reg = )
16867 3F82           B8                   004C  mov	ax,*$4C
16868 3F85           50                         push	ax
16869                                           ! Debug: list int = const $40 (used reg = )
16870 3F86           B8                   0040  mov	ax,*$40
16871 3F89           50                         push	ax
16872                                           ! Debug: func () void = write_word+0 (used reg = )
16873 3F8A           E8         3BFA            call	_write_word
16874 3F8D           83C4                   06  add	sp,*6
16875                                           !BCC_EOS
16876                                           ! 1852  write_word(0x40,0x63,crtc_addr);
16877                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
16878 3F90           FF76         EA            push	-$16[bp]
16879                                           ! Debug: list int = const $63 (used reg = )
16880 3F93           B8                   0063  mov	ax,*$63
16881 3F96           50                         push	ax
16882                                           ! Debug: list int = const $40 (used reg = )
16883 3F97           B8                   0040  mov	ax,*$40
16884 3F9A           50                         push	ax
16885                                           ! Debug: func () void = write_word+0 (used reg = )
16886 3F9B           E8         3BE9            call	_write_word
16887 3F9E           83C4                   06  add	sp,*6
16888                                           !BCC_EOS
16889                                           ! 1853  write_byte(0x40,0x84,theightm1);
16890                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
16891 3FA1           FF76         F2            push	-$E[bp]
16892                                           ! Debug: list int = const $84 (used reg = )
16893 3FA4           B8                   0084  mov	ax,#$84
16894 3FA7           50                         push	ax
16895                                           ! Debug: list int = const $40 (used reg = )
16896 3FA8           B8                   0040  mov	ax,*$40
16897 3FAB           50                         push	ax
16898                                           ! Debug: func () void = write_byte+0 (used reg = )
16899 3FAC           E8         3BC0            call	_write_byte
16900 3FAF           83C4                   06  add	sp,*6
16901                                           !BCC_EOS
16902                                           ! 1854  write_word(0x40,0x85,cheight);
16903                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
16904 3FB2           FF76         F0            push	-$10[bp]
16905                                           ! Debug: list int = const $85 (used reg = )
16906 3FB5           B8                   0085  mov	ax,#$85
16907 3FB8           50                         push	ax
16908                                           ! Debug: list int = const $40 (used reg = )
16909 3FB9           B8                   0040  mov	ax,*$40
16910 3FBC           50                         push	ax
16911                                           ! Debug: func () void = write_word+0 (used reg = )
16912 3FBD           E8         3BC7            call	_write_word
16913 3FC0           83C4                   06  add	sp,*6
16914                                           !BCC_EOS
16915                                           ! 1855  write_byte(0x40,0x87,(0x60|noclearmem));
16916                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
16917                                           ! Debug: expression subtree swapping
16918 3FC3           8A46         FF            mov	al,-1[bp]
16919 3FC6           0C                     60  or	al,*$60
16920                                           ! Debug: list unsigned char = al+0 (used reg = )
16921 3FC8           30E4                       xor	ah,ah
16922 3FCA           50                         push	ax
16923                                           ! Debug: list int = const $87 (used reg = )
16924 3FCB           B8                   0087  mov	ax,#$87
16925 3FCE           50                         push	ax
16926                                           ! Debug: list int = const $40 (used reg = )
16927 3FCF           B8                   0040  mov	ax,*$40
16928 3FD2           50                         push	ax
16929                                           ! Debug: func () void = write_byte+0 (used reg = )
16930 3FD3           E8         3B99            call	_write_byte
16931 3FD6           83C4                   06  add	sp,*6
16932                                           !BCC_EOS
16933                                           ! 1856  write_byte(0x40,0x88,0xF9);
16934                                           ! Debug: list int = const $F9 (used reg = )
16935 3FD9           B8                   00F9  mov	ax,#$F9
16936 3FDC           50                         push	ax
16937                                           ! Debug: list int = const $88 (used reg = )
16938 3FDD           B8                   0088  mov	ax,#$88
16939 3FE0           50                         push	ax
16940                                           ! Debug: list int = const $40 (used reg = )
16941 3FE1           B8                   0040  mov	ax,*$40
16942 3FE4           50                         push	ax
16943                                           ! Debug: func () void = write_byte+0 (used reg = )
16944 3FE5           E8         3B87            call	_write_byte
16945 3FE8           83C4                   06  add	sp,*6
16946                                           !BCC_EOS
16947                                           ! 1857  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
16948                                           ! Debug: list int = const $89 (used reg = )
16949 3FEB           B8                   0089  mov	ax,#$89
16950 3FEE           50                         push	ax
16951                                           ! Debug: list int = const $40 (used reg = )
16952 3FEF           B8                   0040  mov	ax,*$40
16953 3FF2           50                         push	ax
16954                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16955 3FF3           E8         3B53            call	_read_byte
16956 3FF6           83C4                   04  add	sp,*4
16957                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
16958 3FF9           24                     7F  and	al,*$7F
16959                                           ! Debug: list unsigned char = al+0 (used reg = )
16960 3FFB           30E4                       xor	ah,ah
16961 3FFD           50                         push	ax
16962                                           ! Debug: list int = const $89 (used reg = )
16963 3FFE           B8                   0089  mov	ax,#$89
16964 4001           50                         push	ax
16965                                           ! Debug: list int = const $40 (used reg = )
16966 4002           B8                   0040  mov	ax,*$40
16967 4005           50                         push	ax
16968                                           ! Debug: func () void = write_byte+0 (used reg = )
16969 4006           E8         3B66            call	_write_byte
16970 4009           83C4                   06  add	sp,*6
16971                                           !BCC_EOS
16972                                           ! 1858  write_byte(0x40,0x8A,0x08);
16973                                           ! Debug: list int = const 8 (used reg = )
16974 400C           B8                   0008  mov	ax,*8
16975 400F           50                         push	ax
16976                                           ! Debug: list int = const $8A (used reg = )
16977 4010           B8                   008A  mov	ax,#$8A
16978 4013           50                         push	ax
16979                                           ! Debug: list int = const $40 (used reg = )
16980 4014           B8                   0040  mov	ax,*$40
16981 4017           50                         push	ax
16982                                           ! Debug: func () void = write_byte+0 (used reg = )
16983 4018           E8         3B54            call	_write_byte
16984 401B           83C4                   06  add	sp,*6
16985                                           !BCC_EOS
16986                                           ! 1859  write_word(0x40,0xA8, video_save_pointer_table);
16987                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
16988 401E           BB                   35C0  mov	bx,#_video_save_pointer_table
16989 4021           53                         push	bx
16990                                           ! Debug: list int = const $A8 (used reg = )
16991 4022           B8                   00A8  mov	ax,#$A8
16992 4025           50                         push	ax
16993                                           ! Debug: list int = const $40 (used reg = )
16994 4026           B8                   0040  mov	ax,*$40
16995 4029           50                         push	ax
16996                                           ! Debug: func () void = write_word+0 (used reg = )
16997 402A           E8         3B5A            call	_write_word
16998 402D           83C4                   06  add	sp,*6
16999                                           !BCC_EOS
17000                                           ! 1860  write_word(0x40,0xA8 +2, 0xc000);
17001                                           ! Debug: list unsigned int = const $C000 (used reg = )
17002 4030           B8                   C000  mov	ax,#$C000
17003 4033           50                         push	ax
17004                                           ! Debug: list int = const $AA (used reg = )
17005 4034           B8                   00AA  mov	ax,#$AA
17006 4037           50                         push	ax
17007                                           ! Debug: list int = const $40 (used reg = )
17008 4038           B8                   0040  mov	ax,*$40
17009 403B           50                         push	ax
17010                                           ! Debug: func () void = write_word+0 (used reg = )
17011 403C           E8         3B48            call	_write_word
17012 403F           83C4                   06  add	sp,*6
17013                                           !BCC_EOS
17014                                           ! 1861  write_byte(0x40,0x65,0x00);
17015                                           ! Debug: list int = const 0 (used reg = )
17016 4042           31C0                       xor	ax,ax
17017 4044           50                         push	ax
17018                                           ! Debug: list int = const $65 (used reg = )
17019 4045           B8                   0065  mov	ax,*$65
17020 4048           50                         push	ax
17021                                           ! Debug: list int = const $40 (used reg = )
17022 4049           B8                   0040  mov	ax,*$40
17023 404C           50                         push	ax
17024                                           ! Debug: func () void = write_byte+0 (used reg = )
17025 404D           E8         3B1F            call	_write_byte
17026 4050           83C4                   06  add	sp,*6
17027                                           !BCC_EOS
17028                                           ! 1862  write_byte(0x40,0x66,0x00);
17029                                           ! Debug: list int = const 0 (used reg = )
17030 4053           31C0                       xor	ax,ax
17031 4055           50                         push	ax
17032                                           ! Debug: list int = const $66 (used reg = )
17033 4056           B8                   0066  mov	ax,*$66
17034 4059           50                         push	ax
17035                                           ! Debug: list int = const $40 (used reg = )
17036 405A           B8                   0040  mov	ax,*$40
17037 405D           50                         push	ax
17038                                           ! Debug: func () void = write_byte+0 (used reg = )
17039 405E           E8         3B0E            call	_write_byte
17040 4061           83C4                   06  add	sp,*6
17041                                           !BCC_EOS
17042                                           ! 1863  if(vga_modes[line].class==0x00)
17043                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17044 4064           8A46         FE            mov	al,-2[bp]
17045 4067           30E4                       xor	ah,ah
17046 4069           B1                     03  mov	cl,*3
17047 406B           D3E0                       shl	ax,cl
17048 406D           89C3                       mov	bx,ax
17049 406F           81C3                 01C3  add	bx,#_vga_modes
17050                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17051 4073           8A47         01            mov	al,1[bx]
17052 4076           84C0                       test	al,al
17053 4078           75           0E            jne 	.79
17054                       0000407A            .7A:
17055                                           ! 1864   {
17056                                           ! 1865    biosfn_set_cursor_shape(0x06,0x07);
17057                                           ! Debug: list int = const 7 (used reg = )
17058 407A           B8                   0007  mov	ax,*7
17059 407D           50                         push	ax
17060                                           ! Debug: list int = const 6 (used reg = )
17061 407E           B8                   0006  mov	ax,*6
17062 4081           50                         push	ax
17063                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17064 4082           E8         00BB            call	_biosfn_set_cursor_shape
17065 4085           83C4                   04  add	sp,*4
17066                                           !BCC_EOS
17067                                           ! 1866   }
17068                                           ! 1867  for(i=0;i<8;i++)
17069                       00004088            .79:
17070                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17071 4088           31C0                       xor	ax,ax
17072 408A           8946         F6            mov	-$A[bp],ax
17073                                           !BCC_EOS
17074                                           !BCC_EOS
17075                                           ! 1868   biosfn_set_cursor_pos(i,0x0000);
17076 408D           EB           13            jmp .7D
17077                       0000408F            .7E:
17078                                           ! Debug: list int = const 0 (used reg = )
17079 408F           31C0                       xor	ax,ax
17080 4091           50                         push	ax
17081                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17082 4092           FF76         F6            push	-$A[bp]
17083                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17084 4095           E8         01C3            call	_biosfn_set_cursor_pos
17085 4098           83C4                   04  add	sp,*4
17086                                           !BCC_EOS
17087                                           ! 1869  biosfn_set_active_page(0x00);
17088                       0000409B            .7C:
17089                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17090 409B           8B46         F6            mov	ax,-$A[bp]
17091 409E           40                         inc	ax
17092 409F           8946         F6            mov	-$A[bp],ax
17093                       000040A2            .7D:
17094                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17095 40A2           8B46         F6            mov	ax,-$A[bp]
17096 40A5           3D                   0008  cmp	ax,*8
17097 40A8           72           E5            jb 	.7E
17098                       000040AA            .7F:
17099                       000040AA            .7B:
17100                                           ! Debug: list int = const 0 (used reg = )
17101 40AA           31C0                       xor	ax,ax
17102 40AC           50                         push	ax
17103                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17104 40AD           E8         0321            call	_biosfn_set_active_page
17105 40B0           44                         inc	sp
17106 40B1           44                         inc	sp
17107                                           !BCC_EOS
17108                                           ! 1870  if(vga_modes[line].class==0x00)
17109                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17110 40B2           8A46         FE            mov	al,-2[bp]
17111 40B5           30E4                       xor	ah,ah
17112 40B7           B1                     03  mov	cl,*3
17113 40B9           D3E0                       shl	ax,cl
17114 40BB           89C3                       mov	bx,ax
17115 40BD           81C3                 01C3  add	bx,#_vga_modes
17116                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17117 40C1           8A47         01            mov	al,1[bx]
17118 40C4           84C0                       test	al,al
17119 40C6           75           0E            jne 	.80
17120                       000040C8            .81:
17121                                           ! 1871   {
17122                                           ! 1872 #asm
17123                                           !BCC_EOS
17124                                           !BCC_ASM
17125                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17126                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17127                       00000008            _biosfn_set_video_mode.theightm1	set	8
17128                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17129                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17130                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17131                       00000014            _biosfn_set_video_mode.line	set	$14
17132                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17133                       00000006            _biosfn_set_video_mode.cheight	set	6
17134                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17135                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17136                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17137                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17138                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17139                       0000000C            _biosfn_set_video_mode.i	set	$C
17140                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17141                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17142                       00000004            .biosfn_set_video_mode.mode	set	4
17143                       00000010            _biosfn_set_video_mode.palette	set	$10
17144                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17145                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17146                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17147                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17148                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17149                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17150                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17151                       00000013            _biosfn_set_video_mode.mmask	set	$13
17152                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17153                                             ;; copy and activate 8x16 font
17154 40C8           B8                   1104    mov ax, #0x1104
17155 40CB           B3                     00    mov bl, #0x00
17156 40CD           CD                     10    int #0x10
17157 40CF           B8                   1103    mov ax, #0x1103
17158 40D2           B3                     00    mov bl, #0x00
17159 40D4           CD                     10    int #0x10
17160                                           ! 1880 endasm
17161                                           !BCC_ENDASM
17162                                           !BCC_EOS
17163                                           ! 1881   }
17164                                           ! 1882 #asm
17165                       000040D6            .80:
17166                                           !BCC_EOS
17167                                           !BCC_ASM
17168                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17169                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17170                       00000008            _biosfn_set_video_mode.theightm1	set	8
17171                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17172                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17173                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17174                       00000014            _biosfn_set_video_mode.line	set	$14
17175                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17176                       00000006            _biosfn_set_video_mode.cheight	set	6
17177                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17178                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17179                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17180                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17181                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17182                       0000000C            _biosfn_set_video_mode.i	set	$C
17183                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17184                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17185                       00000004            .biosfn_set_video_mode.mode	set	4
17186                       00000010            _biosfn_set_video_mode.palette	set	$10
17187                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17188                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17189                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17190                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17191                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17192                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17193                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17194                       00000013            _biosfn_set_video_mode.mmask	set	$13
17195                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17196                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   40D6           1E                           push ds
 +a   40D7           31C0                         xor ax, ax
 +a   40D9           8ED8                         mov ds, ax
 +a   40DB           B8                   1327    mov ax,  #_vgafont8+128*8
 +a   40DE           A3         007C              mov 0x1f*4, ax
 +a   40E1           B8                   C000    mov ax,  #0xC000
 +a   40E4           A3         007E              mov 0x1f*4+2, ax
 +a   40E7           1F                           pop ds
17197                                           ! 1884 endasm
17198                                           !BCC_ENDASM
17199                                           !BCC_EOS
17200                                           ! 1885   switch(cheight)
17201 40E8           8B46         F0            mov	ax,-$10[bp]
17202                                           ! 1886    {case 8:
17203 40EB           E9         003F            br 	.84
17204                                           ! 1887 #asm
17205                       000040EE            .85:
17206                                           !BCC_EOS
17207                                           !BCC_ASM
17208                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17209                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17210                       00000008            _biosfn_set_video_mode.theightm1	set	8
17211                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17212                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17213                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17214                       00000014            _biosfn_set_video_mode.line	set	$14
17215                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17216                       00000006            _biosfn_set_video_mode.cheight	set	6
17217                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17218                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17219                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17220                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17221                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17222                       0000000C            _biosfn_set_video_mode.i	set	$C
17223                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17224                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17225                       00000004            .biosfn_set_video_mode.mode	set	4
17226                       00000010            _biosfn_set_video_mode.palette	set	$10
17227                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17228                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17229                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17230                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17231                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17232                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17233                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17234                       00000013            _biosfn_set_video_mode.mmask	set	$13
17235                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17236                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   40EE           1E                           push ds
 +a   40EF           31C0                         xor ax, ax
 +a   40F1           8ED8                         mov ds, ax
 +a   40F3           B8                   0F27    mov ax,  #_vgafont8
 +a   40F6           A3         010C              mov 0x43*4, ax
 +a   40F9           B8                   C000    mov ax,  #0xC000
 +a   40FC           A3         010E              mov 0x43*4+2, ax
 +a   40FF           1F                           pop ds
17237                                           ! 1889 endasm
17238                                           !BCC_ENDASM
17239                                           !BCC_EOS
17240                                           ! 1890      break;
17241 4100           E9         0039            br 	.82
17242                                           !BCC_EOS
17243                                           ! 1891     case 14:
17244                                           ! 1892 #asm
17245                       00004103            .86:
17246                                           !BCC_EOS
17247                                           !BCC_ASM
17248                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17249                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17250                       00000008            _biosfn_set_video_mode.theightm1	set	8
17251                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17252                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17253                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17254                       00000014            _biosfn_set_video_mode.line	set	$14
17255                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17256                       00000006            _biosfn_set_video_mode.cheight	set	6
17257                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17258                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17259                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17260                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17261                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17262                       0000000C            _biosfn_set_video_mode.i	set	$C
17263                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17264                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17265                       00000004            .biosfn_set_video_mode.mode	set	4
17266                       00000010            _biosfn_set_video_mode.palette	set	$10
17267                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17268                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17269                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17270                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17271                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17272                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17273                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17274                       00000013            _biosfn_set_video_mode.mmask	set	$13
17275                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17276                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   4103           1E                           push ds
 +a   4104           31C0                         xor ax, ax
 +a   4106           8ED8                         mov ds, ax
 +a   4108           B8                   1727    mov ax,  #_vgafont14
 +a   410B           A3         010C              mov 0x43*4, ax
 +a   410E           B8                   C000    mov ax,  #0xC000
 +a   4111           A3         010E              mov 0x43*4+2, ax
 +a   4114           1F                           pop ds
17277                                           ! 1894 endasm
17278                                           !BCC_ENDASM
17279                                           !BCC_EOS
17280                                           ! 1895      break;
17281 4115           EB           25            jmp .82
17282                                           !BCC_EOS
17283                                           ! 1896     case 16:
17284                                           ! 1897 #asm
17285                       00004117            .87:
17286                                           !BCC_EOS
17287                                           !BCC_ASM
17288                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17289                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17290                       00000008            _biosfn_set_video_mode.theightm1	set	8
17291                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17292                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17293                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17294                       00000014            _biosfn_set_video_mode.line	set	$14
17295                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17296                       00000006            _biosfn_set_video_mode.cheight	set	6
17297                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17298                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17299                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17300                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17301                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17302                       0000000C            _biosfn_set_video_mode.i	set	$C
17303                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17304                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17305                       00000004            .biosfn_set_video_mode.mode	set	4
17306                       00000010            _biosfn_set_video_mode.palette	set	$10
17307                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17308                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17309                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17310                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17311                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17312                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17313                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17314                       00000013            _biosfn_set_video_mode.mmask	set	$13
17315                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17316                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4117           1E                           push ds
 +a   4118           31C0                         xor ax, ax
 +a   411A           8ED8                         mov ds, ax
 +a   411C           B8                   2527    mov ax,  #_vgafont16
 +a   411F           A3         010C              mov 0x43*4, ax
 +a   4122           B8                   C000    mov ax,  #0xC000
 +a   4125           A3         010E              mov 0x43*4+2, ax
 +a   4128           1F                           pop ds
17317                                           ! 1899 endasm
17318                                           !BCC_ENDASM
17319                                           !BCC_EOS
17320                                           ! 1900      break;
17321 4129           EB           11            jmp .82
17322                                           !BCC_EOS
17323                                           ! 1901    }
17324                                           ! 1902 }
17325 412B           EB           0F            jmp .82
17326                       0000412D            .84:
17327 412D           2D                   0008  sub	ax,*8
17328 4130           74           BC            je 	.85
17329 4132           2D                   0006  sub	ax,*6
17330 4135           74           CC            je 	.86
17331 4137           2D                   0002  sub	ax,*2
17332 413A           74           DB            je 	.87
17333                       0000413C            .82:
17334                       FFFFFFE8            ..FFFD	=	-$18
17335 413C           89EC                       mov	sp,bp
17336 413E           5D                         pop	bp
17337 413F           C3                         ret
17338                                           ! 1903 static void biosfn_set_cursor_shape (CH,CL)
17339                                           ! Register BX used in function biosfn_set_video_mode
17340                                           ! 1904 Bit8u CH;Bit8u CL;
17341                       00004140            _biosfn_set_cursor_shape:
17342                                           !BCC_EOS
17343                                           !BCC_EOS
17344                                           ! 1905 {Bit16u cheight,curs,crtc_addr;
17345                                           !BCC_EOS
17346                                           ! 1906  Bit8u modeset_ctl;
17347                                           !BCC_EOS
17348                                           ! 1907  CH&=0x3f;
17349 4140           55                         push	bp
17350 4141           89E5                       mov	bp,sp
17351 4143           83C4                   F8  add	sp,*-8
17352                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17353 4146           8A46         04            mov	al,4[bp]
17354 4149           24                     3F  and	al,*$3F
17355 414B           8846         04            mov	4[bp],al
17356                                           !BCC_EOS
17357                                           ! 1908  CL&=0x1f;
17358                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17359 414E           8A46         06            mov	al,6[bp]
17360 4151           24                     1F  and	al,*$1F
17361 4153           8846         06            mov	6[bp],al
17362                                           !BCC_EOS
17363                                           ! 1909  curs=(CH<<8)+CL;
17364                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17365 4156           8A46         04            mov	al,4[bp]
17366 4159           30E4                       xor	ah,ah
17367 415B           88C4                       mov	ah,al
17368 415D           30C0                       xor	al,al
17369                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17370 415F           0246         06            add	al,6[bp]
17371 4162           80D4                   00  adc	ah,*0
17372                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17373 4165           8946         FC            mov	-4[bp],ax
17374                                           !BCC_EOS
17375                                           ! 1910  write_word(0x40,0x60,curs);
17376                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17377 4168           FF76         FC            push	-4[bp]
17378                                           ! Debug: list int = const $60 (used reg = )
17379 416B           B8                   0060  mov	ax,*$60
17380 416E           50                         push	ax
17381                                           ! Debug: list int = const $40 (used reg = )
17382 416F           B8                   0040  mov	ax,*$40
17383 4172           50                         push	ax
17384                                           ! Debug: func () void = write_word+0 (used reg = )
17385 4173           E8         3A11            call	_write_word
17386 4176           83C4                   06  add	sp,*6
17387                                           !BCC_EOS
17388                                           ! 1911  modeset_ctl=read_byte(0x40,0x89);
17389                                           ! Debug: list int = const $89 (used reg = )
17390 4179           B8                   0089  mov	ax,#$89
17391 417C           50                         push	ax
17392                                           ! Debug: list int = const $40 (used reg = )
17393 417D           B8                   0040  mov	ax,*$40
17394 4180           50                         push	ax
17395                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17396 4181           E8         39C5            call	_read_byte
17397 4184           83C4                   04  add	sp,*4
17398                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17399 4187           8846         F9            mov	-7[bp],al
17400                                           !BCC_EOS
17401                                           ! 1912  cheight = read_word(0x40,0x85);
17402                                           ! Debug: list int = const $85 (used reg = )
17403 418A           B8                   0085  mov	ax,#$85
17404 418D           50                         push	ax
17405                                           ! Debug: list int = const $40 (used reg = )
17406 418E           B8                   0040  mov	ax,*$40
17407 4191           50                         push	ax
17408                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17409 4192           E8         39C7            call	_read_word
17410 4195           83C4                   04  add	sp,*4
17411                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17412 4198           8946         FE            mov	-2[bp],ax
17413                                           !BCC_EOS
17414                                           ! 1913  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17415                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17416 419B           8A46         F9            mov	al,-7[bp]
17417 419E           24                     01  and	al,*1
17418 41A0           84C0                       test	al,al
17419 41A2           74           66            je  	.88
17420                       000041A4            .8C:
17421                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17422 41A4           8B46         FE            mov	ax,-2[bp]
17423 41A7           3D                   0008  cmp	ax,*8
17424 41AA           76           5E            jbe 	.88
17425                       000041AC            .8B:
17426                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17427 41AC           8A46         06            mov	al,6[bp]
17428 41AF           3C                     08  cmp	al,*8
17429 41B1           73           57            jae 	.88
17430                       000041B3            .8A:
17431                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17432 41B3           8A46         04            mov	al,4[bp]
17433 41B6           3C                     20  cmp	al,*$20
17434 41B8           73           50            jae 	.88
17435                       000041BA            .89:
17436                                           ! 1914   {
17437                                           ! 1915    if(CL!=(CH+1))
17438                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17439 41BA           8A46         04            mov	al,4[bp]
17440 41BD           30E4                       xor	ah,ah
17441                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17442                                           ! Debug: expression subtree swapping
17443 41BF           40                         inc	ax
17444 41C0           50                         push	ax
17445 41C1           8A46         06            mov	al,6[bp]
17446 41C4           30E4                       xor	ah,ah
17447 41C6           3B46         F6            cmp	ax,-$A[bp]
17448 41C9           8D66         F8            lea	sp,-8[bp]
17449 41CC           74           15            je  	.8D
17450                       000041CE            .8E:
17451                                           ! 1916     {
17452                                           ! 1917      CH = ((CH+1) * cheight / 8) -1;
17453                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17454 41CE           8A46         04            mov	al,4[bp]
17455 41D1           30E4                       xor	ah,ah
17456                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17457 41D3           40                         inc	ax
17458 41D4           8B4E         FE            mov	cx,-2[bp]
17459 41D7           F7E9                       imul	cx
17460                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17461 41D9           B1                     03  mov	cl,*3
17462 41DB           D3E8                       shr	ax,cl
17463                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17464                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17465 41DD           48                         dec	ax
17466 41DE           8846         04            mov	4[bp],al
17467                                           !BCC_EOS
17468                                           ! 1918     }
17469                                           ! 1919    else
17470                                           ! 1920     {
17471 41E1           EB           14            jmp .8F
17472                       000041E3            .8D:
17473                                           ! 1921      CH = ((CL+1) * cheight / 8) - 2;
17474                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17475 41E3           8A46         06            mov	al,6[bp]
17476 41E6           30E4                       xor	ah,ah
17477                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17478 41E8           40                         inc	ax
17479 41E9           8B4E         FE            mov	cx,-2[bp]
17480 41EC           F7E9                       imul	cx
17481                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17482 41EE           B1                     03  mov	cl,*3
17483 41F0           D3E8                       shr	ax,cl
17484                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17485                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17486 41F2           48                         dec	ax
17487 41F3           48                         dec	ax
17488 41F4           8846         04            mov	4[bp],al
17489                                           !BCC_EOS
17490                                           ! 1922     }
17491                                           ! 1923    CL = ((CL+1) * cheight / 8) - 1;
17492                       000041F7            .8F:
17493                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17494 41F7           8A46         06            mov	al,6[bp]
17495 41FA           30E4                       xor	ah,ah
17496                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17497 41FC           40                         inc	ax
17498 41FD           8B4E         FE            mov	cx,-2[bp]
17499 4200           F7E9                       imul	cx
17500                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17501 4202           B1                     03  mov	cl,*3
17502 4204           D3E8                       shr	ax,cl
17503                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17504                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17505 4206           48                         dec	ax
17506 4207           8846         06            mov	6[bp],al
17507                                           !BCC_EOS
17508                                           ! 1924   }
17509                                           ! 1925  crtc_addr=read_word(0x40,0x63);
17510                       0000420A            .88:
17511                                           ! Debug: list int = const $63 (used reg = )
17512 420A           B8                   0063  mov	ax,*$63
17513 420D           50                         push	ax
17514                                           ! Debug: list int = const $40 (used reg = )
17515 420E           B8                   0040  mov	ax,*$40
17516 4211           50                         push	ax
17517                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17518 4212           E8         3947            call	_read_word
17519 4215           83C4                   04  add	sp,*4
17520                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17521 4218           8946         FA            mov	-6[bp],ax
17522                                           !BCC_EOS
17523                                           ! 1926  outb(crtc_addr,0x0a);
17524                                           ! Debug: list int = const $A (used reg = )
17525 421B           B8                   000A  mov	ax,*$A
17526 421E           50                         push	ax
17527                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17528 421F           FF76         FA            push	-6[bp]
17529                                           ! Debug: func () void = outb+0 (used reg = )
17530 4222           E8         3990            call	_outb
17531 4225           83C4                   04  add	sp,*4
17532                                           !BCC_EOS
17533                                           ! 1927  outb(crtc_addr+1,CH);
17534                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
17535 4228           8A46         04            mov	al,4[bp]
17536 422B           30E4                       xor	ah,ah
17537 422D           50                         push	ax
17538                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17539 422E           8B46         FA            mov	ax,-6[bp]
17540                                           ! Debug: list unsigned int = ax+1 (used reg = )
17541 4231           40                         inc	ax
17542 4232           50                         push	ax
17543                                           ! Debug: func () void = outb+0 (used reg = )
17544 4233           E8         397F            call	_outb
17545 4236           83C4                   04  add	sp,*4
17546                                           !BCC_EOS
17547                                           ! 1928  outb(crtc_addr,0x0b);
17548                                           ! Debug: list int = const $B (used reg = )
17549 4239           B8                   000B  mov	ax,*$B
17550 423C           50                         push	ax
17551                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17552 423D           FF76         FA            push	-6[bp]
17553                                           ! Debug: func () void = outb+0 (used reg = )
17554 4240           E8         3972            call	_outb
17555 4243           83C4                   04  add	sp,*4
17556                                           !BCC_EOS
17557                                           ! 1929  outb(crtc_addr+1,CL);
17558                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
17559 4246           8A46         06            mov	al,6[bp]
17560 4249           30E4                       xor	ah,ah
17561 424B           50                         push	ax
17562                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17563 424C           8B46         FA            mov	ax,-6[bp]
17564                                           ! Debug: list unsigned int = ax+1 (used reg = )
17565 424F           40                         inc	ax
17566 4250           50                         push	ax
17567                                           ! Debug: func () void = outb+0 (used reg = )
17568 4251           E8         3961            call	_outb
17569 4254           83C4                   04  add	sp,*4
17570                                           !BCC_EOS
17571                                           ! 1930 }
17572 4257           89EC                       mov	sp,bp
17573 4259           5D                         pop	bp
17574 425A           C3                         ret
17575                                           ! 1931 static void biosfn_set_cursor_pos (page, cursor)
17576                                           ! 1932 Bit8u page;Bit16u cursor;
17577                       0000425B            _biosfn_set_cursor_pos:
17578                                           !BCC_EOS
17579                                           !BCC_EOS
17580                                           ! 1933 {
17581                                           ! 1934  Bit8u xcurs,ycurs,current;
17582                                           !BCC_EOS
17583                                           ! 1935  Bit16u nbcols,nbrows,address,crtc_addr;
17584                                           !BCC_EOS
17585                                           ! 1936  if(page>7)return;
17586 425B           55                         push	bp
17587 425C           89E5                       mov	bp,sp
17588 425E           83C4                   F4  add	sp,*-$C
17589                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
17590 4261           8A46         04            mov	al,4[bp]
17591 4264           3C                     07  cmp	al,*7
17592 4266           76           04            jbe 	.90
17593                       00004268            .91:
17594 4268           89EC                       mov	sp,bp
17595 426A           5D                         pop	bp
17596 426B           C3                         ret
17597                                           !BCC_EOS
17598                                           ! 1937  write_word(0x40, 0x50 +2*page, cursor);
17599                       0000426C            .90:
17600                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
17601 426C           FF76         06            push	6[bp]
17602                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
17603                                           ! Debug: expression subtree swapping
17604 426F           8A46         04            mov	al,4[bp]
17605 4272           30E4                       xor	ah,ah
17606 4274           D1E0                       shl	ax,*1
17607                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17608                                           ! Debug: expression subtree swapping
17609                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17610 4276           05                   0050  add	ax,*$50
17611 4279           50                         push	ax
17612                                           ! Debug: list int = const $40 (used reg = )
17613 427A           B8                   0040  mov	ax,*$40
17614 427D           50                         push	ax
17615                                           ! Debug: func () void = write_word+0 (used reg = )
17616 427E           E8         3906            call	_write_word
17617 4281           83C4                   06  add	sp,*6
17618                                           !BCC_EOS
17619                                           ! 1938  current=read_byte(0x40,0x62);
17620                                           ! Debug: list int = const $62 (used reg = )
17621 4284           B8                   0062  mov	ax,*$62
17622 4287           50                         push	ax
17623                                           ! Debug: list int = const $40 (used reg = )
17624 4288           B8                   0040  mov	ax,*$40
17625 428B           50                         push	ax
17626                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17627 428C           E8         38BA            call	_read_byte
17628 428F           83C4                   04  add	sp,*4
17629                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
17630 4292           8846         FD            mov	-3[bp],al
17631                                           !BCC_EOS
17632                                           ! 1939  if(page==current)
17633                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
17634 4295           8A46         04            mov	al,4[bp]
17635 4298           3A46         FD            cmp	al,-3[bp]
17636 429B   7403    E9         00B8            bne 	.92
17637                       000042A0            .93:
17638                                           ! 1940   {
17639                                           ! 1941    nbcols=read_word(0x40,0x4A);
17640                                           ! Debug: list int = const $4A (used reg = )
17641 42A0           B8                   004A  mov	ax,*$4A
17642 42A3           50                         push	ax
17643                                           ! Debug: list int = const $40 (used reg = )
17644 42A4           B8                   0040  mov	ax,*$40
17645 42A7           50                         push	ax
17646                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17647 42A8           E8         38B1            call	_read_word
17648 42AB           83C4                   04  add	sp,*4
17649                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
17650 42AE           8946         FA            mov	-6[bp],ax
17651                                           !BCC_EOS
17652                                           ! 1942    nbrows=read_byte(0x40,0x84)+1;
17653                                           ! Debug: list int = const $84 (used reg = )
17654 42B1           B8                   0084  mov	ax,#$84
17655 42B4           50                         push	ax
17656                                           ! Debug: list int = const $40 (used reg = )
17657 42B5           B8                   0040  mov	ax,*$40
17658 42B8           50                         push	ax
17659                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17660 42B9           E8         388D            call	_read_byte
17661 42BC           83C4                   04  add	sp,*4
17662                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
17663 42BF           30E4                       xor	ah,ah
17664                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
17665 42C1           40                         inc	ax
17666 42C2           8946         F8            mov	-8[bp],ax
17667                                           !BCC_EOS
17668                                           ! 1943    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
17669                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
17670 42C5           8A46         06            mov	al,6[bp]
17671                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
17672 42C8           8846         FF            mov	-1[bp],al
17673                                           !BCC_EOS
17674                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
17675 42CB           8B46         06            mov	ax,6[bp]
17676 42CE           30C0                       xor	al,al
17677                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17678 42D0           88E0                       mov	al,ah
17679 42D2           30E4                       xor	ah,ah
17680                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
17681 42D4           8846         FE            mov	-2[bp],al
17682                                           !BCC_EOS
17683                                           ! 1944    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
17684                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
17685 42D7           8A46         FE            mov	al,-2[bp]
17686 42DA           30E4                       xor	ah,ah
17687 42DC           8B4E         FA            mov	cx,-6[bp]
17688 42DF           F7E9                       imul	cx
17689 42E1           50                         push	ax
17690                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
17691 42E2           8B46         FA            mov	ax,-6[bp]
17692 42E5           8B4E         F8            mov	cx,-8[bp]
17693 42E8           F7E9                       imul	cx
17694                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
17695 42EA           0C                     FF  or	al,#$FF
17696                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
17697                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
17698 42EC           89C3                       mov	bx,ax
17699 42EE           8A46         04            mov	al,4[bp]
17700 42F1           30E4                       xor	ah,ah
17701 42F3           93                         xchg	ax,bx
17702 42F4           40                         inc	ax
17703 42F5           89D9                       mov	cx,bx
17704 42F7           F7E9                       imul	cx
17705                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
17706 42F9           0246         FF            add	al,-1[bp]
17707 42FC           80D4                   00  adc	ah,*0
17708                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
17709 42FF           0346         F2            add	ax,-$E[bp]
17710 4302           44                         inc	sp
17711 4303           44                         inc	sp
17712                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
17713 4304           8946         F6            mov	-$A[bp],ax
17714                                           !BCC_EOS
17715                                           ! 1945    crtc_addr=read_word(0x40,0x63);
17716                                           ! Debug: list int = const $63 (used reg = )
17717 4307           B8                   0063  mov	ax,*$63
17718 430A           50                         push	ax
17719                                           ! Debug: list int = const $40 (used reg = )
17720 430B           B8                   0040  mov	ax,*$40
17721 430E           50                         push	ax
17722                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17723 430F           E8         384A            call	_read_word
17724 4312           83C4                   04  add	sp,*4
17725                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
17726 4315           8946         F4            mov	-$C[bp],ax
17727                                           !BCC_EOS
17728                                           ! 1946    outb(crtc_addr,0x0e);
17729                                           ! Debug: list int = const $E (used reg = )
17730 4318           B8                   000E  mov	ax,*$E
17731 431B           50                         push	ax
17732                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17733 431C           FF76         F4            push	-$C[bp]
17734                                           ! Debug: func () void = outb+0 (used reg = )
17735 431F           E8         3893            call	_outb
17736 4322           83C4                   04  add	sp,*4
17737                                           !BCC_EOS
17738                                           ! 1947    outb(crtc_addr+1,(address&0xff00)>>8);
17739                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
17740 4325           8B46         F6            mov	ax,-$A[bp]
17741 4328           30C0                       xor	al,al
17742                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17743 432A           88E0                       mov	al,ah
17744 432C           30E4                       xor	ah,ah
17745                                           ! Debug: list unsigned int = ax+0 (used reg = )
17746 432E           50                         push	ax
17747                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17748 432F           8B46         F4            mov	ax,-$C[bp]
17749                                           ! Debug: list unsigned int = ax+1 (used reg = )
17750 4332           40                         inc	ax
17751 4333           50                         push	ax
17752                                           ! Debug: func () void = outb+0 (used reg = )
17753 4334           E8         387E            call	_outb
17754 4337           83C4                   04  add	sp,*4
17755                                           !BCC_EOS
17756                                           ! 1948    outb(crtc_addr,0x0f);
17757                                           ! Debug: list int = const $F (used reg = )
17758 433A           B8                   000F  mov	ax,*$F
17759 433D           50                         push	ax
17760                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17761 433E           FF76         F4            push	-$C[bp]
17762                                           ! Debug: func () void = outb+0 (used reg = )
17763 4341           E8         3871            call	_outb
17764 4344           83C4                   04  add	sp,*4
17765                                           !BCC_EOS
17766                                           ! 1949    outb(crtc_addr+1,address&0x00ff);
17767                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
17768 4347           8A46         F6            mov	al,-$A[bp]
17769                                           ! Debug: list unsigned char = al+0 (used reg = )
17770 434A           30E4                       xor	ah,ah
17771 434C           50                         push	ax
17772                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17773 434D           8B46         F4            mov	ax,-$C[bp]
17774                                           ! Debug: list unsigned int = ax+1 (used reg = )
17775 4350           40                         inc	ax
17776 4351           50                         push	ax
17777                                           ! Debug: func () void = outb+0 (used reg = )
17778 4352           E8         3860            call	_outb
17779 4355           83C4                   04  add	sp,*4
17780                                           !BCC_EOS
17781                                           ! 1950   }
17782                                           ! 1951 }
17783                       00004358            .92:
17784 4358           89EC                       mov	sp,bp
17785 435A           5D                         pop	bp
17786 435B           C3                         ret
17787                                           ! 1952 static void biosfn_get_cursor_pos (page,shape, pos)
17788                                           ! Register BX used in function biosfn_set_cursor_pos
17789                                           ! 1953 Bit8u page;Bit16u *shape;Bit16u *pos;
17790                       0000435C            _biosfn_get_cursor_pos:
17791                                           !BCC_EOS
17792                                           !BCC_EOS
17793                                           !BCC_EOS
17794                                           ! 1954 {
17795                                           ! 1955  Bit16u ss=get_SS();
17796 435C           55                         push	bp
17797 435D           89E5                       mov	bp,sp
17798 435F           4C                         dec	sp
17799 4360           4C                         dec	sp
17800                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
17801 4361           E8         3871            call	_get_SS
17802                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
17803 4364           8946         FE            mov	-2[bp],ax
17804                                           !BCC_EOS
17805                                           ! 1956  write_word(ss, shape, 0);
17806                                           ! Debug: list int = const 0 (used reg = )
17807 4367           31C0                       xor	ax,ax
17808 4369           50                         push	ax
17809                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17810 436A           FF76         06            push	6[bp]
17811                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17812 436D           FF76         FE            push	-2[bp]
17813                                           ! Debug: func () void = write_word+0 (used reg = )
17814 4370           E8         3814            call	_write_word
17815 4373           83C4                   06  add	sp,*6
17816                                           !BCC_EOS
17817                                           ! 1957  write_word(ss, pos, 0);
17818                                           ! Debug: list int = const 0 (used reg = )
17819 4376           31C0                       xor	ax,ax
17820 4378           50                         push	ax
17821                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17822 4379           FF76         08            push	8[bp]
17823                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17824 437C           FF76         FE            push	-2[bp]
17825                                           ! Debug: func () void = write_word+0 (used reg = )
17826 437F           E8         3805            call	_write_word
17827 4382           83C4                   06  add	sp,*6
17828                                           !BCC_EOS
17829                                           ! 1958  if(page>7)return;
17830                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
17831 4385           8A46         04            mov	al,4[bp]
17832 4388           3C                     07  cmp	al,*7
17833 438A           76           04            jbe 	.94
17834                       0000438C            .95:
17835 438C           89EC                       mov	sp,bp
17836 438E           5D                         pop	bp
17837 438F           C3                         ret
17838                                           !BCC_EOS
17839                                           ! 1959  write_word(ss,shape,read_word(0x40,0x60));
17840                       00004390            .94:
17841                                           ! Debug: list int = const $60 (used reg = )
17842 4390           B8                   0060  mov	ax,*$60
17843 4393           50                         push	ax
17844                                           ! Debug: list int = const $40 (used reg = )
17845 4394           B8                   0040  mov	ax,*$40
17846 4397           50                         push	ax
17847                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17848 4398           E8         37C1            call	_read_word
17849 439B           83C4                   04  add	sp,*4
17850                                           ! Debug: list unsigned short = ax+0 (used reg = )
17851 439E           50                         push	ax
17852                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17853 439F           FF76         06            push	6[bp]
17854                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17855 43A2           FF76         FE            push	-2[bp]
17856                                           ! Debug: func () void = write_word+0 (used reg = )
17857 43A5           E8         37DF            call	_write_word
17858 43A8           83C4                   06  add	sp,*6
17859                                           !BCC_EOS
17860                                           ! 1960  write_word(ss,pos,read_word(0x40,0x50 +page*2));
17861                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
17862 43AB           8A46         04            mov	al,4[bp]
17863 43AE           30E4                       xor	ah,ah
17864 43B0           D1E0                       shl	ax,*1
17865                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17866                                           ! Debug: expression subtree swapping
17867                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17868 43B2           05                   0050  add	ax,*$50
17869 43B5           50                         push	ax
17870                                           ! Debug: list int = const $40 (used reg = )
17871 43B6           B8                   0040  mov	ax,*$40
17872 43B9           50                         push	ax
17873                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17874 43BA           E8         379F            call	_read_word
17875 43BD           83C4                   04  add	sp,*4
17876                                           ! Debug: list unsigned short = ax+0 (used reg = )
17877 43C0           50                         push	ax
17878                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17879 43C1           FF76         08            push	8[bp]
17880                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17881 43C4           FF76         FE            push	-2[bp]
17882                                           ! Debug: func () void = write_word+0 (used reg = )
17883 43C7           E8         37BD            call	_write_word
17884 43CA           83C4                   06  add	sp,*6
17885                                           !BCC_EOS
17886                                           ! 1961 }
17887 43CD           89EC                       mov	sp,bp
17888 43CF           5D                         pop	bp
17889 43D0           C3                         ret
17890                                           ! 1962 static void biosfn_set_active_page (page)
17891                                           ! 1963 Bit8u page;
17892                       000043D1            _biosfn_set_active_page:
17893                                           !BCC_EOS
17894                                           ! 1964 {
17895                                           ! 1965  Bit16u cursor,dummy,crtc_addr;
17896                                           !BCC_EOS
17897                                           ! 1966  Bit16u nbcols,nbrows,address;
17898                                           !BCC_EOS
17899                                           ! 1967  Bit8u mode,
17900                                           ! 1967 line;
17901                                           !BCC_EOS
17902                                           ! 1968  if(page>7)return;
17903 43D1           55                         push	bp
17904 43D2           89E5                       mov	bp,sp
17905 43D4           83C4                   F2  add	sp,*-$E
17906                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
17907 43D7           8A46         04            mov	al,4[bp]
17908 43DA           3C                     07  cmp	al,*7
17909 43DC           76           04            jbe 	.96
17910                       000043DE            .97:
17911 43DE           89EC                       mov	sp,bp
17912 43E0           5D                         pop	bp
17913 43E1           C3                         ret
17914                                           !BCC_EOS
17915                                           ! 1969  mode=read_byte(0x40,0x49);
17916                       000043E2            .96:
17917                                           ! Debug: list int = const $49 (used reg = )
17918 43E2           B8                   0049  mov	ax,*$49
17919 43E5           50                         push	ax
17920                                           ! Debug: list int = const $40 (used reg = )
17921 43E6           B8                   0040  mov	ax,*$40
17922 43E9           50                         push	ax
17923                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17924 43EA           E8         375C            call	_read_byte
17925 43ED           83C4                   04  add	sp,*4
17926                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
17927 43F0           8846         F3            mov	-$D[bp],al
17928                                           !BCC_EOS
17929                                           ! 1970  line=find_vga_entry(mode);
17930                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
17931 43F3           8A46         F3            mov	al,-$D[bp]
17932 43F6           30E4                       xor	ah,ah
17933 43F8           50                         push	ax
17934                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
17935 43F9           E8         3661            call	_find_vga_entry
17936 43FC           44                         inc	sp
17937 43FD           44                         inc	sp
17938                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
17939 43FE           8846         F2            mov	-$E[bp],al
17940                                           !BCC_EOS
17941                                           ! 1971  if(line==0xFF)return;
17942                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
17943 4401           8A46         F2            mov	al,-$E[bp]
17944 4404           3C                     FF  cmp	al,#$FF
17945 4406           75           04            jne 	.98
17946                       00004408            .99:
17947 4408           89EC                       mov	sp,bp
17948 440A           5D                         pop	bp
17949 440B           C3                         ret
17950                                           !BCC_EOS
17951                                           ! 1972  biosfn_get_cursor_pos(page,&dummy,&cursor);
17952                       0000440C            .98:
17953                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
17954 440C           8D5E         FE            lea	bx,-2[bp]
17955 440F           53                         push	bx
17956                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
17957 4410           8D5E         FC            lea	bx,-4[bp]
17958 4413           53                         push	bx
17959                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
17960 4414           8A46         04            mov	al,4[bp]
17961 4417           30E4                       xor	ah,ah
17962 4419           50                         push	ax
17963                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
17964 441A           E8         FF3F            call	_biosfn_get_cursor_pos
17965 441D           83C4                   06  add	sp,*6
17966                                           !BCC_EOS
17967                                           ! 1973  if(vga_modes[line].class==0x00)
17968                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
17969 4420           8A46         F2            mov	al,-$E[bp]
17970 4423           30E4                       xor	ah,ah
17971 4425           B1                     03  mov	cl,*3
17972 4427           D3E0                       shl	ax,cl
17973 4429           89C3                       mov	bx,ax
17974 442B           81C3                 01C3  add	bx,#_vga_modes
17975                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17976 442F           8A47         01            mov	al,1[bx]
17977 4432           84C0                       test	al,al
17978 4434           75           6E            jne 	.9A
17979                       00004436            .9B:
17980                                           ! 1974   {
17981                                           ! 1975    nbcols=read_word(0x40,0x4A);
17982                                           ! Debug: list int = const $4A (used reg = )
17983 4436           B8                   004A  mov	ax,*$4A
17984 4439           50                         push	ax
17985                                           ! Debug: list int = const $40 (used reg = )
17986 443A           B8                   0040  mov	ax,*$40
17987 443D           50                         push	ax
17988                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17989 443E           E8         371B            call	_read_word
17990 4441           83C4                   04  add	sp,*4
17991                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
17992 4444           8946         F8            mov	-8[bp],ax
17993                                           !BCC_EOS
17994                                           ! 1976    nbrows=read_byte(0x40,0x84)+1;
17995                                           ! Debug: list int = const $84 (used reg = )
17996 4447           B8                   0084  mov	ax,#$84
17997 444A           50                         push	ax
17998                                           ! Debug: list int = const $40 (used reg = )
17999 444B           B8                   0040  mov	ax,*$40
18000 444E           50                         push	ax
18001                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18002 444F           E8         36F7            call	_read_byte
18003 4452           83C4                   04  add	sp,*4
18004                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18005 4455           30E4                       xor	ah,ah
18006                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18007 4457           40                         inc	ax
18008 4458           8946         F6            mov	-$A[bp],ax
18009                                           !BCC_EOS
18010                                           ! 1977    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18011                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18012 445B           8B46         F8            mov	ax,-8[bp]
18013 445E           8B4E         F6            mov	cx,-$A[bp]
18014 4461           F7E9                       imul	cx
18015                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18016 4463           D1E0                       shl	ax,*1
18017                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18018 4465           0C                     FF  or	al,#$FF
18019                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18020                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18021 4467           89C3                       mov	bx,ax
18022 4469           8A46         04            mov	al,4[bp]
18023 446C           30E4                       xor	ah,ah
18024 446E           93                         xchg	ax,bx
18025 446F           40                         inc	ax
18026 4470           89D9                       mov	cx,bx
18027 4472           F7E9                       imul	cx
18028                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18029 4474           8946         F4            mov	-$C[bp],ax
18030                                           !BCC_EOS
18031                                           ! 1978    write_word(0x40,0x4E,address);
18032                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18033 4477           FF76         F4            push	-$C[bp]
18034                                           ! Debug: list int = const $4E (used reg = )
18035 447A           B8                   004E  mov	ax,*$4E
18036 447D           50                         push	ax
18037                                           ! Debug: list int = const $40 (used reg = )
18038 447E           B8                   0040  mov	ax,*$40
18039 4481           50                         push	ax
18040                                           ! Debug: func () void = write_word+0 (used reg = )
18041 4482           E8         3702            call	_write_word
18042 4485           83C4                   06  add	sp,*6
18043                                           !BCC_EOS
18044                                           ! 1979    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18045                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18046 4488           8B46         F8            mov	ax,-8[bp]
18047 448B           8B4E         F6            mov	cx,-$A[bp]
18048 448E           F7E9                       imul	cx
18049                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18050 4490           0C                     FF  or	al,#$FF
18051                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18052                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18053 4492           89C3                       mov	bx,ax
18054 4494           8A46         04            mov	al,4[bp]
18055 4497           30E4                       xor	ah,ah
18056 4499           93                         xchg	ax,bx
18057 449A           40                         inc	ax
18058 449B           89D9                       mov	cx,bx
18059 449D           F7E9                       imul	cx
18060                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18061 449F           8946         F4            mov	-$C[bp],ax
18062                                           !BCC_EOS
18063                                           ! 1980   }
18064                                           ! 1981  else
18065                                           ! 1982   {
18066 44A2           EB           24            jmp .9C
18067                       000044A4            .9A:
18068                                           ! 1983    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18069                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18070 44A4           8A46         F2            mov	al,-$E[bp]
18071 44A7           30E4                       xor	ah,ah
18072 44A9           89C3                       mov	bx,ax
18073                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18074 44AB           8A87       0243            mov	al,_line_to_vpti[bx]
18075 44AF           30E4                       xor	ah,ah
18076 44B1           B1                     06  mov	cl,*6
18077 44B3           D3E0                       shl	ax,cl
18078 44B5           89C3                       mov	bx,ax
18079 44B7           81C3                 0257  add	bx,#_video_param_table
18080                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18081                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18082                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18083 44BB           8A46         04            mov	al,4[bp]
18084 44BE           30E4                       xor	ah,ah
18085 44C0           8B4F         03            mov	cx,3[bx]
18086 44C3           F7E9                       imul	cx
18087                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18088 44C5           8946         F4            mov	-$C[bp],ax
18089                                           !BCC_EOS
18090                                           ! 1984   }
18091                                           ! 1985  crtc_addr=read_word(0x40,0x63);
18092                       000044C8            .9C:
18093                                           ! Debug: list int = const $63 (used reg = )
18094 44C8           B8                   0063  mov	ax,*$63
18095 44CB           50                         push	ax
18096                                           ! Debug: list int = const $40 (used reg = )
18097 44CC           B8                   0040  mov	ax,*$40
18098 44CF           50                         push	ax
18099                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18100 44D0           E8         3689            call	_read_word
18101 44D3           83C4                   04  add	sp,*4
18102                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18103 44D6           8946         FA            mov	-6[bp],ax
18104                                           !BCC_EOS
18105                                           ! 1986  outb(crtc_addr,0x0c);
18106                                           ! Debug: list int = const $C (used reg = )
18107 44D9           B8                   000C  mov	ax,*$C
18108 44DC           50                         push	ax
18109                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18110 44DD           FF76         FA            push	-6[bp]
18111                                           ! Debug: func () void = outb+0 (used reg = )
18112 44E0           E8         36D2            call	_outb
18113 44E3           83C4                   04  add	sp,*4
18114                                           !BCC_EOS
18115                                           ! 1987  outb(crtc_addr+1,(address&0xff00)>>8);
18116                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18117 44E6           8B46         F4            mov	ax,-$C[bp]
18118 44E9           30C0                       xor	al,al
18119                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18120 44EB           88E0                       mov	al,ah
18121 44ED           30E4                       xor	ah,ah
18122                                           ! Debug: list unsigned int = ax+0 (used reg = )
18123 44EF           50                         push	ax
18124                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18125 44F0           8B46         FA            mov	ax,-6[bp]
18126                                           ! Debug: list unsigned int = ax+1 (used reg = )
18127 44F3           40                         inc	ax
18128 44F4           50                         push	ax
18129                                           ! Debug: func () void = outb+0 (used reg = )
18130 44F5           E8         36BD            call	_outb
18131 44F8           83C4                   04  add	sp,*4
18132                                           !BCC_EOS
18133                                           ! 1988  outb(crtc_addr,0x0d);
18134                                           ! Debug: list int = const $D (used reg = )
18135 44FB           B8                   000D  mov	ax,*$D
18136 44FE           50                         push	ax
18137                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18138 44FF           FF76         FA            push	-6[bp]
18139                                           ! Debug: func () void = outb+0 (used reg = )
18140 4502           E8         36B0            call	_outb
18141 4505           83C4                   04  add	sp,*4
18142                                           !BCC_EOS
18143                                           ! 1989  outb(crtc_addr+1,address&0x00ff);
18144                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18145 4508           8A46         F4            mov	al,-$C[bp]
18146                                           ! Debug: list unsigned char = al+0 (used reg = )
18147 450B           30E4                       xor	ah,ah
18148 450D           50                         push	ax
18149                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18150 450E           8B46         FA            mov	ax,-6[bp]
18151                                           ! Debug: list unsigned int = ax+1 (used reg = )
18152 4511           40                         inc	ax
18153 4512           50                         push	ax
18154                                           ! Debug: func () void = outb+0 (used reg = )
18155 4513           E8         369F            call	_outb
18156 4516           83C4                   04  add	sp,*4
18157                                           !BCC_EOS
18158                                           ! 1990  write_byte(0x40,0x62,page);
18159                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18160 4519           8A46         04            mov	al,4[bp]
18161 451C           30E4                       xor	ah,ah
18162 451E           50                         push	ax
18163                                           ! Debug: list int = const $62 (used reg = )
18164 451F           B8                   0062  mov	ax,*$62
18165 4522           50                         push	ax
18166                                           ! Debug: list int = const $40 (used reg = )
18167 4523           B8                   0040  mov	ax,*$40
18168 4526           50                         push	ax
18169                                           ! Debug: func () void = write_byte+0 (used reg = )
18170 4527           E8         3645            call	_write_byte
18171 452A           83C4                   06  add	sp,*6
18172                                           !BCC_EOS
18173                                           ! 1991  biosfn_set_cursor_pos(page,cursor);
18174                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18175 452D           FF76         FE            push	-2[bp]
18176                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18177 4530           8A46         04            mov	al,4[bp]
18178 4533           30E4                       xor	ah,ah
18179 4535           50                         push	ax
18180                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18181 4536           E8         FD22            call	_biosfn_set_cursor_pos
18182 4539           83C4                   04  add	sp,*4
18183                                           !BCC_EOS
18184                                           ! 1992 }
18185 453C           89EC                       mov	sp,bp
18186 453E           5D                         pop	bp
18187 453F           C3                         ret
18188                                           ! 1993 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18189                                           ! Register BX used in function biosfn_set_active_page
18190                                           ! 1994 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18191                       00004540            _vgamem_copy_pl4:
18192                                           !BCC_EOS
18193                                           !BCC_EOS
18194                                           !BCC_EOS
18195                                           !BCC_EOS
18196                                           !BCC_EOS
18197                                           !BCC_EOS
18198                                           ! 1995 {
18199                                           ! 1996  Bit16u src,dest;
18200                                           !BCC_EOS
18201                                           ! 1997  Bit8u i;
18202                                           !BCC_EOS
18203                                           ! 1998  src=ysrc*cheight*nbcols+xstart;
18204 4540           55                         push	bp
18205 4541           89E5                       mov	bp,sp
18206 4543           83C4                   FA  add	sp,*-6
18207                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18208 4546           8A46         0E            mov	al,$E[bp]
18209 4549           30E4                       xor	ah,ah
18210 454B           89C3                       mov	bx,ax
18211 454D           8A46         06            mov	al,6[bp]
18212 4550           30E4                       xor	ah,ah
18213 4552           89D9                       mov	cx,bx
18214 4554           F7E9                       imul	cx
18215                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18216 4556           89C3                       mov	bx,ax
18217 4558           8A46         0C            mov	al,$C[bp]
18218 455B           30E4                       xor	ah,ah
18219 455D           93                         xchg	ax,bx
18220 455E           89D9                       mov	cx,bx
18221 4560           F7E9                       imul	cx
18222                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18223 4562           0246         04            add	al,4[bp]
18224 4565           80D4                   00  adc	ah,*0
18225                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18226 4568           8946         FE            mov	-2[bp],ax
18227                                           !BCC_EOS
18228                                           ! 1999  dest=ydest*cheight*nbcols+xstart;
18229                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18230 456B           8A46         0E            mov	al,$E[bp]
18231 456E           30E4                       xor	ah,ah
18232 4570           89C3                       mov	bx,ax
18233 4572           8A46         08            mov	al,8[bp]
18234 4575           30E4                       xor	ah,ah
18235 4577           89D9                       mov	cx,bx
18236 4579           F7E9                       imul	cx
18237                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18238 457B           89C3                       mov	bx,ax
18239 457D           8A46         0C            mov	al,$C[bp]
18240 4580           30E4                       xor	ah,ah
18241 4582           93                         xchg	ax,bx
18242 4583           89D9                       mov	cx,bx
18243 4585           F7E9                       imul	cx
18244                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18245 4587           0246         04            add	al,4[bp]
18246 458A           80D4                   00  adc	ah,*0
18247                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18248 458D           8946         FC            mov	-4[bp],ax
18249                                           !BCC_EOS
18250                                           ! 2000  outw(0x3ce, 0x0105);
18251                                           ! Debug: list int = const $105 (used reg = )
18252 4590           B8                   0105  mov	ax,#$105
18253 4593           50                         push	ax
18254                                           ! Debug: list int = const $3CE (used reg = )
18255 4594           B8                   03CE  mov	ax,#$3CE
18256 4597           50                         push	ax
18257                                           ! Debug: func () void = outw+0 (used reg = )
18258 4598           E8         362A            call	_outw
18259 459B           83C4                   04  add	sp,*4
18260                                           !BCC_EOS
18261                                           ! 2001  for(i=0;i<cheight;i++)
18262                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18263 459E           30C0                       xor	al,al
18264 45A0           8846         FB            mov	-5[bp],al
18265                                           !BCC_EOS
18266                                           !BCC_EOS
18267                                           ! 2002   {
18268 45A3           EB           43            jmp .9F
18269                       000045A5            .A0:
18270                                           ! 2003    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18271                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18272 45A5           8A46         0A            mov	al,$A[bp]
18273 45A8           30E4                       xor	ah,ah
18274 45AA           50                         push	ax
18275                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18276 45AB           8A46         0C            mov	al,$C[bp]
18277 45AE           30E4                       xor	ah,ah
18278 45B0           89C3                       mov	bx,ax
18279 45B2           8A46         FB            mov	al,-5[bp]
18280 45B5           30E4                       xor	ah,ah
18281 45B7           89D9                       mov	cx,bx
18282 45B9           F7E9                       imul	cx
18283                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18284                                           ! Debug: expression subtree swapping
18285 45BB           0346         FE            add	ax,-2[bp]
18286                                           ! Debug: list unsigned int = ax+0 (used reg = )
18287 45BE           50                         push	ax
18288                                           ! Debug: list unsigned int = const $A000 (used reg = )
18289 45BF           B8                   A000  mov	ax,#$A000
18290 45C2           50                         push	ax
18291                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18292 45C3           8A46         0C            mov	al,$C[bp]
18293 45C6           30E4                       xor	ah,ah
18294 45C8           89C3                       mov	bx,ax
18295 45CA           8A46         FB            mov	al,-5[bp]
18296 45CD           30E4                       xor	ah,ah
18297 45CF           89D9                       mov	cx,bx
18298 45D1           F7E9                       imul	cx
18299                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18300                                           ! Debug: expression subtree swapping
18301 45D3           0346         FC            add	ax,-4[bp]
18302                                           ! Debug: list unsigned int = ax+0 (used reg = )
18303 45D6           50                         push	ax
18304                                           ! Debug: list unsigned int = const $A000 (used reg = )
18305 45D7           B8                   A000  mov	ax,#$A000
18306 45DA           50                         push	ax
18307                                           ! Debug: func () void = memcpyb+0 (used reg = )
18308 45DB           E8         350B            call	_memcpyb
18309 45DE           83C4                   0A  add	sp,*$A
18310                                           !BCC_EOS
18311                                           ! 2004   }
18312                                           ! 2005  outw(0x3ce, 0x0005);
18313                       000045E1            .9E:
18314                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18315 45E1           8A46         FB            mov	al,-5[bp]
18316 45E4           40                         inc	ax
18317 45E5           8846         FB            mov	-5[bp],al
18318                       000045E8            .9F:
18319                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18320 45E8           8A46         FB            mov	al,-5[bp]
18321 45EB           3A46         0E            cmp	al,$E[bp]
18322 45EE           72           B5            jb 	.A0
18323                       000045F0            .A1:
18324                       000045F0            .9D:
18325                                           ! Debug: list int = const 5 (used reg = )
18326 45F0           B8                   0005  mov	ax,*5
18327 45F3           50                         push	ax
18328                                           ! Debug: list int = const $3CE (used reg = )
18329 45F4           B8                   03CE  mov	ax,#$3CE
18330 45F7           50                         push	ax
18331                                           ! Debug: func () void = outw+0 (used reg = )
18332 45F8           E8         35CA            call	_outw
18333 45FB           83C4                   04  add	sp,*4
18334                                           !BCC_EOS
18335                                           ! 2006 }
18336 45FE           89EC                       mov	sp,bp
18337 4600           5D                         pop	bp
18338 4601           C3                         ret
18339                                           ! 2007 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18340                                           ! Register BX used in function vgamem_copy_pl4
18341                                           ! 2008 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18342                       00004602            _vgamem_fill_pl4:
18343                                           !BCC_EOS
18344                                           !BCC_EOS
18345                                           !BCC_EOS
18346                                           !BCC_EOS
18347                                           !BCC_EOS
18348                                           !BCC_EOS
18349                                           ! 2009 {
18350                                           ! 2010  Bit16u dest;
18351                                           !BCC_EOS
18352                                           ! 2011  Bit8u i;
18353                                           !BCC_EOS
18354                                           ! 2012  dest=ystart*cheight*nbcols+xstart;
18355 4602           55                         push	bp
18356 4603           89E5                       mov	bp,sp
18357 4605           83C4                   FC  add	sp,*-4
18358                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18359 4608           8A46         0C            mov	al,$C[bp]
18360 460B           30E4                       xor	ah,ah
18361 460D           89C3                       mov	bx,ax
18362 460F           8A46         06            mov	al,6[bp]
18363 4612           30E4                       xor	ah,ah
18364 4614           89D9                       mov	cx,bx
18365 4616           F7E9                       imul	cx
18366                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18367 4618           89C3                       mov	bx,ax
18368 461A           8A46         0A            mov	al,$A[bp]
18369 461D           30E4                       xor	ah,ah
18370 461F           93                         xchg	ax,bx
18371 4620           89D9                       mov	cx,bx
18372 4622           F7E9                       imul	cx
18373                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18374 4624           0246         04            add	al,4[bp]
18375 4627           80D4                   00  adc	ah,*0
18376                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18377 462A           8946         FE            mov	-2[bp],ax
18378                                           !BCC_EOS
18379                                           ! 2013  outw(0x3ce, 0x0205);
18380                                           ! Debug: list int = const $205 (used reg = )
18381 462D           B8                   0205  mov	ax,#$205
18382 4630           50                         push	ax
18383                                           ! Debug: list int = const $3CE (used reg = )
18384 4631           B8                   03CE  mov	ax,#$3CE
18385 4634           50                         push	ax
18386                                           ! Debug: func () void = outw+0 (used reg = )
18387 4635           E8         358D            call	_outw
18388 4638           83C4                   04  add	sp,*4
18389                                           !BCC_EOS
18390                                           ! 2014  for(i=0;i<cheight;i++)
18391                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18392 463B           30C0                       xor	al,al
18393 463D           8846         FD            mov	-3[bp],al
18394                                           !BCC_EOS
18395                                           !BCC_EOS
18396                                           ! 2015   {
18397 4640           EB           31            jmp .A4
18398                       00004642            .A5:
18399                                           ! 2016    memsetb(0xa000,dest+i*nbcols,attr,cols);
18400                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18401 4642           8A46         08            mov	al,8[bp]
18402 4645           30E4                       xor	ah,ah
18403 4647           50                         push	ax
18404                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18405 4648           8A46         0E            mov	al,$E[bp]
18406 464B           30E4                       xor	ah,ah
18407 464D           50                         push	ax
18408                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18409 464E           8A46         0A            mov	al,$A[bp]
18410 4651           30E4                       xor	ah,ah
18411 4653           89C3                       mov	bx,ax
18412 4655           8A46         FD            mov	al,-3[bp]
18413 4658           30E4                       xor	ah,ah
18414 465A           89D9                       mov	cx,bx
18415 465C           F7E9                       imul	cx
18416                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18417                                           ! Debug: expression subtree swapping
18418 465E           0346         FE            add	ax,-2[bp]
18419                                           ! Debug: list unsigned int = ax+0 (used reg = )
18420 4661           50                         push	ax
18421                                           ! Debug: list unsigned int = const $A000 (used reg = )
18422 4662           B8                   A000  mov	ax,#$A000
18423 4665           50                         push	ax
18424                                           ! Debug: func () void = memsetb+0 (used reg = )
18425 4666           E8         3436            call	_memsetb
18426 4669           83C4                   08  add	sp,*8
18427                                           !BCC_EOS
18428                                           ! 2017   }
18429                                           ! 2018  outw(0x3ce, 0x0005);
18430                       0000466C            .A3:
18431                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18432 466C           8A46         FD            mov	al,-3[bp]
18433 466F           40                         inc	ax
18434 4670           8846         FD            mov	-3[bp],al
18435                       00004673            .A4:
18436                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18437 4673           8A46         FD            mov	al,-3[bp]
18438 4676           3A46         0C            cmp	al,$C[bp]
18439 4679           72           C7            jb 	.A5
18440                       0000467B            .A6:
18441                       0000467B            .A2:
18442                                           ! Debug: list int = const 5 (used reg = )
18443 467B           B8                   0005  mov	ax,*5
18444 467E           50                         push	ax
18445                                           ! Debug: list int = const $3CE (used reg = )
18446 467F           B8                   03CE  mov	ax,#$3CE
18447 4682           50                         push	ax
18448                                           ! Debug: func () void = outw+0 (used reg = )
18449 4683           E8         353F            call	_outw
18450 4686           83C4                   04  add	sp,*4
18451                                           !BCC_EOS
18452                                           ! 2019 }
18453 4689           89EC                       mov	sp,bp
18454 468B           5D                         pop	bp
18455 468C           C3                         ret
18456                                           ! 2020 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18457                                           ! Register BX used in function vgamem_fill_pl4
18458                                           ! 2021 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18459                       0000468D            _vgamem_copy_cga:
18460                                           !BCC_EOS
18461                                           !BCC_EOS
18462                                           !BCC_EOS
18463                                           !BCC_EOS
18464                                           !BCC_EOS
18465                                           !BCC_EOS
18466                                           ! 2022 {
18467                                           ! 2023  Bit16u src,dest;
18468                                           !BCC_EOS
18469                                           ! 2024  Bit8u i;
18470                                           !BCC_EOS
18471                                           ! 2025  src=((ysrc*cheight*nbcols)>>1)+xstart;
18472 468D           55                         push	bp
18473 468E           89E5                       mov	bp,sp
18474 4690           83C4                   FA  add	sp,*-6
18475                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18476 4693           8A46         0E            mov	al,$E[bp]
18477 4696           30E4                       xor	ah,ah
18478 4698           89C3                       mov	bx,ax
18479 469A           8A46         06            mov	al,6[bp]
18480 469D           30E4                       xor	ah,ah
18481 469F           89D9                       mov	cx,bx
18482 46A1           F7E9                       imul	cx
18483                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18484 46A3           89C3                       mov	bx,ax
18485 46A5           8A46         0C            mov	al,$C[bp]
18486 46A8           30E4                       xor	ah,ah
18487 46AA           93                         xchg	ax,bx
18488 46AB           89D9                       mov	cx,bx
18489 46AD           F7E9                       imul	cx
18490                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18491 46AF           D1E8                       shr	ax,*1
18492                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18493 46B1           0246         04            add	al,4[bp]
18494 46B4           80D4                   00  adc	ah,*0
18495                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18496 46B7           8946         FE            mov	-2[bp],ax
18497                                           !BCC_EOS
18498                                           ! 2026  dest=((ydest*cheight*nbcols)>>1)+xstart;
18499                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18500 46BA           8A46         0E            mov	al,$E[bp]
18501 46BD           30E4                       xor	ah,ah
18502 46BF           89C3                       mov	bx,ax
18503 46C1           8A46         08            mov	al,8[bp]
18504 46C4           30E4                       xor	ah,ah
18505 46C6           89D9                       mov	cx,bx
18506 46C8           F7E9                       imul	cx
18507                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18508 46CA           89C3                       mov	bx,ax
18509 46CC           8A46         0C            mov	al,$C[bp]
18510 46CF           30E4                       xor	ah,ah
18511 46D1           93                         xchg	ax,bx
18512 46D2           89D9                       mov	cx,bx
18513 46D4           F7E9                       imul	cx
18514                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18515 46D6           D1E8                       shr	ax,*1
18516                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18517 46D8           0246         04            add	al,4[bp]
18518 46DB           80D4                   00  adc	ah,*0
18519                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18520 46DE           8946         FC            mov	-4[bp],ax
18521                                           !BCC_EOS
18522                                           ! 2027  for(i=0;i<cheight;i++)
18523                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18524 46E1           30C0                       xor	al,al
18525 46E3           8846         FB            mov	-5[bp],al
18526                                           !BCC_EOS
18527                                           !BCC_EOS
18528                                           ! 2028   {
18529 46E6           E9         00A8            br 	.A9
18530                       000046E9            .AA:
18531                                           ! 2029    if (i & 1)
18532                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
18533 46E9           8A46         FB            mov	al,-5[bp]
18534 46EC           24                     01  and	al,*1
18535 46EE           84C0                       test	al,al
18536 46F0           74           56            je  	.AB
18537                       000046F2            .AC:
18538                                           ! 2030      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
18539                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18540 46F2           8A46         0A            mov	al,$A[bp]
18541 46F5           30E4                       xor	ah,ah
18542 46F7           50                         push	ax
18543                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18544 46F8           8A46         FB            mov	al,-5[bp]
18545 46FB           30E4                       xor	ah,ah
18546 46FD           D1E8                       shr	ax,*1
18547                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18548 46FF           89C3                       mov	bx,ax
18549 4701           8A46         0C            mov	al,$C[bp]
18550 4704           30E4                       xor	ah,ah
18551 4706           93                         xchg	ax,bx
18552 4707           89D9                       mov	cx,bx
18553 4709           F7E9                       imul	cx
18554 470B           50                         push	ax
18555                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
18556                                           ! Debug: expression subtree swapping
18557 470C           8B46         FE            mov	ax,-2[bp]
18558                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18559 470F           05                   2000  add	ax,#$2000
18560 4712           0346         F6            add	ax,-$A[bp]
18561 4715           44                         inc	sp
18562 4716           44                         inc	sp
18563                                           ! Debug: list unsigned int = ax+0 (used reg = )
18564 4717           50                         push	ax
18565                                           ! Debug: list unsigned int = const $B800 (used reg = )
18566 4718           B8                   B800  mov	ax,#$B800
18567 471B           50                         push	ax
18568                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18569 471C           8A46         FB            mov	al,-5[bp]
18570 471F           30E4                       xor	ah,ah
18571 4721           D1E8                       shr	ax,*1
18572                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18573 4723           89C3                       mov	bx,ax
18574 4725           8A46         0C            mov	al,$C[bp]
18575 4728           30E4                       xor	ah,ah
18576 472A           93                         xchg	ax,bx
18577 472B           89D9                       mov	cx,bx
18578 472D           F7E9                       imul	cx
18579 472F           50                         push	ax
18580                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
18581                                           ! Debug: expression subtree swapping
18582 4730           8B46         FC            mov	ax,-4[bp]
18583                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
18584 4733           05                   2000  add	ax,#$2000
18585 4736           0346         F2            add	ax,-$E[bp]
18586 4739           44                         inc	sp
18587 473A           44                         inc	sp
18588                                           ! Debug: list unsigned int = ax+0 (used reg = )
18589 473B           50                         push	ax
18590                                           ! Debug: list unsigned int = const $B800 (used reg = )
18591 473C           B8                   B800  mov	ax,#$B800
18592 473F           50                         push	ax
18593                                           ! Debug: func () void = memcpyb+0 (used reg = )
18594 4740           E8         33A6            call	_memcpyb
18595 4743           83C4                   0A  add	sp,*$A
18596                                           !BCC_EOS
18597                                           ! 2031    else
18598                                           ! 2032      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
18599 4746           EB           42            jmp .AD
18600                       00004748            .AB:
18601                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18602 4748           8A46         0A            mov	al,$A[bp]
18603 474B           30E4                       xor	ah,ah
18604 474D           50                         push	ax
18605                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18606 474E           8A46         FB            mov	al,-5[bp]
18607 4751           30E4                       xor	ah,ah
18608 4753           D1E8                       shr	ax,*1
18609                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18610 4755           89C3                       mov	bx,ax
18611 4757           8A46         0C            mov	al,$C[bp]
18612 475A           30E4                       xor	ah,ah
18613 475C           93                         xchg	ax,bx
18614 475D           89D9                       mov	cx,bx
18615 475F           F7E9                       imul	cx
18616                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18617                                           ! Debug: expression subtree swapping
18618 4761           0346         FE            add	ax,-2[bp]
18619                                           ! Debug: list unsigned int = ax+0 (used reg = )
18620 4764           50                         push	ax
18621                                           ! Debug: list unsigned int = const $B800 (used reg = )
18622 4765           B8                   B800  mov	ax,#$B800
18623 4768           50                         push	ax
18624                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18625 4769           8A46         FB            mov	al,-5[bp]
18626 476C           30E4                       xor	ah,ah
18627 476E           D1E8                       shr	ax,*1
18628                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18629 4770           89C3                       mov	bx,ax
18630 4772           8A46         0C            mov	al,$C[bp]
18631 4775           30E4                       xor	ah,ah
18632 4777           93                         xchg	ax,bx
18633 4778           89D9                       mov	cx,bx
18634 477A           F7E9                       imul	cx
18635                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18636                                           ! Debug: expression subtree swapping
18637 477C           0346         FC            add	ax,-4[bp]
18638                                           ! Debug: list unsigned int = ax+0 (used reg = )
18639 477F           50                         push	ax
18640                                           ! Debug: list unsigned int = const $B800 (used reg = )
18641 4780           B8                   B800  mov	ax,#$B800
18642 4783           50                         push	ax
18643                                           ! Debug: func () void = memcpyb+0 (used reg = )
18644 4784           E8         3362            call	_memcpyb
18645 4787           83C4                   0A  add	sp,*$A
18646                                           !BCC_EOS
18647                                           ! 2033   }
18648                       0000478A            .AD:
18649                                           ! 2034 }
18650                       0000478A            .A8:
18651                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18652 478A           8A46         FB            mov	al,-5[bp]
18653 478D           40                         inc	ax
18654 478E           8846         FB            mov	-5[bp],al
18655                       00004791            .A9:
18656                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18657 4791           8A46         FB            mov	al,-5[bp]
18658 4794           3A46         0E            cmp	al,$E[bp]
18659 4797   7303    E9         FF4D            blo 	.AA
18660                       0000479C            .AE:
18661                       0000479C            .A7:
18662 479C           89EC                       mov	sp,bp
18663 479E           5D                         pop	bp
18664 479F           C3                         ret
18665                                           ! 2035 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
18666                                           ! Register BX used in function vgamem_copy_cga
18667                                           ! 2036 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18668                       000047A0            _vgamem_fill_cga:
18669                                           !BCC_EOS
18670                                           !BCC_EOS
18671                                           !BCC_EOS
18672                                           !BCC_EOS
18673                                           !BCC_EOS
18674                                           !BCC_EOS
18675                                           ! 2037 {
18676                                           ! 2038  Bit16u dest;
18677                                           !BCC_EOS
18678                                           ! 2039  Bit8u i;
18679                                           !BCC_EOS
18680                                           ! 2040 
18681                                           ! 2040  dest=((ystart*cheight*nbcols)>>1)+xstart;
18682 47A0           55                         push	bp
18683 47A1           89E5                       mov	bp,sp
18684 47A3           83C4                   FC  add	sp,*-4
18685                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18686 47A6           8A46         0C            mov	al,$C[bp]
18687 47A9           30E4                       xor	ah,ah
18688 47AB           89C3                       mov	bx,ax
18689 47AD           8A46         06            mov	al,6[bp]
18690 47B0           30E4                       xor	ah,ah
18691 47B2           89D9                       mov	cx,bx
18692 47B4           F7E9                       imul	cx
18693                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18694 47B6           89C3                       mov	bx,ax
18695 47B8           8A46         0A            mov	al,$A[bp]
18696 47BB           30E4                       xor	ah,ah
18697 47BD           93                         xchg	ax,bx
18698 47BE           89D9                       mov	cx,bx
18699 47C0           F7E9                       imul	cx
18700                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18701 47C2           D1E8                       shr	ax,*1
18702                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18703 47C4           0246         04            add	al,4[bp]
18704 47C7           80D4                   00  adc	ah,*0
18705                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18706 47CA           8946         FE            mov	-2[bp],ax
18707                                           !BCC_EOS
18708                                           ! 2041  for(i=0;i<cheight;i++)
18709                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18710 47CD           30C0                       xor	al,al
18711 47CF           8846         FD            mov	-3[bp],al
18712                                           !BCC_EOS
18713                                           !BCC_EOS
18714                                           ! 2042   {
18715 47D2           EB           75            jmp .B1
18716                       000047D4            .B2:
18717                                           ! 2043    if (i & 1)
18718                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
18719 47D4           8A46         FD            mov	al,-3[bp]
18720 47D7           24                     01  and	al,*1
18721 47D9           84C0                       test	al,al
18722 47DB           74           38            je  	.B3
18723                       000047DD            .B4:
18724                                           ! 2044      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
18725                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18726 47DD           8A46         08            mov	al,8[bp]
18727 47E0           30E4                       xor	ah,ah
18728 47E2           50                         push	ax
18729                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18730 47E3           8A46         0E            mov	al,$E[bp]
18731 47E6           30E4                       xor	ah,ah
18732 47E8           50                         push	ax
18733                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18734 47E9           8A46         FD            mov	al,-3[bp]
18735 47EC           30E4                       xor	ah,ah
18736 47EE           D1E8                       shr	ax,*1
18737                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18738 47F0           89C3                       mov	bx,ax
18739 47F2           8A46         0A            mov	al,$A[bp]
18740 47F5           30E4                       xor	ah,ah
18741 47F7           93                         xchg	ax,bx
18742 47F8           89D9                       mov	cx,bx
18743 47FA           F7E9                       imul	cx
18744 47FC           50                         push	ax
18745                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
18746                                           ! Debug: expression subtree swapping
18747 47FD           8B46         FE            mov	ax,-2[bp]
18748                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18749 4800           05                   2000  add	ax,#$2000
18750 4803           0346         F6            add	ax,-$A[bp]
18751 4806           44                         inc	sp
18752 4807           44                         inc	sp
18753                                           ! Debug: list unsigned int = ax+0 (used reg = )
18754 4808           50                         push	ax
18755                                           ! Debug: list unsigned int = const $B800 (used reg = )
18756 4809           B8                   B800  mov	ax,#$B800
18757 480C           50                         push	ax
18758                                           ! Debug: func () void = memsetb+0 (used reg = )
18759 480D           E8         328F            call	_memsetb
18760 4810           83C4                   08  add	sp,*8
18761                                           !BCC_EOS
18762                                           ! 2045    else
18763                                           ! 2046      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
18764 4813           EB           2D            jmp .B5
18765                       00004815            .B3:
18766                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18767 4815           8A46         08            mov	al,8[bp]
18768 4818           30E4                       xor	ah,ah
18769 481A           50                         push	ax
18770                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18771 481B           8A46         0E            mov	al,$E[bp]
18772 481E           30E4                       xor	ah,ah
18773 4820           50                         push	ax
18774                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18775 4821           8A46         FD            mov	al,-3[bp]
18776 4824           30E4                       xor	ah,ah
18777 4826           D1E8                       shr	ax,*1
18778                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18779 4828           89C3                       mov	bx,ax
18780 482A           8A46         0A            mov	al,$A[bp]
18781 482D           30E4                       xor	ah,ah
18782 482F           93                         xchg	ax,bx
18783 4830           89D9                       mov	cx,bx
18784 4832           F7E9                       imul	cx
18785                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18786                                           ! Debug: expression subtree swapping
18787 4834           0346         FE            add	ax,-2[bp]
18788                                           ! Debug: list unsigned int = ax+0 (used reg = )
18789 4837           50                         push	ax
18790                                           ! Debug: list unsigned int = const $B800 (used reg = )
18791 4838           B8                   B800  mov	ax,#$B800
18792 483B           50                         push	ax
18793                                           ! Debug: func () void = memsetb+0 (used reg = )
18794 483C           E8         3260            call	_memsetb
18795 483F           83C4                   08  add	sp,*8
18796                                           !BCC_EOS
18797                                           ! 2047   }
18798                       00004842            .B5:
18799                                           ! 2048 }
18800                       00004842            .B0:
18801                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18802 4842           8A46         FD            mov	al,-3[bp]
18803 4845           40                         inc	ax
18804 4846           8846         FD            mov	-3[bp],al
18805                       00004849            .B1:
18806                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18807 4849           8A46         FD            mov	al,-3[bp]
18808 484C           3A46         0C            cmp	al,$C[bp]
18809 484F           72           83            jb 	.B2
18810                       00004851            .B6:
18811                       00004851            .AF:
18812 4851           89EC                       mov	sp,bp
18813 4853           5D                         pop	bp
18814 4854           C3                         ret
18815                                           ! 2049 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
18816                                           ! Register BX used in function vgamem_fill_cga
18817                                           ! 2050 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
18818                       00004855            _biosfn_scroll:
18819                                           !BCC_EOS
18820                                           !BCC_EOS
18821                                           !BCC_EOS
18822                                           !BCC_EOS
18823                                           !BCC_EOS
18824                                           !BCC_EOS
18825                                           !BCC_EOS
18826                                           !BCC_EOS
18827                                           ! 2051 {
18828                                           ! 2052  Bit8u mode,line,cheight,bpp,cols;
18829                                           !BCC_EOS
18830                                           ! 2053  Bit16u nbcols,nbrows,i;
18831                                           !BCC_EOS
18832                                           ! 2054  Bit16u address;
18833                                           !BCC_EOS
18834                                           ! 2055  if(rul>rlr)return;
18835 4855           55                         push	bp
18836 4856           89E5                       mov	bp,sp
18837 4858           83C4                   F2  add	sp,*-$E
18838                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
18839 485B           8A46         08            mov	al,8[bp]
18840 485E           3A46         0C            cmp	al,$C[bp]
18841 4861           76           04            jbe 	.B7
18842                       00004863            .B8:
18843 4863           89EC                       mov	sp,bp
18844 4865           5D                         pop	bp
18845 4866           C3                         ret
18846                                           !BCC_EOS
18847                                           ! 2056  if(cul>clr)return;
18848                       00004867            .B7:
18849                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
18850 4867           8A46         0A            mov	al,$A[bp]
18851 486A           3A46         0E            cmp	al,$E[bp]
18852 486D           76           04            jbe 	.B9
18853                       0000486F            .BA:
18854 486F           89EC                       mov	sp,bp
18855 4871           5D                         pop	bp
18856 4872           C3                         ret
18857                                           !BCC_EOS
18858                                           ! 2057  mode=read_byte(0x40,0x49);
18859                       00004873            .B9:
18860                                           ! Debug: list int = const $49 (used reg = )
18861 4873           B8                   0049  mov	ax,*$49
18862 4876           50                         push	ax
18863                                           ! Debug: list int = const $40 (used reg = )
18864 4877           B8                   0040  mov	ax,*$40
18865 487A           50                         push	ax
18866                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18867 487B           E8         32CB            call	_read_byte
18868 487E           83C4                   04  add	sp,*4
18869                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
18870 4881           8846         FF            mov	-1[bp],al
18871                                           !BCC_EOS
18872                                           ! 2058  line=find_vga_entry(mode);
18873                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
18874 4884           8A46         FF            mov	al,-1[bp]
18875 4887           30E4                       xor	ah,ah
18876 4889           50                         push	ax
18877                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18878 488A           E8         31D0            call	_find_vga_entry
18879 488D           44                         inc	sp
18880 488E           44                         inc	sp
18881                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
18882 488F           8846         FE            mov	-2[bp],al
18883                                           !BCC_EOS
18884                                           ! 2059  if(line==0xFF)return;
18885                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
18886 4892           8A46         FE            mov	al,-2[bp]
18887 4895           3C                     FF  cmp	al,#$FF
18888 4897           75           04            jne 	.BB
18889                       00004899            .BC:
18890 4899           89EC                       mov	sp,bp
18891 489B           5D                         pop	bp
18892 489C           C3                         ret
18893                                           !BCC_EOS
18894                                           ! 2060  nbrows=read_byte(0x40,0x84)+1;
18895                       0000489D            .BB:
18896                                           ! Debug: list int = const $84 (used reg = )
18897 489D           B8                   0084  mov	ax,#$84
18898 48A0           50                         push	ax
18899                                           ! Debug: list int = const $40 (used reg = )
18900 48A1           B8                   0040  mov	ax,*$40
18901 48A4           50                         push	ax
18902                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18903 48A5           E8         32A1            call	_read_byte
18904 48A8           83C4                   04  add	sp,*4
18905                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18906 48AB           30E4                       xor	ah,ah
18907                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18908 48AD           40                         inc	ax
18909 48AE           8946         F6            mov	-$A[bp],ax
18910                                           !BCC_EOS
18911                                           ! 2061  nbcols=read_word(0x40,0x4A);
18912                                           ! Debug: list int = const $4A (used reg = )
18913 48B1           B8                   004A  mov	ax,*$4A
18914 48B4           50                         push	ax
18915                                           ! Debug: list int = const $40 (used reg = )
18916 48B5           B8                   0040  mov	ax,*$40
18917 48B8           50                         push	ax
18918                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18919 48B9           E8         32A0            call	_read_word
18920 48BC           83C4                   04  add	sp,*4
18921                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18922 48BF           8946         F8            mov	-8[bp],ax
18923                                           !BCC_EOS
18924                                           ! 2062  if(page==0xFF)
18925                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
18926 48C2           8A46         10            mov	al,$10[bp]
18927 48C5           3C                     FF  cmp	al,#$FF
18928 48C7           75           11            jne 	.BD
18929                       000048C9            .BE:
18930                                           ! 2063   page=read_byte(0x40,0x62);
18931                                           ! Debug: list int = const $62 (used reg = )
18932 48C9           B8                   0062  mov	ax,*$62
18933 48CC           50                         push	ax
18934                                           ! Debug: list int = const $40 (used reg = )
18935 48CD           B8                   0040  mov	ax,*$40
18936 48D0           50                         push	ax
18937                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18938 48D1           E8         3275            call	_read_byte
18939 48D4           83C4                   04  add	sp,*4
18940                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
18941 48D7           8846         10            mov	$10[bp],al
18942                                           !BCC_EOS
18943                                           ! 2064  if(rlr>=nbrows)rlr=nbrows-1;
18944                       000048DA            .BD:
18945                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
18946 48DA           8A46         0C            mov	al,$C[bp]
18947 48DD           30E4                       xor	ah,ah
18948 48DF           3B46         F6            cmp	ax,-$A[bp]
18949 48E2           72           07            jb  	.BF
18950                       000048E4            .C0:
18951                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18952 48E4           8B46         F6            mov	ax,-$A[bp]
18953                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
18954 48E7           48                         dec	ax
18955 48E8           8846         0C            mov	$C[bp],al
18956                                           !BCC_EOS
18957                                           ! 2065  if(clr>=nbcols)clr=nbcols-1;
18958                       000048EB            .BF:
18959                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
18960 48EB           8A46         0E            mov	al,$E[bp]
18961 48EE           30E4                       xor	ah,ah
18962 48F0           3B46         F8            cmp	ax,-8[bp]
18963 48F3           72           07            jb  	.C1
18964                       000048F5            .C2:
18965                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
18966 48F5           8B46         F8            mov	ax,-8[bp]
18967                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
18968 48F8           48                         dec	ax
18969 48F9           8846         0E            mov	$E[bp],al
18970                                           !BCC_EOS
18971                                           ! 2066  if(nblines>nbrows)nblines=0;
18972                       000048FC            .C1:
18973                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
18974 48FC           8A46         04            mov	al,4[bp]
18975 48FF           30E4                       xor	ah,ah
18976 4901           3B46         F6            cmp	ax,-$A[bp]
18977 4904           76           05            jbe 	.C3
18978                       00004906            .C4:
18979                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
18980 4906           30C0                       xor	al,al
18981 4908           8846         04            mov	4[bp],al
18982                                           !BCC_EOS
18983                                           ! 2067  cols=clr-cul+1;
18984                       0000490B            .C3:
18985                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
18986 490B           8A46         0E            mov	al,$E[bp]
18987 490E           30E4                       xor	ah,ah
18988 4910           2A46         0A            sub	al,$A[bp]
18989 4913           80DC                   00  sbb	ah,*0
18990                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18991                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
18992 4916           40                         inc	ax
18993 4917           8846         FB            mov	-5[bp],al
18994                                           !BCC_EOS
18995                                           ! 2068  if(vga_modes[line].class==0x00)
18996                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
18997 491A           8A46         FE            mov	al,-2[bp]
18998 491D           30E4                       xor	ah,ah
18999 491F           B1                     03  mov	cl,*3
19000 4921           D3E0                       shl	ax,cl
19001 4923           89C3                       mov	bx,ax
19002 4925           81C3                 01C3  add	bx,#_vga_modes
19003                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19004 4929           8A47         01            mov	al,1[bx]
19005 492C           84C0                       test	al,al
19006 492E   7403    E9         0253            bne 	.C5
19007                       00004933            .C6:
19008                                           ! 2069   {
19009                                           ! 2070    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19010                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19011 4933           8B46         F8            mov	ax,-8[bp]
19012 4936           8B4E         F6            mov	cx,-$A[bp]
19013 4939           F7E9                       imul	cx
19014                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19015 493B           D1E0                       shl	ax,*1
19016                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19017 493D           0C                     FF  or	al,#$FF
19018                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19019                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19020 493F           89C3                       mov	bx,ax
19021 4941           8A46         10            mov	al,$10[bp]
19022 4944           30E4                       xor	ah,ah
19023 4946           93                         xchg	ax,bx
19024 4947           40                         inc	ax
19025 4948           89D9                       mov	cx,bx
19026 494A           F7E9                       imul	cx
19027                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19028 494C           8946         F2            mov	-$E[bp],ax
19029                                           !BCC_EOS
19030                                           ! 2071    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19031                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19032 494F           8A46         04            mov	al,4[bp]
19033 4952           84C0                       test	al,al
19034 4954           75           67            jne 	.C7
19035                       00004956            .CC:
19036                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19037 4956           8A46         08            mov	al,8[bp]
19038 4959           84C0                       test	al,al
19039 495B           75           60            jne 	.C7
19040                       0000495D            .CB:
19041                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19042 495D           8A46         0A            mov	al,$A[bp]
19043 4960           84C0                       test	al,al
19044 4962           75           59            jne 	.C7
19045                       00004964            .CA:
19046                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19047 4964           8B46         F6            mov	ax,-$A[bp]
19048                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19049                                           ! Debug: expression subtree swapping
19050 4967           48                         dec	ax
19051 4968           50                         push	ax
19052 4969           8A46         0C            mov	al,$C[bp]
19053 496C           30E4                       xor	ah,ah
19054 496E           3B46         F0            cmp	ax,-$10[bp]
19055 4971           8D66         F2            lea	sp,-$E[bp]
19056 4974           75           47            jne 	.C7
19057                       00004976            .C9:
19058                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19059 4976           8B46         F8            mov	ax,-8[bp]
19060                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19061                                           ! Debug: expression subtree swapping
19062 4979           48                         dec	ax
19063 497A           50                         push	ax
19064 497B           8A46         0E            mov	al,$E[bp]
19065 497E           30E4                       xor	ah,ah
19066 4980           3B46         F0            cmp	ax,-$10[bp]
19067 4983           8D66         F2            lea	sp,-$E[bp]
19068 4986           75           35            jne 	.C7
19069                       00004988            .C8:
19070                                           ! 2072     {
19071                                           ! 2073      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19072                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19073 4988           8B46         F6            mov	ax,-$A[bp]
19074 498B           8B4E         F8            mov	cx,-8[bp]
19075 498E           F7E9                       imul	cx
19076                                           ! Debug: list unsigned int = ax+0 (used reg = )
19077 4990           50                         push	ax
19078                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19079 4991           8A46         06            mov	al,6[bp]
19080 4994           30E4                       xor	ah,ah
19081                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19082 4996           B9                   0100  mov	cx,#$100
19083 4999           F7E9                       imul	cx
19084                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19085                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19086 499B           05                   0020  add	ax,*$20
19087 499E           50                         push	ax
19088                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19089 499F           FF76         F2            push	-$E[bp]
19090                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19091 49A2           8A46         FE            mov	al,-2[bp]
19092 49A5           30E4                       xor	ah,ah
19093 49A7           B1                     03  mov	cl,*3
19094 49A9           D3E0                       shl	ax,cl
19095 49AB           89C3                       mov	bx,ax
19096 49AD           81C3                 01C3  add	bx,#_vga_modes
19097                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19098 49B1           FF77         04            push	4[bx]
19099                                           ! Debug: func () void = memsetw+0 (used reg = )
19100 49B4           E8         310D            call	_memsetw
19101 49B7           83C4                   08  add	sp,*8
19102                                           !BCC_EOS
19103                                           ! 2074     }
19104                                           ! 2075    else
19105                                           ! 2076     {
19106 49BA           E9         01C6            br 	.CD
19107                       000049BD            .C7:
19108                                           ! 2077      if(dir==1)
19109                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19110 49BD           8A46         12            mov	al,$12[bp]
19111 49C0           3C                     01  cmp	al,*1
19112 49C2   7403    E9         00DD            bne 	.CE
19113                       000049C7            .CF:
19114                                           ! 2078       {for(i=rul;i<=rlr;i++)
19115                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19116 49C7           8A46         08            mov	al,8[bp]
19117 49CA           30E4                       xor	ah,ah
19118 49CC           8946         F4            mov	-$C[bp],ax
19119                                           !BCC_EOS
19120                                           !BCC_EOS
19121                                           ! 2079         {
19122 49CF           E9         00C2            br 	.D2
19123                       000049D2            .D3:
19124                                           ! 2080          if((i+nblines>rlr)||(nblines==0))
19125                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19126 49D2           8B46         F4            mov	ax,-$C[bp]
19127 49D5           0246         04            add	al,4[bp]
19128 49D8           80D4                   00  adc	ah,*0
19129                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19130 49DB           50                         push	ax
19131 49DC           8A46         0C            mov	al,$C[bp]
19132 49DF           30E4                       xor	ah,ah
19133 49E1           3B46         F0            cmp	ax,-$10[bp]
19134 49E4           8D66         F2            lea	sp,-$E[bp]
19135 49E7           72           07            jb  	.D5
19136                       000049E9            .D6:
19137                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19138 49E9           8A46         04            mov	al,4[bp]
19139 49EC           84C0                       test	al,al
19140 49EE           75           42            jne 	.D4
19141                       000049F0            .D5:
19142                                           ! 2081           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19143                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19144 49F0           8A46         FB            mov	al,-5[bp]
19145 49F3           30E4                       xor	ah,ah
19146 49F5           50                         push	ax
19147                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19148 49F6           8A46         06            mov	al,6[bp]
19149 49F9           30E4                       xor	ah,ah
19150                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19151 49FB           B9                   0100  mov	cx,#$100
19152 49FE           F7E9                       imul	cx
19153                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19154                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19155 4A00           05                   0020  add	ax,*$20
19156 4A03           50                         push	ax
19157                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19158 4A04           8B46         F4            mov	ax,-$C[bp]
19159 4A07           8B4E         F8            mov	cx,-8[bp]
19160 4A0A           F7E9                       imul	cx
19161                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19162 4A0C           0246         0A            add	al,$A[bp]
19163 4A0F           80D4                   00  adc	ah,*0
19164                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19165 4A12           D1E0                       shl	ax,*1
19166                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19167                                           ! Debug: expression subtree swapping
19168 4A14           0346         F2            add	ax,-$E[bp]
19169                                           ! Debug: list unsigned int = ax+0 (used reg = )
19170 4A17           50                         push	ax
19171                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19172 4A18           8A46         FE            mov	al,-2[bp]
19173 4A1B           30E4                       xor	ah,ah
19174 4A1D           B1                     03  mov	cl,*3
19175 4A1F           D3E0                       shl	ax,cl
19176 4A21           89C3                       mov	bx,ax
19177 4A23           81C3                 01C3  add	bx,#_vga_modes
19178                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19179 4A27           FF77         04            push	4[bx]
19180                                           ! Debug: func () void = memsetw+0 (used reg = )
19181 4A2A           E8         3097            call	_memsetw
19182 4A2D           83C4                   08  add	sp,*8
19183                                           !BCC_EOS
19184                                           ! 2082          else
19185                                           ! 2083           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19186 4A30           EB           5B            jmp .D7
19187                       00004A32            .D4:
19188                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19189 4A32           8A46         FB            mov	al,-5[bp]
19190 4A35           30E4                       xor	ah,ah
19191 4A37           50                         push	ax
19192                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19193 4A38           8B46         F4            mov	ax,-$C[bp]
19194 4A3B           0246         04            add	al,4[bp]
19195 4A3E           80D4                   00  adc	ah,*0
19196                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19197 4A41           8B4E         F8            mov	cx,-8[bp]
19198 4A44           F7E9                       imul	cx
19199                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19200 4A46           0246         0A            add	al,$A[bp]
19201 4A49           80D4                   00  adc	ah,*0
19202                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19203 4A4C           D1E0                       shl	ax,*1
19204                                           ! Debug: list unsigned int = ax+0 (used reg = )
19205 4A4E           50                         push	ax
19206                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19207 4A4F           8A46         FE            mov	al,-2[bp]
19208 4A52           30E4                       xor	ah,ah
19209 4A54           B1                     03  mov	cl,*3
19210 4A56           D3E0                       shl	ax,cl
19211 4A58           89C3                       mov	bx,ax
19212 4A5A           81C3                 01C3  add	bx,#_vga_modes
19213                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19214 4A5E           FF77         04            push	4[bx]
19215                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19216 4A61           8B46         F4            mov	ax,-$C[bp]
19217 4A64           8B4E         F8            mov	cx,-8[bp]
19218 4A67           F7E9                       imul	cx
19219                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19220 4A69           0246         0A            add	al,$A[bp]
19221 4A6C           80D4                   00  adc	ah,*0
19222                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19223 4A6F           D1E0                       shl	ax,*1
19224                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19225                                           ! Debug: expression subtree swapping
19226 4A71           0346         F2            add	ax,-$E[bp]
19227                                           ! Debug: list unsigned int = ax+0 (used reg = )
19228 4A74           50                         push	ax
19229                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19230 4A75           8A46         FE            mov	al,-2[bp]
19231 4A78           30E4                       xor	ah,ah
19232 4A7A           B1                     03  mov	cl,*3
19233 4A7C           D3E0                       shl	ax,cl
19234 4A7E           89C3                       mov	bx,ax
19235 4A80           81C3                 01C3  add	bx,#_vga_modes
19236                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19237 4A84           FF77         04            push	4[bx]
19238                                           ! Debug: func () void = memcpyw+0 (used reg = )
19239 4A87           E8         308F            call	_memcpyw
19240 4A8A           83C4                   0A  add	sp,*$A
19241                                           !BCC_EOS
19242                                           ! 2084         }
19243                       00004A8D            .D7:
19244                                           ! 2085       }
19245                       00004A8D            .D1:
19246                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19247 4A8D           8B46         F4            mov	ax,-$C[bp]
19248 4A90           40                         inc	ax
19249 4A91           8946         F4            mov	-$C[bp],ax
19250                       00004A94            .D2:
19251                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19252 4A94           8A46         0C            mov	al,$C[bp]
19253 4A97           30E4                       xor	ah,ah
19254 4A99           3B46         F4            cmp	ax,-$C[bp]
19255 4A9C   7203    E9         FF31            bhis	.D3
19256                       00004AA1            .D8:
19257                       00004AA1            .D0:
19258                                           ! 2086      else
19259                                           ! 2087       {for(i=rlr;i>=rul;i--)
19260 4AA1           E9         00DF            br 	.D9
19261                       00004AA4            .CE:
19262                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19263 4AA4           8A46         0C            mov	al,$C[bp]
19264 4AA7           30E4                       xor	ah,ah
19265 4AA9           8946         F4            mov	-$C[bp],ax
19266                                           !BCC_EOS
19267                                           !BCC_EOS
19268                                           ! 2088         {
19269 4AAC           E9         00C7            br 	.DC
19270                       00004AAF            .DD:
19271                                           ! 2089          if((i<rul+nblines)||(nblines==0))
19272                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19273 4AAF           8A46         08            mov	al,8[bp]
19274 4AB2           30E4                       xor	ah,ah
19275 4AB4           0246         04            add	al,4[bp]
19276 4AB7           80D4                   00  adc	ah,*0
19277                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19278 4ABA           3B46         F4            cmp	ax,-$C[bp]
19279 4ABD           77           07            ja  	.DF
19280                       00004ABF            .E0:
19281                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19282 4ABF           8A46         04            mov	al,4[bp]
19283 4AC2           84C0                       test	al,al
19284 4AC4           75           42            jne 	.DE
19285                       00004AC6            .DF:
19286                                           ! 2090           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19287                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19288 4AC6           8A46         FB            mov	al,-5[bp]
19289 4AC9           30E4                       xor	ah,ah
19290 4ACB           50                         push	ax
19291                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19292 4ACC           8A46         06            mov	al,6[bp]
19293 4ACF           30E4                       xor	ah,ah
19294                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19295 4AD1           B9                   0100  mov	cx,#$100
19296 4AD4           F7E9                       imul	cx
19297                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19298                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19299 4AD6           05                   0020  add	ax,*$20
19300 4AD9           50                         push	ax
19301                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19302 4ADA           8B46         F4            mov	ax,-$C[bp]
19303 4ADD           8B4E         F8            mov	cx,-8[bp]
19304 4AE0           F7E9                       imul	cx
19305                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19306 4AE2           0246         0A            add	al,$A[bp]
19307 4AE5           80D4                   00  adc	ah,*0
19308                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19309 4AE8           D1E0                       shl	ax,*1
19310                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19311                                           ! Debug: expression subtree swapping
19312 4AEA           0346         F2            add	ax,-$E[bp]
19313                                           ! Debug: list unsigned int = ax+0 (used reg = )
19314 4AED           50                         push	ax
19315                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19316 4AEE           8A46         FE            mov	al,-2[bp]
19317 4AF1           30E4                       xor	ah,ah
19318 4AF3           B1                     03  mov	cl,*3
19319 4AF5           D3E0                       shl	ax,cl
19320 4AF7           89C3                       mov	bx,ax
19321 4AF9           81C3                 01C3  add	bx,#_vga_modes
19322                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19323 4AFD           FF77         04            push	4[bx]
19324                                           ! Debug: func () void = memsetw+0 (used reg = )
19325 4B00           E8         2FC1            call	_memsetw
19326 4B03           83C4                   08  add	sp,*8
19327                                           !BCC_EOS
19328                                           ! 2091          else
19329                                           ! 2092           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19330 4B06           EB           5B            jmp .E1
19331                       00004B08            .DE:
19332                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19333 4B08           8A46         FB            mov	al,-5[bp]
19334 4B0B           30E4                       xor	ah,ah
19335 4B0D           50                         push	ax
19336                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19337 4B0E           8B46         F4            mov	ax,-$C[bp]
19338 4B11           2A46         04            sub	al,4[bp]
19339 4B14           80DC                   00  sbb	ah,*0
19340                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19341 4B17           8B4E         F8            mov	cx,-8[bp]
19342 4B1A           F7E9                       imul	cx
19343                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19344 4B1C           0246         0A            add	al,$A[bp]
19345 4B1F           80D4                   00  adc	ah,*0
19346                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19347 4B22           D1E0                       shl	ax,*1
19348                                           ! Debug: list unsigned int = ax+0 (used reg = )
19349 4B24           50                         push	ax
19350                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19351 4B25           8A46         FE            mov	al,-2[bp]
19352 4B28           30E4                       xor	ah,ah
19353 4B2A           B1                     03  mov	cl,*3
19354 4B2C           D3E0                       shl	ax,cl
19355 4B2E           89C3                       mov	bx,ax
19356 4B30           81C3                 01C3  add	bx,#_vga_modes
19357                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19358 4B34           FF77         04            push	4[bx]
19359                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19360 4B37           8B46         F4            mov	ax,-$C[bp]
19361 4B3A           8B4E         F8            mov	cx,-8[bp]
19362 4B3D           F7E9                       imul	cx
19363                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19364 4B3F           0246         0A            add	al,$A[bp]
19365 4B42           80D4                   00  adc	ah,*0
19366                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19367 4B45           D1E0                       shl	ax,*1
19368                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19369                                           ! Debug: expression subtree swapping
19370 4B47           0346         F2            add	ax,-$E[bp]
19371                                           ! Debug: list unsigned int = ax+0 (used reg = )
19372 4B4A           50                         push	ax
19373                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19374 4B4B           8A46         FE            mov	al,-2[bp]
19375 4B4E           30E4                       xor	ah,ah
19376 4B50           B1                     03  mov	cl,*3
19377 4B52           D3E0                       shl	ax,cl
19378 4B54           89C3                       mov	bx,ax
19379 4B56           81C3                 01C3  add	bx,#_vga_modes
19380                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19381 4B5A           FF77         04            push	4[bx]
19382                                           ! Debug: func () void = memcpyw+0 (used reg = )
19383 4B5D           E8         2FB9            call	_memcpyw
19384 4B60           83C4                   0A  add	sp,*$A
19385                                           !BCC_EOS
19386                                           ! 2093          if (i>rlr) break;
19387                       00004B63            .E1:
19388                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19389 4B63           8A46         0C            mov	al,$C[bp]
19390 4B66           30E4                       xor	ah,ah
19391 4B68           3B46         F4            cmp	ax,-$C[bp]
19392 4B6B           73           02            jae 	.E2
19393                       00004B6D            .E3:
19394 4B6D           EB           14            jmp .DA
19395                                           !BCC_EOS
19396                                           ! 2094         }
19397                       00004B6F            .E2:
19398                                           ! 2095       }
19399                       00004B6F            .DB:
19400                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19401 4B6F           8B46         F4            mov	ax,-$C[bp]
19402 4B72           48                         dec	ax
19403 4B73           8946         F4            mov	-$C[bp],ax
19404                       00004B76            .DC:
19405                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19406 4B76           8A46         08            mov	al,8[bp]
19407 4B79           30E4                       xor	ah,ah
19408 4B7B           3B46         F4            cmp	ax,-$C[bp]
19409 4B7E   7703    E9         FF2C            blos	.DD
19410                       00004B83            .E4:
19411                       00004B83            .DA:
19412                                           ! 2096     }
19413                       00004B83            .D9:
19414                                           ! 2097   }
19415                       00004B83            .CD:
19416                                           ! 2098  else
19417                                           ! 2099   {
19418 4B83           E9         03DE            br 	.E5
19419                       00004B86            .C5:
19420                                           ! 2100    cheight=video_param_table[line_to_vpti[line]].cheight;
19421                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19422 4B86           8A46         FE            mov	al,-2[bp]
19423 4B89           30E4                       xor	ah,ah
19424 4B8B           89C3                       mov	bx,ax
19425                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19426 4B8D           8A87       0243            mov	al,_line_to_vpti[bx]
19427 4B91           30E4                       xor	ah,ah
19428 4B93           B1                     06  mov	cl,*6
19429 4B95           D3E0                       shl	ax,cl
19430 4B97           89C3                       mov	bx,ax
19431 4B99           81C3                 0257  add	bx,#_video_param_table
19432                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19433 4B9D           8A47         02            mov	al,2[bx]
19434 4BA0           8846         FD            mov	-3[bp],al
19435                                           !BCC_EOS
19436                                           ! 2101    switch(vga_modes[line].memmodel)
19437                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19438 4BA3           8A46         FE            mov	al,-2[bp]
19439 4BA6           30E4                       xor	ah,ah
19440 4BA8           B1                     03  mov	cl,*3
19441 4BAA           D3E0                       shl	ax,cl
19442 4BAC           89C3                       mov	bx,ax
19443 4BAE           81C3                 01C3  add	bx,#_vga_modes
19444 4BB2           8A47         02            mov	al,2[bx]
19445                                           ! 2102     {
19446 4BB5           E9         0397            br 	.E8
19447                                           ! 2103      case 0x04:
19448                                           ! 2104      case 0x03:
19449                       00004BB8            .E9:
19450                                           ! 2105        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19451                       00004BB8            .EA:
19452                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19453 4BB8           8A46         04            mov	al,4[bp]
19454 4BBB           84C0                       test	al,al
19455 4BBD   7403    E9         008A            bne 	.EB
19456                       00004BC2            .F0:
19457                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19458 4BC2           8A46         08            mov	al,8[bp]
19459 4BC5           84C0                       test	al,al
19460 4BC7   7403    E9         0080            bne 	.EB
19461                       00004BCC            .EF:
19462                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19463 4BCC           8A46         0A            mov	al,$A[bp]
19464 4BCF           84C0                       test	al,al
19465 4BD1           75           79            jne 	.EB
19466                       00004BD3            .EE:
19467                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19468 4BD3           8B46         F6            mov	ax,-$A[bp]
19469                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19470                                           ! Debug: expression subtree swapping
19471 4BD6           48                         dec	ax
19472 4BD7           50                         push	ax
19473 4BD8           8A46         0C            mov	al,$C[bp]
19474 4BDB           30E4                       xor	ah,ah
19475 4BDD           3B46         F0            cmp	ax,0+..FFFC[bp]
19476 4BE0           8D66         F2            lea	sp,2+..FFFC[bp]
19477 4BE3           75           67            jne 	.EB
19478                       00004BE5            .ED:
19479                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19480 4BE5           8B46         F8            mov	ax,-8[bp]
19481                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19482                                           ! Debug: expression subtree swapping
19483 4BE8           48                         dec	ax
19484 4BE9           50                         push	ax
19485 4BEA           8A46         0E            mov	al,$E[bp]
19486 4BED           30E4                       xor	ah,ah
19487 4BEF           3B46         F0            cmp	ax,0+..FFFC[bp]
19488 4BF2           8D66         F2            lea	sp,2+..FFFC[bp]
19489 4BF5           75           55            jne 	.EB
19490                       00004BF7            .EC:
19491                                           ! 2106         {
19492                                           ! 2107          outw(0x3ce, 0x0205);
19493                                           ! Debug: list int = const $205 (used reg = )
19494 4BF7           B8                   0205  mov	ax,#$205
19495 4BFA           50                         push	ax
19496                                           ! Debug: list int = const $3CE (used reg = )
19497 4BFB           B8                   03CE  mov	ax,#$3CE
19498 4BFE           50                         push	ax
19499                                           ! Debug: func () void = outw+0 (used reg = )
19500 4BFF           E8         2FC3            call	_outw
19501 4C02           83C4                   04  add	sp,*4
19502                                           !BCC_EOS
19503                                           ! 2108          memsetb(vga_modes[line].sst
19504                                           ! 2108 art,0,attr,nbrows*nbcols*cheight);
19505                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19506 4C05           8B46         F6            mov	ax,-$A[bp]
19507 4C08           8B4E         F8            mov	cx,-8[bp]
19508 4C0B           F7E9                       imul	cx
19509                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19510 4C0D           89C3                       mov	bx,ax
19511 4C0F           8A46         FD            mov	al,-3[bp]
19512 4C12           30E4                       xor	ah,ah
19513 4C14           93                         xchg	ax,bx
19514 4C15           89D9                       mov	cx,bx
19515 4C17           F7E9                       imul	cx
19516                                           ! Debug: list unsigned int = ax+0 (used reg = )
19517 4C19           50                         push	ax
19518                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19519 4C1A           8A46         06            mov	al,6[bp]
19520 4C1D           30E4                       xor	ah,ah
19521 4C1F           50                         push	ax
19522                                           ! Debug: list int = const 0 (used reg = )
19523 4C20           31C0                       xor	ax,ax
19524 4C22           50                         push	ax
19525                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19526 4C23           8A46         FE            mov	al,-2[bp]
19527 4C26           30E4                       xor	ah,ah
19528 4C28           B1                     03  mov	cl,*3
19529 4C2A           D3E0                       shl	ax,cl
19530 4C2C           89C3                       mov	bx,ax
19531 4C2E           81C3                 01C3  add	bx,#_vga_modes
19532                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19533 4C32           FF77         04            push	4[bx]
19534                                           ! Debug: func () void = memsetb+0 (used reg = )
19535 4C35           E8         2E67            call	_memsetb
19536 4C38           83C4                   08  add	sp,*8
19537                                           !BCC_EOS
19538                                           ! 2109          outw(0x3ce, 0x0005);
19539                                           ! Debug: list int = const 5 (used reg = )
19540 4C3B           B8                   0005  mov	ax,*5
19541 4C3E           50                         push	ax
19542                                           ! Debug: list int = const $3CE (used reg = )
19543 4C3F           B8                   03CE  mov	ax,#$3CE
19544 4C42           50                         push	ax
19545                                           ! Debug: func () void = outw+0 (used reg = )
19546 4C43           E8         2F7F            call	_outw
19547 4C46           83C4                   04  add	sp,*4
19548                                           !BCC_EOS
19549                                           ! 2110         }
19550                                           ! 2111        else
19551                                           ! 2112         {
19552 4C49           E9         0123            br 	.F1
19553                       00004C4C            .EB:
19554                                           ! 2113          if(dir==1)
19555                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19556 4C4C           8A46         12            mov	al,$12[bp]
19557 4C4F           3C                     01  cmp	al,*1
19558 4C51   7403    E9         008A            bne 	.F2
19559                       00004C56            .F3:
19560                                           ! 2114           {for(i=rul;i<=rlr;i++)
19561                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19562 4C56           8A46         08            mov	al,8[bp]
19563 4C59           30E4                       xor	ah,ah
19564 4C5B           8946         F4            mov	-$C[bp],ax
19565                                           !BCC_EOS
19566                                           !BCC_EOS
19567                                           ! 2115             {
19568 4C5E           EB           73            jmp .F6
19569                       00004C60            .F7:
19570                                           ! 2116              if((i+nblines>rlr)||(nblines==0))
19571                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19572 4C60           8B46         F4            mov	ax,-$C[bp]
19573 4C63           0246         04            add	al,4[bp]
19574 4C66           80D4                   00  adc	ah,*0
19575                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19576 4C69           50                         push	ax
19577 4C6A           8A46         0C            mov	al,$C[bp]
19578 4C6D           30E4                       xor	ah,ah
19579 4C6F           3B46         F0            cmp	ax,0+..FFFC[bp]
19580 4C72           8D66         F2            lea	sp,2+..FFFC[bp]
19581 4C75           72           07            jb  	.F9
19582                       00004C77            .FA:
19583                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19584 4C77           8A46         04            mov	al,4[bp]
19585 4C7A           84C0                       test	al,al
19586 4C7C           75           26            jne 	.F8
19587                       00004C7E            .F9:
19588                                           ! 2117               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19589                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19590 4C7E           8A46         06            mov	al,6[bp]
19591 4C81           30E4                       xor	ah,ah
19592 4C83           50                         push	ax
19593                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19594 4C84           8A46         FD            mov	al,-3[bp]
19595 4C87           30E4                       xor	ah,ah
19596 4C89           50                         push	ax
19597                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19598 4C8A           FF76         F8            push	-8[bp]
19599                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19600 4C8D           8A46         FB            mov	al,-5[bp]
19601 4C90           30E4                       xor	ah,ah
19602 4C92           50                         push	ax
19603                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19604 4C93           FF76         F4            push	-$C[bp]
19605                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19606 4C96           8A46         0A            mov	al,$A[bp]
19607 4C99           30E4                       xor	ah,ah
19608 4C9B           50                         push	ax
19609                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19610 4C9C           E8         F963            call	_vgamem_fill_pl4
19611 4C9F           83C4                   0C  add	sp,*$C
19612                                           !BCC_EOS
19613                                           ! 2118              else
19614                                           ! 2119               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
19615 4CA2           EB           28            jmp .FB
19616                       00004CA4            .F8:
19617                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19618 4CA4           8A46         FD            mov	al,-3[bp]
19619 4CA7           30E4                       xor	ah,ah
19620 4CA9           50                         push	ax
19621                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19622 4CAA           FF76         F8            push	-8[bp]
19623                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19624 4CAD           8A46         FB            mov	al,-5[bp]
19625 4CB0           30E4                       xor	ah,ah
19626 4CB2           50                         push	ax
19627                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19628 4CB3           FF76         F4            push	-$C[bp]
19629                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19630 4CB6           8B46         F4            mov	ax,-$C[bp]
19631 4CB9           0246         04            add	al,4[bp]
19632 4CBC           80D4                   00  adc	ah,*0
19633                                           ! Debug: list unsigned int = ax+0 (used reg = )
19634 4CBF           50                         push	ax
19635                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19636 4CC0           8A46         0A            mov	al,$A[bp]
19637 4CC3           30E4                       xor	ah,ah
19638 4CC5           50                         push	ax
19639                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19640 4CC6           E8         F877            call	_vgamem_copy_pl4
19641 4CC9           83C4                   0C  add	sp,*$C
19642                                           !BCC_EOS
19643                                           ! 2120             }
19644                       00004CCC            .FB:
19645                                           ! 2121           }
19646                       00004CCC            .F5:
19647                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19648 4CCC           8B46         F4            mov	ax,-$C[bp]
19649 4CCF           40                         inc	ax
19650 4CD0           8946         F4            mov	-$C[bp],ax
19651                       00004CD3            .F6:
19652                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19653 4CD3           8A46         0C            mov	al,$C[bp]
19654 4CD6           30E4                       xor	ah,ah
19655 4CD8           3B46         F4            cmp	ax,-$C[bp]
19656 4CDB           73           83            jae	.F7
19657                       00004CDD            .FC:
19658                       00004CDD            .F4:
19659                                           ! 2122          else
19660                                           ! 2123           {for(i=rlr;i>=rul;i--)
19661 4CDD           E9         008F            br 	.FD
19662                       00004CE0            .F2:
19663                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19664 4CE0           8A46         0C            mov	al,$C[bp]
19665 4CE3           30E4                       xor	ah,ah
19666 4CE5           8946         F4            mov	-$C[bp],ax
19667                                           !BCC_EOS
19668                                           !BCC_EOS
19669                                           ! 2124             {
19670 4CE8           EB           78            jmp .100
19671                       00004CEA            .101:
19672                                           ! 2125              if((i<rul+nblines)||(nblines==0))
19673                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19674 4CEA           8A46         08            mov	al,8[bp]
19675 4CED           30E4                       xor	ah,ah
19676 4CEF           0246         04            add	al,4[bp]
19677 4CF2           80D4                   00  adc	ah,*0
19678                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19679 4CF5           3B46         F4            cmp	ax,-$C[bp]
19680 4CF8           77           07            ja  	.103
19681                       00004CFA            .104:
19682                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19683 4CFA           8A46         04            mov	al,4[bp]
19684 4CFD           84C0                       test	al,al
19685 4CFF           75           26            jne 	.102
19686                       00004D01            .103:
19687                                           ! 2126               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19688                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19689 4D01           8A46         06            mov	al,6[bp]
19690 4D04           30E4                       xor	ah,ah
19691 4D06           50                         push	ax
19692                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19693 4D07           8A46         FD            mov	al,-3[bp]
19694 4D0A           30E4                       xor	ah,ah
19695 4D0C           50                         push	ax
19696                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19697 4D0D           FF76         F8            push	-8[bp]
19698                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19699 4D10           8A46         FB            mov	al,-5[bp]
19700 4D13           30E4                       xor	ah,ah
19701 4D15           50                         push	ax
19702                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19703 4D16           FF76         F4            push	-$C[bp]
19704                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19705 4D19           8A46         0A            mov	al,$A[bp]
19706 4D1C           30E4                       xor	ah,ah
19707 4D1E           50                         push	ax
19708                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19709 4D1F           E8         F8E0            call	_vgamem_fill_pl4
19710 4D22           83C4                   0C  add	sp,*$C
19711                                           !BCC_EOS
19712                                           ! 2127              else
19713                                           ! 2128               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
19714 4D25           EB           28            jmp .105
19715                       00004D27            .102:
19716                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19717 4D27           8A46         FD            mov	al,-3[bp]
19718 4D2A           30E4                       xor	ah,ah
19719 4D2C           50                         push	ax
19720                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19721 4D2D           FF76         F8            push	-8[bp]
19722                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19723 4D30           8A46         FB            mov	al,-5[bp]
19724 4D33           30E4                       xor	ah,ah
19725 4D35           50                         push	ax
19726                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
19727 4D36           8B46         F4            mov	ax,-$C[bp]
19728 4D39           2A46         04            sub	al,4[bp]
19729 4D3C           80DC                   00  sbb	ah,*0
19730                                           ! Debug: list unsigned int = ax+0 (used reg = )
19731 4D3F           50                         push	ax
19732                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19733 4D40           FF76         F4            push	-$C[bp]
19734                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19735 4D43           8A46         0A            mov	al,$A[bp]
19736 4D46           30E4                       xor	ah,ah
19737 4D48           50                         push	ax
19738                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19739 4D49           E8         F7F4            call	_vgamem_copy_pl4
19740 4D4C           83C4                   0C  add	sp,*$C
19741                                           !BCC_EOS
19742                                           ! 2129              if (i>rlr) break;
19743                       00004D4F            .105:
19744                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19745 4D4F           8A46         0C            mov	al,$C[bp]
19746 4D52           30E4                       xor	ah,ah
19747 4D54           3B46         F4            cmp	ax,-$C[bp]
19748 4D57           73           02            jae 	.106
19749                       00004D59            .107:
19750 4D59           EB           14            jmp .FE
19751                                           !BCC_EOS
19752                                           ! 2130             }
19753                       00004D5B            .106:
19754                                           ! 2131           }
19755                       00004D5B            .FF:
19756                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19757 4D5B           8B46         F4            mov	ax,-$C[bp]
19758 4D5E           48                         dec	ax
19759 4D5F           8946         F4            mov	-$C[bp],ax
19760                       00004D62            .100:
19761                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19762 4D62           8A46         08            mov	al,8[bp]
19763 4D65           30E4                       xor	ah,ah
19764 4D67           3B46         F4            cmp	ax,-$C[bp]
19765 4D6A   7703    E9         FF7B            blos	.101
19766                       00004D6F            .108:
19767                       00004D6F            .FE:
19768                                           ! 2132         }
19769                       00004D6F            .FD:
19770                                           ! 2133        break;
19771                       00004D6F            .F1:
19772 4D6F           E9         01F2            br 	.E6
19773                                           !BCC_EOS
19774                                           ! 2134      case 0x02:
19775                                           ! 2135        bpp=vga_modes[line].pixbits;
19776                       00004D72            .109:
19777                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19778 4D72           8A46         FE            mov	al,-2[bp]
19779 4D75           30E4                       xor	ah,ah
19780 4D77           B1                     03  mov	cl,*3
19781 4D79           D3E0                       shl	ax,cl
19782 4D7B           89C3                       mov	bx,ax
19783 4D7D           81C3                 01C3  add	bx,#_vga_modes
19784                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
19785 4D81           8A47         03            mov	al,3[bx]
19786 4D84           8846         FC            mov	-4[bp],al
19787                                           !BCC_EOS
19788                                           ! 2136        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19789                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19790 4D87           8A46         04            mov	al,4[bp]
19791 4D8A           84C0                       test	al,al
19792 4D8C           75           77            jne 	.10A
19793                       00004D8E            .10F:
19794                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19795 4D8E           8A46         08            mov	al,8[bp]
19796 4D91           84C0                       test	al,al
19797 4D93           75           70            jne 	.10A
19798                       00004D95            .10E:
19799                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19800 4D95           8A46         0A            mov	al,$A[bp]
19801 4D98           84C0                       test	al,al
19802 4D9A           75           69            jne 	.10A
19803                       00004D9C            .10D:
19804                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19805 4D9C           8B46         F6            mov	ax,-$A[bp]
19806                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19807                                           ! Debug: expression subtree swapping
19808 4D9F           48                         dec	ax
19809 4DA0           50                         push	ax
19810 4DA1           8A46         0C            mov	al,$C[bp]
19811 4DA4           30E4                       xor	ah,ah
19812 4DA6           3B46         F0            cmp	ax,0+..FFFC[bp]
19813 4DA9           8D66         F2            lea	sp,2+..FFFC[bp]
19814 4DAC           75           57            jne 	.10A
19815                       00004DAE            .10C:
19816                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19817 4DAE           8B46         F8            mov	ax,-8[bp]
19818                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19819                                           ! Debug: expression subtree swapping
19820 4DB1           48                         dec	ax
19821 4DB2           50                         push	ax
19822 4DB3           8A46         0E            mov	al,$E[bp]
19823 4DB6           30E4                       xor	ah,ah
19824 4DB8           3B46         F0            cmp	ax,0+..FFFC[bp]
19825 4DBB           8D66         F2            lea	sp,2+..FFFC[bp]
19826 4DBE           75           45            jne 	.10A
19827                       00004DC0            .10B:
19828                                           ! 2137         {
19829                                           ! 2138          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
19830                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19831 4DC0           8B46         F6            mov	ax,-$A[bp]
19832 4DC3           8B4E         F8            mov	cx,-8[bp]
19833 4DC6           F7E9                       imul	cx
19834                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19835 4DC8           89C3                       mov	bx,ax
19836 4DCA           8A46         FD            mov	al,-3[bp]
19837 4DCD           30E4                       xor	ah,ah
19838 4DCF           93                         xchg	ax,bx
19839 4DD0           89D9                       mov	cx,bx
19840 4DD2           F7E9                       imul	cx
19841                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
19842 4DD4           89C3                       mov	bx,ax
19843 4DD6           8A46         FC            mov	al,-4[bp]
19844 4DD9           30E4                       xor	ah,ah
19845 4DDB           93                         xchg	ax,bx
19846 4DDC           89D9                       mov	cx,bx
19847 4DDE           F7E9                       imul	cx
19848                                           ! Debug: list unsigned int = ax+0 (used reg = )
19849 4DE0           50                         push	ax
19850                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19851 4DE1           8A46         06            mov	al,6[bp]
19852 4DE4           30E4                       xor	ah,ah
19853 4DE6           50                         push	ax
19854                                           ! Debug: list int = const 0 (used reg = )
19855 4DE7           31C0                       xor	ax,ax
19856 4DE9           50                         push	ax
19857                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19858 4DEA           8A46         FE            mov	al,-2[bp]
19859 4DED           30E4                       xor	ah,ah
19860 4DEF           B1                     03  mov	cl,*3
19861 4DF1           D3E0                       shl	ax,cl
19862 4DF3           89C3                       mov	bx,ax
19863 4DF5           81C3                 01C3  add	bx,#_vga_modes
19864                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19865 4DF9           FF77         04            push	4[bx]
19866                                           ! Debug: func () void = memsetb+0 (used reg = )
19867 4DFC           E8         2CA0            call	_memsetb
19868 4DFF           83C4                   08  add	sp,*8
19869                                           !BCC_EOS
19870                                           ! 2139         }
19871                                           ! 2140        else
19872                                           ! 2141         {
19873 4E02           E9         0146            br 	.110
19874                       00004E05            .10A:
19875                                           ! 2142          if(bpp==2)
19876                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
19877 4E05           8A46         FC            mov	al,-4[bp]
19878 4E08           3C                     02  cmp	al,*2
19879 4E0A           75           1C            jne 	.111
19880                       00004E0C            .112:
19881                                           ! 2143           {
19882                                           ! 2144            cul<<=1;
19883                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
19884 4E0C           8A46         0A            mov	al,$A[bp]
19885 4E0F           30E4                       xor	ah,ah
19886 4E11           D1E0                       shl	ax,*1
19887 4E13           8846         0A            mov	$A[bp],al
19888                                           !BCC_EOS
19889                                           ! 2145            cols<<=1;
19890                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
19891 4E16           8A46         FB            mov	al,-5[bp]
19892 4E19           30E4                       xor	ah,ah
19893 4E1B           D1E0                       shl	ax,*1
19894 4E1D           8846         FB            mov	-5[bp],al
19895                                           !BCC_EOS
19896                                           ! 2146            nbcols<<=1;
19897                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19898 4E20           8B46         F8            mov	ax,-8[bp]
19899 4E23           D1E0                       shl	ax,*1
19900 4E25           8946         F8            mov	-8[bp],ax
19901                                           !BCC_EOS
19902                                           ! 2147           }
19903                                           ! 2148          if(dir==1)
19904                       00004E28            .111:
19905                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19906 4E28           8A46         12            mov	al,$12[bp]
19907 4E2B           3C                     01  cmp	al,*1
19908 4E2D   7403    E9         008A            bne 	.113
19909                       00004E32            .114:
19910                                           ! 2149           {for(i=rul;i<=rlr;i++)
19911                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19912 4E32           8A46         08            mov	al,8[bp]
19913 4E35           30E4                       xor	ah,ah
19914 4E37           8946         F4            mov	-$C[bp],ax
19915                                           !BCC_EOS
19916                                           !BCC_EOS
19917                                           ! 2150             {
19918 4E3A           EB           73            jmp .117
19919                       00004E3C            .118:
19920                                           ! 2151              if((i+nblines>rlr)||(nblines==0))
19921                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19922 4E3C           8B46         F4            mov	ax,-$C[bp]
19923 4E3F           0246         04            add	al,4[bp]
19924 4E42           80D4                   00  adc	ah,*0
19925                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19926 4E45           50                         push	ax
19927 4E46           8A46         0C            mov	al,$C[bp]
19928 4E49           30E4                       xor	ah,ah
19929 4E4B           3B46         F0            cmp	ax,0+..FFFC[bp]
19930 4E4E           8D66         F2            lea	sp,2+..FFFC[bp]
19931 4E51           72           07            jb  	.11A
19932                       00004E53            .11B:
19933                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19934 4E53           8A46         04            mov	al,4[bp]
19935 4E56           84C0                       test	al,al
19936 4E58           75           26            jne 	.119
19937                       00004E5A            .11A:
19938                                           ! 2152               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
19939                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19940 4E5A           8A46         06            mov	al,6[bp]
19941 4E5D           30E4                       xor	ah,ah
19942 4E5F           50                         push	ax
19943                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19944 4E60           8A46         FD            mov	al,-3[bp]
19945 4E63           30E4                       xor	ah,ah
19946 4E65           50                         push	ax
19947                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19948 4E66           FF76         F8            push	-8[bp]
19949                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19950 4E69           8A46         FB            mov	al,-5[bp]
19951 4E6C           30E4                       xor	ah,ah
19952 4E6E           50                         push	ax
19953                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19954 4E6F           FF76         F4            push	-$C[bp]
19955                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19956 4E72           8A46         0A            mov	al,$A[bp]
19957 4E75           30E4                       xor	ah,ah
19958 4E77           50                         push	ax
19959                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
19960 4E78           E8         F925            call	_vgamem_fill_cga
19961 4E7B           83C4                   0C  add	sp,*$C
19962                                           !BCC_EOS
19963                                           ! 2153              else
19964                                           ! 2154               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
19965 4E7E           EB           28            jmp .11C
19966                       00004E80            .119:
19967                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19968 4E80           8A46         FD            mov	al,-3[bp]
19969 4E83           30E4                       xor	ah,ah
19970 4E85           50                         push	ax
19971                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19972 4E86           FF76         F8            push	-8[bp]
19973                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19974 4E89           8A46         FB            mov	al,-5[bp]
19975 4E8C           30E4                       xor	ah,ah
19976 4E8E           50                         push	ax
19977                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19978 4E8F           FF76         F4            push	-$C[bp]
19979                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19980 4E92           8B46         F4            mov	ax,-$C[bp]
19981 4E95           0246         04            add	al,4[bp]
19982 4E98           80D4                   00  adc	ah,*0
19983                                           ! Debug: list unsigned int = ax+0 (used reg = )
19984 4E9B           50                         push	ax
19985                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19986 4E9C           8A46         0A            mov	al,$A[bp]
19987 4E9F           30E4                       xor	ah,ah
19988 4EA1           50                         push	ax
19989                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
19990 4EA2           E8         F7E8            call	_vgamem_copy_cga
19991 4EA5           83C4                   0C  add	sp,*$C
19992                                           !BCC_EOS
19993                                           ! 2155             }
19994                       00004EA8            .11C:
19995                                           ! 2156           }
19996                       00004EA8            .116:
19997                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19998 4EA8           8B46         F4            mov	ax,-$C[bp]
19999 4EAB           40                         inc	ax
20000 4EAC           8946         F4            mov	-$C[bp],ax
20001                       00004EAF            .117:
20002                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20003 4EAF           8A46         0C            mov	al,$C[bp]
20004 4EB2           30E4                       xor	ah,ah
20005 4EB4           3B46         F4            cmp	ax,-$C[bp]
20006 4EB7           73           83            jae	.118
20007                       00004EB9            .11D:
20008                       00004EB9            .115:
20009                                           ! 2157          else
20010                                           ! 2158           {for(i=rlr;i>=rul;i--)
20011 4EB9           E9         008F            br 	.11E
20012                       00004EBC            .113:
20013                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20014 4EBC           8A46         0C            mov	al,$C[bp]
20015 4EBF           30E4                       xor	ah,ah
20016 4EC1           8946         F4            mov	-$C[bp],ax
20017                                           !BCC_EOS
20018                                           !BCC_EOS
20019                                           ! 2159             {
20020 4EC4           EB           78            jmp .121
20021                       00004EC6            .122:
20022                                           ! 2160              if((i<rul+nblines)||(nblines==0))
20023                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20024 4EC6           8A46         08            mov	al,8[bp]
20025 4EC9           30E4                       xor	ah,ah
20026 4ECB           0246         04            add	al,4[bp]
20027 4ECE           80D4                   00  adc	ah,*0
20028                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20029 4ED1           3B46         F4            cmp	ax,-$C[bp]
20030 4ED4           77           07            ja  	.124
20031                       00004ED6            .125:
20032                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20033 4ED6           8A46         04            mov	al,4[bp]
20034 4ED9           84C0                       test	al,al
20035 4EDB           75           26            jne 	.123
20036                       00004EDD            .124:
20037                                           ! 2161               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20038                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20039 4EDD           8A46         06            mov	al,6[bp]
20040 4EE0           30E4                       xor	ah,ah
20041 4EE2           50                         push	ax
20042                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20043 4EE3           8A46         FD            mov	al,-3[bp]
20044 4EE6           30E4                       xor	ah,ah
20045 4EE8           50                         push	ax
20046                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20047 4EE9           FF76         F8            push	-8[bp]
20048                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20049 4EEC           8A46         FB            mov	al,-5[bp]
20050 4EEF           30E4                       xor	ah,ah
20051 4EF1           50                         push	ax
20052                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20053 4EF2           FF76         F4            push	-$C[bp]
20054                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20055 4EF5           8A46         0A            mov	al,$A[bp]
20056 4EF8           30E4                       xor	ah,ah
20057 4EFA           50                         push	ax
20058                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20059 4EFB           E8         F8A2            call	_vgamem_fill_cga
20060 4EFE           83C4                   0C  add	sp,*$C
20061                                           !BCC_EOS
20062                                           ! 2162              else
20063                                           ! 2163               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20064 4F01           EB           28            jmp .126
20065                       00004F03            .123:
20066                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20067 4F03           8A46         FD            mov	al,-3[bp]
20068 4F06           30E4                       xor	ah,ah
20069 4F08           50                         push	ax
20070                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20071 4F09           FF76         F8            push	-8[bp]
20072                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20073 4F0C           8A46         FB            mov	al,-5[bp]
20074 4F0F           30E4                       xor	ah,ah
20075 4F11           50                         push	ax
20076                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20077 4F12           8B46         F4            mov	ax,-$C[bp]
20078 4F15           2A46         04            sub	al,4[bp]
20079 4F18           80DC                   00  sbb	ah,*0
20080                                           ! Debug: list unsigned int = ax+0 (used reg = )
20081 4F1B           50                         push	ax
20082                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20083 4F1C           FF76         F4            push	-$C[bp]
20084                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20085 4F1F           8A46         0A            mov	al,$A[bp]
20086 4F22           30E4                       xor	ah,ah
20087 4F24           50                         push	ax
20088                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20089 4F25           E8         F765            call	_vgamem_copy_cga
20090 4F28           83C4                   0C  add	sp,*$C
20091                                           !BCC_EOS
20092                                           ! 2164              if (i>rlr) break;
20093                       00004F2B            .126:
20094                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20095 4F2B           8A46         0C            mov	al,$C[bp]
20096 4F2E           30E4                       xor	ah,ah
20097 4F30           3B46         F4            cmp	ax,-$C[bp]
20098 4F33           73           02            jae 	.127
20099                       00004F35            .128:
20100 4F35           EB           14            jmp .11F
20101                                           !BCC_EOS
20102                                           ! 2165             }
20103                       00004F37            .127:
20104                                           ! 2166           }
20105                       00004F37            .120:
20106                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20107 4F37           8B46         F4            mov	ax,-$C[bp]
20108 4F3A           48                         dec	ax
20109 4F3B           8946         F4            mov	-$C[bp],ax
20110                       00004F3E            .121:
20111                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20112 4F3E           8A46         08            mov	al,8[bp]
20113 4F41           30E4                       xor	ah,ah
20114 4F43           3B46         F4            cmp	ax,-$C[bp]
20115 4F46   7703    E9         FF7B            blos	.122
20116                       00004F4B            .129:
20117                       00004F4B            .11F:
20118                                           ! 2167         }
20119                       00004F4B            .11E:
20120                                           ! 2168        break;
20121                       00004F4B            .110:
20122 4F4B           EB           17            jmp .E6
20123                                           !BCC_EOS
20124                                           ! 2169     }
20125                                           ! 2170   }
20126 4F4D           EB           15            jmp .E6
20127                       00004F4F            .E8:
20128 4F4F           2C                     02  sub	al,*2
20129 4F51   7503    E9         FE1C            beq 	.109
20130 4F56           2C                     01  sub	al,*1
20131 4F58   7503    E9         FC5B            beq 	.EA
20132 4F5D           2C                     01  sub	al,*1
20133 4F5F   7503    E9         FC54            beq 	.E9
20134                       00004F64            .E6:
20135                       FFFFFFF0            ..FFFC	=	-$10
20136                                           ! 2171 }
20137                       00004F64            .E5:
20138 4F64           89EC                       mov	sp,bp
20139 4F66           5D                         pop	bp
20140 4F67           C3                         ret
20141                                           ! 2172 static void biosfn_read_char_attr (page,car)
20142                                           ! Register BX used in function biosfn_scroll
20143                                           ! 2173 Bit8u page;Bit16u *car;
20144                       00004F68            _biosfn_read_char_attr:
20145                                           !BCC_EOS
20146                                           !BCC_EOS
20147                                           ! 2174 {Bit16u ss=get_SS();
20148 4F68           55                         push	bp
20149 4F69           89E5                       mov	bp,sp
20150 4F6B           4C                         dec	sp
20151 4F6C           4C                         dec	sp
20152                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20153 4F6D           E8         2C65            call	_get_SS
20154                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20155 4F70           8946         FE            mov	-2[bp],ax
20156                                           !BCC_EOS
20157                                           ! 2175  Bit8u xcurs,ycurs,mode,line;
20158                                           !BCC_EOS
20159                                           ! 2176  Bit16u nbcols,nbrows,address;
20160                                           !BCC_EOS
20161                                           ! 2177  Bit16u cursor,dummy;
20162                                           !BCC_EOS
20163                                           ! 2178  mode=read_byte(0x40,0x49);
20164 4F73           83C4                   F2  add	sp,*-$E
20165                                           ! Debug: list int = const $49 (used reg = )
20166 4F76           B8                   0049  mov	ax,*$49
20167 4F79           50                         push	ax
20168                                           ! Debug: list int = const $40 (used reg = )
20169 4F7A           B8                   0040  mov	ax,*$40
20170 4F7D           50                         push	ax
20171                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20172 4F7E           E8         2BC8            call	_read_byte
20173 4F81           83C4                   04  add	sp,*4
20174                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20175 4F84           8846         FB            mov	-5[bp],al
20176                                           !BCC_EOS
20177                                           ! 2179  line=find_vga_entry(mode);
20178                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20179 4F87           8A46         FB            mov	al,-5[bp]
20180 4F8A           30E4                       xor	ah,ah
20181 4F8C           50                         push	ax
20182                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20183 4F8D           E8         2ACD            call	_find_vga_entry
20184 4F90           44                         inc	sp
20185 4F91           44                         inc	sp
20186                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20187 4F92           8846         FA            mov	-6[bp],al
20188                                           !BCC_EOS
20189                                           ! 2180  if(line==0xFF)return;
20190                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20191 4F95           8A46         FA            mov	al,-6[bp]
20192 4F98           3C                     FF  cmp	al,#$FF
20193 4F9A           75           04            jne 	.12A
20194                       00004F9C            .12B:
20195 4F9C           89EC                       mov	sp,bp
20196 4F9E           5D                         pop	bp
20197 4F9F           C3                         ret
20198                                           !BCC_EOS
20199                                           ! 2181  biosfn_get_cursor_pos(page,&dummy,&cursor);
20200                       00004FA0            .12A:
20201                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20202 4FA0           8D5E         F2            lea	bx,-$E[bp]
20203 4FA3           53                         push	bx
20204                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20205 4FA4           8D5E         F0            lea	bx,-$10[bp]
20206 4FA7           53                         push	bx
20207                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20208 4FA8           8A46         04            mov	al,4[bp]
20209 4FAB           30E4                       xor	ah,ah
20210 4FAD           50                         push	ax
20211                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20212 4FAE           E8         F3AB            call	_biosfn_get_cursor_pos
20213 4FB1           83C4                   06  add	sp,*6
20214                                           !BCC_EOS
20215                                           ! 2182  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>
20216                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20217 4FB4           8A46         F2            mov	al,-$E[bp]
20218                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20219 4FB7           8846         FD            mov	-3[bp],al
20220                                           !BCC_EOS
20221                                           ! 2182 >8;
20222                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20223 4FBA           8B46         F2            mov	ax,-$E[bp]
20224 4FBD           30C0                       xor	al,al
20225                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20226 4FBF           88E0                       mov	al,ah
20227 4FC1           30E4                       xor	ah,ah
20228                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20229 4FC3           8846         FC            mov	-4[bp],al
20230                                           !BCC_EOS
20231                                           ! 2183  nbrows=read_byte(0x40,0x84)+1;
20232                                           ! Debug: list int = const $84 (used reg = )
20233 4FC6           B8                   0084  mov	ax,#$84
20234 4FC9           50                         push	ax
20235                                           ! Debug: list int = const $40 (used reg = )
20236 4FCA           B8                   0040  mov	ax,*$40
20237 4FCD           50                         push	ax
20238                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20239 4FCE           E8         2B78            call	_read_byte
20240 4FD1           83C4                   04  add	sp,*4
20241                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20242 4FD4           30E4                       xor	ah,ah
20243                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20244 4FD6           40                         inc	ax
20245 4FD7           8946         F6            mov	-$A[bp],ax
20246                                           !BCC_EOS
20247                                           ! 2184  nbcols=read_word(0x40,0x4A);
20248                                           ! Debug: list int = const $4A (used reg = )
20249 4FDA           B8                   004A  mov	ax,*$4A
20250 4FDD           50                         push	ax
20251                                           ! Debug: list int = const $40 (used reg = )
20252 4FDE           B8                   0040  mov	ax,*$40
20253 4FE1           50                         push	ax
20254                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20255 4FE2           E8         2B77            call	_read_word
20256 4FE5           83C4                   04  add	sp,*4
20257                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20258 4FE8           8946         F8            mov	-8[bp],ax
20259                                           !BCC_EOS
20260                                           ! 2185  if(vga_modes[line].class==0x00)
20261                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20262 4FEB           8A46         FA            mov	al,-6[bp]
20263 4FEE           30E4                       xor	ah,ah
20264 4FF0           B1                     03  mov	cl,*3
20265 4FF2           D3E0                       shl	ax,cl
20266 4FF4           89C3                       mov	bx,ax
20267 4FF6           81C3                 01C3  add	bx,#_vga_modes
20268                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20269 4FFA           8A47         01            mov	al,1[bx]
20270 4FFD           84C0                       test	al,al
20271 4FFF           75           5E            jne 	.12C
20272                       00005001            .12D:
20273                                           ! 2186   {
20274                                           ! 2187    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20275                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20276 5001           8A46         FC            mov	al,-4[bp]
20277 5004           30E4                       xor	ah,ah
20278 5006           8B4E         F8            mov	cx,-8[bp]
20279 5009           F7E9                       imul	cx
20280                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20281                                           ! Debug: expression subtree swapping
20282 500B           0246         FD            add	al,-3[bp]
20283 500E           80D4                   00  adc	ah,*0
20284                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20285 5011           D1E0                       shl	ax,*1
20286 5013           50                         push	ax
20287                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20288 5014           8B46         F8            mov	ax,-8[bp]
20289 5017           8B4E         F6            mov	cx,-$A[bp]
20290 501A           F7E9                       imul	cx
20291                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20292 501C           D1E0                       shl	ax,*1
20293                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20294 501E           0C                     FF  or	al,#$FF
20295                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20296                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20297 5020           89C3                       mov	bx,ax
20298 5022           8A46         04            mov	al,4[bp]
20299 5025           30E4                       xor	ah,ah
20300 5027           93                         xchg	ax,bx
20301 5028           40                         inc	ax
20302 5029           89D9                       mov	cx,bx
20303 502B           F7E9                       imul	cx
20304                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20305 502D           0346         EE            add	ax,-$12[bp]
20306 5030           44                         inc	sp
20307 5031           44                         inc	sp
20308                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20309 5032           8946         F4            mov	-$C[bp],ax
20310                                           !BCC_EOS
20311                                           ! 2188    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20312                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20313 5035           FF76         F4            push	-$C[bp]
20314                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20315 5038           8A46         FA            mov	al,-6[bp]
20316 503B           30E4                       xor	ah,ah
20317 503D           B1                     03  mov	cl,*3
20318 503F           D3E0                       shl	ax,cl
20319 5041           89C3                       mov	bx,ax
20320 5043           81C3                 01C3  add	bx,#_vga_modes
20321                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20322 5047           FF77         04            push	4[bx]
20323                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20324 504A           E8         2B0F            call	_read_word
20325 504D           83C4                   04  add	sp,*4
20326                                           ! Debug: list unsigned short = ax+0 (used reg = )
20327 5050           50                         push	ax
20328                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20329 5051           FF76         06            push	6[bp]
20330                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20331 5054           FF76         FE            push	-2[bp]
20332                                           ! Debug: func () void = write_word+0 (used reg = )
20333 5057           E8         2B2D            call	_write_word
20334 505A           83C4                   06  add	sp,*6
20335                                           !BCC_EOS
20336                                           ! 2189   }
20337                                           ! 2190  else
20338                                           ! 2191   {
20339 505D           EB           00            jmp .12E
20340                       0000505F            .12C:
20341                                           ! 2192   }
20342                                           ! 2193 }
20343                       0000505F            .12E:
20344 505F           89EC                       mov	sp,bp
20345 5061           5D                         pop	bp
20346 5062           C3                         ret
20347                                           ! 2194 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20348                                           ! Register BX used in function biosfn_read_char_attr
20349                                           ! 2195 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20350                       00005063            _write_gfx_char_pl4:
20351                                           !BCC_EOS
20352                                           !BCC_EOS
20353                                           !BCC_EOS
20354                                           !BCC_EOS
20355                                           !BCC_EOS
20356                                           !BCC_EOS
20357                                           ! 2196 {
20358                                           ! 2197  Bit8u i,j,mask;
20359                                           !BCC_EOS
20360                                           ! 2198  Bit8u *fdata;
20361                                           !BCC_EOS
20362                                           ! 2199  Bit16u addr,dest,src;
20363                                           !BCC_EOS
20364                                           ! 2200  switch(cheight)
20365 5063           55                         push	bp
20366 5064           89E5                       mov	bp,sp
20367 5066           83C4                   F4  add	sp,*-$C
20368 5069           8A46         0E            mov	al,$E[bp]
20369                                           ! 2201   {case 14:
20370 506C           EB           18            jmp .131
20371                                           ! 2202     fdata = &vgafont14;
20372                       0000506E            .132:
20373                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20374 506E           BB                   1727  mov	bx,#_vgafont14
20375 5071           895E         FA            mov	-6[bp],bx
20376                                           !BCC_EOS
20377                                           ! 2203     break;
20378 5074           EB           1A            jmp .12F
20379                                           !BCC_EOS
20380                                           ! 2204    case 16:
20381                                           ! 2205     fdata = &vgafont16;
20382                       00005076            .133:
20383                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20384 5076           BB                   2527  mov	bx,#_vgafont16
20385 5079           895E         FA            mov	-6[bp],bx
20386                                           !BCC_EOS
20387                                           ! 2206     break;
20388 507C           EB           12            jmp .12F
20389                                           !BCC_EOS
20390                                           ! 2207    default:
20391                                           ! 2208     fdata = &vgafont8;
20392                       0000507E            .134:
20393                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20394 507E           BB                   0F27  mov	bx,#_vgafont8
20395 5081           895E         FA            mov	-6[bp],bx
20396                                           !BCC_EOS
20397                                           ! 2209   }
20398                                           ! 2210  addr=xcurs+ycurs*cheight*nbcols;
20399 5084           EB           0A            jmp .12F
20400                       00005086            .131:
20401 5086           2C                     0E  sub	al,*$E
20402 5088           74           E4            je 	.132
20403 508A           2C                     02  sub	al,*2
20404 508C           74           E8            je 	.133
20405 508E           EB           EE            jmp	.134
20406                       00005090            .12F:
20407                       FFFFFFF2            ..FFFB	=	-$E
20408                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20409 5090           8A46         0E            mov	al,$E[bp]
20410 5093           30E4                       xor	ah,ah
20411 5095           89C3                       mov	bx,ax
20412 5097           8A46         0A            mov	al,$A[bp]
20413 509A           30E4                       xor	ah,ah
20414 509C           89D9                       mov	cx,bx
20415 509E           F7E9                       imul	cx
20416                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20417 50A0           89C3                       mov	bx,ax
20418 50A2           8A46         0C            mov	al,$C[bp]
20419 50A5           30E4                       xor	ah,ah
20420 50A7           93                         xchg	ax,bx
20421 50A8           89D9                       mov	cx,bx
20422 50AA           F7E9                       imul	cx
20423                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20424                                           ! Debug: expression subtree swapping
20425 50AC           0246         08            add	al,8[bp]
20426 50AF           80D4                   00  adc	ah,*0
20427                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20428 50B2           8946         F8            mov	-8[bp],ax
20429                                           !BCC_EOS
20430                                           ! 2211  src = car * cheight;
20431                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20432 50B5           8A46         0E            mov	al,$E[bp]
20433 50B8           30E4                       xor	ah,ah
20434 50BA           89C3                       mov	bx,ax
20435 50BC           8A46         04            mov	al,4[bp]
20436 50BF           30E4                       xor	ah,ah
20437 50C1           89D9                       mov	cx,bx
20438 50C3           F7E9                       imul	cx
20439                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20440 50C5           8946         F4            mov	-$C[bp],ax
20441                                           !BCC_EOS
20442                                           ! 2212  outw(0x3c4, 0x0f02);
20443                                           ! Debug: list int = const $F02 (used reg = )
20444 50C8           B8                   0F02  mov	ax,#$F02
20445 50CB           50                         push	ax
20446                                           ! Debug: list int = const $3C4 (used reg = )
20447 50CC           B8                   03C4  mov	ax,#$3C4
20448 50CF           50                         push	ax
20449                                           ! Debug: func () void = outw+0 (used reg = )
20450 50D0           E8         2AF2            call	_outw
20451 50D3           83C4                   04  add	sp,*4
20452                                           !BCC_EOS
20453                                           ! 2213  outw(0x3ce, 0x0205);
20454                                           ! Debug: list int = const $205 (used reg = )
20455 50D6           B8                   0205  mov	ax,#$205
20456 50D9           50                         push	ax
20457                                           ! Debug: list int = const $3CE (used reg = )
20458 50DA           B8                   03CE  mov	ax,#$3CE
20459 50DD           50                         push	ax
20460                                           ! Debug: func () void = outw+0 (used reg = )
20461 50DE           E8         2AE4            call	_outw
20462 50E1           83C4                   04  add	sp,*4
20463                                           !BCC_EOS
20464                                           ! 2214  if(attr&0x80)
20465                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20466 50E4           8A46         06            mov	al,6[bp]
20467 50E7           24                     80  and	al,#$80
20468 50E9           84C0                       test	al,al
20469 50EB           74           10            je  	.135
20470                       000050ED            .136:
20471                                           ! 2215   {
20472                                           ! 2216    outw(0x3ce, 0x1803);
20473                                           ! Debug: list int = const $1803 (used reg = )
20474 50ED           B8                   1803  mov	ax,#$1803
20475 50F0           50                         push	ax
20476                                           ! Debug: list int = const $3CE (used reg = )
20477 50F1           B8                   03CE  mov	ax,#$3CE
20478 50F4           50                         push	ax
20479                                           ! Debug: func () void = outw+0 (used reg = )
20480 50F5           E8         2ACD            call	_outw
20481 50F8           83C4                   04  add	sp,*4
20482                                           !BCC_EOS
20483                                           ! 2217   }
20484                                           ! 2218  else
20485                                           ! 2219   {
20486 50FB           EB           0E            jmp .137
20487                       000050FD            .135:
20488                                           ! 2220    outw(0x3ce, 0x0003);
20489                                           ! Debug: list int = const 3 (used reg = )
20490 50FD           B8                   0003  mov	ax,*3
20491 5100           50                         push	ax
20492                                           ! Debug: list int = const $3CE (used reg = )
20493 5101           B8                   03CE  mov	ax,#$3CE
20494 5104           50                         push	ax
20495                                           ! Debug: func () void = outw+0 (used reg = )
20496 5105           E8         2ABD            call	_outw
20497 5108           83C4                   04  add	sp,*4
20498                                           !BCC_EOS
20499                                           ! 2221   }
20500                                           ! 2222  for(i=0;i<cheight;i++)
20501                       0000510B            .137:
20502                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20503 510B           30C0                       xor	al,al
20504 510D           8846         FF            mov	-1[bp],al
20505                                           !BCC_EOS
20506                                           !BCC_EOS
20507                                           ! 2223   {
20508 5110           E9         00A7            br 	.13A
20509                       00005113            .13B:
20510                                           ! 2224    dest=addr+i*nbcols;
20511                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20512 5113           8A46         0C            mov	al,$C[bp]
20513 5116           30E4                       xor	ah,ah
20514 5118           89C3                       mov	bx,ax
20515 511A           8A46         FF            mov	al,-1[bp]
20516 511D           30E4                       xor	ah,ah
20517 511F           89D9                       mov	cx,bx
20518 5121           F7E9                       imul	cx
20519                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20520                                           ! Debug: expression subtree swapping
20521 5123           0346         F8            add	ax,-8[bp]
20522                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20523 5126           8946         F6            mov	-$A[bp],ax
20524                                           !BCC_EOS
20525                                           ! 2225    for(j=0;j<8;j++)
20526                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20527 5129           30C0                       xor	al,al
20528 512B           8846         FE            mov	-2[bp],al
20529                                           !BCC_EOS
20530                                           !BCC_EOS
20531                                           ! 2226     {
20532 512E           EB           79            jmp .13E
20533                       00005130            .13F:
20534                                           ! 2227      mask=0x80>>j;
20535                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
20536 5130           8A46         FE            mov	al,-2[bp]
20537 5133           30E4                       xor	ah,ah
20538 5135           89C3                       mov	bx,ax
20539 5137           B8                   0080  mov	ax,#$80
20540 513A           89D9                       mov	cx,bx
20541 513C           D3F8                       sar	ax,cl
20542                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
20543 513E           8846         FD            mov	-3[bp],al
20544                                           !BCC_EOS
20545                                           ! 2228      outw(0x3ce, (mask << 8) | 0x08);
20546                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
20547 5141           8A46         FD            mov	al,-3[bp]
20548 5144           30E4                       xor	ah,ah
20549 5146           88C4                       mov	ah,al
20550 5148           30C0                       xor	al,al
20551                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
20552 514A           0C                     08  or	al,*8
20553                                           ! Debug: list unsigned int = ax+0 (used reg = )
20554 514C           50                         push	ax
20555                                           ! Debug: list int = const $3CE (used reg = )
20556 514D           B8                   03CE  mov	ax,#$3CE
20557 5150           50                         push	ax
20558                                           ! Debug: func () void = outw+0 (used reg = )
20559 5151           E8         2A71            call	_outw
20560 5154           83C4                   04  add	sp,*4
20561                                           !BCC_EOS
20562                                           ! 2229      read_byte(0xa000,dest);
20563                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20564 5157           FF76         F6            push	-$A[bp]
20565                                           ! Debug: list unsigned int = const $A000 (used reg = )
20566 515A           B8                   A000  mov	ax,#$A000
20567 515D           50                         push	ax
20568                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20569 515E           E8         29E8            call	_read_byte
20570 5161           83C4                   04  add	sp,*4
20571                                           !BCC_EOS
20572                                           ! 2230      if(fdata[src+i]&mask)
20573                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20574 5164           8B46         F4            mov	ax,-$C[bp]
20575 5167           0246         FF            add	al,-1[bp]
20576 516A           80D4                   00  adc	ah,*0
20577                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20578 516D           0346         FA            add	ax,-6[bp]
20579 5170           89C3                       mov	bx,ax
20580                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20581 5172           8A07                       mov	al,[bx]
20582 5174           2246         FD            and	al,-3[bp]
20583 5177           84C0                       test	al,al
20584 5179           74           17            je  	.140
20585                       0000517B            .141:
20586                                           ! 2231       {
20587                                           ! 2232        write_byte(0xa000,dest,attr&0x0f);
20588                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
20589 517B           8A46         06            mov	al,6[bp]
20590 517E           24                     0F  and	al,*$F
20591                                           ! Debug: list unsigned char = al+0 (used reg = )
20592 5180           30E4                       xor	ah,ah
20593 5182           50                         push	ax
20594                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20595 5183           FF76         F6            push	-$A[bp]
20596                                           ! Debug: list unsigned int = const $A000 (used reg = )
20597 5186           B8                   A000  mov	ax,#$A000
20598 5189           50                         push	ax
20599                                           ! Debug: func () void = write_byte+0 (used reg = )
20600 518A           E8         29E2            call	_write_byte
20601 518D           83C4                   06  add	sp,*6
20602                                           !BCC_EOS
20603                                           ! 2233       }
20604                                           ! 2234      else
20605                                           ! 2235       {
20606 5190           EB           10            jmp .142
20607                       00005192            .140:
20608                                           ! 2236        write_byte(0xa000,dest,0x00);
20609                                           ! Debug: list int = const 0 (used reg = )
20610 5192           31C0                       xor	ax,ax
20611 5194           50                         push	ax
20612                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20613 5195           FF76         F6            push	-$A[bp]
20614                                           ! Debug: list unsigned int = const $A000 (used reg = )
20615 5198           B8                   A000  mov	ax,#$A000
20616 519B           50                         push	ax
20617                                           ! Debug: func () void = write_byte+0 (used reg = )
20618 519C           E8         29D0            call	_write_byte
20619 519F           83C4                   06  add	sp,*6
20620                                           !BCC_EOS
20621                                           ! 2237       }
20622                                           ! 2238     }
20623                       000051A2            .142:
20624                                           ! 2239   }
20625                       000051A2            .13D:
20626                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20627 51A2           8A46         FE            mov	al,-2[bp]
20628 51A5           40                         inc	ax
20629 51A6           8846         FE            mov	-2[bp],al
20630                       000051A9            .13E:
20631                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20632 51A9           8A46         FE            mov	al,-2[bp]
20633 51AC           3C                     08  cmp	al,*8
20634 51AE   7303    E9         FF7D            blo 	.13F
20635                       000051B3            .143:
20636                       000051B3            .13C:
20637                                           ! 2240 #asm
20638                       000051B3            .139:
20639                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
20640 51B3           8A46         FF            mov	al,-1[bp]
20641 51B6           40                         inc	ax
20642 51B7           8846         FF            mov	-1[bp],al
20643                       000051BA            .13A:
20644                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
20645 51BA           8A46         FF            mov	al,-1[bp]
20646 51BD           3A46         0E            cmp	al,$E[bp]
20647 51C0   7303    E9         FF4E            blo 	.13B
20648                       000051C5            .144:
20649                       000051C5            .138:
20650                                           !BCC_EOS
20651                                           !BCC_ASM
20652                       0000000A            _write_gfx_char_pl4.j	set	$A
20653                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
20654                       00000006            _write_gfx_char_pl4.fdata	set	6
20655                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
20656                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
20657                       0000000E            .write_gfx_char_pl4.cheight	set	$E
20658                       00000018            _write_gfx_char_pl4.nbcols	set	$18
20659                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
20660                       0000000B            _write_gfx_char_pl4.i	set	$B
20661                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
20662                       00000016            _write_gfx_char_pl4.ycurs	set	$16
20663                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
20664                       00000009            _write_gfx_char_pl4.mask	set	9
20665                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
20666                       00000002            _write_gfx_char_pl4.dest	set	2
20667                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
20668                       00000014            _write_gfx_char_pl4.xcurs	set	$14
20669                       00000008            .write_gfx_char_pl4.xcurs	set	8
20670                       00000000            _write_gfx_char_pl4.src	set	0
20671                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
20672                       00000012            _write_gfx_char_pl4.attr	set	$12
20673                       00000006            .write_gfx_char_pl4.attr	set	6
20674                       00000010            _write_gfx_char_pl4.car	set	$10
20675                       00000004            .write_gfx_char_pl4.car	set	4
20676                       00000004            _write_gfx_char_pl4.addr	set	4
20677                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
20678 51C5           BA                   03CE    mov dx, # 0x3ce
20679 51C8           B8                   FF08    mov ax, #0xff08
20680 51CB           EF                           out dx, ax
20681 51CC           B8                   0005    mov ax, #0x0005
20682 51CF           EF                           out dx, ax
20683 51D0           B8                   0003    mov ax, #0x0003
20684 51D3           EF                           out dx, ax
20685                                           ! 2248 endasm
20686                                           !BCC_ENDASM
20687                                           !BCC_EOS
20688                                           ! 2249 }
20689 51D4           89EC                       mov	sp,bp
20690 51D6           5D                         pop	bp
20691 51D7           C3                         ret
20692                                           ! 2250 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
20693                                           ! Register BX used in function write_gfx_char_pl4
20694                                           ! 2251 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
20695                       000051D8            _write_gfx_char_cga:
20696                                           !BCC_EOS
20697                                           !BCC_EOS
20698                                           !BCC_EOS
20699                                           !BCC_EOS
20700                                           !BCC_EOS
20701                                           !BCC_EOS
20702                                           ! 2252 {
20703                                           ! 2253  Bit8u i,j,mask,data;
20704                                           !BCC_EOS
20705                                           ! 2254  Bit8u *fdata;
20706                                           !BCC_EOS
20707                                           ! 2255  Bit16u addr,dest,src;
20708                                           !BCC_EOS
20709                                           ! 2256  fdata = &vgafont8;
20710 51D8           55                         push	bp
20711 51D9           89E5                       mov	bp,sp
20712 51DB           83C4                   F4  add	sp,*-$C
20713                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20714 51DE           BB                   0F27  mov	bx,#_vgafont8
20715 51E1           895E         FA            mov	-6[bp],bx
20716                                           !BCC_EOS
20717                                           ! 2257  addr=(xcurs*bpp)+ycurs*320;
20718                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
20719 51E4           8A46         0A            mov	al,$A[bp]
20720 51E7           30E4                       xor	ah,ah
20721 51E9           B9                   0140  mov	cx,#$140
20722 51EC           F7E9                       imul	cx
20723 51EE           50                         push	ax
20724                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
20725 51EF           8A46         0E            mov	al,$E[bp]
20726 51F2           30E4                       xor	ah,ah
20727 51F4           89C3                       mov	bx,ax
20728 51F6           8A46         08            mov	al,8[bp]
20729 51F9           30E4                       xor	ah,ah
20730 51FB           89D9                       mov	cx,bx
20731 51FD           F7E9                       imul	cx
20732                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
20733 51FF           0346         F2            add	ax,-$E[bp]
20734 5202           44                         inc	sp
20735 5203           44                         inc	sp
20736                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20737 5204           8946         F8            mov	-8[bp],ax
20738                                           !BCC_EOS
20739                                           ! 2258  src = car * 8;
20740                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
20741 5207           8A46         04            mov	al,4[bp]
20742 520A           30E4                       xor	ah,ah
20743 520C           B1                     03  mov	cl,*3
20744 520E           D3E0                       shl	ax,cl
20745                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20746 5210           8946         F4            mov	-$C[bp],ax
20747                                           !BCC_EOS
20748                                           ! 2259  for(i=0;i<8;i++)
20749                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20750 5213           30C0                       xor	al,al
20751 5215           8846         FF            mov	-1[bp],al
20752                                           !BCC_EOS
20753                                           !BCC_EOS
20754                                           ! 2260   {
20755 5218           E9         01B5            br 	.147
20756                       0000521B            .148:
20757                                           ! 2261    dest=addr+(i>>1)*80;
20758                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20759 521B           8A46         FF            mov	al,-1[bp]
20760 521E           30E4                       xor	ah,ah
20761 5220           D1E8                       shr	ax,*1
20762                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
20763 5222           B9                   0050  mov	cx,*$50
20764 5225           F7E9                       imul	cx
20765                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20766                                           ! Debug: expression subtree swapping
20767 5227           0346         F8            add	ax,-8[bp]
20768                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20769 522A           8946         F6            mov	-$A[bp],ax
20770                                           !BCC_EOS
20771                                           ! 2262    if (i & 1) dest += 0x2000;
20772                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20773 522D           8A46         FF            mov	al,-1[bp]
20774 5230           24                     01  and	al,*1
20775 5232           84C0                       test	al,al
20776 5234           74           09            je  	.149
20777                       00005236            .14A:
20778                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
20779 5236           8B46         F6            mov	ax,-$A[bp]
20780 5239           05                   2000  add	ax,#$2000
20781 523C           8946         F6            mov	-$A[bp],ax
20782                                           !BCC_EOS
20783                                           ! 2263    mask = 0x80;
20784                       0000523F            .149:
20785                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
20786 523F           B0                     80  mov	al,#$80
20787 5241           8846         FD            mov	-3[bp],al
20788                                           !BCC_EOS
20789                                           ! 2264    if (bpp == 1)
20790                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
20791 5244           8A46         0E            mov	al,$E[bp]
20792 5247           3C                     01  cmp	al,*1
20793 5249   7403    E9         00B3            bne 	.14B
20794                       0000524E            .14C:
20795                                           ! 2265     {
20796                                           ! 2266      if (attr & 0x80)
20797                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20798 524E           8A46         06            mov	al,6[bp]
20799 5251           24                     80  and	al,#$80
20800 5253           84C0                       test	al,al
20801 5255           74           12            je  	.14D
20802                       00005257            .14E:
20803                                           ! 2267       {
20804                                           ! 2268        data = read_byte(0xb800,dest);
20805                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20806 5257           FF76         F6            push	-$A[bp]
20807                                           ! Debug: list unsigned int = const $B800 (used reg = )
20808 525A           B8                   B800  mov	ax,#$B800
20809 525D           50                         push	ax
20810                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20811 525E           E8         28E8            call	_read_byte
20812 5261           83C4                   04  add	sp,*4
20813                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20814 5264           8846         FC            mov	-4[bp],al
20815                                           !BCC_EOS
20816                                           ! 2269       }
20817                                           ! 2270      else
20818                                           ! 2271       {
20819 5267           EB           05            jmp .14F
20820                       00005269            .14D:
20821                                           ! 2272        data = 0x00;
20822                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20823 5269           30C0                       xor	al,al
20824 526B           8846         FC            mov	-4[bp],al
20825                                           !BCC_EOS
20826                                           ! 2273       }
20827                                           ! 2274      for(j=0;j<8;j++)
20828                       0000526E            .14F:
20829                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20830 526E           30C0                       xor	al,al
20831 5270           8846         FE            mov	-2[bp],al
20832                                           !BCC_EOS
20833                                           !BCC_EOS
20834                                           ! 2275       {
20835 5273           EB           6F            jmp .152
20836                       00005275            .153:
20837                                           ! 2276        if (fdata[src+i] & mask)
20838                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20839 5275           8B46         F4            mov	ax,-$C[bp]
20840 5278           0246         FF            add	al,-1[bp]
20841 527B           80D4                   00  adc	ah,*0
20842                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20843 527E           0346         FA            add	ax,-6[bp]
20844 5281           89C3                       mov	bx,ax
20845                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20846 5283           8A07                       mov	al,[bx]
20847 5285           2246         FD            and	al,-3[bp]
20848 5288           84C0                       test	al,al
20849 528A           74           47            je  	.154
20850                       0000528C            .155:
20851                                           ! 2277         {
20852                                           ! 2278          if (attr & 0x80)
20853                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20854 528C           8A46         06            mov	al,6[bp]
20855 528F           24                     80  and	al,#$80
20856 5291           84C0                       test	al,al
20857 5293           74           20            je  	.156
20858                       00005295            .157:
20859                                           ! 2279           {
20860                                           ! 2280            data ^= (attr & 0x01) << (7-j);
20861                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
20862 5295           B8                   0007  mov	ax,*7
20863 5298           2A46         FE            sub	al,-2[bp]
20864 529B           80DC                   00  sbb	ah,*0
20865 529E           50                         push	ax
20866                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
20867 529F           8A46         06            mov	al,6[bp]
20868 52A2           24                     01  and	al,*1
20869                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
20870 52A4           30E4                       xor	ah,ah
20871 52A6           8B4E         F2            mov	cx,-$E[bp]
20872 52A9           D3E0                       shl	ax,cl
20873 52AB           44                         inc	sp
20874 52AC           44                         inc	sp
20875                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
20876 52AD           3246         FC            xor	al,-4[bp]
20877 52B0           8846         FC            mov	-4[bp],al
20878                                           !BCC_EOS
20879                                           ! 2281           }
20880                                           ! 2282          else
20881                                           ! 2283           {
20882 52B3           EB           1E            jmp .158
20883                       000052B5            .156:
20884                                           ! 2284            data |= (attr & 0x01) << (7-j);
20885                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
20886 52B5           B8                   0007  mov	ax,*7
20887 52B8           2A46         FE            sub	al,-2[bp]
20888 52BB           80DC                   00  sbb	ah,*0
20889 52BE           50                         push	ax
20890                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
20891 52BF           8A46         06            mov	al,6[bp]
20892 52C2           24                     01  and	al,*1
20893                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
20894 52C4           30E4                       xor	ah,ah
20895 52C6           8B4E         F2            mov	cx,-$E[bp]
20896 52C9           D3E0                       shl	ax,cl
20897 52CB           44                         inc	sp
20898 52CC           44                         inc	sp
20899                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
20900 52CD           0A46         FC            or	al,-4[bp]
20901 52D0           8846         FC            mov	-4[bp],al
20902                                           !BCC_EOS
20903                                           ! 2285           }
20904                                           ! 2286         }
20905                       000052D3            .158:
20906                                           ! 2287        mask >>= 1;
20907                       000052D3            .154:
20908                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
20909 52D3           8A46         FD            mov	al,-3[bp]
20910 52D6           30E4                       xor	ah,ah
20911 52D8           D1E8                       shr	ax,*1
20912 52DA           8846         FD            mov	-3[bp],al
20913                                           !BCC_EOS
20914                                           ! 2288       }
20915                                           ! 2289      write_byte(0xb800,dest
20916                       000052DD            .151:
20917                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20918 52DD           8A46         FE            mov	al,-2[bp]
20919 52E0           40                         inc	ax
20920 52E1           8846         FE            mov	-2[bp],al
20921                       000052E4            .152:
20922                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20923 52E4           8A46         FE            mov	al,-2[bp]
20924 52E7           3C                     08  cmp	al,*8
20925 52E9           72           8A            jb 	.153
20926                       000052EB            .159:
20927                       000052EB            .150:
20928                                           ! 2289 ,data);
20929                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
20930 52EB           8A46         FC            mov	al,-4[bp]
20931 52EE           30E4                       xor	ah,ah
20932 52F0           50                         push	ax
20933                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20934 52F1           FF76         F6            push	-$A[bp]
20935                                           ! Debug: list unsigned int = const $B800 (used reg = )
20936 52F4           B8                   B800  mov	ax,#$B800
20937 52F7           50                         push	ax
20938                                           ! Debug: func () void = write_byte+0 (used reg = )
20939 52F8           E8         2874            call	_write_byte
20940 52FB           83C4                   06  add	sp,*6
20941                                           !BCC_EOS
20942                                           ! 2290     }
20943                                           ! 2291    else
20944                                           ! 2292     {
20945 52FE           E9         00C8            br 	.15A
20946                       00005301            .14B:
20947                                           ! 2293      while (mask > 0)
20948                                           ! 2294       {
20949 5301           E9         00BB            br 	.15C
20950                       00005304            .15D:
20951                                           ! 2295        if (attr & 0x80)
20952                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20953 5304           8A46         06            mov	al,6[bp]
20954 5307           24                     80  and	al,#$80
20955 5309           84C0                       test	al,al
20956 530B           74           12            je  	.15E
20957                       0000530D            .15F:
20958                                           ! 2296         {
20959                                           ! 2297          data = read_byte(0xb800,dest);
20960                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20961 530D           FF76         F6            push	-$A[bp]
20962                                           ! Debug: list unsigned int = const $B800 (used reg = )
20963 5310           B8                   B800  mov	ax,#$B800
20964 5313           50                         push	ax
20965                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20966 5314           E8         2832            call	_read_byte
20967 5317           83C4                   04  add	sp,*4
20968                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20969 531A           8846         FC            mov	-4[bp],al
20970                                           !BCC_EOS
20971                                           ! 2298         }
20972                                           ! 2299        else
20973                                           ! 2300         {
20974 531D           EB           05            jmp .160
20975                       0000531F            .15E:
20976                                           ! 2301          data = 0x00;
20977                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20978 531F           30C0                       xor	al,al
20979 5321           8846         FC            mov	-4[bp],al
20980                                           !BCC_EOS
20981                                           ! 2302         }
20982                                           ! 2303        for(j=0;j<4;j++)
20983                       00005324            .160:
20984                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20985 5324           30C0                       xor	al,al
20986 5326           8846         FE            mov	-2[bp],al
20987                                           !BCC_EOS
20988                                           !BCC_EOS
20989                                           ! 2304         {
20990 5329           EB           73            jmp .163
20991                       0000532B            .164:
20992                                           ! 2305          if (fdata[src+i] & mask)
20993                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20994 532B           8B46         F4            mov	ax,-$C[bp]
20995 532E           0246         FF            add	al,-1[bp]
20996 5331           80D4                   00  adc	ah,*0
20997                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20998 5334           0346         FA            add	ax,-6[bp]
20999 5337           89C3                       mov	bx,ax
21000                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21001 5339           8A07                       mov	al,[bx]
21002 533B           2246         FD            and	al,-3[bp]
21003 533E           84C0                       test	al,al
21004 5340           74           4B            je  	.165
21005                       00005342            .166:
21006                                           ! 2306           {
21007                                           ! 2307            if (attr & 0x80)
21008                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21009 5342           8A46         06            mov	al,6[bp]
21010 5345           24                     80  and	al,#$80
21011 5347           84C0                       test	al,al
21012 5349           74           22            je  	.167
21013                       0000534B            .168:
21014                                           ! 2308             {
21015                                           ! 2309              data ^= (attr & 0x03) << ((3-j)*2);
21016                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21017 534B           B8                   0003  mov	ax,*3
21018 534E           2A46         FE            sub	al,-2[bp]
21019 5351           80DC                   00  sbb	ah,*0
21020                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21021 5354           D1E0                       shl	ax,*1
21022 5356           50                         push	ax
21023                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21024 5357           8A46         06            mov	al,6[bp]
21025 535A           24                     03  and	al,*3
21026                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21027 535C           30E4                       xor	ah,ah
21028 535E           8B4E         F2            mov	cx,-$E[bp]
21029 5361           D3E0                       shl	ax,cl
21030 5363           44                         inc	sp
21031 5364           44                         inc	sp
21032                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21033 5365           3246         FC            xor	al,-4[bp]
21034 5368           8846         FC            mov	-4[bp],al
21035                                           !BCC_EOS
21036                                           ! 2310             }
21037                                           ! 2311            else
21038                                           ! 2312             {
21039 536B           EB           20            jmp .169
21040                       0000536D            .167:
21041                                           ! 2313              data |= (attr & 0x03) << ((3-j)*2);
21042                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21043 536D           B8                   0003  mov	ax,*3
21044 5370           2A46         FE            sub	al,-2[bp]
21045 5373           80DC                   00  sbb	ah,*0
21046                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21047 5376           D1E0                       shl	ax,*1
21048 5378           50                         push	ax
21049                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21050 5379           8A46         06            mov	al,6[bp]
21051 537C           24                     03  and	al,*3
21052                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21053 537E           30E4                       xor	ah,ah
21054 5380           8B4E         F2            mov	cx,-$E[bp]
21055 5383           D3E0                       shl	ax,cl
21056 5385           44                         inc	sp
21057 5386           44                         inc	sp
21058                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21059 5387           0A46         FC            or	al,-4[bp]
21060 538A           8846         FC            mov	-4[bp],al
21061                                           !BCC_EOS
21062                                           ! 2314             }
21063                                           ! 2315           }
21064                       0000538D            .169:
21065                                           ! 2316          mask >>= 1;
21066                       0000538D            .165:
21067                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21068 538D           8A46         FD            mov	al,-3[bp]
21069 5390           30E4                       xor	ah,ah
21070 5392           D1E8                       shr	ax,*1
21071 5394           8846         FD            mov	-3[bp],al
21072                                           !BCC_EOS
21073                                           ! 2317         }
21074                                           ! 2318        write_byte(0xb800,dest,data);
21075                       00005397            .162:
21076                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21077 5397           8A46         FE            mov	al,-2[bp]
21078 539A           40                         inc	ax
21079 539B           8846         FE            mov	-2[bp],al
21080                       0000539E            .163:
21081                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21082 539E           8A46         FE            mov	al,-2[bp]
21083 53A1           3C                     04  cmp	al,*4
21084 53A3           72           86            jb 	.164
21085                       000053A5            .16A:
21086                       000053A5            .161:
21087                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21088 53A5           8A46         FC            mov	al,-4[bp]
21089 53A8           30E4                       xor	ah,ah
21090 53AA           50                         push	ax
21091                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21092 53AB           FF76         F6            push	-$A[bp]
21093                                           ! Debug: list unsigned int = const $B800 (used reg = )
21094 53AE           B8                   B800  mov	ax,#$B800
21095 53B1           50                         push	ax
21096                                           ! Debug: func () void = write_byte+0 (used reg = )
21097 53B2           E8         27BA            call	_write_byte
21098 53B5           83C4                   06  add	sp,*6
21099                                           !BCC_EOS
21100                                           ! 2319        dest += 1;
21101                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21102 53B8           8B46         F6            mov	ax,-$A[bp]
21103 53BB           40                         inc	ax
21104 53BC           8946         F6            mov	-$A[bp],ax
21105                                           !BCC_EOS
21106                                           ! 2320       }
21107                                           ! 2321     }
21108                       000053BF            .15C:
21109                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21110 53BF           8A46         FD            mov	al,-3[bp]
21111 53C2           84C0                       test	al,al
21112 53C4   7403    E9         FF3B            bne 	.15D
21113                       000053C9            .16B:
21114                       000053C9            .15B:
21115                                           ! 2322   }
21116                       000053C9            .15A:
21117                                           ! 2323 }
21118                       000053C9            .146:
21119                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21120 53C9           8A46         FF            mov	al,-1[bp]
21121 53CC           40                         inc	ax
21122 53CD           8846         FF            mov	-1[bp],al
21123                       000053D0            .147:
21124                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21125 53D0           8A46         FF            mov	al,-1[bp]
21126 53D3           3C                     08  cmp	al,*8
21127 53D5   7303    E9         FE41            blo 	.148
21128                       000053DA            .16C:
21129                       000053DA            .145:
21130 53DA           89EC                       mov	sp,bp
21131 53DC           5D                         pop	bp
21132 53DD           C3                         ret
21133                                           ! 2324 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21134                                           ! Register BX used in function write_gfx_char_cga
21135                                           ! 2325 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21136                       000053DE            _write_gfx_char_lin:
21137                                           !BCC_EOS
21138                                           !BCC_EOS
21139                                           !BCC_EOS
21140                                           !BCC_EOS
21141                                           !BCC_EOS
21142                                           ! 2326 {
21143                                           ! 2327  Bit8u i,j,mask,data;
21144                                           !BCC_EOS
21145                                           ! 2328  Bit8u *fdata;
21146                                           !BCC_EOS
21147                                           ! 2329  Bit16u addr,dest,src;
21148                                           !BCC_EOS
21149                                           ! 2330  fdata = &vgafont8;
21150 53DE           55                         push	bp
21151 53DF           89E5                       mov	bp,sp
21152 53E1           83C4                   F4  add	sp,*-$C
21153                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21154 53E4           BB                   0F27  mov	bx,#_vgafont8
21155 53E7           895E         FA            mov	-6[bp],bx
21156                                           !BCC_EOS
21157                                           ! 2331  addr=xcurs*8+ycurs*nbcols*64;
21158                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21159 53EA           8A46         0C            mov	al,$C[bp]
21160 53ED           30E4                       xor	ah,ah
21161 53EF           89C3                       mov	bx,ax
21162 53F1           8A46         0A            mov	al,$A[bp]
21163 53F4           30E4                       xor	ah,ah
21164 53F6           89D9                       mov	cx,bx
21165 53F8           F7E9                       imul	cx
21166                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21167 53FA           B1                     06  mov	cl,*6
21168 53FC           D3E0                       shl	ax,cl
21169 53FE           50                         push	ax
21170                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21171 53FF           8A46         08            mov	al,8[bp]
21172 5402           30E4                       xor	ah,ah
21173 5404           B1                     03  mov	cl,*3
21174 5406           D3E0                       shl	ax,cl
21175                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21176 5408           0346         F2            add	ax,-$E[bp]
21177 540B           44                         inc	sp
21178 540C           44                         inc	sp
21179                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21180 540D           8946         F8            mov	-8[bp],ax
21181                                           !BCC_EOS
21182                                           ! 2332  src = car * 8;
21183                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21184 5410           8A46         04            mov	al,4[bp]
21185 5413           30E4                       xor	ah,ah
21186 5415           B1                     03  mov	cl,*3
21187 5417           D3E0                       shl	ax,cl
21188                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21189 5419           8946         F4            mov	-$C[bp],ax
21190                                           !BCC_EOS
21191                                           ! 2333  for(i=0;i<8;i++)
21192                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21193 541C           30C0                       xor	al,al
21194 541E           8846         FF            mov	-1[bp],al
21195                                           !BCC_EOS
21196                                           !BCC_EOS
21197                                           ! 2334   {
21198 5421           E9         0081            br 	.16F
21199                       00005424            .170:
21200                                           ! 2335    dest=addr+i*nbcols*8;
21201                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21202 5424           8A46         0C            mov	al,$C[bp]
21203 5427           30E4                       xor	ah,ah
21204 5429           89C3                       mov	bx,ax
21205 542B           8A46         FF            mov	al,-1[bp]
21206 542E           30E4                       xor	ah,ah
21207 5430           89D9                       mov	cx,bx
21208 5432           F7E9                       imul	cx
21209                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21210 5434           B1                     03  mov	cl,*3
21211 5436           D3E0                       shl	ax,cl
21212                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21213                                           ! Debug: expression subtree swapping
21214 5438           0346         F8            add	ax,-8[bp]
21215                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21216 543B           8946         F6            mov	-$A[bp],ax
21217                                           !BCC_EOS
21218                                           ! 2336    mask = 0x80;
21219                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21220 543E           B0                     80  mov	al,#$80
21221 5440           8846         FD            mov	-3[bp],al
21222                                           !BCC_EOS
21223                                           ! 2337    for(j=0;j<8;j++)
21224                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21225 5443           30C0                       xor	al,al
21226 5445           8846         FE            mov	-2[bp],al
21227                                           !BCC_EOS
21228                                           !BCC_EOS
21229                                           ! 2338     {
21230 5448           EB           4D            jmp .173
21231                       0000544A            .174:
21232                                           ! 2339      data = 0x00;
21233                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21234 544A           30C0                       xor	al,al
21235 544C           8846         FC            mov	-4[bp],al
21236                                           !BCC_EOS
21237                                           ! 2340      if (fdata[src+i] & mask)
21238                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21239 544F           8B46         F4            mov	ax,-$C[bp]
21240 5452           0246         FF            add	al,-1[bp]
21241 5455           80D4                   00  adc	ah,*0
21242                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21243 5458           0346         FA            add	ax,-6[bp]
21244 545B           89C3                       mov	bx,ax
21245                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21246 545D           8A07                       mov	al,[bx]
21247 545F           2246         FD            and	al,-3[bp]
21248 5462           84C0                       test	al,al
21249 5464           74           06            je  	.175
21250                       00005466            .176:
21251                                           ! 2341       {
21252                                           ! 2342        data = attr;
21253                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21254 5466           8A46         06            mov	al,6[bp]
21255 5469           8846         FC            mov	-4[bp],al
21256                                           !BCC_EOS
21257                                           ! 2343       }
21258                                           ! 2344      write_byte(0xa000,dest+j,data);
21259                       0000546C            .175:
21260                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21261 546C           8A46         FC            mov	al,-4[bp]
21262 546F           30E4                       xor	ah,ah
21263 5471           50                         push	ax
21264                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21265 5472           8B46         F6            mov	ax,-$A[bp]
21266 5475           0246         FE            add	al,-2[bp]
21267 5478           80D4                   00  adc	ah,*0
21268                                           ! Debug: list unsigned int = ax+0 (used reg = )
21269 547B           50                         push	ax
21270                                           ! Debug: list unsigned int = const $A000 (used reg = )
21271 547C           B8                   A000  mov	ax,#$A000
21272 547F           50                         push	ax
21273                                           ! Debug: func () void = write_byte+0 (used reg = )
21274 5480           E8         26EC            call	_write_byte
21275 5483           83C4                   06  add	sp,*6
21276                                           !BCC_EOS
21277                                           ! 2345      mask >>= 1;
21278                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21279 5486           8A46         FD            mov	al,-3[bp]
21280 5489           30E4                       xor	ah,ah
21281 548B           D1E8                       shr	ax,*1
21282 548D           8846         FD            mov	-3[bp],al
21283                                           !BCC_EOS
21284                                           ! 2346     }
21285                                           ! 2347   }
21286                       00005490            .172:
21287                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21288 5490           8A46         FE            mov	al,-2[bp]
21289 5493           40                         inc	ax
21290 5494           8846         FE            mov	-2[bp],al
21291                       00005497            .173:
21292                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21293 5497           8A46         FE            mov	al,-2[bp]
21294 549A           3C                     08  cmp	al,*8
21295 549C           72           AC            jb 	.174
21296                       0000549E            .177:
21297                       0000549E            .171:
21298                                           ! 2348 }
21299                       0000549E            .16E:
21300                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21301 549E           8A46         FF            mov	al,-1[bp]
21302 54A1           40                         inc	ax
21303 54A2           8846         FF            mov	-1[bp],al
21304                       000054A5            .16F:
21305                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21306 54A5           8A46         FF            mov	al,-1[bp]
21307 54A8           3C                     08  cmp	al,*8
21308 54AA   7303    E9         FF75            blo 	.170
21309                       000054AF            .178:
21310                       000054AF            .16D:
21311 54AF           89EC                       mov	sp,bp
21312 54B1           5D                         pop	bp
21313 54B2           C3                         ret
21314                                           ! 2349 static void biosfn_write_char_attr (car,page,attr,count)
21315                                           ! Register BX used in function write_gfx_char_lin
21316                                           ! 2350 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21317                       000054B3            _biosfn_write_char_attr:
21318                                           !BCC_EOS
21319                                           !BCC_EOS
21320                                           !BCC_EOS
21321                                           !BCC_EOS
21322                                           ! 2351 {
21323                                           ! 2352  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21324                                           !BCC_EOS
21325                                           ! 2353  Bit16u nbcols,nbrows,address;
21326                                           !BCC_EOS
21327                                           ! 2354  Bit16u cursor,dummy;
21328                                           !BCC_EOS
21329                                           ! 2355  mode=read_byte(0x40,0x49);
21330 54B3           55                         push	bp
21331 54B4           89E5                       mov	bp,sp
21332 54B6           83C4                   F0  add	sp,*-$10
21333                                           ! Debug: list int = const $49 (used reg = )
21334 54B9           B8                   0049  mov	ax,*$49
21335 54BC           50                         push	ax
21336                                           ! Debug: list int = const $40 (used reg = )
21337 54BD           B8                   0040  mov	ax,*$40
21338 54C0           50                         push	ax
21339                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21340 54C1           E8         2685            call	_read_byte
21341 54C4           83C4                   04  add	sp,*4
21342                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21343 54C7           8846         FC            mov	-4[bp],al
21344                                           !BCC_EOS
21345                                           ! 2356  line=find_vga_entry(mode);
21346                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21347 54CA           8A46         FC            mov	al,-4[bp]
21348 54CD           30E4                       xor	ah,ah
21349 54CF           50                         push	ax
21350                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21351 54D0           E8         258A            call	_find_vga_entry
21352 54D3           44                         inc	sp
21353 54D4           44                         inc	sp
21354                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21355 54D5           8846         FB            mov	-5[bp],al
21356                                           !BCC_EOS
21357                                           ! 2357  if(line==0xFF)return;
21358                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21359 54D8           8A46         FB            mov	al,-5[bp]
21360 54DB           3C                     FF  cmp	al,#$FF
21361 54DD           75           04            jne 	.179
21362                       000054DF            .17A:
21363 54DF           89EC                       mov	sp,bp
21364 54E1           5D                         pop	bp
21365 54E2           C3                         ret
21366                                           !BCC_EOS
21367                                           ! 2358  biosfn_get_cursor_pos(page,&dummy,&cursor);
21368                       000054E3            .179:
21369                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21370 54E3           8D5E         F2            lea	bx,-$E[bp]
21371 54E6           53                         push	bx
21372                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21373 54E7           8D5E         F0            lea	bx,-$10[bp]
21374 54EA           53                         push	bx
21375                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21376 54EB           8A46         06            mov	al,6[bp]
21377 54EE           30E4                       xor	ah,ah
21378 54F0           50                         push	ax
21379                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21380 54F1           E8         EE68            call	_biosfn_get_cursor_pos
21381 54F4           83C4                   06  add	sp,*6
21382                                           !BCC_EOS
21383                                           ! 2359  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21384                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21385 54F7           8A46         F2            mov	al,-$E[bp]
21386                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21387 54FA           8846         FE            mov	-2[bp],al
21388                                           !BCC_EOS
21389                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21390 54FD           8B46         F2            mov	ax,-$E[bp]
21391 5500           30C0                       xor	al,al
21392                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21393 5502           88E0                       mov	al,ah
21394 5504           30E4                       xor	ah,ah
21395                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21396 5506           8846         FD            mov	-3[bp],al
21397                                           !BCC_EOS
21398                                           ! 2360  nbrows=read_byte(0x40,0x84)+1;
21399                                           ! Debug: list int = const $84 (used reg = )
21400 5509           B8                   0084  mov	ax,#$84
21401 550C           50                         push	ax
21402                                           ! Debug: list int = const $40 (used reg = )
21403 550D           B8                   0040  mov	ax,*$40
21404 5510           50                         push	ax
21405                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21406 5511           E8         2635            call	_read_byte
21407 5514           83C4                   04  add	sp,*4
21408                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21409 5517           30E4                       xor	ah,ah
21410                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21411 5519           40                         inc	ax
21412 551A           8946         F6            mov	-$A[bp],ax
21413                                           !BCC_EOS
21414                                           ! 2361  nbcols=read_word(0x40,0x4A);
21415                                           ! Debug: list int = const $4A (used reg = )
21416 551D           B8                   004A  mov	ax,*$4A
21417 5520           50                         push	ax
21418                                           ! Debug: list int = const $40 (used reg = )
21419 5521           B8                   0040  mov	ax,*$40
21420 5524           50                         push	ax
21421                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21422 5525           E8         2634            call	_read_word
21423 5528           83C4                   04  add	sp,*4
21424                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21425 552B           8946         F8            mov	-8[bp],ax
21426                                           !BCC_EOS
21427                                           ! 2362  if(vga_modes[line].class==0x00)
21428                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21429 552E           8A46         FB            mov	al,-5[bp]
21430 5531           30E4                       xor	ah,ah
21431 5533           B1                     03  mov	cl,*3
21432 5535           D3E0                       shl	ax,cl
21433 5537           89C3                       mov	bx,ax
21434 5539           81C3                 01C3  add	bx,#_vga_modes
21435                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21436 553D           8A47         01            mov	al,1[bx]
21437 5540           84C0                       test	al,al
21438 5542           75           6A            jne 	.17B
21439                       00005544            .17C:
21440                                           ! 2363   {
21441                                           ! 2364    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21442                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21443 5544           8A46         FD            mov	al,-3[bp]
21444 5547           30E4                       xor	ah,ah
21445 5549           8B4E         F8            mov	cx,-8[bp]
21446 554C           F7E9                       imul	cx
21447                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21448                                           ! Debug: expression subtree swapping
21449 554E           0246         FE            add	al,-2[bp]
21450 5551           80D4                   00  adc	ah,*0
21451                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21452 5554           D1E0                       shl	ax,*1
21453 5556           50                         push	ax
21454                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21455 5557           8B46         F8            mov	ax,-8[bp]
21456 555A           8B4E         F6            mov	cx,-$A[bp]
21457 555D           F7E9                       imul	cx
21458                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21459 555F           D1E0                       shl	ax,*1
21460                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21461 5561           0C                     FF  or	al,#$FF
21462                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21463                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21464 5563           89C3                       mov	bx,ax
21465 5565           8A46         06            mov	al,6[bp]
21466 5568           30E4                       xor	ah,ah
21467 556A           93                         xchg	ax,bx
21468 556B           40                         inc	ax
21469 556C           89D9                       mov	cx,bx
21470 556E           F7E9                       imul	cx
21471                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21472 5570           0346         EE            add	ax,-$12[bp]
21473 5573           44                         inc	sp
21474 5574           44                         inc	sp
21475                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21476 5575           8946         F4            mov	-$C[bp],ax
21477                                           !BCC_EOS
21478                                           ! 2365    dummy=((Bit16u)attr<<8)+car;
21479                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21480 5578           8A46         08            mov	al,8[bp]
21481 557B           30E4                       xor	ah,ah
21482                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21483 557D           88C4                       mov	ah,al
21484 557F           30C0                       xor	al,al
21485                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21486 5581           0246         04            add	al,4[bp]
21487 5584           80D4                   00  adc	ah,*0
21488                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21489 5587           8946         F0            mov	-$10[bp],ax
21490                                           !BCC_EOS
21491                                           ! 2366    memsetw(vga_modes[line].sstart,address,dummy,count);
21492                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21493 558A           FF76         0A            push	$A[bp]
21494                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21495 558D           FF76         F0            push	-$10[bp]
21496                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21497 5590           FF76         F4            push	-$C[bp]
21498                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21499 5593           8A46         FB            mov	al,-5[bp]
21500 5596           30E4                       xor	ah,ah
21501 5598           B1                     03  mov	cl,*3
21502 559A           D3E0                       shl	ax,cl
21503 559C           89C3                       mov	bx,ax
21504 559E           81C3                 01C3  add	bx,#_vga_modes
21505                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21506 55A2           FF77         04            push	4[bx]
21507                                           ! Debug: func () void = memsetw+0 (used reg = )
21508 55A5           E8         251C            call	_memsetw
21509 55A8           83C4                   08  add	sp,*8
21510                                           !BCC_EOS
21511                                           ! 2367   }
21512                                           ! 2368  else
21513                                           ! 2369   {
21514 55AB           E9         00F6            br 	.17D
21515                       000055AE            .17B:
21516                                           ! 2370    cheight=video_param_table[line_to_vpti[line]].cheight;
21517                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21518 55AE           8A46         FB            mov	al,-5[bp]
21519 55B1           30E4                       xor	ah,ah
21520 55B3           89C3                       mov	bx,ax
21521                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21522 55B5           8A87       0243            mov	al,_line_to_vpti[bx]
21523 55B9           30E4                       xor	ah,ah
21524 55BB           B1                     06  mov	cl,*6
21525 55BD           D3E0                       shl	ax,cl
21526 55BF           89C3                       mov	bx,ax
21527 55C1           81C3                 0257  add	bx,#_video_param_table
21528                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21529 55C5           8A47         02            mov	al,2[bx]
21530 55C8           8846         FF            mov	-1[bp],al
21531                                           !BCC_EOS
21532                                           ! 2371    bpp=vga_modes[line].pixbits;
21533                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21534 55CB           8A46         FB            mov	al,-5[bp]
21535 55CE           30E4                       xor	ah,ah
21536 55D0           B1                     03  mov	cl,*3
21537 55D2           D3E0                       shl	ax,cl
21538 55D4           89C3                       mov	bx,ax
21539 55D6           81C3                 01C3  add	bx,#_vga_modes
21540                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21541 55DA           8A47         03            mov	al,3[bx]
21542 55DD           8846         FA            mov	-6[bp],al
21543                                           !BCC_EOS
21544                                           ! 2372    while((count-->0) && (xcurs<nbcols))
21545                                           ! 2373     {
21546 55E0           E9         00A8            br 	.17F
21547                       000055E3            .180:
21548                                           ! 2374      switch(vga_modes[line].memmodel)
21549                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21550 55E3           8A46         FB            mov	al,-5[bp]
21551 55E6           30E4                       xor	ah,ah
21552 55E8           B1                     03  mov	cl,*3
21553 55EA           D3E0                       shl	ax,cl
21554 55EC           89C3                       mov	bx,ax
21555 55EE           81C3                 01C3  add	bx,#_vga_modes
21556 55F2           8A47         02            mov	al,2[bx]
21557                                           ! 2375       {
21558 55F5           EB           77            jmp .183
21559                                           ! 2376        case 0x04:
21560                                           ! 2377        case 0x03:
21561                       000055F7            .184:
21562                                           ! 2378          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
21563                       000055F7            .185:
21564                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21565 55F7           8A46         FF            mov	al,-1[bp]
21566 55FA           30E4                       xor	ah,ah
21567 55FC           50                         push	ax
21568                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21569 55FD           FF76         F8            push	-8[bp]
21570                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21571 5600           8A46         FD            mov	al,-3[bp]
21572 5603           30E4                       xor	ah,ah
21573 5605           50                         push	ax
21574                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21575 5606           8A46         FE            mov	al,-2[bp]
21576 5609           30E4                       xor	ah,ah
21577 560B           50                         push	ax
21578                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21579 560C           8A46         08            mov	al,8[bp]
21580 560F           30E4                       xor	ah,ah
21581 5611           50                         push	ax
21582                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21583 5612           8A46         04            mov	al,4[bp]
21584 5615           30E4                       xor	ah,ah
21585 5617           50                         push	ax
21586                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21587 5618           E8         FA48            call	_write_gfx_char_pl4
21588 561B           83C4                   0C  add	sp,*$C
21589                                           !BCC_EOS
21590                                           ! 2379          break;
21591 561E           EB           64            jmp .181
21592                                           !BCC_EOS
21593                                           ! 2380        case 0x02:
21594                                           ! 2381       
21595                                           ! 2381    write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21596                       00005620            .186:
21597                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21598 5620           8A46         FA            mov	al,-6[bp]
21599 5623           30E4                       xor	ah,ah
21600 5625           50                         push	ax
21601                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21602 5626           FF76         F8            push	-8[bp]
21603                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21604 5629           8A46         FD            mov	al,-3[bp]
21605 562C           30E4                       xor	ah,ah
21606 562E           50                         push	ax
21607                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21608 562F           8A46         FE            mov	al,-2[bp]
21609 5632           30E4                       xor	ah,ah
21610 5634           50                         push	ax
21611                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21612 5635           8A46         08            mov	al,8[bp]
21613 5638           30E4                       xor	ah,ah
21614 563A           50                         push	ax
21615                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21616 563B           8A46         04            mov	al,4[bp]
21617 563E           30E4                       xor	ah,ah
21618 5640           50                         push	ax
21619                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
21620 5641           E8         FB94            call	_write_gfx_char_cga
21621 5644           83C4                   0C  add	sp,*$C
21622                                           !BCC_EOS
21623                                           ! 2382          break;
21624 5647           EB           3B            jmp .181
21625                                           !BCC_EOS
21626                                           ! 2383        case 0x05:
21627                                           ! 2384          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
21628                       00005649            .187:
21629                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
21630 5649           FF76         F8            push	-8[bp]
21631                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
21632 564C           8A46         FD            mov	al,-3[bp]
21633 564F           30E4                       xor	ah,ah
21634 5651           50                         push	ax
21635                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
21636 5652           8A46         FE            mov	al,-2[bp]
21637 5655           30E4                       xor	ah,ah
21638 5657           50                         push	ax
21639                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
21640 5658           8A46         08            mov	al,8[bp]
21641 565B           30E4                       xor	ah,ah
21642 565D           50                         push	ax
21643                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
21644 565E           8A46         04            mov	al,4[bp]
21645 5661           30E4                       xor	ah,ah
21646 5663           50                         push	ax
21647                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
21648 5664           E8         FD77            call	_write_gfx_char_lin
21649 5667           83C4                   0A  add	sp,*$A
21650                                           !BCC_EOS
21651                                           ! 2385          break;
21652 566A           EB           18            jmp .181
21653                                           !BCC_EOS
21654                                           ! 2386       }
21655                                           ! 2387      xcurs++;
21656 566C           EB           16            jmp .181
21657                       0000566E            .183:
21658 566E           2C                     02  sub	al,*2
21659 5670           74           AE            je 	.186
21660 5672           2C                     01  sub	al,*1
21661 5674   7503    E9         FF7E            beq 	.185
21662 5679           2C                     01  sub	al,*1
21663 567B   7503    E9         FF77            beq 	.184
21664 5680           2C                     01  sub	al,*1
21665 5682           74           C5            je 	.187
21666                       00005684            .181:
21667                       FFFFFFEE            ..FFFA	=	-$12
21668                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
21669 5684           8A46         FE            mov	al,-2[bp]
21670 5687           40                         inc	ax
21671 5688           8846         FE            mov	-2[bp],al
21672                                           !BCC_EOS
21673                                           ! 2388     }
21674                                           ! 2389   }
21675                       0000568B            .17F:
21676                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21677 568B           8B46         0A            mov	ax,$A[bp]
21678 568E           48                         dec	ax
21679 568F           8946         0A            mov	$A[bp],ax
21680                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21681 5692           3D                   FFFF  cmp	ax,*-1
21682 5695           74           0D            je  	.188
21683                       00005697            .189:
21684                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
21685 5697           8A46         FE            mov	al,-2[bp]
21686 569A           30E4                       xor	ah,ah
21687 569C           3B46         F8            cmp	ax,-8[bp]
21688 569F   7303    E9         FF3F            blo 	.180
21689                       000056A4            .188:
21690                       000056A4            .17E:
21691                                           ! 2390 }
21692                       000056A4            .17D:
21693 56A4           89EC                       mov	sp,bp
21694 56A6           5D                         pop	bp
21695 56A7           C3                         ret
21696                                           ! 2391 static void biosfn_write_char_only (car,page,attr,count)
21697                                           ! Register BX used in function biosfn_write_char_attr
21698                                           ! 2392 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21699                       000056A8            _biosfn_write_char_only:
21700                                           !BCC_EOS
21701                                           !BCC_EOS
21702                                           !BCC_EOS
21703                                           !BCC_EOS
21704                                           ! 2393 {
21705                                           ! 2394  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21706                                           !BCC_EOS
21707                                           ! 2395  Bit16u nbcols,nbrows,address;
21708                                           !BCC_EOS
21709                                           ! 2396  Bit16u cursor,dummy;
21710                                           !BCC_EOS
21711                                           ! 2397  mode=read_byte(0x40,0x49);
21712 56A8           55                         push	bp
21713 56A9           89E5                       mov	bp,sp
21714 56AB           83C4                   F0  add	sp,*-$10
21715                                           ! Debug: list int = const $49 (used reg = )
21716 56AE           B8                   0049  mov	ax,*$49
21717 56B1           50                         push	ax
21718                                           ! Debug: list int = const $40 (used reg = )
21719 56B2           B8                   0040  mov	ax,*$40
21720 56B5           50                         push	ax
21721                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21722 56B6           E8         2490            call	_read_byte
21723 56B9           83C4                   04  add	sp,*4
21724                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21725 56BC           8846         FC            mov	-4[bp],al
21726                                           !BCC_EOS
21727                                           ! 2398  line=find_vga_entry(mode);
21728                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21729 56BF           8A46         FC            mov	al,-4[bp]
21730 56C2           30E4                       xor	ah,ah
21731 56C4           50                         push	ax
21732                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21733 56C5           E8         2395            call	_find_vga_entry
21734 56C8           44                         inc	sp
21735 56C9           44                         inc	sp
21736                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21737 56CA           8846         FB            mov	-5[bp],al
21738                                           !BCC_EOS
21739                                           ! 2399  if(line==0xFF)return;
21740                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21741 56CD           8A46         FB            mov	al,-5[bp]
21742 56D0           3C                     FF  cmp	al,#$FF
21743 56D2           75           04            jne 	.18A
21744                       000056D4            .18B:
21745 56D4           89EC                       mov	sp,bp
21746 56D6           5D                         pop	bp
21747 56D7           C3                         ret
21748                                           !BCC_EOS
21749                                           ! 2400  biosfn_get_cursor_pos(page,&dummy,&cursor);
21750                       000056D8            .18A:
21751                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21752 56D8           8D5E         F2            lea	bx,-$E[bp]
21753 56DB           53                         push	bx
21754                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21755 56DC           8D5E         F0            lea	bx,-$10[bp]
21756 56DF           53                         push	bx
21757                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21758 56E0           8A46         06            mov	al,6[bp]
21759 56E3           30E4                       xor	ah,ah
21760 56E5           50                         push	ax
21761                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21762 56E6           E8         EC73            call	_biosfn_get_cursor_pos
21763 56E9           83C4                   06  add	sp,*6
21764                                           !BCC_EOS
21765                                           ! 2401  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21766                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21767 56EC           8A46         F2            mov	al,-$E[bp]
21768                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21769 56EF           8846         FE            mov	-2[bp],al
21770                                           !BCC_EOS
21771                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21772 56F2           8B46         F2            mov	ax,-$E[bp]
21773 56F5           30C0                       xor	al,al
21774                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21775 56F7           88E0                       mov	al,ah
21776 56F9           30E4                       xor	ah,ah
21777                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21778 56FB           8846         FD            mov	-3[bp],al
21779                                           !BCC_EOS
21780                                           ! 2402  nbrows=read_byte(0x40,0x84)+1;
21781                                           ! Debug: list int = const $84 (used reg = )
21782 56FE           B8                   0084  mov	ax,#$84
21783 5701           50                         push	ax
21784                                           ! Debug: list int = const $40 (used reg = )
21785 5702           B8                   0040  mov	ax,*$40
21786 5705           50                         push	ax
21787                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21788 5706           E8         2440            call	_read_byte
21789 5709           83C4                   04  add	sp,*4
21790                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21791 570C           30E4                       xor	ah,ah
21792                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21793 570E           40                         inc	ax
21794 570F           8946         F6            mov	-$A[bp],ax
21795                                           !BCC_EOS
21796                                           ! 2403  nbcols=read_word(0x40,0x4A);
21797                                           ! Debug: list int = const $4A (used reg = )
21798 5712           B8                   004A  mov	ax,*$4A
21799 5715           50                         push	ax
21800                                           ! Debug: list int = const $40 (used reg = )
21801 5716           B8                   0040  mov	ax,*$40
21802 5719           50                         push	ax
21803                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21804 571A           E8         243F            call	_read_word
21805 571D           83C4                   04  add	sp,*4
21806                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21807 5720           8946         F8            mov	-8[bp],ax
21808                                           !BCC_EOS
21809                                           ! 2404  if(vga_modes[line].class==0x00)
21810                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21811 5723           8A46         FB            mov	al,-5[bp]
21812 5726           30E4                       xor	ah,ah
21813 5728           B1                     03  mov	cl,*3
21814 572A           D3E0                       shl	ax,cl
21815 572C           89C3                       mov	bx,ax
21816 572E           81C3                 01C3  add	bx,#_vga_modes
21817                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21818 5732           8A47         01            mov	al,1[bx]
21819 5735           84C0                       test	al,al
21820 5737           75           6E            jne 	.18C
21821                       00005739            .18D:
21822                                           ! 2405   {
21823                                           ! 2406    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21824                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21825 5739           8A46         FD            mov	al,-3[bp]
21826 573C           30E4                       xor	ah,ah
21827 573E           8B4E         F8            mov	cx,-8[bp]
21828 5741           F7E9                       imul	cx
21829                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21830                                           ! Debug: expression subtree swapping
21831 5743           0246         FE            add	al,-2[bp]
21832 5746           80D4                   00  adc	ah,*0
21833                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21834 5749           D1E0                       shl	ax,*1
21835 574B           50                         push	ax
21836                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21837 574C           8B46         F8            mov	ax,-8[bp]
21838 574F           8B4E         F6            mov	cx,-$A[bp]
21839 5752           F7E9                       imul	cx
21840                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21841 5754           D1E0                       shl	ax,*1
21842                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21843 5756           0C                     FF  or	al,#$FF
21844                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21845                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21846 5758           89C3                       mov	bx,ax
21847 575A           8A46         06            mov	al,6[bp]
21848 575D           30E4                       xor	ah,ah
21849 575F           93                         xchg	ax,bx
21850 5760           40                         inc	ax
21851 5761           89D9                       mov	cx,bx
21852 5763           F7E9                       imul	cx
21853                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21854 5765           0346         EE            add	ax,-$12[bp]
21855 5768           44                         inc	sp
21856 5769           44                         inc	sp
21857                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21858 576A           8946         F4            mov	-$C[bp],ax
21859                                           !BCC_EOS
21860                                           ! 2407    while(count-->0)
21861                                           ! 2408     {write_byte(vga_modes[line].sstart,address,car);
21862 576D           EB           29            jmp .18F
21863                       0000576F            .190:
21864                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
21865 576F           8A46         04            mov	al,4[bp]
21866 5772           30E4                       xor	ah,ah
21867 5774           50                         push	ax
21868                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
21869 5775           FF76         F4            push	-$C[bp]
21870                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
21871 5778           8A46         FB            mov	al,-5[bp]
21872 577B           30E4                       xor	ah,ah
21873 577D           B1                     03  mov	cl,*3
21874 577F           D3E0                       shl	ax,cl
21875 5781           89C3                       mov	bx,ax
21876 5783           81C3                 01C3  add	bx,#_vga_modes
21877                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21878 5787           FF77         04            push	4[bx]
21879                                           ! Debug: func () void = write_byte+0 (used reg = )
21880 578A           E8         23E2            call	_write_byte
21881 578D           83C4                   06  add	sp,*6
21882                                           !BCC_EOS
21883                                           ! 2409      address+=2;
21884                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
21885 5790           8B46         F4            mov	ax,-$C[bp]
21886 5793           40                         inc	ax
21887 5794           40                         inc	ax
21888 5795           8946         F4            mov	-$C[bp],ax
21889                                           !BCC_EOS
21890                                           ! 2410     }
21891                                           ! 2411   }
21892                       00005798            .18F:
21893                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21894 5798           8B46         0A            mov	ax,$A[bp]
21895 579B           48                         dec	ax
21896 579C           8946         0A            mov	$A[bp],ax
21897                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21898 579F           3D                   FFFF  cmp	ax,*-1
21899 57A2           75           CB            jne	.190
21900                       000057A4            .191:
21901                       000057A4            .18E:
21902                                           ! 2412  else
21903                                           ! 2413   {
21904 57A4           E9         00F6            br 	.192
21905                       000057A7            .18C:
21906                                           ! 2414    cheight=video_param_table[line_to_vpti[line]].cheight;
21907                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21908 57A7           8A46         FB            mov	al,-5[bp]
21909 57AA           30E4                       xor	ah,ah
21910 57AC           89C3                       mov	bx,ax
21911                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21912 57AE           8A87       0243            mov	al,_line_to_vpti[bx]
21913 57B2           30E4                       xor	ah,ah
21914 57B4           B1                     06  mov	cl,*6
21915 57B6           D3E0                       shl	ax,cl
21916 57B8           89C3                       mov	bx,ax
21917 57BA           81C3                 0257  add	bx,#_video_param_table
21918                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21919 57BE           8A47         02            mov	al,2[bx]
21920 57C1           8846         FF            mov	-1[bp],al
21921                                           !BCC_EOS
21922                                           ! 2415    bpp=vga_modes[line].pixbits;
21923                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21924 57C4           8A46         FB            mov	al,-5[bp]
21925 57C7           30E4                       xor	ah,ah
21926 57C9           B1                     03  mov	cl,*3
21927 57CB           D3E0                       shl	ax,cl
21928 57CD           89C3                       mov	bx,ax
21929 57CF           81C3                 01C3  add	bx,#_vga_modes
21930                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21931 57D3           8A47         03            mov	al,3[bx]
21932 57D6           8846         FA            mov	-6[bp],al
21933                                           !BCC_EOS
21934                                           ! 2416    while((count-->0) && (xcurs<nbcols))
21935                                           ! 2417     {
21936 57D9           E9         00A8            br 	.194
21937                       000057DC            .195:
21938                                           ! 2418      switch(vga_modes[line].memmodel)
21939                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21940 57DC           8A46         FB            mov	al,-5[bp]
21941 57DF           30E4                       xor	ah,ah
21942 57E1           B1                     03  mov	cl,*3
21943 57E3           D3E0                       shl	ax,cl
21944 57E5           89C3                       mov	bx,ax
21945 57E7           81C3                 01C3  add	bx,#_vga_modes
21946 57EB           8A47         02            mov	al,2[bx]
21947                                           ! 2419       {
21948 57EE           EB           77            jmp .198
21949                                           ! 2420        case 0x04:
21950                                           ! 2421        case 0x03:
21951                       000057F0            .199:
21952                                           ! 2422          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
21953                       000057F0            .19A:
21954                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21955 57F0           8A46         FF            mov	al,-1[bp]
21956 57F3           30E4                       xor	ah,ah
21957 57F5           50                         push	ax
21958                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21959 57F6           FF76         F8            push	-8[bp]
21960                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21961 57F9           8A46         FD            mov	al,-3[bp]
21962 57FC           30E4                       xor	ah,ah
21963 57FE           50                         push	ax
21964                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21965 57FF           8A46         FE            mov	al,-2[bp]
21966 5802           30E4                       xor	ah,ah
21967 5804           50                         push	ax
21968                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21969 5805           8A46         08            mov	al,8[bp]
21970 5808           30E4                       xor	ah,ah
21971 580A           50                         push	ax
21972                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21973 580B           8A46         04            mov	al,4[bp]
21974 580E           30E4                       xor	ah,ah
21975 5810           50                         push	ax
21976                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21977 5811           E8         F84F            call	_write_gfx_char_pl4
21978 5814           83C4                   0C  add	sp,*$C
21979                                           !BCC_EOS
21980                                           ! 2423          break;
21981 5817           EB           64            jmp .196
21982                                           !BCC_EOS
21983                                           ! 2424        case 0x02:
21984                                           ! 2425          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21985                       00005819            .19B:
21986                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21987 5819           8A46         FA            mov	al,-6[bp]
21988 581C           30E4                       xor	ah,ah
21989 581E           50                         push	ax
21990                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21991 581F           FF76         F8            push	-8[bp]
21992                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21993 5822           8A46         FD            mov	al,-3[bp]
21994 5825           30E4                       xor	ah,ah
21995 5827           50                         push	ax
21996                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21997 5828           8A46         FE            mov	al,-2[bp]
21998 582B           30E4                       xor	ah,ah
21999 582D           50                         push	ax
22000                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22001 582E           8A46         08            mov	al,8[bp]
22002 5831           30E4                       xor	ah,ah
22003 5833           50                         push	ax
22004                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22005 5834           8A46         04            mov	al,4[bp]
22006 5837           30E4                       xor	ah,ah
22007 5839           50                         push	ax
22008                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22009 583A           E8         F99B            call	_write_gfx_char_cga
22010 583D           83C4                   0C  add	sp,*$C
22011                                           !BCC_EOS
22012                                           ! 2426          break;
22013 5840           EB           3B            jmp .196
22014                                           !BCC_EOS
22015                                           ! 2427        case 0x05:
22016                                           ! 2428          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22017                       00005842            .19C:
22018                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22019 5842           FF76         F8            push	-8[bp]
22020                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22021 5845           8A46         FD            mov	al,-3[bp]
22022 5848           30E4                       xor	ah,ah
22023 584A           50                         push	ax
22024                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22025 584B           8A46         FE            mov	al,-2[bp]
22026 584E           30E4                       xor	ah,ah
22027 5850           50                         push	ax
22028                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22029 5851           8A46         08            mov	al,8[bp]
22030 5854           30E4                       xor	ah,ah
22031 5856           50                         push	ax
22032                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22033 5857           8A46         04            mov	al,4[bp]
22034 585A           30E4                       xor	ah,ah
22035 585C           50                         push	ax
22036                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22037 585D           E8         FB7E            call	_write_gfx_char_lin
22038 5860           83C4                   0A  add	sp,*$A
22039                                           !BCC_EOS
22040                                           ! 2429          break;
22041 5863           EB           18            jmp .196
22042                                           !BCC_EOS
22043                                           ! 2430       }
22044                                           ! 2431      xcurs++;
22045 5865           EB           16            jmp .196
22046                       00005867            .198:
22047 5867           2C                     02  sub	al,*2
22048 5869           74           AE            je 	.19B
22049 586B           2C                     01  sub	al,*1
22050 586D   7503    E9         FF7E            beq 	.19A
22051 5872           2C                     01  sub	al,*1
22052 5874   7503    E9         FF77            beq 	.199
22053 5879           2C                     01  sub	al,*1
22054 587B           74           C5            je 	.19C
22055                       0000587D            .196:
22056                       FFFFFFEE            ..FFF9	=	-$12
22057                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22058 587D           8A46         FE            mov	al,-2[bp]
22059 5880           40                         inc	ax
22060 5881           8846         FE            mov	-2[bp],al
22061                                           !BCC_EOS
22062                                           ! 2432     }
22063                                           ! 2433   }
22064                       00005884            .194:
22065                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22066 5884           8B46         0A            mov	ax,$A[bp]
22067 5887           48                         dec	ax
22068 5888           8946         0A            mov	$A[bp],ax
22069                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22070 588B           3D                   FFFF  cmp	ax,*-1
22071 588E           74           0D            je  	.19D
22072                       00005890            .19E:
22073                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22074 5890           8A46         FE            mov	al,-2[bp]
22075 5893           30E4                       xor	ah,ah
22076 5895           3B46         F8            cmp	ax,-8[bp]
22077 5898   7303    E9         FF3F            blo 	.195
22078                       0000589D            .19D:
22079                       0000589D            .193:
22080                                           ! 2434 }
22081                       0000589D            .192:
22082 589D           89EC                       mov	sp,bp
22083 589F           5D                         pop	bp
22084 58A0           C3                         ret
22085                                           ! 2435 #asm
22086                                           !BCC_ASM
22087                       00000008            _biosfn_write_char_only.count	set	8
22088                       00000006            _biosfn_write_char_only.attr	set	6
22089                       00000004            _biosfn_write_char_only.page	set	4
22090                       00000002            _biosfn_write_char_only.car	set	2
22091                       000058A1            biosfn_group_0B:
22092 58A1           80FF                   00    cmp bh, #0x00
22093 58A4           74           06              je biosfn_set_border_color
22094 58A6           80FF                   01    cmp bh, #0x01
22095 58A9           74           40              je biosfn_set_palette
22096 58AB           C3                           ret
22097                       000058AC            biosfn_set_border_color:
22098 58AC           50                           push ax
22099 58AD           53                           push bx
22100 58AE           51                           push cx
22101 58AF           52                           push dx
22102 58B0           BA                   03DA    mov dx, # 0x3da
22103 58B3           EC                           in al, dx
22104 58B4           BA                   03C0    mov dx, # 0x3c0
22105 58B7           B0                     00    mov al, #0x00
22106 58B9           EE                           out dx, al
22107 58BA           88D8                         mov al, bl
22108 58BC           24                     0F    and al, #0x0f
22109 58BE           A8                     08    test al, #0x08
22110 58C0           74           02              jz set_low_border
22111 58C2           04                     08    add al, #0x08
22112                       000058C4            set_low_border:
22113 58C4           EE                           out dx, al
22114 58C5           B1                     01    mov cl, #0x01
22115 58C7           80E3                   10    and bl, #0x10
22116                       000058CA            set_intensity_loop:
22117 58CA           BA                   03C0    mov dx, # 0x3c0
22118 58CD           88C8                         mov al, cl
22119 58CF           EE                           out dx, al
22120 58D0           BA                   03C1    mov dx, # 0x3c1
22121 58D3           EC                           in al, dx
22122 58D4           24                     EF    and al, #0xef
22123 58D6           08D8                         or al, bl
22124 58D8           BA                   03C0    mov dx, # 0x3c0
22125 58DB           EE                           out dx, al
22126 58DC           FEC1                         inc cl
22127 58DE           80F9                   04    cmp cl, #0x04
22128 58E1           75           E7              jne set_intensity_loop
22129 58E3           B0                     20    mov al, #0x20
22130 58E5           EE                           out dx, al
22131 58E6           5A                           pop dx
22132 58E7           59                           pop cx
22133 58E8           5B                           pop bx
22134 58E9           58                           pop ax
22135 58EA           C3                           ret
22136                       000058EB            biosfn_set_palette:
22137 58EB           50                           push ax
22138 58EC           53                           push bx
22139 58ED           51                           push cx
22140 58EE           52                           push dx
22141 58EF           BA                   03DA    mov dx, # 0x3da
22142 58F2           EC                           in al, dx
22143 58F3           B1                     01    mov cl, #0x01
22144 58F5           80E3                   01    and bl, #0x01
22145                       000058F8            set_cga_palette_loop:
22146 58F8           BA                   03C0    mov dx, # 0x3c0
22147 58FB           88C8                         mov al, cl
22148 58FD           EE                           out dx, al
22149 58FE           BA                   03C1    mov dx, # 0x3c1
22150 5901           EC                           in al, dx
22151 5902           24                     FE    and al, #0xfe
22152 5904           08D8                         or al, bl
22153 5906           BA                   03C0    mov dx, # 0x3c0
22154 5909           EE                           out dx, al
22155 590A           FEC1                         inc cl
22156 590C           80F9                   04    cmp cl, #0x04
22157 590F           75           E7              jne set_cga_palette_loop
22158 5911           B0                     20    mov al, #0x20
22159 5913           EE                           out dx, al
22160 5914           5A                           pop dx
22161 5915           59                           pop cx
22162 5916           5B                           pop bx
22163 5917           58                           pop ax
22164 5918           C3                           ret
22165                                           ! 2510 endasm
22166                                           !BCC_ENDASM
22167                                           ! 2511 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22168                                           ! Register BX used in function biosfn_write_char_only
22169                       00005919            _biosfn_write_pixel:
22170                                           !BCC_EOS
22171                                           !BCC_EOS
22172                                           !BCC_EOS
22173                                           !BCC_EOS
22174                                           ! 2512 {
22175                                           ! 2513  Bit8u mode,line,mask,attr,data;
22176                                           !BCC_EOS
22177                                           ! 2514  Bit16u addr;
22178                                           !BCC_EOS
22179                                           ! 2515  mode=read_byte(0x40,0x49);
22180 5919           55                         push	bp
22181 591A           89E5                       mov	bp,sp
22182 591C           83C4                   F8  add	sp,*-8
22183                                           ! Debug: list int = const $49 (used reg = )
22184 591F           B8                   0049  mov	ax,*$49
22185 5922           50                         push	ax
22186                                           ! Debug: list int = const $40 (used reg = )
22187 5923           B8                   0040  mov	ax,*$40
22188 5926           50                         push	ax
22189                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22190 5927           E8         221F            call	_read_byte
22191 592A           83C4                   04  add	sp,*4
22192                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22193 592D           8846         FF            mov	-1[bp],al
22194                                           !BCC_EOS
22195                                           ! 2516  line=find_vga_entry(mode);
22196                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22197 5930           8A46         FF            mov	al,-1[bp]
22198 5933           30E4                       xor	ah,ah
22199 5935           50                         push	ax
22200                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22201 5936           E8         2124            call	_find_vga_entry
22202 5939           44                         inc	sp
22203 593A           44                         inc	sp
22204                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22205 593B           8846         FE            mov	-2[bp],al
22206                                           !BCC_EOS
22207                                           ! 2517  if(line==0xFF)return;
22208                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22209 593E           8A46         FE            mov	al,-2[bp]
22210 5941           3C                     FF  cmp	al,#$FF
22211 5943           75           04            jne 	.19F
22212                       00005945            .1A0:
22213 5945           89EC                       mov	sp,bp
22214 5947           5D                         pop	bp
22215 5948           C3                         ret
22216                                           !BCC_EOS
22217                                           ! 2518  if(vga_modes[line].class==0x00)return;
22218                       00005949            .19F:
22219                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22220 5949           8A46         FE            mov	al,-2[bp]
22221 594C           30E4                       xor	ah,ah
22222 594E           B1                     03  mov	cl,*3
22223 5950           D3E0                       shl	ax,cl
22224 5952           89C3                       mov	bx,ax
22225 5954           81C3                 01C3  add	bx,#_vga_modes
22226                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22227 5958           8A47         01            mov	al,1[bx]
22228 595B           84C0                       test	al,al
22229 595D           75           04            jne 	.1A1
22230                       0000595F            .1A2:
22231 595F           89EC                       mov	sp,bp
22232 5961           5D                         pop	bp
22233 5962           C3                         ret
22234                                           !BCC_EOS
22235                                           ! 2519  switch(vga_modes[line].memmodel)
22236                       00005963            .1A1:
22237                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22238 5963           8A46         FE            mov	al,-2[bp]
22239 5966           30E4                       xor	ah,ah
22240 5968           B1                     03  mov	cl,*3
22241 596A           D3E0                       shl	ax,cl
22242 596C           89C3                       mov	bx,ax
22243 596E           81C3                 01C3  add	bx,#_vga_modes
22244 5972           8A47         02            mov	al,2[bx]
22245                                           ! 2520   {
22246 5975           E9         0223            br 	.1A5
22247                                           ! 2521    case 0x04:
22248                                           ! 2522    case 0x03:
22249                       00005978            .1A6:
22250                                           ! 2523      addr = CX/8+DX*read_word(0x40,0x4A);
22251                       00005978            .1A7:
22252                                           ! Debug: list int = const $4A (used reg = )
22253 5978           B8                   004A  mov	ax,*$4A
22254 597B           50                         push	ax
22255                                           ! Debug: list int = const $40 (used reg = )
22256 597C           B8                   0040  mov	ax,*$40
22257 597F           50                         push	ax
22258                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22259 5980           E8         21D9            call	_read_word
22260 5983           83C4                   04  add	sp,*4
22261                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22262                                           ! Debug: expression subtree swapping
22263 5986           8B4E         0A            mov	cx,$A[bp]
22264 5989           F7E9                       imul	cx
22265 598B           50                         push	ax
22266                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22267 598C           8B46         08            mov	ax,8[bp]
22268 598F           B1                     03  mov	cl,*3
22269 5991           D3E8                       shr	ax,cl
22270                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22271 5993           0346         F6            add	ax,0+..FFF8[bp]
22272 5996           44                         inc	sp
22273 5997           44                         inc	sp
22274                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22275 5998           8946         F8            mov	-8[bp],ax
22276                                           !BCC_EOS
22277                                           ! 2524      mask = 0x80 >> (CX & 0x07);
22278                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22279 599B           8A46         08            mov	al,8[bp]
22280 599E           24                     07  and	al,*7
22281                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22282 59A0           30E4                       xor	ah,ah
22283 59A2           89C3                       mov	bx,ax
22284 59A4           B8                   0080  mov	ax,#$80
22285 59A7           89D9                       mov	cx,bx
22286 59A9           D3F8                       sar	ax,cl
22287                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22288 59AB           8846         FD            mov	-3[bp],al
22289                                           !BCC_EOS
22290                                           ! 2525      outw(0x3ce, (mask << 8) | 0x08);
22291                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22292 59AE           8A46         FD            mov	al,-3[bp]
22293 59B1           30E4                       xor	ah,ah
22294 59B3           88C4                       mov	ah,al
22295 59B5           30C0                       xor	al,al
22296                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22297 59B7           0C                     08  or	al,*8
22298                                           ! Debug: list unsigned int = ax+0 (used reg = )
22299 59B9           50                         push	ax
22300                                           ! Debug: list int = const $3CE (used reg = )
22301 59BA           B8                   03CE  mov	ax,#$3CE
22302 59BD           50                         push	ax
22303                                           ! Debug: func () void = outw+0 (used reg = )
22304 59BE           E8         2204            call	_outw
22305 59C1           83C4                   04  add	sp,*4
22306                                           !BCC_EOS
22307                                           ! 2526      outw(0x3ce, 0x0205);
22308                                           ! Debug: list int = const $205 (used reg = )
22309 59C4           B8                   0205  mov	ax,#$205
22310 59C7           50                         push	ax
22311                                           ! Debug: list int = const $3CE (used reg = )
22312 59C8           B8                   03CE  mov	ax,#$3CE
22313 59CB           50                         push	ax
22314                                           ! Debug: func () void = outw+0 (used reg = )
22315 59CC           E8         21F6            call	_outw
22316 59CF           83C4                   04  add	sp,*4
22317                                           !BCC_EOS
22318                                           ! 2527      data = read_byte(0xa000,addr);
22319                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22320 59D2           FF76         F8            push	-8[bp]
22321                                           ! Debug: list unsigned int = const $A000 (used reg = )
22322 59D5           B8                   A000  mov	ax,#$A000
22323 59D8           50                         push	ax
22324                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22325 59D9           E8         216D            call	_read_byte
22326 59DC           83C4                   04  add	sp,*4
22327                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22328 59DF           8846         FB            mov	-5[bp],al
22329                                           !BCC_EOS
22330                                           ! 2528      if (AL & 0x80)
22331                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22332 59E2           8A46         06            mov	al,6[bp]
22333 59E5           24                     80  and	al,#$80
22334 59E7           84C0                       test	al,al
22335 59E9           74           0E            je  	.1A8
22336                       000059EB            .1A9:
22337                                           ! 2529       {
22338                                           ! 2530        outw(0x3ce, 0x1803);
22339                                           ! Debug: list int = const $1803 (used reg = )
22340 59EB           B8                   1803  mov	ax,#$1803
22341 59EE           50                         push	ax
22342                                           ! Debug: list int = const $3CE (used reg = )
22343 59EF           B8                   03CE  mov	ax,#$3CE
22344 59F2           50                         push	ax
22345                                           ! Debug: func () void = outw+0 (used reg = )
22346 59F3           E8         21CF            call	_outw
22347 59F6           83C4                   04  add	sp,*4
22348                                           !BCC_EOS
22349                                           ! 2531       }
22350                                           ! 2532      write_byte(0xa000,addr,AL);
22351                       000059F9            .1A8:
22352                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22353 59F9           8A46         06            mov	al,6[bp]
22354 59FC           30E4                       xor	ah,ah
22355 59FE           50                         push	ax
22356                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22357 59FF           FF76         F8            push	-8[bp]
22358                                           ! Debug: list unsigned int = const $A000 (used reg = )
22359 5A02           B8                   A000  mov	ax,#$A000
22360 5A05           50                         push	ax
22361                                           ! Debug: func () void = write_byte+0 (used reg = )
22362 5A06           E8         2166            call	_write_byte
22363 5A09           83C4                   06  add	sp,*6
22364                                           !BCC_EOS
22365                                           ! 2533 #asm
22366                                           !BCC_EOS
22367                                           !BCC_ASM
22368                       0000000C            _biosfn_write_pixel.BH	set	$C
22369                       00000004            .biosfn_write_pixel.BH	set	4
22370                       00000010            _biosfn_write_pixel.CX	set	$10
22371                       00000008            .biosfn_write_pixel.CX	set	8
22372                       00000006            _biosfn_write_pixel.line	set	6
22373                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22374                       0000000E            _biosfn_write_pixel.AL	set	$E
22375                       00000006            .biosfn_write_pixel.AL	set	6
22376                       00000003            _biosfn_write_pixel.data	set	3
22377                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22378                       00000012            _biosfn_write_pixel.DX	set	$12
22379                       0000000A            .biosfn_write_pixel.DX	set	$A
22380                       00000005            _biosfn_write_pixel.mask	set	5
22381                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22382                       00000004            _biosfn_write_pixel.attr	set	4
22383                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22384                       00000007            _biosfn_write_pixel.mode	set	7
22385                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22386                       00000000            _biosfn_write_pixel.addr	set	0
22387                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22388 5A0C           BA                   03CE       mov dx, # 0x3ce
22389 5A0F           B8                   FF08       mov ax, #0xff08
22390 5A12           EF                              out dx, ax
22391 5A13           B8                   0005       mov ax, #0x0005
22392 5A16           EF                              out dx, ax
22393 5A17           B8                   0003       mov ax, #0x0003
22394 5A1A           EF                              out dx, ax
22395                                           ! 2541 endasm
22396                                           !BCC_ENDASM
22397                                           !BCC_EOS
22398                                           ! 2542      break;
22399 5A1B           E9         0196            br 	.1A3
22400                                           !BCC_EOS
22401                                           ! 2543    case 0x02:
22402                                           ! 2544      if(vga_modes[line].pixbits==2)
22403                       00005A1E            .1AA:
22404                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22405 5A1E           8A46         FE            mov	al,-2[bp]
22406 5A21           30E4                       xor	ah,ah
22407 5A23           B1                     03  mov	cl,*3
22408 5A25           D3E0                       shl	ax,cl
22409 5A27           89C3                       mov	bx,ax
22410 5A29           81C3                 01C3  add	bx,#_vga_modes
22411                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22412 5A2D           8A47         03            mov	al,3[bx]
22413 5A30           3C                     02  cmp	al,*2
22414 5A32           75           1C            jne 	.1AB
22415                       00005A34            .1AC:
22416                                           ! 2545       {
22417                                           ! 2546        addr=(CX>>2)+(DX>>1)*80;
22418                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22419 5A34           8B46         0A            mov	ax,$A[bp]
22420 5A37           D1E8                       shr	ax,*1
22421                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22422 5A39           B9                   0050  mov	cx,*$50
22423 5A3C           F7E9                       imul	cx
22424 5A3E           50                         push	ax
22425                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22426 5A3F           8B46         08            mov	ax,8[bp]
22427 5A42           D1E8                       shr	ax,*1
22428 5A44           D1E8                       shr	ax,*1
22429                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22430 5A46           0346         F6            add	ax,0+..FFF8[bp]
22431 5A49           44                         inc	sp
22432 5A4A           44                         inc	sp
22433                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22434 5A4B           8946         F8            mov	-8[bp],ax
22435                                           !BCC_EOS
22436                                           ! 2547       }
22437                                           ! 2548      else
22438                                           ! 2549       {
22439 5A4E           EB           1A            jmp .1AD
22440                       00005A50            .1AB:
22441                                           ! 2550        addr=(CX>>3)+(DX>>1)*80;
22442                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22443 5A50           8B46         0A            mov	ax,$A[bp]
22444 5A53           D1E8                       shr	ax,*1
22445                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22446 5A55           B9                   0050  mov	cx,*$50
22447 5A58           F7E9                       imul	cx
22448 5A5A           50                         push	ax
22449                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22450 5A5B           8B46         08            mov	ax,8[bp]
22451 5A5E           B1                     03  mov	cl,*3
22452 5A60           D3E8                       shr	ax,cl
22453                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22454 5A62           0346         F6            add	ax,0+..FFF8[bp]
22455 5A65           44                         inc	sp
22456 5A66           44                         inc	sp
22457                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22458 5A67           8946         F8            mov	-8[bp],ax
22459                                           !BCC_EOS
22460                                           ! 2551       }
22461                                           ! 2552      if (DX & 1) addr += 0x2000;
22462                       00005A6A            .1AD:
22463                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22464 5A6A           8A46         0A            mov	al,$A[bp]
22465 5A6D           24                     01  and	al,*1
22466 5A6F           84C0                       test	al,al
22467 5A71           74           09            je  	.1AE
22468                       00005A73            .1AF:
22469                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22470 5A73           8B46         F8            mov	ax,-8[bp]
22471 5A76           05                   2000  add	ax,#$2000
22472 5A79           8946         F8            mov	-8[bp],ax
22473                                           !BCC_EOS
22474                                           ! 2553      data = read_byte(0xb800,addr);
22475                       00005A7C            .1AE:
22476                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22477 5A7C           FF76         F8            push	-8[bp]
22478                                           ! Debug: list unsigned int = const $B800 (used reg = )
22479 5A7F           B8                   B800  mov	ax,#$B800
22480 5A82           50                         push	ax
22481                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22482 5A83           E8         20C3            call	_read_byte
22483 5A86           83C4                   04  add	sp,*4
22484                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22485 5A89           8846         FB            mov	-5[bp],al
22486                                           !BCC_EOS
22487                                           ! 2554      if(vga_modes[line].pixbits==2)
22488                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22489 5A8C           8A46         FE            mov	al,-2[bp]
22490 5A8F           30E4                       xor	ah,ah
22491 5A91           B1                     03  mov	cl,*3
22492 5A93           D3E0                       shl	ax,cl
22493 5A95           89C3                       mov	bx,ax
22494 5A97           81C3                 01C3  add	bx,#_vga_modes
22495                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22496 5A9B           8A47         03            mov	al,3[bx]
22497 5A9E           3C                     02  cmp	al,*2
22498 5AA0           75           46            jne 	.1B0
22499                       00005AA2            .1B1:
22500                                           ! 2555       {
22501                                           ! 2556        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22502                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22503 5AA2           8A46         08            mov	al,8[bp]
22504 5AA5           24                     03  and	al,*3
22505                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22506 5AA7           50                         push	ax
22507 5AA8           B8                   0003  mov	ax,*3
22508 5AAB           2A46         F6            sub	al,0+..FFF8[bp]
22509 5AAE           80DC                   00  sbb	ah,*0
22510 5AB1           44                         inc	sp
22511 5AB2           44                         inc	sp
22512                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22513 5AB3           D1E0                       shl	ax,*1
22514 5AB5           50                         push	ax
22515                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22516 5AB6           8A46         06            mov	al,6[bp]
22517 5AB9           24                     03  and	al,*3
22518                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22519 5ABB           30E4                       xor	ah,ah
22520 5ABD           8B4E         F6            mov	cx,0+..FFF8[bp]
22521 5AC0           D3E0                       shl	ax,cl
22522 5AC2           44                         inc	sp
22523 5AC3           44                         inc	sp
22524                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22525 5AC4           8846         FC            mov	-4[bp],al
22526                                           !BCC_EOS
22527                                           ! 2557        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
22528                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22529 5AC7           8A46         08            mov	al,8[bp]
22530 5ACA           24                     03  and	al,*3
22531                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22532 5ACC           50                         push	ax
22533 5ACD           B8                   0003  mov	ax,*3
22534 5AD0           2A46         F6            sub	al,0+..FFF8[bp]
22535 5AD3           80DC                   00  sbb	ah,*0
22536 5AD6           44                         inc	sp
22537 5AD7           44                         inc	sp
22538                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22539 5AD8           D1E0                       shl	ax,*1
22540                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
22541 5ADA           89C3                       mov	bx,ax
22542 5ADC           B8                   0003  mov	ax,*3
22543 5ADF           89D9                       mov	cx,bx
22544 5AE1           D3E0                       shl	ax,cl
22545                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22546 5AE3           8846         FD            mov	-3[bp],al
22547                                           !BCC_EOS
22548                                           ! 2558       }
22549                                           ! 2559      else
22550                                           ! 2560       {
22551 5AE6           EB           40            jmp .1B2
22552                       00005AE8            .1B0:
22553                                           ! 2561        attr = (AL & 0x01) << (7 - (CX & 0x07));
22554                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22555 5AE8           8A46         08            mov	al,8[bp]
22556 5AEB           24                     07  and	al,*7
22557                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22558 5AED           50                         push	ax
22559 5AEE           B8                   0007  mov	ax,*7
22560 5AF1           2A46         F6            sub	al,0+..FFF8[bp]
22561 5AF4           80DC                   00  sbb	ah,*0
22562 5AF7           44                         inc	sp
22563 5AF8           44                         inc	sp
22564 5AF9           50                         push	ax
22565                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
22566 5AFA           8A46         06            mov	al,6[bp]
22567 5AFD           24                     01  and	al,*1
22568                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22569 5AFF           30E4                       xor	ah,ah
22570 5B01           8B4E         F6            mov	cx,0+..FFF8[bp]
22571 5B04           D3E0                       shl	ax,cl
22572 5B06           44                         inc	sp
22573 5B07           44                         inc	sp
22574                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22575 5B08           8846         FC            mov	-4[bp],al
22576                                           !BCC_EOS
22577                                           ! 2562        mask = 0x01 << (7 - (CX & 0x07));
22578                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22579 5B0B           8A46         08            mov	al,8[bp]
22580 5B0E           24                     07  and	al,*7
22581                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22582 5B10           50                         push	ax
22583 5B11           B8                   0007  mov	ax,*7
22584 5B14           2A46         F6            sub	al,0+..FFF8[bp]
22585 5B17           80DC                   00  sbb	ah,*0
22586 5B1A           44                         inc	sp
22587 5B1B           44                         inc	sp
22588                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
22589 5B1C           89C3                       mov	bx,ax
22590 5B1E           B8                   0001  mov	ax,*1
22591 5B21           89D9                       mov	cx,bx
22592 5B23           D3E0                       shl	ax,cl
22593                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22594 5B25           8846         FD            mov	-3[bp],al
22595                                           !BCC_EOS
22596                                           ! 2563       }
22597                                           ! 2564      if (AL & 0x80)
22598                       00005B28            .1B2:
22599                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22600 5B28           8A46         06            mov	al,6[bp]
22601 5B2B           24                     80  and	al,#$80
22602 5B2D           84C0                       test	al,al
22603 5B2F           74           0B            je  	.1B3
22604                       00005B31            .1B4:
22605                                           ! 2565       {
22606                                           ! 2566        data ^= attr;
22607                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22608 5B31           8A46         FB            mov	al,-5[bp]
22609 5B34           3246         FC            xor	al,-4[bp]
22610 5B37           8846         FB            mov	-5[bp],al
22611                                           !BCC_EOS
22612                                           ! 2567       }
22613                                           ! 2568      else
22614                                           ! 2569       {
22615 5B3A           EB           16            jmp .1B5
22616                       00005B3C            .1B3:
22617                                           ! 2570        data &= ~mask;
22618                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
22619 5B3C           8A46         FD            mov	al,-3[bp]
22620 5B3F           30E4                       xor	ah,ah
22621 5B41           F7D0                       not	ax
22622                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
22623 5B43           2246         FB            and	al,-5[bp]
22624 5B46           8846         FB            mov	-5[bp],al
22625                                           !BCC_EOS
22626                                           ! 2571        data |= attr;
22627                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22628 5B49           8A46         FB            mov	al,-5[bp]
22629 5B4C           0A46         FC            or	al,-4[bp]
22630 5B4F           8846         FB            mov	-5[bp],al
22631                                           !BCC_EOS
22632                                           ! 2572       }
22633                                           ! 2573      write_byte(0xb800,addr,data);
22634                       00005B52            .1B5:
22635                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
22636 5B52           8A46         FB            mov	al,-5[bp]
22637 5B55           30E4                       xor	ah,ah
22638 5B57           50                         push	ax
22639                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22640 5B58           FF76         F8            push	-8[bp]
22641                                           ! Debug: list unsigned int = const $B800 (used reg = )
22642 5B5B           B8                   B800  mov	ax,#$B800
22643 5B5E           50                         push	ax
22644                                           ! Debug: func () void = write_byte+0 (used reg = )
22645 5B5F           E8         200D            call	_write_byte
22646 5B62           83C4                   06  add	sp,*6
22647                                           !BCC_EOS
22648                                           ! 2574      break;
22649 5B65           EB           4D            jmp .1A3
22650                                           !BCC_EOS
22651                                           ! 2575    case 0x05:
22652                                           ! 2576      addr=CX+DX*(read_word(0x40,0x4A)*8);
22653                       00005B67            .1B6:
22654                                           ! Debug: list int = const $4A (used reg = )
22655 5B67           B8                   004A  mov	ax,*$4A
22656 5B6A           50                         push	ax
22657                                           ! Debug: list int = const $40 (used reg = )
22658 5B6B           B8                   0040  mov	ax,*$40
22659 5B6E           50                         push	ax
22660                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22661 5B6F           E8         1FEA            call	_read_word
22662 5B72           83C4                   04  add	sp,*4
22663                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
22664 5B75           B1                     03  mov	cl,*3
22665 5B77           D3E0                       shl	ax,cl
22666                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22667                                           ! Debug: expression subtree swapping
22668 5B79           8B4E         0A            mov	cx,$A[bp]
22669 5B7C           F7E9                       imul	cx
22670                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
22671                                           ! Debug: expression subtree swapping
22672 5B7E           0346         08            add	ax,8[bp]
22673                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22674 5B81           8946         F8            mov	-8[bp],ax
22675                                           !BCC_EOS
22676                                           ! 2577      write_byte(0xa000,addr,AL);
22677                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22678 5B84           8A46         06            mov	al,6[bp]
22679 5B87           30E4                       xor	ah,ah
22680 5B89           50                         push	ax
22681                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22682 5B8A           FF76         F8            push	-8[bp]
22683                                           ! Debug: list unsigned int = const $A000 (used reg = )
22684 5B8D           B8                   A000  mov	ax,#$A000
22685 5B90           50                         push	ax
22686                                           ! Debug: func () void = write_byte+0 (used reg = )
22687 5B91           E8         1FDB            call	_write_byte
22688 5B94           83C4                   06  add	sp,*6
22689                                           !BCC_EOS
22690                                           ! 2578      break;
22691 5B97           EB           1B            jmp .1A3
22692                                           !BCC_EOS
22693                                           ! 2579   }
22694                                           ! 2580 }
22695 5B99           EB           19            jmp .1A3
22696                       00005B9B            .1A5:
22697 5B9B           2C                     02  sub	al,*2
22698 5B9D   7503    E9         FE7C            beq 	.1AA
22699 5BA2           2C                     01  sub	al,*1
22700 5BA4   7503    E9         FDCF            beq 	.1A7
22701 5BA9           2C                     01  sub	al,*1
22702 5BAB   7503    E9         FDC8            beq 	.1A6
22703 5BB0           2C                     01  sub	al,*1
22704 5BB2           74           B3            je 	.1B6
22705                       00005BB4            .1A3:
22706                       FFFFFFF6            ..FFF8	=	-$A
22707 5BB4           89EC                       mov	sp,bp
22708 5BB6           5D                         pop	bp
22709 5BB7           C3                         ret
22710                                           ! 2581 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
22711                                           ! Register BX used in function biosfn_write_pixel
22712                       00005BB8            _biosfn_read_pixel:
22713                                           !BCC_EOS
22714                                           !BCC_EOS
22715                                           !BCC_EOS
22716                                           !BCC_EOS
22717                                           ! 2582 {
22718                                           ! 2583  Bit8u mode,line,mask,attr,data,i;
22719                                           !BCC_EOS
22720                                           ! 2584  
22721                                           ! 2584 Bit16u addr;
22722                                           !BCC_EOS
22723                                           ! 2585  Bit16u ss=get_SS();
22724 5BB8           55                         push	bp
22725 5BB9           89E5                       mov	bp,sp
22726 5BBB           83C4                   F6  add	sp,*-$A
22727                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
22728 5BBE           E8         2014            call	_get_SS
22729                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
22730 5BC1           8946         F6            mov	-$A[bp],ax
22731                                           !BCC_EOS
22732                                           ! 2586  mode=read_byte(0x40,0x49);
22733                                           ! Debug: list int = const $49 (used reg = )
22734 5BC4           B8                   0049  mov	ax,*$49
22735 5BC7           50                         push	ax
22736                                           ! Debug: list int = const $40 (used reg = )
22737 5BC8           B8                   0040  mov	ax,*$40
22738 5BCB           50                         push	ax
22739                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22740 5BCC           E8         1F7A            call	_read_byte
22741 5BCF           83C4                   04  add	sp,*4
22742                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
22743 5BD2           8846         FF            mov	-1[bp],al
22744                                           !BCC_EOS
22745                                           ! 2587  line=find_vga_entry(mode);
22746                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
22747 5BD5           8A46         FF            mov	al,-1[bp]
22748 5BD8           30E4                       xor	ah,ah
22749 5BDA           50                         push	ax
22750                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22751 5BDB           E8         1E7F            call	_find_vga_entry
22752 5BDE           44                         inc	sp
22753 5BDF           44                         inc	sp
22754                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
22755 5BE0           8846         FE            mov	-2[bp],al
22756                                           !BCC_EOS
22757                                           ! 2588  if(line==0xFF)return;
22758                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
22759 5BE3           8A46         FE            mov	al,-2[bp]
22760 5BE6           3C                     FF  cmp	al,#$FF
22761 5BE8           75           04            jne 	.1B7
22762                       00005BEA            .1B8:
22763 5BEA           89EC                       mov	sp,bp
22764 5BEC           5D                         pop	bp
22765 5BED           C3                         ret
22766                                           !BCC_EOS
22767                                           ! 2589  if(vga_modes[line].class==0x00)return;
22768                       00005BEE            .1B7:
22769                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22770 5BEE           8A46         FE            mov	al,-2[bp]
22771 5BF1           30E4                       xor	ah,ah
22772 5BF3           B1                     03  mov	cl,*3
22773 5BF5           D3E0                       shl	ax,cl
22774 5BF7           89C3                       mov	bx,ax
22775 5BF9           81C3                 01C3  add	bx,#_vga_modes
22776                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22777 5BFD           8A47         01            mov	al,1[bx]
22778 5C00           84C0                       test	al,al
22779 5C02           75           04            jne 	.1B9
22780                       00005C04            .1BA:
22781 5C04           89EC                       mov	sp,bp
22782 5C06           5D                         pop	bp
22783 5C07           C3                         ret
22784                                           !BCC_EOS
22785                                           ! 2590  switch(vga_modes[line].memmodel)
22786                       00005C08            .1B9:
22787                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22788 5C08           8A46         FE            mov	al,-2[bp]
22789 5C0B           30E4                       xor	ah,ah
22790 5C0D           B1                     03  mov	cl,*3
22791 5C0F           D3E0                       shl	ax,cl
22792 5C11           89C3                       mov	bx,ax
22793 5C13           81C3                 01C3  add	bx,#_vga_modes
22794 5C17           8A47         02            mov	al,2[bx]
22795                                           ! 2591   {
22796 5C1A           E9         0167            br 	.1BD
22797                                           ! 2592    case 0x04:
22798                                           ! 2593    case 0x03:
22799                       00005C1D            .1BE:
22800                                           ! 2594      addr = CX/8+DX*read_word(0x40,0x4A);
22801                       00005C1D            .1BF:
22802                                           ! Debug: list int = const $4A (used reg = )
22803 5C1D           B8                   004A  mov	ax,*$4A
22804 5C20           50                         push	ax
22805                                           ! Debug: list int = const $40 (used reg = )
22806 5C21           B8                   0040  mov	ax,*$40
22807 5C24           50                         push	ax
22808                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22809 5C25           E8         1F34            call	_read_word
22810 5C28           83C4                   04  add	sp,*4
22811                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
22812                                           ! Debug: expression subtree swapping
22813 5C2B           8B4E         08            mov	cx,8[bp]
22814 5C2E           F7E9                       imul	cx
22815 5C30           50                         push	ax
22816                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
22817 5C31           8B46         06            mov	ax,6[bp]
22818 5C34           B1                     03  mov	cl,*3
22819 5C36           D3E8                       shr	ax,cl
22820                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22821 5C38           0346         F4            add	ax,0+..FFF7[bp]
22822 5C3B           44                         inc	sp
22823 5C3C           44                         inc	sp
22824                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22825 5C3D           8946         F8            mov	-8[bp],ax
22826                                           !BCC_EOS
22827                                           ! 2595      mask = 0x80 >> (CX & 0x07);
22828                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
22829 5C40           8A46         06            mov	al,6[bp]
22830 5C43           24                     07  and	al,*7
22831                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22832 5C45           30E4                       xor	ah,ah
22833 5C47           89C3                       mov	bx,ax
22834 5C49           B8                   0080  mov	ax,#$80
22835 5C4C           89D9                       mov	cx,bx
22836 5C4E           D3F8                       sar	ax,cl
22837                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
22838 5C50           8846         FD            mov	-3[bp],al
22839                                           !BCC_EOS
22840                                           ! 2596      attr = 0x00;
22841                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
22842 5C53           30C0                       xor	al,al
22843 5C55           8846         FC            mov	-4[bp],al
22844                                           !BCC_EOS
22845                                           ! 2597      for(i=0;i<4;i++)
22846                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
22847 5C58           30C0                       xor	al,al
22848 5C5A           8846         FA            mov	-6[bp],al
22849                                           !BCC_EOS
22850                                           !BCC_EOS
22851                                           ! 2598       {
22852 5C5D           EB           4B            jmp .1C2
22853                       00005C5F            .1C3:
22854                                           ! 2599        outw(0x3ce, (i << 8) | 0x04);
22855                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
22856 5C5F           8A46         FA            mov	al,-6[bp]
22857 5C62           30E4                       xor	ah,ah
22858 5C64           88C4                       mov	ah,al
22859 5C66           30C0                       xor	al,al
22860                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
22861 5C68           0C                     04  or	al,*4
22862                                           ! Debug: list unsigned int = ax+0 (used reg = )
22863 5C6A           50                         push	ax
22864                                           ! Debug: list int = const $3CE (used reg = )
22865 5C6B           B8                   03CE  mov	ax,#$3CE
22866 5C6E           50                         push	ax
22867                                           ! Debug: func () void = outw+0 (used reg = )
22868 5C6F           E8         1F53            call	_outw
22869 5C72           83C4                   04  add	sp,*4
22870                                           !BCC_EOS
22871                                           ! 2600        data = read_byte(0xa000,addr) & mask;
22872                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22873 5C75           FF76         F8            push	-8[bp]
22874                                           ! Debug: list unsigned int = const $A000 (used reg = )
22875 5C78           B8                   A000  mov	ax,#$A000
22876 5C7B           50                         push	ax
22877                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22878 5C7C           E8         1ECA            call	_read_byte
22879 5C7F           83C4                   04  add	sp,*4
22880                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
22881 5C82           2246         FD            and	al,-3[bp]
22882                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
22883 5C85           8846         FB            mov	-5[bp],al
22884                                           !BCC_EOS
22885                                           ! 2601        if (data > 0) attr |= (0x01 << i);
22886                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
22887 5C88           8A46         FB            mov	al,-5[bp]
22888 5C8B           84C0                       test	al,al
22889 5C8D           74           14            je  	.1C4
22890                       00005C8F            .1C5:
22891                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
22892 5C8F           8A46         FA            mov	al,-6[bp]
22893 5C92           30E4                       xor	ah,ah
22894 5C94           89C3                       mov	bx,ax
22895 5C96           B8                   0001  mov	ax,*1
22896 5C99           89D9                       mov	cx,bx
22897 5C9B           D3E0                       shl	ax,cl
22898                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
22899 5C9D           0A46         FC            or	al,-4[bp]
22900 5CA0           8846         FC            mov	-4[bp],al
22901                                           !BCC_EOS
22902                                           ! 2602       }
22903                       00005CA3            .1C4:
22904                                           ! 2603      break;
22905                       00005CA3            .1C1:
22906                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
22907 5CA3           8A46         FA            mov	al,-6[bp]
22908 5CA6           40                         inc	ax
22909 5CA7           8846         FA            mov	-6[bp],al
22910                       00005CAA            .1C2:
22911                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
22912 5CAA           8A46         FA            mov	al,-6[bp]
22913 5CAD           3C                     04  cmp	al,*4
22914 5CAF           72           AE            jb 	.1C3
22915                       00005CB1            .1C6:
22916                       00005CB1            .1C0:
22917 5CB1           E9         00EB            br 	.1BB
22918                                           !BCC_EOS
22919                                           ! 2604    case 0x02:
22920                                           ! 2605      addr=(CX>>2)+(DX>>1)*80;
22921                       00005CB4            .1C7:
22922                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
22923 5CB4           8B46         08            mov	ax,8[bp]
22924 5CB7           D1E8                       shr	ax,*1
22925                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22926 5CB9           B9                   0050  mov	cx,*$50
22927 5CBC           F7E9                       imul	cx
22928 5CBE           50                         push	ax
22929                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
22930 5CBF           8B46         06            mov	ax,6[bp]
22931 5CC2           D1E8                       shr	ax,*1
22932 5CC4           D1E8                       shr	ax,*1
22933                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22934 5CC6           0346         F4            add	ax,0+..FFF7[bp]
22935 5CC9           44                         inc	sp
22936 5CCA           44                         inc	sp
22937                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22938 5CCB           8946         F8            mov	-8[bp],ax
22939                                           !BCC_EOS
22940                                           ! 2606      if (DX & 1) addr += 0x2000;
22941                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
22942 5CCE           8A46         08            mov	al,8[bp]
22943 5CD1           24                     01  and	al,*1
22944 5CD3           84C0                       test	al,al
22945 5CD5           74           09            je  	.1C8
22946                       00005CD7            .1C9:
22947                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
22948 5CD7           8B46         F8            mov	ax,-8[bp]
22949 5CDA           05                   2000  add	ax,#$2000
22950 5CDD           8946         F8            mov	-8[bp],ax
22951                                           !BCC_EOS
22952                                           ! 2607      data = read_byte(0xb800,addr);
22953                       00005CE0            .1C8:
22954                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22955 5CE0           FF76         F8            push	-8[bp]
22956                                           ! Debug: list unsigned int = const $B800 (used reg = )
22957 5CE3           B8                   B800  mov	ax,#$B800
22958 5CE6           50                         push	ax
22959                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22960 5CE7           E8         1E5F            call	_read_byte
22961 5CEA           83C4                   04  add	sp,*4
22962                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
22963 5CED           8846         FB            mov	-5[bp],al
22964                                           !BCC_EOS
22965                                           ! 2608      if(vga_modes[line].pixbits==2)
22966                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22967 5CF0           8A46         FE            mov	al,-2[bp]
22968 5CF3           30E4                       xor	ah,ah
22969 5CF5           B1                     03  mov	cl,*3
22970 5CF7           D3E0                       shl	ax,cl
22971 5CF9           89C3                       mov	bx,ax
22972 5CFB           81C3                 01C3  add	bx,#_vga_modes
22973                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22974 5CFF           8A47         03            mov	al,3[bx]
22975 5D02           3C                     02  cmp	al,*2
22976 5D04           75           25            jne 	.1CA
22977                       00005D06            .1CB:
22978                                           ! 2609       {
22979                                           ! 2610        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
22980                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
22981 5D06           8A46         06            mov	al,6[bp]
22982 5D09           24                     03  and	al,*3
22983                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22984 5D0B           50                         push	ax
22985 5D0C           B8                   0003  mov	ax,*3
22986 5D0F           2A46         F4            sub	al,0+..FFF7[bp]
22987 5D12           80DC                   00  sbb	ah,*0
22988 5D15           44                         inc	sp
22989 5D16           44                         inc	sp
22990                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22991 5D17           D1E0                       shl	ax,*1
22992                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
22993 5D19           89C3                       mov	bx,ax
22994 5D1B           8A46         FB            mov	al,-5[bp]
22995 5D1E           30E4                       xor	ah,ah
22996 5D20           89D9                       mov	cx,bx
22997 5D22           D3E8                       shr	ax,cl
22998                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
22999 5D24           24                     03  and	al,*3
23000                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23001 5D26           8846         FC            mov	-4[bp],al
23002                                           !BCC_EOS
23003                                           ! 2611       }
23004                                           ! 2612      else
23005                                           ! 2613       {
23006 5D29           EB           21            jmp .1CC
23007                       00005D2B            .1CA:
23008                                           ! 2614        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23009                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23010 5D2B           8A46         06            mov	al,6[bp]
23011 5D2E           24                     07  and	al,*7
23012                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23013 5D30           50                         push	ax
23014 5D31           B8                   0007  mov	ax,*7
23015 5D34           2A46         F4            sub	al,0+..FFF7[bp]
23016 5D37           80DC                   00  sbb	ah,*0
23017 5D3A           44                         inc	sp
23018 5D3B           44                         inc	sp
23019                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23020 5D3C           89C3                       mov	bx,ax
23021 5D3E           8A46         FB            mov	al,-5[bp]
23022 5D41           30E4                       xor	ah,ah
23023 5D43           89D9                       mov	cx,bx
23024 5D45           D3E8                       shr	ax,cl
23025                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23026 5D47           24                     01  and	al,*1
23027                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23028 5D49           8846         FC            mov	-4[bp],al
23029                                           !BCC_EOS
23030                                           ! 2615       }
23031                                           ! 2616      break;
23032                       00005D4C            .1CC:
23033 5D4C           EB           51            jmp .1BB
23034                                           !BCC_EOS
23035                                           ! 2617    case 0x05:
23036                                           ! 2618      addr=CX+DX*(read_word(0x40,0x4A)*8);
23037                       00005D4E            .1CD:
23038                                           ! Debug: list int = const $4A (used reg = )
23039 5D4E           B8                   004A  mov	ax,*$4A
23040 5D51           50                         push	ax
23041                                           ! Debug: list int = const $40 (used reg = )
23042 5D52           B8                   0040  mov	ax,*$40
23043 5D55           50                         push	ax
23044                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23045 5D56           E8         1E03            call	_read_word
23046 5D59           83C4                   04  add	sp,*4
23047                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23048 5D5C           B1                     03  mov	cl,*3
23049 5D5E           D3E0                       shl	ax,cl
23050                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23051                                           ! Debug: expression subtree swapping
23052 5D60           8B4E         08            mov	cx,8[bp]
23053 5D63           F7E9                       imul	cx
23054                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23055                                           ! Debug: expression subtree swapping
23056 5D65           0346         06            add	ax,6[bp]
23057                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23058 5D68           8946         F8            mov	-8[bp],ax
23059                                           !BCC_EOS
23060                                           ! 2619      attr=read_byte(0xa000,addr);
23061                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23062 5D6B           FF76         F8            push	-8[bp]
23063                                           ! Debug: list unsigned int = const $A000 (used reg = )
23064 5D6E           B8                   A000  mov	ax,#$A000
23065 5D71           50                         push	ax
23066                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23067 5D72           E8         1DD4            call	_read_byte
23068 5D75           83C4                   04  add	sp,*4
23069                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23070 5D78           8846         FC            mov	-4[bp],al
23071                                           !BCC_EOS
23072                                           ! 2620      break;
23073 5D7B           EB           22            jmp .1BB
23074                                           !BCC_EOS
23075                                           ! 2621    default:
23076                                           ! 2622      attr = 0;
23077                       00005D7D            .1CE:
23078                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23079 5D7D           30C0                       xor	al,al
23080 5D7F           8846         FC            mov	-4[bp],al
23081                                           !BCC_EOS
23082                                           ! 2623   }
23083                                           ! 2624  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23084 5D82           EB           1B            jmp .1BB
23085                       00005D84            .1BD:
23086 5D84           2C                     02  sub	al,*2
23087 5D86   7503    E9         FF29            beq 	.1C7
23088 5D8B           2C                     01  sub	al,*1
23089 5D8D   7503    E9         FE8B            beq 	.1BF
23090 5D92           2C                     01  sub	al,*1
23091 5D94   7503    E9         FE84            beq 	.1BE
23092 5D99           2C                     01  sub	al,*1
23093 5D9B           74           B1            je 	.1CD
23094 5D9D           EB           DE            jmp	.1CE
23095                       00005D9F            .1BB:
23096                       FFFFFFF4            ..FFF7	=	-$C
23097                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23098 5D9F           FF76         0A            push	$A[bp]
23099                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23100 5DA2           FF76         F6            push	-$A[bp]
23101                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23102 5DA5           E8         1DB4            call	_read_word
23103 5DA8           83C4                   04  add	sp,*4
23104                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23105 5DAB           30C0                       xor	al,al
23106                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23107 5DAD           0A46         FC            or	al,-4[bp]
23108                                           ! Debug: list unsigned int = ax+0 (used reg = )
23109 5DB0           50                         push	ax
23110                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23111 5DB1           FF76         0A            push	$A[bp]
23112                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23113 5DB4           FF76         F6            push	-$A[bp]
23114                                           ! Debug: func () void = write_word+0 (used reg = )
23115 5DB7           E8         1DCD            call	_write_word
23116 5DBA           83C4                   06  add	sp,*6
23117                                           !BCC_EOS
23118                                           ! 2625 }
23119 5DBD           89EC                       mov	sp,bp
23120 5DBF           5D                         pop	bp
23121 5DC0           C3                         ret
23122                                           ! 2626 static void biosfn_write_teletype (car, page, attr, flag)
23123                                           ! Register BX used in function biosfn_read_pixel
23124                                           ! 2627 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23125                       00005DC1            _biosfn_write_teletype:
23126                                           !BCC_EOS
23127                                           !BCC_EOS
23128                                           !BCC_EOS
23129                                           !BCC_EOS
23130                                           ! 2628 {
23131                                           ! 2629  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23132                                           !BCC_EOS
23133                                           ! 2630  Bit16u nbcols,nbrows,address;
23134                                           !BCC_EOS
23135                                           ! 2631  Bit16u cursor,dummy;
23136                                           !BCC_EOS
23137                                           ! 2632  if(page==0xff)
23138 5DC1           55                         push	bp
23139 5DC2           89E5                       mov	bp,sp
23140 5DC4           83C4                   F0  add	sp,*-$10
23141                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23142 5DC7           8A46         06            mov	al,6[bp]
23143 5DCA           3C                     FF  cmp	al,#$FF
23144 5DCC           75           11            jne 	.1CF
23145                       00005DCE            .1D0:
23146                                           ! 2633   page=read_byte(0x40,0x62);
23147                                           ! Debug: list int = const $62 (used reg = )
23148 5DCE           B8                   0062  mov	ax,*$62
23149 5DD1           50                         push	ax
23150                                           ! Debug: list int = const $40 (used reg = )
23151 5DD2           B8                   0040  mov	ax,*$40
23152 5DD5           50                         push	ax
23153                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23154 5DD6           E8         1D70            call	_read_byte
23155 5DD9           83C4                   04  add	sp,*4
23156                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23157 5DDC           8846         06            mov	6[bp],al
23158                                           !BCC_EOS
23159                                           ! 2634  mode=read_byte(0x40,0x49);
23160                       00005DDF            .1CF:
23161                                           ! Debug: list int = const $49 (used reg = )
23162 5DDF           B8                   0049  mov	ax,*$49
23163 5DE2           50                         push	ax
23164                                           ! Debug: list int = const $40 (used reg = )
23165 5DE3           B8                   0040  mov	ax,*$40
23166 5DE6           50                         push	ax
23167                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23168 5DE7           E8         1D5F            call	_read_byte
23169 5DEA           83C4                   04  add	sp,*4
23170                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23171 5DED           8846         FC            mov	-4[bp],al
23172                                           !BCC_EOS
23173                                           ! 2635  line=find_vga_entry(mode);
23174                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23175 5DF0           8A46         FC            mov	al,-4[bp]
23176 5DF3           30E4                       xor	ah,ah
23177 5DF5           50                         push	ax
23178                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23179 5DF6           E8         1C64            call	_find_vga_entry
23180 5DF9           44                         inc	sp
23181 5DFA           44                         inc	sp
23182                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23183 5DFB           8846         FB            mov	-5[bp],al
23184                                           !BCC_EOS
23185                                           ! 2636  if(line==0xFF)return;
23186                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23187 5DFE           8A46         FB            mov	al,-5[bp]
23188 5E01           3C                     FF  cmp	al,#$FF
23189 5E03           75           04            jne 	.1D1
23190                       00005E05            .1D2:
23191 5E05           89EC                       mov	sp,bp
23192 5E07           5D                         pop	bp
23193 5E08           C3                         ret
23194                                           !BCC_EOS
23195                                           ! 2637  biosfn_get_cursor_pos(page,&dummy,&cursor);
23196                       00005E09            .1D1:
23197                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23198 5E09           8D5E         F2            lea	bx,-$E[bp]
23199 5E0C           53                         push	bx
23200                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23201 5E0D           8D5E         F0            lea	bx,-$10[bp]
23202 5E10           53                         push	bx
23203                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23204 5E11           8A46         06            mov	al,6[bp]
23205 5E14           30E4                       xor	ah,ah
23206 5E16           50                         push	ax
23207                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23208 5E17           E8         E542            call	_biosfn_get_cursor_pos
23209 5E1A           83C4                   06  add	sp,*6
23210                                           !BCC_EOS
23211                                           ! 2638  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23212                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23213 5E1D           8A46         F2            mov	al,-$E[bp]
23214                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23215 5E20           8846         FE            mov	-2[bp],al
23216                                           !BCC_EOS
23217                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23218 5E23           8B46         F2            mov	ax,-$E[bp]
23219 5E26           30C0                       xor	al,al
23220                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23221 5E28           88E0                       mov	al,ah
23222 5E2A           30E4                       xor	ah,ah
23223                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23224 5E2C           8846         FD            mov	-3[bp],al
23225                                           !BCC_EOS
23226                                           ! 2639  nbrows=read_byte(0x40,0x84)+1;
23227                                           ! Debug: list int = const $84 (used reg = )
23228 5E2F           B8                   0084  mov	ax,#$84
23229 5E32           50                         push	ax
23230                                           ! Debug: list int = const $40 (used reg = )
23231 5E33           B8                   0040  mov	ax,*$40
23232 5E36           50                         push	ax
23233                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23234 5E37           E8         1D0F            call	_read_byte
23235 5E3A           83C4                   04  add	sp,*4
23236                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23237 5E3D           30E4                       xor	ah,ah
23238                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23239 5E3F           40                         inc	ax
23240 5E40           8946         F6            mov	-$A[bp],ax
23241                                           !BCC_EOS
23242                                           ! 2640  nbcols=read_word(0x40,0x4A);
23243                                           ! Debug: list int = const $4A (used reg = )
23244 5E43           B8                   004A  mov	ax,*$4A
23245 5E46           50                         push	ax
23246                                           ! Debug: list int = const $40 (used reg = )
23247 5E47           B8                   0040  mov	ax,*$40
23248 5E4A           50                         push	ax
23249                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23250 5E4B           E8         1D0E            call	_read_word
23251 5E4E           83C4                   04  add	sp,*4
23252                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23253 5E51           8946         F8            mov	-8[bp],ax
23254                                           !BCC_EOS
23255                                           ! 2641  switch(car)
23256 5E54           8A46         04            mov	al,4[bp]
23257                                           ! 2642   {
23258 5E57           E9         01EE            br 	.1D5
23259                                           ! 2643    case 7:
23260                                           ! 2644     break;
23261                       00005E5A            .1D6:
23262 5E5A           E9         0211            br 	.1D3
23263                                           !BCC_EOS
23264                                           ! 2645    case 8:
23265                                           ! 2646     if(xcurs>0)xcurs--;
23266                       00005E5D            .1D7:
23267                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23268 5E5D           8A46         FE            mov	al,-2[bp]
23269 5E60           84C0                       test	al,al
23270 5E62           74           07            je  	.1D8
23271                       00005E64            .1D9:
23272                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23273 5E64           8A46         FE            mov	al,-2[bp]
23274 5E67           48                         dec	ax
23275 5E68           8846         FE            mov	-2[bp],al
23276                                           !BCC_EOS
23277                                           ! 2647     break;
23278                       00005E6B            .1D8:
23279 5E6B           E9         0200            br 	.1D3
23280                                           !BCC_EOS
23281                                           ! 2648    case '\r':
23282                                           ! 2649     xcurs=0;
23283                       00005E6E            .1DA:
23284                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23285 5E6E           30C0                       xor	al,al
23286 5E70           8846         FE            mov	-2[bp],al
23287                                           !BCC_EOS
23288                                           ! 2650     break;
23289 5E73           E9         01F8            br 	.1D3
23290                                           !BCC_EOS
23291                                           ! 2651    case '\n':
23292                                           ! 2652     ycurs++;
23293                       00005E76            .1DB:
23294                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23295 5E76           8A46         FD            mov	al,-3[bp]
23296 5E79           40                         inc	ax
23297 5E7A           8846         FD            mov	-3[bp],al
23298                                           !BCC_EOS
23299                                           ! 2653     break;
23300 5E7D           E9         01EE            br 	.1D3
23301                                           !BCC_EOS
23302                                           ! 2654    case '\t':
23303                                           ! 2655     do
23304                       00005E80            .1DC:
23305                                           ! 2656      {
23306                       00005E80            .1DF:
23307                                           ! 2657       biosfn_write_teletype(' ',page,attr,flag);
23308                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23309 5E80           8A46         0A            mov	al,$A[bp]
23310 5E83           30E4                       xor	ah,ah
23311 5E85           50                         push	ax
23312                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23313 5E86           8A46         08            mov	al,8[bp]
23314 5E89           30E4                       xor	ah,ah
23315 5E8B           50                         push	ax
23316                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23317 5E8C           8A46         06            mov	al,6[bp]
23318 5E8F           30E4                       xor	ah,ah
23319 5E91           50                         push	ax
23320                                           ! Debug: list int = const $20 (used reg = )
23321 5E92           B8                   0020  mov	ax,*$20
23322 5E95           50                         push	ax
23323                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23324 5E96           E8         FF28            call	_biosfn_write_teletype
23325 5E99           83C4                   08  add	sp,*8
23326                                           !BCC_EOS
23327                                           ! 2658       biosfn_get_cursor_pos(page,&dummy,&cursor);
23328                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23329 5E9C           8D5E         F2            lea	bx,-$E[bp]
23330 5E9F           53                         push	bx
23331                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23332 5EA0           8D5E         F0            lea	bx,-$10[bp]
23333 5EA3           53                         push	bx
23334                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23335 5EA4           8A46         06            mov	al,6[bp]
23336 5EA7           30E4                       xor	ah,ah
23337 5EA9           50                         push	ax
23338                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23339 5EAA           E8         E4AF            call	_biosfn_get_cursor_pos
23340 5EAD           83C4                   06  add	sp,*6
23341                                           !BCC_EOS
23342                                           ! 2659       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23343                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23344 5EB0           8A46         F2            mov	al,-$E[bp]
23345                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23346 5EB3           8846         FE            mov	-2[bp],al
23347                                           !BCC_EOS
23348                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23349 5EB6           8B46         F2            mov	ax,-$E[bp]
23350 5EB9           30C0                       xor	al,al
23351                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23352 5EBB           88E0                       mov	al,ah
23353 5EBD           30E4                       xor	ah,ah
23354                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23355 5EBF           8846         FD            mov	-3[bp],al
23356                                           !BCC_EOS
23357                                           ! 2660      }while(xcurs%8==0);
23358                       00005EC2            .1DE:
23359                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23360 5EC2           8A46         FE            mov	al,-2[bp]
23361 5EC5           30E4                       xor	ah,ah
23362 5EC7           24                     07  and	al,*7
23363                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23364 5EC9           84C0                       test	al,al
23365 5ECB           74           B3            je 	.1DF
23366                       00005ECD            .1E0:
23367                                           !BCC_EOS
23368                                           ! 2661     break;
23369                       00005ECD            .1DD:
23370 5ECD           E9         019E            br 	.1D3
23371                                           !BCC_EOS
23372                                           ! 2662    default:
23373                                           ! 2663     if(vga_modes[line].class==0x00)
23374                       00005ED0            .1E1:
23375                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23376 5ED0           8A46         FB            mov	al,-5[bp]
23377 5ED3           30E4                       xor	ah,ah
23378 5ED5           B1                     03  mov	cl,*3
23379 5ED7           D3E0                       shl	ax,cl
23380 5ED9           89C3                       mov	bx,ax
23381 5EDB           81C3                 01C3  add	bx,#_vga_modes
23382                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23383 5EDF           8A47         01            mov	al,1[bx]
23384 5EE2           84C0                       test	al,al
23385 5EE4   7403    E9         0082            bne 	.1E2
23386                       00005EE9            .1E3:
23387                                           ! 2664      {
23388                                           ! 2665       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23389                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23390 5EE9           8A46         FD            mov	al,-3[bp]
23391 5EEC           30E4                       xor	ah,ah
23392 5EEE           8B4E         F8            mov	cx,-8[bp]
23393 5EF1           F7E9                       imul	cx
23394                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23395                                           ! Debug: expression subtree swapping
23396 5EF3           0246         FE            add	al,-2[bp]
23397 5EF6           80D4                   00  adc	ah,*0
23398                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23399 5EF9           D1E0                       shl	ax,*1
23400 5EFB           50                         push	ax
23401                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23402 5EFC           8B46         F8            mov	ax,-8[bp]
23403 5EFF           8B4E         F6            mov	cx,-$A[bp]
23404 5F02           F7E9                       imul	cx
23405                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23406 5F04           D1E0                       shl	ax,*1
23407                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23408 5F06           0C                     FF  or	al,#$FF
23409                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23410                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23411 5F08           89C3                       mov	bx,ax
23412 5F0A           8A46         06            mov	al,6[bp]
23413 5F0D           30E4                       xor	ah,ah
23414 5F0F           93                         xchg	ax,bx
23415 5F10           40                         inc	ax
23416 5F11           89D9                       mov	cx,bx
23417 5F13           F7E9                       imul	cx
23418                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23419 5F15           0346         EE            add	ax,0+..FFF6[bp]
23420 5F18           44                         inc	sp
23421 5F19           44                         inc	sp
23422                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23423 5F1A           8946         F4            mov	-$C[bp],ax
23424                                           !BCC_EOS
23425                                           ! 2666       write_byte(vga_modes[line].sstart,address,car);
23426                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23427 5F1D           8A46         04            mov	al,4[bp]
23428 5F20           30E4                       xor	ah,ah
23429 5F22           50                         push	ax
23430                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23431 5F23           FF76         F4            push	-$C[bp]
23432                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23433 5F26           8A46         FB            mov	al,-5[bp]
23434 5F29           30E4                       xor	ah,ah
23435 5F2B           B1                     03  mov	cl,*3
23436 5F2D           D3E0                       shl	ax,cl
23437 5F2F           89C3                       mov	bx,ax
23438 5F31           81C3                 01C3  add	bx,#_vga_modes
23439                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23440 5F35           FF77         04            push	4[bx]
23441                                           ! Debug: func () void = write_byte+0 (used reg = )
23442 5F38           E8         1C34            call	_write_byte
23443 5F3B           83C4                   06  add	sp,*6
23444                                           !BCC_EOS
23445                                           ! 2667       if(flag==3)
23446                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23447 5F3E           8A46         0A            mov	al,$A[bp]
23448 5F41           3C                     03  cmp	al,*3
23449 5F43           75           23            jne 	.1E4
23450                       00005F45            .1E5:
23451                                           ! 2668        
23452                                           ! 2668 write_byte(vga_modes[line].sstart,address+1,attr);
23453                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23454 5F45           8A46         08            mov	al,8[bp]
23455 5F48           30E4                       xor	ah,ah
23456 5F4A           50                         push	ax
23457                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23458 5F4B           8B46         F4            mov	ax,-$C[bp]
23459                                           ! Debug: list unsigned int = ax+1 (used reg = )
23460 5F4E           40                         inc	ax
23461 5F4F           50                         push	ax
23462                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23463 5F50           8A46         FB            mov	al,-5[bp]
23464 5F53           30E4                       xor	ah,ah
23465 5F55           B1                     03  mov	cl,*3
23466 5F57           D3E0                       shl	ax,cl
23467 5F59           89C3                       mov	bx,ax
23468 5F5B           81C3                 01C3  add	bx,#_vga_modes
23469                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23470 5F5F           FF77         04            push	4[bx]
23471                                           ! Debug: func () void = write_byte+0 (used reg = )
23472 5F62           E8         1C0A            call	_write_byte
23473 5F65           83C4                   06  add	sp,*6
23474                                           !BCC_EOS
23475                                           ! 2669      }
23476                       00005F68            .1E4:
23477                                           ! 2670     else
23478                                           ! 2671      {
23479 5F68           E9         00D4            br 	.1E6
23480                       00005F6B            .1E2:
23481                                           ! 2672       cheight=video_param_table[line_to_vpti[line]].cheight;
23482                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23483 5F6B           8A46         FB            mov	al,-5[bp]
23484 5F6E           30E4                       xor	ah,ah
23485 5F70           89C3                       mov	bx,ax
23486                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23487 5F72           8A87       0243            mov	al,_line_to_vpti[bx]
23488 5F76           30E4                       xor	ah,ah
23489 5F78           B1                     06  mov	cl,*6
23490 5F7A           D3E0                       shl	ax,cl
23491 5F7C           89C3                       mov	bx,ax
23492 5F7E           81C3                 0257  add	bx,#_video_param_table
23493                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23494 5F82           8A47         02            mov	al,2[bx]
23495 5F85           8846         FF            mov	-1[bp],al
23496                                           !BCC_EOS
23497                                           ! 2673       bpp=vga_modes[line].pixbits;
23498                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23499 5F88           8A46         FB            mov	al,-5[bp]
23500 5F8B           30E4                       xor	ah,ah
23501 5F8D           B1                     03  mov	cl,*3
23502 5F8F           D3E0                       shl	ax,cl
23503 5F91           89C3                       mov	bx,ax
23504 5F93           81C3                 01C3  add	bx,#_vga_modes
23505                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23506 5F97           8A47         03            mov	al,3[bx]
23507 5F9A           8846         FA            mov	-6[bp],al
23508                                           !BCC_EOS
23509                                           ! 2674       switch(vga_modes[line].memmodel)
23510                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23511 5F9D           8A46         FB            mov	al,-5[bp]
23512 5FA0           30E4                       xor	ah,ah
23513 5FA2           B1                     03  mov	cl,*3
23514 5FA4           D3E0                       shl	ax,cl
23515 5FA6           89C3                       mov	bx,ax
23516 5FA8           81C3                 01C3  add	bx,#_vga_modes
23517 5FAC           8A47         02            mov	al,2[bx]
23518                                           ! 2675        {
23519 5FAF           E9         0077            br 	.1E9
23520                                           ! 2676         case 0x04:
23521                                           ! 2677         case 0x03:
23522                       00005FB2            .1EA:
23523                                           ! 2678           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
23524                       00005FB2            .1EB:
23525                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
23526 5FB2           8A46         FF            mov	al,-1[bp]
23527 5FB5           30E4                       xor	ah,ah
23528 5FB7           50                         push	ax
23529                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23530 5FB8           FF76         F8            push	-8[bp]
23531                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23532 5FBB           8A46         FD            mov	al,-3[bp]
23533 5FBE           30E4                       xor	ah,ah
23534 5FC0           50                         push	ax
23535                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23536 5FC1           8A46         FE            mov	al,-2[bp]
23537 5FC4           30E4                       xor	ah,ah
23538 5FC6           50                         push	ax
23539                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23540 5FC7           8A46         08            mov	al,8[bp]
23541 5FCA           30E4                       xor	ah,ah
23542 5FCC           50                         push	ax
23543                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23544 5FCD           8A46         04            mov	al,4[bp]
23545 5FD0           30E4                       xor	ah,ah
23546 5FD2           50                         push	ax
23547                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
23548 5FD3           E8         F08D            call	_write_gfx_char_pl4
23549 5FD6           83C4                   0C  add	sp,*$C
23550                                           !BCC_EOS
23551                                           ! 2679           break;
23552 5FD9           EB           64            jmp .1E7
23553                                           !BCC_EOS
23554                                           ! 2680         case 0x02:
23555                                           ! 2681           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
23556                       00005FDB            .1EC:
23557                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
23558 5FDB           8A46         FA            mov	al,-6[bp]
23559 5FDE           30E4                       xor	ah,ah
23560 5FE0           50                         push	ax
23561                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23562 5FE1           FF76         F8            push	-8[bp]
23563                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23564 5FE4           8A46         FD            mov	al,-3[bp]
23565 5FE7           30E4                       xor	ah,ah
23566 5FE9           50                         push	ax
23567                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23568 5FEA           8A46         FE            mov	al,-2[bp]
23569 5FED           30E4                       xor	ah,ah
23570 5FEF           50                         push	ax
23571                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23572 5FF0           8A46         08            mov	al,8[bp]
23573 5FF3           30E4                       xor	ah,ah
23574 5FF5           50                         push	ax
23575                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23576 5FF6           8A46         04            mov	al,4[bp]
23577 5FF9           30E4                       xor	ah,ah
23578 5FFB           50                         push	ax
23579                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
23580 5FFC           E8         F1D9            call	_write_gfx_char_cga
23581 5FFF           83C4                   0C  add	sp,*$C
23582                                           !BCC_EOS
23583                                           ! 2682           break;
23584 6002           EB           3B            jmp .1E7
23585                                           !BCC_EOS
23586                                           ! 2683         case 0x05:
23587                                           ! 2684           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
23588                       00006004            .1ED:
23589                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
23590 6004           FF76         F8            push	-8[bp]
23591                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
23592 6007           8A46         FD            mov	al,-3[bp]
23593 600A           30E4                       xor	ah,ah
23594 600C           50                         push	ax
23595                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
23596 600D           8A46         FE            mov	al,-2[bp]
23597 6010           30E4                       xor	ah,ah
23598 6012           50                         push	ax
23599                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
23600 6013           8A46         08            mov	al,8[bp]
23601 6016           30E4                       xor	ah,ah
23602 6018           50                         push	ax
23603                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
23604 6019           8A46         04            mov	al,4[bp]
23605 601C           30E4                       xor	ah,ah
23606 601E           50                         push	ax
23607                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
23608 601F           E8         F3BC            call	_write_gfx_char_lin
23609 6022           83C4                   0A  add	sp,*$A
23610                                           !BCC_EOS
23611                                           ! 2685           break;
23612 6025           EB           18            jmp .1E7
23613                                           !BCC_EOS
23614                                           ! 2686        }
23615                                           ! 2687      }
23616 6027           EB           16            jmp .1E7
23617                       00006029            .1E9:
23618 6029           2C                     02  sub	al,*2
23619 602B           74           AE            je 	.1EC
23620 602D           2C                     01  sub	al,*1
23621 602F   7503    E9         FF7E            beq 	.1EB
23622 6034           2C                     01  sub	al,*1
23623 6036   7503    E9         FF77            beq 	.1EA
23624 603B           2C                     01  sub	al,*1
23625 603D           74           C5            je 	.1ED
23626                       0000603F            .1E7:
23627                                           ! 2688     xcurs++;
23628                       0000603F            .1E6:
23629                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
23630 603F           8A46         FE            mov	al,-2[bp]
23631 6042           40                         inc	ax
23632 6043           8846         FE            mov	-2[bp],al
23633                                           !BCC_EOS
23634                                           ! 2689   }
23635                                           ! 2690  if(xcurs==nbcols)
23636 6046           EB           26            jmp .1D3
23637                       00006048            .1D5:
23638 6048           2C                     07  sub	al,*7
23639 604A   7503    E9         FE0B            beq 	.1D6
23640 604F           2C                     01  sub	al,*1
23641 6051   7503    E9         FE07            beq 	.1D7
23642 6056           2C                     01  sub	al,*1
23643 6058   7503    E9         FE23            beq 	.1DC
23644 605D           2C                     01  sub	al,*1
23645 605F   7503    E9         FE12            beq 	.1DB
23646 6064           2C                     03  sub	al,*3
23647 6066   7503    E9         FE03            beq 	.1DA
23648 606B           E9         FE62            br 	.1E1
23649                       0000606E            .1D3:
23650                       FFFFFFEE            ..FFF6	=	-$12
23651                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
23652 606E           8A46         FE            mov	al,-2[bp]
23653 6071           30E4                       xor	ah,ah
23654 6073           3B46         F8            cmp	ax,-8[bp]
23655 6076           75           0C            jne 	.1EE
23656                       00006078            .1EF:
23657                                           ! 2691   {xcurs=0;
23658                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23659 6078           30C0                       xor	al,al
23660 607A           8846         FE            mov	-2[bp],al
23661                                           !BCC_EOS
23662                                           ! 2692    ycurs++;
23663                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23664 607D           8A46         FD            mov	al,-3[bp]
23665 6080           40                         inc	ax
23666 6081           8846         FD            mov	-3[bp],al
23667                                           !BCC_EOS
23668                                           ! 2693   }
23669                                           ! 2694  if(ycurs==nbrows)
23670                       00006084            .1EE:
23671                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
23672 6084           8A46         FD            mov	al,-3[bp]
23673 6087           30E4                       xor	ah,ah
23674 6089           3B46         F6            cmp	ax,-$A[bp]
23675 608C   7403    E9         00CA            bne 	.1F0
23676                       00006091            .1F1:
23677                                           ! 2695   {
23678                                           ! 2696    if(vga_modes[line].class==0x00)
23679                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23680 6091           8A46         FB            mov	al,-5[bp]
23681 6094           30E4                       xor	ah,ah
23682 6096           B1                     03  mov	cl,*3
23683 6098           D3E0                       shl	ax,cl
23684 609A           89C3                       mov	bx,ax
23685 609C           81C3                 01C3  add	bx,#_vga_modes
23686                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23687 60A0           8A47         01            mov	al,1[bx]
23688 60A3           84C0                       test	al,al
23689 60A5   7403    E9         0081            bne 	.1F2
23690                       000060AA            .1F3:
23691                                           ! 2697     {
23692                                           ! 2698      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
23693                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
23694 60AA           8A46         FD            mov	al,-3[bp]
23695 60AD           30E4                       xor	ah,ah
23696                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
23697 60AF           48                         dec	ax
23698 60B0           8B4E         F8            mov	cx,-8[bp]
23699 60B3           F7E9                       imul	cx
23700                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23701                                           ! Debug: expression subtree swapping
23702 60B5           0246         FE            add	al,-2[bp]
23703 60B8           80D4                   00  adc	ah,*0
23704                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23705 60BB           D1E0                       shl	ax,*1
23706 60BD           50                         push	ax
23707                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23708 60BE           8B46         F8            mov	ax,-8[bp]
23709 60C1           8B4E         F6            mov	cx,-$A[bp]
23710 60C4           F7E9                       imul	cx
23711                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23712 60C6           D1E0                       shl	ax,*1
23713                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23714 60C8           0C                     FF  or	al,#$FF
23715                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23716                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23717 60CA           89C3                       mov	bx,ax
23718 60CC           8A46         06            mov	al,6[bp]
23719 60CF           30E4                       xor	ah,ah
23720 60D1           93                         xchg	ax,bx
23721 60D2           40                         inc	ax
23722 60D3           89D9                       mov	cx,bx
23723 60D5           F7E9                       imul	cx
23724                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23725 60D7           0346         EE            add	ax,-$12[bp]
23726 60DA           44                         inc	sp
23727 60DB           44                         inc	sp
23728                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23729 60DC           8946         F4            mov	-$C[bp],ax
23730                                           !BCC_EOS
23731                                           ! 2699      attr=read_byte(vga_modes[line].sstart,address+1);
23732                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
23733 60DF           8B46         F4            mov	ax,-$C[bp]
23734                                           ! Debug: list unsigned int = ax+1 (used reg = )
23735 60E2           40                         inc	ax
23736 60E3           50                         push	ax
23737                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$10] struct  = vga_modes+0 (used reg = )
23738 60E4           8A46         FB            mov	al,-5[bp]
23739 60E7           30E4                       xor	ah,ah
23740 60E9           B1                     03  mov	cl,*3
23741 60EB           D3E0                       shl	ax,cl
23742 60ED           89C3                       mov	bx,ax
23743 60EF           81C3                 01C3  add	bx,#_vga_modes
23744                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23745 60F3           FF77         04            push	4[bx]
23746                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23747 60F6           E8         1A50            call	_read_byte
23748 60F9           83C4                   04  add	sp,*4
23749                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
23750 60FC           8846         08            mov	8[bp],al
23751                                           !BCC_EOS
23752                                           ! 2700      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
23753                                           ! Debug: list int = const 1 (used reg = )
23754 60FF           B8                   0001  mov	ax,*1
23755 6102           50                         push	ax
23756                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23757 6103           8A46         06            mov	al,6[bp]
23758 6106           30E4                       xor	ah,ah
23759 6108           50                         push	ax
23760                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23761 6109           8B46         F8            mov	ax,-8[bp]
23762                                           ! Debug: list unsigned int = ax-1 (used reg = )
23763 610C           48                         dec	ax
23764 610D           50                         push	ax
23765                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23766 610E           8B46         F6            mov	ax,-$A[bp]
23767                                           ! Debug: list unsigned int = ax-1 (used reg = )
23768 6111           48                         dec	ax
23769 6112           50                         push	ax
23770                                           ! Debug: list int = const 0 (used reg = )
23771 6113           31C0                       xor	ax,ax
23772 6115           50                         push	ax
23773                                           ! Debug: list int = const 0 (used reg = )
23774 6116           31C0                       xor	ax,ax
23775 6118           50                         push	ax
23776                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
23777 6119           8A46         08            mov	al,8[bp]
23778 611C           30E4                       xor	ah,ah
23779 611E           50                         push	ax
23780                                           ! Debug: list int = const 1 (used reg = )
23781 611F           B8                   0001  mov	ax,*1
23782 6122           50                         push	ax
23783                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23784 6123           E8         E72F            call	_biosfn_scroll
23785 6126           83C4                   10  add	sp,*$10
23786                                           !BCC_EOS
23787                                           ! 2701     }
23788                                           ! 2702    else
23789                                           ! 2703     {
23790 6129           EB           27            jmp .1F4
23791                       0000612B            .1F2:
23792                                           ! 2704      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
23793                                           ! Debug: list int = const 1 (used reg = )
23794 612B           B8                   0001  mov	ax,*1
23795 612E           50                         push	ax
23796                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23797 612F           8A46         06            mov	al,6[bp]
23798 6132           30E4                       xor	ah,ah
23799 6134           50                         push	ax
23800                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23801 6135           8B46         F8            mov	ax,-8[bp]
23802                                           ! Debug: list unsigned int = ax-1 (used reg = )
23803 6138           48                         dec	ax
23804 6139           50                         push	ax
23805                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23806 613A           8B46         F6            mov	ax,-$A[bp]
23807                                           ! Debug: list unsigned int = ax-1 (used reg = )
23808 613D           48                         dec	ax
23809 613E           50                         push	ax
23810                                           ! Debug: list int = const 0 (used reg = )
23811 613F           31C0                       xor	ax,ax
23812 6141           50                         push	ax
23813                                           ! Debug: list int = const 0 (used reg = )
23814 6142           31C0                       xor	ax,ax
23815 6144           50                         push	ax
23816                                           ! Debug: list int = const 0 (used reg = )
23817 6145           31C0                       xor	ax,ax
23818 6147           50                         push	ax
23819                                           ! Debug: list int = const 1 (used reg = )
23820 6148           B8                   0001  mov	ax,*1
23821 614B           50                         push	ax
23822                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23823 614C           E8         E706            call	_biosfn_scroll
23824 614F           83C4                   10  add	sp,*$10
23825                                           !BCC_EOS
23826                                           ! 2705     }
23827                                           ! 2706    ycurs-=1;
23828                       00006152            .1F4:
23829                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
23830 6152           8A46         FD            mov	al,-3[bp]
23831 6155           30E4                       xor	ah,ah
23832 6157           48                         dec	ax
23833 6158           8846         FD            mov	-3[bp],al
23834                                           !BCC_EOS
23835                                           ! 2707   }
23836                                           ! 2708  cursor=ycurs; cursor<<=8; cursor+=xcurs;
23837                       0000615B            .1F0:
23838                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
23839 615B           8A46         FD            mov	al,-3[bp]
23840 615E           30E4                       xor	ah,ah
23841 6160           8946         F2            mov	-$E[bp],ax
23842                                           !BCC_EOS
23843                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
23844 6163           8B46         F2            mov	ax,-$E[bp]
23845 6166           88C4                       mov	ah,al
23846 6168           30C0                       xor	al,al
23847 616A           8946         F2            mov	-$E[bp],ax
23848                                           !BCC_EOS
23849                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
23850 616D           8B46         F2            mov	ax,-$E[bp]
23851 6170           0246         FE            add	al,-2[bp]
23852 6173           80D4                   00  adc	ah,*0
23853 6176           8946         F2            mov	-$E[bp],ax
23854                                           !BCC_EOS
23855                                           ! 2709  biosfn_set_cursor_pos(page,cursor);
23856                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
23857 6179           FF76         F2            push	-$E[bp]
23858                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23859 617C           8A46         06            mov	al,6[bp]
23860 617F           30E4                       xor	ah,ah
23861 6181           50                         push	ax
23862                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
23863 6182           E8         E0D6            call	_biosfn_set_cursor_pos
23864 6185           83C4                   04  add	sp,*4
23865                                           !BCC_EOS
23866                                           ! 2710 }
23867 6188           89EC                       mov	sp,bp
23868 618A           5D                         pop	bp
23869 618B           C3                         ret
23870                                           ! 2711 #asm
23871                                           !BCC_ASM
23872                       00000008            _biosfn_write_teletype.flag	set	8
23873                       00000006            _biosfn_write_teletype.attr	set	6
23874                       00000004            _biosfn_write_teletype.page	set	4
23875                       00000002            _biosfn_write_teletype.car	set	2
23876                       0000618C            biosfn_get_video_mode:
23877 618C           1E                           push ds
23878 618D           B8                   0040    mov ax, # 0x40
23879 6190           8ED8                         mov ds, ax
23880 6192           53                           push bx
23881 6193           BB                   0062    mov bx, # 0x62
23882 6196           8A07                         mov al, [bx]
23883 6198           5B                           pop bx
23884 6199           88C7                         mov bh, al
23885 619B           53                           push bx
23886 619C           BB                   0087    mov bx, # 0x87
23887 619F           8A27                         mov ah, [bx]
23888 61A1           80E4                   80    and ah, #0x80
23889 61A4           BB                   0049    mov bx, # 0x49
23890 61A7           8A07                         mov al, [bx]
23891 61A9           08E0                         or al, ah
23892 61AB           BB                   004A    mov bx, # 0x4A
23893 61AE           8A27                         mov ah, [bx]
23894 61B0           5B                           pop bx
23895 61B1           1F                           pop ds
23896 61B2           C3                           ret
23897                                           ! 2733 endasm
23898                                           !BCC_ENDASM
23899                                           ! 2734 #asm
23900                                           !BCC_ASM
23901                       00000008            _biosfn_write_teletype.flag	set	8
23902                       00000006            _biosfn_write_teletype.attr	set	6
23903                       00000004            _biosfn_write_teletype.page	set	4
23904                       00000002            _biosfn_write_teletype.car	set	2
23905                       000061B3            biosfn_group_10:
23906 61B3           3C                     00    cmp al, #0x00
23907 61B5           75           02              jne int10_test_1001
23908 61B7           EB           61              jmp biosfn_set_single_palette_reg
23909                       000061B9            int10_test_1001:
23910 61B9           3C                     01    cmp al, #0x01
23911 61BB           75           02              jne int10_test_1002
23912 61BD           EB           75              jmp biosfn_set_overscan_border_color
23913                       000061BF            int10_test_1002:
23914 61BF           3C                     02    cmp al, #0x02
23915 61C1           75           02              jne int10_test_1003
23916 61C3           EB           77              jmp biosfn_set_all_palette_reg
23917                       000061C5            int10_test_1003:
23918 61C5           3C                     03    cmp al, #0x03
23919 61C7           75           03              jne int10_test_1007
23920 61C9           E9         009D              jmp biosfn_toggle_intensity
23921                       000061CC            int10_test_1007:
23922 61CC           3C                     07    cmp al, #0x07
23923 61CE           75           03              jne int10_test_1008
23924 61D0           E9         00BF              jmp biosfn_get_single_palette_reg
23925                       000061D3            int10_test_1008:
23926 61D3           3C                     08    cmp al, #0x08
23927 61D5           75           03              jne int10_test_1009
23928 61D7           E9         00DC              jmp biosfn_read_overscan_border_color
23929                       000061DA            int10_test_1009:
23930 61DA           3C                     09    cmp al, #0x09
23931 61DC           75           03              jne int10_test_1010
23932 61DE           E9         00E3              jmp biosfn_get_all_palette_reg
23933                       000061E1            int10_test_1010:
23934 61E1           3C                     10    cmp al, #0x10
23935 61E3           75           03              jne int10_test_1012
23936 61E5           E9         011D              jmp biosfn_set_single_dac_reg
23937                       000061E8            int10_test_1012:
23938 61E8           3C                     12    cmp al, #0x12
23939 61EA           75           03              jne int10_test_1013
23940 61EC           E9         012F              jmp biosfn_set_all_dac_reg
23941                       000061EF            int10_test_1013:
23942 61EF           3C                     13    cmp al, #0x13
23943 61F1           75           03              jne int10_test_1015
23944 61F3           E9         0150              jmp biosfn_select_video_dac_color_page
23945                       000061F6            int10_test_1015:
23946 61F6           3C                     15    cmp al, #0x15
23947 61F8           75           03              jne int10_test_1017
23948 61FA           E9         0198              jmp biosfn_read_single_dac_reg
23949                       000061FD            int10_test_1017:
23950 61FD           3C                     17    cmp al, #0x17
23951 61FF           75           03              jne int10_test_1018
23952 6201           E9         01AC              jmp biosfn_read_all_dac_reg
23953                       00006204            int10_test_1018:
23954 6204           3C                     18    cmp al, #0x18
23955 6206           75           03              jne int10_test_1019
23956 6208           E9         01CD              jmp biosfn_set_pel_mask
23957                       0000620B            int10_test_1019:
23958 620B           3C                     19    cmp al, #0x19
23959 620D           75           03              jne int10_test_101A
23960 620F           E9         01D1              jmp biosfn_read_pel_mask
23961                       00006212            int10_test_101A:
23962 6212           3C                     1A    cmp al, #0x1a
23963 6214           75           03              jne int10_group_10_unknown
23964 6216           E9         01D5              jmp biosfn_read_video_dac_state
23965                       00006219            int10_group_10_unknown:
23966 6219           C3                           ret
23967                       0000621A            biosfn_set_single_palette_reg:
23968 621A           80FB                   14    cmp bl, #0x14
23969 621D           77           14              ja no_actl_reg1
23970 621F           50                           push ax
23971 6220           52                           push dx
23972 6221           BA                   03DA    mov dx, # 0x3da
23973 6224           EC                           in al, dx
23974 6225           BA                   03C0    mov dx, # 0x3c0
23975 6228           88D8                         mov al, bl
23976 622A           EE                           out dx, al
23977 622B           88F8                         mov al, bh
23978 622D           EE                           out dx, al
23979 622E           B0                     20    mov al, #0x20
23980 6230           EE                           out dx, al
23981 6231           5A                           pop dx
23982 6232           58                           pop ax
23983                       00006233            no_actl_reg1:
23984 6233           C3                           ret
23985                                           ! 2815 endasm
23986                                           !BCC_ENDASM
23987                                           ! 2816 #asm
23988                                           !BCC_ASM
23989                       00000008            _biosfn_write_teletype.flag	set	8
23990                       00000006            _biosfn_write_teletype.attr	set	6
23991                       00000004            _biosfn_write_teletype.page	set	4
23992                       00000002            _biosfn_write_teletype.car	set	2
23993                       00006234            biosfn_set_overscan_border_color:
23994 6234           53                           push bx
23995 6235           B3                     11    mov bl, #0x11
23996 6237           E8         FFE0              call biosfn_set_single_palette_reg
23997 623A           5B                           pop bx
23998 623B           C3                           ret
23999                                           ! 2823 endasm
24000                                           !BCC_ENDASM
24001                                           ! 2824 #asm
24002                                           !BCC_ASM
24003                       00000008            _biosfn_write_teletype.flag	set	8
24004                       00000006            _biosfn_write_teletype.attr	set	6
24005                       00000004            _biosfn_write_teletype.page	set	4
24006                       00000002            _biosfn_write_teletype.car	set	2
24007                       0000623C            biosfn_set_all_palette_reg:
24008 623C           50                           push ax
24009 623D           53                           push bx
24010 623E           51                           push cx
24011 623F           52                           push dx
24012 6240           89D3                         mov bx, dx
24013 6242           BA                   03DA    mov dx, # 0x3da
24014 6245           EC                           in al, dx
24015 6246           B1                     00    mov cl, #0x00
24016 6248           BA                   03C0    mov dx, # 0x3c0
24017                       0000624B            set_palette_loop:
24018 624B           88C8                         mov al, cl
24019 624D           EE                           out dx, al
24020 624E           26                           seg es
24021 624F           8A07                         mov al, [bx]
24022 6251           EE                           out dx, al
24023 6252           43                           inc bx
24024 6253           FEC1                         inc cl
24025 6255           80F9                   10    cmp cl, #0x10
24026 6258           75           F1              jne set_palette_loop
24027 625A           B0                     11    mov al, #0x11
24028 625C           EE                           out dx, al
24029 625D           26                           seg es
24030 625E           8A07                         mov al, [bx]
24031 6260           EE                           out dx, al
24032 6261           B0                     20    mov al, #0x20
24033 6263           EE                           out dx, al
24034 6264           5A                           pop dx
24035 6265           59                           pop cx
24036 6266           5B                           pop bx
24037 6267           58                           pop ax
24038 6268           C3                           ret
24039                                           ! 2857 endasm
24040                                           !BCC_ENDASM
24041                                           ! 2858 #asm
24042                                           !BCC_ASM
24043                       00000008            _biosfn_write_teletype.flag	set	8
24044                       00000006            _biosfn_write_teletype.attr	set	6
24045                       00000004            _biosfn_write_teletype.page	set	4
24046                       00000002            _biosfn_write_teletype.car	set	2
24047                       00006269            biosfn_toggle_intensity:
24048 6269           50                           push ax
24049 626A           53                           push bx
24050 626B           52                           push dx
24051 626C           BA                   03DA    mov dx, # 0x3da
24052 626F           EC                           in al, dx
24053 6270           BA                   03C0    mov dx, # 0x3c0
24054 6273           B0                     10    mov al, #0x10
24055 6275           EE                           out dx, al
24056 6276           BA                   03C1    mov dx, # 0x3c1
24057 6279           EC                           in al, dx
24058 627A           24                     F7    and al, #0xf7
24059 627C           80E3                   01    and bl, #0x01
24060                                             ;shl bl, 3
24061 627F           D0E3                         shl bl, 1
24062 6281           D0E3                         shl bl, 1
24063 6283           D0E3                         shl bl, 1
24064 6285           08D8                         or al, bl
24065 6287           BA                   03C0    mov dx, # 0x3c0
24066 628A           EE                           out dx, al
24067 628B           B0                     20    mov al, #0x20
24068 628D           EE                           out dx, al
24069 628E           5A                           pop dx
24070 628F           5B                           pop bx
24071 6290           58                           pop ax
24072 6291           C3                           ret
24073                                           ! 2885 endasm
24074                                           !BCC_ENDASM
24075                                           ! 2886 #asm
24076                                           !BCC_ASM
24077                       00000008            _biosfn_write_teletype.flag	set	8
24078                       00000006            _biosfn_write_teletype.attr	set	6
24079                       00000004            _biosfn_write_teletype.page	set	4
24080                       00000002            _biosfn_write_teletype.car	set	2
24081                       00006292            biosfn_get_single_palette_reg:
24082 6292           80FB                   14    cmp bl, #0x14
24083 6295           77           1E              ja no_actl_reg2
24084 6297           50                           push ax
24085 6298           52                           push dx
24086 6299           BA                   03DA    mov dx, # 0x3da
24087 629C           EC                           in al, dx
24088 629D           BA                   03C0    mov dx, # 0x3c0
24089 62A0           88D8                         mov al, bl
24090 62A2           EE                           out dx, al
24091 62A3           BA                   03C1    mov dx, # 0x3c1
24092 62A6           EC                           in al, dx
24093 62A7           88C7                         mov bh, al
24094 62A9           BA                   03DA    mov dx, # 0x3da
24095 62AC           EC                           in al, dx
24096 62AD           BA                   03C0    mov dx, # 0x3c0
24097 62B0           B0                     20    mov al, #0x20
24098 62B2           EE                           out dx, al
24099 62B3           5A                           pop dx
24100 62B4           58                           pop ax
24101                       000062B5            no_actl_reg2:
24102 62B5           C3                           ret
24103                                           ! 2909 endasm
24104                                           !BCC_ENDASM
24105                                           ! 2910 #asm
24106                                           !BCC_ASM
24107                       00000008            _biosfn_write_teletype.flag	set	8
24108                       00000006            _biosfn_write_teletype.attr	set	6
24109                       00000004            _biosfn_write_teletype.page	set	4
24110                       00000002            _biosfn_write_teletype.car	set	2
24111                       000062B6            biosfn_read_overscan_border_color:
24112 62B6           50                           push ax
24113 62B7           53                           push bx
24114 62B8           B3                     11    mov bl, #0x11
24115 62BA           E8         FFD5              call biosfn_get_single_palette_reg
24116 62BD           88F8                         mov al, bh
24117 62BF           5B                           pop bx
24118 62C0           88C7                         mov bh, al
24119 62C2           58                           pop ax
24120 62C3           C3                           ret
24121                                           ! 2921 endasm
24122                                           !BCC_ENDASM
24123                                           ! 2922 #asm
24124                                           !BCC_ASM
24125                       00000008            _biosfn_write_teletype.flag	set	8
24126                       00000006            _biosfn_write_teletype.attr	set	6
24127                       00000004            _biosfn_write_teletype.page	set	4
24128                       00000002            _biosfn_write_teletype.car	set	2
24129                       000062C4            biosfn_get_all_palette_reg:
24130 62C4           50                           push ax
24131 62C5           53                           push bx
24132 62C6           51                           push cx
24133 62C7           52                           push dx
24134 62C8           89D3                         mov bx, dx
24135 62CA           B1                     00    mov cl, #0x00
24136                       000062CC            get_palette_loop:
24137 62CC           BA                   03DA    mov dx, # 0x3da
24138 62CF           EC                           in al, dx
24139 62D0           BA                   03C0    mov dx, # 0x3c0
24140 62D3           88C8                         mov al, cl
24141 62D5           EE                           out dx, al
24142 62D6           BA                   03C1    mov dx, # 0x3c1
24143 62D9           EC                           in al, dx
24144 62DA           26                           seg es
24145 62DB           8807                         mov [bx], al
24146 62DD           43                           inc bx
24147 62DE           FEC1                         inc cl
24148 62E0           80F9                   10    cmp cl, #0x10
24149 62E3           75           E7              jne get_palette_loop
24150 62E5           BA                   03DA    mov dx, # 0x3da
24151 62E8           EC                           in al, dx
24152 62E9           BA                   03C0    mov dx, # 0x3c0
24153 62EC           B0                     11    mov al, #0x11
24154 62EE           EE                           out dx, al
24155 62EF           BA                   03C1    mov dx, # 0x3c1
24156 62F2           EC                           in al, dx
24157 62F3           26                           seg es
24158 62F4           8807                         mov [bx], al
24159 62F6           BA                   03DA    mov dx, # 0x3da
24160 62F9           EC                           in al, dx
24161 62FA           BA                   03C0    mov dx, # 0x3c0
24162 62FD           B0                     20    mov al, #0x20
24163 62FF           EE                           out dx, al
24164 6300           5A                           pop dx
24165 6301           59                           pop cx
24166 6302           5B                           pop bx
24167 6303           58                           pop ax
24168 6304           C3                           ret
24169                                           ! 2963 endasm
24170                                           !BCC_ENDASM
24171                                           ! 2964 #asm
24172                                           !BCC_ASM
24173                       00000008            _biosfn_write_teletype.flag	set	8
24174                       00000006            _biosfn_write_teletype.attr	set	6
24175                       00000004            _biosfn_write_teletype.page	set	4
24176                       00000002            _biosfn_write_teletype.car	set	2
24177                       00006305            biosfn_set_single_dac_reg:
24178 6305           50                           push ax
24179 6306           52                           push dx
24180 6307           BA                   03C8    mov dx, # 0x3c8
24181 630A           88D8                         mov al, bl
24182 630C           EE                           out dx, al
24183 630D           BA                   03C9    mov dx, # 0x3c9
24184 6310           58                           pop ax
24185 6311           50                           push ax
24186 6312           88E0                         mov al, ah
24187 6314           EE                           out dx, al
24188 6315           88E8                         mov al, ch
24189 6317           EE                           out dx, al
24190 6318           88C8                         mov al, cl
24191 631A           EE                           out dx, al
24192 631B           5A                           pop dx
24193 631C           58                           pop ax
24194 631D           C3                           ret
24195                                           ! 2983 endasm
24196                                           !BCC_ENDASM
24197                                           ! 2984 #asm
24198                                           !BCC_ASM
24199                       00000008            _biosfn_write_teletype.flag	set	8
24200                       00000006            _biosfn_write_teletype.attr	set	6
24201                       00000004            _biosfn_write_teletype.page	set	4
24202                       00000002            _biosfn_write_teletype.car	set	2
24203                       0000631E            biosfn_set_all_dac_reg:
24204 631E           50                           push ax
24205 631F           53                           push bx
24206 6320           51                           push cx
24207 6321           52                           push dx
24208 6322           BA                   03C8    mov dx, # 0x3c8
24209 6325           88D8                         mov al, bl
24210 6327           EE                           out dx, al
24211 6328           5A                           pop dx
24212 6329           52                           push dx
24213 632A           89D3                         mov bx, dx
24214 632C           BA                   03C9    mov dx, # 0x3c9
24215                       0000632F            set_dac_loop:
24216 632F           26                           seg es
24217 6330           8A07                         mov al, [bx]
24218 6332           EE                           out dx, al
24219 6333           43                           inc bx
24220 6334           26                           seg es
24221 6335           8A07                         mov al, [bx]
24222 6337           EE                           out dx, al
24223 6338           43                           inc bx
24224 6339           26                           seg es
24225 633A           8A07                         mov al, [bx]
24226 633C           EE                           out dx, al
24227 633D           43                           inc bx
24228 633E           49                           dec cx
24229 633F           75           EE              jnz set_dac_loop
24230 6341           5A                           pop dx
24231 6342           59                           pop cx
24232 6343           5B                           pop bx
24233 6344           58                           pop ax
24234 6345           C3                           ret
24235                                           ! 3017 endasm
24236                                           !BCC_ENDASM
24237                                           ! 3018 #asm
24238                                           !BCC_ASM
24239                       00000008            _biosfn_write_teletype.flag	set	8
24240                       00000006            _biosfn_write_teletype.attr	set	6
24241                       00000004            _biosfn_write_teletype.page	set	4
24242                       00000002            _biosfn_write_teletype.car	set	2
24243                       00006346            biosfn_select_video_dac_color_page:
24244 6346           50                           push ax
24245 6347           53                           push bx
24246 6348           52                           push dx
24247 6349           BA                   03DA    mov dx, # 0x3da
24248 634C           EC                           in al, dx
24249 634D           BA                   03C0    mov dx, # 0x3c0
24250 6350           B0                     10    mov al, #0x10
24251 6352           EE                           out dx, al
24252 6353           BA                   03C1    mov dx, # 0x3c1
24253 6356           EC                           in al, dx
24254 6357           80E3                   01    and bl, #0x01
24255 635A           75           18              jnz set_dac_page
24256 635C           24                     7F    and al, #0x7f
24257                                             ;shl bh, 7
24258 635E           D0E7                         shl bh, 1
24259 6360           D0E7                         shl bh, 1
24260 6362           D0E7                         shl bh, 1
24261 6364           D0E7                         shl bh, 1
24262 6366           D0E7                         shl bh, 1
24263 6368           D0E7                         shl bh, 1
24264 636A           D0E7                         shl bh, 1
24265 636C           08F8                         or al, bh
24266 636E           BA                   03C0    mov dx, # 0x3c0
24267 6371           EE                           out dx, al
24268 6372           EB           1A              jmp set_actl_normal
24269                       00006374            set_dac_page:
24270 6374           50                           push ax
24271 6375           BA                   03DA    mov dx, # 0x3da
24272 6378           EC                           in al, dx
24273 6379           BA                   03C0    mov dx, # 0x3c0
24274 637C           B0                     14    mov al, #0x14
24275 637E           EE                           out dx, al
24276 637F           58                           pop ax
24277 6380           24                     80    and al, #0x80
24278 6382           75           04              jnz set_dac_16_page
24279                                             ;shl bh, 2
24280 6384           D0E7                         shl bh, 1
24281 6386           D0E7                         shl bh, 1
24282                       00006388            set_dac_16_page:
24283 6388           80E7                   0F    and bh, #0x0f
24284 638B           88F8                         mov al, bh
24285 638D           EE                           out dx, al
24286                       0000638E            set_actl_normal:
24287 638E           B0                     20    mov al, #0x20
24288 6390           EE                           out dx, al
24289 6391           5A                           pop dx
24290 6392           5B                           pop bx
24291 6393           58                           pop ax
24292 6394           C3                           ret
24293                                           ! 3069 endasm
24294                                           !BCC_ENDASM
24295                                           ! 3070 #asm
24296                                           !BCC_ASM
24297                       00000008            _biosfn_write_teletype.flag	set	8
24298                       00000006            _biosfn_write_teletype.attr	set	6
24299                       00000004            _biosfn_write_teletype.page	set	4
24300                       00000002            _biosfn_write_teletype.car	set	2
24301                       00006395            biosfn_read_single_dac_reg:
24302 6395           50                           push ax
24303 6396           52                           push dx
24304 6397           BA                   03C7    mov dx, # 0x3c7
24305 639A           88D8                         mov al, bl
24306 639C           EE                           out dx, al
24307 639D           58                           pop ax
24308 639E           88C4                         mov ah, al
24309 63A0           BA                   03C9    mov dx, # 0x3c9
24310 63A3           EC                           in al, dx
24311 63A4           86E0                         xchg al, ah
24312 63A6           50                           push ax
24313 63A7           EC                           in al, dx
24314 63A8           88C5                         mov ch, al
24315 63AA           EC                           in al, dx
24316 63AB           88C1                         mov cl, al
24317 63AD           5A                           pop dx
24318 63AE           58                           pop ax
24319 63AF           C3                           ret
24320                                           ! 3090 endasm
24321                                           !BCC_ENDASM
24322                                           ! 3091 #asm
24323                                           !BCC_ASM
24324                       00000008            _biosfn_write_teletype.flag	set	8
24325                       00000006            _biosfn_write_teletype.attr	set	6
24326                       00000004            _biosfn_write_teletype.page	set	4
24327                       00000002            _biosfn_write_teletype.car	set	2
24328                       000063B0            biosfn_read_all_dac_reg:
24329 63B0           50                           push ax
24330 63B1           53                           push bx
24331 63B2           51                           push cx
24332 63B3           52                           push dx
24333 63B4           BA                   03C7    mov dx, # 0x3c7
24334 63B7           88D8                         mov al, bl
24335 63B9           EE                           out dx, al
24336 63BA           5A                           pop dx
24337 63BB           52                           push dx
24338 63BC           89D3                         mov bx, dx
24339 63BE           BA                   03C9    mov dx, # 0x3c9
24340                       000063C1            read_dac_loop:
24341 63C1           EC                           in al, dx
24342 63C2           26                           seg es
24343 63C3           8807                         mov [bx], al
24344 63C5           43                           inc bx
24345 63C6           EC                           in al, dx
24346 63C7           26                           seg es
24347 63C8           8807                         mov [bx], al
24348 63CA           43                           inc bx
24349 63CB           EC                           in al, dx
24350 63CC           26                           seg es
24351 63CD           8807                         mov [bx], al
24352 63CF           43                           inc bx
24353 63D0           49                           dec cx
24354 63D1           75           EE              jnz read_dac_loop
24355 63D3           5A                           pop dx
24356 63D4           59                           pop cx
24357 63D5           5B                           pop bx
24358 63D6           58                           pop ax
24359 63D7           C3                           ret
24360                                           ! 3124 endasm
24361                                           !BCC_ENDASM
24362                                           ! 3125 #asm
24363                                           !BCC_ASM
24364                       00000008            _biosfn_write_teletype.flag	set	8
24365                       00000006            _biosfn_write_teletype.attr	set	6
24366                       00000004            _biosfn_write_teletype.page	set	4
24367                       00000002            _biosfn_write_teletype.car	set	2
24368                       000063D8            biosfn_set_pel_mask:
24369 63D8           50                           push ax
24370 63D9           52                           push dx
24371 63DA           BA                   03C6    mov dx, # 0x3c6
24372 63DD           88D8                         mov al, bl
24373 63DF           EE                           out dx, al
24374 63E0           5A                           pop dx
24375 63E1           58                           pop ax
24376 63E2           C3                           ret
24377                                           ! 3135 endasm
24378                                           !BCC_ENDASM
24379                                           ! 3136 #asm
24380                                           !BCC_ASM
24381                       00000008            _biosfn_write_teletype.flag	set	8
24382                       00000006            _biosfn_write_teletype.attr	set	6
24383                       00000004            _biosfn_write_teletype.page	set	4
24384                       00000002            _biosfn_write_teletype.car	set	2
24385                       000063E3            biosfn_read_pel_mask:
24386 63E3           50                           push ax
24387 63E4           52                           push dx
24388 63E5           BA                   03C6    mov dx, # 0x3c6
24389 63E8           EC                           in al, dx
24390 63E9           88C3                         mov bl, al
24391 63EB           5A                           pop dx
24392 63EC           58                           pop ax
24393 63ED           C3                           ret
24394                                           ! 3146 endasm
24395                                           !BCC_ENDASM
24396                                           ! 3147 #asm
24397                                           !BCC_ASM
24398                       00000008            _biosfn_write_teletype.flag	set	8
24399                       00000006            _biosfn_write_teletype.attr	set	6
24400                       00000004            _biosfn_write_teletype.page	set	4
24401                       00000002            _biosfn_write_teletype.car	set	2
24402                       000063EE            biosfn_read_video_dac_state:
24403 63EE           50                           push ax
24404 63EF           52                           push dx
24405 63F0           BA                   03DA    mov dx, # 0x3da
24406 63F3           EC                           in al, dx
24407 63F4           BA                   03C0    mov dx, # 0x3c0
24408 63F7           B0                     10    mov al, #0x10
24409 63F9           EE                           out dx, al
24410 63FA           BA                   03C1    mov dx, # 0x3c1
24411 63FD           EC                           in al, dx
24412 63FE           88C3                         mov bl, al
24413                                             ;shr bl, 7
24414 6400           D0EB                         shr bl, 1
24415 6402           D0EB                         shr bl, 1
24416 6404           D0EB                         shr bl, 1
24417 6406           D0EB                         shr bl, 1
24418 6408           D0EB                         shr bl, 1
24419 640A           D0EB                         shr bl, 1
24420 640C           D0EB                         shr bl, 1
24421 640E           BA                   03DA    mov dx, # 0x3da
24422 6411           EC                           in al, dx
24423 6412           BA                   03C0    mov dx, # 0x3c0
24424 6415           B0                     14    mov al, #0x14
24425 6417           EE                           out dx, al
24426 6418           BA                   03C1    mov dx, # 0x3c1
24427 641B           EC                           in al, dx
24428 641C           88C7                         mov bh, al
24429 641E           80E7                   0F    and bh, #0x0f
24430 6421           F6C3                   01    test bl, #0x01
24431 6424           75           04              jnz get_dac_16_page
24432                                             ;shr bh, 2
24433 6426           D0EF                         shr bh, 1
24434 6428           D0EF                         shr bh, 1
24435                       0000642A            get_dac_16_page:
24436 642A           BA                   03DA    mov dx, # 0x3da
24437 642D           EC                           in al, dx
24438 642E           BA                   03C0    mov dx, # 0x3c0
24439 6431           B0                     20    mov al, #0x20
24440 6433           EE                           out dx, al
24441 6434           5A                           pop dx
24442 6435           58                           pop ax
24443 6436           C3                           ret
24444                                           ! 3190 endasm
24445                                           !BCC_ENDASM
24446                                           ! 3191 static void biosfn_perform_gray_scale_summing (start,count)
24447                                           ! Register BX used in function biosfn_write_teletype
24448                                           ! 3192 Bit16u start;Bit16u count;
24449                       00006437            _biosfn_perform_gray_scale_summing:
24450                                           !BCC_EOS
24451                                           !BCC_EOS
24452                                           ! 3193 {Bit8u r,g,b;
24453                                           !BCC_EOS
24454                                           ! 3194  Bit16u i;
24455                                           !BCC_EOS
24456                                           ! 3195  Bit16u index;
24457                                           !BCC_EOS
24458                                           ! 3196  inb(0x3da);
24459 6437           55                         push	bp
24460 6438           89E5                       mov	bp,sp
24461 643A           83C4                   F8  add	sp,*-8
24462                                           ! Debug: list int = const $3DA (used reg = )
24463 643D           B8                   03DA  mov	ax,#$3DA
24464 6440           50                         push	ax
24465                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24466 6441           E8         175B            call	_inb
24467 6444           44                         inc	sp
24468 6445           44                         inc	sp
24469                                           !BCC_EOS
24470                                           ! 3197  outb(0x3c0,0x00);
24471                                           ! Debug: list int = const 0 (used reg = )
24472 6446           31C0                       xor	ax,ax
24473 6448           50                         push	ax
24474                                           ! Debug: list int = const $3C0 (used reg = )
24475 6449           B8                   03C0  mov	ax,#$3C0
24476 644C           50                         push	ax
24477                                           ! Debug: func () void = outb+0 (used reg = )
24478 644D           E8         1765            call	_outb
24479 6450           83C4                   04  add	sp,*4
24480                                           !BCC_EOS
24481                                           ! 3198  for( index = 0; index < count; index++ )
24482                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24483 6453           31C0                       xor	ax,ax
24484 6455           8946         F8            mov	-8[bp],ax
24485                                           !BCC_EOS
24486                                           !BCC_EOS
24487                                           ! 3199   {
24488 6458           E9         00BE            br 	.1F7
24489                       0000645B            .1F8:
24490                                           ! 3200    outb(0x3c7,start);
24491                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24492 645B           FF76         04            push	4[bp]
24493                                           ! Debug: list int = const $3C7 (used reg = )
24494 645E           B8                   03C7  mov	ax,#$3C7
24495 6461           50                         push	ax
24496                                           ! Debug: func () void = outb+0 (used reg = )
24497 6462           E8         1750            call	_outb
24498 6465           83C4                   04  add	sp,*4
24499                                           !BCC_EOS
24500                                           ! 3201    r=inb( 0x3c9 );
24501                                           ! Debug: list int = const $3C9 (used reg = )
24502 6468           B8                   03C9  mov	ax,#$3C9
24503 646B           50                         push	ax
24504                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24505 646C           E8         1730            call	_inb
24506 646F           44                         inc	sp
24507 6470           44                         inc	sp
24508                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24509 6471           8846         FF            mov	-1[bp],al
24510                                           !BCC_EOS
24511                                           ! 3202    g=inb( 0x3c9 );
24512                                           ! Debug: list int = const $3C9 (used reg = )
24513 6474           B8                   03C9  mov	ax,#$3C9
24514 6477           50                         push	ax
24515                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24516 6478           E8         1724            call	_inb
24517 647B           44                         inc	sp
24518 647C           44                         inc	sp
24519                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24520 647D           8846         FE            mov	-2[bp],al
24521                                           !BCC_EOS
24522                                           ! 3203    b=inb( 0x3c9 );
24523                                           ! Debug: list int = const $3C9 (used reg = )
24524 6480           B8                   03C9  mov	ax,#$3C9
24525 6483           50                         push	ax
24526                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24527 6484           E8         1718            call	_inb
24528 6487           44                         inc	sp
24529 6488           44                         inc	sp
24530                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24531 6489           8846         FD            mov	-3[bp],al
24532                                           !BCC_EOS
24533                                           ! 3204    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24534                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24535                                           ! Debug: expression subtree swapping
24536 648C           8A46         FD            mov	al,-3[bp]
24537 648F           30E4                       xor	ah,ah
24538 6491           B9                   001C  mov	cx,*$1C
24539 6494           F7E9                       imul	cx
24540 6496           50                         push	ax
24541                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
24542                                           ! Debug: expression subtree swapping
24543 6497           8A46         FE            mov	al,-2[bp]
24544 649A           30E4                       xor	ah,ah
24545 649C           B9                   0097  mov	cx,#$97
24546 649F           F7E9                       imul	cx
24547 64A1           50                         push	ax
24548                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
24549                                           ! Debug: expression subtree swapping
24550 64A2           8A46         FF            mov	al,-1[bp]
24551 64A5           30E4                       xor	ah,ah
24552 64A7           B9                   004D  mov	cx,*$4D
24553 64AA           F7E9                       imul	cx
24554                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
24555 64AC           0346         F4            add	ax,-$C[bp]
24556 64AF           44                         inc	sp
24557 64B0           44                         inc	sp
24558                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24559 64B1           0346         F6            add	ax,-$A[bp]
24560 64B4           44                         inc	sp
24561 64B5           44                         inc	sp
24562                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
24563                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
24564 64B6           05                   0080  add	ax,#$80
24565 64B9           88E0                       mov	al,ah
24566 64BB           30E4                       xor	ah,ah
24567                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
24568 64BD           8946         FA            mov	-6[bp],ax
24569                                           !BCC_EOS
24570                                           ! 3205    if(i>0x3f)i=0x3f;
24571                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24572 64C0           8B46         FA            mov	ax,-6[bp]
24573 64C3           3D                   003F  cmp	ax,*$3F
24574 64C6           76           06            jbe 	.1F9
24575                       000064C8            .1FA:
24576                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24577 64C8           B8                   003F  mov	ax,*$3F
24578 64CB           8946         FA            mov	-6[bp],ax
24579                                           !BCC_EOS
24580                                           ! 3206    outb(0x3c8,sta
24581                       000064CE            .1F9:
24582                                           ! 3206 rt);
24583                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24584 64CE           FF76         04            push	4[bp]
24585                                           ! Debug: list int = const $3C8 (used reg = )
24586 64D1           B8                   03C8  mov	ax,#$3C8
24587 64D4           50                         push	ax
24588                                           ! Debug: func () void = outb+0 (used reg = )
24589 64D5           E8         16DD            call	_outb
24590 64D8           83C4                   04  add	sp,*4
24591                                           !BCC_EOS
24592                                           ! 3207    outb( 0x3c9, i&0xff );
24593                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24594 64DB           8A46         FA            mov	al,-6[bp]
24595                                           ! Debug: list unsigned char = al+0 (used reg = )
24596 64DE           30E4                       xor	ah,ah
24597 64E0           50                         push	ax
24598                                           ! Debug: list int = const $3C9 (used reg = )
24599 64E1           B8                   03C9  mov	ax,#$3C9
24600 64E4           50                         push	ax
24601                                           ! Debug: func () void = outb+0 (used reg = )
24602 64E5           E8         16CD            call	_outb
24603 64E8           83C4                   04  add	sp,*4
24604                                           !BCC_EOS
24605                                           ! 3208    outb( 0x3c9, i&0xff );
24606                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24607 64EB           8A46         FA            mov	al,-6[bp]
24608                                           ! Debug: list unsigned char = al+0 (used reg = )
24609 64EE           30E4                       xor	ah,ah
24610 64F0           50                         push	ax
24611                                           ! Debug: list int = const $3C9 (used reg = )
24612 64F1           B8                   03C9  mov	ax,#$3C9
24613 64F4           50                         push	ax
24614                                           ! Debug: func () void = outb+0 (used reg = )
24615 64F5           E8         16BD            call	_outb
24616 64F8           83C4                   04  add	sp,*4
24617                                           !BCC_EOS
24618                                           ! 3209    outb( 0x3c9, i&0xff );
24619                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24620 64FB           8A46         FA            mov	al,-6[bp]
24621                                           ! Debug: list unsigned char = al+0 (used reg = )
24622 64FE           30E4                       xor	ah,ah
24623 6500           50                         push	ax
24624                                           ! Debug: list int = const $3C9 (used reg = )
24625 6501           B8                   03C9  mov	ax,#$3C9
24626 6504           50                         push	ax
24627                                           ! Debug: func () void = outb+0 (used reg = )
24628 6505           E8         16AD            call	_outb
24629 6508           83C4                   04  add	sp,*4
24630                                           !BCC_EOS
24631                                           ! 3210    start++;
24632                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
24633 650B           8B46         04            mov	ax,4[bp]
24634 650E           40                         inc	ax
24635 650F           8946         04            mov	4[bp],ax
24636                                           !BCC_EOS
24637                                           ! 3211   }
24638                                           ! 3212  inb(0x3da);
24639                       00006512            .1F6:
24640                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
24641 6512           8B46         F8            mov	ax,-8[bp]
24642 6515           40                         inc	ax
24643 6516           8946         F8            mov	-8[bp],ax
24644                       00006519            .1F7:
24645                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
24646 6519           8B46         F8            mov	ax,-8[bp]
24647 651C           3B46         06            cmp	ax,6[bp]
24648 651F   7303    E9         FF37            blo 	.1F8
24649                       00006524            .1FB:
24650                       00006524            .1F5:
24651                                           ! Debug: list int = const $3DA (used reg = )
24652 6524           B8                   03DA  mov	ax,#$3DA
24653 6527           50                         push	ax
24654                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24655 6528           E8         1674            call	_inb
24656 652B           44                         inc	sp
24657 652C           44                         inc	sp
24658                                           !BCC_EOS
24659                                           ! 3213  outb(0x3c0,0x20);
24660                                           ! Debug: list int = const $20 (used reg = )
24661 652D           B8                   0020  mov	ax,*$20
24662 6530           50                         push	ax
24663                                           ! Debug: list int = const $3C0 (used reg = )
24664 6531           B8                   03C0  mov	ax,#$3C0
24665 6534           50                         push	ax
24666                                           ! Debug: func () void = outb+0 (used reg = )
24667 6535           E8         167D            call	_outb
24668 6538           83C4                   04  add	sp,*4
24669                                           !BCC_EOS
24670                                           ! 3214 }
24671 653B           89EC                       mov	sp,bp
24672 653D           5D                         pop	bp
24673 653E           C3                         ret
24674                                           ! 3215 static void get_font_access()
24675                                           ! 3216 {
24676                       0000653F            _get_font_access:
24677                                           ! 3217 #asm
24678                                           !BCC_ASM
24679 653F           BA                   03C4   mov dx, # 0x3c4
24680 6542           B8                   0100   mov ax, #0x0100
24681 6545           EF                          out dx, ax
24682 6546           B8                   0402   mov ax, #0x0402
24683 6549           EF                          out dx, ax
24684 654A           B8                   0704   mov ax, #0x0704
24685 654D           EF                          out dx, ax
24686 654E           B8                   0300   mov ax, #0x0300
24687 6551           EF                          out dx, ax
24688 6552           BA                   03CE   mov dx, # 0x3ce
24689 6555           B8                   0204   mov ax, #0x0204
24690 6558           EF                          out dx, ax
24691 6559           B8                   0005   mov ax, #0x0005
24692 655C           EF                          out dx, ax
24693 655D           B8                   0406   mov ax, #0x0406
24694 6560           EF                          out dx, ax
24695                                           ! 3234 endasm
24696                                           !BCC_ENDASM
24697                                           ! 3235 }
24698 6561           C3                         ret
24699                                           ! 3236 static void release_font_access()
24700                                           ! 3237 {
24701                       00006562            _release_font_access:
24702                                           ! 3238 #asm
24703                                           !BCC_ASM
24704 6562           BA                   03C4   mov dx, # 0x3c4
24705 6565           B8                   0100   mov ax, #0x0100
24706 6568           EF                          out dx, ax
24707 6569           B8                   0302   mov ax, #0x0302
24708 656C           EF                          out dx, ax
24709 656D           B8                   0304   mov ax, #0x0304
24710 6570           EF                          out dx, ax
24711 6571           B8                   0300   mov ax, #0x0300
24712 6574           EF                          out dx, ax
24713 6575           BA                   03CC   mov dx, # 0x3cc
24714 6578           EC                          in al, dx
24715 6579           24                     01   and al, #0x01
24716                                            ;shl al, 2
24717 657B           D0E0                        shl al, 1
24718 657D           D0E0                        shl al, 1
24719 657F           0C                     0A   or al, #0x0a
24720 6581           88C4                        mov ah, al
24721 6583           B0                     06   mov al, #0x06
24722 6585           BA                   03CE   mov dx, # 0x3ce
24723 6588           EF                          out dx, ax
24724 6589           B8                   0004   mov ax, #0x0004
24725 658C           EF                          out dx, ax
24726 658D           B8                   1005   mov ax, #0x1005
24727 6590           EF                          out dx, ax
24728                                           ! 3263 endasm
24729                                           !BCC_ENDASM
24730                                           ! 3264 }
24731 6591           C3                         ret
24732                                           ! 3265 #asm
24733                                           !BCC_ASM
24734                       00006592            idiv_u:
24735 6592           31D2                         xor dx,dx
24736 6594           F7F3                         div bx
24737 6596           C3                           ret
24738                                           ! 3270 endasm
24739                                           !BCC_ENDASM
24740                                           ! 3271 static void set_scan_lines(lines) Bit8u lines;
24741                       00006597            _set_scan_lines:
24742                                           !BCC_EOS
24743                                           ! 3272 {
24744                                           ! 3273  Bit16u crtc_addr,cols,page,vde;
24745                                           !BCC_EOS
24746                                           ! 3274  Bit8u crtc_r9,ovl,rows;
24747                                           !BCC_EOS
24748                                           ! 3275  crtc_addr = read_word(0x40,0x63);
24749 6597           55                         push	bp
24750 6598           89E5                       mov	bp,sp
24751 659A           83C4                   F4  add	sp,*-$C
24752                                           ! Debug: list int = const $63 (used reg = )
24753 659D           B8                   0063  mov	ax,*$63
24754 65A0           50                         push	ax
24755                                           ! Debug: list int = const $40 (used reg = )
24756 65A1           B8                   0040  mov	ax,*$40
24757 65A4           50                         push	ax
24758                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24759 65A5           E8         15B4            call	_read_word
24760 65A8           83C4                   04  add	sp,*4
24761                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24762 65AB           8946         FE            mov	-2[bp],ax
24763                                           !BCC_EOS
24764                                           ! 3276  outb(crtc_addr, 0x09);
24765                                           ! Debug: list int = const 9 (used reg = )
24766 65AE           B8                   0009  mov	ax,*9
24767 65B1           50                         push	ax
24768                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24769 65B2           FF76         FE            push	-2[bp]
24770                                           ! Debug: func () void = outb+0 (used reg = )
24771 65B5           E8         15FD            call	_outb
24772 65B8           83C4                   04  add	sp,*4
24773                                           !BCC_EOS
24774                                           ! 3277  crtc_r9 = inb(crtc_addr+1);
24775                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24776 65BB           8B46         FE            mov	ax,-2[bp]
24777                                           ! Debug: list unsigned int = ax+1 (used reg = )
24778 65BE           40                         inc	ax
24779 65BF           50                         push	ax
24780                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24781 65C0           E8         15DC            call	_inb
24782 65C3           44                         inc	sp
24783 65C4           44                         inc	sp
24784                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24785 65C5           8846         F7            mov	-9[bp],al
24786                                           !BCC_EOS
24787                                           ! 3278  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
24788                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
24789 65C8           8A46         04            mov	al,4[bp]
24790 65CB           30E4                       xor	ah,ah
24791 65CD           48                         dec	ax
24792 65CE           50                         push	ax
24793                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
24794 65CF           8A46         F7            mov	al,-9[bp]
24795 65D2           24                     E0  and	al,#$E0
24796                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
24797 65D4           30E4                       xor	ah,ah
24798 65D6           0B46         F2            or	ax,-$E[bp]
24799 65D9           44                         inc	sp
24800 65DA           44                         inc	sp
24801                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24802 65DB           8846         F7            mov	-9[bp],al
24803                                           !BCC_EOS
24804                                           ! 3279  outb(crtc_addr+1, crtc_r9);
24805                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24806 65DE           8A46         F7            mov	al,-9[bp]
24807 65E1           30E4                       xor	ah,ah
24808 65E3           50                         push	ax
24809                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
24810 65E4           8B46         FE            mov	ax,-2[bp]
24811                                           ! Debug: list unsigned int = ax+1 (used reg = )
24812 65E7           40                         inc	ax
24813 65E8           50                         push	ax
24814                                           ! Debug: func () void = outb+0 (used reg = )
24815 65E9           E8         15C9            call	_outb
24816 65EC           83C4                   04  add	sp,*4
24817                                           !BCC_EOS
24818                                           ! 3280  if(lines==8)
24819                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
24820 65EF           8A46         04            mov	al,4[bp]
24821 65F2           3C                     08  cmp	al,*8
24822 65F4           75           10            jne 	.1FC
24823                       000065F6            .1FD:
24824                                           ! 3281   {
24825                                           ! 3282    biosfn_set_cursor_shape(0x06,0x07);
24826                                           ! Debug: list int = const 7 (used reg = )
24827 65F6           B8                   0007  mov	ax,*7
24828 65F9           50                         push	ax
24829                                           ! Debug: list int = const 6 (used reg = )
24830 65FA           B8                   0006  mov	ax,*6
24831 65FD           50                         push	ax
24832                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24833 65FE           E8         DB3F            call	_biosfn_set_cursor_shape
24834 6601           83C4                   04  add	sp,*4
24835                                           !BCC_EOS
24836                                           ! 3283   }
24837                                           ! 3284  else
24838                                           ! 3285   {
24839 6604           EB           18            jmp .1FE
24840                       00006606            .1FC:
24841                                           ! 3286    biosfn_set_cursor_shape(lines-4,lines-3);
24842                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
24843 6606           8A46         04            mov	al,4[bp]
24844 6609           30E4                       xor	ah,ah
24845                                           ! Debug: list unsigned int = ax-3 (used reg = )
24846 660B           05                   FFFD  add	ax,*-3
24847 660E           50                         push	ax
24848                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
24849 660F           8A46         04            mov	al,4[bp]
24850 6612           30E4                       xor	ah,ah
24851                                           ! Debug: list unsigned int = ax-4 (used reg = )
24852 6614           05                   FFFC  add	ax,*-4
24853 6617           50                         push	ax
24854                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24855 6618           E8         DB25            call	_biosfn_set_cursor_shape
24856 661B           83C4                   04  add	sp,*4
24857                                           !BCC_EOS
24858                                           ! 3287   }
24859                                           ! 3288  write_word(0x40,0x85, lines);
24860                       0000661E            .1FE:
24861                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
24862 661E           8A46         04            mov	al,4[bp]
24863 6621           30E4                       xor	ah,ah
24864 6623           50                         push	ax
24865                                           ! Debug: list int = const $85 (used reg = )
24866 6624           B8                   0085  mov	ax,#$85
24867 6627           50                         push	ax
24868                                           ! Debug: list int = const $40 (used reg = )
24869 6628           B8                   0040  mov	ax,*$40
24870 662B           50                         push	ax
24871                                           ! Debug: func () void = write_word+0 (used reg = )
24872 662C           E8         1558            call	_write_word
24873 662F           83C4                   06  add	sp,*6
24874                                           !BCC_EOS
24875                                           ! 3289  outb(crtc_addr, 0x12);
24876                                           ! Debug: list int = const $12 (used reg = )
24877 6632           B8                   0012  mov	ax,*$12
24878 6635           50                         push	ax
24879                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24880 6636           FF76         FE            push	-2[bp]
24881                                           ! Debug: func () void = outb+0 (used reg = )
24882 6639           E8         1579            call	_outb
24883 663C           83C4                   04  add	sp,*4
24884                                           !BCC_EOS
24885                                           ! 3290  vde = inb(crtc_addr+1);
24886                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24887 663F           8B46         FE            mov	ax,-2[bp]
24888                                           ! Debug: list unsigned int = ax+1 (used reg = )
24889 6642           40                         inc	ax
24890 6643           50                         push	ax
24891                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24892 6644           E8         1558            call	_inb
24893 6647           44                         inc	sp
24894 6648           44                         inc	sp
24895                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
24896 6649           30E4                       xor	ah,ah
24897 664B           8946         F8            mov	-8[bp],ax
24898                                           !BCC_EOS
24899                                           ! 3291  outb(crtc_addr, 0x07);
24900                                           ! Debug: list int = const 7 (used reg = )
24901 664E           B8                   0007  mov	ax,*7
24902 6651           50                         push	ax
24903                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24904 6652           FF76         FE            push	-2[bp]
24905                                           ! Debug: func () void = outb+0 (used reg = )
24906 6655           E8         155D            call	_outb
24907 6658           83C4                   04  add	sp,*4
24908                                           !BCC_EOS
24909                                           ! 3292  ovl = inb(crtc_addr+1);
24910                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24911 665B           8B46         FE            mov	ax,-2[bp]
24912                                           ! Debug: list unsigned int = ax+1 (used reg = )
24913 665E           40                         inc	ax
24914 665F           50                         push	ax
24915                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24916 6660           E8         153C            call	_inb
24917 6663           44                         inc	sp
24918 6664           44                         inc	sp
24919                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
24920 6665           8846         F6            mov	-$A[bp],al
24921                                           !BCC_EOS
24922                                           ! 3293  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
24923                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
24924 6668           8A46         F6            mov	al,-$A[bp]
24925 666B           24                     40  and	al,*$40
24926                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
24927 666D           30E4                       xor	ah,ah
24928 666F           B1                     03  mov	cl,*3
24929 6671           D3E0                       shl	ax,cl
24930 6673           50                         push	ax
24931                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
24932 6674           8A46         F6            mov	al,-$A[bp]
24933 6677           24                     02  and	al,*2
24934                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
24935 6679           30E4                       xor	ah,ah
24936 667B           B1                     07  mov	cl,*7
24937 667D           D3E0                       shl	ax,cl
24938                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
24939 667F           0346         F2            add	ax,-$E[bp]
24940 6682           44                         inc	sp
24941 6683           44                         inc	sp
24942                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24943                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
24944 6684           40                         inc	ax
24945 6685           0346         F8            add	ax,-8[bp]
24946 6688           8946         F8            mov	-8[bp],ax
24947                                           !BCC_EOS
24948                                           ! 3294  rows = vde / lines;
24949                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
24950 668B           8A46         04            mov	al,4[bp]
24951 668E           30E4                       xor	ah,ah
24952 6690           89C3                       mov	bx,ax
24953 6692           8B46         F8            mov	ax,-8[bp]
24954 6695           E8         FEFA            call	idiv_u
24955                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
24956 6698           8846         F5            mov	-$B[bp],al
24957                                           !BCC_EOS
24958                                           ! 3295  write_byte(0x40,0x84, rows-1);
24959                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
24960 669B           8A46         F5            mov	al,-$B[bp]
24961 669E           30E4                       xor	ah,ah
24962                                           ! Debug: list unsigned int = ax-1 (used reg = )
24963 66A0           48                         dec	ax
24964 66A1           50                         push	ax
24965                                           ! Debug: list int = const $84 (used reg = )
24966 66A2           B8                   0084  mov	ax,#$84
24967 66A5           50                         push	ax
24968                                           ! Debug: list int = const $40 (used reg = )
24969 66A6           B8                   0040  mov	ax,*$40
24970 66A9           50                         push	ax
24971                                           ! Debug: func () void = write_byte+0 (used reg = )
24972 66AA           E8         14C2            call	_write_byte
24973 66AD           83C4                   06  add	sp,*6
24974                                           !BCC_EOS
24975                                           ! 3296  cols = read_word(0x40,0x4A);
24976                                           ! Debug: list int = const $4A (used reg = )
24977 66B0           B8                   004A  mov	ax,*$4A
24978 66B3           50                         push	ax
24979                                           ! Debug: list int = const $40 (used reg = )
24980 66B4           B8                   0040  mov	ax,*$40
24981 66B7           50                         push	ax
24982                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24983 66B8           E8         14A1            call	_read_word
24984 66BB           83C4                   04  add	sp,*4
24985                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
24986 66BE           8946         FC            mov	-4[bp],ax
24987                                           !BCC_EOS
24988                                           ! 3297  write_word(0x40,0x4C, rows * cols * 2);
24989                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
24990 66C1           8A46         F5            mov	al,-$B[bp]
24991 66C4           30E4                       xor	ah,ah
24992 66C6           8B4E         FC            mov	cx,-4[bp]
24993 66C9           F7E9                       imul	cx
24994                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24995 66CB           D1E0                       shl	ax,*1
24996                                           ! Debug: list unsigned int = ax+0 (used reg = )
24997 66CD           50                         push	ax
24998                                           ! Debug: list int = const $4C (used reg = )
24999 66CE           B8                   004C  mov	ax,*$4C
25000 66D1           50                         push	ax
25001                                           ! Debug: list int = const $40 (used reg = )
25002 66D2           B8                   0040  mov	ax,*$40
25003 66D5           50                         push	ax
25004                                           ! Debug: func () void = write_word+0 (used reg = )
25005 66D6           E8         14AE            call	_write_word
25006 66D9           83C4                   06  add	sp,*6
25007                                           !BCC_EOS
25008                                           ! 3298 }
25009 66DC           89EC                       mov	sp,bp
25010 66DE           5D                         pop	bp
25011 66DF           C3                         ret
25012                                           ! 3299 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25013                                           ! Register BX used in function set_scan_lines
25014                       000066E0            _biosfn_load_text_user_pat:
25015                                           !BCC_EOS
25016                                           !BCC_EOS
25017                                           !BCC_EOS
25018                                           !BCC_EOS
25019                                           !BCC_EOS
25020                                           !BCC_EOS
25021                                           !BCC_EOS
25022                                           ! 3300 {
25023                                           ! 3301  Bit16u blockaddr,dest,i,src;
25024                                           !BCC_EOS
25025                                           ! 3302  get_font_access();
25026 66E0           55                         push	bp
25027 66E1           89E5                       mov	bp,sp
25028 66E3           83C4                   F8  add	sp,*-8
25029                                           ! Debug: func () void = get_font_access+0 (used reg = )
25030 66E6           E8         FE56            call	_get_font_access
25031                                           !BCC_EOS
25032                                           ! 3303  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25033                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25034 66E9           8A46         0E            mov	al,$E[bp]
25035 66EC           24                     04  and	al,*4
25036                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25037 66EE           30E4                       xor	ah,ah
25038 66F0           88C4                       mov	ah,al
25039 66F2           30C0                       xor	al,al
25040 66F4           B1                     03  mov	cl,*3
25041 66F6           D3E0                       shl	ax,cl
25042 66F8           50                         push	ax
25043                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25044 66F9           8A46         0E            mov	al,$E[bp]
25045 66FC           24                     03  and	al,*3
25046                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25047 66FE           30E4                       xor	ah,ah
25048 6700           88C4                       mov	ah,al
25049 6702           30C0                       xor	al,al
25050 6704           B1                     06  mov	cl,*6
25051 6706           D3E0                       shl	ax,cl
25052                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25053 6708           0346         F6            add	ax,-$A[bp]
25054 670B           44                         inc	sp
25055 670C           44                         inc	sp
25056                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25057 670D           8946         FE            mov	-2[bp],ax
25058                                           !BCC_EOS
25059                                           ! 3304  for(i=0;i<CX;i++)
25060                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25061 6710           31C0                       xor	ax,ax
25062 6712           8946         FA            mov	-6[bp],ax
25063                                           !BCC_EOS
25064                                           !BCC_EOS
25065                                           ! 3305   {
25066 6715           EB           44            jmp .201
25067                       00006717            .202:
25068                                           ! 3306    src = BP + i * BH;
25069                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25070 6717           8A46         10            mov	al,$10[bp]
25071 671A           30E4                       xor	ah,ah
25072 671C           89C3                       mov	bx,ax
25073 671E           8B46         FA            mov	ax,-6[bp]
25074 6721           89D9                       mov	cx,bx
25075 6723           F7E9                       imul	cx
25076                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25077                                           ! Debug: expression subtree swapping
25078 6725           0346         08            add	ax,8[bp]
25079                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25080 6728           8946         F8            mov	-8[bp],ax
25081                                           !BCC_EOS
25082                                           ! 3307    dest = blockaddr + (DX + i) * 32;
25083                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25084 672B           8B46         0C            mov	ax,$C[bp]
25085 672E           0346         FA            add	ax,-6[bp]
25086                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25087 6731           B1                     05  mov	cl,*5
25088 6733           D3E0                       shl	ax,cl
25089                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25090                                           ! Debug: expression subtree swapping
25091 6735           0346         FE            add	ax,-2[bp]
25092                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25093 6738           8946         FC            mov	-4[bp],ax
25094                                           !BCC_EOS
25095                                           ! 3308    memcpyb(0xA000, dest, ES, src, BH);
25096                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25097 673B           8A46         10            mov	al,$10[bp]
25098 673E           30E4                       xor	ah,ah
25099 6740           50                         push	ax
25100                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25101 6741           FF76         F8            push	-8[bp]
25102                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25103 6744           FF76         06            push	6[bp]
25104                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25105 6747           FF76         FC            push	-4[bp]
25106                                           ! Debug: list unsigned int = const $A000 (used reg = )
25107 674A           B8                   A000  mov	ax,#$A000
25108 674D           50                         push	ax
25109                                           ! Debug: func () void = memcpyb+0 (used reg = )
25110 674E           E8         1398            call	_memcpyb
25111 6751           83C4                   0A  add	sp,*$A
25112                                           !BCC_EOS
25113                                           ! 3309   }
25114                                           ! 3310  release_font_access();
25115                       00006754            .200:
25116                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25117 6754           8B46         FA            mov	ax,-6[bp]
25118 6757           40                         inc	ax
25119 6758           8946         FA            mov	-6[bp],ax
25120                       0000675B            .201:
25121                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25122 675B           8B46         FA            mov	ax,-6[bp]
25123 675E           3B46         0A            cmp	ax,$A[bp]
25124 6761           72           B4            jb 	.202
25125                       00006763            .203:
25126                       00006763            .1FF:
25127                                           ! Debug: func () void = release_font_access+0 (used reg = )
25128 6763           E8         FDFC            call	_release_font_access
25129                                           !BCC_EOS
25130                                           ! 3311  if(AL>=0x10)
25131                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25132 6766           8A46         04            mov	al,4[bp]
25133 6769           3C                     10  cmp	al,*$10
25134 676B           72           0B            jb  	.204
25135                       0000676D            .205:
25136                                           ! 3312   {
25137                                           ! 3313    set_scan_lines(BH);
25138                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25139 676D           8A46         10            mov	al,$10[bp]
25140 6770           30E4                       xor	ah,ah
25141 6772           50                         push	ax
25142                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25143 6773           E8         FE21            call	_set_scan_lines
25144 6776           44                         inc	sp
25145 6777           44                         inc	sp
25146                                           !BCC_EOS
25147                                           ! 3314   }
25148                                           ! 3315 }
25149                       00006778            .204:
25150 6778           89EC                       mov	sp,bp
25151 677A           5D                         pop	bp
25152 677B           C3                         ret
25153                                           ! 3316 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u B
25154                                           ! Register BX used in function biosfn_load_text_user_pat
25155                       0000677C            _biosfn_load_text_8_14_pat:
25156                                           !BCC_EOS
25157                                           ! 3316 L;
25158                                           !BCC_EOS
25159                                           ! 3317 {
25160                                           ! 3318  Bit16u blockaddr,dest,i,src;
25161                                           !BCC_EOS
25162                                           ! 3319  get_font_access();
25163 677C           55                         push	bp
25164 677D           89E5                       mov	bp,sp
25165 677F           83C4                   F8  add	sp,*-8
25166                                           ! Debug: func () void = get_font_access+0 (used reg = )
25167 6782           E8         FDBA            call	_get_font_access
25168                                           !BCC_EOS
25169                                           ! 3320  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25170                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25171 6785           8A46         06            mov	al,6[bp]
25172 6788           24                     04  and	al,*4
25173                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25174 678A           30E4                       xor	ah,ah
25175 678C           88C4                       mov	ah,al
25176 678E           30C0                       xor	al,al
25177 6790           B1                     03  mov	cl,*3
25178 6792           D3E0                       shl	ax,cl
25179 6794           50                         push	ax
25180                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25181 6795           8A46         06            mov	al,6[bp]
25182 6798           24                     03  and	al,*3
25183                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25184 679A           30E4                       xor	ah,ah
25185 679C           88C4                       mov	ah,al
25186 679E           30C0                       xor	al,al
25187 67A0           B1                     06  mov	cl,*6
25188 67A2           D3E0                       shl	ax,cl
25189                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25190 67A4           0346         F6            add	ax,-$A[bp]
25191 67A7           44                         inc	sp
25192 67A8           44                         inc	sp
25193                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25194 67A9           8946         FE            mov	-2[bp],ax
25195                                           !BCC_EOS
25196                                           ! 3321  for(i=0;i<0x100;i++)
25197                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25198 67AC           31C0                       xor	ax,ax
25199 67AE           8946         FA            mov	-6[bp],ax
25200                                           !BCC_EOS
25201                                           !BCC_EOS
25202                                           ! 3322   {
25203 67B1           EB           41            jmp .208
25204                       000067B3            .209:
25205                                           ! 3323    src = i * 14;
25206                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25207 67B3           8B46         FA            mov	ax,-6[bp]
25208 67B6           89C2                       mov	dx,ax
25209 67B8           B1                     03  mov	cl,*3
25210 67BA           D3E0                       shl	ax,cl
25211 67BC           29D0                       sub	ax,dx
25212 67BE           D1E0                       shl	ax,*1
25213                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25214 67C0           8946         F8            mov	-8[bp],ax
25215                                           !BCC_EOS
25216                                           ! 3324    dest = blockaddr + i * 32;
25217                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25218 67C3           8B46         FA            mov	ax,-6[bp]
25219 67C6           B1                     05  mov	cl,*5
25220 67C8           D3E0                       shl	ax,cl
25221                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25222                                           ! Debug: expression subtree swapping
25223 67CA           0346         FE            add	ax,-2[bp]
25224                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25225 67CD           8946         FC            mov	-4[bp],ax
25226                                           !BCC_EOS
25227                                           ! 3325    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25228                                           ! Debug: list int = const $E (used reg = )
25229 67D0           B8                   000E  mov	ax,*$E
25230 67D3           50                         push	ax
25231                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25232 67D4           8B5E         F8            mov	bx,-8[bp]
25233                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25234                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25235 67D7           81C3                 1727  add	bx,#_vgafont14
25236 67DB           53                         push	bx
25237                                           ! Debug: list unsigned int = const $C000 (used reg = )
25238 67DC           B8                   C000  mov	ax,#$C000
25239 67DF           50                         push	ax
25240                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25241 67E0           FF76         FC            push	-4[bp]
25242                                           ! Debug: list unsigned int = const $A000 (used reg = )
25243 67E3           B8                   A000  mov	ax,#$A000
25244 67E6           50                         push	ax
25245                                           ! Debug: func () void = memcpyb+0 (used reg = )
25246 67E7           E8         12FF            call	_memcpyb
25247 67EA           83C4                   0A  add	sp,*$A
25248                                           !BCC_EOS
25249                                           ! 3326   }
25250                                           ! 3327  release_font_access();
25251                       000067ED            .207:
25252                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25253 67ED           8B46         FA            mov	ax,-6[bp]
25254 67F0           40                         inc	ax
25255 67F1           8946         FA            mov	-6[bp],ax
25256                       000067F4            .208:
25257                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25258 67F4           8B46         FA            mov	ax,-6[bp]
25259 67F7           3D                   0100  cmp	ax,#$100
25260 67FA           72           B7            jb 	.209
25261                       000067FC            .20A:
25262                       000067FC            .206:
25263                                           ! Debug: func () void = release_font_access+0 (used reg = )
25264 67FC           E8         FD63            call	_release_font_access
25265                                           !BCC_EOS
25266                                           ! 3328  if(AL>=0x10)
25267                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25268 67FF           8A46         04            mov	al,4[bp]
25269 6802           3C                     10  cmp	al,*$10
25270 6804           72           09            jb  	.20B
25271                       00006806            .20C:
25272                                           ! 3329   {
25273                                           ! 3330    set_scan_lines(14);
25274                                           ! Debug: list int = const $E (used reg = )
25275 6806           B8                   000E  mov	ax,*$E
25276 6809           50                         push	ax
25277                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25278 680A           E8         FD8A            call	_set_scan_lines
25279 680D           44                         inc	sp
25280 680E           44                         inc	sp
25281                                           !BCC_EOS
25282                                           ! 3331   }
25283                                           ! 3332 }
25284                       0000680F            .20B:
25285 680F           89EC                       mov	sp,bp
25286 6811           5D                         pop	bp
25287 6812           C3                         ret
25288                                           ! 3333 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25289                                           ! Register BX used in function biosfn_load_text_8_14_pat
25290                       00006813            _biosfn_load_text_8_8_pat:
25291                                           !BCC_EOS
25292                                           !BCC_EOS
25293                                           ! 3334 {
25294                                           ! 3335  Bit16u blockaddr,dest,i,src;
25295                                           !BCC_EOS
25296                                           ! 3336  get_font_access();
25297 6813           55                         push	bp
25298 6814           89E5                       mov	bp,sp
25299 6816           83C4                   F8  add	sp,*-8
25300                                           ! Debug: func () void = get_font_access+0 (used reg = )
25301 6819           E8         FD23            call	_get_font_access
25302                                           !BCC_EOS
25303                                           ! 3337  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25304                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25305 681C           8A46         06            mov	al,6[bp]
25306 681F           24                     04  and	al,*4
25307                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25308 6821           30E4                       xor	ah,ah
25309 6823           88C4                       mov	ah,al
25310 6825           30C0                       xor	al,al
25311 6827           B1                     03  mov	cl,*3
25312 6829           D3E0                       shl	ax,cl
25313 682B           50                         push	ax
25314                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25315 682C           8A46         06            mov	al,6[bp]
25316 682F           24                     03  and	al,*3
25317                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25318 6831           30E4                       xor	ah,ah
25319 6833           88C4                       mov	ah,al
25320 6835           30C0                       xor	al,al
25321 6837           B1                     06  mov	cl,*6
25322 6839           D3E0                       shl	ax,cl
25323                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25324 683B           0346         F6            add	ax,-$A[bp]
25325 683E           44                         inc	sp
25326 683F           44                         inc	sp
25327                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25328 6840           8946         FE            mov	-2[bp],ax
25329                                           !BCC_EOS
25330                                           ! 3338  for(i=0;i<0x100;i++)
25331                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25332 6843           31C0                       xor	ax,ax
25333 6845           8946         FA            mov	-6[bp],ax
25334                                           !BCC_EOS
25335                                           !BCC_EOS
25336                                           ! 3339   {
25337 6848           EB           3B            jmp .20F
25338                       0000684A            .210:
25339                                           ! 3340    src = i * 8;
25340                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25341 684A           8B46         FA            mov	ax,-6[bp]
25342 684D           B1                     03  mov	cl,*3
25343 684F           D3E0                       shl	ax,cl
25344                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25345 6851           8946         F8            mov	-8[bp],ax
25346                                           !BCC_EOS
25347                                           ! 3341    dest = blockaddr + i * 32;
25348                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25349 6854           8B46         FA            mov	ax,-6[bp]
25350 6857           B1                     05  mov	cl,*5
25351 6859           D3E0                       shl	ax,cl
25352                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25353                                           ! Debug: expression subtree swapping
25354 685B           0346         FE            add	ax,-2[bp]
25355                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25356 685E           8946         FC            mov	-4[bp],ax
25357                                           !BCC_EOS
25358                                           ! 3342    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25359                                           ! Debug: list int = const 8 (used reg = )
25360 6861           B8                   0008  mov	ax,*8
25361 6864           50                         push	ax
25362                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25363 6865           8B5E         F8            mov	bx,-8[bp]
25364                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25365                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25366 6868           81C3                 0F27  add	bx,#_vgafont8
25367 686C           53                         push	bx
25368                                           ! Debug: list unsigned int = const $C000 (used reg = )
25369 686D           B8                   C000  mov	ax,#$C000
25370 6870           50                         push	ax
25371                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25372 6871           FF76         FC            push	-4[bp]
25373                                           ! Debug: list unsigned int = const $A000 (used reg = )
25374 6874           B8                   A000  mov	ax,#$A000
25375 6877           50                         push	ax
25376                                           ! Debug: func () void = memcpyb+0 (used reg = )
25377 6878           E8         126E            call	_memcpyb
25378 687B           83C4                   0A  add	sp,*$A
25379                                           !BCC_EOS
25380                                           ! 3343   }
25381                                           ! 3344  release_font_access();
25382                       0000687E            .20E:
25383                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25384 687E           8B46         FA            mov	ax,-6[bp]
25385 6881           40                         inc	ax
25386 6882           8946         FA            mov	-6[bp],ax
25387                       00006885            .20F:
25388                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25389 6885           8B46         FA            mov	ax,-6[bp]
25390 6888           3D                   0100  cmp	ax,#$100
25391 688B           72           BD            jb 	.210
25392                       0000688D            .211:
25393                       0000688D            .20D:
25394                                           ! Debug: func () void = release_font_access+0 (used reg = )
25395 688D           E8         FCD2            call	_release_font_access
25396                                           !BCC_EOS
25397                                           ! 3345  if(AL>=0x10)
25398                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25399 6890           8A46         04            mov	al,4[bp]
25400 6893           3C                     10  cmp	al,*$10
25401 6895           72           09            jb  	.212
25402                       00006897            .213:
25403                                           ! 3346   {
25404                                           ! 3347    set_scan_lines(8);
25405                                           ! Debug: list int = const 8 (used reg = )
25406 6897           B8                   0008  mov	ax,*8
25407 689A           50                         push	ax
25408                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25409 689B           E8         FCF9            call	_set_scan_lines
25410 689E           44                         inc	sp
25411 689F           44                         inc	sp
25412                                           !BCC_EOS
25413                                           ! 3348   }
25414                                           ! 3349 }
25415                       000068A0            .212:
25416 68A0           89EC                       mov	sp,bp
25417 68A2           5D                         pop	bp
25418 68A3           C3                         ret
25419                                           ! 3350 #asm
25420                                           !BCC_ASM
25421                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25422                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25423                       000068A4            biosfn_set_text_block_specifier:
25424 68A4           50                           push ax
25425 68A5           52                           push dx
25426 68A6           BA                   03C4    mov dx, # 0x3c4
25427 68A9           88DC                         mov ah, bl
25428 68AB           B0                     03    mov al, #0x03
25429 68AD           EF                           out dx, ax
25430 68AE           5A                           pop dx
25431 68AF           58                           pop ax
25432 68B0           C3                           ret
25433                                           ! 3361 endasm
25434                                           !BCC_ENDASM
25435                                           ! 3362 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25436                                           ! Register BX used in function biosfn_load_text_8_8_pat
25437                       000068B1            _biosfn_load_text_8_16_pat:
25438                                           !BCC_EOS
25439                                           !BCC_EOS
25440                                           ! 3363 {
25441                                           ! 3364  Bit16u blockaddr,dest,i,src;
25442                                           !BCC_EOS
25443                                           ! 3365  get_font_access();
25444 68B1           55                         push	bp
25445 68B2           89E5                       mov	bp,sp
25446 68B4           83C4                   F8  add	sp,*-8
25447                                           ! Debug: func () void = get_font_access+0 (used reg = )
25448 68B7           E8         FC85            call	_get_font_access
25449                                           !BCC_EOS
25450                                           ! 3366  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25451                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25452 68BA           8A46         06            mov	al,6[bp]
25453 68BD           24                     04  and	al,*4
25454                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25455 68BF           30E4                       xor	ah,ah
25456 68C1           88C4                       mov	ah,al
25457 68C3           30C0                       xor	al,al
25458 68C5           B1                     03  mov	cl,*3
25459 68C7           D3E0                       shl	ax,cl
25460 68C9           50                         push	ax
25461                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25462 68CA           8A46         06            mov	al,6[bp]
25463 68CD           24                     03  and	al,*3
25464                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25465 68CF           30E4                       xor	ah,ah
25466 68D1           88C4                       mov	ah,al
25467 68D3           30C0                       xor	al,al
25468 68D5           B1                     06  mov	cl,*6
25469 68D7           D3E0                       shl	ax,cl
25470                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25471 68D9           0346         F6            add	ax,-$A[bp]
25472 68DC           44                         inc	sp
25473 68DD           44                         inc	sp
25474                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25475 68DE           8946         FE            mov	-2[bp],ax
25476                                           !BCC_EOS
25477                                           ! 3367  for(i=0;i<0x100;i++)
25478                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25479 68E1           31C0                       xor	ax,ax
25480 68E3           8946         FA            mov	-6[bp],ax
25481                                           !BCC_EOS
25482                                           !BCC_EOS
25483                                           ! 3368   {
25484 68E6           EB           3B            jmp .216
25485                       000068E8            .217:
25486                                           ! 3369    src = i * 16;
25487                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25488 68E8           8B46         FA            mov	ax,-6[bp]
25489 68EB           B1                     04  mov	cl,*4
25490 68ED           D3E0                       shl	ax,cl
25491                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25492 68EF           8946         F8            mov	-8[bp],ax
25493                                           !BCC_EOS
25494                                           ! 3370    dest = blockaddr + i * 32;
25495                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25496 68F2           8B46         FA            mov	ax,-6[bp]
25497 68F5           B1                     05  mov	cl,*5
25498 68F7           D3E0                       shl	ax,cl
25499                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25500                                           ! Debug: expression subtree swapping
25501 68F9           0346         FE            add	ax,-2[bp]
25502                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25503 68FC           8946         FC            mov	-4[bp],ax
25504                                           !BCC_EOS
25505                                           ! 3371    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25506                                           ! Debug: list int = const $10 (used reg = )
25507 68FF           B8                   0010  mov	ax,*$10
25508 6902           50                         push	ax
25509                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25510 6903           8B5E         F8            mov	bx,-8[bp]
25511                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25512                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25513 6906           81C3                 2527  add	bx,#_vgafont16
25514 690A           53                         push	bx
25515                                           ! Debug: list unsigned int = const $C000 (used reg = )
25516 690B           B8                   C000  mov	ax,#$C000
25517 690E           50                         push	ax
25518                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25519 690F           FF76         FC            push	-4[bp]
25520                                           ! Debug: list unsigned int = const $A000 (used reg = )
25521 6912           B8                   A000  mov	ax,#$A000
25522 6915           50                         push	ax
25523                                           ! Debug: func () void = memcpyb+0 (used reg = )
25524 6916           E8         11D0            call	_memcpyb
25525 6919           83C4                   0A  add	sp,*$A
25526                                           !BCC_EOS
25527                                           ! 3372   }
25528                                           ! 3373  release_font_access();
25529                       0000691C            .215:
25530                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25531 691C           8B46         FA            mov	ax,-6[bp]
25532 691F           40                         inc	ax
25533 6920           8946         FA            mov	-6[bp],ax
25534                       00006923            .216:
25535                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25536 6923           8B46         FA            mov	ax,-6[bp]
25537 6926           3D                   0100  cmp	ax,#$100
25538 6929           72           BD            jb 	.217
25539                       0000692B            .218:
25540                       0000692B            .214:
25541                                           ! Debug: func () void = release_font_access+0 (used reg = )
25542 692B           E8         FC34            call	_release_font_access
25543                                           !BCC_EOS
25544                                           ! 3374  if(AL>=0x10)
25545                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25546 692E           8A46         04            mov	al,4[bp]
25547 6931           3C                     10  cmp	al,*$10
25548 6933           72           09            jb  	.219
25549                       00006935            .21A:
25550                                           ! 3375   {
25551                                           ! 3376    set_scan_lines(16);
25552                                           ! Debug: list int = const $10 (used reg = )
25553 6935           B8                   0010  mov	ax,*$10
25554 6938           50                         push	ax
25555                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25556 6939           E8         FC5B            call	_set_scan_lines
25557 693C           44                         inc	sp
25558 693D           44                         inc	sp
25559                                           !BCC_EOS
25560                                           ! 3377   }
25561                                           ! 3378 }
25562                       0000693E            .219:
25563 693E           89EC                       mov	sp,bp
25564 6940           5D                         pop	bp
25565 6941           C3                         ret
25566                                           ! 3379 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
25567                                           ! Register BX used in function biosfn_load_text_8_16_pat
25568                       00006942            _biosfn_load_gfx_8_8_chars:
25569                                           !BCC_EOS
25570                                           !BCC_EOS
25571                                           ! 3380 {
25572                                           ! 3381 }
25573 6942           C3                         ret
25574                                           ! 3382 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
25575                       00006943            _biosfn_load_gfx_user_chars:
25576                                           !BCC_EOS
25577                                           !BCC_EOS
25578                                           !BCC_EOS
25579                                           !BCC_EOS
25580                                           !BCC_EOS
25581                                           ! 3383 {
25582                                           ! 3384 }
25583 6943           C3                         ret
25584                                           ! 3385 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
25585                       00006944            _biosfn_load_gfx_8_14_chars:
25586                                           !BCC_EOS
25587                                           ! 3386 {
25588                                           ! 3387 }
25589 6944           C3                         ret
25590                                           ! 3388 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
25591                       00006945            _biosfn_load_gfx_8_8_dd_chars:
25592                                           !BCC_EOS
25593                                           ! 3389 {
25594                                           ! 3390 }
25595 6945           C3                         ret
25596                                           ! 3391 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
25597                       00006946            _biosfn_load_gfx_8_16_chars:
25598                                           !BCC_EOS
25599                                           ! 3392 {
25600                                           ! 3393 }
25601 6946           C3                         ret
25602                                           ! 3394 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
25603                                           ! 3395 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
25604                       00006947            _biosfn_get_font_info:
25605                                           !BCC_EOS
25606                                           !BCC_EOS
25607                                           !BCC_EOS
25608                                           !BCC_EOS
25609                                           !BCC_EOS
25610                                           ! 3396 {Bit16u ss=get_SS();
25611 6947           55                         push	bp
25612 6948           89E5                       mov	bp,sp
25613 694A           4C                         dec	sp
25614 694B           4C                         dec	sp
25615                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
25616 694C           E8         1286            call	_get_SS
25617                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
25618 694F           8946         FE            mov	-2[bp],ax
25619                                           !BCC_EOS
25620                                           ! 3397  switch(BH)
25621 6952           8A46         04            mov	al,4[bp]
25622                                           ! 3398   {case 0x00:
25623 6955           E9         0143            br 	.21D
25624                                           ! 3399     write_word(ss,ES,read_word(0x00,0x1f*4));
25625                       00006958            .21E:
25626                                           ! Debug: list int = const $7C (used reg = )
25627 6958           B8                   007C  mov	ax,*$7C
25628 695B           50                         push	ax
25629                                           ! Debug: list int = const 0 (used reg = )
25630 695C           31C0                       xor	ax,ax
25631 695E           50                         push	ax
25632                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25633 695F           E8         11FA            call	_read_word
25634 6962           83C4                   04  add	sp,*4
25635                                           ! Debug: list unsigned short = ax+0 (used reg = )
25636 6965           50                         push	ax
25637                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25638 6966           FF76         06            push	6[bp]
25639                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25640 6969           FF76         FE            push	-2[bp]
25641                                           ! Debug: func () void = write_word+0 (used reg = )
25642 696C           E8         1218            call	_write_word
25643 696F           83C4                   06  add	sp,*6
25644                                           !BCC_EOS
25645                                           ! 3400     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
25646                                           ! Debug: list int = const $7E (used reg = )
25647 6972           B8                   007E  mov	ax,*$7E
25648 6975           50                         push	ax
25649                                           ! Debug: list int = const 0 (used reg = )
25650 6976           31C0                       xor	ax,ax
25651 6978           50                         push	ax
25652                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25653 6979           E8         11E0            call	_read_word
25654 697C           83C4                   04  add	sp,*4
25655                                           ! Debug: list unsigned short = ax+0 (used reg = )
25656 697F           50                         push	ax
25657                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25658 6980           FF76         08            push	8[bp]
25659                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25660 6983           FF76         FE            push	-2[bp]
25661                                           ! Debug: func () void = write_word+0 (used reg = )
25662 6986           E8         11FE            call	_write_word
25663 6989           83C4                   06  add	sp,*6
25664                                           !BCC_EOS
25665                                           ! 3401     break;
25666 698C           E9         0131            br 	.21B
25667                                           !BCC_EOS
25668                                           ! 3402    case 0x01:
25669                                           ! 3403     write_word(ss,ES,read_word(0x00,0x43*4));
25670                       0000698F            .21F:
25671                                           ! Debug: list int = const $10C (used reg = )
25672 698F           B8                   010C  mov	ax,#$10C
25673 6992           50                         push	ax
25674                                           ! Debug: list int = const 0 (used reg = )
25675 6993           31C0                       xor	ax,ax
25676 6995           50                         push	ax
25677                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25678 6996           E8         11C3            call	_read_word
25679 6999           83C4                   04  add	sp,*4
25680                                           ! Debug: list unsigned short = ax+0 (used reg = )
25681 699C           50                         push	ax
25682                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25683 699D           FF76         06            push	6[bp]
25684                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25685 69A0           FF76         FE            push	-2[bp]
25686                                           ! Debug: func () void = write_word+0 (used reg = )
25687 69A3           E8         11E1            call	_write_word
25688 69A6           83C4                   06  add	sp,*6
25689                                           !BCC_EOS
25690                                           ! 3404     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
25691                                           ! Debug: list int = const $10E (used reg = )
25692 69A9           B8                   010E  mov	ax,#$10E
25693 69AC           50                         push	ax
25694                                           ! Debug: list int = const 0 (used reg = )
25695 69AD           31C0                       xor	ax,ax
25696 69AF           50                         push	ax
25697                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25698 69B0           E8         11A9            call	_read_word
25699 69B3           83C4                   04  add	sp,*4
25700                                           ! Debug: list unsigned short = ax+0 (used reg = )
25701 69B6           50                         push	ax
25702                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25703 69B7           FF76         08            push	8[bp]
25704                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25705 69BA           FF76         FE            push	-2[bp]
25706                                           ! Debug: func () void = write_word+0 (used reg = )
25707 69BD           E8         11C7            call	_write_word
25708 69C0           83C4                   06  add	sp,*6
25709                                           !BCC_EOS
25710                                           ! 3405     break;
25711 69C3           E9         00FA            br 	.21B
25712                                           !BCC_EOS
25713                                           ! 3406    case 0x02:
25714                                           ! 3407     write_word(ss,ES,0xC000);
25715                       000069C6            .220:
25716                                           ! Debug: list unsigned int = const $C000 (used reg = )
25717 69C6           B8                   C000  mov	ax,#$C000
25718 69C9           50                         push	ax
25719                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25720 69CA           FF76         06            push	6[bp]
25721                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25722 69CD           FF76         FE            push	-2[bp]
25723                                           ! Debug: func () void = write_word+0 (used reg = )
25724 69D0           E8         11B4            call	_write_word
25725 69D3           83C4                   06  add	sp,*6
25726                                           !BCC_EOS
25727                                           ! 3408     write_word(ss,BP,vgafont14);
25728                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
25729 69D6           BB                   1727  mov	bx,#_vgafont14
25730 69D9           53                         push	bx
25731                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25732 69DA           FF76         08            push	8[bp]
25733                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25734 69DD           FF76         FE            push	-2[bp]
25735                                           ! Debug: func () void = write_word+0 (used reg = )
25736 69E0           E8         11A4            call	_write_word
25737 69E3           83C4                   06  add	sp,*6
25738                                           !BCC_EOS
25739                                           ! 3409     break;
25740 69E6           E9         00D7            br 	.21B
25741                                           !BCC_EOS
25742                                           ! 3410    case 0x03:
25743                                           ! 3411     wr
25744                                           ! 3411 ite_word(ss,ES,0xC000);
25745                       000069E9            .221:
25746                                           ! Debug: list unsigned int = const $C000 (used reg = )
25747 69E9           B8                   C000  mov	ax,#$C000
25748 69EC           50                         push	ax
25749                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25750 69ED           FF76         06            push	6[bp]
25751                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25752 69F0           FF76         FE            push	-2[bp]
25753                                           ! Debug: func () void = write_word+0 (used reg = )
25754 69F3           E8         1191            call	_write_word
25755 69F6           83C4                   06  add	sp,*6
25756                                           !BCC_EOS
25757                                           ! 3412     write_word(ss,BP,vgafont8);
25758                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
25759 69F9           BB                   0F27  mov	bx,#_vgafont8
25760 69FC           53                         push	bx
25761                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25762 69FD           FF76         08            push	8[bp]
25763                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25764 6A00           FF76         FE            push	-2[bp]
25765                                           ! Debug: func () void = write_word+0 (used reg = )
25766 6A03           E8         1181            call	_write_word
25767 6A06           83C4                   06  add	sp,*6
25768                                           !BCC_EOS
25769                                           ! 3413     break;
25770 6A09           E9         00B4            br 	.21B
25771                                           !BCC_EOS
25772                                           ! 3414    case 0x04:
25773                                           ! 3415     write_word(ss,ES,0xC000);
25774                       00006A0C            .222:
25775                                           ! Debug: list unsigned int = const $C000 (used reg = )
25776 6A0C           B8                   C000  mov	ax,#$C000
25777 6A0F           50                         push	ax
25778                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25779 6A10           FF76         06            push	6[bp]
25780                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25781 6A13           FF76         FE            push	-2[bp]
25782                                           ! Debug: func () void = write_word+0 (used reg = )
25783 6A16           E8         116E            call	_write_word
25784 6A19           83C4                   06  add	sp,*6
25785                                           !BCC_EOS
25786                                           ! 3416     write_word(ss,BP,vgafont8+128*8);
25787                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
25788 6A1C           BB                   1327  mov	bx,#_vgafont8+$400
25789 6A1F           53                         push	bx
25790                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25791 6A20           FF76         08            push	8[bp]
25792                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25793 6A23           FF76         FE            push	-2[bp]
25794                                           ! Debug: func () void = write_word+0 (used reg = )
25795 6A26           E8         115E            call	_write_word
25796 6A29           83C4                   06  add	sp,*6
25797                                           !BCC_EOS
25798                                           ! 3417     break;
25799 6A2C           E9         0091            br 	.21B
25800                                           !BCC_EOS
25801                                           ! 3418    case 0x05:
25802                                           ! 3419     write_word(ss,ES,0xC000);
25803                       00006A2F            .223:
25804                                           ! Debug: list unsigned int = const $C000 (used reg = )
25805 6A2F           B8                   C000  mov	ax,#$C000
25806 6A32           50                         push	ax
25807                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25808 6A33           FF76         06            push	6[bp]
25809                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25810 6A36           FF76         FE            push	-2[bp]
25811                                           ! Debug: func () void = write_word+0 (used reg = )
25812 6A39           E8         114B            call	_write_word
25813 6A3C           83C4                   06  add	sp,*6
25814                                           !BCC_EOS
25815                                           ! 3420     write_word(ss,BP,vgafont14alt);
25816                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
25817 6A3F           BB                   3527  mov	bx,#_vgafont14alt
25818 6A42           53                         push	bx
25819                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25820 6A43           FF76         08            push	8[bp]
25821                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25822 6A46           FF76         FE            push	-2[bp]
25823                                           ! Debug: func () void = write_word+0 (used reg = )
25824 6A49           E8         113B            call	_write_word
25825 6A4C           83C4                   06  add	sp,*6
25826                                           !BCC_EOS
25827                                           ! 3421     break;
25828 6A4F           EB           6F            jmp .21B
25829                                           !BCC_EOS
25830                                           ! 3422    case 0x06:
25831                                           ! 3423     write_word(ss,ES,0xC000);
25832                       00006A51            .224:
25833                                           ! Debug: list unsigned int = const $C000 (used reg = )
25834 6A51           B8                   C000  mov	ax,#$C000
25835 6A54           50                         push	ax
25836                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25837 6A55           FF76         06            push	6[bp]
25838                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25839 6A58           FF76         FE            push	-2[bp]
25840                                           ! Debug: func () void = write_word+0 (used reg = )
25841 6A5B           E8         1129            call	_write_word
25842 6A5E           83C4                   06  add	sp,*6
25843                                           !BCC_EOS
25844                                           ! 3424     write_word(ss,BP,vgafont16);
25845                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
25846 6A61           BB                   2527  mov	bx,#_vgafont16
25847 6A64           53                         push	bx
25848                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25849 6A65           FF76         08            push	8[bp]
25850                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25851 6A68           FF76         FE            push	-2[bp]
25852                                           ! Debug: func () void = write_word+0 (used reg = )
25853 6A6B           E8         1119            call	_write_word
25854 6A6E           83C4                   06  add	sp,*6
25855                                           !BCC_EOS
25856                                           ! 3425     break;
25857 6A71           EB           4D            jmp .21B
25858                                           !BCC_EOS
25859                                           ! 3426    case 0x07:
25860                                           ! 3427     write_word(ss,ES,0xC000);
25861                       00006A73            .225:
25862                                           ! Debug: list unsigned int = const $C000 (used reg = )
25863 6A73           B8                   C000  mov	ax,#$C000
25864 6A76           50                         push	ax
25865                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25866 6A77           FF76         06            push	6[bp]
25867                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25868 6A7A           FF76         FE            push	-2[bp]
25869                                           ! Debug: func () void = write_word+0 (used reg = )
25870 6A7D           E8         1107            call	_write_word
25871 6A80           83C4                   06  add	sp,*6
25872                                           !BCC_EOS
25873                                           ! 3428     write_word(ss,BP,vgafont16alt);
25874                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
25875 6A83           BB                   3528  mov	bx,#_vgafont16alt
25876 6A86           53                         push	bx
25877                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25878 6A87           FF76         08            push	8[bp]
25879                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25880 6A8A           FF76         FE            push	-2[bp]
25881                                           ! Debug: func () void = write_word+0 (used reg = )
25882 6A8D           E8         10F7            call	_write_word
25883 6A90           83C4                   06  add	sp,*6
25884                                           !BCC_EOS
25885                                           ! 3429     break;
25886 6A93           EB           2B            jmp .21B
25887                                           !BCC_EOS
25888                                           ! 3430    default:
25889                                           ! 3431     return;
25890                       00006A95            .226:
25891 6A95           89EC                       mov	sp,bp
25892 6A97           5D                         pop	bp
25893 6A98           C3                         ret
25894                                           !BCC_EOS
25895                                           ! 3432   }
25896                                           ! 3433  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
25897 6A99           EB           25            jmp .21B
25898                       00006A9B            .21D:
25899 6A9B           2C                     00  sub	al,*0
25900 6A9D           72           F6            jb 	.226
25901 6A9F           3C                     07  cmp	al,*7
25902 6AA1           77           1B            ja  	.227
25903 6AA3           30E4                       xor	ah,ah
25904 6AA5           D1E0                       shl	ax,*1
25905 6AA7           89C3                       mov	bx,ax
25906 6AA9           2E                         seg	cs
25907 6AAA           FFA7       6AAE            br	.228[bx]
25908                       00006AAE            .228:
25909 6AAE                      6958            .word	.21E
25910 6AB0                      698F            .word	.21F
25911 6AB2                      69C6            .word	.220
25912 6AB4                      69E9            .word	.221
25913 6AB6                      6A0C            .word	.222
25914 6AB8                      6A2F            .word	.223
25915 6ABA                      6A51            .word	.224
25916 6ABC                      6A73            .word	.225
25917                       00006ABE            .227:
25918 6ABE           EB           D5            jmp	.226
25919                       00006AC0            .21B:
25920                       FFFFFFFC            ..FFF5	=	-4
25921                                           ! Debug: list int = const $85 (used reg = )
25922 6AC0           B8                   0085  mov	ax,#$85
25923 6AC3           50                         push	ax
25924                                           ! Debug: list int = const $40 (used reg = )
25925 6AC4           B8                   0040  mov	ax,*$40
25926 6AC7           50                         push	ax
25927                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
25928 6AC8           E8         107E            call	_read_byte
25929 6ACB           83C4                   04  add	sp,*4
25930                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
25931 6ACE           30E4                       xor	ah,ah
25932                                           ! Debug: list unsigned short = ax+0 (used reg = )
25933 6AD0           50                         push	ax
25934                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
25935 6AD1           FF76         0A            push	$A[bp]
25936                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25937 6AD4           FF76         FE            push	-2[bp]
25938                                           ! Debug: func () void = write_word+0 (used reg = )
25939 6AD7           E8         10AD            call	_write_word
25940 6ADA           83C4                   06  add	sp,*6
25941                                           !BCC_EOS
25942                                           ! 3434  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
25943                                           ! Debug: list int = const $84 (used reg = )
25944 6ADD           B8                   0084  mov	ax,#$84
25945 6AE0           50                         push	ax
25946                                           ! Debug: list int = const $40 (used reg = )
25947 6AE1           B8                   0040  mov	ax,*$40
25948 6AE4           50                         push	ax
25949                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
25950 6AE5           E8         1061            call	_read_byte
25951 6AE8           83C4                   04  add	sp,*4
25952                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
25953 6AEB           30E4                       xor	ah,ah
25954                                           ! Debug: list unsigned short = ax+0 (used reg = )
25955 6AED           50                         push	ax
25956                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
25957 6AEE           FF76         0C            push	$C[bp]
25958                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25959 6AF1           FF76         FE            push	-2[bp]
25960                                           ! Debug: func () void = write_word+0 (used reg = )
25961 6AF4           E8         1090            call	_write_word
25962 6AF7           83C4                   06  add	sp,*6
25963                                           !BCC_EOS
25964                                           ! 3435 }
25965 6AFA           89EC                       mov	sp,bp
25966 6AFC           5D                         pop	bp
25967 6AFD           C3                         ret
25968                                           ! 3436 #asm
25969                                           !BCC_ASM
25970                       00000006            _biosfn_get_font_info.BP	set	6
25971                       00000002            _biosfn_get_font_info.BH	set	2
25972                       00000008            _biosfn_get_font_info.CX	set	8
25973                       0000000A            _biosfn_get_font_info.DX	set	$A
25974                       00000004            _biosfn_get_font_info.ES	set	4
25975                       00006AFE            biosfn_get_ega_info:
25976 6AFE           1E                           push ds
25977 6AFF           50                           push ax
25978 6B00           B8                   0040    mov ax, # 0x40
25979 6B03           8ED8                         mov ds, ax
25980 6B05           30ED                         xor ch, ch
25981 6B07           BB                   0088    mov bx, # 0x88
25982 6B0A           8A0F                         mov cl, [bx]
25983 6B0C           80E1                   0F    and cl, #0x0f
25984 6B0F           BB                   0063    mov bx, # 0x63
25985 6B12           8B07                         mov ax, [bx]
25986 6B14           BB                   0003    mov bx, #0x0003
25987 6B17           3D                   03B4    cmp ax, # 0x3b4
25988 6B1A           75           02              jne mode_ega_color
25989 6B1C           B7                     01    mov bh, #0x01
25990                       00006B1E            mode_ega_color:
25991 6B1E           58                           pop ax
25992 6B1F           1F                           pop ds
25993 6B20           C3                           ret
25994                                           ! 3456 endasm
25995                                           !BCC_ENDASM
25996                                           ! 3457 static void biosfn_alternate_prtsc()
25997                                           ! Register BX used in function biosfn_get_font_info
25998                                           ! 3458 {
25999                       00006B21            _biosfn_alternate_prtsc:
26000                                           ! 3459 }
26001 6B21           C3                         ret
26002                                           ! 3460 #asm
26003                                           !BCC_ASM
26004                       00006B22            biosfn_select_vert_res:
26005                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26006 6B22           1E                           push ds
26007 6B23           53                           push bx
26008 6B24           52                           push dx
26009 6B25           88C2                         mov dl, al
26010 6B27           B8                   0040    mov ax, # 0x40
26011 6B2A           8ED8                         mov ds, ax
26012 6B2C           BB                   0089    mov bx, # 0x89
26013 6B2F           8A07                         mov al, [bx]
26014 6B31           BB                   0088    mov bx, # 0x88
26015 6B34           8A27                         mov ah, [bx]
26016 6B36           80FA                   01    cmp dl, #0x01
26017 6B39           74           15              je vert_res_350
26018 6B3B           72           1D              jb vert_res_200
26019 6B3D           80FA                   02    cmp dl, #0x02
26020 6B40           74           02              je vert_res_400
26021 6B42           EB           2A              jmp set_retcode
26022                       00006B44            vert_res_400:
26023                                             ; reset modeset ctl bit 7 and set bit 4
26024                                             ; set switches bit 3-0 to 0x09
26025 6B44           24                     7F    and al, #0x7f
26026 6B46           0C                     10    or al, #0x10
26027 6B48           80E4                   F0    and ah, #0xf0
26028 6B4B           80CC                   09    or ah, #0x09
26029 6B4E           75           14              jnz set_vert_res
26030                       00006B50            vert_res_350:
26031                                             ; reset modeset ctl bit 7 and bit 4
26032                                             ; set switches bit 3-0 to 0x09
26033 6B50           24                     6F    and al, #0x6f
26034 6B52           80E4                   F0    and ah, #0xf0
26035 6B55           80CC                   09    or ah, #0x09
26036 6B58           75           0A              jnz set_vert_res
26037                       00006B5A            vert_res_200:
26038                                             ; set modeset ctl bit 7 and reset bit 4
26039                                             ; set switches bit 3-0 to 0x08
26040 6B5A           24                     EF    and al, #0xef
26041 6B5C           0C                     80    or al, #0x80
26042 6B5E           80E4                   F0    and ah, #0xf0
26043 6B61           80CC                   08    or ah, #0x08
26044                       00006B64            set_vert_res:
26045 6B64           BB                   0089    mov bx, # 0x89
26046 6B67           8807                         mov [bx], al
26047 6B69           BB                   0088    mov bx, # 0x88
26048 6B6C           8827                         mov [bx], ah
26049                       00006B6E            set_retcode:
26050 6B6E           B8                   1212    mov ax, #0x1212
26051 6B71           5A                           pop dx
26052 6B72           5B                           pop bx
26053 6B73           1F                           pop ds
26054 6B74           C3                           ret
26055                       00006B75            biosfn_enable_default_palette_loading:
26056 6B75           1E                           push ds
26057 6B76           53                           push bx
26058 6B77           52                           push dx
26059 6B78           88C2                         mov dl, al
26060 6B7A           80E2                   01    and dl, #0x01
26061                                             ;shl dl, 3
26062 6B7D           D0E2                         shl dl, 1
26063 6B7F           D0E2                         shl dl, 1
26064 6B81           D0E2                         shl dl, 1
26065 6B83           B8                   0040    mov ax, # 0x40
26066 6B86           8ED8                         mov ds, ax
26067 6B88           BB                   0089    mov bx, # 0x89
26068 6B8B           8A07                         mov al, [bx]
26069 6B8D           24                     F7    and al, #0xf7
26070 6B8F           08D0                         or al, dl
26071 6B91           8807                         mov [bx], al
26072 6B93           B8                   1212    mov ax, #0x1212
26073 6B96           5A                           pop dx
26074 6B97           5B                           pop bx
26075 6B98           1F                           pop ds
26076 6B99           C3                           ret
26077                       00006B9A            biosfn_enable_video_addressing:
26078 6B9A           53                           push bx
26079 6B9B           52                           push dx
26080 6B9C           88C3                         mov bl, al
26081 6B9E           80E3                   01    and bl, #0x01
26082 6BA1           80F3                   01    xor bl, #0x01
26083 6BA4           D0E3                         shl bl, 1
26084 6BA6           BA                   03CC    mov dx, # 0x3cc
26085 6BA9           EC                           in al, dx
26086 6BAA           24                     FD    and al, #0xfd
26087 6BAC           08D8                         or al, bl
26088 6BAE           BA                   03C2    mov dx, # 0x3c2
26089 6BB1           EE                           out dx, al
26090 6BB2           B8                   1212    mov ax, #0x1212
26091 6BB5           5A                           pop dx
26092 6BB6           5B                           pop bx
26093 6BB7           C3                           ret
26094                       00006BB8            biosfn_enable_grayscale_summing:
26095 6BB8           1E                           push ds
26096 6BB9           53                           push bx
26097 6BBA           52                           push dx
26098 6BBB           88C2                         mov dl, al
26099 6BBD           80E2                   01    and dl, #0x01
26100 6BC0           80F2                   01    xor dl, #0x01
26101 6BC3           D0E2                         shl dl, 1
26102 6BC5           B8                   0040    mov ax, # 0x40
26103 6BC8           8ED8                         mov ds, ax
26104 6BCA           BB                   0089    mov bx, # 0x89
26105 6BCD           8A07                         mov al, [bx]
26106 6BCF           24                     FD    and al, #0xfd
26107 6BD1           08D0                         or al, dl
26108 6BD3           8807                         mov [bx], al
26109 6BD5           B8                   1212    mov ax, #0x1212
26110 6BD8           5A                           pop dx
26111 6BD9           5B                           pop bx
26112 6BDA           1F                           pop ds
26113 6BDB           C3                           ret
26114                       00006BDC            biosfn_enable_cursor_emulation:
26115 6BDC           1E                           push ds
26116 6BDD           53                           push bx
26117 6BDE           52                           push dx
26118 6BDF           88C2                         mov dl, al
26119 6BE1           80E2                   01    and dl, #0x01
26120 6BE4           80F2                   01    xor dl, #0x01
26121 6BE7           B8                   0040    mov ax, # 0x40
26122 6BEA           8ED8                         mov ds, ax
26123 6BEC           BB                   0089    mov bx, # 0x89
26124 6BEF           8A07                         mov al, [bx]
26125 6BF1           24                     FE    and al, #0xfe
26126 6BF3           08D0                         or al, dl
26127 6BF5           8807                         mov [bx], al
26128 6BF7           B8                   1212    mov ax, #0x1212
26129 6BFA           5A                           pop dx
26130 6BFB           5B                           pop bx
26131 6BFC           1F                           pop ds
26132 6BFD           C3                           ret
26133                                           ! 3590 endasm
26134                                           !BCC_ENDASM
26135                                           ! 3591 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26136                       00006BFE            _biosfn_switch_video_interface:
26137                                           !BCC_EOS
26138                                           !BCC_EOS
26139                                           !BCC_EOS
26140                                           ! 3592 {
26141                                           ! 3593 }
26142 6BFE           C3                         ret
26143                                           ! 3594 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26144                       00006BFF            _biosfn_enable_video_refresh_control:
26145                                           !BCC_EOS
26146                                           ! 3595 {
26147                                           ! 3596 }
26148 6BFF           C3                         ret
26149                                           ! 3597 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26150                                           ! 3598 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26151                       00006C00            _biosfn_write_string:
26152                                           !BCC_EOS
26153                                           !BCC_EOS
26154                                           !BCC_EOS
26155                                           !BCC_EOS
26156                                           !BCC_EOS
26157                                           !BCC_EOS
26158                                           !BCC_EOS
26159                                           !BCC_EOS
26160                                           ! 3599 {
26161                                           ! 3600  Bit16u newcurs,oldcurs,dummy;
26162                                           !BCC_EOS
26163                                           ! 3601  Bit8u car,carattr;
26164                                           !BCC_EOS
26165                                           ! 3602  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26166 6C00           55                         push	bp
26167 6C01           89E5                       mov	bp,sp
26168 6C03           83C4                   F8  add	sp,*-8
26169                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26170 6C06           8D5E         FC            lea	bx,-4[bp]
26171 6C09           53                         push	bx
26172                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26173 6C0A           8D5E         FA            lea	bx,-6[bp]
26174 6C0D           53                         push	bx
26175                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26176 6C0E           8A46         06            mov	al,6[bp]
26177 6C11           30E4                       xor	ah,ah
26178 6C13           50                         push	ax
26179                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26180 6C14           E8         D745            call	_biosfn_get_cursor_pos
26181 6C17           83C4                   06  add	sp,*6
26182                                           !BCC_EOS
26183                                           ! 3603  if(row==0xff)
26184                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26185 6C1A           8A46         0C            mov	al,$C[bp]
26186 6C1D           3C                     FF  cmp	al,#$FF
26187 6C1F           75           12            jne 	.229
26188                       00006C21            .22A:
26189                                           ! 3604   {col=oldcurs&0x00ff;
26190                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26191 6C21           8A46         FC            mov	al,-4[bp]
26192                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26193 6C24           8846         0E            mov	$E[bp],al
26194                                           !BCC_EOS
26195                                           ! 3605    row=(oldcurs&0xff00)>>8;
26196                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26197 6C27           8B46         FC            mov	ax,-4[bp]
26198 6C2A           30C0                       xor	al,al
26199                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26200 6C2C           88E0                       mov	al,ah
26201 6C2E           30E4                       xor	ah,ah
26202                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26203 6C30           8846         0C            mov	$C[bp],al
26204                                           !BCC_EOS
26205                                           ! 3606   }
26206                                           ! 3607  newcurs=row; newcurs<<=8; newcurs+=col;
26207                       00006C33            .229:
26208                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26209 6C33           8A46         0C            mov	al,$C[bp]
26210 6C36           30E4                       xor	ah,ah
26211 6C38           8946         FE            mov	-2[bp],ax
26212                                           !BCC_EOS
26213                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26214 6C3B           8B46         FE            mov	ax,-2[bp]
26215 6C3E           88C4                       mov	ah,al
26216 6C40           30C0                       xor	al,al
26217 6C42           8946         FE            mov	-2[bp],ax
26218                                           !BCC_EOS
26219                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26220 6C45           8B46         FE            mov	ax,-2[bp]
26221 6C48           0246         0E            add	al,$E[bp]
26222 6C4B           80D4                   00  adc	ah,*0
26223 6C4E           8946         FE            mov	-2[bp],ax
26224                                           !BCC_EOS
26225                                           ! 3608  biosfn_set_cursor_pos(page,newcurs);
26226                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26227 6C51           FF76         FE            push	-2[bp]
26228                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26229 6C54           8A46         06            mov	al,6[bp]
26230 6C57           30E4                       xor	ah,ah
26231 6C59           50                         push	ax
26232                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26233 6C5A           E8         D5FE            call	_biosfn_set_cursor_pos
26234 6C5D           83C4                   04  add	sp,*4
26235                                           !BCC_EOS
26236                                           ! 3609  while(count--!=0)
26237                                           ! 3610   {
26238 6C60           EB           4F            jmp .22C
26239                       00006C62            .22D:
26240                                           ! 3611    car=read_byte(seg,offset++);
26241                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26242 6C62           8B46         12            mov	ax,$12[bp]
26243 6C65           40                         inc	ax
26244 6C66           8946         12            mov	$12[bp],ax
26245                                           ! Debug: list unsigned short = ax-1 (used reg = )
26246 6C69           48                         dec	ax
26247 6C6A           50                         push	ax
26248                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26249 6C6B           FF76         10            push	$10[bp]
26250                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26251 6C6E           E8         0ED8            call	_read_byte
26252 6C71           83C4                   04  add	sp,*4
26253                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26254 6C74           8846         F9            mov	-7[bp],al
26255                                           !BCC_EOS
26256                                           ! 3612    if((flag&0x02)!=0)
26257                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26258 6C77           8A46         04            mov	al,4[bp]
26259 6C7A           24                     02  and	al,*2
26260                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26261 6C7C           84C0                       test	al,al
26262 6C7E           74           15            je  	.22E
26263                       00006C80            .22F:
26264                                           ! 3613     attr=read_byte(seg,offset++);
26265                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26266 6C80           8B46         12            mov	ax,$12[bp]
26267 6C83           40                         inc	ax
26268 6C84           8946         12            mov	$12[bp],ax
26269                                           ! Debug: list unsigned short = ax-1 (used reg = )
26270 6C87           48                         dec	ax
26271 6C88           50                         push	ax
26272                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26273 6C89           FF76         10            push	$10[bp]
26274                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26275 6C8C           E8         0EBA            call	_read_byte
26276 6C8F           83C4                   04  add	sp,*4
26277                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26278 6C92           8846         08            mov	8[bp],al
26279                                           !BCC_EOS
26280                                           ! 3614    biosfn_write_teletype(car,page,attr,3);
26281                       00006C95            .22E:
26282                                           ! Debug: list int = const 3 (used reg = )
26283 6C95           B8                   0003  mov	ax,*3
26284 6C98           50                         push	ax
26285                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26286 6C99           8A46         08            mov	al,8[bp]
26287 6C9C           30E4                       xor	ah,ah
26288 6C9E           50                         push	ax
26289                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26290 6C9F           8A46         06            mov	al,6[bp]
26291 6CA2           30E4                       xor	ah,ah
26292 6CA4           50                         push	ax
26293                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26294 6CA5           8A46         F9            mov	al,-7[bp]
26295 6CA8           30E4                       xor	ah,ah
26296 6CAA           50                         push	ax
26297                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26298 6CAB           E8         F113            call	_biosfn_write_teletype
26299 6CAE           83C4                   08  add	sp,*8
26300                                           !BCC_EOS
26301                                           ! 3615   }
26302                                           ! 3616  if((flag&0x01)==0)
26303                       00006CB1            .22C:
26304                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26305 6CB1           8B46         0A            mov	ax,$A[bp]
26306 6CB4           48                         dec	ax
26307 6CB5           8946         0A            mov	$A[bp],ax
26308                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26309 6CB8           3D                   FFFF  cmp	ax,*-1
26310 6CBB           75           A5            jne	.22D
26311                       00006CBD            .230:
26312                       00006CBD            .22B:
26313                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26314 6CBD           8A46         04            mov	al,4[bp]
26315 6CC0           24                     01  and	al,*1
26316                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26317 6CC2           84C0                       test	al,al
26318 6CC4           75           0F            jne 	.231
26319                       00006CC6            .232:
26320                                           ! 3617   biosfn_set_cursor_pos(page,oldcurs);
26321                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26322 6CC6           FF76         FC            push	-4[bp]
26323                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26324 6CC9           8A46         06            mov	al,6[bp]
26325 6CCC           30E4                       xor	ah,ah
26326 6CCE           50                         push	ax
26327                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26328 6CCF           E8         D589            call	_biosfn_set_cursor_pos
26329 6CD2           83C4                   04  add	sp,*4
26330                                           !BCC_EOS
26331                                           ! 3618 }
26332                       00006CD5            .231:
26333 6CD5           89EC                       mov	sp,bp
26334 6CD7           5D                         pop	bp
26335 6CD8           C3                         ret
26336                                           ! 3619 #asm
26337                                           !BCC_ASM
26338                       00000008            _biosfn_write_string.count	set	8
26339                       0000000E            _biosfn_write_string.seg	set	$E
26340                       0000000C            _biosfn_write_string.col	set	$C
26341                       00000002            _biosfn_write_string.flag	set	2
26342                       00000006            _biosfn_write_string.attr	set	6
26343                       00000004            _biosfn_write_string.page	set	4
26344                       0000000A            _biosfn_write_string.row	set	$A
26345                       00000010            _biosfn_write_string.offset	set	$10
26346                       00006CD9            biosfn_group_1A:
26347 6CD9           3C                     00    cmp al, #0x00
26348 6CDB           74           05              je biosfn_read_display_code
26349 6CDD           3C                     01    cmp al, #0x01
26350 6CDF           74           16              je biosfn_set_display_code
26351 6CE1           C3                           ret
26352                       00006CE2            biosfn_read_display_code:
26353 6CE2           1E                           push ds
26354 6CE3           50                           push ax
26355 6CE4           B8                   0040    mov ax, # 0x40
26356 6CE7           8ED8                         mov ds, ax
26357 6CE9           BB                   008A    mov bx, # 0x8A
26358 6CEC           8A07                         mov al, [bx]
26359 6CEE           88C3                         mov bl, al
26360 6CF0           30FF                         xor bh, bh
26361 6CF2           58                           pop ax
26362 6CF3           88E0                         mov al, ah
26363 6CF5           1F                           pop ds
26364 6CF6           C3                           ret
26365                       00006CF7            biosfn_set_display_code:
26366 6CF7           1E                           push ds
26367 6CF8           50                           push ax
26368 6CF9           53                           push bx
26369 6CFA           B8                   0040    mov ax, # 0x40
26370 6CFD           8ED8                         mov ds, ax
26371 6CFF           89D8                         mov ax, bx
26372 6D01           BB                   008A    mov bx, # 0x8A
26373 6D04           8807                         mov [bx], al
26374 6D06           5B                           pop bx
26375 6D07           58                           pop ax
26376 6D08           88E0                         mov al, ah
26377 6D0A           1F                           pop ds
26378 6D0B           C3                           ret
26379                                           ! 3653 endasm
26380                                           !BCC_ENDASM
26381                                           ! 3654 static void biosfn_read_state_info (BX,ES,DI)
26382                                           ! Register BX used in function biosfn_write_string
26383                                           ! 3655 Bit16u BX;Bit16u ES;Bit16u DI;
26384                       00006D0C            _biosfn_read_state_info:
26385                                           !BCC_EOS
26386                                           !BCC_EOS
26387                                           !BCC_EOS
26388                                           ! 3656 {
26389                                           ! 3657  write_word(ES,DI+0x00,&static_functionality);
26390 6D0C           55                         push	bp
26391 6D0D           89E5                       mov	bp,sp
26392                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26393 6D0F           BB                   0F17  mov	bx,#_static_functionality
26394 6D12           53                         push	bx
26395                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26396 6D13           8B46         08            mov	ax,8[bp]
26397                                           ! Debug: list unsigned int = ax+0 (used reg = )
26398 6D16           50                         push	ax
26399                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26400 6D17           FF76         06            push	6[bp]
26401                                           ! Debug: func () void = write_word+0 (used reg = )
26402 6D1A           E8         0E6A            call	_write_word
26403 6D1D           89EC                       mov	sp,bp
26404                                           !BCC_EOS
26405                                           ! 3658  write_word(ES,DI+0x02,0xC000);
26406                                           ! Debug: list unsigned int = const $C000 (used reg = )
26407 6D1F           B8                   C000  mov	ax,#$C000
26408 6D22           50                         push	ax
26409                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26410 6D23           8B46         08            mov	ax,8[bp]
26411                                           ! Debug: list unsigned int = ax+2 (used reg = )
26412 6D26           40                         inc	ax
26413 6D27           40                         inc	ax
26414 6D28           50                         push	ax
26415                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26416 6D29           FF76         06            push	6[bp]
26417                                           ! Debug: func () void = write_word+0 (used reg = )
26418 6D2C           E8         0E58            call	_write_word
26419 6D2F           89EC                       mov	sp,bp
26420                                           !BCC_EOS
26421                                           ! 3659  memcpyb(ES,DI+0x04,0x40,0x49,30);
26422                                           ! Debug: list int = const $1E (used reg = )
26423 6D31           B8                   001E  mov	ax,*$1E
26424 6D34           50                         push	ax
26425                                           ! Debug: list int = const $49 (used reg = )
26426 6D35           B8                   0049  mov	ax,*$49
26427 6D38           50                         push	ax
26428                                           ! Debug: list int = const $40 (used reg = )
26429 6D39           B8                   0040  mov	ax,*$40
26430 6D3C           50                         push	ax
26431                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26432 6D3D           8B46         08            mov	ax,8[bp]
26433                                           ! Debug: list unsigned int = ax+4 (used reg = )
26434 6D40           05                   0004  add	ax,*4
26435 6D43           50                         push	ax
26436                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26437 6D44           FF76         06            push	6[bp]
26438                                           ! Debug: func () void = memcpyb+0 (used reg = )
26439 6D47           E8         0D9F            call	_memcpyb
26440 6D4A           89EC                       mov	sp,bp
26441                                           !BCC_EOS
26442                                           ! 3660  memcpyb(ES,DI+0x22,0x40,0x84,3);
26443                                           ! Debug: list int = const 3 (used reg = )
26444 6D4C           B8                   0003  mov	ax,*3
26445 6D4F           50                         push	ax
26446                                           ! Debug: list int = const $84 (used reg = )
26447 6D50           B8                   0084  mov	ax,#$84
26448 6D53           50                         push	ax
26449                                           ! Debug: list int = const $40 (used reg = )
26450 6D54           B8                   0040  mov	ax,*$40
26451 6D57           50                         push	ax
26452                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26453 6D58           8B46         08            mov	ax,8[bp]
26454                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26455 6D5B           05                   0022  add	ax,*$22
26456 6D5E           50                         push	ax
26457                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26458 6D5F           FF76         06            push	6[bp]
26459                                           ! Debug: func () void = memcpyb+0 (used reg = )
26460 6D62           E8         0D84            call	_memcpyb
26461 6D65           89EC                       mov	sp,bp
26462                                           !BCC_EOS
26463                                           ! 3661  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26464                                           ! Debug: list int = const $8A (used reg = )
26465 6D67           B8                   008A  mov	ax,#$8A
26466 6D6A           50                         push	ax
26467                                           ! Debug: list int = const $40 (used reg = )
26468 6D6B           B8                   0040  mov	ax,*$40
26469 6D6E           50                         push	ax
26470                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26471 6D6F           E8         0DD7            call	_read_byte
26472 6D72           89EC                       mov	sp,bp
26473                                           ! Debug: list unsigned char = al+0 (used reg = )
26474 6D74           30E4                       xor	ah,ah
26475 6D76           50                         push	ax
26476                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26477 6D77           8B46         08            mov	ax,8[bp]
26478                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26479 6D7A           05                   0025  add	ax,*$25
26480 6D7D           50                         push	ax
26481                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26482 6D7E           FF76         06            push	6[bp]
26483                                           ! Debug: func () void = write_byte+0 (used reg = )
26484 6D81           E8         0DEB            call	_write_byte
26485 6D84           89EC                       mov	sp,bp
26486                                           !BCC_EOS
26487                                           ! 3662  write_byte(ES,DI+0x26,0);
26488                                           ! Debug: list int = const 0 (used reg = )
26489 6D86           31C0                       xor	ax,ax
26490 6D88           50                         push	ax
26491                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26492 6D89           8B46         08            mov	ax,8[bp]
26493                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26494 6D8C           05                   0026  add	ax,*$26
26495 6D8F           50                         push	ax
26496                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26497 6D90           FF76         06            push	6[bp]
26498                                           ! Debug: func () void = write_byte+0 (used reg = )
26499 6D93           E8         0DD9            call	_write_byte
26500 6D96           89EC                       mov	sp,bp
26501                                           !BCC_EOS
26502                                           ! 3663  write_byte(ES,DI+0x27,16);
26503                                           ! Debug: list int = const $10 (used reg = )
26504 6D98           B8                   0010  mov	ax,*$10
26505 6D9B           50                         push	ax
26506                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26507 6D9C           8B46         08            mov	ax,8[bp]
26508                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26509 6D9F           05                   0027  add	ax,*$27
26510 6DA2           50                         push	ax
26511                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26512 6DA3           FF76         06            push	6[bp]
26513                                           ! Debug: func () void = write_byte+0 (used reg = )
26514 6DA6           E8         0DC6            call	_write_byte
26515 6DA9           89EC                       mov	sp,bp
26516                                           !BCC_EOS
26517                                           ! 3664  write_byte(ES,DI+0x28,0);
26518                                           ! Debug: list int = const 0 (used reg = )
26519 6DAB           31C0                       xor	ax,ax
26520 6DAD           50                         push	ax
26521                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26522 6DAE           8B46         08            mov	ax,8[bp]
26523                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26524 6DB1           05                   0028  add	ax,*$28
26525 6DB4           50                         push	ax
26526                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26527 6DB5           FF76         06            push	6[bp]
26528                                           ! Debug: func () void = write_byte+0 (used reg = )
26529 6DB8           E8         0DB4            call	_write_byte
26530 6DBB           89EC                       mov	sp,bp
26531                                           !BCC_EOS
26532                                           ! 3665  write_byte(ES,DI+0x29,8);
26533                                           ! Debug: list int = const 8 (used reg = )
26534 6DBD           B8                   0008  mov	ax,*8
26535 6DC0           50                         push	ax
26536                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26537 6DC1           8B46         08            mov	ax,8[bp]
26538                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26539 6DC4           05                   0029  add	ax,*$29
26540 6DC7           50                         push	ax
26541                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26542 6DC8           FF76         06            push	6[bp]
26543                                           ! Debug: func () void = write_byte+0 (used reg = )
26544 6DCB           E8         0DA1            call	_write_byte
26545 6DCE           89EC                       mov	sp,bp
26546                                           !BCC_EOS
26547                                           ! 3666  write_byte(ES,DI+0x2a,2);
26548                                           ! Debug: list int = const 2 (used reg = )
26549 6DD0           B8                   0002  mov	ax,*2
26550 6DD3           50                         push	ax
26551                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
26552 6DD4           8B46         08            mov	ax,8[bp]
26553                                           ! Debug: list unsigned int = ax+$2A (used reg = )
26554 6DD7           05                   002A  add	ax,*$2A
26555 6DDA           50                         push	ax
26556                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26557 6DDB           FF76         06            push	6[bp]
26558                                           ! Debug: func () void = write_byte+0 (used reg = )
26559 6DDE           E8         0D8E            call	_write_byte
26560 6DE1           89EC                       mov	sp,bp
26561                                           !BCC_EOS
26562                                           ! 3667  write_byte(ES,DI+0x2b,0);
26563                                           ! Debug: list int = const 0 (used reg = )
26564 6DE3           31C0                       xor	ax,ax
26565 6DE5           50                         push	ax
26566                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
26567 6DE6           8B46         08            mov	ax,8[bp]
26568                                           ! Debug: list unsigned int = ax+$2B (used reg = )
26569 6DE9           05                   002B  add	ax,*$2B
26570 6DEC           50                         push	ax
26571                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26572 6DED           FF76         06            push	6[bp]
26573                                           ! Debug: func () void = write_byte+0 (used reg = )
26574 6DF0           E8         0D7C            call	_write_byte
26575 6DF3           89EC                       mov	sp,bp
26576                                           !BCC_EOS
26577                                           ! 3668  write_byte(ES,DI+0x2c,0);
26578                                           ! Debug: list int = const 0 (used reg = )
26579 6DF5           31C0                       xor	ax,ax
26580 6DF7           50                         push	ax
26581                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
26582 6DF8           8B46         08            mov	ax,8[bp]
26583                                           ! Debug: list unsigned int = ax+$2C (used reg = )
26584 6DFB           05                   002C  add	ax,*$2C
26585 6DFE           50                         push	ax
26586                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26587 6DFF           FF76         06            push	6[bp]
26588                                           ! Debug: func () void = write_byte+0 (used reg = )
26589 6E02           E8         0D6A            call	_write_byte
26590 6E05           89EC                       mov	sp,bp
26591                                           !BCC_EOS
26592                                           ! 3669  write_byte(ES,DI+0x31,3);
26593                                           ! Debug: list int = const 3 (used reg = )
26594 6E07           B8                   0003  mov	ax,*3
26595 6E0A           50                         push	ax
26596                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
26597 6E0B           8B46         08            mov	ax,8[bp]
26598                                           ! Debug: list unsigned int = ax+$31 (used reg = )
26599 6E0E           05                   0031  add	ax,*$31
26600 6E11           50                         push	ax
26601                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26602 6E12           FF76         06            push	6[bp]
26603                                           ! Debug: func () void = write_byte+0 (used reg = )
26604 6E15           E8         0D57            call	_write_byte
26605 6E18           89EC                       mov	sp,bp
26606                                           !BCC_EOS
26607                                           ! 3670  write_byte(ES,DI+0x32,0);
26608                                           ! Debug: list int = const 0 (used reg = )
26609 6E1A           31C0                       xor	ax,ax
26610 6E1C           50                         push	ax
26611                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
26612 6E1D           8B46         08            mov	ax,8[bp]
26613                                           ! Debug: list unsigned int = ax+$32 (used reg = )
26614 6E20           05                   0032  add	ax,*$32
26615 6E23           50                         push	ax
26616                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26617 6E24           FF76         06            push	6[bp]
26618                                           ! Debug: func () void = write_byte+0 (used reg = )
26619 6E27           E8         0D45            call	_write_byte
26620 6E2A           89EC                       mov	sp,bp
26621                                           !BCC_EOS
26622                                           ! 3671  memsetb(ES,DI+0x33,0,13);
26623                                           ! Debug: list int = const $D (used reg = )
26624 6E2C           B8                   000D  mov	ax,*$D
26625 6E2F           50                         push	ax
26626                                           ! Debug: list int = const 0 (used reg = )
26627 6E30           31C0                       xor	ax,ax
26628 6E32           50                         push	ax
26629                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
26630 6E33           8B46         08            mov	ax,8[bp]
26631                                           ! Debug: list unsigned int = ax+$33 (used reg = )
26632 6E36           05                   0033  add	ax,*$33
26633 6E39           50                         push	ax
26634                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
26635 6E3A           FF76         06            push	6[bp]
26636                                           ! Debug: func () void = memsetb+0 (used reg = )
26637 6E3D           E8         0C5F            call	_memsetb
26638 6E40           89EC                       mov	sp,bp
26639                                           !BCC_EOS
26640                                           ! 3672 }
26641 6E42           5D                         pop	bp
26642 6E43           C3                         ret
26643                                           ! 3673 static Bit16u biosfn_read_video_state_size2 (CX)
26644                                           ! Register BX used in function biosfn_read_state_info
26645                                           ! 3674      Bit16u CX;
26646                       00006E44            _biosfn_read_video_state_size2:
26647                                           !BCC_EOS
26648                                           ! 3675 {
26649                                           ! 3676     Bit16u size;
26650                                           !BCC_EOS
26651                                           ! 3677     size = 0;
26652 6E44           55                         push	bp
26653 6E45           89E5                       mov	bp,sp
26654 6E47           4C                         dec	sp
26655 6E48           4C                         dec	sp
26656                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
26657 6E49           31C0                       xor	ax,ax
26658 6E4B           8946         FE            mov	-2[bp],ax
26659                                           !BCC_EOS
26660                                           ! 3678     if (CX & 1) {
26661                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
26662 6E4E           8A46         04            mov	al,4[bp]
26663 6E51           24                     01  and	al,*1
26664 6E53           84C0                       test	al,al
26665 6E55           74           09            je  	.233
26666                       00006E57            .234:
26667                                           ! 3679         size += 0x46;
26668                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
26669 6E57           8B46         FE            mov	ax,-2[bp]
26670 6E5A           05                   0046  add	ax,*$46
26671 6E5D           8946         FE            mov	-2[bp],ax
26672                                           !BCC_EOS
26673                                           ! 3680     }
26674                                           ! 3681     if (CX & 2) {
26675                       00006E60            .233:
26676                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
26677 6E60           8A46         04            mov	al,4[bp]
26678 6E63           24                     02  and	al,*2
26679 6E65           84C0                       test	al,al
26680 6E67           74           09            je  	.235
26681                       00006E69            .236:
26682                                           ! 3682         size += (5 + 8 + 5) * 2 + 6;
26683                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
26684 6E69           8B46         FE            mov	ax,-2[bp]
26685 6E6C           05                   002A  add	ax,*$2A
26686 6E6F           8946         FE            mov	-2[bp],ax
26687                                           !BCC_EOS
26688                                           ! 3683     }
26689                                           ! 3684     if (CX & 4) {
26690                       00006E72            .235:
26691                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
26692 6E72           8A46         04            mov	al,4[bp]
26693 6E75           24                     04  and	al,*4
26694 6E77           84C0                       test	al,al
26695 6E79           74           09            je  	.237
26696                       00006E7B            .238:
26697                                           ! 3685         size += 3 + 256 * 3 + 1;
26698                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
26699 6E7B           8B46         FE            mov	ax,-2[bp]
26700 6E7E           05                   0304  add	ax,#$304
26701 6E81           8946         FE            mov	-2[bp],ax
26702                                           !BCC_EOS
26703                                           ! 3686 }
26704                                           ! 3687     return size;
26705                       00006E84            .237:
26706 6E84           8B46         FE            mov	ax,-2[bp]
26707 6E87           89EC                       mov	sp,bp
26708 6E89           5D                         pop	bp
26709 6E8A           C3                         ret
26710                                           !BCC_EOS
26711                                           ! 3688 }
26712                                           ! 3689 static void biosfn_read_video_state_size (CX, BX)
26713                                           ! 3690      Bit16u CX; Bit16u *BX;
26714                       00006E8B            _biosfn_read_video_state_size:
26715                                           !BCC_EOS
26716                                           !BCC_EOS
26717                                           ! 3691 {
26718                                           ! 3692     Bit16u ss=get_SS();
26719 6E8B           55                         push	bp
26720 6E8C           89E5                       mov	bp,sp
26721 6E8E           4C                         dec	sp
26722 6E8F           4C                         dec	sp
26723                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26724 6E90           E8         0D42            call	_get_SS
26725                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26726 6E93           8946         FE            mov	-2[bp],ax
26727                                           !BCC_EOS
26728                                           ! 3693     write_word(ss, BX, biosfn_read_video_state_size2(CX));
26729                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
26730 6E96           FF76         04            push	4[bp]
26731                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
26732 6E99           E8         FFA8            call	_biosfn_read_video_state_size2
26733 6E9C           44                         inc	sp
26734 6E9D           44                         inc	sp
26735                                           ! Debug: list unsigned short = ax+0 (used reg = )
26736 6E9E           50                         push	ax
26737                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
26738 6E9F           FF76         06            push	6[bp]
26739                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26740 6EA2           FF76         FE            push	-2[bp]
26741                                           ! Debug: func () void = write_word+0 (used reg = )
26742 6EA5           E8         0CDF            call	_write_word
26743 6EA8           83C4                   06  add	sp,*6
26744                                           !BCC_EOS
26745                                           ! 3694 }
26746 6EAB           89EC                       mov	sp,bp
26747 6EAD           5D                         pop	bp
26748 6EAE           C3                         ret
26749                                           ! 3695 static Bit16u biosfn_save_video_state (CX,ES,BX)
26750                                           ! 3696      Bit16u CX;Bit16u ES;Bit16u BX;
26751                       00006EAF            _biosfn_save_video_state:
26752                                           !BCC_EOS
26753                                           !BCC_EOS
26754                                           !BCC_EOS
26755                                           ! 3697 {
26756                                           ! 3698     Bit16u i, v, crtc_addr, ar_index;
26757                                           !BCC_EOS
26758                                           ! 3699     crtc_addr = read_word(0x40, 0x63);
26759 6EAF           55                         push	bp
26760 6EB0           89E5                       mov	bp,sp
26761 6EB2           83C4                   F8  add	sp,*-8
26762                                           ! Debug: list int = const $63 (used reg = )
26763 6EB5           B8                   0063  mov	ax,*$63
26764 6EB8           50                         push	ax
26765                                           ! Debug: list int = const $40 (used reg = )
26766 6EB9           B8                   0040  mov	ax,*$40
26767 6EBC           50                         push	ax
26768                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26769 6EBD           E8         0C9C            call	_read_word
26770 6EC0           83C4                   04  add	sp,*4
26771                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
26772 6EC3           8946         FA            mov	-6[bp],ax
26773                                           !BCC_EOS
26774                                           ! 3700     if (CX & 1) {
26775                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
26776 6EC6           8A46         04            mov	al,4[bp]
26777 6EC9           24                     01  and	al,*1
26778 6ECB           84C0                       test	al,al
26779 6ECD   7503    E9         0266            beq 	.239
26780                       00006ED2            .23A:
26781                                           ! 3701         write_byte(ES, BX, inb(0x3c4)); BX++;
26782                                           ! Debug: list int = const $3C4 (used reg = )
26783 6ED2           B8                   03C4  mov	ax,#$3C4
26784 6ED5           50                         push	ax
26785                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26786 6ED6           E8         0CC6            call	_inb
26787 6ED9           44                         inc	sp
26788 6EDA           44                         inc	sp
26789                                           ! Debug: list unsigned char = al+0 (used reg = )
26790 6EDB           30E4                       xor	ah,ah
26791 6EDD           50                         push	ax
26792                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26793 6EDE           FF76         08            push	8[bp]
26794                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26795 6EE1           FF76         06            push	6[bp]
26796                                           ! Debug: func () void = write_byte+0 (used reg = )
26797 6EE4           E8         0C88            call	_write_byte
26798 6EE7           83C4                   06  add	sp,*6
26799                                           !BCC_EOS
26800                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26801 6EEA           8B46         08            mov	ax,8[bp]
26802 6EED           40                         inc	ax
26803 6EEE           8946         08            mov	8[bp],ax
26804                                           !BCC_EOS
26805                                           ! 3702         write_byte(ES, BX, inb(crtc_addr)); BX++;
26806                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
26807 6EF1           FF76         FA            push	-6[bp]
26808                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26809 6EF4           E8         0CA8            call	_inb
26810 6EF7           44                         inc	sp
26811 6EF8           44                         inc	sp
26812                                           ! Debug: list unsigned char = al+0 (used reg = )
26813 6EF9           30E4                       xor	ah,ah
26814 6EFB           50                         push	ax
26815                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26816 6EFC           FF76         08            push	8[bp]
26817                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26818 6EFF           FF76         06            push	6[bp]
26819                                           ! Debug: func () void = write_byte+0 (used reg = )
26820 6F02           E8         0C6A            call	_write_byte
26821 6F05           83C4                   06  add	sp,*6
26822                                           !BCC_EOS
26823                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26824 6F08           8B46         08            mov	ax,8[bp]
26825 6F0B           40                         inc	ax
26826 6F0C           8946         08            mov	8[bp],ax
26827                                           !BCC_EOS
26828                                           ! 3703         write_byte(ES, BX, inb(0x3ce)); BX++;
26829                                           ! Debug: list int = const $3CE (used reg = )
26830 6F0F           B8                   03CE  mov	ax,#$3CE
26831 6F12           50                         push	ax
26832                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26833 6F13           E8         0C89            call	_inb
26834 6F16           44                         inc	sp
26835 6F17           44                         inc	sp
26836                                           ! Debug: list unsigned char = al+0 (used reg = )
26837 6F18           30E4                       xor	ah,ah
26838 6F1A           50                         push	ax
26839                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26840 6F1B           FF76         08            push	8[bp]
26841                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26842 6F1E           FF76         06            push	6[bp]
26843                                           ! Debug: func () void = write_byte+0 (used reg = )
26844 6F21           E8         0C4B            call	_write_byte
26845 6F24           83C4                   06  add	sp,*6
26846                                           !BCC_EOS
26847                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26848 6F27           8B46         08            mov	ax,8[bp]
26849 6F2A           40                         inc	ax
26850 6F2B           8946         08            mov	8[bp],ax
26851                                           !BCC_EOS
26852                                           ! 3704         inb(0x3da);
26853                                           ! Debug: list int = const $3DA (used reg = )
26854 6F2E           B8                   03DA  mov	ax,#$3DA
26855 6F31           50                         push	ax
26856                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26857 6F32           E8         0C6A            call	_inb
26858 6F35           44                         inc	sp
26859 6F36           44                         inc	sp
26860                                           !BCC_EOS
26861                                           ! 3705         ar_index = inb(0x3c0);
26862                                           ! Debug: list int = const $3C0 (used reg = )
26863 6F37           B8                   03C0  mov	ax,#$3C0
26864 6F3A           50                         push	ax
26865                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26866 6F3B           E8         0C61            call	_inb
26867 6F3E           44                         inc	sp
26868 6F3F           44                         inc	sp
26869                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
26870 6F40           30E4                       xor	ah,ah
26871 6F42           8946         F8            mov	-8[bp],ax
26872                                           !BCC_EOS
26873                                           ! 3706         write_byte(ES, BX, ar_index); BX++;
26874                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
26875 6F45           FF76         F8            push	-8[bp]
26876                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26877 6F48           FF76         08            push	8[bp]
26878                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26879 6F4B           FF76         06            push	6[bp]
26880                                           ! Debug: func () void = write_byte+0 (used reg = )
26881 6F4E           E8         0C1E            call	_write_byte
26882 6F51           83C4                   06  add	sp,*6
26883                                           !BCC_EOS
26884                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26885 6F54           8B46         08            mov	ax,8[bp]
26886 6F57           40                         inc	ax
26887 6F58           8946         08            mov	8[bp],ax
26888                                           !BCC_EOS
26889                                           ! 3707         write_byte(ES, BX, inb(0x3ca)); BX++;
26890                                           ! Debug: list int = const $3CA (used reg = )
26891 6F5B           B8                   03CA  mov	ax,#$3CA
26892 6F5E           50                         push	ax
26893                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26894 6F5F           E8         0C3D            call	_inb
26895 6F62           44                         inc	sp
26896 6F63           44                         inc	sp
26897                                           ! Debug: list unsigned char = al+0 (used reg = )
26898 6F64           30E4                       xor	ah,ah
26899 6F66           50                         push	ax
26900                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26901 6F67           FF76         08            push	8[bp]
26902                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26903 6F6A           FF76         06            push	6[bp]
26904                                           ! Debug: func () void = write_byte+0 (used reg = )
26905 6F6D           E8         0BFF            call	_write_byte
26906 6F70           83C4                   06  add	sp,*6
26907                                           !BCC_EOS
26908                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26909 6F73           8B46         08            mov	ax,8[bp]
26910 6F76           40                         inc	ax
26911 6F77           8946         08            mov	8[bp],ax
26912                                           !BCC_EOS
26913                                           ! 3708         for(i=1;i<=4;i++){
26914                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
26915 6F7A           B8                   0001  mov	ax,*1
26916 6F7D           8946         FE            mov	-2[bp],ax
26917                                           !BCC_EOS
26918                                           !BCC_EOS
26919 6F80           EB           33            jmp .23D
26920                       00006F82            .23E:
26921                                           ! 3709             outb(0x3c4, i);
26922                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
26923 6F82           FF76         FE            push	-2[bp]
26924                                           ! Debug: list int = const $3C4 (used reg = )
26925 6F85           B8                   03C4  mov	ax,#$3C4
26926 6F88           50                         push	ax
26927                                           ! Debug: func () void = outb+0 (used reg = )
26928 6F89           E8         0C29            call	_outb
26929 6F8C           83C4                   04  add	sp,*4
26930                                           !BCC_EOS
26931                                           ! 3710             write_byte(ES, BX, inb(0x3c5)); BX++;
26932                                           ! Debug: list int = const $3C5 (used reg = )
26933 6F8F           B8                   03C5  mov	ax,#$3C5
26934 6F92           50                         push	ax
26935                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26936 6F93           E8         0C09            call	_inb
26937 6F96           44                         inc	sp
26938 6F97           44                         inc	sp
26939                                           ! Debug: list unsigned char = al+0 (used reg = )
26940 6F98           30E4                       xor	ah,ah
26941 6F9A           50                         push	ax
26942                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26943 6F9B           FF76         08            push	8[bp]
26944                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26945 6F9E           FF76         06            push	6[bp]
26946                                           ! Debug: func () void = write_byte+0 (used reg = )
26947 6FA1           E8         0BCB            call	_write_byte
26948 6FA4           83C4                   06  add	sp,*6
26949                                           !BCC_EOS
26950                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26951 6FA7           8B46         08            mov	ax,8[bp]
26952 6FAA           40                         inc	ax
26953 6FAB           8946         08            mov	8[bp],ax
26954                                           !BCC_EOS
26955                                           ! 3711         }
26956                                           ! 3712         outb(0x3c4, 0);
26957                       00006FAE            .23C:
26958                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
26959 6FAE           8B46         FE            mov	ax,-2[bp]
26960 6FB1           40                         inc	ax
26961 6FB2           8946         FE            mov	-2[bp],ax
26962                       00006FB5            .23D:
26963                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
26964 6FB5           8B46         FE            mov	ax,-2[bp]
26965 6FB8           3D                   0004  cmp	ax,*4
26966 6FBB           76           C5            jbe	.23E
26967                       00006FBD            .23F:
26968                       00006FBD            .23B:
26969                                           ! Debug: list int = const 0 (used reg = )
26970 6FBD           31C0                       xor	ax,ax
26971 6FBF           50                         push	ax
26972                                           ! Debug: list int = const $3C4 (used reg = )
26973 6FC0           B8                   03C4  mov	ax,#$3C4
26974 6FC3           50                         push	ax
26975                                           ! Debug: func () void = outb+0 (used reg = )
26976 6FC4           E8         0BEE            call	_outb
26977 6FC7           83C4                   04  add	sp,*4
26978                                           !BCC_EOS
26979                                           ! 3713         write_byte(ES, BX, inb(0x3c5)); BX++;
26980                                           ! Debug: list int = const $3C5 (used reg = )
26981 6FCA           B8                   03C5  mov	ax,#$3C5
26982 6FCD           50                         push	ax
26983                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26984 6FCE           E8         0BCE            call	_inb
26985 6FD1           44                         inc	sp
26986 6FD2           44                         inc	sp
26987                                           ! Debug: list unsigned char = al+0 (used reg = )
26988 6FD3           30E4                       xor	ah,ah
26989 6FD5           50                         push	ax
26990                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26991 6FD6           FF76         08            push	8[bp]
26992                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26993 6FD9           FF76         06            push	6[bp]
26994                                           ! Debug: func () void = write_byte+0 (used reg = )
26995 6FDC           E8         0B90            call	_write_byte
26996 6FDF           83C4                   06  add	sp,*6
26997                                           !BCC_EOS
26998                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26999 6FE2           8B46         08            mov	ax,8[bp]
27000 6FE5           40                         inc	ax
27001 6FE6           8946         08            mov	8[bp],ax
27002                                           !BCC_EOS
27003                                           ! 3714         for(i=0;i<=0x18;i++) {
27004                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27005 6FE9           31C0                       xor	ax,ax
27006 6FEB           8946         FE            mov	-2[bp],ax
27007                                           !BCC_EOS
27008                                           !BCC_EOS
27009 6FEE           EB           33            jmp .242
27010                       00006FF0            .243:
27011                                           ! 3715             outb(crtc_addr,i);
27012                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27013 6FF0           FF76         FE            push	-2[bp]
27014                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27015 6FF3           FF76         FA            push	-6[bp]
27016                                           ! Debug: func () void = outb+0 (used reg = )
27017 6FF6           E8         0BBC            call	_outb
27018 6FF9           83C4                   04  add	sp,*4
27019                                           !BCC_EOS
27020                                           ! 3716             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27021                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27022 6FFC           8B46         FA            mov	ax,-6[bp]
27023                                           ! Debug: list unsigned int = ax+1 (used reg = )
27024 6FFF           40                         inc	ax
27025 7000           50                         push	ax
27026                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27027 7001           E8         0B9B            call	_inb
27028 7004           44                         inc	sp
27029 7005           44                         inc	sp
27030                                           ! Debug: list unsigned char = al+0 (used reg = )
27031 7006           30E4                       xor	ah,ah
27032 7008           50                         push	ax
27033                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27034 7009           FF76         08            push	8[bp]
27035                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27036 700C           FF76         06            push	6[bp]
27037                                           ! Debug: func () void = write_byte+0 (used reg = )
27038 700F           E8         0B5D            call	_write_byte
27039 7012           83C4                   06  add	sp,*6
27040                                           !BCC_EOS
27041                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27042 7015           8B46         08            mov	ax,8[bp]
27043 7018           40                         inc	ax
27044 7019           8946         08            mov	8[bp],ax
27045                                           !BCC_EOS
27046                                           ! 3717         }
27047                                           ! 3718         for(i=0;i<=0x13;i++) {
27048                       0000701C            .241:
27049                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27050 701C           8B46         FE            mov	ax,-2[bp]
27051 701F           40                         inc	ax
27052 7020           8946         FE            mov	-2[bp],ax
27053                       00007023            .242:
27054                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27055 7023           8B46         FE            mov	ax,-2[bp]
27056 7026           3D                   0018  cmp	ax,*$18
27057 7029           76           C5            jbe	.243
27058                       0000702B            .244:
27059                       0000702B            .240:
27060                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27061 702B           31C0                       xor	ax,ax
27062 702D           8946         FE            mov	-2[bp],ax
27063                                           !BCC_EOS
27064                                           !BCC_EOS
27065 7030           EB           44            jmp .247
27066                       00007032            .248:
27067                                           ! 3719             inb(0x3da);
27068                                           ! Debug: list int = const $3DA (used reg = )
27069 7032           B8                   03DA  mov	ax,#$3DA
27070 7035           50                         push	ax
27071                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27072 7036           E8         0B66            call	_inb
27073 7039           44                         inc	sp
27074 703A           44                         inc	sp
27075                                           !BCC_EOS
27076                                           ! 3720             outb(0x3c0, i | (ar_index & 0x20));
27077                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27078 703B           8A46         F8            mov	al,-8[bp]
27079 703E           24                     20  and	al,*$20
27080                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27081                                           ! Debug: expression subtree swapping
27082 7040           30E4                       xor	ah,ah
27083 7042           0B46         FE            or	ax,-2[bp]
27084                                           ! Debug: list unsigned int = ax+0 (used reg = )
27085 7045           50                         push	ax
27086                                           ! Debug: list int = const $3C0 (used reg = )
27087 7046           B8                   03C0  mov	ax,#$3C0
27088 7049           50                         push	ax
27089                                           ! Debug: func () void = outb+0 (used reg = )
27090 704A           E8         0B68            call	_outb
27091 704D           83C4                   04  add	sp,*4
27092                                           !BCC_EOS
27093                                           ! 3721             write_byte(ES, BX, inb(0x3c1)); BX++;
27094                                           ! Debug: list int = const $3C1 (used reg = )
27095 7050           B8                   03C1  mov	ax,#$3C1
27096 7053           50                         push	ax
27097                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27098 7054           E8         0B48            call	_inb
27099 7057           44                         inc	sp
27100 7058           44                         inc	sp
27101                                           ! Debug: list unsigned char = al+0 (used reg = )
27102 7059           30E4                       xor	ah,ah
27103 705B           50                         push	ax
27104                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27105 705C           FF76         08            push	8[bp]
27106                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27107 705F           FF76         06            push	6[bp]
27108                                           ! Debug: func () void = write_byte+0 (used reg = )
27109 7062           E8         0B0A            call	_write_byte
27110 7065           83C4                   06  add	sp,*6
27111                                           !BCC_EOS
27112                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27113 7068           8B46         08            mov	ax,8[bp]
27114 706B           40                         inc	ax
27115 706C           8946         08            mov	8[bp],ax
27116                                           !BCC_EOS
27117                                           ! 3722         }
27118                                           ! 3723         inb(0x3da);
27119                       0000706F            .246:
27120                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27121 706F           8B46         FE            mov	ax,-2[bp]
27122 7072           40                         inc	ax
27123 7073           8946         FE            mov	-2[bp],ax
27124                       00007076            .247:
27125                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27126 7076           8B46         FE            mov	ax,-2[bp]
27127 7079           3D                   0013  cmp	ax,*$13
27128 707C           76           B4            jbe	.248
27129                       0000707E            .249:
27130                       0000707E            .245:
27131                                           ! Debug: list int = const $3DA (used reg = )
27132 707E           B8                   03DA  mov	ax,#$3DA
27133 7081           50                         push	ax
27134                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27135 7082           E8         0B1A            call	_inb
27136 7085           44                         inc	sp
27137 7086           44                         inc	sp
27138                                           !BCC_EOS
27139                                           ! 3724         for(i=0;i<=8;i
27140                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27141 7087           31C0                       xor	ax,ax
27142 7089           8946         FE            mov	-2[bp],ax
27143                                           !BCC_EOS
27144                                           !BCC_EOS
27145                                           ! 3724 ++) {
27146 708C           EB           33            jmp .24C
27147                       0000708E            .24D:
27148                                           ! 3725             outb(0x3ce,i);
27149                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27150 708E           FF76         FE            push	-2[bp]
27151                                           ! Debug: list int = const $3CE (used reg = )
27152 7091           B8                   03CE  mov	ax,#$3CE
27153 7094           50                         push	ax
27154                                           ! Debug: func () void = outb+0 (used reg = )
27155 7095           E8         0B1D            call	_outb
27156 7098           83C4                   04  add	sp,*4
27157                                           !BCC_EOS
27158                                           ! 3726             write_byte(ES, BX, inb(0x3cf)); BX++;
27159                                           ! Debug: list int = const $3CF (used reg = )
27160 709B           B8                   03CF  mov	ax,#$3CF
27161 709E           50                         push	ax
27162                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27163 709F           E8         0AFD            call	_inb
27164 70A2           44                         inc	sp
27165 70A3           44                         inc	sp
27166                                           ! Debug: list unsigned char = al+0 (used reg = )
27167 70A4           30E4                       xor	ah,ah
27168 70A6           50                         push	ax
27169                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27170 70A7           FF76         08            push	8[bp]
27171                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27172 70AA           FF76         06            push	6[bp]
27173                                           ! Debug: func () void = write_byte+0 (used reg = )
27174 70AD           E8         0ABF            call	_write_byte
27175 70B0           83C4                   06  add	sp,*6
27176                                           !BCC_EOS
27177                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27178 70B3           8B46         08            mov	ax,8[bp]
27179 70B6           40                         inc	ax
27180 70B7           8946         08            mov	8[bp],ax
27181                                           !BCC_EOS
27182                                           ! 3727         }
27183                                           ! 3728         write_word(ES, BX, crtc_addr); BX+= 2;
27184                       000070BA            .24B:
27185                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27186 70BA           8B46         FE            mov	ax,-2[bp]
27187 70BD           40                         inc	ax
27188 70BE           8946         FE            mov	-2[bp],ax
27189                       000070C1            .24C:
27190                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27191 70C1           8B46         FE            mov	ax,-2[bp]
27192 70C4           3D                   0008  cmp	ax,*8
27193 70C7           76           C5            jbe	.24D
27194                       000070C9            .24E:
27195                       000070C9            .24A:
27196                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27197 70C9           FF76         FA            push	-6[bp]
27198                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27199 70CC           FF76         08            push	8[bp]
27200                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27201 70CF           FF76         06            push	6[bp]
27202                                           ! Debug: func () void = write_word+0 (used reg = )
27203 70D2           E8         0AB2            call	_write_word
27204 70D5           83C4                   06  add	sp,*6
27205                                           !BCC_EOS
27206                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27207 70D8           8B46         08            mov	ax,8[bp]
27208 70DB           40                         inc	ax
27209 70DC           40                         inc	ax
27210 70DD           8946         08            mov	8[bp],ax
27211                                           !BCC_EOS
27212                                           ! 3729         write_byte(ES, BX, 0); BX++;
27213                                           ! Debug: list int = const 0 (used reg = )
27214 70E0           31C0                       xor	ax,ax
27215 70E2           50                         push	ax
27216                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27217 70E3           FF76         08            push	8[bp]
27218                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27219 70E6           FF76         06            push	6[bp]
27220                                           ! Debug: func () void = write_byte+0 (used reg = )
27221 70E9           E8         0A83            call	_write_byte
27222 70EC           83C4                   06  add	sp,*6
27223                                           !BCC_EOS
27224                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27225 70EF           8B46         08            mov	ax,8[bp]
27226 70F2           40                         inc	ax
27227 70F3           8946         08            mov	8[bp],ax
27228                                           !BCC_EOS
27229                                           ! 3730         write_byte(ES, BX, 0); BX++;
27230                                           ! Debug: list int = const 0 (used reg = )
27231 70F6           31C0                       xor	ax,ax
27232 70F8           50                         push	ax
27233                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27234 70F9           FF76         08            push	8[bp]
27235                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27236 70FC           FF76         06            push	6[bp]
27237                                           ! Debug: func () void = write_byte+0 (used reg = )
27238 70FF           E8         0A6D            call	_write_byte
27239 7102           83C4                   06  add	sp,*6
27240                                           !BCC_EOS
27241                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27242 7105           8B46         08            mov	ax,8[bp]
27243 7108           40                         inc	ax
27244 7109           8946         08            mov	8[bp],ax
27245                                           !BCC_EOS
27246                                           ! 3731         write_byte(ES, BX, 0); BX++;
27247                                           ! Debug: list int = const 0 (used reg = )
27248 710C           31C0                       xor	ax,ax
27249 710E           50                         push	ax
27250                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27251 710F           FF76         08            push	8[bp]
27252                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27253 7112           FF76         06            push	6[bp]
27254                                           ! Debug: func () void = write_byte+0 (used reg = )
27255 7115           E8         0A57            call	_write_byte
27256 7118           83C4                   06  add	sp,*6
27257                                           !BCC_EOS
27258                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27259 711B           8B46         08            mov	ax,8[bp]
27260 711E           40                         inc	ax
27261 711F           8946         08            mov	8[bp],ax
27262                                           !BCC_EOS
27263                                           ! 3732         write_byte(ES, BX, 0); BX++;
27264                                           ! Debug: list int = const 0 (used reg = )
27265 7122           31C0                       xor	ax,ax
27266 7124           50                         push	ax
27267                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27268 7125           FF76         08            push	8[bp]
27269                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27270 7128           FF76         06            push	6[bp]
27271                                           ! Debug: func () void = write_byte+0 (used reg = )
27272 712B           E8         0A41            call	_write_byte
27273 712E           83C4                   06  add	sp,*6
27274                                           !BCC_EOS
27275                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27276 7131           8B46         08            mov	ax,8[bp]
27277 7134           40                         inc	ax
27278 7135           8946         08            mov	8[bp],ax
27279                                           !BCC_EOS
27280                                           ! 3733     }
27281                                           ! 3734     if (CX & 2) {
27282                       00007138            .239:
27283                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27284 7138           8A46         04            mov	al,4[bp]
27285 713B           24                     02  and	al,*2
27286 713D           84C0                       test	al,al
27287 713F   7503    E9         0270            beq 	.24F
27288                       00007144            .250:
27289                                           ! 3735         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27290                                           ! Debug: list int = const $49 (used reg = )
27291 7144           B8                   0049  mov	ax,*$49
27292 7147           50                         push	ax
27293                                           ! Debug: list int = const $40 (used reg = )
27294 7148           B8                   0040  mov	ax,*$40
27295 714B           50                         push	ax
27296                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27297 714C           E8         09FA            call	_read_byte
27298 714F           83C4                   04  add	sp,*4
27299                                           ! Debug: list unsigned char = al+0 (used reg = )
27300 7152           30E4                       xor	ah,ah
27301 7154           50                         push	ax
27302                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27303 7155           FF76         08            push	8[bp]
27304                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27305 7158           FF76         06            push	6[bp]
27306                                           ! Debug: func () void = write_byte+0 (used reg = )
27307 715B           E8         0A11            call	_write_byte
27308 715E           83C4                   06  add	sp,*6
27309                                           !BCC_EOS
27310                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27311 7161           8B46         08            mov	ax,8[bp]
27312 7164           40                         inc	ax
27313 7165           8946         08            mov	8[bp],ax
27314                                           !BCC_EOS
27315                                           ! 3736         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27316                                           ! Debug: list int = const $4A (used reg = )
27317 7168           B8                   004A  mov	ax,*$4A
27318 716B           50                         push	ax
27319                                           ! Debug: list int = const $40 (used reg = )
27320 716C           B8                   0040  mov	ax,*$40
27321 716F           50                         push	ax
27322                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27323 7170           E8         09E9            call	_read_word
27324 7173           83C4                   04  add	sp,*4
27325                                           ! Debug: list unsigned short = ax+0 (used reg = )
27326 7176           50                         push	ax
27327                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27328 7177           FF76         08            push	8[bp]
27329                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27330 717A           FF76         06            push	6[bp]
27331                                           ! Debug: func () void = write_word+0 (used reg = )
27332 717D           E8         0A07            call	_write_word
27333 7180           83C4                   06  add	sp,*6
27334                                           !BCC_EOS
27335                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27336 7183           8B46         08            mov	ax,8[bp]
27337 7186           40                         inc	ax
27338 7187           40                         inc	ax
27339 7188           8946         08            mov	8[bp],ax
27340                                           !BCC_EOS
27341                                           ! 3737         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27342                                           ! Debug: list int = const $4C (used reg = )
27343 718B           B8                   004C  mov	ax,*$4C
27344 718E           50                         push	ax
27345                                           ! Debug: list int = const $40 (used reg = )
27346 718F           B8                   0040  mov	ax,*$40
27347 7192           50                         push	ax
27348                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27349 7193           E8         09C6            call	_read_word
27350 7196           83C4                   04  add	sp,*4
27351                                           ! Debug: list unsigned short = ax+0 (used reg = )
27352 7199           50                         push	ax
27353                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27354 719A           FF76         08            push	8[bp]
27355                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27356 719D           FF76         06            push	6[bp]
27357                                           ! Debug: func () void = write_word+0 (used reg = )
27358 71A0           E8         09E4            call	_write_word
27359 71A3           83C4                   06  add	sp,*6
27360                                           !BCC_EOS
27361                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27362 71A6           8B46         08            mov	ax,8[bp]
27363 71A9           40                         inc	ax
27364 71AA           40                         inc	ax
27365 71AB           8946         08            mov	8[bp],ax
27366                                           !BCC_EOS
27367                                           ! 3738         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27368                                           ! Debug: list int = const $63 (used reg = )
27369 71AE           B8                   0063  mov	ax,*$63
27370 71B1           50                         push	ax
27371                                           ! Debug: list int = const $40 (used reg = )
27372 71B2           B8                   0040  mov	ax,*$40
27373 71B5           50                         push	ax
27374                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27375 71B6           E8         09A3            call	_read_word
27376 71B9           83C4                   04  add	sp,*4
27377                                           ! Debug: list unsigned short = ax+0 (used reg = )
27378 71BC           50                         push	ax
27379                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27380 71BD           FF76         08            push	8[bp]
27381                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27382 71C0           FF76         06            push	6[bp]
27383                                           ! Debug: func () void = write_word+0 (used reg = )
27384 71C3           E8         09C1            call	_write_word
27385 71C6           83C4                   06  add	sp,*6
27386                                           !BCC_EOS
27387                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27388 71C9           8B46         08            mov	ax,8[bp]
27389 71CC           40                         inc	ax
27390 71CD           40                         inc	ax
27391 71CE           8946         08            mov	8[bp],ax
27392                                           !BCC_EOS
27393                                           ! 3739         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27394                                           ! Debug: list int = const $84 (used reg = )
27395 71D1           B8                   0084  mov	ax,#$84
27396 71D4           50                         push	ax
27397                                           ! Debug: list int = const $40 (used reg = )
27398 71D5           B8                   0040  mov	ax,*$40
27399 71D8           50                         push	ax
27400                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27401 71D9           E8         096D            call	_read_byte
27402 71DC           83C4                   04  add	sp,*4
27403                                           ! Debug: list unsigned char = al+0 (used reg = )
27404 71DF           30E4                       xor	ah,ah
27405 71E1           50                         push	ax
27406                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27407 71E2           FF76         08            push	8[bp]
27408                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27409 71E5           FF76         06            push	6[bp]
27410                                           ! Debug: func () void = write_byte+0 (used reg = )
27411 71E8           E8         0984            call	_write_byte
27412 71EB           83C4                   06  add	sp,*6
27413                                           !BCC_EOS
27414                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27415 71EE           8B46         08            mov	ax,8[bp]
27416 71F1           40                         inc	ax
27417 71F2           8946         08            mov	8[bp],ax
27418                                           !BCC_EOS
27419                                           ! 3740         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27420                                           ! Debug: list int = const $85 (used reg = )
27421 71F5           B8                   0085  mov	ax,#$85
27422 71F8           50                         push	ax
27423                                           ! Debug: list int = const $40 (used reg = )
27424 71F9           B8                   0040  mov	ax,*$40
27425 71FC           50                         push	ax
27426                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27427 71FD           E8         095C            call	_read_word
27428 7200           83C4                   04  add	sp,*4
27429                                           ! Debug: list unsigned short = ax+0 (used reg = )
27430 7203           50                         push	ax
27431                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27432 7204           FF76         08            push	8[bp]
27433                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27434 7207           FF76         06            push	6[bp]
27435                                           ! Debug: func () void = write_word+0 (used reg = )
27436 720A           E8         097A            call	_write_word
27437 720D           83C4                   06  add	sp,*6
27438                                           !BCC_EOS
27439                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27440 7210           8B46         08            mov	ax,8[bp]
27441 7213           40                         inc	ax
27442 7214           40                         inc	ax
27443 7215           8946         08            mov	8[bp],ax
27444                                           !BCC_EOS
27445                                           ! 3741         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27446                                           ! Debug: list int = const $87 (used reg = )
27447 7218           B8                   0087  mov	ax,#$87
27448 721B           50                         push	ax
27449                                           ! Debug: list int = const $40 (used reg = )
27450 721C           B8                   0040  mov	ax,*$40
27451 721F           50                         push	ax
27452                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27453 7220           E8         0926            call	_read_byte
27454 7223           83C4                   04  add	sp,*4
27455                                           ! Debug: list unsigned char = al+0 (used reg = )
27456 7226           30E4                       xor	ah,ah
27457 7228           50                         push	ax
27458                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27459 7229           FF76         08            push	8[bp]
27460                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27461 722C           FF76         06            push	6[bp]
27462                                           ! Debug: func () void = write_byte+0 (used reg = )
27463 722F           E8         093D            call	_write_byte
27464 7232           83C4                   06  add	sp,*6
27465                                           !BCC_EOS
27466                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27467 7235           8B46         08            mov	ax,8[bp]
27468 7238           40                         inc	ax
27469 7239           8946         08            mov	8[bp],ax
27470                                           !BCC_EOS
27471                                           ! 3742         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27472                                           ! Debug: list int = const $88 (used reg = )
27473 723C           B8                   0088  mov	ax,#$88
27474 723F           50                         push	ax
27475                                           ! Debug: list int = const $40 (used reg = )
27476 7240           B8                   0040  mov	ax,*$40
27477 7243           50                         push	ax
27478                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27479 7244           E8         0902            call	_read_byte
27480 7247           83C4                   04  add	sp,*4
27481                                           ! Debug: list unsigned char = al+0 (used reg = )
27482 724A           30E4                       xor	ah,ah
27483 724C           50                         push	ax
27484                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27485 724D           FF76         08            push	8[bp]
27486                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27487 7250           FF76         06            push	6[bp]
27488                                           ! Debug: func () void = write_byte+0 (used reg = )
27489 7253           E8         0919            call	_write_byte
27490 7256           83C4                   06  add	sp,*6
27491                                           !BCC_EOS
27492                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27493 7259           8B46         08            mov	ax,8[bp]
27494 725C           40                         inc	ax
27495 725D           8946         08            mov	8[bp],ax
27496                                           !BCC_EOS
27497                                           ! 3743         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27498                                           ! Debug: list int = const $89 (used reg = )
27499 7260           B8                   0089  mov	ax,#$89
27500 7263           50                         push	ax
27501                                           ! Debug: list int = const $40 (used reg = )
27502 7264           B8                   0040  mov	ax,*$40
27503 7267           50                         push	ax
27504                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27505 7268           E8         08DE            call	_read_byte
27506 726B           83C4                   04  add	sp,*4
27507                                           ! Debug: list unsigned char = al+0 (used reg = )
27508 726E           30E4                       xor	ah,ah
27509 7270           50                         push	ax
27510                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27511 7271           FF76         08            push	8[bp]
27512                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27513 7274           FF76         06            push	6[bp]
27514                                           ! Debug: func () void = write_byte+0 (used reg = )
27515 7277           E8         08F5            call	_write_byte
27516 727A           83C4                   06  add	sp,*6
27517                                           !BCC_EOS
27518                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27519 727D           8B46         08            mov	ax,8[bp]
27520 7280           40                         inc	ax
27521 7281           8946         08            mov	8[bp],ax
27522                                           !BCC_EOS
27523                                           ! 3744         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27524                                           ! Debug: list int = const $60 (used reg = )
27525 7284           B8                   0060  mov	ax,*$60
27526 7287           50                         push	ax
27527                                           ! Debug: list int = const $40 (used reg = )
27528 7288           B8                   0040  mov	ax,*$40
27529 728B           50                         push	ax
27530                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27531 728C           E8         08CD            call	_read_word
27532 728F           83C4                   04  add	sp,*4
27533                                           ! Debug: list unsigned short = ax+0 (used reg = )
27534 7292           50                         push	ax
27535                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27536 7293           FF76         08            push	8[bp]
27537                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27538 7296           FF76         06            push	6[bp]
27539                                           ! Debug: func () void = write_word+0 (used reg = )
27540 7299           E8         08EB            call	_write_word
27541 729C           83C4                   06  add	sp,*6
27542                                           !BCC_EOS
27543                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27544 729F           8B46         08            mov	ax,8[bp]
27545 72A2           40                         inc	ax
27546 72A3           40                         inc	ax
27547 72A4           8946         08            mov	8[bp],ax
27548                                           !BCC_EOS
27549                                           ! 3745         for(i=0;i<8;i++) {
27550                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27551 72A7           31C0                       xor	ax,ax
27552 72A9           8946         FE            mov	-2[bp],ax
27553                                           !BCC_EOS
27554                                           !BCC_EOS
27555 72AC           EB           2F            jmp .253
27556                       000072AE            .254:
27557                                           ! 3746             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
27558                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
27559                                           ! Debug: expression subtree swapping
27560 72AE           8B46         FE            mov	ax,-2[bp]
27561 72B1           D1E0                       shl	ax,*1
27562                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
27563                                           ! Debug: expression subtree swapping
27564                                           ! Debug: list unsigned int = ax+$50 (used reg = )
27565 72B3           05                   0050  add	ax,*$50
27566 72B6           50                         push	ax
27567                                           ! Debug: list int = const $40 (used reg = )
27568 72B7           B8                   0040  mov	ax,*$40
27569 72BA           50                         push	ax
27570                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27571 72BB           E8         089E            call	_read_word
27572 72BE           83C4                   04  add	sp,*4
27573                                           ! Debug: list unsigned short = ax+0 (used reg = )
27574 72C1           50                         push	ax
27575                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27576 72C2           FF76         08            push	8[bp]
27577                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27578 72C5           FF76         06            push	6[bp]
27579                                           ! Debug: func () void = write_word+0 (used reg = )
27580 72C8           E8         08BC            call	_write_word
27581 72CB           83C4                   06  add	sp,*6
27582                                           !BCC_EOS
27583                                           ! 3747             BX += 2;
27584                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27585 72CE           8B46         08            mov	ax,8[bp]
27586 72D1           40                         inc	ax
27587 72D2           40                         inc	ax
27588 72D3           8946         08            mov	8[bp],ax
27589                                           !BCC_EOS
27590                                           ! 3748         }
27591                                           ! 3749         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
27592                       000072D6            .252:
27593                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27594 72D6           8B46         FE            mov	ax,-2[bp]
27595 72D9           40                         inc	ax
27596 72DA           8946         FE            mov	-2[bp],ax
27597                       000072DD            .253:
27598                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27599 72DD           8B46         FE            mov	ax,-2[bp]
27600 72E0           3D                   0008  cmp	ax,*8
27601 72E3           72           C9            jb 	.254
27602                       000072E5            .255:
27603                       000072E5            .251:
27604                                           ! Debug: list int = const $4E (used reg = )
27605 72E5           B8                   004E  mov	ax,*$4E
27606 72E8           50                         push	ax
27607                                           ! Debug: list int = const $40 (used reg = )
27608 72E9           B8                   0040  mov	ax,*$40
27609 72EC           50                         push	ax
27610                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27611 72ED           E8         086C            call	_read_word
27612 72F0           83C4                   04  add	sp,*4
27613                                           ! Debug: list unsigned short = ax+0 (used reg = )
27614 72F3           50                         push	ax
27615                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27616 72F4           FF76         08            push	8[bp]
27617                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27618 72F7           FF76         06            push	6[bp]
27619                                           ! Debug: func () void = write_word+0 (used reg = )
27620 72FA           E8         088A            call	_write_word
27621 72FD           83C4                   06  add	sp,*6
27622                                           !BCC_EOS
27623                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27624 7300           8B46         08            mov	ax,8[bp]
27625 7303           40                         inc	ax
27626 7304           40                         inc	ax
27627 7305           8946         08            mov	8[bp],ax
27628                                           !BCC_EOS
27629                                           ! 3750         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
27630                                           ! Debug: list int = const $62 (used reg = )
27631 7308           B8                   0062  mov	ax,*$62
27632 730B           50                         push	ax
27633                                           ! Debug: list int = const $40 (used reg = )
27634 730C           B8                   0040  mov	ax,*$40
27635 730F           50                         push	ax
27636                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27637 7310           E8         0836            call	_read_byte
27638 7313           83C4                   04  add	sp,*4
27639                                           ! Debug: list unsigned char = al+0 (used reg = )
27640 7316           30E4                       xor	ah,ah
27641 7318           50                         push	ax
27642                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27643 7319           FF76         08            push	8[bp]
27644                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27645 731C           FF76         06            push	6[bp]
27646                                           ! Debug: func () void = write_byte+0 (used reg = )
27647 731F           E8         084D            call	_write_byte
27648 7322           83C4                   06  add	sp,*6
27649                                           !BCC_EOS
27650                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27651 7325           8B46         08            mov	ax,8[bp]
27652 7328           40                         inc	ax
27653 7329           8946         08            mov	8[bp],ax
27654                                           !BCC_EOS
27655                                           ! 3751         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
27656                                           ! Debug: list int = const $7C (used reg = )
27657 732C           B8                   007C  mov	ax,*$7C
27658 732F           50                         push	ax
27659                                           ! Debug: list int = const 0 (used reg = )
27660 7330           31C0                       xor	ax,ax
27661 7332           50                         push	ax
27662                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27663 7333           E8         0826            call	_read_word
27664 7336           83C4                   04  add	sp,*4
27665                                           ! Debug: list unsigned short = ax+0 (used reg = )
27666 7339           50                         push	ax
27667                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27668 733A           FF76         08            push	8[bp]
27669                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27670 733D           FF76         06            push	6[bp]
27671                                           ! Debug: func () void = write_word+0 (used reg = )
27672 7340           E8         0844            call	_write_word
27673 7343           83C4                   06  add	sp,*6
27674                                           !BCC_EOS
27675                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27676 7346           8B46         08            mov	ax,8[bp]
27677 7349           40                         inc	ax
27678 734A           40                         inc	ax
27679 734B           8946         08            mov	8[bp],ax
27680                                           !BCC_EOS
27681                                           ! 3752         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
27682                                           ! Debug: list int = const $7E (used reg = )
27683 734E           B8                   007E  mov	ax,*$7E
27684 7351           50                         push	ax
27685                                           ! Debug: list int = const 0 (used reg = )
27686 7352           31C0                       xor	ax,ax
27687 7354           50                         push	ax
27688                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27689 7355           E8         0804            call	_read_word
27690 7358           83C4                   04  add	sp,*4
27691                                           ! Debug: list unsigned short = ax+0 (used reg = )
27692 735B           50                         push	ax
27693                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27694 735C           FF76         08            push	8[bp]
27695                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27696 735F           FF76         06            push	6[bp]
27697                                           ! Debug: func () void = write_word+0 (used reg = )
27698 7362           E8         0822            call	_write_word
27699 7365           83C4                   06  add	sp,*6
27700                                           !BCC_EOS
27701                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27702 7368           8B46         08            mov	ax,8[bp]
27703 736B           40                         inc	ax
27704 736C           40                         inc	ax
27705 736D           8946         08            mov	8[bp],ax
27706                                           !BCC_EOS
27707                                           ! 3753         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
27708                                           ! Debug: list int = const $10C (used reg = )
27709 7370           B8                   010C  mov	ax,#$10C
27710 7373           50                         push	ax
27711                                           ! Debug: list int = const 0 (used reg = )
27712 7374           31C0                       xor	ax,ax
27713 7376           50                         push	ax
27714                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27715 7377           E8         07E2            call	_read_word
27716 737A           83C4                   04  add	sp,*4
27717                                           ! Debug: list unsigned short = ax+0 (used reg = )
27718 737D           50                         push	ax
27719                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27720 737E           FF76         08            push	8[bp]
27721                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27722 7381           FF76         06            push	6[bp]
27723                                           ! Debug: func () void = write_word+0 (used reg = )
27724 7384           E8         0800            call	_write_word
27725 7387           83C4                   06  add	sp,*6
27726                                           !BCC_EOS
27727                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27728 738A           8B46         08            mov	ax,8[bp]
27729 738D           40                         inc	ax
27730 738E           40                         inc	ax
27731 738F           8946         08            mov	8[bp],ax
27732                                           !BCC_EOS
27733                                           ! 3754         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
27734                                           ! Debug: list int = const $10E (used reg = )
27735 7392           B8                   010E  mov	ax,#$10E
27736 7395           50                         push	ax
27737                                           ! Debug: list int = const 0 (used reg = )
27738 7396           31C0                       xor	ax,ax
27739 7398           50                         push	ax
27740                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27741 7399           E8         07C0            call	_read_word
27742 739C           83C4                   04  add	sp,*4
27743                                           ! Debug: list unsigned short = ax+0 (used reg = )
27744 739F           50                         push	ax
27745                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27746 73A0           FF76         08            push	8[bp]
27747                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27748 73A3           FF76         06            push	6[bp]
27749                                           ! Debug: func () void = write_word+0 (used reg = )
27750 73A6           E8         07DE            call	_write_word
27751 73A9           83C4                   06  add	sp,*6
27752                                           !BCC_EOS
27753                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27754 73AC           8B46         08            mov	ax,8[bp]
27755 73AF           40                         inc	ax
27756 73B0           40                         inc	ax
27757 73B1           8946         08            mov	8[bp],ax
27758                                           !BCC_EOS
27759                                           ! 3755     }
27760                                           ! 3756     if (CX & 4) {
27761                       000073B4            .24F:
27762                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
27763 73B4           8A46         04            mov	al,4[bp]
27764 73B7           24                     04  and	al,*4
27765 73B9           84C0                       test	al,al
27766 73BB   7503    E9         00B5            beq 	.256
27767                       000073C0            .257:
27768                                           ! 3757         write_byte(ES, BX, inb(0x3c7)); BX++;
27769                                           ! Debug: list int = const $3C7 (used reg = )
27770 73C0           B8                   03C7  mov	ax,#$3C7
27771 73C3           50                         push	ax
27772                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27773 73C4           E8         07D8            call	_inb
27774 73C7           44                         inc	sp
27775 73C8           44                         inc	sp
27776                                           ! Debug: list unsigned char = al+0 (used reg = )
27777 73C9           30E4                       xor	ah,ah
27778 73CB           50                         push	ax
27779                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27780 73CC           FF76         08            push	8[bp]
27781                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27782 73CF           FF76         06            push	6[bp]
27783                                           ! Debug: func () void = write_byte+0 (used reg = )
27784 73D2           E8         079A            call	_write_byte
27785 73D5           83C4                   06  add	sp,*6
27786                                           !BCC_EOS
27787                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27788 73D8           8B46         08            mov	ax,8[bp]
27789 73DB           40                         inc	ax
27790 73DC           8946         08            mov	8[bp],ax
27791                                           !BCC_EOS
27792                                           ! 3758         write_byte(ES, BX, inb(0x3c8)); BX++;
27793                                           ! Debug: list int = const $3C8 (used reg = )
27794 73DF           B8                   03C8  mov	ax,#$3C8
27795 73E2           50                         push	ax
27796                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27797 73E3           E8         07B9            call	_inb
27798 73E6           44                         inc	sp
27799 73E7           44                         inc	sp
27800                                           ! Debug: list unsigned char = al+0 (used reg = )
27801 73E8           30E4                       xor	ah,ah
27802 73EA           50                         push	ax
27803                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27804 73EB           FF76         08            push	8[bp]
27805                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27806 73EE           FF76         06            push	6[bp]
27807                                           ! Debug: func () void = write_byte+0 (used reg = )
27808 73F1           E8         077B            call	_write_byte
27809 73F4           83C4                   06  add	sp,*6
27810                                           !BCC_EOS
27811                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27812 73F7           8B46         08            mov	ax,8[bp]
27813 73FA           40                         inc	ax
27814 73FB           8946         08            mov	8[bp],ax
27815                                           !BCC_EOS
27816                                           ! 3759         write_byte(ES, BX, inb(0x3c6)); BX++;
27817                                           ! Debug: list int = const $3C6 (used reg = )
27818 73FE           B8                   03C6  mov	ax,#$3C6
27819 7401           50                         push	ax
27820                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27821 7402           E8         079A            call	_inb
27822 7405           44                         inc	sp
27823 7406           44                         inc	sp
27824                                           ! Debug: list unsigned char = al+0 (used reg = )
27825 7407           30E4                       xor	ah,ah
27826 7409           50                         push	ax
27827                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27828 740A           FF76         08            push	8[bp]
27829                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27830 740D           FF76         06            push	6[bp]
27831                                           ! Debug: func () void = write_byte+0 (used reg = )
27832 7410           E8         075C            call	_write_byte
27833 7413           83C4                   06  add	sp,*6
27834                                           !BCC_EOS
27835                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27836 7416           8B46         08            mov	ax,8[bp]
27837 7419           40                         inc	ax
27838 741A           8946         08            mov	8[bp],ax
27839                                           !BCC_EOS
27840                                           ! 3760         outb(0x3c8,0x00);
27841                                           ! Debug: list int = const 0 (used reg = )
27842 741D           31C0                       xor	ax,ax
27843 741F           50                         push	ax
27844                                           ! Debug: list int = const $3C8 (used reg = )
27845 7420           B8                   03C8  mov	ax,#$3C8
27846 7423           50                         push	ax
27847                                           ! Debug: func () void = outb+0 (used reg = )
27848 7424           E8         078E            call	_outb
27849 7427           83C4                   04  add	sp,*4
27850                                           !BCC_EOS
27851                                           ! 3761         for(i=0;i<256*3;i++) {
27852                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27853 742A           31C0                       xor	ax,ax
27854 742C           8946         FE            mov	-2[bp],ax
27855                                           !BCC_EOS
27856                                           !BCC_EOS
27857 742F           EB           26            jmp .25A
27858                       00007431            .25B:
27859                                           ! 3762             write_byte(ES, BX, inb(0x3c9)); BX++;
27860                                           ! Debug: list int = const $3C9 (used reg = )
27861 7431           B8                   03C9  mov	ax,#$3C9
27862 7434           50                         push	ax
27863                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27864 7435           E8         0767            call	_inb
27865 7438           44                         inc	sp
27866 7439           44                         inc	sp
27867                                           ! Debug: list unsigned char = al+0 (used reg = )
27868 743A           30E4                       xor	ah,ah
27869 743C           50                         push	ax
27870                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27871 743D           FF76         08            push	8[bp]
27872                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27873 7440           FF76         06            push	6[bp]
27874                                           ! Debug: func () void = write_byte+0 (used reg = )
27875 7443           E8         0729            call	_write_byte
27876 7446           83C4                   06  add	sp,*6
27877                                           !BCC_EOS
27878                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27879 7449           8B46         08            mov	ax,8[bp]
27880 744C           40                         inc	ax
27881 744D           8946         08            mov	8[bp],ax
27882                                           !BCC_EOS
27883                                           ! 3763         }
27884                                           ! 3764         write_byte(ES, BX, 0); BX++;
27885                       00007450            .259:
27886                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27887 7450           8B46         FE            mov	ax,-2[bp]
27888 7453           40                         inc	ax
27889 7454           8946         FE            mov	-2[bp],ax
27890                       00007457            .25A:
27891                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
27892 7457           8B46         FE            mov	ax,-2[bp]
27893 745A           3D                   0300  cmp	ax,#$300
27894 745D           72           D2            jb 	.25B
27895                       0000745F            .25C:
27896                       0000745F            .258:
27897                                           ! Debug: list int = const 0 (used reg = )
27898 745F           31C0                       xor	ax,ax
27899 7461           50                         push	ax
27900                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27901 7462           FF76         08            push	8[bp]
27902                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27903 7465           FF76         06            push	6[bp]
27904                                           ! Debug: func () void = write_byte+0 (used reg = )
27905 7468           E8         0704            call	_write_byte
27906 746B           83C4                   06  add	sp,*6
27907                                           !BCC_EOS
27908                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27909 746E           8B46         08            mov	ax,8[bp]
27910 7471           40                         inc	ax
27911 7472           8946         08            mov	8[bp],ax
27912                                           !BCC_EOS
27913                                           ! 3765     }
27914                                           ! 3766     return BX;
27915                       00007475            .256:
27916 7475           8B46         08            mov	ax,8[bp]
27917 7478           89EC                       mov	sp,bp
27918 747A           5D                         pop	bp
27919 747B           C3                         ret
27920                                           !BCC_EOS
27921                                           ! 3767 }
27922                                           ! 3768 static Bit16u biosfn_restore_video_state (CX,ES,BX)
27923                                           ! 3769      Bit16u CX;Bit16u ES;Bit16u BX;
27924                       0000747C            _biosfn_restore_video_state:
27925                                           !BCC_EOS
27926                                           !BCC_EOS
27927                                           !BCC_EOS
27928                                           ! 3770 {
27929                                           ! 3771     Bit16u i, crtc_addr, v, addr1, ar_index;
27930                                           !BCC_EOS
27931                                           ! 3772     if (CX & 1) {
27932 747C           55                         push	bp
27933 747D           89E5                       mov	bp,sp
27934 747F           83C4                   F6  add	sp,*-$A
27935                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
27936 7482           8A46         04            mov	al,4[bp]
27937 7485           24                     01  and	al,*1
27938 7487           84C0                       test	al,al
27939 7489   7503    E9         02AA            beq 	.25D
27940                       0000748E            .25E:
27941                                           ! 3773         inb(0x3da);
27942                                           ! Debug: list int = const $3DA (used reg = )
27943 748E           B8                   03DA  mov	ax,#$3DA
27944 7491           50                         push	ax
27945                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27946 7492           E8         070A            call	_inb
27947 7495           44                         inc	sp
27948 7496           44                         inc	sp
27949                                           !BCC_EOS
27950                                           ! 3774         crtc_addr = read_word(ES, BX + 0x40);
27951                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
27952 7497           8B46         08            mov	ax,8[bp]
27953                                           ! Debug: list unsigned int = ax+$40 (used reg = )
27954 749A           05                   0040  add	ax,*$40
27955 749D           50                         push	ax
27956                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27957 749E           FF76         06            push	6[bp]
27958                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27959 74A1           E8         06B8            call	_read_word
27960 74A4           83C4                   04  add	sp,*4
27961                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
27962 74A7           8946         FC            mov	-4[bp],ax
27963                                           !BCC_EOS
27964                                           ! 3775         addr1 = BX;
27965                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
27966 74AA           8B46         08            mov	ax,8[bp]
27967 74AD           8946         F8            mov	-8[bp],ax
27968                                           !BCC_EOS
27969                                           ! 3776         BX += 5;
27970                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
27971 74B0           8B46         08            mov	ax,8[bp]
27972 74B3           05                   0005  add	ax,*5
27973 74B6           8946         08            mov	8[bp],ax
27974                                           !BCC_EOS
27975                                           ! 3777         for(i=1;i<=4;i++){
27976                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
27977 74B9           B8                   0001  mov	ax,*1
27978 74BC           8946         FE            mov	-2[bp],ax
27979                                           !BCC_EOS
27980                                           !BCC_EOS
27981 74BF           EB           34            jmp .261
27982                       000074C1            .262:
27983                                           ! 3778             outb(0x3c4, i);
27984                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
27985 74C1           FF76         FE            push	-2[bp]
27986                                           ! Debug: list int = const $3C4 (used reg = )
27987 74C4           B8                   03C4  mov	ax,#$3C4
27988 74C7           50                         push	ax
27989                                           ! Debug: func () void = outb+0 (used reg = )
27990 74C8           E8         06EA            call	_outb
27991 74CB           83C4                   04  add	sp,*4
27992                                           !BCC_EOS
27993                                           ! 3779             outb(0x3c5, re
27994                                           ! 3779 ad_byte(ES, BX)); BX++;
27995                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27996 74CE           FF76         08            push	8[bp]
27997                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27998 74D1           FF76         06            push	6[bp]
27999                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28000 74D4           E8         0672            call	_read_byte
28001 74D7           83C4                   04  add	sp,*4
28002                                           ! Debug: list unsigned char = al+0 (used reg = )
28003 74DA           30E4                       xor	ah,ah
28004 74DC           50                         push	ax
28005                                           ! Debug: list int = const $3C5 (used reg = )
28006 74DD           B8                   03C5  mov	ax,#$3C5
28007 74E0           50                         push	ax
28008                                           ! Debug: func () void = outb+0 (used reg = )
28009 74E1           E8         06D1            call	_outb
28010 74E4           83C4                   04  add	sp,*4
28011                                           !BCC_EOS
28012                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28013 74E7           8B46         08            mov	ax,8[bp]
28014 74EA           40                         inc	ax
28015 74EB           8946         08            mov	8[bp],ax
28016                                           !BCC_EOS
28017                                           ! 3780         }
28018                                           ! 3781         outb(0x3c4, 0);
28019                       000074EE            .260:
28020                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28021 74EE           8B46         FE            mov	ax,-2[bp]
28022 74F1           40                         inc	ax
28023 74F2           8946         FE            mov	-2[bp],ax
28024                       000074F5            .261:
28025                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28026 74F5           8B46         FE            mov	ax,-2[bp]
28027 74F8           3D                   0004  cmp	ax,*4
28028 74FB           76           C4            jbe	.262
28029                       000074FD            .263:
28030                       000074FD            .25F:
28031                                           ! Debug: list int = const 0 (used reg = )
28032 74FD           31C0                       xor	ax,ax
28033 74FF           50                         push	ax
28034                                           ! Debug: list int = const $3C4 (used reg = )
28035 7500           B8                   03C4  mov	ax,#$3C4
28036 7503           50                         push	ax
28037                                           ! Debug: func () void = outb+0 (used reg = )
28038 7504           E8         06AE            call	_outb
28039 7507           83C4                   04  add	sp,*4
28040                                           !BCC_EOS
28041                                           ! 3782         outb(0x3c5, read_byte(ES, BX)); BX++;
28042                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28043 750A           FF76         08            push	8[bp]
28044                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28045 750D           FF76         06            push	6[bp]
28046                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28047 7510           E8         0636            call	_read_byte
28048 7513           83C4                   04  add	sp,*4
28049                                           ! Debug: list unsigned char = al+0 (used reg = )
28050 7516           30E4                       xor	ah,ah
28051 7518           50                         push	ax
28052                                           ! Debug: list int = const $3C5 (used reg = )
28053 7519           B8                   03C5  mov	ax,#$3C5
28054 751C           50                         push	ax
28055                                           ! Debug: func () void = outb+0 (used reg = )
28056 751D           E8         0695            call	_outb
28057 7520           83C4                   04  add	sp,*4
28058                                           !BCC_EOS
28059                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28060 7523           8B46         08            mov	ax,8[bp]
28061 7526           40                         inc	ax
28062 7527           8946         08            mov	8[bp],ax
28063                                           !BCC_EOS
28064                                           ! 3783         outw(crtc_addr,0x0011);
28065                                           ! Debug: list int = const $11 (used reg = )
28066 752A           B8                   0011  mov	ax,*$11
28067 752D           50                         push	ax
28068                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28069 752E           FF76         FC            push	-4[bp]
28070                                           ! Debug: func () void = outw+0 (used reg = )
28071 7531           E8         0691            call	_outw
28072 7534           83C4                   04  add	sp,*4
28073                                           !BCC_EOS
28074                                           ! 3784         for(i=0;i<=0x18;i++) {
28075                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28076 7537           31C0                       xor	ax,ax
28077 7539           8946         FE            mov	-2[bp],ax
28078                                           !BCC_EOS
28079                                           !BCC_EOS
28080 753C           EB           3C            jmp .266
28081                       0000753E            .267:
28082                                           ! 3785             if (i != 0x11) {
28083                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28084 753E           8B46         FE            mov	ax,-2[bp]
28085 7541           3D                   0011  cmp	ax,*$11
28086 7544           74           26            je  	.268
28087                       00007546            .269:
28088                                           ! 3786                 outb(crtc_addr,i);
28089                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28090 7546           FF76         FE            push	-2[bp]
28091                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28092 7549           FF76         FC            push	-4[bp]
28093                                           ! Debug: func () void = outb+0 (used reg = )
28094 754C           E8         0666            call	_outb
28095 754F           83C4                   04  add	sp,*4
28096                                           !BCC_EOS
28097                                           ! 3787                 outb(crtc_addr+1, read_byte(ES, BX));
28098                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28099 7552           FF76         08            push	8[bp]
28100                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28101 7555           FF76         06            push	6[bp]
28102                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28103 7558           E8         05EE            call	_read_byte
28104 755B           83C4                   04  add	sp,*4
28105                                           ! Debug: list unsigned char = al+0 (used reg = )
28106 755E           30E4                       xor	ah,ah
28107 7560           50                         push	ax
28108                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28109 7561           8B46         FC            mov	ax,-4[bp]
28110                                           ! Debug: list unsigned int = ax+1 (used reg = )
28111 7564           40                         inc	ax
28112 7565           50                         push	ax
28113                                           ! Debug: func () void = outb+0 (used reg = )
28114 7566           E8         064C            call	_outb
28115 7569           83C4                   04  add	sp,*4
28116                                           !BCC_EOS
28117                                           ! 3788             }
28118                                           ! 3789             BX++;
28119                       0000756C            .268:
28120                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28121 756C           8B46         08            mov	ax,8[bp]
28122 756F           40                         inc	ax
28123 7570           8946         08            mov	8[bp],ax
28124                                           !BCC_EOS
28125                                           ! 3790         }
28126                                           ! 3791         v = inb(0x3cc) & ~0x01;
28127                       00007573            .265:
28128                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28129 7573           8B46         FE            mov	ax,-2[bp]
28130 7576           40                         inc	ax
28131 7577           8946         FE            mov	-2[bp],ax
28132                       0000757A            .266:
28133                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28134 757A           8B46         FE            mov	ax,-2[bp]
28135 757D           3D                   0018  cmp	ax,*$18
28136 7580           76           BC            jbe	.267
28137                       00007582            .26A:
28138                       00007582            .264:
28139                                           ! Debug: list int = const $3CC (used reg = )
28140 7582           B8                   03CC  mov	ax,#$3CC
28141 7585           50                         push	ax
28142                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28143 7586           E8         0616            call	_inb
28144 7589           44                         inc	sp
28145 758A           44                         inc	sp
28146                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28147 758B           24                     FE  and	al,#$FE
28148                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28149 758D           30E4                       xor	ah,ah
28150 758F           8946         FA            mov	-6[bp],ax
28151                                           !BCC_EOS
28152                                           ! 3792         if (crtc_addr = 0x3d4)
28153                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28154 7592           B8                   03D4  mov	ax,#$3D4
28155 7595           8946         FC            mov	-4[bp],ax
28156 7598           85C0                       test	ax,ax
28157 759A           74           08            je  	.26B
28158                       0000759C            .26C:
28159                                           ! 3793             v |= 0x01;
28160                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28161 759C           8B46         FA            mov	ax,-6[bp]
28162 759F           0C                     01  or	al,*1
28163 75A1           8946         FA            mov	-6[bp],ax
28164                                           !BCC_EOS
28165                                           ! 3794         outb(0x3c2, v);
28166                       000075A4            .26B:
28167                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28168 75A4           FF76         FA            push	-6[bp]
28169                                           ! Debug: list int = const $3C2 (used reg = )
28170 75A7           B8                   03C2  mov	ax,#$3C2
28171 75AA           50                         push	ax
28172                                           ! Debug: func () void = outb+0 (used reg = )
28173 75AB           E8         0607            call	_outb
28174 75AE           83C4                   04  add	sp,*4
28175                                           !BCC_EOS
28176                                           ! 3795         outb(crtc_addr, 0x11);
28177                                           ! Debug: list int = const $11 (used reg = )
28178 75B1           B8                   0011  mov	ax,*$11
28179 75B4           50                         push	ax
28180                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28181 75B5           FF76         FC            push	-4[bp]
28182                                           ! Debug: func () void = outb+0 (used reg = )
28183 75B8           E8         05FA            call	_outb
28184 75BB           83C4                   04  add	sp,*4
28185                                           !BCC_EOS
28186                                           ! 3796         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28187                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28188 75BE           8B46         08            mov	ax,8[bp]
28189                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28190                                           ! Debug: list unsigned int = ax-7 (used reg = )
28191 75C1           05                   FFF9  add	ax,*-7
28192 75C4           50                         push	ax
28193                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28194 75C5           FF76         06            push	6[bp]
28195                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28196 75C8           E8         057E            call	_read_byte
28197 75CB           83C4                   04  add	sp,*4
28198                                           ! Debug: list unsigned char = al+0 (used reg = )
28199 75CE           30E4                       xor	ah,ah
28200 75D0           50                         push	ax
28201                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28202 75D1           8B46         FC            mov	ax,-4[bp]
28203                                           ! Debug: list unsigned int = ax+1 (used reg = )
28204 75D4           40                         inc	ax
28205 75D5           50                         push	ax
28206                                           ! Debug: func () void = outb+0 (used reg = )
28207 75D6           E8         05DC            call	_outb
28208 75D9           83C4                   04  add	sp,*4
28209                                           !BCC_EOS
28210                                           ! 3797         ar_index = read_byte(ES, addr1 + 0x03);
28211                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28212 75DC           8B46         F8            mov	ax,-8[bp]
28213                                           ! Debug: list unsigned int = ax+3 (used reg = )
28214 75DF           05                   0003  add	ax,*3
28215 75E2           50                         push	ax
28216                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28217 75E3           FF76         06            push	6[bp]
28218                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28219 75E6           E8         0560            call	_read_byte
28220 75E9           83C4                   04  add	sp,*4
28221                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28222 75EC           30E4                       xor	ah,ah
28223 75EE           8946         F6            mov	-$A[bp],ax
28224                                           !BCC_EOS
28225                                           ! 3798         inb(0x3da);
28226                                           ! Debug: list int = const $3DA (used reg = )
28227 75F1           B8                   03DA  mov	ax,#$3DA
28228 75F4           50                         push	ax
28229                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28230 75F5           E8         05A7            call	_inb
28231 75F8           44                         inc	sp
28232 75F9           44                         inc	sp
28233                                           !BCC_EOS
28234                                           ! 3799         for(i=0;i<=0x13;i++) {
28235                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28236 75FA           31C0                       xor	ax,ax
28237 75FC           8946         FE            mov	-2[bp],ax
28238                                           !BCC_EOS
28239                                           !BCC_EOS
28240 75FF           EB           3C            jmp .26F
28241                       00007601            .270:
28242                                           ! 3800             outb(0x3c0, i | (ar_index & 0x20));
28243                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28244 7601           8A46         F6            mov	al,-$A[bp]
28245 7604           24                     20  and	al,*$20
28246                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28247                                           ! Debug: expression subtree swapping
28248 7606           30E4                       xor	ah,ah
28249 7608           0B46         FE            or	ax,-2[bp]
28250                                           ! Debug: list unsigned int = ax+0 (used reg = )
28251 760B           50                         push	ax
28252                                           ! Debug: list int = const $3C0 (used reg = )
28253 760C           B8                   03C0  mov	ax,#$3C0
28254 760F           50                         push	ax
28255                                           ! Debug: func () void = outb+0 (used reg = )
28256 7610           E8         05A2            call	_outb
28257 7613           83C4                   04  add	sp,*4
28258                                           !BCC_EOS
28259                                           ! 3801             outb(0x3c0, read_byte(ES, BX)); BX++;
28260                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28261 7616           FF76         08            push	8[bp]
28262                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28263 7619           FF76         06            push	6[bp]
28264                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28265 761C           E8         052A            call	_read_byte
28266 761F           83C4                   04  add	sp,*4
28267                                           ! Debug: list unsigned char = al+0 (used reg = )
28268 7622           30E4                       xor	ah,ah
28269 7624           50                         push	ax
28270                                           ! Debug: list int = const $3C0 (used reg = )
28271 7625           B8                   03C0  mov	ax,#$3C0
28272 7628           50                         push	ax
28273                                           ! Debug: func () void = outb+0 (used reg = )
28274 7629           E8         0589            call	_outb
28275 762C           83C4                   04  add	sp,*4
28276                                           !BCC_EOS
28277                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28278 762F           8B46         08            mov	ax,8[bp]
28279 7632           40                         inc	ax
28280 7633           8946         08            mov	8[bp],ax
28281                                           !BCC_EOS
28282                                           ! 3802         }
28283                                           ! 3803         outb(0x3c0, ar_index);
28284                       00007636            .26E:
28285                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28286 7636           8B46         FE            mov	ax,-2[bp]
28287 7639           40                         inc	ax
28288 763A           8946         FE            mov	-2[bp],ax
28289                       0000763D            .26F:
28290                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28291 763D           8B46         FE            mov	ax,-2[bp]
28292 7640           3D                   0013  cmp	ax,*$13
28293 7643           76           BC            jbe	.270
28294                       00007645            .271:
28295                       00007645            .26D:
28296                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28297 7645           FF76         F6            push	-$A[bp]
28298                                           ! Debug: list int = const $3C0 (used reg = )
28299 7648           B8                   03C0  mov	ax,#$3C0
28300 764B           50                         push	ax
28301                                           ! Debug: func () void = outb+0 (used reg = )
28302 764C           E8         0566            call	_outb
28303 764F           83C4                   04  add	sp,*4
28304                                           !BCC_EOS
28305                                           ! 3804         inb(0x3da);
28306                                           ! Debug: list int = const $3DA (used reg = )
28307 7652           B8                   03DA  mov	ax,#$3DA
28308 7655           50                         push	ax
28309                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28310 7656           E8         0546            call	_inb
28311 7659           44                         inc	sp
28312 765A           44                         inc	sp
28313                                           !BCC_EOS
28314                                           ! 3805         for(i=0;i<=8;i++) {
28315                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28316 765B           31C0                       xor	ax,ax
28317 765D           8946         FE            mov	-2[bp],ax
28318                                           !BCC_EOS
28319                                           !BCC_EOS
28320 7660           EB           34            jmp .274
28321                       00007662            .275:
28322                                           ! 3806             outb(0x3ce,i);
28323                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28324 7662           FF76         FE            push	-2[bp]
28325                                           ! Debug: list int = const $3CE (used reg = )
28326 7665           B8                   03CE  mov	ax,#$3CE
28327 7668           50                         push	ax
28328                                           ! Debug: func () void = outb+0 (used reg = )
28329 7669           E8         0549            call	_outb
28330 766C           83C4                   04  add	sp,*4
28331                                           !BCC_EOS
28332                                           ! 3807             outb(0x3cf, read_byte(ES, BX)); BX++;
28333                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28334 766F           FF76         08            push	8[bp]
28335                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28336 7672           FF76         06            push	6[bp]
28337                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28338 7675           E8         04D1            call	_read_byte
28339 7678           83C4                   04  add	sp,*4
28340                                           ! Debug: list unsigned char = al+0 (used reg = )
28341 767B           30E4                       xor	ah,ah
28342 767D           50                         push	ax
28343                                           ! Debug: list int = const $3CF (used reg = )
28344 767E           B8                   03CF  mov	ax,#$3CF
28345 7681           50                         push	ax
28346                                           ! Debug: func () void = outb+0 (used reg = )
28347 7682           E8         0530            call	_outb
28348 7685           83C4                   04  add	sp,*4
28349                                           !BCC_EOS
28350                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28351 7688           8B46         08            mov	ax,8[bp]
28352 768B           40                         inc	ax
28353 768C           8946         08            mov	8[bp],ax
28354                                           !BCC_EOS
28355                                           ! 3808         }
28356                                           ! 3809         BX += 2;
28357                       0000768F            .273:
28358                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28359 768F           8B46         FE            mov	ax,-2[bp]
28360 7692           40                         inc	ax
28361 7693           8946         FE            mov	-2[bp],ax
28362                       00007696            .274:
28363                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28364 7696           8B46         FE            mov	ax,-2[bp]
28365 7699           3D                   0008  cmp	ax,*8
28366 769C           76           C4            jbe	.275
28367                       0000769E            .276:
28368                       0000769E            .272:
28369                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28370 769E           8B46         08            mov	ax,8[bp]
28371 76A1           40                         inc	ax
28372 76A2           40                         inc	ax
28373 76A3           8946         08            mov	8[bp],ax
28374                                           !BCC_EOS
28375                                           ! 3810         BX += 4;
28376                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28377 76A6           8B46         08            mov	ax,8[bp]
28378 76A9           05                   0004  add	ax,*4
28379 76AC           8946         08            mov	8[bp],ax
28380                                           !BCC_EOS
28381                                           ! 3811         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28382                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28383 76AF           FF76         F8            push	-8[bp]
28384                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28385 76B2           FF76         06            push	6[bp]
28386                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28387 76B5           E8         0491            call	_read_byte
28388 76B8           83C4                   04  add	sp,*4
28389                                           ! Debug: list unsigned char = al+0 (used reg = )
28390 76BB           30E4                       xor	ah,ah
28391 76BD           50                         push	ax
28392                                           ! Debug: list int = const $3C4 (used reg = )
28393 76BE           B8                   03C4  mov	ax,#$3C4
28394 76C1           50                         push	ax
28395                                           ! Debug: func () void = outb+0 (used reg = )
28396 76C2           E8         04F0            call	_outb
28397 76C5           83C4                   04  add	sp,*4
28398                                           !BCC_EOS
28399                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28400 76C8           8B46         F8            mov	ax,-8[bp]
28401 76CB           40                         inc	ax
28402 76CC           8946         F8            mov	-8[bp],ax
28403                                           !BCC_EOS
28404                                           ! 3812         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28405                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28406 76CF           FF76         F8            push	-8[bp]
28407                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28408 76D2           FF76         06            push	6[bp]
28409                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28410 76D5           E8         0471            call	_read_byte
28411 76D8           83C4                   04  add	sp,*4
28412                                           ! Debug: list unsigned char = al+0 (used reg = )
28413 76DB           30E4                       xor	ah,ah
28414 76DD           50                         push	ax
28415                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28416 76DE           FF76         FC            push	-4[bp]
28417                                           ! Debug: func () void = outb+0 (used reg = )
28418 76E1           E8         04D1            call	_outb
28419 76E4           83C4                   04  add	sp,*4
28420                                           !BCC_EOS
28421                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28422 76E7           8B46         F8            mov	ax,-8[bp]
28423 76EA           40                         inc	ax
28424 76EB           8946         F8            mov	-8[bp],ax
28425                                           !BCC_EOS
28426                                           ! 3813         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28427                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28428 76EE           FF76         F8            push	-8[bp]
28429                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28430 76F1           FF76         06            push	6[bp]
28431                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28432 76F4           E8         0452            call	_read_byte
28433 76F7           83C4                   04  add	sp,*4
28434                                           ! Debug: list unsigned char = al+0 (used reg = )
28435 76FA           30E4                       xor	ah,ah
28436 76FC           50                         push	ax
28437                                           ! Debug: list int = const $3CE (used reg = )
28438 76FD           B8                   03CE  mov	ax,#$3CE
28439 7700           50                         push	ax
28440                                           ! Debug: func () void = outb+0 (used reg = )
28441 7701           E8         04B1            call	_outb
28442 7704           83C4                   04  add	sp,*4
28443                                           !BCC_EOS
28444                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28445 7707           8B46         F8            mov	ax,-8[bp]
28446 770A           40                         inc	ax
28447 770B           8946         F8            mov	-8[bp],ax
28448                                           !BCC_EOS
28449                                           ! 3814         addr1++;
28450                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28451 770E           8B46         F8            mov	ax,-8[bp]
28452 7711           40                         inc	ax
28453 7712           8946         F8            mov	-8[bp],ax
28454                                           !BCC_EOS
28455                                           ! 3815         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28456                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28457 7715           FF76         F8            push	-8[bp]
28458                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28459 7718           FF76         06            push	6[bp]
28460                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28461 771B           E8         042B            call	_read_byte
28462 771E           83C4                   04  add	sp,*4
28463                                           ! Debug: list unsigned char = al+0 (used reg = )
28464 7721           30E4                       xor	ah,ah
28465 7723           50                         push	ax
28466                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28467 7724           8B46         FC            mov	ax,-4[bp]
28468                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28469                                           ! Debug: list unsigned int = ax+6 (used reg = )
28470 7727           05                   0006  add	ax,*6
28471 772A           50                         push	ax
28472                                           ! Debug: func () void = outb+0 (used reg = )
28473 772B           E8         0487            call	_outb
28474 772E           83C4                   04  add	sp,*4
28475                                           !BCC_EOS
28476                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28477 7731           8B46         F8            mov	ax,-8[bp]
28478 7734           40                         inc	ax
28479 7735           8946         F8            mov	-8[bp],ax
28480                                           !BCC_EOS
28481                                           ! 3816     }
28482                                           ! 3817     if (CX & 2) {
28483                       00007738            .25D:
28484                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28485 7738           8A46         04            mov	al,4[bp]
28486 773B           24                     02  and	al,*2
28487 773D           84C0                       test	al,al
28488 773F   7503    E9         0270            beq 	.277
28489                       00007744            .278:
28490                                           ! 3818         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28491                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28492 7744           FF76         08            push	8[bp]
28493                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28494 7747           FF76         06            push	6[bp]
28495                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28496 774A           E8         03FC            call	_read_byte
28497 774D           83C4                   04  add	sp,*4
28498                                           ! Debug: list unsigned char = al+0 (used reg = )
28499 7750           30E4                       xor	ah,ah
28500 7752           50                         push	ax
28501                                           ! Debug: list int = const $49 (used reg = )
28502 7753           B8                   0049  mov	ax,*$49
28503 7756           50                         push	ax
28504                                           ! Debug: list int = const $40 (used reg = )
28505 7757           B8                   0040  mov	ax,*$40
28506 775A           50                         push	ax
28507                                           ! Debug: func () void = write_byte+0 (used reg = )
28508 775B           E8         0411            call	_write_byte
28509 775E           83C4                   06  add	sp,*6
28510                                           !BCC_EOS
28511                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28512 7761           8B46         08            mov	ax,8[bp]
28513 7764           40                         inc	ax
28514 7765           8946         08            mov	8[bp],ax
28515                                           !BCC_EOS
28516                                           ! 3819         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28517                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28518 7768           FF76         08            push	8[bp]
28519                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28520 776B           FF76         06            push	6[bp]
28521                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28522 776E           E8         03EB            call	_read_word
28523 7771           83C4                   04  add	sp,*4
28524                                           ! Debug: list unsigned short = ax+0 (used reg = )
28525 7774           50                         push	ax
28526                                           ! Debug: list int = const $4A (used reg = )
28527 7775           B8                   004A  mov	ax,*$4A
28528 7778           50                         push	ax
28529                                           ! Debug: list int = const $40 (used reg = )
28530 7779           B8                   0040  mov	ax,*$40
28531 777C           50                         push	ax
28532                                           ! Debug: func () void = write_word+0 (used reg = )
28533 777D           E8         0407            call	_write_word
28534 7780           83C4                   06  add	sp,*6
28535                                           !BCC_EOS
28536                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28537 7783           8B46         08            mov	ax,8[bp]
28538 7786           40                         inc	ax
28539 7787           40                         inc	ax
28540 7788           8946         08            mov	8[bp],ax
28541                                           !BCC_EOS
28542                                           ! 3820         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28543                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28544 778B           FF76         08            push	8[bp]
28545                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28546 778E           FF76         06            push	6[bp]
28547                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28548 7791           E8         03C8            call	_read_word
28549 7794           83C4                   04  add	sp,*4
28550                                           ! Debug: list unsigned short = ax+0 (used reg = )
28551 7797           50                         push	ax
28552                                           ! Debug: list int = const $4C (used reg = )
28553 7798           B8                   004C  mov	ax,*$4C
28554 779B           50                         push	ax
28555                                           ! Debug: list int = const $40 (used reg = )
28556 779C           B8                   0040  mov	ax,*$40
28557 779F           50                         push	ax
28558                                           ! Debug: func () void = write_word+0 (used reg = )
28559 77A0           E8         03E4            call	_write_word
28560 77A3           83C4                   06  add	sp,*6
28561                                           !BCC_EOS
28562                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28563 77A6           8B46         08            mov	ax,8[bp]
28564 77A9           40                         inc	ax
28565 77AA           40                         inc	ax
28566 77AB           8946         08            mov	8[bp],ax
28567                                           !BCC_EOS
28568                                           ! 3821         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
28569                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28570 77AE           FF76         08            push	8[bp]
28571                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28572 77B1           FF76         06            push	6[bp]
28573                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28574 77B4           E8         03A5            call	_read_word
28575 77B7           83C4                   04  add	sp,*4
28576                                           ! Debug: list unsigned short = ax+0 (used reg = )
28577 77BA           50                         push	ax
28578                                           ! Debug: list int = const $63 (used reg = )
28579 77BB           B8                   0063  mov	ax,*$63
28580 77BE           50                         push	ax
28581                                           ! Debug: list int = const $40 (used reg = )
28582 77BF           B8                   0040  mov	ax,*$40
28583 77C2           50                         push	ax
28584                                           ! Debug: func () void = write_word+0 (used reg = )
28585 77C3           E8         03C1            call	_write_word
28586 77C6           83C4                   06  add	sp,*6
28587                                           !BCC_EOS
28588                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28589 77C9           8B46         08            mov	ax,8[bp]
28590 77CC           40                         inc	ax
28591 77CD           40                         inc	ax
28592 77CE           8946         08            mov	8[bp],ax
28593                                           !BCC_EOS
28594                                           ! 3822         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
28595                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28596 77D1           FF76         08            push	8[bp]
28597                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28598 77D4           FF76         06            push	6[bp]
28599                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28600 77D7           E8         036F            call	_read_byte
28601 77DA           83C4                   04  add	sp,*4
28602                                           ! Debug: list unsigned char = al+0 (used reg = )
28603 77DD           30E4                       xor	ah,ah
28604 77DF           50                         push	ax
28605                                           ! Debug: list int = const $84 (used reg = )
28606 77E0           B8                   0084  mov	ax,#$84
28607 77E3           50                         push	ax
28608                                           ! Debug: list int = const $40 (used reg = )
28609 77E4           B8                   0040  mov	ax,*$40
28610 77E7           50                         push	ax
28611                                           ! Debug: func () void = write_byte+0 (used reg = )
28612 77E8           E8         0384            call	_write_byte
28613 77EB           83C4                   06  add	sp,*6
28614                                           !BCC_EOS
28615                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28616 77EE           8B46         08            mov	ax,8[bp]
28617 77F1           40                         inc	ax
28618 77F2           8946         08            mov	8[bp],ax
28619                                           !BCC_EOS
28620                                           ! 3823         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
28621                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28622 77F5           FF76         08            push	8[bp]
28623                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28624 77F8           FF76         06            push	6[bp]
28625                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28626 77FB           E8         035E            call	_read_word
28627 77FE           83C4                   04  add	sp,*4
28628                                           ! Debug: list unsigned short = ax+0 (used reg = )
28629 7801           50                         push	ax
28630                                           ! Debug: list int = const $85 (used reg = )
28631 7802           B8                   0085  mov	ax,#$85
28632 7805           50                         push	ax
28633                                           ! Debug: list int = const $40 (used reg = )
28634 7806           B8                   0040  mov	ax,*$40
28635 7809           50                         push	ax
28636                                           ! Debug: func () void = write_word+0 (used reg = )
28637 780A           E8         037A            call	_write_word
28638 780D           83C4                   06  add	sp,*6
28639                                           !BCC_EOS
28640                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28641 7810           8B46         08            mov	ax,8[bp]
28642 7813           40                         inc	ax
28643 7814           40                         inc	ax
28644 7815           8946         08            mov	8[bp],ax
28645                                           !BCC_EOS
28646                                           ! 3824         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
28647                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28648 7818           FF76         08            push	8[bp]
28649                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28650 781B           FF76         06            push	6[bp]
28651                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28652 781E           E8         0328            call	_read_byte
28653 7821           83C4                   04  add	sp,*4
28654                                           ! Debug: list unsigned char = al+0 (used reg = )
28655 7824           30E4                       xor	ah,ah
28656 7826           50                         push	ax
28657                                           ! Debug: list int = const $87 (used reg = )
28658 7827           B8                   0087  mov	ax,#$87
28659 782A           50                         push	ax
28660                                           ! Debug: list int = const $40 (used reg = )
28661 782B           B8                   0040  mov	ax,*$40
28662 782E           50                         push	ax
28663                                           ! Debug: func () void = write_byte+0 (used reg = )
28664 782F           E8         033D            call	_write_byte
28665 7832           83C4                   06  add	sp,*6
28666                                           !BCC_EOS
28667                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28668 7835           8B46         08            mov	ax,8[bp]
28669 7838           40                         inc	ax
28670 7839           8946         08            mov	8[bp],ax
28671                                           !BCC_EOS
28672                                           ! 3825         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
28673                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28674 783C           FF76         08            push	8[bp]
28675                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28676 783F           FF76         06            push	6[bp]
28677                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28678 7842           E8         0304            call	_read_byte
28679 7845           83C4                   04  add	sp,*4
28680                                           ! Debug: list unsigned char = al+0 (used reg = )
28681 7848           30E4                       xor	ah,ah
28682 784A           50                         push	ax
28683                                           ! Debug: list int = const $88 (used reg = )
28684 784B           B8                   0088  mov	ax,#$88
28685 784E           50                         push	ax
28686                                           ! Debug: list int = const $40 (used reg = )
28687 784F           B8                   0040  mov	ax,*$40
28688 7852           50                         push	ax
28689                                           ! Debug: func () void = write_byte+0 (used reg = )
28690 7853           E8         0319            call	_write_byte
28691 7856           83C4                   06  add	sp,*6
28692                                           !BCC_EOS
28693                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28694 7859           8B46         08            mov	ax,8[bp]
28695 785C           40                         inc	ax
28696 785D           8946         08            mov	8[bp],ax
28697                                           !BCC_EOS
28698                                           ! 3826         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
28699                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28700 7860           FF76         08            push	8[bp]
28701                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28702 7863           FF76         06            push	6[bp]
28703                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28704 7866           E8         02E0            call	_read_byte
28705 7869           83C4                   04  add	sp,*4
28706                                           ! Debug: list unsigned char = al+0 (used reg = )
28707 786C           30E4                       xor	ah,ah
28708 786E           50                         push	ax
28709                                           ! Debug: list int = const $89 (used reg = )
28710 786F           B8                   0089  mov	ax,#$89
28711 7872           50                         push	ax
28712                                           ! Debug: list int = const $40 (used reg = )
28713 7873           B8                   0040  mov	ax,*$40
28714 7876           50                         push	ax
28715                                           ! Debug: func () void = write_byte+0 (used reg = )
28716 7877           E8         02F5            call	_write_byte
28717 787A           83C4                   06  add	sp,*6
28718                                           !BCC_EOS
28719                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28720 787D           8B46         08            mov	ax,8[bp]
28721 7880           40                         inc	ax
28722 7881           8946         08            mov	8[bp],ax
28723                                           !BCC_EOS
28724                                           ! 3827         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
28725                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28726 7884           FF76         08            push	8[bp]
28727                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28728 7887           FF76         06            push	6[bp]
28729                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28730 788A           E8         02CF            call	_read_word
28731 788D           83C4                   04  add	sp,*4
28732                                           ! Debug: list unsigned short = ax+0 (used reg = )
28733 7890           50                         push	ax
28734                                           ! Debug: list int = const $60 (used reg = )
28735 7891           B8                   0060  mov	ax,*$60
28736 7894           50                         push	ax
28737                                           ! Debug: list int = const $40 (used reg = )
28738 7895           B8                   0040  mov	ax,*$40
28739 7898           50                         push	ax
28740                                           ! Debug: func () void = write_word+0 (used reg = )
28741 7899           E8         02EB            call	_write_word
28742 789C           83C4                   06  add	sp,*6
28743                                           !BCC_EOS
28744                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28745 789F           8B46         08            mov	ax,8[bp]
28746 78A2           40                         inc	ax
28747 78A3           40                         inc	ax
28748 78A4           8946         08            mov	8[bp],ax
28749                                           !BCC_EOS
28750                                           ! 3828         for(i=0;i<8;i++) {
28751                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28752 78A7           31C0                       xor	ax,ax
28753 78A9           8946         FE            mov	-2[bp],ax
28754                                           !BCC_EOS
28755                                           !BCC_EOS
28756 78AC           EB           2F            jmp .27B
28757                       000078AE            .27C:
28758                                           ! 3829             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
28759                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28760 78AE           FF76         08            push	8[bp]
28761                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28762 78B1           FF76         06            push	6[bp]
28763                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28764 78B4           E8         02A5            call	_read_word
28765 78B7           83C4                   04  add	sp,*4
28766                                           ! Debug: list unsigned short = ax+0 (used reg = )
28767 78BA           50                         push	ax
28768                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
28769                                           ! Debug: expression subtree swapping
28770 78BB           8B46         FE            mov	ax,-2[bp]
28771 78BE           D1E0                       shl	ax,*1
28772                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28773                                           ! Debug: expression subtree swapping
28774                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28775 78C0           05                   0050  add	ax,*$50
28776 78C3           50                         push	ax
28777                                           ! Debug: list int = const $40 (used reg = )
28778 78C4           B8                   0040  mov	ax,*$40
28779 78C7           50                         push	ax
28780                                           ! Debug: func () void = write_word+0 (used reg = )
28781 78C8           E8         02BC            call	_write_word
28782 78CB           83C4                   06  add	sp,*6
28783                                           !BCC_EOS
28784                                           ! 3830             BX += 2;
28785                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28786 78CE           8B46         08            mov	ax,8[bp]
28787 78D1           40                         inc	ax
28788 78D2           40                         inc	ax
28789 78D3           8946         08            mov	8[bp],ax
28790                                           !BCC_EOS
28791                                           ! 3831         }
28792                                           ! 3832         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
28793                       000078D6            .27A:
28794                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28795 78D6           8B46         FE            mov	ax,-2[bp]
28796 78D9           40                         inc	ax
28797 78DA           8946         FE            mov	-2[bp],ax
28798                       000078DD            .27B:
28799                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28800 78DD           8B46         FE            mov	ax,-2[bp]
28801 78E0           3D                   0008  cmp	ax,*8
28802 78E3           72           C9            jb 	.27C
28803                       000078E5            .27D:
28804                       000078E5            .279:
28805                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28806 78E5           FF76         08            push	8[bp]
28807                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28808 78E8           FF76         06            push	6[bp]
28809                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28810 78EB           E8         026E            call	_read_word
28811 78EE           83C4                   04  add	sp,*4
28812                                           ! Debug: list unsigned short = ax+0 (used reg = )
28813 78F1           50                         push	ax
28814                                           ! Debug: list int = const $4E (used reg = )
28815 78F2           B8                   004E  mov	ax,*$4E
28816 78F5           50                         push	ax
28817                                           ! Debug: list int = const $40 (used reg = )
28818 78F6           B8                   0040  mov	ax,*$40
28819 78F9           50                         push	ax
28820                                           ! Debug: func () void = write_word+0 (used reg = )
28821 78FA           E8         028A            call	_write_word
28822 78FD           83C4                   06  add	sp,*6
28823                                           !BCC_EOS
28824                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28825 7900           8B46         08            mov	ax,8[bp]
28826 7903           40                         inc	ax
28827 7904           40                         inc	ax
28828 7905           8946         08            mov	8[bp],ax
28829                                           !BCC_EOS
28830                                           ! 3833         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
28831                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28832 7908           FF76         08            push	8[bp]
28833                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28834 790B           FF76         06            push	6[bp]
28835                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28836 790E           E8         0238            call	_read_byte
28837 7911           83C4                   04  add	sp,*4
28838                                           ! Debug: list unsigned char = al+0 (used reg = )
28839 7914           30E4                       xor	ah,ah
28840 7916           50                         push	ax
28841                                           ! Debug: list int = const $62 (used reg = )
28842 7917           B8                   0062  mov	ax,*$62
28843 791A           50                         push	ax
28844                                           ! Debug: list int = const $40 (used reg = )
28845 791B           B8                   0040  mov	ax,*$40
28846 791E           50                         push	ax
28847                                           ! Debug: func () void = write_byte+0 (used reg = )
28848 791F           E8         024D            call	_write_byte
28849 7922           83C4                   06  add	sp,*6
28850                                           !BCC_EOS
28851                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28852 7925           8B46         08            mov	ax,8[bp]
28853 7928           40                         inc	ax
28854 7929           8946         08            mov	8[bp],ax
28855                                           !BCC_EOS
28856                                           ! 3834         write_word(0, 0x1f * 4, read
28857                                           ! 3834 _word(ES, BX)); BX += 2;
28858                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28859 792C           FF76         08            push	8[bp]
28860                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28861 792F           FF76         06            push	6[bp]
28862                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28863 7932           E8         0227            call	_read_word
28864 7935           83C4                   04  add	sp,*4
28865                                           ! Debug: list unsigned short = ax+0 (used reg = )
28866 7938           50                         push	ax
28867                                           ! Debug: list int = const $7C (used reg = )
28868 7939           B8                   007C  mov	ax,*$7C
28869 793C           50                         push	ax
28870                                           ! Debug: list int = const 0 (used reg = )
28871 793D           31C0                       xor	ax,ax
28872 793F           50                         push	ax
28873                                           ! Debug: func () void = write_word+0 (used reg = )
28874 7940           E8         0244            call	_write_word
28875 7943           83C4                   06  add	sp,*6
28876                                           !BCC_EOS
28877                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28878 7946           8B46         08            mov	ax,8[bp]
28879 7949           40                         inc	ax
28880 794A           40                         inc	ax
28881 794B           8946         08            mov	8[bp],ax
28882                                           !BCC_EOS
28883                                           ! 3835         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
28884                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28885 794E           FF76         08            push	8[bp]
28886                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28887 7951           FF76         06            push	6[bp]
28888                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28889 7954           E8         0205            call	_read_word
28890 7957           83C4                   04  add	sp,*4
28891                                           ! Debug: list unsigned short = ax+0 (used reg = )
28892 795A           50                         push	ax
28893                                           ! Debug: list int = const $7E (used reg = )
28894 795B           B8                   007E  mov	ax,*$7E
28895 795E           50                         push	ax
28896                                           ! Debug: list int = const 0 (used reg = )
28897 795F           31C0                       xor	ax,ax
28898 7961           50                         push	ax
28899                                           ! Debug: func () void = write_word+0 (used reg = )
28900 7962           E8         0222            call	_write_word
28901 7965           83C4                   06  add	sp,*6
28902                                           !BCC_EOS
28903                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28904 7968           8B46         08            mov	ax,8[bp]
28905 796B           40                         inc	ax
28906 796C           40                         inc	ax
28907 796D           8946         08            mov	8[bp],ax
28908                                           !BCC_EOS
28909                                           ! 3836         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
28910                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28911 7970           FF76         08            push	8[bp]
28912                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28913 7973           FF76         06            push	6[bp]
28914                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28915 7976           E8         01E3            call	_read_word
28916 7979           83C4                   04  add	sp,*4
28917                                           ! Debug: list unsigned short = ax+0 (used reg = )
28918 797C           50                         push	ax
28919                                           ! Debug: list int = const $10C (used reg = )
28920 797D           B8                   010C  mov	ax,#$10C
28921 7980           50                         push	ax
28922                                           ! Debug: list int = const 0 (used reg = )
28923 7981           31C0                       xor	ax,ax
28924 7983           50                         push	ax
28925                                           ! Debug: func () void = write_word+0 (used reg = )
28926 7984           E8         0200            call	_write_word
28927 7987           83C4                   06  add	sp,*6
28928                                           !BCC_EOS
28929                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28930 798A           8B46         08            mov	ax,8[bp]
28931 798D           40                         inc	ax
28932 798E           40                         inc	ax
28933 798F           8946         08            mov	8[bp],ax
28934                                           !BCC_EOS
28935                                           ! 3837         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
28936                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28937 7992           FF76         08            push	8[bp]
28938                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28939 7995           FF76         06            push	6[bp]
28940                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28941 7998           E8         01C1            call	_read_word
28942 799B           83C4                   04  add	sp,*4
28943                                           ! Debug: list unsigned short = ax+0 (used reg = )
28944 799E           50                         push	ax
28945                                           ! Debug: list int = const $10E (used reg = )
28946 799F           B8                   010E  mov	ax,#$10E
28947 79A2           50                         push	ax
28948                                           ! Debug: list int = const 0 (used reg = )
28949 79A3           31C0                       xor	ax,ax
28950 79A5           50                         push	ax
28951                                           ! Debug: func () void = write_word+0 (used reg = )
28952 79A6           E8         01DE            call	_write_word
28953 79A9           83C4                   06  add	sp,*6
28954                                           !BCC_EOS
28955                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28956 79AC           8B46         08            mov	ax,8[bp]
28957 79AF           40                         inc	ax
28958 79B0           40                         inc	ax
28959 79B1           8946         08            mov	8[bp],ax
28960                                           !BCC_EOS
28961                                           ! 3838     }
28962                                           ! 3839     if (CX & 4) {
28963                       000079B4            .277:
28964                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
28965 79B4           8A46         04            mov	al,4[bp]
28966 79B7           24                     04  and	al,*4
28967 79B9           84C0                       test	al,al
28968 79BB   7503    E9         0096            beq 	.27E
28969                       000079C0            .27F:
28970                                           ! 3840         BX++;
28971                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28972 79C0           8B46         08            mov	ax,8[bp]
28973 79C3           40                         inc	ax
28974 79C4           8946         08            mov	8[bp],ax
28975                                           !BCC_EOS
28976                                           ! 3841         v = read_byte(ES, BX); BX++;
28977                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28978 79C7           FF76         08            push	8[bp]
28979                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28980 79CA           FF76         06            push	6[bp]
28981                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28982 79CD           E8         0179            call	_read_byte
28983 79D0           83C4                   04  add	sp,*4
28984                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28985 79D3           30E4                       xor	ah,ah
28986 79D5           8946         FA            mov	-6[bp],ax
28987                                           !BCC_EOS
28988                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28989 79D8           8B46         08            mov	ax,8[bp]
28990 79DB           40                         inc	ax
28991 79DC           8946         08            mov	8[bp],ax
28992                                           !BCC_EOS
28993                                           ! 3842         outb(0x3c6, read_byte(ES, BX)); BX++;
28994                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28995 79DF           FF76         08            push	8[bp]
28996                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28997 79E2           FF76         06            push	6[bp]
28998                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28999 79E5           E8         0161            call	_read_byte
29000 79E8           83C4                   04  add	sp,*4
29001                                           ! Debug: list unsigned char = al+0 (used reg = )
29002 79EB           30E4                       xor	ah,ah
29003 79ED           50                         push	ax
29004                                           ! Debug: list int = const $3C6 (used reg = )
29005 79EE           B8                   03C6  mov	ax,#$3C6
29006 79F1           50                         push	ax
29007                                           ! Debug: func () void = outb+0 (used reg = )
29008 79F2           E8         01C0            call	_outb
29009 79F5           83C4                   04  add	sp,*4
29010                                           !BCC_EOS
29011                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29012 79F8           8B46         08            mov	ax,8[bp]
29013 79FB           40                         inc	ax
29014 79FC           8946         08            mov	8[bp],ax
29015                                           !BCC_EOS
29016                                           ! 3843         outb(0x3c8,0x00);
29017                                           ! Debug: list int = const 0 (used reg = )
29018 79FF           31C0                       xor	ax,ax
29019 7A01           50                         push	ax
29020                                           ! Debug: list int = const $3C8 (used reg = )
29021 7A02           B8                   03C8  mov	ax,#$3C8
29022 7A05           50                         push	ax
29023                                           ! Debug: func () void = outb+0 (used reg = )
29024 7A06           E8         01AC            call	_outb
29025 7A09           83C4                   04  add	sp,*4
29026                                           !BCC_EOS
29027                                           ! 3844         for(i=0;i<256*3;i++) {
29028                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29029 7A0C           31C0                       xor	ax,ax
29030 7A0E           8946         FE            mov	-2[bp],ax
29031                                           !BCC_EOS
29032                                           !BCC_EOS
29033 7A11           EB           27            jmp .282
29034                       00007A13            .283:
29035                                           ! 3845             outb(0x3c9, read_byte(ES, BX)); BX++;
29036                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29037 7A13           FF76         08            push	8[bp]
29038                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29039 7A16           FF76         06            push	6[bp]
29040                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29041 7A19           E8         012D            call	_read_byte
29042 7A1C           83C4                   04  add	sp,*4
29043                                           ! Debug: list unsigned char = al+0 (used reg = )
29044 7A1F           30E4                       xor	ah,ah
29045 7A21           50                         push	ax
29046                                           ! Debug: list int = const $3C9 (used reg = )
29047 7A22           B8                   03C9  mov	ax,#$3C9
29048 7A25           50                         push	ax
29049                                           ! Debug: func () void = outb+0 (used reg = )
29050 7A26           E8         018C            call	_outb
29051 7A29           83C4                   04  add	sp,*4
29052                                           !BCC_EOS
29053                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29054 7A2C           8B46         08            mov	ax,8[bp]
29055 7A2F           40                         inc	ax
29056 7A30           8946         08            mov	8[bp],ax
29057                                           !BCC_EOS
29058                                           ! 3846         }
29059                                           ! 3847         BX++;
29060                       00007A33            .281:
29061                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29062 7A33           8B46         FE            mov	ax,-2[bp]
29063 7A36           40                         inc	ax
29064 7A37           8946         FE            mov	-2[bp],ax
29065                       00007A3A            .282:
29066                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29067 7A3A           8B46         FE            mov	ax,-2[bp]
29068 7A3D           3D                   0300  cmp	ax,#$300
29069 7A40           72           D1            jb 	.283
29070                       00007A42            .284:
29071                       00007A42            .280:
29072                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29073 7A42           8B46         08            mov	ax,8[bp]
29074 7A45           40                         inc	ax
29075 7A46           8946         08            mov	8[bp],ax
29076                                           !BCC_EOS
29077                                           ! 3848         outb(0x3c8, v);
29078                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29079 7A49           FF76         FA            push	-6[bp]
29080                                           ! Debug: list int = const $3C8 (used reg = )
29081 7A4C           B8                   03C8  mov	ax,#$3C8
29082 7A4F           50                         push	ax
29083                                           ! Debug: func () void = outb+0 (used reg = )
29084 7A50           E8         0162            call	_outb
29085 7A53           83C4                   04  add	sp,*4
29086                                           !BCC_EOS
29087                                           ! 3849     }
29088                                           ! 3850     return BX;
29089                       00007A56            .27E:
29090 7A56           8B46         08            mov	ax,8[bp]
29091 7A59           89EC                       mov	sp,bp
29092 7A5B           5D                         pop	bp
29093 7A5C           C3                         ret
29094                                           !BCC_EOS
29095                                           ! 3851 }
29096                                           ! 3852 static Bit8u find_vga_entry(mode)
29097                                           ! 3853 Bit8u mode;
29098                       00007A5D            _find_vga_entry:
29099                                           !BCC_EOS
29100                                           ! 3854 {
29101                                           ! 3855  Bit8u i,line=0xFF;
29102 7A5D           55                         push	bp
29103 7A5E           89E5                       mov	bp,sp
29104 7A60           4C                         dec	sp
29105 7A61           4C                         dec	sp
29106                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29107 7A62           B0                     FF  mov	al,#$FF
29108 7A64           8846         FE            mov	-2[bp],al
29109                                           !BCC_EOS
29110                                           ! 3856  for(i=0;i<=15;i++)
29111                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29112 7A67           30C0                       xor	al,al
29113 7A69           8846         FF            mov	-1[bp],al
29114                                           !BCC_EOS
29115                                           !BCC_EOS
29116                                           ! 3857   if(vga_modes[i].svgamode==mode)
29117 7A6C           EB           23            jmp .287
29118                       00007A6E            .288:
29119                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29120 7A6E           8A46         FF            mov	al,-1[bp]
29121 7A71           30E4                       xor	ah,ah
29122 7A73           B1                     03  mov	cl,*3
29123 7A75           D3E0                       shl	ax,cl
29124 7A77           89C3                       mov	bx,ax
29125                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29126 7A79           8A87       01C3            mov	al,_vga_modes[bx]
29127 7A7D           3A46         04            cmp	al,4[bp]
29128 7A80           75           08            jne 	.289
29129                       00007A82            .28A:
29130                                           ! 3858    {line=i;
29131                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29132 7A82           8A46         FF            mov	al,-1[bp]
29133 7A85           8846         FE            mov	-2[bp],al
29134                                           !BCC_EOS
29135                                           ! 3859     break;
29136 7A88           EB           0E            jmp .285
29137                                           !BCC_EOS
29138                                           ! 3860    }
29139                                           ! 3861  return line;
29140                       00007A8A            .289:
29141                       00007A8A            .286:
29142                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29143 7A8A           8A46         FF            mov	al,-1[bp]
29144 7A8D           40                         inc	ax
29145 7A8E           8846         FF            mov	-1[bp],al
29146                       00007A91            .287:
29147                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29148 7A91           8A46         FF            mov	al,-1[bp]
29149 7A94           3C                     0F  cmp	al,*$F
29150 7A96           76           D6            jbe	.288
29151                       00007A98            .28B:
29152                       00007A98            .285:
29153 7A98           8A46         FE            mov	al,-2[bp]
29154 7A9B           89EC                       mov	sp,bp
29155 7A9D           5D                         pop	bp
29156 7A9E           C3                         ret
29157                                           !BCC_EOS
29158                                           ! 3862 }
29159                                           ! 3863 static void memsetb(seg,offset,value,count)
29160                                           ! Register BX used in function find_vga_entry
29161                                           ! 3864   Bit16u seg;
29162                       00007A9F            _memsetb:
29163                                           !BCC_EOS
29164                                           ! 3865   Bit16u offset;
29165                                           !BCC_EOS
29166                                           ! 3866   Bit16u value;
29167                                           !BCC_EOS
29168                                           ! 3867   Bit16u count;
29169                                           !BCC_EOS
29170                                           ! 3868 {
29171                                           ! 3869 #asm
29172                                           !BCC_ASM
29173                       00000008            _memsetb.count	set	8
29174                       00000002            _memsetb.seg	set	2
29175                       00000006            _memsetb.value	set	6
29176                       00000004            _memsetb.offset	set	4
29177 7A9F           55                           push bp
29178 7AA0           89E5                         mov bp, sp
29179 7AA2           50                             push ax
29180 7AA3           51                             push cx
29181 7AA4           06                             push es
29182 7AA5           57                             push di
29183 7AA6           8B4E         0A                mov cx, 10[bp] ; count
29184 7AA9           83F9                   00      cmp cx, #0x00
29185 7AAC           74           10                je memsetb_end
29186 7AAE           8B46         04                mov ax, 4[bp] ; segment
29187 7AB1           8EC0                           mov es, ax
29188 7AB3           8B46         06                mov ax, 6[bp] ; offset
29189 7AB6           89C7                           mov di, ax
29190 7AB8           8A46         08                mov al, 8[bp] ; value
29191 7ABB           FC                             cld
29192 7ABC           F3                             rep
29193 7ABD           AA                              stosb
29194                       00007ABE            memsetb_end:
29195 7ABE           5F                             pop di
29196 7ABF           07                             pop es
29197 7AC0           59                             pop cx
29198 7AC1           58                             pop ax
29199 7AC2           5D                           pop bp
29200                                           ! 3893 endasm
29201                                           !BCC_ENDASM
29202                                           ! 3894 }
29203 7AC3           C3                         ret
29204                                           ! 3895 static void memsetw(seg,offset,value,count)
29205                                           ! 3896   Bit16u seg;
29206                       00007AC4            _memsetw:
29207                                           !BCC_EOS
29208                                           ! 3897   Bit16u offset;
29209                                           !BCC_EOS
29210                                           ! 3898   Bit16u value;
29211                                           !BCC_EOS
29212                                           ! 3899   Bit16u count;
29213                                           !BCC_EOS
29214                                           ! 3900 {
29215                                           ! 3901 #asm
29216                                           !BCC_ASM
29217                       00000008            _memsetw.count	set	8
29218                       00000002            _memsetw.seg	set	2
29219                       00000006            _memsetw.value	set	6
29220                       00000004            _memsetw.offset	set	4
29221 7AC4           55                           push bp
29222 7AC5           89E5                         mov bp, sp
29223 7AC7           50                             push ax
29224 7AC8           51                             push cx
29225 7AC9           06                             push es
29226 7ACA           57                             push di
29227 7ACB           8B4E         0A                mov cx, 10[bp] ; count
29228 7ACE           83F9                   00      cmp cx, #0x00
29229 7AD1           74           10                je memsetw_end
29230 7AD3           8B46         04                mov ax, 4[bp] ; segment
29231 7AD6           8EC0                           mov es, ax
29232 7AD8           8B46         06                mov ax, 6[bp] ; offset
29233 7ADB           89C7                           mov di, ax
29234 7ADD           8B46         08                mov ax, 8[bp] ; value
29235 7AE0           FC                             cld
29236 7AE1           F3                             rep
29237 7AE2           AB                              stosw
29238                       00007AE3            memsetw_end:
29239 7AE3           5F                             pop di
29240 7AE4           07                             pop es
29241 7AE5           59                             pop cx
29242 7AE6           58                             pop ax
29243 7AE7           5D                           pop bp
29244                                           ! 3925 endasm
29245                                           !BCC_ENDASM
29246                                           ! 3926 }
29247 7AE8           C3                         ret
29248                                           ! 3927 static void memcpyb(dseg,doffset,sseg,soffset,count)
29249                                           ! 3928   Bit16u dseg;
29250                       00007AE9            _memcpyb:
29251                                           !BCC_EOS
29252                                           ! 3929   Bit16u doffset;
29253                                           !BCC_EOS
29254                                           ! 3930   Bit16u sseg;
29255                                           !BCC_EOS
29256                                           ! 3931   Bit16u soffset;
29257                                           !BCC_EOS
29258                                           ! 3932   Bit16u count;
29259                                           !BCC_EOS
29260                                           ! 3933 {
29261                                           ! 3934 #asm
29262                                           !BCC_ASM
29263                       0000000A            _memcpyb.count	set	$A
29264                       00000006            _memcpyb.sseg	set	6
29265                       00000008            _memcpyb.soffset	set	8
29266                       00000002            _memcpyb.dseg	set	2
29267                       00000004            _memcpyb.doffset	set	4
29268 7AE9           55                           push bp
29269 7AEA           89E5                         mov bp, sp
29270 7AEC           50                             push ax
29271 7AED           51                             push cx
29272 7AEE           06                             push es
29273 7AEF           57                             push di
29274 7AF0           1E                             push ds
29275 7AF1           56                             push si
29276 7AF2           8B4E         0C                mov cx, 12[bp] ; count
29277 7AF5           83F9                   00      cmp cx, #0x0000
29278 7AF8           74           17                je memcpyb_end
29279 7AFA           8B46         04                mov ax, 4[bp] ; dsegment
29280 7AFD           8EC0                           mov es, ax
29281 7AFF           8B46         06                mov ax, 6[bp] ; doffset
29282 7B02           89C7                           mov di, ax
29283 7B04           8B46         08                mov ax, 8[bp] ; ssegment
29284 7B07           8ED8                           mov ds, ax
29285 7B09           8B46         0A                mov ax, 10[bp] ; soffset
29286 7B0C           89C6                           mov si, ax
29287 7B0E           FC                             cld
29288 7B0F           F3                             rep
29289 7B10           A4                              movsb
29290                       00007B11            memcpyb_end:
29291 7B11           5E                             pop si
29292 7B12           1F                             pop ds
29293 7B13           5F                             pop di
29294 7B14           07                             pop es
29295 7B15           59                             pop cx
29296 7B16           58                             pop ax
29297 7B17           5D                           pop bp
29298                                           ! 3965 endasm
29299                                           !BCC_ENDASM
29300                                           ! 3966 }
29301 7B18           C3                         ret
29302                                           ! 3967 static void memcpyw(dseg,doffset,sseg,soffset,count)
29303                                           ! 3968   Bit16u dseg;
29304                       00007B19            _memcpyw:
29305                                           !BCC_EOS
29306                                           ! 3969   Bit16u doffset;
29307                                           !BCC_EOS
29308                                           ! 3970   Bit16u sseg;
29309                                           !BCC_EOS
29310                                           ! 3971   Bit16u soffset;
29311                                           !BCC_EOS
29312                                           ! 3972   Bit16u count;
29313                                           !BCC_EOS
29314                                           ! 3973 {
29315                                           ! 3974 #asm
29316                                           !BCC_ASM
29317                       0000000A            _memcpyw.count	set	$A
29318                       00000006            _memcpyw.sseg	set	6
29319                       00000008            _memcpyw.soffset	set	8
29320                       00000002            _memcpyw.dseg	set	2
29321                       00000004            _memcpyw.doffset	set	4
29322 7B19           55                           push bp
29323 7B1A           89E5                         mov bp, sp
29324 7B1C           50                             push ax
29325 7B1D           51                             push cx
29326 7B1E           06                             push es
29327 7B1F           57                             push di
29328 7B20           1E                             push ds
29329 7B21           56                             push si
29330 7B22           8B4E         0C                mov cx, 12[bp] ; count
29331 7B25           83F9                   00      cmp cx, #0x0000
29332 7B28           74           17                je memcpyw_end
29333 7B2A           8B46         04                mov ax, 4[bp] ; dsegment
29334 7B2D           8EC0                           mov es, ax
29335 7B2F           8B46         06                mov ax, 6[bp] ; doffset
29336 7B32           89C7                           mov di, ax
29337 7B34           8B46         08                mov ax, 8[bp] ; ssegment
29338 7B37           8ED8                           mov ds, ax
29339 7B39           8B46         0A                mov ax, 10[bp] ; soffset
29340 7B3C           89C6                           mov si, ax
29341 7B3E           FC                             cld
29342 7B3F           F3                             rep
29343 7B40           A5                              movsw
29344                       00007B41            memcpyw_end:
29345 7B41           5E                             pop si
29346 7B42           1F                             pop ds
29347 7B43           5F                             pop di
29348 7B44           07                             pop es
29349 7B45           59                             pop cx
29350 7B46           58                             pop ax
29351 7B47           5D                           pop bp
29352                                           ! 4005 endasm
29353                                           !BCC_ENDASM
29354                                           ! 4006 }
29355 7B48           C3                         ret
29356                                           ! 4007 static Bit8u
29357                                           ! 4008 read_byte(seg, offset)
29358                                           ! 4009   Bit16u seg;
29359                       00007B49            _read_byte:
29360                                           !BCC_EOS
29361                                           ! 4010   Bit16u offset;
29362                                           !BCC_EOS
29363                                           ! 4011 {
29364                                           ! 4012 #asm
29365                                           !BCC_ASM
29366                       00000002            _read_byte.seg	set	2
29367                       00000004            _read_byte.offset	set	4
29368 7B49           55                           push bp
29369 7B4A           89E5                         mov bp, sp
29370 7B4C           53                             push bx
29371 7B4D           1E                             push ds
29372 7B4E           8B46         04                mov ax, 4[bp] ; segment
29373 7B51           8ED8                           mov ds, ax
29374 7B53           8B5E         06                mov bx, 6[bp] ; offset
29375 7B56           8A07                           mov al, [bx]
29376                                               ;; al = return value (byte)
29377 7B58           1F                             pop ds
29378 7B59           5B                             pop bx
29379 7B5A           5D                           pop bp
29380                                           ! 4025 endasm
29381                                           !BCC_ENDASM
29382                                           ! 4026 }
29383 7B5B           C3                         ret
29384                                           ! 4027 static Bit16u
29385                                           ! 4028 read_word(seg, offset)
29386                                           ! 4029   Bit16u seg;
29387                       00007B5C            _read_word:
29388                                           !BCC_EOS
29389                                           ! 4030   Bit16u offset;
29390                                           !BCC_EOS
29391                                           ! 4031 {
29392                                           ! 4032 #asm
29393                                           !BCC_ASM
29394                       00000002            _read_word.seg	set	2
29395                       00000004            _read_word.offset	set	4
29396 7B5C           55                           push bp
29397 7B5D           89E5                         mov bp, sp
29398 7B5F           53                             push bx
29399 7B60           1E                             push ds
29400 7B61           8B46         04                mov ax, 4[bp] ; segment
29401 7B64           8ED8                           mov ds, ax
29402 7B66           8B5E         06                mov bx, 6[bp] ; offset
29403 7B69           8B07                           mov ax, [bx]
29404                                               ;; ax = return value (word)
29405 7B6B           1F                             pop ds
29406 7B6C           5B                             pop bx
29407 7B6D           5D                           pop bp
29408                                           ! 4045 endasm
29409                                           !BCC_ENDASM
29410                                           ! 4046 }
29411 7B6E           C3                         ret
29412                                           ! 4047 static void
29413                                           ! 4048 write_byte(seg, offset, data)
29414                                           ! 4049   Bit16u seg;
29415                       00007B6F            _write_byte:
29416                                           !BCC_EOS
29417                                           ! 4050   Bit16u offset;
29418                                           !BCC_EOS
29419                                           ! 4051   Bit8u data;
29420                                           !BCC_EOS
29421                                           ! 4052 {
29422                                           ! 4053 #asm
29423                                           !BCC_ASM
29424                       00000002            _write_byte.seg	set	2
29425                       00000006            _write_byte.data	set	6
29426                       00000004            _write_byte.offset	set	4
29427 7B6F           55                           push bp
29428 7B70           89E5                         mov bp, sp
29429 7B72           50                             push ax
29430 7B73           53                             push bx
29431 7B74           1E                             push ds
29432 7B75           8B46         04                mov ax, 4[bp] ; segment
29433 7B78           8ED8                           mov ds, ax
29434 7B7A           8B5E         06                mov bx, 6[bp] ; offset
29435 7B7D           8A46         08                mov al, 8[bp] ; data byte
29436 7B80           8807                           mov [bx], al ; write data byte
29437 7B82           1F                             pop ds
29438 7B83           5B                             pop bx
29439 7B84           58                             pop ax
29440 7B85           5D                           pop bp
29441                                           ! 4068 endasm
29442                                           !BCC_ENDASM
29443                                           ! 4069 }
29444 7B86           C3                         ret
29445                                           ! 4070 static void
29446                                           ! 4071 write_word(seg, offset, data)
29447                                           ! 4072   Bit16u seg;
29448                       00007B87            _write_word:
29449                                           !BCC_EOS
29450                                           ! 4073   Bit16u offset;
29451                                           !BCC_EOS
29452                                           ! 4074   Bit16u data;
29453                                           !BCC_EOS
29454                                           ! 4075 {
29455                                           ! 4076 #asm
29456                                           !BCC_ASM
29457                       00000002            _write_word.seg	set	2
29458                       00000006            _write_word.data	set	6
29459                       00000004            _write_word.offset	set	4
29460 7B87           55                           push bp
29461 7B88           89E5                         mov bp, sp
29462 7B8A           50                             push ax
29463 7B8B           53                             push bx
29464 7B8C           1E                             push ds
29465 7B8D           8B46         04                mov ax, 4[bp] ; segment
29466 7B90           8ED8                           mov ds, ax
29467 7B92           8B5E         06                mov bx, 6[bp] ; offset
29468 7B95           8B46         08                mov ax, 8[bp] ; data word
29469 7B98           8907                           mov [bx], ax ; write data word
29470 7B9A           1F                             pop ds
29471 7B9B           5B                             pop bx
29472 7B9C           58                             pop ax
29473 7B9D           5D                           pop bp
29474                                           ! 4091 endasm
29475                                           !BCC_ENDASM
29476                                           ! 4092 }
29477 7B9E           C3                         ret
29478                                           ! 4093  Bit8u
29479                                           ! 4094 inb(port)
29480                                           ! 4095   Bit16u port;
29481                                           export	_inb
29482                       00007B9F            _inb:
29483                                           !BCC_EOS
29484                                           ! 4096 {
29485                                           ! 4097 #asm
29486                                           !BCC_ASM
29487                       00000002            _inb.port	set	2
29488 7B9F           55                           push bp
29489 7BA0           89E5                         mov bp, sp
29490 7BA2           52                             push dx
29491 7BA3           8B56         04                mov dx, 4[bp]
29492 7BA6           EC                             in al, dx
29493 7BA7           5A                             pop dx
29494 7BA8           5D                           pop bp
29495                                           ! 4105 endasm
29496                                           !BCC_ENDASM
29497                                           ! 4106 }
29498 7BA9           C3                         ret
29499                                           ! 4107   Bit16u
29500                                           ! 4108 inw(port)
29501                                           ! 4109   Bit16u port;
29502                                           export	_inw
29503                       00007BAA            _inw:
29504                                           !BCC_EOS
29505                                           ! 4110 {
29506                                           ! 4111 #asm
29507                                           !BCC_ASM
29508                       00000002            _inw.port	set	2
29509 7BAA           55                           push bp
29510 7BAB           89E5                         mov bp, sp
29511 7BAD           52                             push dx
29512 7BAE           8B56         04                mov dx, 4[bp]
29513 7BB1           ED                             in ax, dx
29514 7BB2           5A                             pop dx
29515 7BB3           5D                           pop bp
29516                                           ! 4119 endasm
29517                                           !BCC_ENDASM
29518                                           ! 4120 }
29519 7BB4           C3                         ret
29520                                           ! 4121   void
29521                                           ! 4122 outb(port, val)
29522                                           ! 4123   Bit16u port;
29523                                           export	_outb
29524                       00007BB5            _outb:
29525                                           !BCC_EOS
29526                                           ! 4124   Bit8u val;
29527                                           !BCC_EOS
29528                                           ! 4125 {
29529                                           ! 4126 #asm
29530                                           !BCC_ASM
29531                       00000004            _outb.val	set	4
29532                       00000002            _outb.port	set	2
29533 7BB5           55                           push bp
29534 7BB6           89E5                         mov bp, sp
29535 7BB8           50                             push ax
29536 7BB9           52                             push dx
29537 7BBA           8B56         04                mov dx, 4[bp]
29538 7BBD           8A46         06                mov al, 6[bp]
29539 7BC0           EE                             out dx, al
29540 7BC1           5A                             pop dx
29541 7BC2           58                             pop ax
29542 7BC3           5D                           pop bp
29543                                           ! 4137 endasm
29544                                           !BCC_ENDASM
29545                                           ! 4138 }
29546 7BC4           C3                         ret
29547                                           ! 4139   void
29548                                           ! 4140 outw(port, val)
29549                                           ! 4141   Bit16u port;
29550                                           export	_outw
29551                       00007BC5            _outw:
29552                                           !BCC_EOS
29553                                           ! 4142   Bit16u val;
29554                                           !BCC_EOS
29555                                           ! 4143 {
29556                                           ! 4144 #asm
29557                                           !BCC_ASM
29558                       00000004            _outw.val	set	4
29559                       00000002            _outw.port	set	2
29560 7BC5           55                           push bp
29561 7BC6           89E5                         mov bp, sp
29562 7BC8           50                             push ax
29563 7BC9           52                             push dx
29564 7BCA           8B56         04                mov dx, 4[bp]
29565 7BCD           8B46         06                mov ax, 6[bp]
29566 7BD0           EF                             out dx, ax
29567 7BD1           5A                             pop dx
29568 7BD2           58                             pop ax
29569 7BD3           5D                           pop bp
29570                                           ! 4155 endasm
29571                                           !BCC_ENDASM
29572                                           ! 4156 }
29573 7BD4           C3                         ret
29574                                           ! 4157 Bit16u get_SS()
29575                                           ! 4158 {
29576                                           export	_get_SS
29577                       00007BD5            _get_SS:
29578                                           ! 4159 #asm
29579                                           !BCC_ASM
29580 7BD5           8CD0                         mov ax, ss
29581                                           ! 4161 endasm
29582                                           !BCC_ENDASM
29583                                           ! 4162 }
29584 7BD7           C3                         ret
29585                                           ! 4163 void printf(s)
29586                                           ! 4164   Bit8u *s;
29587                                           export	_printf
29588                       00007BD8            _printf:
29589                                           !BCC_EOS
29590                                           ! 4165 {
29591                                           ! 4166   Bit8u c, format_char;
29592                                           !BCC_EOS
29593                                           ! 4167   Boolean in_format;
29594                                           !BCC_EOS
29595                                           ! 4168   unsigned format_width, i;
29596                                           !BCC_EOS
29597                                           ! 4169   Bit16u *arg_ptr;
29598                                           !BCC_EOS
29599                                           ! 4170   Bit16u arg_seg, arg, digit, nibble, shift_count;
29600                                           !BCC_EOS
29601                                           ! 4171   arg_ptr = &s;
29602 7BD8           55                         push	bp
29603 7BD9           89E5                       mov	bp,sp
29604 7BDB           83C4                   EC  add	sp,*-$14
29605                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29606 7BDE           8D5E         04            lea	bx,4[bp]
29607 7BE1           895E         F6            mov	-$A[bp],bx
29608                                           !BCC_EOS
29609                                           ! 4172   arg_seg = get_SS();
29610                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
29611 7BE4           E8         FFEE            call	_get_SS
29612                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
29613 7BE7           8946         F4            mov	-$C[bp],ax
29614                                           !BCC_EOS
29615                                           ! 4173   in_format = 0;
29616                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29617 7BEA           31C0                       xor	ax,ax
29618 7BEC           8946         FC            mov	-4[bp],ax
29619                                           !BCC_EOS
29620                                           ! 4174   format_width = 0;
29621                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29622 7BEF           31C0                       xor	ax,ax
29623 7BF1           8946         FA            mov	-6[bp],ax
29624                                           !BCC_EOS
29625                                           ! 4175   while (c = read_byte(0xc000, s)) {
29626 7BF4           E9         0106            br 	.28D
29627                       00007BF7            .28E:
29628                                           ! 4176     if ( c == '%' ) {
29629                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
29630 7BF7           8A46         FF            mov	al,-1[bp]
29631 7BFA           3C                     25  cmp	al,*$25
29632 7BFC           75           0E            jne 	.28F
29633                       00007BFE            .290:
29634                                           ! 4177       in_format = 1;
29635                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
29636 7BFE           B8                   0001  mov	ax,*1
29637 7C01           8946         FC            mov	-4[bp],ax
29638                                           !BCC_EOS
29639                                           ! 4178       format_width = 0;
29640                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29641 7C04           31C0                       xor	ax,ax
29642 7C06           8946         FA            mov	-6[bp],ax
29643                                           !BCC_EOS
29644                                           ! 4179       }
29645                                           ! 4180     else if (in_format) {
29646 7C09           E9         00EA            br 	.291
29647                       00007C0C            .28F:
29648 7C0C           8B46         FC            mov	ax,-4[bp]
29649 7C0F           85C0                       test	ax,ax
29650 7C11   7503    E9         00D0            beq 	.292
29651                       00007C16            .293:
29652                                           ! 4181       if ( (c>='0') && (c<='9') ) {
29653                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29654 7C16           8A46         FF            mov	al,-1[bp]
29655 7C19           3C                     30  cmp	al,*$30
29656 7C1B           72           28            jb  	.294
29657                       00007C1D            .296:
29658                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
29659 7C1D           8A46         FF            mov	al,-1[bp]
29660 7C20           3C                     39  cmp	al,*$39
29661 7C22           77           21            ja  	.294
29662                       00007C24            .295:
29663                                           ! 4182         format_width = (format_width * 10) + (c - '0');
29664                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29665 7C24           8A46         FF            mov	al,-1[bp]
29666 7C27           30E4                       xor	ah,ah
29667 7C29           05                   FFD0  add	ax,*-$30
29668 7C2C           50                         push	ax
29669                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
29670 7C2D           8B46         FA            mov	ax,-6[bp]
29671 7C30           89C2                       mov	dx,ax
29672 7C32           D1E0                       shl	ax,*1
29673 7C34           D1E0                       shl	ax,*1
29674 7C36           01D0                       add	ax,dx
29675 7C38           D1E0                       shl	ax,*1
29676                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
29677 7C3A           0346         EA            add	ax,-$16[bp]
29678 7C3D           44                         inc	sp
29679 7C3E           44                         inc	sp
29680                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
29681 7C3F           8946         FA            mov	-6[bp],ax
29682                                           !BCC_EOS
29683                                           ! 4183         }
29684                                           ! 4184       else if (c == 'x') {
29685 7C42           E9         009F            br 	.297
29686                       00007C45            .294:
29687                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
29688 7C45           8A46         FF            mov	al,-1[bp]
29689 7C48           3C                     78  cmp	al,*$78
29690 7C4A   7403    E9         0095            bne 	.298
29691                       00007C4F            .299:
29692                                           ! 4185         arg_ptr++;
29693                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29694 7C4F           8B5E         F6            mov	bx,-$A[bp]
29695 7C52           43                         inc	bx
29696 7C53           43                         inc	bx
29697 7C54           895E         F6            mov	-$A[bp],bx
29698                                           !BCC_EOS
29699                                           ! 4186         arg = read_word(arg_seg, arg_ptr);
29700                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29701 7C57           FF76         F6            push	-$A[bp]
29702                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
29703 7C5A           FF76         F4            push	-$C[bp]
29704                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29705 7C5D           E8         FEFC            call	_read_word
29706 7C60           83C4                   04  add	sp,*4
29707                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
29708 7C63           8946         F2            mov	-$E[bp],ax
29709                                           !BCC_EOS
29710                                           ! 4187         if (format_width == 0)
29711                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29712 7C66           8B46         FA            mov	ax,-6[bp]
29713 7C69           85C0                       test	ax,ax
29714 7C6B           75           06            jne 	.29A
29715                       00007C6D            .29B:
29716                                           ! 4188           format_width = 4;
29717                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
29718 7C6D           B8                   0004  mov	ax,*4
29719 7C70           8946         FA            mov	-6[bp],ax
29720                                           !BCC_EOS
29721                                           ! 4189         i = 0;
29722                       00007C73            .29A:
29723                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
29724 7C73           31C0                       xor	ax,ax
29725 7C75           8946         F8            mov	-8[bp],ax
29726                                           !BCC_EOS
29727                                           ! 4190         digit = format_width - 1;
29728                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
29729 7C78           8B46         FA            mov	ax,-6[bp]
29730                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
29731 7C7B           48                         dec	ax
29732 7C7C           8946         F0            mov	-$10[bp],ax
29733                                           !BCC_EOS
29734                                           ! 4191         for (i=0; i<format_width; i++) {
29735                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
29736 7C7F           31C0                       xor	ax,ax
29737 7C81           8946         F8            mov	-8[bp],ax
29738                                           !BCC_EOS
29739                                           !BCC_EOS
29740 7C84           EB           51            jmp .29E
29741                       00007C86            .29F:
29742                                           ! 4192           nibble = (arg >> (4 * digit)) & 0x000f;
29743                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
29744                                           ! Debug: expression subtree swapping
29745 7C86           8B46         F0            mov	ax,-$10[bp]
29746 7C89           D1E0                       shl	ax,*1
29747 7C8B           D1E0                       shl	ax,*1
29748                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
29749 7C8D           89C3                       mov	bx,ax
29750 7C8F           8B46         F2            mov	ax,-$E[bp]
29751 7C92           89D9                       mov	cx,bx
29752 7C94           D3E8                       shr	ax,cl
29753                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
29754 7C96           24                     0F  and	al,*$F
29755                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
29756 7C98           30E4                       xor	ah,ah
29757 7C9A           8946         EE            mov	-$12[bp],ax
29758                                           !BCC_EOS
29759                                           ! 4193           if (nibble <= 9)
29760                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
29761 7C9D           8B46         EE            mov	ax,-$12[bp]
29762 7CA0           3D                   0009  cmp	ax,*9
29763 7CA3           77           13            ja  	.2A0
29764                       00007CA5            .2A1:
29765                                           ! 4194             outb(0x0500, nibble + '0');
29766                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
29767 7CA5           8B46         EE            mov	ax,-$12[bp]
29768                                           ! Debug: list unsigned int = ax+$30 (used reg = )
29769 7CA8           05                   0030  add	ax,*$30
29770 7CAB           50                         push	ax
29771                                           ! Debug: list int = const $500 (used reg = )
29772 7CAC           B8                   0500  mov	ax,#$500
29773 7CAF           50                         push	ax
29774                                           ! Debug: func () void = outb+0 (used reg = )
29775 7CB0           E8         FF02            call	_outb
29776 7CB3           83C4                   04  add	sp,*4
29777                                           !BCC_EOS
29778                                           ! 4195           else
29779                                           ! 4196             outb(0x0500, (nibble - 10) + 'A');
29780 7CB6           EB           11            jmp .2A2
29781                       00007CB8            .2A0:
29782                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
29783 7CB8           8B46         EE            mov	ax,-$12[bp]
29784                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
29785                                           ! Debug: list unsigned int = ax+$37 (used reg = )
29786 7CBB           05                   0037  add	ax,*$37
29787 7CBE           50                         push	ax
29788                                           ! Debug: list int = const $500 (used reg = )
29789 7CBF           B8                   0500  mov	ax,#$500
29790 7CC2           50                         push	ax
29791                                           ! Debug: func () void = outb+0 (used reg = )
29792 7CC3           E8         FEEF            call	_outb
29793 7CC6           83C4                   04  add	sp,*4
29794                                           !BCC_EOS
29795                                           ! 4197           digit--;
29796                       00007CC9            .2A2:
29797                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
29798 7CC9           8B46         F0            mov	ax,-$10[bp]
29799 7CCC           48                         dec	ax
29800 7CCD           8946         F0            mov	-$10[bp],ax
29801                                           !BCC_EOS
29802                                           ! 4198           }
29803                                           ! 4199         in_format = 0;
29804                       00007CD0            .29D:
29805                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
29806 7CD0           8B46         F8            mov	ax,-8[bp]
29807 7CD3           40                         inc	ax
29808 7CD4           8946         F8            mov	-8[bp],ax
29809                       00007CD7            .29E:
29810                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
29811 7CD7           8B46         F8            mov	ax,-8[bp]
29812 7CDA           3B46         FA            cmp	ax,-6[bp]
29813 7CDD           72           A7            jb 	.29F
29814                       00007CDF            .2A3:
29815                       00007CDF            .29C:
29816                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29817 7CDF           31C0                       xor	ax,ax
29818 7CE1           8946         FC            mov	-4[bp],ax
29819                                           !BCC_EOS
29820                                           ! 4200         }
29821                                           ! 4201       }
29822                       00007CE4            .298:
29823                       00007CE4            .297:
29824                                           ! 4202     else {
29825 7CE4           EB           10            jmp .2A4
29826                       00007CE6            .292:
29827                                           ! 4203       outb(0x0500, c);
29828                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
29829 7CE6           8A46         FF            mov	al,-1[bp]
29830 7CE9           30E4                       xor	ah,ah
29831 7CEB           50                         push	ax
29832                                           ! Debug: list int = const $500 (used reg = )
29833 7CEC           B8                   0500  mov	ax,#$500
29834 7CEF           50                         push	ax
29835                                           ! Debug: func () void = outb+0 (used reg = )
29836 7CF0           E8         FEC2            call	_outb
29837 7CF3           83C4                   04  add	sp,*4
29838                                           !BCC_EOS
29839                                           ! 4204       }
29840                                           ! 4205     s ++;
29841                       00007CF6            .2A4:
29842                       00007CF6            .291:
29843                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
29844 7CF6           8B5E         04            mov	bx,4[bp]
29845 7CF9           43                         inc	bx
29846 7CFA           895E         04            mov	4[bp],bx
29847                                           !BCC_EOS
29848                                           ! 4206     }
29849                                           ! 4207 }
29850                       00007CFD            .28D:
29851                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
29852 7CFD           FF76         04            push	4[bp]
29853                                           ! Debug: list unsigned int = const $C000 (used reg = )
29854 7D00           B8                   C000  mov	ax,#$C000
29855 7D03           50                         push	ax
29856                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29857 7D04           E8         FE42            call	_read_byte
29858 7D07           83C4                   04  add	sp,*4
29859                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
29860 7D0A           8846         FF            mov	-1[bp],al
29861 7D0D           84C0                       test	al,al
29862 7D0F   7403    E9         FEE3            bne 	.28E
29863                       00007D14            .2A5:
29864                       00007D14            .28C:
29865 7D14           89EC                       mov	sp,bp
29866 7D16           5D                         pop	bp
29867 7D17           C3                         ret
29868                                           ! 4208 #asm
29869                                           !BCC_ASM
29870                       00000002            _printf.s	set	2
29871                                           ;; DATA_SEG_DEFS_HERE
29872                                           ! 4210 endasm
29873                                           !BCC_ENDASM
29874                                           ! 4211 #asm
29875                                           !BCC_ASM
29876                       00000002            _printf.s	set	2
29877 7D18                        76            .ascii "vgabios ends here"
29878 7D29                        00            .byte 0x00
29879                       00007D2A            vgabios_end:
29880 7D2A                        CB            .byte 0xCB
29881                                           ;; BLOCK_STRINGS_BEGIN
29882                                           ! 4217 endasm
29883                                           !BCC_ENDASM
29884                                           ! 4218 
29885                                           ! Register BX used in function printf
29886                                           
29887 7D2B                                      .bss
29888                                           
29889                                           ! 0 errors detected

Symbols:
..FFF5                      0 FFFC A   ..FFF6                      0 FFEE A   
..FFF7                      0 FFF4 A   ..FFF8                      0 FFF6 A   
..FFF9                      0 FFEE A   ..FFFA                      0 FFEE A   
..FFFB                      0 FFF2 A   ..FFFC                      0 FFF0 A   
..FFFD                      0 FFE8 A   ..FFFE                      0 FFE8 A   
..FFFF                      0 FFFE A   .1                          0 3AB2 A   
.10                         0 3659 A   .100                        0 4D62 A   
.101                        0 4CEA A   .102                        0 4D27 A   
.103                        0 4D01 A   .104                        0 4CFA A   
.105                        0 4D4F A   .106                        0 4D5B A   
.107                        0 4D59 A   .108                        0 4D6F A   
.109                        0 4D72 A   .10A                        0 4E05 A   
.10B                        0 4DC0 A   .10C                        0 4DAE A   
.10D                        0 4D9C A   .10E                        0 4D95 A   
.10F                        0 4D8E A   .11                         0 3688 A   
.110                        0 4F4B A   .111                        0 4E28 A   
.112                        0 4E0C A   .113                        0 4EBC A   
.114                        0 4E32 A   .115                        0 4EB9 A   
.116                        0 4EA8 A   .117                        0 4EAF A   
.118                        0 4E3C A   .119                        0 4E80 A   
.11A                        0 4E5A A   .11B                        0 4E53 A   
.11C                        0 4EA8 A   .11D                        0 4EB9 A   
.11E                        0 4F4B A   .11F                        0 4F4B A   
.12                         0 3678 A   .120                        0 4F37 A   
.121                        0 4F3E A   .122                        0 4EC6 A   
.123                        0 4F03 A   .124                        0 4EDD A   
.125                        0 4ED6 A   .126                        0 4F2B A   
.127                        0 4F37 A   .128                        0 4F35 A   
.129                        0 4F4B A   .12A                        0 4FA0 A   
.12B                        0 4F9C A   .12C                        0 505F A   
.12D                        0 5001 A   .12E                        0 505F A   
.12F                        0 5090 A   .13                         0 368D A   
.131                        0 5086 A   .132                        0 506E A   
.133                        0 5076 A   .134                        0 507E A   
.135                        0 50FD A   .136                        0 50ED A   
.137                        0 510B A   .138                        0 51C5 A   
.139                        0 51B3 A   .13A                        0 51BA A   
.13B                        0 5113 A   .13C                        0 51B3 A   
.13D                        0 51A2 A   .13E                        0 51A9 A   
.13F                        0 5130 A   .14                         0 36A4 A   
.140                        0 5192 A   .141                        0 517B A   
.142                        0 51A2 A   .143                        0 51B3 A   
.144                        0 51C5 A   .145                        0 53DA A   
.146                        0 53C9 A   .147                        0 53D0 A   
.148                        0 521B A   .149                        0 523F A   
.14A                        0 5236 A   .14B                        0 5301 A   
.14C                        0 524E A   .14D                        0 5269 A   
.14E                        0 5257 A   .14F                        0 526E A   
.15                         0 36B8 A   .150                        0 52EB A   
.151                        0 52DD A   .152                        0 52E4 A   
.153                        0 5275 A   .154                        0 52D3 A   
.155                        0 528C A   .156                        0 52B5 A   
.157                        0 5295 A   .158                        0 52D3 A   
.159                        0 52EB A   .15A                        0 53C9 A   
.15B                        0 53C9 A   .15C                        0 53BF A   
.15D                        0 5304 A   .15E                        0 531F A   
.15F                        0 530D A   .16                         0 36D1 A   
.160                        0 5324 A   .161                        0 53A5 A   
.162                        0 5397 A   .163                        0 539E A   
.164                        0 532B A   .165                        0 538D A   
.166                        0 5342 A   .167                        0 536D A   
.168                        0 534B A   .169                        0 538D A   
.16A                        0 53A5 A   .16B                        0 53C9 A   
.16C                        0 53DA A   .16D                        0 54AF A   
.16E                        0 549E A   .16F                        0 54A5 A   
.17                         0 36E8 A   .170                        0 5424 A   
.171                        0 549E A   .172                        0 5490 A   
.173                        0 5497 A   .174                        0 544A A   
.175                        0 546C A   .176                        0 5466 A   
.177                        0 549E A   .178                        0 54AF A   
.179                        0 54E3 A   .17A                        0 54DF A   
.17B                        0 55AE A   .17C                        0 5544 A   
.17D                        0 56A4 A   .17E                        0 56A4 A   
.17F                        0 568B A   .18                         0 36F6 A   
.180                        0 55E3 A   .181                        0 5684 A   
.183                        0 566E A   .184                        0 55F7 A   
.185                        0 55F7 A   .186                        0 5620 A   
.187                        0 5649 A   .188                        0 56A4 A   
.189                        0 5697 A   .18A                        0 56D8 A   
.18B                        0 56D4 A   .18C                        0 57A7 A   
.18D                        0 5739 A   .18E                        0 57A4 A   
.18F                        0 5798 A   .19                         0 3731 A   
.190                        0 576F A   .191                        0 57A4 A   
.192                        0 589D A   .193                        0 589D A   
.194                        0 5884 A   .195                        0 57DC A   
.196                        0 587D A   .198                        0 5867 A   
.199                        0 57F0 A   .19A                        0 57F0 A   
.19B                        0 5819 A   .19C                        0 5842 A   
.19D                        0 589D A   .19E                        0 5890 A   
.19F                        0 5949 A   .1A                         0 376B A   
.1A0                        0 5945 A   .1A1                        0 5963 A   
.1A2                        0 595F A   .1A3                        0 5BB4 A   
.1A5                        0 5B9B A   .1A6                        0 5978 A   
.1A7                        0 5978 A   .1A8                        0 59F9 A   
.1A9                        0 59EB A   .1AA                        0 5A1E A   
.1AB                        0 5A50 A   .1AC                        0 5A34 A   
.1AD                        0 5A6A A   .1AE                        0 5A7C A   
.1AF                        0 5A73 A   .1B                         0 3780 A   
.1B0                        0 5AE8 A   .1B1                        0 5AA2 A   
.1B2                        0 5B28 A   .1B3                        0 5B3C A   
.1B4                        0 5B31 A   .1B5                        0 5B52 A   
.1B6                        0 5B67 A   .1B7                        0 5BEE A   
.1B8                        0 5BEA A   .1B9                        0 5C08 A   
.1BA                        0 5C04 A   .1BB                        0 5D9F A   
.1BD                        0 5D84 A   .1BE                        0 5C1D A   
.1BF                        0 5C1D A   .1C                         0 37A0 A   
.1C0                        0 5CB1 A   .1C1                        0 5CA3 A   
.1C2                        0 5CAA A   .1C3                        0 5C5F A   
.1C4                        0 5CA3 A   .1C5                        0 5C8F A   
.1C6                        0 5CB1 A   .1C7                        0 5CB4 A   
.1C8                        0 5CE0 A   .1C9                        0 5CD7 A   
.1CA                        0 5D2B A   .1CB                        0 5D06 A   
.1CC                        0 5D4C A   .1CD                        0 5D4E A   
.1CE                        0 5D7D A   .1CF                        0 5DDF A   
.1D                         0 37C0 A   .1D0                        0 5DCE A   
.1D1                        0 5E09 A   .1D2                        0 5E05 A   
.1D3                        0 606E A   .1D5                        0 6048 A   
.1D6                        0 5E5A A   .1D7                        0 5E5D A   
.1D8                        0 5E6B A   .1D9                        0 5E64 A   
.1DA                        0 5E6E A   .1DB                        0 5E76 A   
.1DC                        0 5E80 A   .1DD                        0 5ECD A   
.1DE                        0 5EC2 A   .1DF                        0 5E80 A   
.1E                         0 37DD A   .1E0                        0 5ECD A   
.1E1                        0 5ED0 A   .1E2                        0 5F6B A   
.1E3                        0 5EE9 A   .1E4                        0 5F68 A   
.1E5                        0 5F45 A   .1E6                        0 603F A   
.1E7                        0 603F A   .1E9                        0 6029 A   
.1EA                        0 5FB2 A   .1EB                        0 5FB2 A   
.1EC                        0 5FDB A   .1ED                        0 6004 A   
.1EE                        0 6084 A   .1EF                        0 6078 A   
.1F                         0 37F8 A   .1F0                        0 615B A   
.1F1                        0 6091 A   .1F2                        0 612B A   
.1F3                        0 60AA A   .1F4                        0 6152 A   
.1F5                        0 6524 A   .1F6                        0 6512 A   
.1F7                        0 6519 A   .1F8                        0 645B A   
.1F9                        0 64CE A   .1FA                        0 64C8 A   
.1FB                        0 6524 A   .1FC                        0 6606 A   
.1FD                        0 65F6 A   .1FE                        0 661E A   
.1FF                        0 6763 A   .20                         0 3815 A   
.200                        0 6754 A   .201                        0 675B A   
.202                        0 6717 A   .203                        0 6763 A   
.204                        0 6778 A   .205                        0 676D A   
.206                        0 67FC A   .207                        0 67ED A   
.208                        0 67F4 A   .209                        0 67B3 A   
.20A                        0 67FC A   .20B                        0 680F A   
.20C                        0 6806 A   .20D                        0 688D A   
.20E                        0 687E A   .20F                        0 6885 A   
.21                         0 3824 A   .210                        0 684A A   
.211                        0 688D A   .212                        0 68A0 A   
.213                        0 6897 A   .214                        0 692B A   
.215                        0 691C A   .216                        0 6923 A   
.217                        0 68E8 A   .218                        0 692B A   
.219                        0 693E A   .21A                        0 6935 A   
.21B                        0 6AC0 A   .21D                        0 6A9B A   
.21E                        0 6958 A   .21F                        0 698F A   
.22                         0 396D A   .220                        0 69C6 A   
.221                        0 69E9 A   .222                        0 6A0C A   
.223                        0 6A2F A   .224                        0 6A51 A   
.225                        0 6A73 A   .226                        0 6A95 A   
.227                        0 6ABE A   .228                        0 6AAE A   
.229                        0 6C33 A   .22A                        0 6C21 A   
.22B                        0 6CBD A   .22C                        0 6CB1 A   
.22D                        0 6C62 A   .22E                        0 6C95 A   
.22F                        0 6C80 A   .230                        0 6CBD A   
.231                        0 6CD5 A   .232                        0 6CC6 A   
.233                        0 6E60 A   .234                        0 6E57 A   
.235                        0 6E72 A   .236                        0 6E69 A   
.237                        0 6E84 A   .238                        0 6E7B A   
.239                        0 7138 A   .23A                        0 6ED2 A   
.23B                        0 6FBD A   .23C                        0 6FAE A   
.23D                        0 6FB5 A   .23E                        0 6F82 A   
.23F                        0 6FBD A   .24                         0 390B A   
.240                        0 702B A   .241                        0 701C A   
.242                        0 7023 A   .243                        0 6FF0 A   
.244                        0 702B A   .245                        0 707E A   
.246                        0 706F A   .247                        0 7076 A   
.248                        0 7032 A   .249                        0 707E A   
.24A                        0 70C9 A   .24B                        0 70BA A   
.24C                        0 70C1 A   .24D                        0 708E A   
.24E                        0 70C9 A   .24F                        0 73B4 A   
.25                         0 382A A   .250                        0 7144 A   
.251                        0 72E5 A   .252                        0 72D6 A   
.253                        0 72DD A   .254                        0 72AE A   
.255                        0 72E5 A   .256                        0 7475 A   
.257                        0 73C0 A   .258                        0 745F A   
.259                        0 7450 A   .25A                        0 7457 A   
.25B                        0 7431 A   .25C                        0 745F A   
.25D                        0 7738 A   .25E                        0 748E A   
.25F                        0 74FD A   .26                         0 382A A   
.260                        0 74EE A   .261                        0 74F5 A   
.262                        0 74C1 A   .263                        0 74FD A   
.264                        0 7582 A   .265                        0 7573 A   
.266                        0 757A A   .267                        0 753E A   
.268                        0 756C A   .269                        0 7546 A   
.26A                        0 7582 A   .26B                        0 75A4 A   
.26C                        0 759C A   .26D                        0 7645 A   
.26E                        0 7636 A   .26F                        0 763D A   
.27                         0 3853 A   .270                        0 7601 A   
.271                        0 7645 A   .272                        0 769E A   
.273                        0 768F A   .274                        0 7696 A   
.275                        0 7662 A   .276                        0 769E A   
.277                        0 79B4 A   .278                        0 7744 A   
.279                        0 78E5 A   .27A                        0 78D6 A   
.27B                        0 78DD A   .27C                        0 78AE A   
.27D                        0 78E5 A   .27E                        0 7A56 A   
.27F                        0 79C0 A   .28                         0 3853 A   
.280                        0 7A42 A   .281                        0 7A33 A   
.282                        0 7A3A A   .283                        0 7A13 A   
.284                        0 7A42 A   .285                        0 7A98 A   
.286                        0 7A8A A   .287                        0 7A91 A   
.288                        0 7A6E A   .289                        0 7A8A A   
.28A                        0 7A82 A   .28B                        0 7A98 A   
.28C                        0 7D14 A   .28D                        0 7CFD A   
.28E                        0 7BF7 A   .28F                        0 7C0C A   
.29                         0 3868 A   .290                        0 7BFE A   
.291                        0 7CF6 A   .292                        0 7CE6 A   
.293                        0 7C16 A   .294                        0 7C45 A   
.295                        0 7C24 A   .296                        0 7C1D A   
.297                        0 7CE4 A   .298                        0 7CE4 A   
.299                        0 7C4F A   .29A                        0 7C73 A   
.29B                        0 7C6D A   .29C                        0 7CDF A   
.29D                        0 7CD0 A   .29E                        0 7CD7 A   
.29F                        0 7C86 A   .2A                         0 3868 A   
.2A0                        0 7CB8 A   .2A1                        0 7CA5 A   
.2A2                        0 7CC9 A   .2A3                        0 7CDF A   
.2A4                        0 7CF6 A   .2A5                        0 7D14 A   
.2B                         0 387D A   .2C                         0 387D A   
.2D                         0 3892 A   .2E                         0 38A1 A   
.2F                         0 38BF A   .3                          0 3A62 A   
.30                         0 38CD A   .31                         0 38DB A   
.32                         0 38E9 A   .33                         0 3970 A   
.34                         0 39BD A   .36                         0 39B1 A   
.37                         0 3975 A   .38                         0 397A A   
.39                         0 3998 A   .3A                         0 39C0 A   
.3B                         0 39F4 A   .3C                         0 3A10 A   
.3D                         0 3A54 A   .3F                         0 3A48 A   
.4                          0 362F A   .40                         0 3A15 A   
.41                         0 3A24 A   .42                         0 3A35 A   
.43                         0 3AB2 A   .44                         0 3A78 A   
.45                         0 3AE4 A   .46                         0 3AE0 A   
.47                         0 3CB9 A   .48                         0 3B73 A   
.49                         0 3BE5 A   .4B                         0 3BD5 A   
.4C                         0 3BB3 A   .4D                         0 3BBB A   
.4E                         0 3BC3 A   .4F                         0 3BCB A   
.5                          0 368A A   .50                         0 3CA3 A   
.51                         0 3C91 A   .52                         0 3C98 A   
.53                         0 3BED A   .54                         0 3C6A A   
.55                         0 3C0E A   .56                         0 3C91 A   
.57                         0 3CA3 A   .58                         0 3CB9 A   
.59                         0 3CAC A   .5A                         0 3D09 A   
.5B                         0 3CFA A   .5C                         0 3D01 A   
.5D                         0 3CC9 A   .5E                         0 3D09 A   
.5F                         0 3D8E A   .60                         0 3D7F A   
.61                         0 3D86 A   .62                         0 3D47 A   
.63                         0 3D8E A   .64                         0 3DD5 A   
.65                         0 3DC6 A   .66                         0 3DCD A   
.67                         0 3D95 A   .68                         0 3DD5 A   
.69                         0 3DF0 A   .6A                         0 3DEB A   
.6B                         0 3DF3 A   .6C                         0 3E4A A   
.6D                         0 3E3B A   .6E                         0 3E42 A   
.6F                         0 3E0A A   .7                          0 3665 A   
.70                         0 3E4A A   .71                         0 3F4B A   
.72                         0 3E8A A   .73                         0 3EC6 A   
.74                         0 3EA0 A   .75                         0 3F4B A   
.76                         0 3EF1 A   .77                         0 3ECD A   
.78                         0 3F4B A   .79                         0 4088 A   
.7A                         0 407A A   .7B                         0 40AA A   
.7C                         0 409B A   .7D                         0 40A2 A   
.7E                         0 408F A   .7F                         0 40AA A   
.8                          0 3641 A   .80                         0 40D6 A   
.81                         0 40C8 A   .82                         0 413C A   
.84                         0 412D A   .85                         0 40EE A   
.86                         0 4103 A   .87                         0 4117 A   
.88                         0 420A A   .89                         0 41BA A   
.8A                         0 41B3 A   .8B                         0 41AC A   
.8C                         0 41A4 A   .8D                         0 41E3 A   
.8E                         0 41CE A   .8F                         0 41F7 A   
.9                          0 364D A   .90                         0 426C A   
.91                         0 4268 A   .92                         0 4358 A   
.93                         0 42A0 A   .94                         0 4390 A   
.95                         0 438C A   .96                         0 43E2 A   
.97                         0 43DE A   .98                         0 440C A   
.99                         0 4408 A   .9A                         0 44A4 A   
.9B                         0 4436 A   .9C                         0 44C8 A   
.9D                         0 45F0 A   .9E                         0 45E1 A   
.9F                         0 45E8 A   .A                          0 364D A   
.A0                         0 45A5 A   .A1                         0 45F0 A   
.A2                         0 467B A   .A3                         0 466C A   
.A4                         0 4673 A   .A5                         0 4642 A   
.A6                         0 467B A   .A7                         0 479C A   
.A8                         0 478A A   .A9                         0 4791 A   
.AA                         0 46E9 A   .AB                         0 4748 A   
.AC                         0 46F2 A   .AD                         0 478A A   
.AE                         0 479C A   .AF                         0 4851 A   
.B                          0 364D A   .B0                         0 4842 A   
.B1                         0 4849 A   .B2                         0 47D4 A   
.B3                         0 4815 A   .B4                         0 47DD A   
.B5                         0 4842 A   .B6                         0 4851 A   
.B7                         0 4867 A   .B8                         0 4863 A   
.B9                         0 4873 A   .BA                         0 486F A   
.BB                         0 489D A   .BC                         0 4899 A   
.BD                         0 48DA A   .BE                         0 48C9 A   
.BF                         0 48EB A   .C                          0 364D A   
.C0                         0 48E4 A   .C1                         0 48FC A   
.C2                         0 48F5 A   .C3                         0 490B A   
.C4                         0 4906 A   .C5                         0 4B86 A   
.C6                         0 4933 A   .C7                         0 49BD A   
.C8                         0 4988 A   .C9                         0 4976 A   
.CA                         0 4964 A   .CB                         0 495D A   
.CC                         0 4956 A   .CD                         0 4B83 A   
.CE                         0 4AA4 A   .CF                         0 49C7 A   
.D                          0 364D A   .D0                         0 4AA1 A   
.D1                         0 4A8D A   .D2                         0 4A94 A   
.D3                         0 49D2 A   .D4                         0 4A32 A   
.D5                         0 49F0 A   .D6                         0 49E9 A   
.D7                         0 4A8D A   .D8                         0 4AA1 A   
.D9                         0 4B83 A   .DA                         0 4B83 A   
.DB                         0 4B6F A   .DC                         0 4B76 A   
.DD                         0 4AAF A   .DE                         0 4B08 A   
.DF                         0 4AC6 A   .E                          0 364D A   
.E0                         0 4ABF A   .E1                         0 4B63 A   
.E2                         0 4B6F A   .E3                         0 4B6D A   
.E4                         0 4B83 A   .E5                         0 4F64 A   
.E6                         0 4F64 A   .E8                         0 4F4F A   
.E9                         0 4BB8 A   .EA                         0 4BB8 A   
.EB                         0 4C4C A   .EC                         0 4BF7 A   
.ED                         0 4BE5 A   .EE                         0 4BD3 A   
.EF                         0 4BCC A   .F                          0 364D A   
.F0                         0 4BC2 A   .F1                         0 4D6F A   
.F2                         0 4CE0 A   .F3                         0 4C56 A   
.F4                         0 4CDD A   .F5                         0 4CCC A   
.F6                         0 4CD3 A   .F7                         0 4C60 A   
.F8                         0 4CA4 A   .F9                         0 4C7E A   
.FA                         0 4C77 A   .FB                         0 4CCC A   
.FC                         0 4CDD A   .FD                         0 4D6F A   
.FE                         0 4D6F A   .FF                         0 4D5B A   
_biosfn_alternate_prtsc     0 6B21 A   _biosfn_enable_video_refre+ 0 6BFF A   
_biosfn_get_cursor_pos      0 435C A   _biosfn_get_font_info       0 6947 A   
_biosfn_load_gfx_8_14_char+ 0 6944 A   _biosfn_load_gfx_8_16_char+ 0 6946 A   
_biosfn_load_gfx_8_8_chars  0 6942 A   _biosfn_load_gfx_8_8_dd_ch+ 0 6945 A   
_biosfn_load_gfx_user_char+ 0 6943 A   _biosfn_load_text_8_14_pat  0 677C A   
_biosfn_load_text_8_16_pat  0 68B1 A   _biosfn_load_text_8_8_pat   0 6813 A   
_biosfn_load_text_user_pat  0 66E0 A   _biosfn_perform_gray_scale+ 0 6437 A   
_biosfn_read_char_attr      0 4F68 A   _biosfn_read_pixel          0 5BB8 A   
_biosfn_read_state_info     0 6D0C A   _biosfn_read_video_state_s+ 0 6E8B A   
_biosfn_read_video_state_s+ 0 6E44 A   _biosfn_restore_video_stat+ 0 747C A   
_biosfn_save_video_state    0 6EAF A   _biosfn_scroll              0 4855 A   
_biosfn_set_active_page     0 43D1 A   _biosfn_set_cursor_pos      0 425B A   
_biosfn_set_cursor_shape    0 4140 A   _biosfn_set_video_mode      0 3AB4 A   
_biosfn_switch_video_inter+ 0 6BFE A   _biosfn_write_char_attr     0 54B3 A   
_biosfn_write_char_only     0 56A8 A   _biosfn_write_pixel         0 5919 A   
_biosfn_write_string        0 6C00 A   _biosfn_write_teletype      0 5DC1 A   
_dac_regs                   0 0253 A   _display_info               0 35DD A   
_display_splash_screen      0 35DC A   _display_string             0 35FB A   
_find_vga_entry             0 7A5D A   _get_SS                     0 7BD5 A E 
_get_font_access            0 653F A   _inb                        0 7B9F A E 
_int10_func                 0 3622 A   _inw                        0 7BAA A E 
_line_to_vpti               0 0243 A   _memcpyb                    0 7AE9 A   
_memcpyw                    0 7B19 A   _memsetb                    0 7A9F A   
_memsetw                    0 7AC4 A   _outb                       0 7BB5 A E 
_outw                       0 7BC5 A E _palette0                   0 09D7 A   
_palette1                   0 0A97 A   _palette2                   0 0B57 A   
_palette3                   0 0C17 A   _printf                     0 7BD8 A E 
_read_byte                  0 7B49 A   _read_word                  0 7B5C A   
_release_font_access        0 6562 A   _set_scan_lines             0 6597 A   
_static_functionality       0 0F17 A   _vga_modes                  0 01C3 A   
_vgafont14                  0 1727 A   _vgafont14alt               0 3527 A   
_vgafont16                  0 2527 A   _vgafont16alt               0 3528 A   
_vgafont8                   0 0F27 A   _vgamem_copy_cga            0 468D A   
_vgamem_copy_pl4            0 4540 A   _vgamem_fill_cga            0 47A0 A   
_vgamem_fill_pl4            0 4602 A   _video_param_table          0 0257 A   
_video_save_pointer_table   0 35C0 A   _write_byte                 0 7B6F A   
_write_gfx_char_cga         0 51D8 A   _write_gfx_char_lin         0 53DE A   
_write_gfx_char_pl4         0 5063 A   _write_word                 0 7B87 A   
biosfn_enable_cursor_emula+ 0 6BDC A   biosfn_enable_default_pale+ 0 6B75 A   
biosfn_enable_grayscale_su+ 0 6BB8 A   biosfn_enable_video_addres+ 0 6B9A A   
biosfn_get_all_palette_reg  0 62C4 A   biosfn_get_ega_info         0 6AFE A   
biosfn_get_single_palette_+ 0 6292 A   biosfn_get_video_mode       0 618C A   
biosfn_group_0B             0 58A1 A   biosfn_group_10             0 61B3 A   
biosfn_group_1A             0 6CD9 A   biosfn_read_all_dac_reg     0 63B0 A   
biosfn_read_display_code    0 6CE2 A   biosfn_read_overscan_borde+ 0 62B6 A   
biosfn_read_pel_mask        0 63E3 A   biosfn_read_single_dac_reg  0 6395 A   
biosfn_read_video_dac_stat+ 0 63EE A   biosfn_select_vert_res      0 6B22 A   
biosfn_select_video_dac_co+ 0 6346 A   biosfn_set_all_dac_reg      0 631E A   
biosfn_set_all_palette_reg  0 623C A   biosfn_set_border_color     0 58AC A   
biosfn_set_display_code     0 6CF7 A   biosfn_set_overscan_border+ 0 6234 A   
biosfn_set_palette          0 58EB A   biosfn_set_pel_mask         0 63D8 A   
biosfn_set_single_dac_reg   0 6305 A   biosfn_set_single_palette_+ 0 621A A   
biosfn_set_text_block_spec+ 0 68A4 A   biosfn_toggle_intensity     0 6269 A   
get_dac_16_page             0 642A A   get_palette_loop            0 62CC A   
idiv_u                      0 6592 A   init_bios_area              0 3588 A   
init_vga_card               0 3529 A   int10_end                   0 01C1 A   
int10_group_10_unknown      0 6219 A   int10_normal                0 01A5 A   
int10_test_0B               0 0141 A   int10_test_1001             0 61B9 A   
int10_test_1002             0 61BF A   int10_test_1003             0 61C5 A   
int10_test_1007             0 61CC A   int10_test_1008             0 61D3 A   
int10_test_1009             0 61DA A   int10_test_1010             0 61E1 A   
int10_test_1012             0 61E8 A   int10_test_1013             0 61EF A   
int10_test_1015             0 61F6 A   int10_test_1017             0 61FD A   
int10_test_1018             0 6204 A   int10_test_1019             0 620B A   
int10_test_101A             0 6212 A   int10_test_101B             0 0196 A   
int10_test_1103             0 014B A   int10_test_12               0 0155 A   
int10_test_1A               0 0136 A   int10_test_BL30             0 0164 A   
int10_test_BL31             0 016E A   int10_test_BL32             0 0178 A   
int10_test_BL33             0 0182 A   int10_test_BL34             0 018C A   
memcpyb_end                 0 7B11 A   memcpyw_end                 0 7B41 A   
memsetb_end                 0 7ABE A   memsetw_end                 0 7AE3 A   
mode_ega_color              0 6B1E A   msg_vga_init                0 3545 A   
no_actl_reg1                0 6233 A   no_actl_reg2                0 62B5 A   
read_dac_loop               0 63C1 A   set_actl_normal             0 638E A   
set_cga_palette_loop        0 58F8 A   set_dac_16_page             0 6388 A   
set_dac_loop                0 632F A   set_dac_page                0 6374 A   
set_intensity_loop          0 58CA A   set_low_border              0 58C4 A   
set_palette_loop            0 624B A   set_retcode                 0 6B6E A   
set_vert_res                0 6B64 A   vert_res_200                0 6B5A A   
vert_res_350                0 6B50 A   vert_res_400                0 6B44 A   
vgabios_copyright           0 0052 A   vgabios_date                0 0044 A   
vgabios_end                 0 7D2A A   vgabios_entry_point         0 0003 A   
vgabios_init_func           0 0109 A   vgabios_int10_handler       0 012A A   
vgabios_license             0 007E A   vgabios_name                0 0022 A   
vgabios_start               0 0000 A   vgabios_version             0 0038 A   
vgabios_website             0 00B3 A   

00000 errors
00000 warnings
