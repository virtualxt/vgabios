00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios_.c"
00003                                           ! 1 typedef unsigned char Bit8u;
00004                                           !BCC_EOS
00005                                           ! 2 typedef unsigned short Bit16u;
00006                                           !BCC_EOS
00007                                           ! 3 typedef unsigned long Bit32u;
00008                                           !BCC_EOS
00009                                           ! 4 typedef unsigned short Boolean;
00010                                           !BCC_EOS
00011                                           ! 5 static Bit8u read_byte();
00012                                           !BCC_EOS
00013                                           ! 6 static Bit16u read_word();
00014                                           !BCC_EOS
00015                                           ! 7 static void write_byte();
00016                                           !BCC_EOS
00017                                           ! 8 static void write_word();
00018                                           !BCC_EOS
00019                                           ! 9 static Bit8u inb();
00020                                           !BCC_EOS
00021                                           ! 10 static Bit16u inw();
00022                                           !BCC_EOS
00023                                           ! 11 static void outb();
00024                                           !BCC_EOS
00025                                           ! 12 static void outw();
00026                                           !BCC_EOS
00027                                           ! 13 static Bit16u get_SS();
00028                                           !BCC_EOS
00029                                           ! 14 static void printf();
00030                                           !BCC_EOS
00031                                           ! 15 static void unimplemented();
00032                                           !BCC_EOS
00033                                           ! 16 static void unknown();
00034                                           !BCC_EOS
00035                                           ! 17 static Bit8u find_vga_entry();
00036                                           !BCC_EOS
00037                                           ! 18 static void memsetb();
00038                                           !BCC_EOS
00039                                           ! 19 static void memsetw();
00040                                           !BCC_EOS
00041                                           ! 20 static void memcpyb();
00042                                           !BCC_EOS
00043                                           ! 21 static void memcpyw();
00044                                           !BCC_EOS
00045                                           ! 22 static void biosfn_set_video_mode();
00046                                           !BCC_EOS
00047                                           ! 23 static void biosfn_set_cursor_shape();
00048                                           !BCC_EOS
00049                                           ! 24 static void biosfn_set_cursor_pos();
00050                                           !BCC_EOS
00051                                           ! 25 static void biosfn_get_cursor_pos();
00052                                           !BCC_EOS
00053                                           ! 26 static void biosfn_set_active_page();
00054                                           !BCC_EOS
00055                                           ! 27 static void biosfn_scroll();
00056                                           !BCC_EOS
00057                                           ! 28 static void biosfn_read_char_attr();
00058                                           !BCC_EOS
00059                                           ! 29 static void biosfn_write_char_attr();
00060                                           !BCC_EOS
00061                                           ! 30 static void biosfn_write_char_only();
00062                                           !BCC_EOS
00063                                           ! 31 static void biosfn_write_pixel();
00064                                           !BCC_EOS
00065                                           ! 32 static void biosfn_read_pixel();
00066                                           !BCC_EOS
00067                                           ! 33 static void biosfn_write_teletype();
00068                                           !BCC_EOS
00069                                           ! 34 static void biosfn_perform_gray_scale_summing();
00070                                           !BCC_EOS
00071                                           ! 35 static void biosfn_load_text_user_pat();
00072                                           !BCC_EOS
00073                                           ! 36 static void biosfn_load_text_8_14_pat();
00074                                           !BCC_EOS
00075                                           ! 37 static void biosfn_load_text_8_8_pat();
00076                                           !BCC_EOS
00077                                           ! 38 static void biosfn_load_text_8_16_pat();
00078                                           !BCC_EOS
00079                                           ! 39 static void biosfn_load_gfx_8_8_chars();
00080                                           !BCC_EOS
00081                                           ! 40 static void biosfn_load_gfx_user_chars();
00082                                           !BCC_EOS
00083                                           ! 41 static void biosfn_load_gfx_8_14_chars();
00084                                           !BCC_EOS
00085                                           ! 42 static void biosfn_load_gfx_8_8_dd_chars();
00086                                           !BCC_EOS
00087                                           ! 43 static void biosfn_load_gfx_8_16_chars();
00088                                           !BCC_EOS
00089                                           ! 44 static void biosfn_get_font_info();
00090                                           !BCC_EOS
00091                                           ! 45 static void biosfn_alternate_prtsc();
00092                                           !BCC_EOS
00093                                           ! 46 static void biosfn_switch_video_interface();
00094                                           !BCC_EOS
00095                                           ! 47 static void biosfn_enable_video_refresh_control();
00096                                           !BCC_EOS
00097                                           ! 48 static void biosfn_write_string();
00098                                           !BCC_EOS
00099                                           ! 49 static void biosfn_read_state_info();
00100                                           !BCC_EOS
00101                                           ! 50 static void biosfn_read_video_state_size();
00102                                           !BCC_EOS
00103                                           ! 51 static Bit16u biosfn_save_video_state();
00104                                           !BCC_EOS
00105                                           ! 52 static Bit16u biosfn_restore_video_state();
00106                                           !BCC_EOS
00107                                           ! 53 extern Bit8u video_save_pointer_table[];
00108                                           !BCC_EOS
00109                                           ! 54 #asm
00110                                           !BCC_ASM
00111                                           MACRO SET_INT_VECTOR
00112                                             push ds
00113                                             xor ax, ax
00114                                             mov ds, ax
00115                                             mov ax, ?3
00116                                             mov ?1*4, ax
00117                                             mov ax, ?2
00118                                             mov ?1*4+2, ax
00119                                             pop ds
00120                                           MEND
00121                                           ! 65 endasm
00122                                           !BCC_ENDASM
00123                                           ! 66 #asm
00124                                           !BCC_ASM
00125                                           
00126 0000                                      .rom
00127 0000                                      .org 0
00128                                           use16 186
00129                       00000000            vgabios_start:
00130 0000                        55            .byte 0x55, 0xaa
00131 0002                        40            .byte 0x40
00132                       00000003            vgabios_entry_point:
00133 0003           E9         0103              jmp vgabios_init_func
00134 001E                                      .org 0x1e
00135 001E                        49            .ascii "IBM"
00136 0021                        00            .byte 0x00
00137                       00000022            vgabios_name:
00138 0022                        50            .ascii "Plex86/Bochs VGABios"
00139 0036                        20            .ascii " "
00140 0037                        00            .byte 0x00
00141                       00000038            vgabios_version:
00142 0038                        63            .ascii "current-cvs"
00143 0043                        20            .ascii " "
00144                       00000044            vgabios_date:
00145 0044                        31            .ascii "14 Jun 2023"
00146 004F                        0A            .byte 0x0a,0x0d
00147 0051                        00            .byte 0x00
00148                       00000052            vgabios_copyright:
00149 0052                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00150 007B                        0A            .byte 0x0a,0x0d
00151 007D                        00            .byte 0x00
00152                       0000007E            vgabios_license:
00153 007E                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00154 00AE                        0A            .byte 0x0a,0x0d
00155 00B0                        0A            .byte 0x0a,0x0d
00156 00B2                        00            .byte 0x00
00157                       000000B3            vgabios_website:
00158 00B3                        50            .ascii "Please visit :"
00159 00C1                        0A            .byte 0x0a,0x0d
00160                                           ;;.ascii " . http://www.plex86.org"
00161                                           ;;.byte 0x0a,0x0d
00162 00C3                        20            .ascii " . http://bochs.sourceforge.net"
00163 00E2                        0A            .byte 0x0a,0x0d
00164 00E4                        20            .ascii " . http://www.nongnu.org/vgabios"
00165 0104                        0A            .byte 0x0a,0x0d
00166 0106                        0A            .byte 0x0a,0x0d
00167 0108                        00            .byte 0x00
00168                                           ;; ============================================================================================
00169                                           ;;
00170                                           ;; Init Entry point
00171                                           ;;
00172                                           ;; ============================================================================================
00173                       00000109            vgabios_init_func:
00174                                           ;; init vga card
00175 0109           E8         3410              call init_vga_card
00176                                           ;; init basic bios vars
00177 010C           E8         346C              call init_bios_area
00178                                           ;; set int10 vect
00179                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   010F           1E                           push ds
 +a   0110           31C0                         xor ax, ax
 +a   0112           8ED8                         mov ds, ax
 +a   0114           B8                   012D    mov ax,  #vgabios_int10_handler
 +a   0117           A3         0040              mov 0x10*4, ax
 +a   011A           B8                   C000    mov ax,  #0xC000
 +a   011D           A3         0042              mov 0x10*4+2, ax
 +a   0120           1F                           pop ds
00180                                           ;; display splash screen
00181 0121           E8         34AB              call _display_splash_screen
00182                                           ;; init video mode and clear the screen
00183 0124           B8                   0003    mov ax,#0x0003
00184 0127           CD                     10    int #0x10
00185                                           ;; show info
00186 0129           E8         34A4              call _display_info
00187 012C           CB                           retf
00188                                           ! 130 endasm
00189                                           !BCC_ENDASM
00190                                           ! 131 #asm
00191                                           !BCC_ASM
00192                       0000012D            vgabios_int10_handler:
00193 012D           9C                           pushf
00194 012E           80FC                   0F    cmp ah, #0x0f
00195 0131           75           05              jne int10_test_1A
00196 0133           E8         6049              call biosfn_get_video_mode
00197 0136           EB           7C              jmp int10_end
00198                       00000138            int10_test_1A:
00199 0138           80FC                   1A    cmp ah, #0x1a
00200 013B           75           05              jne int10_test_0B
00201 013D           E8         6B6D              call biosfn_group_1A
00202 0140           EB           72              jmp int10_end
00203                       00000142            int10_test_0B:
00204 0142           80FC                   0B    cmp ah, #0x0b
00205 0145           75           05              jne int10_test_1103
00206 0147           E8         574B              call biosfn_group_0B
00207 014A           EB           68              jmp int10_end
00208                       0000014C            int10_test_1103:
00209 014C           3D                   1103    cmp ax, #0x1103
00210 014F           75           05              jne int10_test_12
00211 0151           E8         6727              call biosfn_set_text_block_specifier
00212 0154           EB           5E              jmp int10_end
00213                       00000156            int10_test_12:
00214 0156           80FC                   12    cmp ah, #0x12
00215 0159           75           3C              jne int10_test_101B
00216 015B           80FB                   10    cmp bl, #0x10
00217 015E           75           05              jne int10_test_BL30
00218 0160           E8         6972              call biosfn_get_ega_info
00219 0163           EB           4F              jmp int10_end
00220                       00000165            int10_test_BL30:
00221 0165           80FB                   30    cmp bl, #0x30
00222 0168           75           05              jne int10_test_BL31
00223 016A           E8         698C              call biosfn_select_vert_res
00224 016D           EB           45              jmp int10_end
00225                       0000016F            int10_test_BL31:
00226 016F           80FB                   31    cmp bl, #0x31
00227 0172           75           05              jne int10_test_BL32
00228 0174           E8         69D5              call biosfn_enable_default_palette_loading
00229 0177           EB           3B              jmp int10_end
00230                       00000179            int10_test_BL32:
00231 0179           80FB                   32    cmp bl, #0x32
00232 017C           75           05              jne int10_test_BL33
00233 017E           E8         69ED              call biosfn_enable_video_addressing
00234 0181           EB           31              jmp int10_end
00235                       00000183            int10_test_BL33:
00236 0183           80FB                   33    cmp bl, #0x33
00237 0186           75           05              jne int10_test_BL34
00238 0188           E8         6A01              call biosfn_enable_grayscale_summing
00239 018B           EB           27              jmp int10_end
00240                       0000018D            int10_test_BL34:
00241 018D           80FB                   34    cmp bl, #0x34
00242 0190           75           14              jne int10_normal
00243 0192           E8         6A1B              call biosfn_enable_cursor_emulation
00244 0195           EB           1D              jmp int10_end
00245                       00000197            int10_test_101B:
00246 0197           3D                   101B    cmp ax, #0x101b
00247 019A           74           0A              je int10_normal
00248 019C           80FC                   10    cmp ah, #0x10
00249 019F           75           05              jne int10_normal
00250 01A1           E8         6002              call biosfn_group_10
00251 01A4           EB           0E              jmp int10_end
00252                       000001A6            int10_normal:
00253 01A6           06                           push es
00254 01A7           1E                           push ds
00255 01A8           60                           pusha
00256                                           ;; We have to set ds to access the right data segment
00257 01A9           BB                   C000    mov bx, #0xc000
00258 01AC           8EDB                         mov ds, bx
00259 01AE           E8         3464              call _int10_func
00260 01B1           61                           popa
00261 01B2           1F                           pop ds
00262 01B3           07                           pop es
00263                       000001B4            int10_end:
00264 01B4           9D                           popf
00265 01B5           CF                           iret
00266                                           ! 206 endasm
00267                                           !BCC_ENDASM
00268                                           ! 207 typedef struct
00269                                           ! 208 {Bit8u svgamode;
00270                                           !BCC_EOS
00271                                           ! 209  Bit8u class;
00272                                           !BCC_EOS
00273                                           ! 210  Bit8u memmodel;
00274                                           !BCC_EOS
00275                                           ! 211  Bit8u pixbits;
00276                                           !BCC_EOS
00277                                           ! 212  Bit16u sstart;
00278                                           !BCC_EOS
00279                                           ! 213  Bit8u pelmask;
00280                                           !BCC_EOS
00281                                           ! 214  Bit8u dacmodel;
00282                                           !BCC_EOS
00283                                           ! 215 } VGAMODES;
00284                                           !BCC_EOS
00285                                           ! 216 static VGAMODES vga_modes[15 +1]=
00286                                           ! 217 {
00287                                           
00288                       000001B6            _vga_modes:
00289                                           ! 218  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00290 01B6                        00            .byte	0
00291 01B7                        00            .byte	0
00292 01B8                        00            .byte	0
00293 01B9                        04            .byte	4
00294 01BA                      B800            .word	$B800
00295 01BC                        FF            .byte	$FF
00296 01BD                        02            .byte	2
00297                                           ! 219  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00298 01BE                        01            .byte	1
00299 01BF                        00            .byte	0
00300 01C0                        00            .byte	0
00301 01C1                        04            .byte	4
00302 01C2                      B800            .word	$B800
00303 01C4                        FF            .byte	$FF
00304 01C5                        02            .byte	2
00305                                           ! 220  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00306 01C6                        02            .byte	2
00307 01C7                        00            .byte	0
00308 01C8                        00            .byte	0
00309 01C9                        04            .byte	4
00310 01CA                      B800            .word	$B800
00311 01CC                        FF            .byte	$FF
00312 01CD                        02            .byte	2
00313                                           ! 221  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00314 01CE                        03            .byte	3
00315 01CF                        00            .byte	0
00316 01D0                        00            .byte	0
00317 01D1                        04            .byte	4
00318 01D2                      B800            .word	$B800
00319 01D4                        FF            .byte	$FF
00320 01D5                        02            .byte	2
00321                                           ! 222  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00322 01D6                        04            .byte	4
00323 01D7                        01            .byte	1
00324 01D8                        02            .byte	2
00325 01D9                        02            .byte	2
00326 01DA                      B800            .word	$B800
00327 01DC                        FF            .byte	$FF
00328 01DD                        01            .byte	1
00329                                           ! 223  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00330 01DE                        05            .byte	5
00331 01DF                        01            .byte	1
00332 01E0                        02            .byte	2
00333 01E1                        02            .byte	2
00334 01E2                      B800            .word	$B800
00335 01E4                        FF            .byte	$FF
00336 01E5                        01            .byte	1
00337                                           ! 224  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00338 01E6                        06            .byte	6
00339 01E7                        01            .byte	1
00340 01E8                        02            .byte	2
00341 01E9                        01            .byte	1
00342 01EA                      B800            .word	$B800
00343 01EC                        FF            .byte	$FF
00344 01ED                        01            .byte	1
00345                                           ! 225  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00346 01EE                        07            .byte	7
00347 01EF                        00            .byte	0
00348 01F0                        01            .byte	1
00349 01F1                        04            .byte	4
00350 01F2                      B000            .word	$B000
00351 01F4                        FF            .byte	$FF
00352 01F5                        00            .byte	0
00353                                           ! 226  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00354 01F6                        0D            .byte	$D
00355 01F7                        01            .byte	1
00356 01F8                        04            .byte	4
00357 01F9                        04            .byte	4
00358 01FA                      A000            .word	$A000
00359 01FC                        FF            .byte	$FF
00360 01FD                        01            .byte	1
00361                                           ! 227  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00362 01FE                        0E            .byte	$E
00363 01FF                        01            .byte	1
00364 0200                        04            .byte	4
00365 0201                        04            .byte	4
00366 0202                      A000            .word	$A000
00367 0204                        FF            .byte	$FF
00368 0205                        01            .byte	1
00369                                           ! 228  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00370 0206                        0F            .byte	$F
00371 0207                        01            .byte	1
00372 0208                        03            .byte	3
00373 0209                        01            .byte	1
00374 020A                      A000            .word	$A000
00375 020C                        FF            .byte	$FF
00376 020D                        00            .byte	0
00377                                           ! 229  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00378 020E                        10            .byte	$10
00379 020F                        01            .byte	1
00380 0210                        04            .byte	4
00381 0211                        04            .byte	4
00382 0212                      A000            .word	$A000
00383 0214                        FF            .byte	$FF
00384 0215                        02            .byte	2
00385                                           ! 230  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00386 0216                        11            .byte	$11
00387 0217                        01            .byte	1
00388 0218                        03            .byte	3
00389 0219                        01            .byte	1
00390 021A                      A000            .word	$A000
00391 021C                        FF            .byte	$FF
00392 021D                        02            .byte	2
00393                                           ! 231  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00394 021E                        12            .byte	$12
00395 021F                        01            .byte	1
00396 0220                        04            .byte	4
00397 0221                        04            .byte	4
00398 0222                      A000            .word	$A000
00399 0224                        FF            .byte	$FF
00400 0225                        02            .byte	2
00401                                           ! 232  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00402 0226                        13            .byte	$13
00403 0227                        01            .byte	1
00404 0228                        05            .byte	5
00405 0229                        08            .byte	8
00406 022A                      A000            .word	$A000
00407 022C                        FF            .byte	$FF
00408 022D                        03            .byte	3
00409                                           ! 233  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00410 022E                        6A            .byte	$6A
00411 022F                        01            .byte	1
00412 0230                        04            .byte	4
00413 0231                        04            .byte	4
00414 0232                      A000            .word	$A000
00415 0234                        FF            .byte	$FF
00416 0235                        02            .byte	2
00417                                           ! 234 };
00418                                           !BCC_EOS
00419                                           ! 235 static Bit8u line_to_vpti[15 +1]={
00420                       00000236            _line_to_vpti:
00421                                           ! 236     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00422 0236                        17            .byte	$17
00423 0237                        17            .byte	$17
00424 0238                        18            .byte	$18
00425 0239                        18            .byte	$18
00426 023A                        04            .byte	4
00427 023B                        05            .byte	5
00428 023C                        06            .byte	6
00429 023D                        07            .byte	7
00430                                           ! 237     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00431 023E                        0D            .byte	$D
00432 023F                        0E            .byte	$E
00433 0240                        11            .byte	$11
00434 0241                        12            .byte	$12
00435 0242                        1A            .byte	$1A
00436 0243                        1B            .byte	$1B
00437 0244                        1C            .byte	$1C
00438 0245                        1D            .byte	$1D
00439                                           ! 238 };
00440                                           !BCC_EOS
00441                                           ! 239 static Bit8u dac_regs[3 +1]=
00442                                           ! 240 {0x3f,0x3f,0x3f,0xff};
00443                       00000246            _dac_regs:
00444 0246                        3F            .byte	$3F
00445 0247                        3F            .byte	$3F
00446 0248                        3F            .byte	$3F
00447 0249                        FF            .byte	$FF
00448                                           !BCC_EOS
00449                                           ! 241 typedef struct {
00450                                           ! 242     Bit8u twidth;
00451                                           !BCC_EOS
00452                                           ! 243     Bit8u theightm1;
00453                                           !BCC_EOS
00454                                           ! 244     Bit8u cheight;
00455                                           !BCC_EOS
00456                                           ! 245     Bit8u slength_l;
00457                                           !BCC_EOS
00458                                           ! 246     Bit8u slength_h;
00459                                           !BCC_EOS
00460                                           ! 247     Bit8u sequ_regs[4];
00461                                           !BCC_EOS
00462                                           ! 248     Bit8u miscreg;
00463                                           !BCC_EOS
00464                                           ! 249     Bit8u crtc_regs[25];
00465                                           !BCC_EOS
00466                                           ! 250     Bit8u actl_regs[20];
00467                                           !BCC_EOS
00468                                           ! 251     Bit8u grdc_regs[9];
00469                                           !BCC_EOS
00470                                           ! 252 } VideoParamTableEntry;
00471                                           !BCC_EOS
00472                                           ! 253 static VideoParamTableEntry video_param_table[30] = {
00473                       0000024A            _video_param_table:
00474                                           ! 254 {
00475                                           ! 255  0x00, 0x00
00476 024A                        00            .byte	0
00477                                           ! 255 , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00478 024B                        00            .byte	0
00479 024C                        00            .byte	0
00480 024D                        00            .byte	0
00481 024E                        00            .byte	0
00482 024F                        00            .byte	0
00483 0250                        00            .byte	0
00484 0251                        00            .byte	0
00485                                           ! 256  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00486 0252                        00            .byte	0
00487 0253                        00            .byte	0
00488 0254                        00            .byte	0
00489 0255                        00            .byte	0
00490 0256                        00            .byte	0
00491 0257                        00            .byte	0
00492 0258                        00            .byte	0
00493 0259                        00            .byte	0
00494                                           ! 257  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00495 025A                        00            .byte	0
00496 025B                        00            .byte	0
00497 025C                        00            .byte	0
00498 025D                        00            .byte	0
00499 025E                        00            .byte	0
00500 025F                        00            .byte	0
00501 0260                        00            .byte	0
00502 0261                        00            .byte	0
00503                                           ! 258  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00504 0262                        00            .byte	0
00505 0263                        00            .byte	0
00506 0264                        00            .byte	0
00507 0265                        00            .byte	0
00508 0266                        00            .byte	0
00509 0267                        00            .byte	0
00510 0268                        00            .byte	0
00511 0269                        00            .byte	0
00512                                           ! 259  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00513 026A                        00            .byte	0
00514 026B                        00            .byte	0
00515 026C                        00            .byte	0
00516 026D                        00            .byte	0
00517 026E                        00            .byte	0
00518 026F                        00            .byte	0
00519 0270                        00            .byte	0
00520 0271                        00            .byte	0
00521                                           ! 260  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00522 0272                        00            .byte	0
00523 0273                        00            .byte	0
00524 0274                        00            .byte	0
00525 0275                        00            .byte	0
00526 0276                        00            .byte	0
00527 0277                        00            .byte	0
00528 0278                        00            .byte	0
00529 0279                        00            .byte	0
00530                                           ! 261  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00531 027A                        00            .byte	0
00532 027B                        00            .byte	0
00533 027C                        00            .byte	0
00534 027D                        00            .byte	0
00535 027E                        00            .byte	0
00536 027F                        00            .byte	0
00537 0280                        00            .byte	0
00538 0281                        00            .byte	0
00539                                           ! 262  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00540 0282                        00            .byte	0
00541 0283                        00            .byte	0
00542 0284                        00            .byte	0
00543 0285                        00            .byte	0
00544 0286                        00            .byte	0
00545 0287                        00            .byte	0
00546 0288                        00            .byte	0
00547 0289                        00            .byte	0
00548                                           ! 263 },
00549                                           ! 264 {
00550                                           ! 265  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00551 028A                        00            .byte	0
00552 028B                        00            .byte	0
00553 028C                        00            .byte	0
00554 028D                        00            .byte	0
00555 028E                        00            .byte	0
00556 028F                        00            .byte	0
00557 0290                        00            .byte	0
00558 0291                        00            .byte	0
00559                                           ! 266  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00560 0292                        00            .byte	0
00561 0293                        00            .byte	0
00562 0294                        00            .byte	0
00563 0295                        00            .byte	0
00564 0296                        00            .byte	0
00565 0297                        00            .byte	0
00566 0298                        00            .byte	0
00567 0299                        00            .byte	0
00568                                           ! 267  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00569 029A                        00            .byte	0
00570 029B                        00            .byte	0
00571 029C                        00            .byte	0
00572 029D                        00            .byte	0
00573 029E                        00            .byte	0
00574 029F                        00            .byte	0
00575 02A0                        00            .byte	0
00576 02A1                        00            .byte	0
00577                                           ! 268  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00578 02A2                        00            .byte	0
00579 02A3                        00            .byte	0
00580 02A4                        00            .byte	0
00581 02A5                        00            .byte	0
00582 02A6                        00            .byte	0
00583 02A7                        00            .byte	0
00584 02A8                        00            .byte	0
00585 02A9                        00            .byte	0
00586                                           ! 269  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00587 02AA                        00            .byte	0
00588 02AB                        00            .byte	0
00589 02AC                        00            .byte	0
00590 02AD                        00            .byte	0
00591 02AE                        00            .byte	0
00592 02AF                        00            .byte	0
00593 02B0                        00            .byte	0
00594 02B1                        00            .byte	0
00595                                           ! 270  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00596 02B2                        00            .byte	0
00597 02B3                        00            .byte	0
00598 02B4                        00            .byte	0
00599 02B5                        00            .byte	0
00600 02B6                        00            .byte	0
00601 02B7                        00            .byte	0
00602 02B8                        00            .byte	0
00603 02B9                        00            .byte	0
00604                                           ! 271  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00605 02BA                        00            .byte	0
00606 02BB                        00            .byte	0
00607 02BC                        00            .byte	0
00608 02BD                        00            .byte	0
00609 02BE                        00            .byte	0
00610 02BF                        00            .byte	0
00611 02C0                        00            .byte	0
00612 02C1                        00            .byte	0
00613                                           ! 272  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00614 02C2                        00            .byte	0
00615 02C3                        00            .byte	0
00616 02C4                        00            .byte	0
00617 02C5                        00            .byte	0
00618 02C6                        00            .byte	0
00619 02C7                        00            .byte	0
00620 02C8                        00            .byte	0
00621 02C9                        00            .byte	0
00622                                           ! 273 },
00623                                           ! 274 {
00624                                           ! 275  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00625 02CA                        00            .byte	0
00626 02CB                        00            .byte	0
00627 02CC                        00            .byte	0
00628 02CD                        00            .byte	0
00629 02CE                        00            .byte	0
00630 02CF                        00            .byte	0
00631 02D0                        00            .byte	0
00632 02D1                        00            .byte	0
00633                                           ! 276  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00634 02D2                        00            .byte	0
00635 02D3                        00            .byte	0
00636 02D4                        00            .byte	0
00637 02D5                        00            .byte	0
00638 02D6                        00            .byte	0
00639 02D7                        00            .byte	0
00640 02D8                        00            .byte	0
00641 02D9                        00            .byte	0
00642                                           ! 277  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00643 02DA                        00            .byte	0
00644 02DB                        00            .byte	0
00645 02DC                        00            .byte	0
00646 02DD                        00            .byte	0
00647 02DE                        00            .byte	0
00648 02DF                        00            .byte	0
00649 02E0                        00            .byte	0
00650 02E1                        00            .byte	0
00651                                           ! 278  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00652 02E2                        00            .byte	0
00653 02E3                        00            .byte	0
00654 02E4                        00            .byte	0
00655 02E5                        00            .byte	0
00656 02E6                        00            .byte	0
00657 02E7                        00            .byte	0
00658 02E8                        00            .byte	0
00659 02E9                        00            .byte	0
00660                                           ! 279  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00661 02EA                        00            .byte	0
00662 02EB                        00            .byte	0
00663 02EC                        00            .byte	0
00664 02ED                        00            .byte	0
00665 02EE                        00            .byte	0
00666 02EF                        00            .byte	0
00667 02F0                        00            .byte	0
00668 02F1                        00            .byte	0
00669                                           ! 280  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00670 02F2                        00            .byte	0
00671 02F3                        00            .byte	0
00672 02F4                        00            .byte	0
00673 02F5                        00            .byte	0
00674 02F6                        00            .byte	0
00675 02F7                        00            .byte	0
00676 02F8                        00            .byte	0
00677 02F9                        00            .byte	0
00678                                           ! 281  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00679 02FA                        00            .byte	0
00680 02FB                        00            .byte	0
00681 02FC                        00            .byte	0
00682 02FD                        00            .byte	0
00683 02FE                        00            .byte	0
00684 02FF                        00            .byte	0
00685 0300                        00            .byte	0
00686 0301                        00            .byte	0
00687                                           ! 282  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00688 0302                        00            .byte	0
00689 0303                        00            .byte	0
00690 0304                        00            .byte	0
00691 0305                        00            .byte	0
00692 0306                        00            .byte	0
00693 0307                        00            .byte	0
00694 0308                        00            .byte	0
00695 0309                        00            .byte	0
00696                                           ! 283 },
00697                                           ! 284 {
00698                                           ! 285  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00699 030A                        00            .byte	0
00700 030B                        00            .byte	0
00701 030C                        00            .byte	0
00702 030D                        00            .byte	0
00703 030E                        00            .byte	0
00704 030F                        00            .byte	0
00705 0310                        00            .byte	0
00706 0311                        00            .byte	0
00707                                           ! 286  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00708 0312                        00            .byte	0
00709 0313                        00            .byte	0
00710 0314                        00            .byte	0
00711 0315                        00            .byte	0
00712 0316                        00            .byte	0
00713 0317                        00            .byte	0
00714 0318                        00            .byte	0
00715 0319                        00            .byte	0
00716                                           ! 287  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00717 031A                        00            .byte	0
00718 031B                        00            .byte	0
00719 031C                        00            .byte	0
00720 031D                        00            .byte	0
00721 031E                        00            .byte	0
00722 031F                        00            .byte	0
00723 0320                        00            .byte	0
00724 0321                        00            .byte	0
00725                                           ! 288  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00726 0322                        00            .byte	0
00727 0323                        00            .byte	0
00728 0324                        00            .byte	0
00729 0325                        00            .byte	0
00730 0326                        00            .byte	0
00731 0327                        00            .byte	0
00732 0328                        00            .byte	0
00733 0329                        00            .byte	0
00734                                           ! 289  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00735 032A                        00            .byte	0
00736 032B                        00            .byte	0
00737 032C                        00            .byte	0
00738 032D                        00            .byte	0
00739 032E                        00            .byte	0
00740 032F                        00            .byte	0
00741 0330                        00            .byte	0
00742 0331                        00            .byte	0
00743                                           ! 290  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00744 0332                        00            .byte	0
00745 0333                        00            .byte	0
00746 0334                        00            .byte	0
00747 0335                        00            .byte	0
00748 0336                        00            .byte	0
00749 0337                        00            .byte	0
00750 0338                        00            .byte	0
00751 0339                        00            .byte	0
00752                                           ! 291  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00753 033A                        00            .byte	0
00754 033B                        00            .byte	0
00755 033C                        00            .byte	0
00756 033D                        00            .byte	0
00757 033E                        00            .byte	0
00758 033F                        00            .byte	0
00759 0340                        00            .byte	0
00760 0341                        00            .byte	0
00761                                           ! 292  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00762 0342                        00            .byte	0
00763 0343                        00            .byte	0
00764 0344                        00            .byte	0
00765 0345                        00            .byte	0
00766 0346                        00            .byte	0
00767 0347                        00            .byte	0
00768 0348                        00            .byte	0
00769 0349                        00            .byte	0
00770                                           ! 293 },
00771                                           ! 294 {
00772                                           ! 295  40, 24, 8, 0x00, 0x08,
00773 034A                        28            .byte	$28
00774 034B                        18            .byte	$18
00775 034C                        08            .byte	8
00776 034D                        00            .byte	0
00777 034E                        08            .byte	8
00778                                           ! 296  0x09, 0x03, 0x00, 0x02,
00779 034F                        09            .byte	9
00780 0350                        03            .byte	3
00781 0351                        00            .byte	0
00782 0352                        02            .byte	2
00783                                           ! 297  0x63,
00784 0353                        63            .byte	$63
00785                                           ! 298  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00786 0354                        2D            .byte	$2D
00787 0355                        27            .byte	$27
00788 0356                        28            .byte	$28
00789 0357                        90            .byte	$90
00790 0358                        2B            .byte	$2B
00791 0359                        80            .byte	$80
00792 035A                        BF            .byte	$BF
00793 035B                        1F            .byte	$1F
00794                                           ! 299  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00795 035C                        00            .byte	0
00796 035D                        C1            .byte	$C1
00797 035E                        00            .byte	0
00798 035F                        00            .byte	0
00799 0360                        00            .byte	0
00800 0361                        00            .byte	0
00801 0362                        00            .byte	0
00802 0363                        00            .byte	0
00803                                           ! 300  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
00804 0364                        9C            .byte	$9C
00805 0365                        8E            .byte	$8E
00806 0366                        8F            .byte	$8F
00807 0367                        14            .byte	$14
00808 0368                        00            .byte	0
00809 0369                        96            .byte	$96
00810 036A                        B9            .byte	$B9
00811 036B                        A2            .byte	$A2
00812                                           ! 301  0xff,
00813 036C                        FF            .byte	$FF
00814                                           ! 302  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00815 036D                        00            .byte	0
00816 036E                        13            .byte	$13
00817 036F                        15            .byte	$15
00818 0370                        17            .byte	$17
00819 0371                        02            .byte	2
00820 0372                        04            .byte	4
00821 0373                        06            .byte	6
00822 0374                        07            .byte	7
00823                                           ! 303  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00824 0375                        10            .byte	$10
00825 0376                        11            .byte	$11
00826 0377                        12            .byte	$12
00827 0378                        13            .byte	$13
00828 0379                        14            .byte	$14
00829 037A                        15            .byte	$15
00830 037B                        16            .byte	$16
00831 037C                        17            .byte	$17
00832                                           ! 304  0x01, 0x00, 0x03, 0x00,
00833 037D                        01            .byte	1
00834 037E                        00            .byte	0
00835 037F                        03            .byte	3
00836 0380                        00            .byte	0
00837                                           ! 305  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00838 0381                        00            .byte	0
00839 0382                        00            .byte	0
00840 0383                        00            .byte	0
00841 0384                        00            .byte	0
00842 0385                        00            .byte	0
00843 0386                        30            .byte	$30
00844 0387                        0F            .byte	$F
00845 0388                        0F            .byte	$F
00846 0389                        FF            .byte	$FF
00847                                           ! 306 },
00848                                           ! 307 {
00849                                           ! 308  40, 24, 8, 0x00, 0x08,
00850 038A                        28            .byte	$28
00851 038B                        18            .byte	$18
00852 038C                        08            .byte	8
00853 038D                        00            .byte	0
00854 038E                        08            .byte	8
00855                                           ! 309  0x09, 0x03, 0x00, 0x02,
00856 038F                        09            .byte	9
00857 0390                        03            .byte	3
00858 0391                        00            .byte	0
00859 0392                        02            .byte	2
00860                                           ! 310  0x63,
00861 0393                        63            .byte	$63
00862                                           ! 311  0x2d, 0x27, 0x28, 0x9
00863 0394                        2D            .byte	$2D
00864 0395                        27            .byte	$27
00865 0396                        28            .byte	$28
00866                                           ! 311 0, 0x2b, 0x80, 0xbf, 0x1f,
00867 0397                        90            .byte	$90
00868 0398                        2B            .byte	$2B
00869 0399                        80            .byte	$80
00870 039A                        BF            .byte	$BF
00871 039B                        1F            .byte	$1F
00872                                           ! 312  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00873 039C                        00            .byte	0
00874 039D                        C1            .byte	$C1
00875 039E                        00            .byte	0
00876 039F                        00            .byte	0
00877 03A0                        00            .byte	0
00878 03A1                        00            .byte	0
00879 03A2                        00            .byte	0
00880 03A3                        00            .byte	0
00881                                           ! 313  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
00882 03A4                        9C            .byte	$9C
00883 03A5                        8E            .byte	$8E
00884 03A6                        8F            .byte	$8F
00885 03A7                        14            .byte	$14
00886 03A8                        00            .byte	0
00887 03A9                        96            .byte	$96
00888 03AA                        B9            .byte	$B9
00889 03AB                        A2            .byte	$A2
00890                                           ! 314  0xff,
00891 03AC                        FF            .byte	$FF
00892                                           ! 315  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00893 03AD                        00            .byte	0
00894 03AE                        13            .byte	$13
00895 03AF                        15            .byte	$15
00896 03B0                        17            .byte	$17
00897 03B1                        02            .byte	2
00898 03B2                        04            .byte	4
00899 03B3                        06            .byte	6
00900 03B4                        07            .byte	7
00901                                           ! 316  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00902 03B5                        10            .byte	$10
00903 03B6                        11            .byte	$11
00904 03B7                        12            .byte	$12
00905 03B8                        13            .byte	$13
00906 03B9                        14            .byte	$14
00907 03BA                        15            .byte	$15
00908 03BB                        16            .byte	$16
00909 03BC                        17            .byte	$17
00910                                           ! 317  0x01, 0x00, 0x03, 0x00,
00911 03BD                        01            .byte	1
00912 03BE                        00            .byte	0
00913 03BF                        03            .byte	3
00914 03C0                        00            .byte	0
00915                                           ! 318  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00916 03C1                        00            .byte	0
00917 03C2                        00            .byte	0
00918 03C3                        00            .byte	0
00919 03C4                        00            .byte	0
00920 03C5                        00            .byte	0
00921 03C6                        30            .byte	$30
00922 03C7                        0F            .byte	$F
00923 03C8                        0F            .byte	$F
00924 03C9                        FF            .byte	$FF
00925                                           ! 319 },
00926                                           ! 320 {
00927                                           ! 321  80, 24, 8, 0x00, 0x10,
00928 03CA                        50            .byte	$50
00929 03CB                        18            .byte	$18
00930 03CC                        08            .byte	8
00931 03CD                        00            .byte	0
00932 03CE                        10            .byte	$10
00933                                           ! 322  0x01, 0x01, 0x00, 0x06,
00934 03CF                        01            .byte	1
00935 03D0                        01            .byte	1
00936 03D1                        00            .byte	0
00937 03D2                        06            .byte	6
00938                                           ! 323  0x63,
00939 03D3                        63            .byte	$63
00940                                           ! 324  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
00941 03D4                        5F            .byte	$5F
00942 03D5                        4F            .byte	$4F
00943 03D6                        50            .byte	$50
00944 03D7                        82            .byte	$82
00945 03D8                        54            .byte	$54
00946 03D9                        80            .byte	$80
00947 03DA                        BF            .byte	$BF
00948 03DB                        1F            .byte	$1F
00949                                           ! 325  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00950 03DC                        00            .byte	0
00951 03DD                        C1            .byte	$C1
00952 03DE                        00            .byte	0
00953 03DF                        00            .byte	0
00954 03E0                        00            .byte	0
00955 03E1                        00            .byte	0
00956 03E2                        00            .byte	0
00957 03E3                        00            .byte	0
00958                                           ! 326  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
00959 03E4                        9C            .byte	$9C
00960 03E5                        8E            .byte	$8E
00961 03E6                        8F            .byte	$8F
00962 03E7                        28            .byte	$28
00963 03E8                        00            .byte	0
00964 03E9                        96            .byte	$96
00965 03EA                        B9            .byte	$B9
00966 03EB                        C2            .byte	$C2
00967                                           ! 327  0xff,
00968 03EC                        FF            .byte	$FF
00969                                           ! 328  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
00970 03ED                        00            .byte	0
00971 03EE                        17            .byte	$17
00972 03EF                        17            .byte	$17
00973 03F0                        17            .byte	$17
00974 03F1                        17            .byte	$17
00975 03F2                        17            .byte	$17
00976 03F3                        17            .byte	$17
00977 03F4                        17            .byte	$17
00978                                           ! 329  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
00979 03F5                        17            .byte	$17
00980 03F6                        17            .byte	$17
00981 03F7                        17            .byte	$17
00982 03F8                        17            .byte	$17
00983 03F9                        17            .byte	$17
00984 03FA                        17            .byte	$17
00985 03FB                        17            .byte	$17
00986 03FC                        17            .byte	$17
00987                                           ! 330  0x01, 0x00, 0x01, 0x00,
00988 03FD                        01            .byte	1
00989 03FE                        00            .byte	0
00990 03FF                        01            .byte	1
00991 0400                        00            .byte	0
00992                                           ! 331  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
00993 0401                        00            .byte	0
00994 0402                        00            .byte	0
00995 0403                        00            .byte	0
00996 0404                        00            .byte	0
00997 0405                        00            .byte	0
00998 0406                        00            .byte	0
00999 0407                        0D            .byte	$D
01000 0408                        0F            .byte	$F
01001 0409                        FF            .byte	$FF
01002                                           ! 332 },
01003                                           ! 333 {
01004                                           ! 334  80, 24, 16, 0x00, 0x10,
01005 040A                        50            .byte	$50
01006 040B                        18            .byte	$18
01007 040C                        10            .byte	$10
01008 040D                        00            .byte	0
01009 040E                        10            .byte	$10
01010                                           ! 335  0x00, 0x03, 0x00, 0x02,
01011 040F                        00            .byte	0
01012 0410                        03            .byte	3
01013 0411                        00            .byte	0
01014 0412                        02            .byte	2
01015                                           ! 336  0x66,
01016 0413                        66            .byte	$66
01017                                           ! 337  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01018 0414                        5F            .byte	$5F
01019 0415                        4F            .byte	$4F
01020 0416                        50            .byte	$50
01021 0417                        82            .byte	$82
01022 0418                        55            .byte	$55
01023 0419                        81            .byte	$81
01024 041A                        BF            .byte	$BF
01025 041B                        1F            .byte	$1F
01026                                           ! 338  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01027 041C                        00            .byte	0
01028 041D                        4F            .byte	$4F
01029 041E                        0D            .byte	$D
01030 041F                        0E            .byte	$E
01031 0420                        00            .byte	0
01032 0421                        00            .byte	0
01033 0422                        00            .byte	0
01034 0423                        00            .byte	0
01035                                           ! 339  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01036 0424                        9C            .byte	$9C
01037 0425                        8E            .byte	$8E
01038 0426                        8F            .byte	$8F
01039 0427                        28            .byte	$28
01040 0428                        0F            .byte	$F
01041 0429                        96            .byte	$96
01042 042A                        B9            .byte	$B9
01043 042B                        A3            .byte	$A3
01044                                           ! 340  0xff,
01045 042C                        FF            .byte	$FF
01046                                           ! 341  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01047 042D                        00            .byte	0
01048 042E                        08            .byte	8
01049 042F                        08            .byte	8
01050 0430                        08            .byte	8
01051 0431                        08            .byte	8
01052 0432                        08            .byte	8
01053 0433                        08            .byte	8
01054 0434                        08            .byte	8
01055                                           ! 342  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01056 0435                        10            .byte	$10
01057 0436                        18            .byte	$18
01058 0437                        18            .byte	$18
01059 0438                        18            .byte	$18
01060 0439                        18            .byte	$18
01061 043A                        18            .byte	$18
01062 043B                        18            .byte	$18
01063 043C                        18            .byte	$18
01064                                           ! 343  0x0e, 0x00, 0x0f, 0x08,
01065 043D                        0E            .byte	$E
01066 043E                        00            .byte	0
01067 043F                        0F            .byte	$F
01068 0440                        08            .byte	8
01069                                           ! 344  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01070 0441                        00            .byte	0
01071 0442                        00            .byte	0
01072 0443                        00            .byte	0
01073 0444                        00            .byte	0
01074 0445                        00            .byte	0
01075 0446                        10            .byte	$10
01076 0447                        0A            .byte	$A
01077 0448                        0F            .byte	$F
01078 0449                        FF            .byte	$FF
01079                                           ! 345 },
01080                                           ! 346 {
01081                                           ! 347  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01082 044A                        00            .byte	0
01083 044B                        00            .byte	0
01084 044C                        00            .byte	0
01085 044D                        00            .byte	0
01086 044E                        00            .byte	0
01087 044F                        00            .byte	0
01088 0450                        00            .byte	0
01089 0451                        00            .byte	0
01090                                           ! 348  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01091 0452                        00            .byte	0
01092 0453                        00            .byte	0
01093 0454                        00            .byte	0
01094 0455                        00            .byte	0
01095 0456                        00            .byte	0
01096 0457                        00            .byte	0
01097 0458                        00            .byte	0
01098 0459                        00            .byte	0
01099                                           ! 349  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01100 045A                        00            .byte	0
01101 045B                        00            .byte	0
01102 045C                        00            .byte	0
01103 045D                        00            .byte	0
01104 045E                        00            .byte	0
01105 045F                        00            .byte	0
01106 0460                        00            .byte	0
01107 0461                        00            .byte	0
01108                                           ! 350  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01109 0462                        00            .byte	0
01110 0463                        00            .byte	0
01111 0464                        00            .byte	0
01112 0465                        00            .byte	0
01113 0466                        00            .byte	0
01114 0467                        00            .byte	0
01115 0468                        00            .byte	0
01116 0469                        00            .byte	0
01117                                           ! 351  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01118 046A                        00            .byte	0
01119 046B                        00            .byte	0
01120 046C                        00            .byte	0
01121 046D                        00            .byte	0
01122 046E                        00            .byte	0
01123 046F                        00            .byte	0
01124 0470                        00            .byte	0
01125 0471                        00            .byte	0
01126                                           ! 352  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01127 0472                        00            .byte	0
01128 0473                        00            .byte	0
01129 0474                        00            .byte	0
01130 0475                        00            .byte	0
01131 0476                        00            .byte	0
01132 0477                        00            .byte	0
01133 0478                        00            .byte	0
01134 0479                        00            .byte	0
01135                                           ! 353  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01136 047A                        00            .byte	0
01137 047B                        00            .byte	0
01138 047C                        00            .byte	0
01139 047D                        00            .byte	0
01140 047E                        00            .byte	0
01141 047F                        00            .byte	0
01142 0480                        00            .byte	0
01143 0481                        00            .byte	0
01144                                           ! 354  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01145 0482                        00            .byte	0
01146 0483                        00            .byte	0
01147 0484                        00            .byte	0
01148 0485                        00            .byte	0
01149 0486                        00            .byte	0
01150 0487                        00            .byte	0
01151 0488                        00            .byte	0
01152 0489                        00            .byte	0
01153                                           ! 355 },
01154                                           ! 356 {
01155                                           ! 357  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01156 048A                        00            .byte	0
01157 048B                        00            .byte	0
01158 048C                        00            .byte	0
01159 048D                        00            .byte	0
01160 048E                        00            .byte	0
01161 048F                        00            .byte	0
01162 0490                        00            .byte	0
01163 0491                        00            .byte	0
01164                                           ! 358  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01165 0492                        00            .byte	0
01166 0493                        00            .byte	0
01167 0494                        00            .byte	0
01168 0495                        00            .byte	0
01169 0496                        00            .byte	0
01170 0497                        00            .byte	0
01171 0498                        00            .byte	0
01172 0499                        00            .byte	0
01173                                           ! 359  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01174 049A                        00            .byte	0
01175 049B                        00            .byte	0
01176 049C                        00            .byte	0
01177 049D                        00            .byte	0
01178 049E                        00            .byte	0
01179 049F                        00            .byte	0
01180 04A0                        00            .byte	0
01181 04A1                        00            .byte	0
01182                                           ! 360  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01183 04A2                        00            .byte	0
01184 04A3                        00            .byte	0
01185 04A4                        00            .byte	0
01186 04A5                        00            .byte	0
01187 04A6                        00            .byte	0
01188 04A7                        00            .byte	0
01189 04A8                        00            .byte	0
01190 04A9                        00            .byte	0
01191                                           ! 361  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01192 04AA                        00            .byte	0
01193 04AB                        00            .byte	0
01194 04AC                        00            .byte	0
01195 04AD                        00            .byte	0
01196 04AE                        00            .byte	0
01197 04AF                        00            .byte	0
01198 04B0                        00            .byte	0
01199 04B1                        00            .byte	0
01200                                           ! 362  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01201 04B2                        00            .byte	0
01202 04B3                        00            .byte	0
01203 04B4                        00            .byte	0
01204 04B5                        00            .byte	0
01205 04B6                        00            .byte	0
01206 04B7                        00            .byte	0
01207 04B8                        00            .byte	0
01208 04B9                        00            .byte	0
01209                                           ! 363  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01210 04BA                        00            .byte	0
01211 04BB                        00            .byte	0
01212 04BC                        00            .byte	0
01213 04BD                        00            .byte	0
01214 04BE                        00            .byte	0
01215 04BF                        00            .byte	0
01216 04C0                        00            .byte	0
01217 04C1                        00            .byte	0
01218                                           ! 364  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01219 04C2                        00            .byte	0
01220 04C3                        00            .byte	0
01221 04C4                        00            .byte	0
01222 04C5                        00            .byte	0
01223 04C6                        00            .byte	0
01224 04C7                        00            .byte	0
01225 04C8                        00            .byte	0
01226 04C9                        00            .byte	0
01227                                           ! 365 },
01228                                           ! 366 {
01229                                           ! 367  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01230 04CA                        00            .byte	0
01231 04CB                        00            .byte	0
01232 04CC                        00            .byte	0
01233 04CD                        00            .byte	0
01234 04CE                        00            .byte	0
01235 04CF                        00            .byte	0
01236 04D0                        00            .byte	0
01237 04D1                        00            .byte	0
01238                                           ! 368  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01239 04D2                        00            .byte	0
01240 04D3                        00            .byte	0
01241 04D4                        00            .byte	0
01242 04D5                        00            .byte	0
01243 04D6                        00            .byte	0
01244 04D7                        00            .byte	0
01245 04D8                        00            .byte	0
01246 04D9                        00            .byte	0
01247                                           ! 369  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01248 04DA                        00            .byte	0
01249 04DB                        00            .byte	0
01250 04DC                        00            .byte	0
01251 04DD                        00            .byte	0
01252 04DE                        00            .byte	0
01253 04DF                        00            .byte	0
01254 04E0                        00            .byte	0
01255 04E1                        00            .byte	0
01256                                           ! 370  0x00
01257                                           ! 370 , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01258 04E2                        00            .byte	0
01259 04E3                        00            .byte	0
01260 04E4                        00            .byte	0
01261 04E5                        00            .byte	0
01262 04E6                        00            .byte	0
01263 04E7                        00            .byte	0
01264 04E8                        00            .byte	0
01265 04E9                        00            .byte	0
01266                                           ! 371  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01267 04EA                        00            .byte	0
01268 04EB                        00            .byte	0
01269 04EC                        00            .byte	0
01270 04ED                        00            .byte	0
01271 04EE                        00            .byte	0
01272 04EF                        00            .byte	0
01273 04F0                        00            .byte	0
01274 04F1                        00            .byte	0
01275                                           ! 372  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01276 04F2                        00            .byte	0
01277 04F3                        00            .byte	0
01278 04F4                        00            .byte	0
01279 04F5                        00            .byte	0
01280 04F6                        00            .byte	0
01281 04F7                        00            .byte	0
01282 04F8                        00            .byte	0
01283 04F9                        00            .byte	0
01284                                           ! 373  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01285 04FA                        00            .byte	0
01286 04FB                        00            .byte	0
01287 04FC                        00            .byte	0
01288 04FD                        00            .byte	0
01289 04FE                        00            .byte	0
01290 04FF                        00            .byte	0
01291 0500                        00            .byte	0
01292 0501                        00            .byte	0
01293                                           ! 374  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01294 0502                        00            .byte	0
01295 0503                        00            .byte	0
01296 0504                        00            .byte	0
01297 0505                        00            .byte	0
01298 0506                        00            .byte	0
01299 0507                        00            .byte	0
01300 0508                        00            .byte	0
01301 0509                        00            .byte	0
01302                                           ! 375 },
01303                                           ! 376 {
01304                                           ! 377  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01305 050A                        00            .byte	0
01306 050B                        00            .byte	0
01307 050C                        00            .byte	0
01308 050D                        00            .byte	0
01309 050E                        00            .byte	0
01310 050F                        00            .byte	0
01311 0510                        00            .byte	0
01312 0511                        00            .byte	0
01313                                           ! 378  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01314 0512                        00            .byte	0
01315 0513                        00            .byte	0
01316 0514                        00            .byte	0
01317 0515                        00            .byte	0
01318 0516                        00            .byte	0
01319 0517                        00            .byte	0
01320 0518                        00            .byte	0
01321 0519                        00            .byte	0
01322                                           ! 379  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01323 051A                        00            .byte	0
01324 051B                        00            .byte	0
01325 051C                        00            .byte	0
01326 051D                        00            .byte	0
01327 051E                        00            .byte	0
01328 051F                        00            .byte	0
01329 0520                        00            .byte	0
01330 0521                        00            .byte	0
01331                                           ! 380  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01332 0522                        00            .byte	0
01333 0523                        00            .byte	0
01334 0524                        00            .byte	0
01335 0525                        00            .byte	0
01336 0526                        00            .byte	0
01337 0527                        00            .byte	0
01338 0528                        00            .byte	0
01339 0529                        00            .byte	0
01340                                           ! 381  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01341 052A                        00            .byte	0
01342 052B                        00            .byte	0
01343 052C                        00            .byte	0
01344 052D                        00            .byte	0
01345 052E                        00            .byte	0
01346 052F                        00            .byte	0
01347 0530                        00            .byte	0
01348 0531                        00            .byte	0
01349                                           ! 382  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01350 0532                        00            .byte	0
01351 0533                        00            .byte	0
01352 0534                        00            .byte	0
01353 0535                        00            .byte	0
01354 0536                        00            .byte	0
01355 0537                        00            .byte	0
01356 0538                        00            .byte	0
01357 0539                        00            .byte	0
01358                                           ! 383  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01359 053A                        00            .byte	0
01360 053B                        00            .byte	0
01361 053C                        00            .byte	0
01362 053D                        00            .byte	0
01363 053E                        00            .byte	0
01364 053F                        00            .byte	0
01365 0540                        00            .byte	0
01366 0541                        00            .byte	0
01367                                           ! 384  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01368 0542                        00            .byte	0
01369 0543                        00            .byte	0
01370 0544                        00            .byte	0
01371 0545                        00            .byte	0
01372 0546                        00            .byte	0
01373 0547                        00            .byte	0
01374 0548                        00            .byte	0
01375 0549                        00            .byte	0
01376                                           ! 385 },
01377                                           ! 386 {
01378                                           ! 387  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01379 054A                        00            .byte	0
01380 054B                        00            .byte	0
01381 054C                        00            .byte	0
01382 054D                        00            .byte	0
01383 054E                        00            .byte	0
01384 054F                        00            .byte	0
01385 0550                        00            .byte	0
01386 0551                        00            .byte	0
01387                                           ! 388  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01388 0552                        00            .byte	0
01389 0553                        00            .byte	0
01390 0554                        00            .byte	0
01391 0555                        00            .byte	0
01392 0556                        00            .byte	0
01393 0557                        00            .byte	0
01394 0558                        00            .byte	0
01395 0559                        00            .byte	0
01396                                           ! 389  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01397 055A                        00            .byte	0
01398 055B                        00            .byte	0
01399 055C                        00            .byte	0
01400 055D                        00            .byte	0
01401 055E                        00            .byte	0
01402 055F                        00            .byte	0
01403 0560                        00            .byte	0
01404 0561                        00            .byte	0
01405                                           ! 390  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01406 0562                        00            .byte	0
01407 0563                        00            .byte	0
01408 0564                        00            .byte	0
01409 0565                        00            .byte	0
01410 0566                        00            .byte	0
01411 0567                        00            .byte	0
01412 0568                        00            .byte	0
01413 0569                        00            .byte	0
01414                                           ! 391  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01415 056A                        00            .byte	0
01416 056B                        00            .byte	0
01417 056C                        00            .byte	0
01418 056D                        00            .byte	0
01419 056E                        00            .byte	0
01420 056F                        00            .byte	0
01421 0570                        00            .byte	0
01422 0571                        00            .byte	0
01423                                           ! 392  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01424 0572                        00            .byte	0
01425 0573                        00            .byte	0
01426 0574                        00            .byte	0
01427 0575                        00            .byte	0
01428 0576                        00            .byte	0
01429 0577                        00            .byte	0
01430 0578                        00            .byte	0
01431 0579                        00            .byte	0
01432                                           ! 393  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01433 057A                        00            .byte	0
01434 057B                        00            .byte	0
01435 057C                        00            .byte	0
01436 057D                        00            .byte	0
01437 057E                        00            .byte	0
01438 057F                        00            .byte	0
01439 0580                        00            .byte	0
01440 0581                        00            .byte	0
01441                                           ! 394  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01442 0582                        00            .byte	0
01443 0583                        00            .byte	0
01444 0584                        00            .byte	0
01445 0585                        00            .byte	0
01446 0586                        00            .byte	0
01447 0587                        00            .byte	0
01448 0588                        00            .byte	0
01449 0589                        00            .byte	0
01450                                           ! 395 },
01451                                           ! 396 {
01452                                           ! 397  40, 24, 8, 0x00, 0x20,
01453 058A                        28            .byte	$28
01454 058B                        18            .byte	$18
01455 058C                        08            .byte	8
01456 058D                        00            .byte	0
01457 058E                        20            .byte	$20
01458                                           ! 398  0x09, 0x0f, 0x00, 0x06,
01459 058F                        09            .byte	9
01460 0590                        0F            .byte	$F
01461 0591                        00            .byte	0
01462 0592                        06            .byte	6
01463                                           ! 399  0x63,
01464 0593                        63            .byte	$63
01465                                           ! 400  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01466 0594                        2D            .byte	$2D
01467 0595                        27            .byte	$27
01468 0596                        28            .byte	$28
01469 0597                        90            .byte	$90
01470 0598                        2B            .byte	$2B
01471 0599                        80            .byte	$80
01472 059A                        BF            .byte	$BF
01473 059B                        1F            .byte	$1F
01474                                           ! 401  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01475 059C                        00            .byte	0
01476 059D                        C0            .byte	$C0
01477 059E                        00            .byte	0
01478 059F                        00            .byte	0
01479 05A0                        00            .byte	0
01480 05A1                        00            .byte	0
01481 05A2                        00            .byte	0
01482 05A3                        00            .byte	0
01483                                           ! 402  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01484 05A4                        9C            .byte	$9C
01485 05A5                        8E            .byte	$8E
01486 05A6                        8F            .byte	$8F
01487 05A7                        14            .byte	$14
01488 05A8                        00            .byte	0
01489 05A9                        96            .byte	$96
01490 05AA                        B9            .byte	$B9
01491 05AB                        E3            .byte	$E3
01492                                           ! 403  0xff,
01493 05AC                        FF            .byte	$FF
01494                                           ! 404  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01495 05AD                        00            .byte	0
01496 05AE                        01            .byte	1
01497 05AF                        02            .byte	2
01498 05B0                        03            .byte	3
01499 05B1                        04            .byte	4
01500 05B2                        05            .byte	5
01501 05B3                        06            .byte	6
01502 05B4                        07            .byte	7
01503                                           ! 405  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01504 05B5                        10            .byte	$10
01505 05B6                        11            .byte	$11
01506 05B7                        12            .byte	$12
01507 05B8                        13            .byte	$13
01508 05B9                        14            .byte	$14
01509 05BA                        15            .byte	$15
01510 05BB                        16            .byte	$16
01511 05BC                        17            .byte	$17
01512                                           ! 406  0x01, 0x00, 0x0f, 0x00,
01513 05BD                        01            .byte	1
01514 05BE                        00            .byte	0
01515 05BF                        0F            .byte	$F
01516 05C0                        00            .byte	0
01517                                           ! 407  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01518 05C1                        00            .byte	0
01519 05C2                        00            .byte	0
01520 05C3                        00            .byte	0
01521 05C4                        00            .byte	0
01522 05C5                        00            .byte	0
01523 05C6                        00            .byte	0
01524 05C7                        05            .byte	5
01525 05C8                        0F            .byte	$F
01526 05C9                        FF            .byte	$FF
01527                                           ! 408 },
01528                                           ! 409 {
01529                                           ! 410  80, 24, 8, 0x00, 0x40,
01530 05CA                        50            .byte	$50
01531 05CB                        18            .byte	$18
01532 05CC                        08            .byte	8
01533 05CD                        00            .byte	0
01534 05CE                        40            .byte	$40
01535                                           ! 411  0x01, 0x0f, 0x00, 0x06,
01536 05CF                        01            .byte	1
01537 05D0                        0F            .byte	$F
01538 05D1                        00            .byte	0
01539 05D2                        06            .byte	6
01540                                           ! 412  0x63,
01541 05D3                        63            .byte	$63
01542                                           ! 413  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01543 05D4                        5F            .byte	$5F
01544 05D5                        4F            .byte	$4F
01545 05D6                        50            .byte	$50
01546 05D7                        82            .byte	$82
01547 05D8                        54            .byte	$54
01548 05D9                        80            .byte	$80
01549 05DA                        BF            .byte	$BF
01550 05DB                        1F            .byte	$1F
01551                                           ! 414  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01552 05DC                        00            .byte	0
01553 05DD                        C0            .byte	$C0
01554 05DE                        00            .byte	0
01555 05DF                        00            .byte	0
01556 05E0                        00            .byte	0
01557 05E1                        00            .byte	0
01558 05E2                        00            .byte	0
01559 05E3                        00            .byte	0
01560                                           ! 415  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01561 05E4                        9C            .byte	$9C
01562 05E5                        8E            .byte	$8E
01563 05E6                        8F            .byte	$8F
01564 05E7                        28            .byte	$28
01565 05E8                        00            .byte	0
01566 05E9                        96            .byte	$96
01567 05EA                        B9            .byte	$B9
01568 05EB                        E3            .byte	$E3
01569                                           ! 416  0xff,
01570 05EC                        FF            .byte	$FF
01571                                           ! 417  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01572 05ED                        00            .byte	0
01573 05EE                        01            .byte	1
01574 05EF                        02            .byte	2
01575 05F0                        03            .byte	3
01576 05F1                        04            .byte	4
01577 05F2                        05            .byte	5
01578 05F3                        06            .byte	6
01579 05F4                        07            .byte	7
01580                                           ! 418  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01581 05F5                        10            .byte	$10
01582 05F6                        11            .byte	$11
01583 05F7                        12            .byte	$12
01584 05F8                        13            .byte	$13
01585 05F9                        14            .byte	$14
01586 05FA                        15            .byte	$15
01587 05FB                        16            .byte	$16
01588 05FC                        17            .byte	$17
01589                                           ! 419  0x01, 0x00, 0x0f, 0x00,
01590 05FD                        01            .byte	1
01591 05FE                        00            .byte	0
01592 05FF                        0F            .byte	$F
01593 0600                        00            .byte	0
01594                                           ! 420  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01595 0601                        00            .byte	0
01596 0602                        00            .byte	0
01597 0603                        00            .byte	0
01598 0604                        00            .byte	0
01599 0605                        00            .byte	0
01600 0606                        00            .byte	0
01601 0607                        05            .byte	5
01602 0608                        0F            .byte	$F
01603 0609                        FF            .byte	$FF
01604                                           ! 421 },
01605                                           ! 422 {
01606                                           ! 423  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01607 060A                        00            .byte	0
01608 060B                        00            .byte	0
01609 060C                        00            .byte	0
01610 060D                        00            .byte	0
01611 060E                        00            .byte	0
01612 060F                        00            .byte	0
01613 0610                        00            .byte	0
01614 0611                        00            .byte	0
01615                                           ! 424  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01616 0612                        00            .byte	0
01617 0613                        00            .byte	0
01618 0614                        00            .byte	0
01619 0615                        00            .byte	0
01620 0616                        00            .byte	0
01621 0617                        00            .byte	0
01622 0618                        00            .byte	0
01623 0619                        00            .byte	0
01624                                           ! 425  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01625 061A                        00            .byte	0
01626 061B                        00            .byte	0
01627 061C                        00            .byte	0
01628 061D                        00            .byte	0
01629 061E                        00            .byte	0
01630 061F                        00            .byte	0
01631 0620                        00            .byte	0
01632 0621                        00            .byte	0
01633                                           ! 426  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01634 0622                        00            .byte	0
01635 0623                        00            .byte	0
01636 0624                        00            .byte	0
01637 0625                        00            .byte	0
01638 0626                        00            .byte	0
01639 0627                        00            .byte	0
01640 0628                        00            .byte	0
01641 0629                        00            .byte	0
01642                                           ! 427  0x00, 0x00, 0x00, 0x00, 0x
01643 062A                        00            .byte	0
01644 062B                        00            .byte	0
01645 062C                        00            .byte	0
01646 062D                        00            .byte	0
01647                                           ! 427 00, 0x00, 0x00, 0x00,
01648 062E                        00            .byte	0
01649 062F                        00            .byte	0
01650 0630                        00            .byte	0
01651 0631                        00            .byte	0
01652                                           ! 428  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01653 0632                        00            .byte	0
01654 0633                        00            .byte	0
01655 0634                        00            .byte	0
01656 0635                        00            .byte	0
01657 0636                        00            .byte	0
01658 0637                        00            .byte	0
01659 0638                        00            .byte	0
01660 0639                        00            .byte	0
01661                                           ! 429  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01662 063A                        00            .byte	0
01663 063B                        00            .byte	0
01664 063C                        00            .byte	0
01665 063D                        00            .byte	0
01666 063E                        00            .byte	0
01667 063F                        00            .byte	0
01668 0640                        00            .byte	0
01669 0641                        00            .byte	0
01670                                           ! 430  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01671 0642                        00            .byte	0
01672 0643                        00            .byte	0
01673 0644                        00            .byte	0
01674 0645                        00            .byte	0
01675 0646                        00            .byte	0
01676 0647                        00            .byte	0
01677 0648                        00            .byte	0
01678 0649                        00            .byte	0
01679                                           ! 431 },
01680                                           ! 432 {
01681                                           ! 433  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01682 064A                        00            .byte	0
01683 064B                        00            .byte	0
01684 064C                        00            .byte	0
01685 064D                        00            .byte	0
01686 064E                        00            .byte	0
01687 064F                        00            .byte	0
01688 0650                        00            .byte	0
01689 0651                        00            .byte	0
01690                                           ! 434  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01691 0652                        00            .byte	0
01692 0653                        00            .byte	0
01693 0654                        00            .byte	0
01694 0655                        00            .byte	0
01695 0656                        00            .byte	0
01696 0657                        00            .byte	0
01697 0658                        00            .byte	0
01698 0659                        00            .byte	0
01699                                           ! 435  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01700 065A                        00            .byte	0
01701 065B                        00            .byte	0
01702 065C                        00            .byte	0
01703 065D                        00            .byte	0
01704 065E                        00            .byte	0
01705 065F                        00            .byte	0
01706 0660                        00            .byte	0
01707 0661                        00            .byte	0
01708                                           ! 436  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01709 0662                        00            .byte	0
01710 0663                        00            .byte	0
01711 0664                        00            .byte	0
01712 0665                        00            .byte	0
01713 0666                        00            .byte	0
01714 0667                        00            .byte	0
01715 0668                        00            .byte	0
01716 0669                        00            .byte	0
01717                                           ! 437  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01718 066A                        00            .byte	0
01719 066B                        00            .byte	0
01720 066C                        00            .byte	0
01721 066D                        00            .byte	0
01722 066E                        00            .byte	0
01723 066F                        00            .byte	0
01724 0670                        00            .byte	0
01725 0671                        00            .byte	0
01726                                           ! 438  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01727 0672                        00            .byte	0
01728 0673                        00            .byte	0
01729 0674                        00            .byte	0
01730 0675                        00            .byte	0
01731 0676                        00            .byte	0
01732 0677                        00            .byte	0
01733 0678                        00            .byte	0
01734 0679                        00            .byte	0
01735                                           ! 439  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01736 067A                        00            .byte	0
01737 067B                        00            .byte	0
01738 067C                        00            .byte	0
01739 067D                        00            .byte	0
01740 067E                        00            .byte	0
01741 067F                        00            .byte	0
01742 0680                        00            .byte	0
01743 0681                        00            .byte	0
01744                                           ! 440  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01745 0682                        00            .byte	0
01746 0683                        00            .byte	0
01747 0684                        00            .byte	0
01748 0685                        00            .byte	0
01749 0686                        00            .byte	0
01750 0687                        00            .byte	0
01751 0688                        00            .byte	0
01752 0689                        00            .byte	0
01753                                           ! 441 },
01754                                           ! 442 {
01755                                           ! 443  80, 24, 14, 0x00, 0x80,
01756 068A                        50            .byte	$50
01757 068B                        18            .byte	$18
01758 068C                        0E            .byte	$E
01759 068D                        00            .byte	0
01760 068E                        80            .byte	$80
01761                                           ! 444  0x01, 0x0f, 0x00, 0x06,
01762 068F                        01            .byte	1
01763 0690                        0F            .byte	$F
01764 0691                        00            .byte	0
01765 0692                        06            .byte	6
01766                                           ! 445  0xa3,
01767 0693                        A3            .byte	$A3
01768                                           ! 446  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01769 0694                        5F            .byte	$5F
01770 0695                        4F            .byte	$4F
01771 0696                        50            .byte	$50
01772 0697                        82            .byte	$82
01773 0698                        54            .byte	$54
01774 0699                        80            .byte	$80
01775 069A                        BF            .byte	$BF
01776 069B                        1F            .byte	$1F
01777                                           ! 447  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01778 069C                        00            .byte	0
01779 069D                        40            .byte	$40
01780 069E                        00            .byte	0
01781 069F                        00            .byte	0
01782 06A0                        00            .byte	0
01783 06A1                        00            .byte	0
01784 06A2                        00            .byte	0
01785 06A3                        00            .byte	0
01786                                           ! 448  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01787 06A4                        83            .byte	$83
01788 06A5                        85            .byte	$85
01789 06A6                        5D            .byte	$5D
01790 06A7                        28            .byte	$28
01791 06A8                        0F            .byte	$F
01792 06A9                        63            .byte	$63
01793 06AA                        BA            .byte	$BA
01794 06AB                        E3            .byte	$E3
01795                                           ! 449  0xff,
01796 06AC                        FF            .byte	$FF
01797                                           ! 450  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
01798 06AD                        00            .byte	0
01799 06AE                        08            .byte	8
01800 06AF                        00            .byte	0
01801 06B0                        00            .byte	0
01802 06B1                        18            .byte	$18
01803 06B2                        18            .byte	$18
01804 06B3                        00            .byte	0
01805 06B4                        00            .byte	0
01806                                           ! 451  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
01807 06B5                        00            .byte	0
01808 06B6                        08            .byte	8
01809 06B7                        00            .byte	0
01810 06B8                        00            .byte	0
01811 06B9                        00            .byte	0
01812 06BA                        18            .byte	$18
01813 06BB                        00            .byte	0
01814 06BC                        00            .byte	0
01815                                           ! 452  0x01, 0x00, 0x01, 0x00,
01816 06BD                        01            .byte	1
01817 06BE                        00            .byte	0
01818 06BF                        01            .byte	1
01819 06C0                        00            .byte	0
01820                                           ! 453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01821 06C1                        00            .byte	0
01822 06C2                        00            .byte	0
01823 06C3                        00            .byte	0
01824 06C4                        00            .byte	0
01825 06C5                        00            .byte	0
01826 06C6                        00            .byte	0
01827 06C7                        05            .byte	5
01828 06C8                        0F            .byte	$F
01829 06C9                        FF            .byte	$FF
01830                                           ! 454 },
01831                                           ! 455 {
01832                                           ! 456  80, 24, 14, 0x00, 0x80,
01833 06CA                        50            .byte	$50
01834 06CB                        18            .byte	$18
01835 06CC                        0E            .byte	$E
01836 06CD                        00            .byte	0
01837 06CE                        80            .byte	$80
01838                                           ! 457  0x01, 0x0f, 0x00, 0x06,
01839 06CF                        01            .byte	1
01840 06D0                        0F            .byte	$F
01841 06D1                        00            .byte	0
01842 06D2                        06            .byte	6
01843                                           ! 458  0xa3,
01844 06D3                        A3            .byte	$A3
01845                                           ! 459  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01846 06D4                        5F            .byte	$5F
01847 06D5                        4F            .byte	$4F
01848 06D6                        50            .byte	$50
01849 06D7                        82            .byte	$82
01850 06D8                        54            .byte	$54
01851 06D9                        80            .byte	$80
01852 06DA                        BF            .byte	$BF
01853 06DB                        1F            .byte	$1F
01854                                           ! 460  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01855 06DC                        00            .byte	0
01856 06DD                        40            .byte	$40
01857 06DE                        00            .byte	0
01858 06DF                        00            .byte	0
01859 06E0                        00            .byte	0
01860 06E1                        00            .byte	0
01861 06E2                        00            .byte	0
01862 06E3                        00            .byte	0
01863                                           ! 461  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01864 06E4                        83            .byte	$83
01865 06E5                        85            .byte	$85
01866 06E6                        5D            .byte	$5D
01867 06E7                        28            .byte	$28
01868 06E8                        0F            .byte	$F
01869 06E9                        63            .byte	$63
01870 06EA                        BA            .byte	$BA
01871 06EB                        E3            .byte	$E3
01872                                           ! 462  0xff,
01873 06EC                        FF            .byte	$FF
01874                                           ! 463  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
01875 06ED                        00            .byte	0
01876 06EE                        01            .byte	1
01877 06EF                        02            .byte	2
01878 06F0                        03            .byte	3
01879 06F1                        04            .byte	4
01880 06F2                        05            .byte	5
01881 06F3                        14            .byte	$14
01882 06F4                        07            .byte	7
01883                                           ! 464  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
01884 06F5                        38            .byte	$38
01885 06F6                        39            .byte	$39
01886 06F7                        3A            .byte	$3A
01887 06F8                        3B            .byte	$3B
01888 06F9                        3C            .byte	$3C
01889 06FA                        3D            .byte	$3D
01890 06FB                        3E            .byte	$3E
01891 06FC                        3F            .byte	$3F
01892                                           ! 465  0x01, 0x00, 0x0f, 0x00,
01893 06FD                        01            .byte	1
01894 06FE                        00            .byte	0
01895 06FF                        0F            .byte	$F
01896 0700                        00            .byte	0
01897                                           ! 466  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01898 0701                        00            .byte	0
01899 0702                        00            .byte	0
01900 0703                        00            .byte	0
01901 0704                        00            .byte	0
01902 0705                        00            .byte	0
01903 0706                        00            .byte	0
01904 0707                        05            .byte	5
01905 0708                        0F            .byte	$F
01906 0709                        FF            .byte	$FF
01907                                           ! 467 },
01908                                           ! 468 {
01909                                           ! 469  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01910 070A                        00            .byte	0
01911 070B                        00            .byte	0
01912 070C                        00            .byte	0
01913 070D                        00            .byte	0
01914 070E                        00            .byte	0
01915 070F                        00            .byte	0
01916 0710                        00            .byte	0
01917 0711                        00            .byte	0
01918                                           ! 470  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01919 0712                        00            .byte	0
01920 0713                        00            .byte	0
01921 0714                        00            .byte	0
01922 0715                        00            .byte	0
01923 0716                        00            .byte	0
01924 0717                        00            .byte	0
01925 0718                        00            .byte	0
01926 0719                        00            .byte	0
01927                                           ! 471  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01928 071A                        00            .byte	0
01929 071B                        00            .byte	0
01930 071C                        00            .byte	0
01931 071D                        00            .byte	0
01932 071E                        00            .byte	0
01933 071F                        00            .byte	0
01934 0720                        00            .byte	0
01935 0721                        00            .byte	0
01936                                           ! 472  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01937 0722                        00            .byte	0
01938 0723                        00            .byte	0
01939 0724                        00            .byte	0
01940 0725                        00            .byte	0
01941 0726                        00            .byte	0
01942 0727                        00            .byte	0
01943 0728                        00            .byte	0
01944 0729                        00            .byte	0
01945                                           ! 473  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01946 072A                        00            .byte	0
01947 072B                        00            .byte	0
01948 072C                        00            .byte	0
01949 072D                        00            .byte	0
01950 072E                        00            .byte	0
01951 072F                        00            .byte	0
01952 0730                        00            .byte	0
01953 0731                        00            .byte	0
01954                                           ! 474  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01955 0732                        00            .byte	0
01956 0733                        00            .byte	0
01957 0734                        00            .byte	0
01958 0735                        00            .byte	0
01959 0736                        00            .byte	0
01960 0737                        00            .byte	0
01961 0738                        00            .byte	0
01962 0739                        00            .byte	0
01963                                           ! 475  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01964 073A                        00            .byte	0
01965 073B                        00            .byte	0
01966 073C                        00            .byte	0
01967 073D                        00            .byte	0
01968 073E                        00            .byte	0
01969 073F                        00            .byte	0
01970 0740                        00            .byte	0
01971 0741                        00            .byte	0
01972                                           ! 476  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01973 0742                        00            .byte	0
01974 0743                        00            .byte	0
01975 0744                        00            .byte	0
01976 0745                        00            .byte	0
01977 0746                        00            .byte	0
01978 0747                        00            .byte	0
01979 0748                        00            .byte	0
01980 0749                        00            .byte	0
01981                                           ! 477 },
01982                                           ! 478 {
01983                                           ! 479  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01984 074A                        00            .byte	0
01985 074B                        00            .byte	0
01986 074C                        00            .byte	0
01987 074D                        00            .byte	0
01988 074E                        00            .byte	0
01989 074F                        00            .byte	0
01990 0750                        00            .byte	0
01991 0751                        00            .byte	0
01992                                           ! 480  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01993 0752                        00            .byte	0
01994 0753                        00            .byte	0
01995 0754                        00            .byte	0
01996 0755                        00            .byte	0
01997 0756                        00            .byte	0
01998 0757                        00            .byte	0
01999 0758                        00            .byte	0
02000 0759                        00            .byte	0
02001                                           ! 481  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02002 075A                        00            .byte	0
02003 075B                        00            .byte	0
02004 075C                        00            .byte	0
02005 075D                        00            .byte	0
02006 075E                        00            .byte	0
02007 075F                        00            .byte	0
02008 0760                        00            .byte	0
02009 0761                        00            .byte	0
02010                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02011 0762                        00            .byte	0
02012 0763                        00            .byte	0
02013 0764                        00            .byte	0
02014 0765                        00            .byte	0
02015 0766                        00            .byte	0
02016 0767                        00            .byte	0
02017 0768                        00            .byte	0
02018 0769                        00            .byte	0
02019                                           ! 483  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02020 076A                        00            .byte	0
02021 076B                        00            .byte	0
02022 076C                        00            .byte	0
02023 076D                        00            .byte	0
02024 076E                        00            .byte	0
02025 076F                        00            .byte	0
02026 0770                        00            .byte	0
02027 0771                        00            .byte	0
02028                                           ! 484  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
02029 0772                        00            .byte	0
02030 0773                        00            .byte	0
02031 0774                        00            .byte	0
02032 0775                        00            .byte	0
02033 0776                        00            .byte	0
02034 0777                        00            .byte	0
02035 0778                        00            .byte	0
02036                                           ! 484 ,
02037 0779                        00            .byte	0
02038                                           ! 485  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02039 077A                        00            .byte	0
02040 077B                        00            .byte	0
02041 077C                        00            .byte	0
02042 077D                        00            .byte	0
02043 077E                        00            .byte	0
02044 077F                        00            .byte	0
02045 0780                        00            .byte	0
02046 0781                        00            .byte	0
02047                                           ! 486  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02048 0782                        00            .byte	0
02049 0783                        00            .byte	0
02050 0784                        00            .byte	0
02051 0785                        00            .byte	0
02052 0786                        00            .byte	0
02053 0787                        00            .byte	0
02054 0788                        00            .byte	0
02055 0789                        00            .byte	0
02056                                           ! 487 },
02057                                           ! 488 {
02058                                           ! 489  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02059 078A                        00            .byte	0
02060 078B                        00            .byte	0
02061 078C                        00            .byte	0
02062 078D                        00            .byte	0
02063 078E                        00            .byte	0
02064 078F                        00            .byte	0
02065 0790                        00            .byte	0
02066 0791                        00            .byte	0
02067                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02068 0792                        00            .byte	0
02069 0793                        00            .byte	0
02070 0794                        00            .byte	0
02071 0795                        00            .byte	0
02072 0796                        00            .byte	0
02073 0797                        00            .byte	0
02074 0798                        00            .byte	0
02075 0799                        00            .byte	0
02076                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02077 079A                        00            .byte	0
02078 079B                        00            .byte	0
02079 079C                        00            .byte	0
02080 079D                        00            .byte	0
02081 079E                        00            .byte	0
02082 079F                        00            .byte	0
02083 07A0                        00            .byte	0
02084 07A1                        00            .byte	0
02085                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02086 07A2                        00            .byte	0
02087 07A3                        00            .byte	0
02088 07A4                        00            .byte	0
02089 07A5                        00            .byte	0
02090 07A6                        00            .byte	0
02091 07A7                        00            .byte	0
02092 07A8                        00            .byte	0
02093 07A9                        00            .byte	0
02094                                           ! 493  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02095 07AA                        00            .byte	0
02096 07AB                        00            .byte	0
02097 07AC                        00            .byte	0
02098 07AD                        00            .byte	0
02099 07AE                        00            .byte	0
02100 07AF                        00            .byte	0
02101 07B0                        00            .byte	0
02102 07B1                        00            .byte	0
02103                                           ! 494  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02104 07B2                        00            .byte	0
02105 07B3                        00            .byte	0
02106 07B4                        00            .byte	0
02107 07B5                        00            .byte	0
02108 07B6                        00            .byte	0
02109 07B7                        00            .byte	0
02110 07B8                        00            .byte	0
02111 07B9                        00            .byte	0
02112                                           ! 495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02113 07BA                        00            .byte	0
02114 07BB                        00            .byte	0
02115 07BC                        00            .byte	0
02116 07BD                        00            .byte	0
02117 07BE                        00            .byte	0
02118 07BF                        00            .byte	0
02119 07C0                        00            .byte	0
02120 07C1                        00            .byte	0
02121                                           ! 496  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02122 07C2                        00            .byte	0
02123 07C3                        00            .byte	0
02124 07C4                        00            .byte	0
02125 07C5                        00            .byte	0
02126 07C6                        00            .byte	0
02127 07C7                        00            .byte	0
02128 07C8                        00            .byte	0
02129 07C9                        00            .byte	0
02130                                           ! 497 },
02131                                           ! 498 {
02132                                           ! 499  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02133 07CA                        00            .byte	0
02134 07CB                        00            .byte	0
02135 07CC                        00            .byte	0
02136 07CD                        00            .byte	0
02137 07CE                        00            .byte	0
02138 07CF                        00            .byte	0
02139 07D0                        00            .byte	0
02140 07D1                        00            .byte	0
02141                                           ! 500  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02142 07D2                        00            .byte	0
02143 07D3                        00            .byte	0
02144 07D4                        00            .byte	0
02145 07D5                        00            .byte	0
02146 07D6                        00            .byte	0
02147 07D7                        00            .byte	0
02148 07D8                        00            .byte	0
02149 07D9                        00            .byte	0
02150                                           ! 501  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02151 07DA                        00            .byte	0
02152 07DB                        00            .byte	0
02153 07DC                        00            .byte	0
02154 07DD                        00            .byte	0
02155 07DE                        00            .byte	0
02156 07DF                        00            .byte	0
02157 07E0                        00            .byte	0
02158 07E1                        00            .byte	0
02159                                           ! 502  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02160 07E2                        00            .byte	0
02161 07E3                        00            .byte	0
02162 07E4                        00            .byte	0
02163 07E5                        00            .byte	0
02164 07E6                        00            .byte	0
02165 07E7                        00            .byte	0
02166 07E8                        00            .byte	0
02167 07E9                        00            .byte	0
02168                                           ! 503  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02169 07EA                        00            .byte	0
02170 07EB                        00            .byte	0
02171 07EC                        00            .byte	0
02172 07ED                        00            .byte	0
02173 07EE                        00            .byte	0
02174 07EF                        00            .byte	0
02175 07F0                        00            .byte	0
02176 07F1                        00            .byte	0
02177                                           ! 504  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02178 07F2                        00            .byte	0
02179 07F3                        00            .byte	0
02180 07F4                        00            .byte	0
02181 07F5                        00            .byte	0
02182 07F6                        00            .byte	0
02183 07F7                        00            .byte	0
02184 07F8                        00            .byte	0
02185 07F9                        00            .byte	0
02186                                           ! 505  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02187 07FA                        00            .byte	0
02188 07FB                        00            .byte	0
02189 07FC                        00            .byte	0
02190 07FD                        00            .byte	0
02191 07FE                        00            .byte	0
02192 07FF                        00            .byte	0
02193 0800                        00            .byte	0
02194 0801                        00            .byte	0
02195                                           ! 506  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02196 0802                        00            .byte	0
02197 0803                        00            .byte	0
02198 0804                        00            .byte	0
02199 0805                        00            .byte	0
02200 0806                        00            .byte	0
02201 0807                        00            .byte	0
02202 0808                        00            .byte	0
02203 0809                        00            .byte	0
02204                                           ! 507 },
02205                                           ! 508 {
02206                                           ! 509  40, 24, 16, 0x00, 0x08,
02207 080A                        28            .byte	$28
02208 080B                        18            .byte	$18
02209 080C                        10            .byte	$10
02210 080D                        00            .byte	0
02211 080E                        08            .byte	8
02212                                           ! 510  0x08, 0x03, 0x00, 0x02,
02213 080F                        08            .byte	8
02214 0810                        03            .byte	3
02215 0811                        00            .byte	0
02216 0812                        02            .byte	2
02217                                           ! 511  0x67,
02218 0813                        67            .byte	$67
02219                                           ! 512  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02220 0814                        2D            .byte	$2D
02221 0815                        27            .byte	$27
02222 0816                        28            .byte	$28
02223 0817                        90            .byte	$90
02224 0818                        2B            .byte	$2B
02225 0819                        A0            .byte	$A0
02226 081A                        BF            .byte	$BF
02227 081B                        1F            .byte	$1F
02228                                           ! 513  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02229 081C                        00            .byte	0
02230 081D                        4F            .byte	$4F
02231 081E                        0D            .byte	$D
02232 081F                        0E            .byte	$E
02233 0820                        00            .byte	0
02234 0821                        00            .byte	0
02235 0822                        00            .byte	0
02236 0823                        00            .byte	0
02237                                           ! 514  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02238 0824                        9C            .byte	$9C
02239 0825                        8E            .byte	$8E
02240 0826                        8F            .byte	$8F
02241 0827                        14            .byte	$14
02242 0828                        1F            .byte	$1F
02243 0829                        96            .byte	$96
02244 082A                        B9            .byte	$B9
02245 082B                        A3            .byte	$A3
02246                                           ! 515  0xff,
02247 082C                        FF            .byte	$FF
02248                                           ! 516  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02249 082D                        00            .byte	0
02250 082E                        01            .byte	1
02251 082F                        02            .byte	2
02252 0830                        03            .byte	3
02253 0831                        04            .byte	4
02254 0832                        05            .byte	5
02255 0833                        14            .byte	$14
02256 0834                        07            .byte	7
02257                                           ! 517  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02258 0835                        38            .byte	$38
02259 0836                        39            .byte	$39
02260 0837                        3A            .byte	$3A
02261 0838                        3B            .byte	$3B
02262 0839                        3C            .byte	$3C
02263 083A                        3D            .byte	$3D
02264 083B                        3E            .byte	$3E
02265 083C                        3F            .byte	$3F
02266                                           ! 518  0x0c, 0x00, 0x0f, 0x08,
02267 083D                        0C            .byte	$C
02268 083E                        00            .byte	0
02269 083F                        0F            .byte	$F
02270 0840                        08            .byte	8
02271                                           ! 519  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02272 0841                        00            .byte	0
02273 0842                        00            .byte	0
02274 0843                        00            .byte	0
02275 0844                        00            .byte	0
02276 0845                        00            .byte	0
02277 0846                        10            .byte	$10
02278 0847                        0E            .byte	$E
02279 0848                        0F            .byte	$F
02280 0849                        FF            .byte	$FF
02281                                           ! 520 },
02282                                           ! 521 {
02283                                           ! 522  80, 24, 16, 0x00, 0x10,
02284 084A                        50            .byte	$50
02285 084B                        18            .byte	$18
02286 084C                        10            .byte	$10
02287 084D                        00            .byte	0
02288 084E                        10            .byte	$10
02289                                           ! 523  0x00, 0x03, 0x00, 0x02,
02290 084F                        00            .byte	0
02291 0850                        03            .byte	3
02292 0851                        00            .byte	0
02293 0852                        02            .byte	2
02294                                           ! 524  0x67,
02295 0853                        67            .byte	$67
02296                                           ! 525  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02297 0854                        5F            .byte	$5F
02298 0855                        4F            .byte	$4F
02299 0856                        50            .byte	$50
02300 0857                        82            .byte	$82
02301 0858                        55            .byte	$55
02302 0859                        81            .byte	$81
02303 085A                        BF            .byte	$BF
02304 085B                        1F            .byte	$1F
02305                                           ! 526  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02306 085C                        00            .byte	0
02307 085D                        4F            .byte	$4F
02308 085E                        0D            .byte	$D
02309 085F                        0E            .byte	$E
02310 0860                        00            .byte	0
02311 0861                        00            .byte	0
02312 0862                        00            .byte	0
02313 0863                        00            .byte	0
02314                                           ! 527  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02315 0864                        9C            .byte	$9C
02316 0865                        8E            .byte	$8E
02317 0866                        8F            .byte	$8F
02318 0867                        28            .byte	$28
02319 0868                        1F            .byte	$1F
02320 0869                        96            .byte	$96
02321 086A                        B9            .byte	$B9
02322 086B                        A3            .byte	$A3
02323                                           ! 528  0xff,
02324 086C                        FF            .byte	$FF
02325                                           ! 529  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02326 086D                        00            .byte	0
02327 086E                        01            .byte	1
02328 086F                        02            .byte	2
02329 0870                        03            .byte	3
02330 0871                        04            .byte	4
02331 0872                        05            .byte	5
02332 0873                        14            .byte	$14
02333 0874                        07            .byte	7
02334                                           ! 530  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02335 0875                        38            .byte	$38
02336 0876                        39            .byte	$39
02337 0877                        3A            .byte	$3A
02338 0878                        3B            .byte	$3B
02339 0879                        3C            .byte	$3C
02340 087A                        3D            .byte	$3D
02341 087B                        3E            .byte	$3E
02342 087C                        3F            .byte	$3F
02343                                           ! 531  0x0c, 0x00, 0x0f, 0x08,
02344 087D                        0C            .byte	$C
02345 087E                        00            .byte	0
02346 087F                        0F            .byte	$F
02347 0880                        08            .byte	8
02348                                           ! 532  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02349 0881                        00            .byte	0
02350 0882                        00            .byte	0
02351 0883                        00            .byte	0
02352 0884                        00            .byte	0
02353 0885                        00            .byte	0
02354 0886                        10            .byte	$10
02355 0887                        0E            .byte	$E
02356 0888                        0F            .byte	$F
02357 0889                        FF            .byte	$FF
02358                                           ! 533 },
02359                                           ! 534 {
02360                                           ! 535  80, 24, 16, 0x00, 0x10,
02361 088A                        50            .byte	$50
02362 088B                        18            .byte	$18
02363 088C                        10            .byte	$10
02364 088D                        00            .byte	0
02365 088E                        10            .byte	$10
02366                                           ! 536  0x00, 0x03, 0x00, 0x02,
02367 088F                        00            .byte	0
02368 0890                        03            .byte	3
02369 0891                        00            .byte	0
02370 0892                        02            .byte	2
02371                                           ! 537  0x66,
02372 0893                        66            .byte	$66
02373                                           ! 538  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02374 0894                        5F            .byte	$5F
02375 0895                        4F            .byte	$4F
02376 0896                        50            .byte	$50
02377 0897                        82            .byte	$82
02378 0898                        55            .byte	$55
02379 0899                        81            .byte	$81
02380 089A                        BF            .byte	$BF
02381 089B                        1F            .byte	$1F
02382                                           ! 539  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02383 089C                        00            .byte	0
02384 089D                        4F            .byte	$4F
02385 089E                        0D            .byte	$D
02386 089F                        0E            .byte	$E
02387 08A0                        00            .byte	0
02388 08A1                        00            .byte	0
02389 08A2                        00            .byte	0
02390 08A3                        00            .byte	0
02391                                           ! 540  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02392 08A4                        9C            .byte	$9C
02393 08A5                        8E            .byte	$8E
02394 08A6                        8F            .byte	$8F
02395 08A7                        28            .byte	$28
02396 08A8                        0F            .byte	$F
02397 08A9                        96            .byte	$96
02398 08AA                        B9            .byte	$B9
02399 08AB                        A3            .byte	$A3
02400                                           ! 541  0xff,
02401 08AC                        FF            .byte	$FF
02402                                           ! 542  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02403 08AD                        00            .byte	0
02404 08AE                        08            .byte	8
02405 08AF                        08            .byte	8
02406 08B0                        08            .byte	8
02407 08B1                        08            .byte	8
02408 08B2                        08            .byte	8
02409 08B3                        08            .byte	8
02410 08B4                        08            .byte	8
02411                                           ! 543  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02412 08B5                        10            .byte	$10
02413 08B6                        18            .byte	$18
02414 08B7                        18            .byte	$18
02415 08B8                        18            .byte	$18
02416 08B9                        18            .byte	$18
02417 08BA                        18            .byte	$18
02418 08BB                        18            .byte	$18
02419 08BC                        18            .byte	$18
02420                                           ! 544  0x0e, 0x00, 0x0f, 0x08,
02421 08BD                        0E            .byte	$E
02422 08BE                        00            .byte	0
02423 08BF                        0F            .byte	$F
02424 08C0                        08            .byte	8
02425                                           ! 545  0x00, 0x00, 0x00, 0x00, 0x
02426 08C1                        00            .byte	0
02427 08C2                        00            .byte	0
02428 08C3                        00            .byte	0
02429 08C4                        00            .byte	0
02430                                           ! 545 00, 0x10, 0x0a, 0x0f, 0xff,
02431 08C5                        00            .byte	0
02432 08C6                        10            .byte	$10
02433 08C7                        0A            .byte	$A
02434 08C8                        0F            .byte	$F
02435 08C9                        FF            .byte	$FF
02436                                           ! 546 },
02437                                           ! 547 {
02438                                           ! 548  80, 29, 16, 0x00, 0x00,
02439 08CA                        50            .byte	$50
02440 08CB                        1D            .byte	$1D
02441 08CC                        10            .byte	$10
02442 08CD                        00            .byte	0
02443 08CE                        00            .byte	0
02444                                           ! 549  0x01, 0x0f, 0x00, 0x06,
02445 08CF                        01            .byte	1
02446 08D0                        0F            .byte	$F
02447 08D1                        00            .byte	0
02448 08D2                        06            .byte	6
02449                                           ! 550  0xe3,
02450 08D3                        E3            .byte	$E3
02451                                           ! 551  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02452 08D4                        5F            .byte	$5F
02453 08D5                        4F            .byte	$4F
02454 08D6                        50            .byte	$50
02455 08D7                        82            .byte	$82
02456 08D8                        54            .byte	$54
02457 08D9                        80            .byte	$80
02458 08DA                        0B            .byte	$B
02459 08DB                        3E            .byte	$3E
02460                                           ! 552  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02461 08DC                        00            .byte	0
02462 08DD                        40            .byte	$40
02463 08DE                        00            .byte	0
02464 08DF                        00            .byte	0
02465 08E0                        00            .byte	0
02466 08E1                        00            .byte	0
02467 08E2                        00            .byte	0
02468 08E3                        00            .byte	0
02469                                           ! 553  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02470 08E4                        EA            .byte	$EA
02471 08E5                        8C            .byte	$8C
02472 08E6                        DF            .byte	$DF
02473 08E7                        28            .byte	$28
02474 08E8                        00            .byte	0
02475 08E9                        E7            .byte	$E7
02476 08EA                        04            .byte	4
02477 08EB                        E3            .byte	$E3
02478                                           ! 554  0xff,
02479 08EC                        FF            .byte	$FF
02480                                           ! 555  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02481 08ED                        00            .byte	0
02482 08EE                        3F            .byte	$3F
02483 08EF                        00            .byte	0
02484 08F0                        3F            .byte	$3F
02485 08F1                        00            .byte	0
02486 08F2                        3F            .byte	$3F
02487 08F3                        00            .byte	0
02488 08F4                        3F            .byte	$3F
02489                                           ! 556  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02490 08F5                        00            .byte	0
02491 08F6                        3F            .byte	$3F
02492 08F7                        00            .byte	0
02493 08F8                        3F            .byte	$3F
02494 08F9                        00            .byte	0
02495 08FA                        3F            .byte	$3F
02496 08FB                        00            .byte	0
02497 08FC                        3F            .byte	$3F
02498                                           ! 557  0x01, 0x00, 0x0f, 0x00,
02499 08FD                        01            .byte	1
02500 08FE                        00            .byte	0
02501 08FF                        0F            .byte	$F
02502 0900                        00            .byte	0
02503                                           ! 558  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02504 0901                        00            .byte	0
02505 0902                        00            .byte	0
02506 0903                        00            .byte	0
02507 0904                        00            .byte	0
02508 0905                        00            .byte	0
02509 0906                        00            .byte	0
02510 0907                        05            .byte	5
02511 0908                        0F            .byte	$F
02512 0909                        FF            .byte	$FF
02513                                           ! 559 },
02514                                           ! 560 {
02515                                           ! 561  80, 29, 16, 0x00, 0x00,
02516 090A                        50            .byte	$50
02517 090B                        1D            .byte	$1D
02518 090C                        10            .byte	$10
02519 090D                        00            .byte	0
02520 090E                        00            .byte	0
02521                                           ! 562  0x01, 0x0f, 0x00, 0x06,
02522 090F                        01            .byte	1
02523 0910                        0F            .byte	$F
02524 0911                        00            .byte	0
02525 0912                        06            .byte	6
02526                                           ! 563  0xe3,
02527 0913                        E3            .byte	$E3
02528                                           ! 564  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02529 0914                        5F            .byte	$5F
02530 0915                        4F            .byte	$4F
02531 0916                        50            .byte	$50
02532 0917                        82            .byte	$82
02533 0918                        54            .byte	$54
02534 0919                        80            .byte	$80
02535 091A                        0B            .byte	$B
02536 091B                        3E            .byte	$3E
02537                                           ! 565  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02538 091C                        00            .byte	0
02539 091D                        40            .byte	$40
02540 091E                        00            .byte	0
02541 091F                        00            .byte	0
02542 0920                        00            .byte	0
02543 0921                        00            .byte	0
02544 0922                        00            .byte	0
02545 0923                        00            .byte	0
02546                                           ! 566  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02547 0924                        EA            .byte	$EA
02548 0925                        8C            .byte	$8C
02549 0926                        DF            .byte	$DF
02550 0927                        28            .byte	$28
02551 0928                        00            .byte	0
02552 0929                        E7            .byte	$E7
02553 092A                        04            .byte	4
02554 092B                        E3            .byte	$E3
02555                                           ! 567  0xff,
02556 092C                        FF            .byte	$FF
02557                                           ! 568  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02558 092D                        00            .byte	0
02559 092E                        01            .byte	1
02560 092F                        02            .byte	2
02561 0930                        03            .byte	3
02562 0931                        04            .byte	4
02563 0932                        05            .byte	5
02564 0933                        14            .byte	$14
02565 0934                        07            .byte	7
02566                                           ! 569  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02567 0935                        38            .byte	$38
02568 0936                        39            .byte	$39
02569 0937                        3A            .byte	$3A
02570 0938                        3B            .byte	$3B
02571 0939                        3C            .byte	$3C
02572 093A                        3D            .byte	$3D
02573 093B                        3E            .byte	$3E
02574 093C                        3F            .byte	$3F
02575                                           ! 570  0x01, 0x00, 0x0f, 0x00,
02576 093D                        01            .byte	1
02577 093E                        00            .byte	0
02578 093F                        0F            .byte	$F
02579 0940                        00            .byte	0
02580                                           ! 571  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02581 0941                        00            .byte	0
02582 0942                        00            .byte	0
02583 0943                        00            .byte	0
02584 0944                        00            .byte	0
02585 0945                        00            .byte	0
02586 0946                        00            .byte	0
02587 0947                        05            .byte	5
02588 0948                        0F            .byte	$F
02589 0949                        FF            .byte	$FF
02590                                           ! 572 },
02591                                           ! 573 {
02592                                           ! 574  40, 24, 8, 0x00, 0x00,
02593 094A                        28            .byte	$28
02594 094B                        18            .byte	$18
02595 094C                        08            .byte	8
02596 094D                        00            .byte	0
02597 094E                        00            .byte	0
02598                                           ! 575  0x01, 0x0f, 0x00, 0x0e,
02599 094F                        01            .byte	1
02600 0950                        0F            .byte	$F
02601 0951                        00            .byte	0
02602 0952                        0E            .byte	$E
02603                                           ! 576  0x63,
02604 0953                        63            .byte	$63
02605                                           ! 577  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02606 0954                        5F            .byte	$5F
02607 0955                        4F            .byte	$4F
02608 0956                        50            .byte	$50
02609 0957                        82            .byte	$82
02610 0958                        54            .byte	$54
02611 0959                        80            .byte	$80
02612 095A                        BF            .byte	$BF
02613 095B                        1F            .byte	$1F
02614                                           ! 578  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02615 095C                        00            .byte	0
02616 095D                        41            .byte	$41
02617 095E                        00            .byte	0
02618 095F                        00            .byte	0
02619 0960                        00            .byte	0
02620 0961                        00            .byte	0
02621 0962                        00            .byte	0
02622 0963                        00            .byte	0
02623                                           ! 579  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02624 0964                        9C            .byte	$9C
02625 0965                        8E            .byte	$8E
02626 0966                        8F            .byte	$8F
02627 0967                        28            .byte	$28
02628 0968                        40            .byte	$40
02629 0969                        96            .byte	$96
02630 096A                        B9            .byte	$B9
02631 096B                        A3            .byte	$A3
02632                                           ! 580  0xff,
02633 096C                        FF            .byte	$FF
02634                                           ! 581  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02635 096D                        00            .byte	0
02636 096E                        01            .byte	1
02637 096F                        02            .byte	2
02638 0970                        03            .byte	3
02639 0971                        04            .byte	4
02640 0972                        05            .byte	5
02641 0973                        06            .byte	6
02642 0974                        07            .byte	7
02643                                           ! 582  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02644 0975                        08            .byte	8
02645 0976                        09            .byte	9
02646 0977                        0A            .byte	$A
02647 0978                        0B            .byte	$B
02648 0979                        0C            .byte	$C
02649 097A                        0D            .byte	$D
02650 097B                        0E            .byte	$E
02651 097C                        0F            .byte	$F
02652                                           ! 583  0x41, 0x00, 0x0f, 0x00,
02653 097D                        41            .byte	$41
02654 097E                        00            .byte	0
02655 097F                        0F            .byte	$F
02656 0980                        00            .byte	0
02657                                           ! 584  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02658 0981                        00            .byte	0
02659 0982                        00            .byte	0
02660 0983                        00            .byte	0
02661 0984                        00            .byte	0
02662 0985                        00            .byte	0
02663 0986                        40            .byte	$40
02664 0987                        05            .byte	5
02665 0988                        0F            .byte	$F
02666 0989                        FF            .byte	$FF
02667                                           ! 585 },
02668                                           ! 586 {
02669                                           ! 587  100, 36, 16, 0x00, 0x00,
02670 098A                        64            .byte	$64
02671 098B                        24            .byte	$24
02672 098C                        10            .byte	$10
02673 098D                        00            .byte	0
02674 098E                        00            .byte	0
02675                                           ! 588  0x01, 0x0f, 0x00, 0x06,
02676 098F                        01            .byte	1
02677 0990                        0F            .byte	$F
02678 0991                        00            .byte	0
02679 0992                        06            .byte	6
02680                                           ! 589  0xe3,
02681 0993                        E3            .byte	$E3
02682                                           ! 590  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02683 0994                        7F            .byte	$7F
02684 0995                        63            .byte	$63
02685 0996                        63            .byte	$63
02686 0997                        83            .byte	$83
02687 0998                        6B            .byte	$6B
02688 0999                        1B            .byte	$1B
02689 099A                        72            .byte	$72
02690 099B                        F0            .byte	$F0
02691                                           ! 591  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02692 099C                        00            .byte	0
02693 099D                        60            .byte	$60
02694 099E                        00            .byte	0
02695 099F                        00            .byte	0
02696 09A0                        00            .byte	0
02697 09A1                        00            .byte	0
02698 09A2                        00            .byte	0
02699 09A3                        00            .byte	0
02700                                           ! 592  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
02701 09A4                        59            .byte	$59
02702 09A5                        8D            .byte	$8D
02703 09A6                        57            .byte	$57
02704 09A7                        32            .byte	$32
02705 09A8                        00            .byte	0
02706 09A9                        57            .byte	$57
02707 09AA                        73            .byte	$73
02708 09AB                        E3            .byte	$E3
02709                                           ! 593  0xff,
02710 09AC                        FF            .byte	$FF
02711                                           ! 594  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02712 09AD                        00            .byte	0
02713 09AE                        01            .byte	1
02714 09AF                        02            .byte	2
02715 09B0                        03            .byte	3
02716 09B1                        04            .byte	4
02717 09B2                        05            .byte	5
02718 09B3                        14            .byte	$14
02719 09B4                        07            .byte	7
02720                                           ! 595  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02721 09B5                        38            .byte	$38
02722 09B6                        39            .byte	$39
02723 09B7                        3A            .byte	$3A
02724 09B8                        3B            .byte	$3B
02725 09B9                        3C            .byte	$3C
02726 09BA                        3D            .byte	$3D
02727 09BB                        3E            .byte	$3E
02728 09BC                        3F            .byte	$3F
02729                                           ! 596  0x01, 0x00, 0x0f, 0x00,
02730 09BD                        01            .byte	1
02731 09BE                        00            .byte	0
02732 09BF                        0F            .byte	$F
02733 09C0                        00            .byte	0
02734                                           ! 597  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02735 09C1                        00            .byte	0
02736 09C2                        00            .byte	0
02737 09C3                        00            .byte	0
02738 09C4                        00            .byte	0
02739 09C5                        00            .byte	0
02740 09C6                        00            .byte	0
02741 09C7                        05            .byte	5
02742 09C8                        0F            .byte	$F
02743 09C9                        FF            .byte	$FF
02744                                           ! 598 },
02745                                           ! 599 };
02746                                           !BCC_EOS
02747                                           ! 600 static Bit8u palette0[63+1][3]=
02748                                           ! 601 {
02749                       000009CA            _palette0:
02750                                           ! 602   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
02751 09CA                        00            .byte	0
02752 09CB                        00            .byte	0
02753 09CC                        00            .byte	0
02754 09CD                        00            .byte	0
02755 09CE                        00            .byte	0
02756 09CF                        00            .byte	0
02757 09D0                        00            .byte	0
02758 09D1                        00            .byte	0
02759 09D2                        00            .byte	0
02760 09D3                        00            .byte	0
02761 09D4                        00            .byte	0
02762 09D5                        00            .byte	0
02763 09D6                        00            .byte	0
02764 09D7                        00            .byte	0
02765 09D8                        00            .byte	0
02766 09D9                        00            .byte	0
02767 09DA                        00            .byte	0
02768 09DB                        00            .byte	0
02769 09DC                        00            .byte	0
02770 09DD                        00            .byte	0
02771 09DE                        00            .byte	0
02772 09DF                        00            .byte	0
02773 09E0                        00            .byte	0
02774 09E1                        00            .byte	0
02775                                           ! 603   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02776 09E2                        2A            .byte	$2A
02777 09E3                        2A            .byte	$2A
02778 09E4                        2A            .byte	$2A
02779 09E5                        2A            .byte	$2A
02780 09E6                        2A            .byte	$2A
02781 09E7                        2A            .byte	$2A
02782 09E8                        2A            .byte	$2A
02783 09E9                        2A            .byte	$2A
02784 09EA                        2A            .byte	$2A
02785 09EB                        2A            .byte	$2A
02786 09EC                        2A            .byte	$2A
02787 09ED                        2A            .byte	$2A
02788 09EE                        2A            .byte	$2A
02789 09EF                        2A            .byte	$2A
02790 09F0                        2A            .byte	$2A
02791 09F1                        2A            .byte	$2A
02792 09F2                        2A            .byte	$2A
02793 09F3                        2A            .byte	$2A
02794 09F4                        2A            .byte	$2A
02795 09F5                        2A            .byte	$2A
02796 09F6                        2A            .byte	$2A
02797 09F7                        2A            .byte	$2A
02798 09F8                        2A            .byte	$2A
02799 09F9                        2A            .byte	$2A
02800                                           ! 604   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02801 09FA                        2A            .byte	$2A
02802 09FB                        2A            .byte	$2A
02803 09FC                        2A            .byte	$2A
02804 09FD                        2A            .byte	$2A
02805 09FE                        2A            .byte	$2A
02806 09FF                        2A            .byte	$2A
02807 0A00                        2A            .byte	$2A
02808 0A01                        2A            .byte	$2A
02809 0A02                        2A            .byte	$2A
02810 0A03                        2A            .byte	$2A
02811 0A04                        2A            .byte	$2A
02812 0A05                        2A            .byte	$2A
02813 0A06                        2A            .byte	$2A
02814 0A07                        2A            .byte	$2A
02815 0A08                        2A            .byte	$2A
02816 0A09                        2A            .byte	$2A
02817 0A0A                        2A            .byte	$2A
02818 0A0B                        2A            .byte	$2A
02819 0A0C                        2A            .byte	$2A
02820 0A0D                        2A            .byte	$2A
02821 0A0E                        2A            .byte	$2A
02822 0A0F                        2A            .byte	$2A
02823 0A10                        2A            .byte	$2A
02824 0A11                        2A            .byte	$2A
02825                                           ! 605   0x3f,0x3f,0x
02826 0A12                        3F            .byte	$3F
02827 0A13                        3F            .byte	$3F
02828                                           ! 605 3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
02829 0A14                        3F            .byte	$3F
02830 0A15                        3F            .byte	$3F
02831 0A16                        3F            .byte	$3F
02832 0A17                        3F            .byte	$3F
02833 0A18                        3F            .byte	$3F
02834 0A19                        3F            .byte	$3F
02835 0A1A                        3F            .byte	$3F
02836 0A1B                        3F            .byte	$3F
02837 0A1C                        3F            .byte	$3F
02838 0A1D                        3F            .byte	$3F
02839 0A1E                        3F            .byte	$3F
02840 0A1F                        3F            .byte	$3F
02841 0A20                        3F            .byte	$3F
02842 0A21                        3F            .byte	$3F
02843 0A22                        3F            .byte	$3F
02844 0A23                        3F            .byte	$3F
02845 0A24                        3F            .byte	$3F
02846 0A25                        3F            .byte	$3F
02847 0A26                        3F            .byte	$3F
02848 0A27                        3F            .byte	$3F
02849 0A28                        3F            .byte	$3F
02850 0A29                        3F            .byte	$3F
02851                                           ! 606   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
02852 0A2A                        00            .byte	0
02853 0A2B                        00            .byte	0
02854 0A2C                        00            .byte	0
02855 0A2D                        00            .byte	0
02856 0A2E                        00            .byte	0
02857 0A2F                        00            .byte	0
02858 0A30                        00            .byte	0
02859 0A31                        00            .byte	0
02860 0A32                        00            .byte	0
02861 0A33                        00            .byte	0
02862 0A34                        00            .byte	0
02863 0A35                        00            .byte	0
02864 0A36                        00            .byte	0
02865 0A37                        00            .byte	0
02866 0A38                        00            .byte	0
02867 0A39                        00            .byte	0
02868 0A3A                        00            .byte	0
02869 0A3B                        00            .byte	0
02870 0A3C                        00            .byte	0
02871 0A3D                        00            .byte	0
02872 0A3E                        00            .byte	0
02873 0A3F                        00            .byte	0
02874 0A40                        00            .byte	0
02875 0A41                        00            .byte	0
02876                                           ! 607   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02877 0A42                        2A            .byte	$2A
02878 0A43                        2A            .byte	$2A
02879 0A44                        2A            .byte	$2A
02880 0A45                        2A            .byte	$2A
02881 0A46                        2A            .byte	$2A
02882 0A47                        2A            .byte	$2A
02883 0A48                        2A            .byte	$2A
02884 0A49                        2A            .byte	$2A
02885 0A4A                        2A            .byte	$2A
02886 0A4B                        2A            .byte	$2A
02887 0A4C                        2A            .byte	$2A
02888 0A4D                        2A            .byte	$2A
02889 0A4E                        2A            .byte	$2A
02890 0A4F                        2A            .byte	$2A
02891 0A50                        2A            .byte	$2A
02892 0A51                        2A            .byte	$2A
02893 0A52                        2A            .byte	$2A
02894 0A53                        2A            .byte	$2A
02895 0A54                        2A            .byte	$2A
02896 0A55                        2A            .byte	$2A
02897 0A56                        2A            .byte	$2A
02898 0A57                        2A            .byte	$2A
02899 0A58                        2A            .byte	$2A
02900 0A59                        2A            .byte	$2A
02901                                           ! 608   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02902 0A5A                        2A            .byte	$2A
02903 0A5B                        2A            .byte	$2A
02904 0A5C                        2A            .byte	$2A
02905 0A5D                        2A            .byte	$2A
02906 0A5E                        2A            .byte	$2A
02907 0A5F                        2A            .byte	$2A
02908 0A60                        2A            .byte	$2A
02909 0A61                        2A            .byte	$2A
02910 0A62                        2A            .byte	$2A
02911 0A63                        2A            .byte	$2A
02912 0A64                        2A            .byte	$2A
02913 0A65                        2A            .byte	$2A
02914 0A66                        2A            .byte	$2A
02915 0A67                        2A            .byte	$2A
02916 0A68                        2A            .byte	$2A
02917 0A69                        2A            .byte	$2A
02918 0A6A                        2A            .byte	$2A
02919 0A6B                        2A            .byte	$2A
02920 0A6C                        2A            .byte	$2A
02921 0A6D                        2A            .byte	$2A
02922 0A6E                        2A            .byte	$2A
02923 0A6F                        2A            .byte	$2A
02924 0A70                        2A            .byte	$2A
02925 0A71                        2A            .byte	$2A
02926                                           ! 609   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
02927 0A72                        3F            .byte	$3F
02928 0A73                        3F            .byte	$3F
02929 0A74                        3F            .byte	$3F
02930 0A75                        3F            .byte	$3F
02931 0A76                        3F            .byte	$3F
02932 0A77                        3F            .byte	$3F
02933 0A78                        3F            .byte	$3F
02934 0A79                        3F            .byte	$3F
02935 0A7A                        3F            .byte	$3F
02936 0A7B                        3F            .byte	$3F
02937 0A7C                        3F            .byte	$3F
02938 0A7D                        3F            .byte	$3F
02939 0A7E                        3F            .byte	$3F
02940 0A7F                        3F            .byte	$3F
02941 0A80                        3F            .byte	$3F
02942 0A81                        3F            .byte	$3F
02943 0A82                        3F            .byte	$3F
02944 0A83                        3F            .byte	$3F
02945 0A84                        3F            .byte	$3F
02946 0A85                        3F            .byte	$3F
02947 0A86                        3F            .byte	$3F
02948 0A87                        3F            .byte	$3F
02949 0A88                        3F            .byte	$3F
02950                                           ! 610 };
02951 0A89                        3F            .byte	$3F
02952                                           !BCC_EOS
02953                                           ! 611 static Bit8u palette1[63+1][3]=
02954                                           ! 612 {
02955                       00000A8A            _palette1:
02956                                           ! 613   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
02957 0A8A                        00            .byte	0
02958 0A8B                        00            .byte	0
02959 0A8C                        00            .byte	0
02960 0A8D                        00            .byte	0
02961 0A8E                        00            .byte	0
02962 0A8F                        2A            .byte	$2A
02963 0A90                        00            .byte	0
02964 0A91                        2A            .byte	$2A
02965 0A92                        00            .byte	0
02966 0A93                        00            .byte	0
02967 0A94                        2A            .byte	$2A
02968 0A95                        2A            .byte	$2A
02969 0A96                        2A            .byte	$2A
02970 0A97                        00            .byte	0
02971 0A98                        00            .byte	0
02972 0A99                        2A            .byte	$2A
02973 0A9A                        00            .byte	0
02974 0A9B                        2A            .byte	$2A
02975 0A9C                        2A            .byte	$2A
02976 0A9D                        15            .byte	$15
02977 0A9E                        00            .byte	0
02978 0A9F                        2A            .byte	$2A
02979 0AA0                        2A            .byte	$2A
02980 0AA1                        2A            .byte	$2A
02981                                           ! 614   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
02982 0AA2                        00            .byte	0
02983 0AA3                        00            .byte	0
02984 0AA4                        00            .byte	0
02985 0AA5                        00            .byte	0
02986 0AA6                        00            .byte	0
02987 0AA7                        2A            .byte	$2A
02988 0AA8                        00            .byte	0
02989 0AA9                        2A            .byte	$2A
02990 0AAA                        00            .byte	0
02991 0AAB                        00            .byte	0
02992 0AAC                        2A            .byte	$2A
02993 0AAD                        2A            .byte	$2A
02994 0AAE                        2A            .byte	$2A
02995 0AAF                        00            .byte	0
02996 0AB0                        00            .byte	0
02997 0AB1                        2A            .byte	$2A
02998 0AB2                        00            .byte	0
02999 0AB3                        2A            .byte	$2A
03000 0AB4                        2A            .byte	$2A
03001 0AB5                        15            .byte	$15
03002 0AB6                        00            .byte	0
03003 0AB7                        2A            .byte	$2A
03004 0AB8                        2A            .byte	$2A
03005 0AB9                        2A            .byte	$2A
03006                                           ! 615   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03007 0ABA                        15            .byte	$15
03008 0ABB                        15            .byte	$15
03009 0ABC                        15            .byte	$15
03010 0ABD                        15            .byte	$15
03011 0ABE                        15            .byte	$15
03012 0ABF                        3F            .byte	$3F
03013 0AC0                        15            .byte	$15
03014 0AC1                        3F            .byte	$3F
03015 0AC2                        15            .byte	$15
03016 0AC3                        15            .byte	$15
03017 0AC4                        3F            .byte	$3F
03018 0AC5                        3F            .byte	$3F
03019 0AC6                        3F            .byte	$3F
03020 0AC7                        15            .byte	$15
03021 0AC8                        15            .byte	$15
03022 0AC9                        3F            .byte	$3F
03023 0ACA                        15            .byte	$15
03024 0ACB                        3F            .byte	$3F
03025 0ACC                        3F            .byte	$3F
03026 0ACD                        3F            .byte	$3F
03027 0ACE                        15            .byte	$15
03028 0ACF                        3F            .byte	$3F
03029 0AD0                        3F            .byte	$3F
03030 0AD1                        3F            .byte	$3F
03031                                           ! 616   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03032 0AD2                        15            .byte	$15
03033 0AD3                        15            .byte	$15
03034 0AD4                        15            .byte	$15
03035 0AD5                        15            .byte	$15
03036 0AD6                        15            .byte	$15
03037 0AD7                        3F            .byte	$3F
03038 0AD8                        15            .byte	$15
03039 0AD9                        3F            .byte	$3F
03040 0ADA                        15            .byte	$15
03041 0ADB                        15            .byte	$15
03042 0ADC                        3F            .byte	$3F
03043 0ADD                        3F            .byte	$3F
03044 0ADE                        3F            .byte	$3F
03045 0ADF                        15            .byte	$15
03046 0AE0                        15            .byte	$15
03047 0AE1                        3F            .byte	$3F
03048 0AE2                        15            .byte	$15
03049 0AE3                        3F            .byte	$3F
03050 0AE4                        3F            .byte	$3F
03051 0AE5                        3F            .byte	$3F
03052 0AE6                        15            .byte	$15
03053 0AE7                        3F            .byte	$3F
03054 0AE8                        3F            .byte	$3F
03055 0AE9                        3F            .byte	$3F
03056                                           ! 617   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03057 0AEA                        00            .byte	0
03058 0AEB                        00            .byte	0
03059 0AEC                        00            .byte	0
03060 0AED                        00            .byte	0
03061 0AEE                        00            .byte	0
03062 0AEF                        2A            .byte	$2A
03063 0AF0                        00            .byte	0
03064 0AF1                        2A            .byte	$2A
03065 0AF2                        00            .byte	0
03066 0AF3                        00            .byte	0
03067 0AF4                        2A            .byte	$2A
03068 0AF5                        2A            .byte	$2A
03069 0AF6                        2A            .byte	$2A
03070 0AF7                        00            .byte	0
03071 0AF8                        00            .byte	0
03072 0AF9                        2A            .byte	$2A
03073 0AFA                        00            .byte	0
03074 0AFB                        2A            .byte	$2A
03075 0AFC                        2A            .byte	$2A
03076 0AFD                        15            .byte	$15
03077 0AFE                        00            .byte	0
03078 0AFF                        2A            .byte	$2A
03079 0B00                        2A            .byte	$2A
03080 0B01                        2A            .byte	$2A
03081                                           ! 618   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03082 0B02                        00            .byte	0
03083 0B03                        00            .byte	0
03084 0B04                        00            .byte	0
03085 0B05                        00            .byte	0
03086 0B06                        00            .byte	0
03087 0B07                        2A            .byte	$2A
03088 0B08                        00            .byte	0
03089 0B09                        2A            .byte	$2A
03090 0B0A                        00            .byte	0
03091 0B0B                        00            .byte	0
03092 0B0C                        2A            .byte	$2A
03093 0B0D                        2A            .byte	$2A
03094 0B0E                        2A            .byte	$2A
03095 0B0F                        00            .byte	0
03096 0B10                        00            .byte	0
03097 0B11                        2A            .byte	$2A
03098 0B12                        00            .byte	0
03099 0B13                        2A            .byte	$2A
03100 0B14                        2A            .byte	$2A
03101 0B15                        15            .byte	$15
03102 0B16                        00            .byte	0
03103 0B17                        2A            .byte	$2A
03104 0B18                        2A            .byte	$2A
03105 0B19                        2A            .byte	$2A
03106                                           ! 619   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03107 0B1A                        15            .byte	$15
03108 0B1B                        15            .byte	$15
03109 0B1C                        15            .byte	$15
03110 0B1D                        15            .byte	$15
03111 0B1E                        15            .byte	$15
03112 0B1F                        3F            .byte	$3F
03113 0B20                        15            .byte	$15
03114 0B21                        3F            .byte	$3F
03115 0B22                        15            .byte	$15
03116 0B23                        15            .byte	$15
03117 0B24                        3F            .byte	$3F
03118 0B25                        3F            .byte	$3F
03119 0B26                        3F            .byte	$3F
03120 0B27                        15            .byte	$15
03121 0B28                        15            .byte	$15
03122 0B29                        3F            .byte	$3F
03123 0B2A                        15            .byte	$15
03124 0B2B                        3F            .byte	$3F
03125 0B2C                        3F            .byte	$3F
03126 0B2D                        3F            .byte	$3F
03127 0B2E                        15            .byte	$15
03128 0B2F                        3F            .byte	$3F
03129 0B30                        3F            .byte	$3F
03130 0B31                        3F            .byte	$3F
03131                                           ! 620   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03132 0B32                        15            .byte	$15
03133 0B33                        15            .byte	$15
03134 0B34                        15            .byte	$15
03135 0B35                        15            .byte	$15
03136 0B36                        15            .byte	$15
03137 0B37                        3F            .byte	$3F
03138 0B38                        15            .byte	$15
03139 0B39                        3F            .byte	$3F
03140 0B3A                        15            .byte	$15
03141 0B3B                        15            .byte	$15
03142 0B3C                        3F            .byte	$3F
03143 0B3D                        3F            .byte	$3F
03144 0B3E                        3F            .byte	$3F
03145 0B3F                        15            .byte	$15
03146 0B40                        15            .byte	$15
03147 0B41                        3F            .byte	$3F
03148 0B42                        15            .byte	$15
03149 0B43                        3F            .byte	$3F
03150 0B44                        3F            .byte	$3F
03151 0B45                        3F            .byte	$3F
03152 0B46                        15            .byte	$15
03153 0B47                        3F            .byte	$3F
03154 0B48                        3F            .byte	$3F
03155                                           ! 621 };
03156 0B49                        3F            .byte	$3F
03157                                           !BCC_EOS
03158                                           ! 622 static Bit8u palette2[63+1][3]=
03159                                           ! 623 {
03160                       00000B4A            _palette2:
03161                                           ! 624   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03162 0B4A                        00            .byte	0
03163 0B4B                        00            .byte	0
03164 0B4C                        00            .byte	0
03165 0B4D                        00            .byte	0
03166 0B4E                        00            .byte	0
03167 0B4F                        2A            .byte	$2A
03168 0B50                        00            .byte	0
03169 0B51                        2A            .byte	$2A
03170 0B52                        00            .byte	0
03171 0B53                        00            .byte	0
03172 0B54                        2A            .byte	$2A
03173 0B55                        2A            .byte	$2A
03174 0B56                        2A            .byte	$2A
03175 0B57                        00            .byte	0
03176 0B58                        00            .byte	0
03177 0B59                        2A            .byte	$2A
03178 0B5A                        00            .byte	0
03179 0B5B                        2A            .byte	$2A
03180 0B5C                        2A            .byte	$2A
03181 0B5D                        2A            .byte	$2A
03182 0B5E                        00            .byte	0
03183 0B5F                        2A            .byte	$2A
03184 0B60                        2A            .byte	$2A
03185 0B61                        2A            .byte	$2A
03186                                           ! 625   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03187 0B62                        00            .byte	0
03188 0B63                        00            .byte	0
03189 0B64                        15            .byte	$15
03190 0B65                        00            .byte	0
03191 0B66                        00            .byte	0
03192 0B67                        3F            .byte	$3F
03193 0B68                        00            .byte	0
03194 0B69                        2A            .byte	$2A
03195 0B6A                        15            .byte	$15
03196 0B6B                        00            .byte	0
03197 0B6C                        2A            .byte	$2A
03198 0B6D                        3F            .byte	$3F
03199 0B6E                        2A            .byte	$2A
03200 0B6F                        00            .byte	0
03201 0B70                        15            .byte	$15
03202 0B71                        2A            .byte	$2A
03203 0B72                        00            .byte	0
03204 0B73                        3F            .byte	$3F
03205 0B74                        2A            .byte	$2A
03206 0B75                        2A            .byte	$2A
03207 0B76                        15            .byte	$15
03208 0B77                        2A            .byte	$2A
03209 0B78                        2A            .byte	$2A
03210 0B79                        3F            .byte	$3F
03211                                           ! 626   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0
03212 0B7A                        00            .byte	0
03213 0B7B                        15            .byte	$15
03214 0B7C                        00            .byte	0
03215 0B7D                        00            .byte	0
03216 0B7E                        15            .byte	$15
03217 0B7F                        2A            .byte	$2A
03218 0B80                        00            .byte	0
03219                                           ! 626 x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03220 0B81                        3F            .byte	$3F
03221 0B82                        00            .byte	0
03222 0B83                        00            .byte	0
03223 0B84                        3F            .byte	$3F
03224 0B85                        2A            .byte	$2A
03225 0B86                        2A            .byte	$2A
03226 0B87                        15            .byte	$15
03227 0B88                        00            .byte	0
03228 0B89                        2A            .byte	$2A
03229 0B8A                        15            .byte	$15
03230 0B8B                        2A            .byte	$2A
03231 0B8C                        2A            .byte	$2A
03232 0B8D                        3F            .byte	$3F
03233 0B8E                        00            .byte	0
03234 0B8F                        2A            .byte	$2A
03235 0B90                        3F            .byte	$3F
03236 0B91                        2A            .byte	$2A
03237                                           ! 627   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03238 0B92                        00            .byte	0
03239 0B93                        15            .byte	$15
03240 0B94                        15            .byte	$15
03241 0B95                        00            .byte	0
03242 0B96                        15            .byte	$15
03243 0B97                        3F            .byte	$3F
03244 0B98                        00            .byte	0
03245 0B99                        3F            .byte	$3F
03246 0B9A                        15            .byte	$15
03247 0B9B                        00            .byte	0
03248 0B9C                        3F            .byte	$3F
03249 0B9D                        3F            .byte	$3F
03250 0B9E                        2A            .byte	$2A
03251 0B9F                        15            .byte	$15
03252 0BA0                        15            .byte	$15
03253 0BA1                        2A            .byte	$2A
03254 0BA2                        15            .byte	$15
03255 0BA3                        3F            .byte	$3F
03256 0BA4                        2A            .byte	$2A
03257 0BA5                        3F            .byte	$3F
03258 0BA6                        15            .byte	$15
03259 0BA7                        2A            .byte	$2A
03260 0BA8                        3F            .byte	$3F
03261 0BA9                        3F            .byte	$3F
03262                                           ! 628   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03263 0BAA                        15            .byte	$15
03264 0BAB                        00            .byte	0
03265 0BAC                        00            .byte	0
03266 0BAD                        15            .byte	$15
03267 0BAE                        00            .byte	0
03268 0BAF                        2A            .byte	$2A
03269 0BB0                        15            .byte	$15
03270 0BB1                        2A            .byte	$2A
03271 0BB2                        00            .byte	0
03272 0BB3                        15            .byte	$15
03273 0BB4                        2A            .byte	$2A
03274 0BB5                        2A            .byte	$2A
03275 0BB6                        3F            .byte	$3F
03276 0BB7                        00            .byte	0
03277 0BB8                        00            .byte	0
03278 0BB9                        3F            .byte	$3F
03279 0BBA                        00            .byte	0
03280 0BBB                        2A            .byte	$2A
03281 0BBC                        3F            .byte	$3F
03282 0BBD                        2A            .byte	$2A
03283 0BBE                        00            .byte	0
03284 0BBF                        3F            .byte	$3F
03285 0BC0                        2A            .byte	$2A
03286 0BC1                        2A            .byte	$2A
03287                                           ! 629   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03288 0BC2                        15            .byte	$15
03289 0BC3                        00            .byte	0
03290 0BC4                        15            .byte	$15
03291 0BC5                        15            .byte	$15
03292 0BC6                        00            .byte	0
03293 0BC7                        3F            .byte	$3F
03294 0BC8                        15            .byte	$15
03295 0BC9                        2A            .byte	$2A
03296 0BCA                        15            .byte	$15
03297 0BCB                        15            .byte	$15
03298 0BCC                        2A            .byte	$2A
03299 0BCD                        3F            .byte	$3F
03300 0BCE                        3F            .byte	$3F
03301 0BCF                        00            .byte	0
03302 0BD0                        15            .byte	$15
03303 0BD1                        3F            .byte	$3F
03304 0BD2                        00            .byte	0
03305 0BD3                        3F            .byte	$3F
03306 0BD4                        3F            .byte	$3F
03307 0BD5                        2A            .byte	$2A
03308 0BD6                        15            .byte	$15
03309 0BD7                        3F            .byte	$3F
03310 0BD8                        2A            .byte	$2A
03311 0BD9                        3F            .byte	$3F
03312                                           ! 630   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03313 0BDA                        15            .byte	$15
03314 0BDB                        15            .byte	$15
03315 0BDC                        00            .byte	0
03316 0BDD                        15            .byte	$15
03317 0BDE                        15            .byte	$15
03318 0BDF                        2A            .byte	$2A
03319 0BE0                        15            .byte	$15
03320 0BE1                        3F            .byte	$3F
03321 0BE2                        00            .byte	0
03322 0BE3                        15            .byte	$15
03323 0BE4                        3F            .byte	$3F
03324 0BE5                        2A            .byte	$2A
03325 0BE6                        3F            .byte	$3F
03326 0BE7                        15            .byte	$15
03327 0BE8                        00            .byte	0
03328 0BE9                        3F            .byte	$3F
03329 0BEA                        15            .byte	$15
03330 0BEB                        2A            .byte	$2A
03331 0BEC                        3F            .byte	$3F
03332 0BED                        3F            .byte	$3F
03333 0BEE                        00            .byte	0
03334 0BEF                        3F            .byte	$3F
03335 0BF0                        3F            .byte	$3F
03336 0BF1                        2A            .byte	$2A
03337                                           ! 631   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03338 0BF2                        15            .byte	$15
03339 0BF3                        15            .byte	$15
03340 0BF4                        15            .byte	$15
03341 0BF5                        15            .byte	$15
03342 0BF6                        15            .byte	$15
03343 0BF7                        3F            .byte	$3F
03344 0BF8                        15            .byte	$15
03345 0BF9                        3F            .byte	$3F
03346 0BFA                        15            .byte	$15
03347 0BFB                        15            .byte	$15
03348 0BFC                        3F            .byte	$3F
03349 0BFD                        3F            .byte	$3F
03350 0BFE                        3F            .byte	$3F
03351 0BFF                        15            .byte	$15
03352 0C00                        15            .byte	$15
03353 0C01                        3F            .byte	$3F
03354 0C02                        15            .byte	$15
03355 0C03                        3F            .byte	$3F
03356 0C04                        3F            .byte	$3F
03357 0C05                        3F            .byte	$3F
03358 0C06                        15            .byte	$15
03359 0C07                        3F            .byte	$3F
03360 0C08                        3F            .byte	$3F
03361                                           ! 632 };
03362 0C09                        3F            .byte	$3F
03363                                           !BCC_EOS
03364                                           ! 633 static Bit8u palette3[256][3]=
03365                                           ! 634 {
03366                       00000C0A            _palette3:
03367                                           ! 635   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03368 0C0A                        00            .byte	0
03369 0C0B                        00            .byte	0
03370 0C0C                        00            .byte	0
03371 0C0D                        00            .byte	0
03372 0C0E                        00            .byte	0
03373 0C0F                        2A            .byte	$2A
03374 0C10                        00            .byte	0
03375 0C11                        2A            .byte	$2A
03376 0C12                        00            .byte	0
03377 0C13                        00            .byte	0
03378 0C14                        2A            .byte	$2A
03379 0C15                        2A            .byte	$2A
03380 0C16                        2A            .byte	$2A
03381 0C17                        00            .byte	0
03382 0C18                        00            .byte	0
03383 0C19                        2A            .byte	$2A
03384 0C1A                        00            .byte	0
03385 0C1B                        2A            .byte	$2A
03386 0C1C                        2A            .byte	$2A
03387 0C1D                        15            .byte	$15
03388 0C1E                        00            .byte	0
03389 0C1F                        2A            .byte	$2A
03390 0C20                        2A            .byte	$2A
03391 0C21                        2A            .byte	$2A
03392                                           ! 636   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03393 0C22                        15            .byte	$15
03394 0C23                        15            .byte	$15
03395 0C24                        15            .byte	$15
03396 0C25                        15            .byte	$15
03397 0C26                        15            .byte	$15
03398 0C27                        3F            .byte	$3F
03399 0C28                        15            .byte	$15
03400 0C29                        3F            .byte	$3F
03401 0C2A                        15            .byte	$15
03402 0C2B                        15            .byte	$15
03403 0C2C                        3F            .byte	$3F
03404 0C2D                        3F            .byte	$3F
03405 0C2E                        3F            .byte	$3F
03406 0C2F                        15            .byte	$15
03407 0C30                        15            .byte	$15
03408 0C31                        3F            .byte	$3F
03409 0C32                        15            .byte	$15
03410 0C33                        3F            .byte	$3F
03411 0C34                        3F            .byte	$3F
03412 0C35                        3F            .byte	$3F
03413 0C36                        15            .byte	$15
03414 0C37                        3F            .byte	$3F
03415 0C38                        3F            .byte	$3F
03416 0C39                        3F            .byte	$3F
03417                                           ! 637   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03418 0C3A                        00            .byte	0
03419 0C3B                        00            .byte	0
03420 0C3C                        00            .byte	0
03421 0C3D                        05            .byte	5
03422 0C3E                        05            .byte	5
03423 0C3F                        05            .byte	5
03424 0C40                        08            .byte	8
03425 0C41                        08            .byte	8
03426 0C42                        08            .byte	8
03427 0C43                        0B            .byte	$B
03428 0C44                        0B            .byte	$B
03429 0C45                        0B            .byte	$B
03430 0C46                        0E            .byte	$E
03431 0C47                        0E            .byte	$E
03432 0C48                        0E            .byte	$E
03433 0C49                        11            .byte	$11
03434 0C4A                        11            .byte	$11
03435 0C4B                        11            .byte	$11
03436 0C4C                        14            .byte	$14
03437 0C4D                        14            .byte	$14
03438 0C4E                        14            .byte	$14
03439 0C4F                        18            .byte	$18
03440 0C50                        18            .byte	$18
03441 0C51                        18            .byte	$18
03442                                           ! 638   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03443 0C52                        1C            .byte	$1C
03444 0C53                        1C            .byte	$1C
03445 0C54                        1C            .byte	$1C
03446 0C55                        20            .byte	$20
03447 0C56                        20            .byte	$20
03448 0C57                        20            .byte	$20
03449 0C58                        24            .byte	$24
03450 0C59                        24            .byte	$24
03451 0C5A                        24            .byte	$24
03452 0C5B                        28            .byte	$28
03453 0C5C                        28            .byte	$28
03454 0C5D                        28            .byte	$28
03455 0C5E                        2D            .byte	$2D
03456 0C5F                        2D            .byte	$2D
03457 0C60                        2D            .byte	$2D
03458 0C61                        32            .byte	$32
03459 0C62                        32            .byte	$32
03460 0C63                        32            .byte	$32
03461 0C64                        38            .byte	$38
03462 0C65                        38            .byte	$38
03463 0C66                        38            .byte	$38
03464 0C67                        3F            .byte	$3F
03465 0C68                        3F            .byte	$3F
03466 0C69                        3F            .byte	$3F
03467                                           ! 639   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03468 0C6A                        00            .byte	0
03469 0C6B                        00            .byte	0
03470 0C6C                        3F            .byte	$3F
03471 0C6D                        10            .byte	$10
03472 0C6E                        00            .byte	0
03473 0C6F                        3F            .byte	$3F
03474 0C70                        1F            .byte	$1F
03475 0C71                        00            .byte	0
03476 0C72                        3F            .byte	$3F
03477 0C73                        2F            .byte	$2F
03478 0C74                        00            .byte	0
03479 0C75                        3F            .byte	$3F
03480 0C76                        3F            .byte	$3F
03481 0C77                        00            .byte	0
03482 0C78                        3F            .byte	$3F
03483 0C79                        3F            .byte	$3F
03484 0C7A                        00            .byte	0
03485 0C7B                        2F            .byte	$2F
03486 0C7C                        3F            .byte	$3F
03487 0C7D                        00            .byte	0
03488 0C7E                        1F            .byte	$1F
03489 0C7F                        3F            .byte	$3F
03490 0C80                        00            .byte	0
03491 0C81                        10            .byte	$10
03492                                           ! 640   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03493 0C82                        3F            .byte	$3F
03494 0C83                        00            .byte	0
03495 0C84                        00            .byte	0
03496 0C85                        3F            .byte	$3F
03497 0C86                        10            .byte	$10
03498 0C87                        00            .byte	0
03499 0C88                        3F            .byte	$3F
03500 0C89                        1F            .byte	$1F
03501 0C8A                        00            .byte	0
03502 0C8B                        3F            .byte	$3F
03503 0C8C                        2F            .byte	$2F
03504 0C8D                        00            .byte	0
03505 0C8E                        3F            .byte	$3F
03506 0C8F                        3F            .byte	$3F
03507 0C90                        00            .byte	0
03508 0C91                        2F            .byte	$2F
03509 0C92                        3F            .byte	$3F
03510 0C93                        00            .byte	0
03511 0C94                        1F            .byte	$1F
03512 0C95                        3F            .byte	$3F
03513 0C96                        00            .byte	0
03514 0C97                        10            .byte	$10
03515 0C98                        3F            .byte	$3F
03516 0C99                        00            .byte	0
03517                                           ! 641   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03518 0C9A                        00            .byte	0
03519 0C9B                        3F            .byte	$3F
03520 0C9C                        00            .byte	0
03521 0C9D                        00            .byte	0
03522 0C9E                        3F            .byte	$3F
03523 0C9F                        10            .byte	$10
03524 0CA0                        00            .byte	0
03525 0CA1                        3F            .byte	$3F
03526 0CA2                        1F            .byte	$1F
03527 0CA3                        00            .byte	0
03528 0CA4                        3F            .byte	$3F
03529 0CA5                        2F            .byte	$2F
03530 0CA6                        00            .byte	0
03531 0CA7                        3F            .byte	$3F
03532 0CA8                        3F            .byte	$3F
03533 0CA9                        00            .byte	0
03534 0CAA                        2F            .byte	$2F
03535 0CAB                        3F            .byte	$3F
03536 0CAC                        00            .byte	0
03537 0CAD                        1F            .byte	$1F
03538 0CAE                        3F            .byte	$3F
03539 0CAF                        00            .byte	0
03540 0CB0                        10            .byte	$10
03541 0CB1                        3F            .byte	$3F
03542                                           ! 642   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03543 0CB2                        1F            .byte	$1F
03544 0CB3                        1F            .byte	$1F
03545 0CB4                        3F            .byte	$3F
03546 0CB5                        27            .byte	$27
03547 0CB6                        1F            .byte	$1F
03548 0CB7                        3F            .byte	$3F
03549 0CB8                        2F            .byte	$2F
03550 0CB9                        1F            .byte	$1F
03551 0CBA                        3F            .byte	$3F
03552 0CBB                        37            .byte	$37
03553 0CBC                        1F            .byte	$1F
03554 0CBD                        3F            .byte	$3F
03555 0CBE                        3F            .byte	$3F
03556 0CBF                        1F            .byte	$1F
03557 0CC0                        3F            .byte	$3F
03558 0CC1                        3F            .byte	$3F
03559 0CC2                        1F            .byte	$1F
03560 0CC3                        37            .byte	$37
03561 0CC4                        3F            .byte	$3F
03562 0CC5                        1F            .byte	$1F
03563 0CC6                        2F            .byte	$2F
03564 0CC7                        3F            .byte	$3F
03565 0CC8                        1F            .byte	$1F
03566 0CC9                        27            .byte	$27
03567                                           ! 643   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03568 0CCA                        3F            .byte	$3F
03569 0CCB                        1F            .byte	$1F
03570 0CCC                        1F            .byte	$1F
03571 0CCD                        3F            .byte	$3F
03572 0CCE                        27            .byte	$27
03573 0CCF                        1F            .byte	$1F
03574 0CD0                        3F            .byte	$3F
03575 0CD1                        2F            .byte	$2F
03576 0CD2                        1F            .byte	$1F
03577 0CD3                        3F            .byte	$3F
03578 0CD4                        37            .byte	$37
03579 0CD5                        1F            .byte	$1F
03580 0CD6                        3F            .byte	$3F
03581 0CD7                        3F            .byte	$3F
03582 0CD8                        1F            .byte	$1F
03583 0CD9                        37            .byte	$37
03584 0CDA                        3F            .byte	$3F
03585 0CDB                        1F            .byte	$1F
03586 0CDC                        2F            .byte	$2F
03587 0CDD                        3F            .byte	$3F
03588 0CDE                        1F            .byte	$1F
03589 0CDF                        27            .byte	$27
03590 0CE0                        3F            .byte	$3F
03591 0CE1                        1F            .byte	$1F
03592                                           ! 644   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,
03593 0CE2                        1F            .byte	$1F
03594 0CE3                        3F            .byte	$3F
03595 0CE4                        1F            .byte	$1F
03596 0CE5                        1F            .byte	$1F
03597 0CE6                        3F            .byte	$3F
03598 0CE7                        27            .byte	$27
03599 0CE8                        1F            .byte	$1F
03600 0CE9                        3F            .byte	$3F
03601 0CEA                        2F            .byte	$2F
03602 0CEB                        1F            .byte	$1F
03603 0CEC                        3F            .byte	$3F
03604 0CED                        37            .byte	$37
03605 0CEE                        1F            .byte	$1F
03606 0CEF                        3F            .byte	$3F
03607 0CF0                        3F            .byte	$3F
03608 0CF1                        1F            .byte	$1F
03609 0CF2                        37            .byte	$37
03610 0CF3                        3F            .byte	$3F
03611                                           ! 644 0x2f,0x3f, 0x1f,0x27,0x3f,
03612 0CF4                        1F            .byte	$1F
03613 0CF5                        2F            .byte	$2F
03614 0CF6                        3F            .byte	$3F
03615 0CF7                        1F            .byte	$1F
03616 0CF8                        27            .byte	$27
03617 0CF9                        3F            .byte	$3F
03618                                           ! 645   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03619 0CFA                        2D            .byte	$2D
03620 0CFB                        2D            .byte	$2D
03621 0CFC                        3F            .byte	$3F
03622 0CFD                        31            .byte	$31
03623 0CFE                        2D            .byte	$2D
03624 0CFF                        3F            .byte	$3F
03625 0D00                        36            .byte	$36
03626 0D01                        2D            .byte	$2D
03627 0D02                        3F            .byte	$3F
03628 0D03                        3A            .byte	$3A
03629 0D04                        2D            .byte	$2D
03630 0D05                        3F            .byte	$3F
03631 0D06                        3F            .byte	$3F
03632 0D07                        2D            .byte	$2D
03633 0D08                        3F            .byte	$3F
03634 0D09                        3F            .byte	$3F
03635 0D0A                        2D            .byte	$2D
03636 0D0B                        3A            .byte	$3A
03637 0D0C                        3F            .byte	$3F
03638 0D0D                        2D            .byte	$2D
03639 0D0E                        36            .byte	$36
03640 0D0F                        3F            .byte	$3F
03641 0D10                        2D            .byte	$2D
03642 0D11                        31            .byte	$31
03643                                           ! 646   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03644 0D12                        3F            .byte	$3F
03645 0D13                        2D            .byte	$2D
03646 0D14                        2D            .byte	$2D
03647 0D15                        3F            .byte	$3F
03648 0D16                        31            .byte	$31
03649 0D17                        2D            .byte	$2D
03650 0D18                        3F            .byte	$3F
03651 0D19                        36            .byte	$36
03652 0D1A                        2D            .byte	$2D
03653 0D1B                        3F            .byte	$3F
03654 0D1C                        3A            .byte	$3A
03655 0D1D                        2D            .byte	$2D
03656 0D1E                        3F            .byte	$3F
03657 0D1F                        3F            .byte	$3F
03658 0D20                        2D            .byte	$2D
03659 0D21                        3A            .byte	$3A
03660 0D22                        3F            .byte	$3F
03661 0D23                        2D            .byte	$2D
03662 0D24                        36            .byte	$36
03663 0D25                        3F            .byte	$3F
03664 0D26                        2D            .byte	$2D
03665 0D27                        31            .byte	$31
03666 0D28                        3F            .byte	$3F
03667 0D29                        2D            .byte	$2D
03668                                           ! 647   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03669 0D2A                        2D            .byte	$2D
03670 0D2B                        3F            .byte	$3F
03671 0D2C                        2D            .byte	$2D
03672 0D2D                        2D            .byte	$2D
03673 0D2E                        3F            .byte	$3F
03674 0D2F                        31            .byte	$31
03675 0D30                        2D            .byte	$2D
03676 0D31                        3F            .byte	$3F
03677 0D32                        36            .byte	$36
03678 0D33                        2D            .byte	$2D
03679 0D34                        3F            .byte	$3F
03680 0D35                        3A            .byte	$3A
03681 0D36                        2D            .byte	$2D
03682 0D37                        3F            .byte	$3F
03683 0D38                        3F            .byte	$3F
03684 0D39                        2D            .byte	$2D
03685 0D3A                        3A            .byte	$3A
03686 0D3B                        3F            .byte	$3F
03687 0D3C                        2D            .byte	$2D
03688 0D3D                        36            .byte	$36
03689 0D3E                        3F            .byte	$3F
03690 0D3F                        2D            .byte	$2D
03691 0D40                        31            .byte	$31
03692 0D41                        3F            .byte	$3F
03693                                           ! 648   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
03694 0D42                        00            .byte	0
03695 0D43                        00            .byte	0
03696 0D44                        1C            .byte	$1C
03697 0D45                        07            .byte	7
03698 0D46                        00            .byte	0
03699 0D47                        1C            .byte	$1C
03700 0D48                        0E            .byte	$E
03701 0D49                        00            .byte	0
03702 0D4A                        1C            .byte	$1C
03703 0D4B                        15            .byte	$15
03704 0D4C                        00            .byte	0
03705 0D4D                        1C            .byte	$1C
03706 0D4E                        1C            .byte	$1C
03707 0D4F                        00            .byte	0
03708 0D50                        1C            .byte	$1C
03709 0D51                        1C            .byte	$1C
03710 0D52                        00            .byte	0
03711 0D53                        15            .byte	$15
03712 0D54                        1C            .byte	$1C
03713 0D55                        00            .byte	0
03714 0D56                        0E            .byte	$E
03715 0D57                        1C            .byte	$1C
03716 0D58                        00            .byte	0
03717 0D59                        07            .byte	7
03718                                           ! 649   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
03719 0D5A                        1C            .byte	$1C
03720 0D5B                        00            .byte	0
03721 0D5C                        00            .byte	0
03722 0D5D                        1C            .byte	$1C
03723 0D5E                        07            .byte	7
03724 0D5F                        00            .byte	0
03725 0D60                        1C            .byte	$1C
03726 0D61                        0E            .byte	$E
03727 0D62                        00            .byte	0
03728 0D63                        1C            .byte	$1C
03729 0D64                        15            .byte	$15
03730 0D65                        00            .byte	0
03731 0D66                        1C            .byte	$1C
03732 0D67                        1C            .byte	$1C
03733 0D68                        00            .byte	0
03734 0D69                        15            .byte	$15
03735 0D6A                        1C            .byte	$1C
03736 0D6B                        00            .byte	0
03737 0D6C                        0E            .byte	$E
03738 0D6D                        1C            .byte	$1C
03739 0D6E                        00            .byte	0
03740 0D6F                        07            .byte	7
03741 0D70                        1C            .byte	$1C
03742 0D71                        00            .byte	0
03743                                           ! 650   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
03744 0D72                        00            .byte	0
03745 0D73                        1C            .byte	$1C
03746 0D74                        00            .byte	0
03747 0D75                        00            .byte	0
03748 0D76                        1C            .byte	$1C
03749 0D77                        07            .byte	7
03750 0D78                        00            .byte	0
03751 0D79                        1C            .byte	$1C
03752 0D7A                        0E            .byte	$E
03753 0D7B                        00            .byte	0
03754 0D7C                        1C            .byte	$1C
03755 0D7D                        15            .byte	$15
03756 0D7E                        00            .byte	0
03757 0D7F                        1C            .byte	$1C
03758 0D80                        1C            .byte	$1C
03759 0D81                        00            .byte	0
03760 0D82                        15            .byte	$15
03761 0D83                        1C            .byte	$1C
03762 0D84                        00            .byte	0
03763 0D85                        0E            .byte	$E
03764 0D86                        1C            .byte	$1C
03765 0D87                        00            .byte	0
03766 0D88                        07            .byte	7
03767 0D89                        1C            .byte	$1C
03768                                           ! 651   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
03769 0D8A                        0E            .byte	$E
03770 0D8B                        0E            .byte	$E
03771 0D8C                        1C            .byte	$1C
03772 0D8D                        11            .byte	$11
03773 0D8E                        0E            .byte	$E
03774 0D8F                        1C            .byte	$1C
03775 0D90                        15            .byte	$15
03776 0D91                        0E            .byte	$E
03777 0D92                        1C            .byte	$1C
03778 0D93                        18            .byte	$18
03779 0D94                        0E            .byte	$E
03780 0D95                        1C            .byte	$1C
03781 0D96                        1C            .byte	$1C
03782 0D97                        0E            .byte	$E
03783 0D98                        1C            .byte	$1C
03784 0D99                        1C            .byte	$1C
03785 0D9A                        0E            .byte	$E
03786 0D9B                        18            .byte	$18
03787 0D9C                        1C            .byte	$1C
03788 0D9D                        0E            .byte	$E
03789 0D9E                        15            .byte	$15
03790 0D9F                        1C            .byte	$1C
03791 0DA0                        0E            .byte	$E
03792 0DA1                        11            .byte	$11
03793                                           ! 652   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
03794 0DA2                        1C            .byte	$1C
03795 0DA3                        0E            .byte	$E
03796 0DA4                        0E            .byte	$E
03797 0DA5                        1C            .byte	$1C
03798 0DA6                        11            .byte	$11
03799 0DA7                        0E            .byte	$E
03800 0DA8                        1C            .byte	$1C
03801 0DA9                        15            .byte	$15
03802 0DAA                        0E            .byte	$E
03803 0DAB                        1C            .byte	$1C
03804 0DAC                        18            .byte	$18
03805 0DAD                        0E            .byte	$E
03806 0DAE                        1C            .byte	$1C
03807 0DAF                        1C            .byte	$1C
03808 0DB0                        0E            .byte	$E
03809 0DB1                        18            .byte	$18
03810 0DB2                        1C            .byte	$1C
03811 0DB3                        0E            .byte	$E
03812 0DB4                        15            .byte	$15
03813 0DB5                        1C            .byte	$1C
03814 0DB6                        0E            .byte	$E
03815 0DB7                        11            .byte	$11
03816 0DB8                        1C            .byte	$1C
03817 0DB9                        0E            .byte	$E
03818                                           ! 653   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
03819 0DBA                        0E            .byte	$E
03820 0DBB                        1C            .byte	$1C
03821 0DBC                        0E            .byte	$E
03822 0DBD                        0E            .byte	$E
03823 0DBE                        1C            .byte	$1C
03824 0DBF                        11            .byte	$11
03825 0DC0                        0E            .byte	$E
03826 0DC1                        1C            .byte	$1C
03827 0DC2                        15            .byte	$15
03828 0DC3                        0E            .byte	$E
03829 0DC4                        1C            .byte	$1C
03830 0DC5                        18            .byte	$18
03831 0DC6                        0E            .byte	$E
03832 0DC7                        1C            .byte	$1C
03833 0DC8                        1C            .byte	$1C
03834 0DC9                        0E            .byte	$E
03835 0DCA                        18            .byte	$18
03836 0DCB                        1C            .byte	$1C
03837 0DCC                        0E            .byte	$E
03838 0DCD                        15            .byte	$15
03839 0DCE                        1C            .byte	$1C
03840 0DCF                        0E            .byte	$E
03841 0DD0                        11            .byte	$11
03842 0DD1                        1C            .byte	$1C
03843                                           ! 654   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
03844 0DD2                        14            .byte	$14
03845 0DD3                        14            .byte	$14
03846 0DD4                        1C            .byte	$1C
03847 0DD5                        16            .byte	$16
03848 0DD6                        14            .byte	$14
03849 0DD7                        1C            .byte	$1C
03850 0DD8                        18            .byte	$18
03851 0DD9                        14            .byte	$14
03852 0DDA                        1C            .byte	$1C
03853 0DDB                        1A            .byte	$1A
03854 0DDC                        14            .byte	$14
03855 0DDD                        1C            .byte	$1C
03856 0DDE                        1C            .byte	$1C
03857 0DDF                        14            .byte	$14
03858 0DE0                        1C            .byte	$1C
03859 0DE1                        1C            .byte	$1C
03860 0DE2                        14            .byte	$14
03861 0DE3                        1A            .byte	$1A
03862 0DE4                        1C            .byte	$1C
03863 0DE5                        14            .byte	$14
03864 0DE6                        18            .byte	$18
03865 0DE7                        1C            .byte	$1C
03866 0DE8                        14            .byte	$14
03867 0DE9                        16            .byte	$16
03868                                           ! 655   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
03869 0DEA                        1C            .byte	$1C
03870 0DEB                        14            .byte	$14
03871 0DEC                        14            .byte	$14
03872 0DED                        1C            .byte	$1C
03873 0DEE                        16            .byte	$16
03874 0DEF                        14            .byte	$14
03875 0DF0                        1C            .byte	$1C
03876 0DF1                        18            .byte	$18
03877 0DF2                        14            .byte	$14
03878 0DF3                        1C            .byte	$1C
03879 0DF4                        1A            .byte	$1A
03880 0DF5                        14            .byte	$14
03881 0DF6                        1C            .byte	$1C
03882 0DF7                        1C            .byte	$1C
03883 0DF8                        14            .byte	$14
03884 0DF9                        1A            .byte	$1A
03885 0DFA                        1C            .byte	$1C
03886 0DFB                        14            .byte	$14
03887 0DFC                        18            .byte	$18
03888 0DFD                        1C            .byte	$1C
03889 0DFE                        14            .byte	$14
03890 0DFF                        16            .byte	$16
03891 0E00                        1C            .byte	$1C
03892 0E01                        14            .byte	$14
03893                                           ! 656   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
03894 0E02                        14            .byte	$14
03895 0E03                        1C            .byte	$1C
03896 0E04                        14            .byte	$14
03897 0E05                        14            .byte	$14
03898 0E06                        1C            .byte	$1C
03899 0E07                        16            .byte	$16
03900 0E08                        14            .byte	$14
03901 0E09                        1C            .byte	$1C
03902 0E0A                        18            .byte	$18
03903 0E0B                        14            .byte	$14
03904 0E0C                        1C            .byte	$1C
03905 0E0D                        1A            .byte	$1A
03906 0E0E                        14            .byte	$14
03907 0E0F                        1C            .byte	$1C
03908 0E10                        1C            .byte	$1C
03909 0E11                        14            .byte	$14
03910 0E12                        1A            .byte	$1A
03911 0E13                        1C            .byte	$1C
03912 0E14                        14            .byte	$14
03913 0E15                        18            .byte	$18
03914 0E16                        1C            .byte	$1C
03915 0E17                        14            .byte	$14
03916 0E18                        16            .byte	$16
03917 0E19                        1C            .byte	$1C
03918                                           ! 657   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
03919 0E1A                        00            .byte	0
03920 0E1B                        00            .byte	0
03921 0E1C                        10            .byte	$10
03922 0E1D                        04            .byte	4
03923 0E1E                        00            .byte	0
03924 0E1F                        10            .byte	$10
03925 0E20                        08            .byte	8
03926 0E21                        00            .byte	0
03927 0E22                        10            .byte	$10
03928 0E23                        0C            .byte	$C
03929 0E24                        00            .byte	0
03930 0E25                        10            .byte	$10
03931 0E26                        10            .byte	$10
03932 0E27                        00            .byte	0
03933 0E28                        10            .byte	$10
03934 0E29                        10            .byte	$10
03935 0E2A                        00            .byte	0
03936 0E2B                        0C            .byte	$C
03937 0E2C                        10            .byte	$10
03938 0E2D                        00            .byte	0
03939 0E2E                        08            .byte	8
03940 0E2F                        10            .byte	$10
03941 0E30                        00            .byte	0
03942 0E31                        04            .byte	4
03943                                           ! 658   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
03944 0E32                        10            .byte	$10
03945 0E33                        00            .byte	0
03946 0E34                        00            .byte	0
03947 0E35                        10            .byte	$10
03948 0E36                        04            .byte	4
03949 0E37                        00            .byte	0
03950 0E38                        10            .byte	$10
03951 0E39                        08            .byte	8
03952 0E3A                        00            .byte	0
03953 0E3B                        10            .byte	$10
03954 0E3C                        0C            .byte	$C
03955 0E3D                        00            .byte	0
03956 0E3E                        10            .byte	$10
03957 0E3F                        10            .byte	$10
03958 0E40                        00            .byte	0
03959 0E41                        0C            .byte	$C
03960 0E42                        10            .byte	$10
03961 0E43                        00            .byte	0
03962 0E44                        08            .byte	8
03963 0E45                        10            .byte	$10
03964 0E46                        00            .byte	0
03965 0E47                        04            .byte	4
03966 0E48                        10            .byte	$10
03967 0E49                        00            .byte	0
03968                                           ! 659   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
03969 0E4A                        00            .byte	0
03970 0E4B                        10            .byte	$10
03971 0E4C                        00            .byte	0
03972 0E4D                        00            .byte	0
03973 0E4E                        10            .byte	$10
03974 0E4F                        04            .byte	4
03975 0E50                        00            .byte	0
03976 0E51                        10            .byte	$10
03977 0E52                        08            .byte	8
03978 0E53                        00            .byte	0
03979 0E54                        10            .byte	$10
03980 0E55                        0C            .byte	$C
03981 0E56                        00            .byte	0
03982 0E57                        10            .byte	$10
03983 0E58                        10            .byte	$10
03984 0E59                        00            .byte	0
03985 0E5A                        0C            .byte	$C
03986 0E5B                        10            .byte	$10
03987 0E5C                        00            .byte	0
03988 0E5D                        08            .byte	8
03989 0E5E                        10            .byte	$10
03990 0E5F                        00            .byte	0
03991 0E60                        04            .byte	4
03992 0E61                        10            .byte	$10
03993                                           ! 660   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,
03994 0E62                        08            .byte	8
03995 0E63                        08            .byte	8
03996 0E64                        10            .byte	$10
03997 0E65                        0A            .byte	$A
03998 0E66                        08            .byte	8
03999 0E67                        10            .byte	$10
04000 0E68                        0C            .byte	$C
04001 0E69                        08            .byte	8
04002 0E6A                        10            .byte	$10
04003 0E6B                        0E            .byte	$E
04004 0E6C                        08            .byte	8
04005 0E6D                        10            .byte	$10
04006                                           ! 660 0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04007 0E6E                        10            .byte	$10
04008 0E6F                        08            .byte	8
04009 0E70                        10            .byte	$10
04010 0E71                        10            .byte	$10
04011 0E72                        08            .byte	8
04012 0E73                        0E            .byte	$E
04013 0E74                        10            .byte	$10
04014 0E75                        08            .byte	8
04015 0E76                        0C            .byte	$C
04016 0E77                        10            .byte	$10
04017 0E78                        08            .byte	8
04018 0E79                        0A            .byte	$A
04019                                           ! 661   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04020 0E7A                        10            .byte	$10
04021 0E7B                        08            .byte	8
04022 0E7C                        08            .byte	8
04023 0E7D                        10            .byte	$10
04024 0E7E                        0A            .byte	$A
04025 0E7F                        08            .byte	8
04026 0E80                        10            .byte	$10
04027 0E81                        0C            .byte	$C
04028 0E82                        08            .byte	8
04029 0E83                        10            .byte	$10
04030 0E84                        0E            .byte	$E
04031 0E85                        08            .byte	8
04032 0E86                        10            .byte	$10
04033 0E87                        10            .byte	$10
04034 0E88                        08            .byte	8
04035 0E89                        0E            .byte	$E
04036 0E8A                        10            .byte	$10
04037 0E8B                        08            .byte	8
04038 0E8C                        0C            .byte	$C
04039 0E8D                        10            .byte	$10
04040 0E8E                        08            .byte	8
04041 0E8F                        0A            .byte	$A
04042 0E90                        10            .byte	$10
04043 0E91                        08            .byte	8
04044                                           ! 662   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04045 0E92                        08            .byte	8
04046 0E93                        10            .byte	$10
04047 0E94                        08            .byte	8
04048 0E95                        08            .byte	8
04049 0E96                        10            .byte	$10
04050 0E97                        0A            .byte	$A
04051 0E98                        08            .byte	8
04052 0E99                        10            .byte	$10
04053 0E9A                        0C            .byte	$C
04054 0E9B                        08            .byte	8
04055 0E9C                        10            .byte	$10
04056 0E9D                        0E            .byte	$E
04057 0E9E                        08            .byte	8
04058 0E9F                        10            .byte	$10
04059 0EA0                        10            .byte	$10
04060 0EA1                        08            .byte	8
04061 0EA2                        0E            .byte	$E
04062 0EA3                        10            .byte	$10
04063 0EA4                        08            .byte	8
04064 0EA5                        0C            .byte	$C
04065 0EA6                        10            .byte	$10
04066 0EA7                        08            .byte	8
04067 0EA8                        0A            .byte	$A
04068 0EA9                        10            .byte	$10
04069                                           ! 663   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04070 0EAA                        0B            .byte	$B
04071 0EAB                        0B            .byte	$B
04072 0EAC                        10            .byte	$10
04073 0EAD                        0C            .byte	$C
04074 0EAE                        0B            .byte	$B
04075 0EAF                        10            .byte	$10
04076 0EB0                        0D            .byte	$D
04077 0EB1                        0B            .byte	$B
04078 0EB2                        10            .byte	$10
04079 0EB3                        0F            .byte	$F
04080 0EB4                        0B            .byte	$B
04081 0EB5                        10            .byte	$10
04082 0EB6                        10            .byte	$10
04083 0EB7                        0B            .byte	$B
04084 0EB8                        10            .byte	$10
04085 0EB9                        10            .byte	$10
04086 0EBA                        0B            .byte	$B
04087 0EBB                        0F            .byte	$F
04088 0EBC                        10            .byte	$10
04089 0EBD                        0B            .byte	$B
04090 0EBE                        0D            .byte	$D
04091 0EBF                        10            .byte	$10
04092 0EC0                        0B            .byte	$B
04093 0EC1                        0C            .byte	$C
04094                                           ! 664   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04095 0EC2                        10            .byte	$10
04096 0EC3                        0B            .byte	$B
04097 0EC4                        0B            .byte	$B
04098 0EC5                        10            .byte	$10
04099 0EC6                        0C            .byte	$C
04100 0EC7                        0B            .byte	$B
04101 0EC8                        10            .byte	$10
04102 0EC9                        0D            .byte	$D
04103 0ECA                        0B            .byte	$B
04104 0ECB                        10            .byte	$10
04105 0ECC                        0F            .byte	$F
04106 0ECD                        0B            .byte	$B
04107 0ECE                        10            .byte	$10
04108 0ECF                        10            .byte	$10
04109 0ED0                        0B            .byte	$B
04110 0ED1                        0F            .byte	$F
04111 0ED2                        10            .byte	$10
04112 0ED3                        0B            .byte	$B
04113 0ED4                        0D            .byte	$D
04114 0ED5                        10            .byte	$10
04115 0ED6                        0B            .byte	$B
04116 0ED7                        0C            .byte	$C
04117 0ED8                        10            .byte	$10
04118 0ED9                        0B            .byte	$B
04119                                           ! 665   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04120 0EDA                        0B            .byte	$B
04121 0EDB                        10            .byte	$10
04122 0EDC                        0B            .byte	$B
04123 0EDD                        0B            .byte	$B
04124 0EDE                        10            .byte	$10
04125 0EDF                        0C            .byte	$C
04126 0EE0                        0B            .byte	$B
04127 0EE1                        10            .byte	$10
04128 0EE2                        0D            .byte	$D
04129 0EE3                        0B            .byte	$B
04130 0EE4                        10            .byte	$10
04131 0EE5                        0F            .byte	$F
04132 0EE6                        0B            .byte	$B
04133 0EE7                        10            .byte	$10
04134 0EE8                        10            .byte	$10
04135 0EE9                        0B            .byte	$B
04136 0EEA                        0F            .byte	$F
04137 0EEB                        10            .byte	$10
04138 0EEC                        0B            .byte	$B
04139 0EED                        0D            .byte	$D
04140 0EEE                        10            .byte	$10
04141 0EEF                        0B            .byte	$B
04142 0EF0                        0C            .byte	$C
04143 0EF1                        10            .byte	$10
04144                                           ! 666   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04145 0EF2                        00            .byte	0
04146 0EF3                        00            .byte	0
04147 0EF4                        00            .byte	0
04148 0EF5                        00            .byte	0
04149 0EF6                        00            .byte	0
04150 0EF7                        00            .byte	0
04151 0EF8                        00            .byte	0
04152 0EF9                        00            .byte	0
04153 0EFA                        00            .byte	0
04154 0EFB                        00            .byte	0
04155 0EFC                        00            .byte	0
04156 0EFD                        00            .byte	0
04157 0EFE                        00            .byte	0
04158 0EFF                        00            .byte	0
04159 0F00                        00            .byte	0
04160 0F01                        00            .byte	0
04161 0F02                        00            .byte	0
04162 0F03                        00            .byte	0
04163 0F04                        00            .byte	0
04164 0F05                        00            .byte	0
04165 0F06                        00            .byte	0
04166 0F07                        00            .byte	0
04167 0F08                        00            .byte	0
04168                                           ! 667 };
04169 0F09                        00            .byte	0
04170                                           !BCC_EOS
04171                                           ! 668 static Bit8u static_functionality[0x10]=
04172                                           ! 669 {
04173                       00000F0A            _static_functionality:
04174                                           ! 670          0xff,
04175 0F0A                        FF            .byte	$FF
04176                                           ! 671          0xe0,
04177 0F0B                        E0            .byte	$E0
04178                                           ! 672          0x0f,
04179 0F0C                        0F            .byte	$F
04180                                           ! 673          0x00, 0x00, 0x00, 0x00,
04181 0F0D                        00            .byte	0
04182 0F0E                        00            .byte	0
04183 0F0F                        00            .byte	0
04184 0F10                        00            .byte	0
04185                                           ! 674          0x07,
04186 0F11                        07            .byte	7
04187                                           ! 675          0x02,
04188 0F12                        02            .byte	2
04189                                           ! 676          0x08,
04190 0F13                        08            .byte	8
04191                                           ! 677          0xe7,
04192 0F14                        E7            .byte	$E7
04193                                           ! 678          0x0c,
04194 0F15                        0C            .byte	$C
04195                                           ! 679          0x00,
04196 0F16                        00            .byte	0
04197                                           ! 680          0x00,
04198 0F17                        00            .byte	0
04199                                           ! 681          0x00,
04200 0F18                        00            .byte	0
04201                                           ! 682          0x00
04202                                           ! 683 };
04203 0F19                        00            .byte	0
04204                                           !BCC_EOS
04205                                           ! 684 static Bit8u vgafont8[256*8]=
04206                                           ! 685 {
04207                       00000F1A            _vgafont8:
04208                                           ! 686  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04209 0F1A                        00            .byte	0
04210 0F1B                        00            .byte	0
04211 0F1C                        00            .byte	0
04212 0F1D                        00            .byte	0
04213 0F1E                        00            .byte	0
04214 0F1F                        00            .byte	0
04215 0F20                        00            .byte	0
04216 0F21                        00            .byte	0
04217                                           ! 687  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04218 0F22                        7E            .byte	$7E
04219 0F23                        81            .byte	$81
04220 0F24                        A5            .byte	$A5
04221 0F25                        81            .byte	$81
04222 0F26                        BD            .byte	$BD
04223 0F27                        99            .byte	$99
04224 0F28                        81            .byte	$81
04225 0F29                        7E            .byte	$7E
04226                                           ! 688  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04227 0F2A                        7E            .byte	$7E
04228 0F2B                        FF            .byte	$FF
04229 0F2C                        DB            .byte	$DB
04230 0F2D                        FF            .byte	$FF
04231 0F2E                        C3            .byte	$C3
04232 0F2F                        E7            .byte	$E7
04233 0F30                        FF            .byte	$FF
04234 0F31                        7E            .byte	$7E
04235                                           ! 689  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04236 0F32                        6C            .byte	$6C
04237 0F33                        FE            .byte	$FE
04238 0F34                        FE            .byte	$FE
04239 0F35                        FE            .byte	$FE
04240 0F36                        7C            .byte	$7C
04241 0F37                        38            .byte	$38
04242 0F38                        10            .byte	$10
04243 0F39                        00            .byte	0
04244                                           ! 690  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04245 0F3A                        10            .byte	$10
04246 0F3B                        38            .byte	$38
04247 0F3C                        7C            .byte	$7C
04248 0F3D                        FE            .byte	$FE
04249 0F3E                        7C            .byte	$7C
04250 0F3F                        38            .byte	$38
04251 0F40                        10            .byte	$10
04252 0F41                        00            .byte	0
04253                                           ! 691  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04254 0F42                        38            .byte	$38
04255 0F43                        7C            .byte	$7C
04256 0F44                        38            .byte	$38
04257 0F45                        FE            .byte	$FE
04258 0F46                        FE            .byte	$FE
04259 0F47                        7C            .byte	$7C
04260 0F48                        38            .byte	$38
04261 0F49                        7C            .byte	$7C
04262                                           ! 692  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04263 0F4A                        10            .byte	$10
04264 0F4B                        10            .byte	$10
04265 0F4C                        38            .byte	$38
04266 0F4D                        7C            .byte	$7C
04267 0F4E                        FE            .byte	$FE
04268 0F4F                        7C            .byte	$7C
04269 0F50                        38            .byte	$38
04270 0F51                        7C            .byte	$7C
04271                                           ! 693  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04272 0F52                        00            .byte	0
04273 0F53                        00            .byte	0
04274 0F54                        18            .byte	$18
04275 0F55                        3C            .byte	$3C
04276 0F56                        3C            .byte	$3C
04277 0F57                        18            .byte	$18
04278 0F58                        00            .byte	0
04279 0F59                        00            .byte	0
04280                                           ! 694  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04281 0F5A                        FF            .byte	$FF
04282 0F5B                        FF            .byte	$FF
04283 0F5C                        E7            .byte	$E7
04284 0F5D                        C3            .byte	$C3
04285 0F5E                        C3            .byte	$C3
04286 0F5F                        E7            .byte	$E7
04287 0F60                        FF            .byte	$FF
04288 0F61                        FF            .byte	$FF
04289                                           ! 695  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04290 0F62                        00            .byte	0
04291 0F63                        3C            .byte	$3C
04292 0F64                        66            .byte	$66
04293 0F65                        42            .byte	$42
04294 0F66                        42            .byte	$42
04295 0F67                        66            .byte	$66
04296 0F68                        3C            .byte	$3C
04297 0F69                        00            .byte	0
04298                                           ! 696  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04299 0F6A                        FF            .byte	$FF
04300 0F6B                        C3            .byte	$C3
04301 0F6C                        99            .byte	$99
04302 0F6D                        BD            .byte	$BD
04303 0F6E                        BD            .byte	$BD
04304 0F6F                        99            .byte	$99
04305 0F70                        C3            .byte	$C3
04306 0F71                        FF            .byte	$FF
04307                                           ! 697  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04308 0F72                        0F            .byte	$F
04309 0F73                        07            .byte	7
04310 0F74                        0F            .byte	$F
04311 0F75                        7D            .byte	$7D
04312 0F76                        CC            .byte	$CC
04313 0F77                        CC            .byte	$CC
04314 0F78                        CC            .byte	$CC
04315 0F79                        78            .byte	$78
04316                                           ! 698  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04317 0F7A                        3C            .byte	$3C
04318 0F7B                        66            .byte	$66
04319 0F7C                        66            .byte	$66
04320 0F7D                        66            .byte	$66
04321 0F7E                        3C            .byte	$3C
04322 0F7F                        18            .byte	$18
04323 0F80                        7E            .byte	$7E
04324 0F81                        18            .byte	$18
04325                                           ! 699  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04326 0F82                        3F            .byte	$3F
04327 0F83                        33            .byte	$33
04328 0F84                        3F            .byte	$3F
04329 0F85                        30            .byte	$30
04330 0F86                        30            .byte	$30
04331 0F87                        70            .byte	$70
04332 0F88                        F0            .byte	$F0
04333 0F89                        E0            .byte	$E0
04334                                           ! 700  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04335 0F8A                        7F            .byte	$7F
04336 0F8B                        63            .byte	$63
04337 0F8C                        7F            .byte	$7F
04338 0F8D                        63            .byte	$63
04339 0F8E                        63            .byte	$63
04340 0F8F                        67            .byte	$67
04341 0F90                        E6            .byte	$E6
04342 0F91                        C0            .byte	$C0
04343                                           ! 701  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04344 0F92                        99            .byte	$99
04345 0F93                        5A            .byte	$5A
04346 0F94                        3C            .byte	$3C
04347 0F95                        E7            .byte	$E7
04348 0F96                        E7            .byte	$E7
04349 0F97                        3C            .byte	$3C
04350 0F98                        5A            .byte	$5A
04351 0F99                        99            .byte	$99
04352                                           ! 702  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04353 0F9A                        80            .byte	$80
04354 0F9B                        E0            .byte	$E0
04355 0F9C                        F8            .byte	$F8
04356 0F9D                        FE            .byte	$FE
04357 0F9E                        F8            .byte	$F8
04358 0F9F                        E0            .byte	$E0
04359 0FA0                        80            .byte	$80
04360 0FA1                        00            .byte	0
04361                                           ! 703  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04362 0FA2                        02            .byte	2
04363 0FA3                        0E            .byte	$E
04364 0FA4                        3E            .byte	$3E
04365 0FA5                        FE            .byte	$FE
04366 0FA6                        3E            .byte	$3E
04367 0FA7                        0E            .byte	$E
04368 0FA8                        02            .byte	2
04369 0FA9                        00            .byte	0
04370                                           ! 704  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e
04371 0FAA                        18            .byte	$18
04372 0FAB                        3C            .byte	$3C
04373 0FAC                        7E            .byte	$7E
04374 0FAD                        18            .byte	$18
04375 0FAE                        18            .byte	$18
04376                                           ! 704 , 0x3c, 0x18,
04377 0FAF                        7E            .byte	$7E
04378 0FB0                        3C            .byte	$3C
04379 0FB1                        18            .byte	$18
04380                                           ! 705  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04381 0FB2                        66            .byte	$66
04382 0FB3                        66            .byte	$66
04383 0FB4                        66            .byte	$66
04384 0FB5                        66            .byte	$66
04385 0FB6                        66            .byte	$66
04386 0FB7                        00            .byte	0
04387 0FB8                        66            .byte	$66
04388 0FB9                        00            .byte	0
04389                                           ! 706  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04390 0FBA                        7F            .byte	$7F
04391 0FBB                        DB            .byte	$DB
04392 0FBC                        DB            .byte	$DB
04393 0FBD                        7B            .byte	$7B
04394 0FBE                        1B            .byte	$1B
04395 0FBF                        1B            .byte	$1B
04396 0FC0                        1B            .byte	$1B
04397 0FC1                        00            .byte	0
04398                                           ! 707  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04399 0FC2                        3E            .byte	$3E
04400 0FC3                        63            .byte	$63
04401 0FC4                        38            .byte	$38
04402 0FC5                        6C            .byte	$6C
04403 0FC6                        6C            .byte	$6C
04404 0FC7                        38            .byte	$38
04405 0FC8                        CC            .byte	$CC
04406 0FC9                        78            .byte	$78
04407                                           ! 708  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04408 0FCA                        00            .byte	0
04409 0FCB                        00            .byte	0
04410 0FCC                        00            .byte	0
04411 0FCD                        00            .byte	0
04412 0FCE                        7E            .byte	$7E
04413 0FCF                        7E            .byte	$7E
04414 0FD0                        7E            .byte	$7E
04415 0FD1                        00            .byte	0
04416                                           ! 709  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04417 0FD2                        18            .byte	$18
04418 0FD3                        3C            .byte	$3C
04419 0FD4                        7E            .byte	$7E
04420 0FD5                        18            .byte	$18
04421 0FD6                        7E            .byte	$7E
04422 0FD7                        3C            .byte	$3C
04423 0FD8                        18            .byte	$18
04424 0FD9                        FF            .byte	$FF
04425                                           ! 710  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04426 0FDA                        18            .byte	$18
04427 0FDB                        3C            .byte	$3C
04428 0FDC                        7E            .byte	$7E
04429 0FDD                        18            .byte	$18
04430 0FDE                        18            .byte	$18
04431 0FDF                        18            .byte	$18
04432 0FE0                        18            .byte	$18
04433 0FE1                        00            .byte	0
04434                                           ! 711  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04435 0FE2                        18            .byte	$18
04436 0FE3                        18            .byte	$18
04437 0FE4                        18            .byte	$18
04438 0FE5                        18            .byte	$18
04439 0FE6                        7E            .byte	$7E
04440 0FE7                        3C            .byte	$3C
04441 0FE8                        18            .byte	$18
04442 0FE9                        00            .byte	0
04443                                           ! 712  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04444 0FEA                        00            .byte	0
04445 0FEB                        18            .byte	$18
04446 0FEC                        0C            .byte	$C
04447 0FED                        FE            .byte	$FE
04448 0FEE                        0C            .byte	$C
04449 0FEF                        18            .byte	$18
04450 0FF0                        00            .byte	0
04451 0FF1                        00            .byte	0
04452                                           ! 713  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04453 0FF2                        00            .byte	0
04454 0FF3                        30            .byte	$30
04455 0FF4                        60            .byte	$60
04456 0FF5                        FE            .byte	$FE
04457 0FF6                        60            .byte	$60
04458 0FF7                        30            .byte	$30
04459 0FF8                        00            .byte	0
04460 0FF9                        00            .byte	0
04461                                           ! 714  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04462 0FFA                        00            .byte	0
04463 0FFB                        00            .byte	0
04464 0FFC                        C0            .byte	$C0
04465 0FFD                        C0            .byte	$C0
04466 0FFE                        C0            .byte	$C0
04467 0FFF                        FE            .byte	$FE
04468 1000                        00            .byte	0
04469 1001                        00            .byte	0
04470                                           ! 715  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04471 1002                        00            .byte	0
04472 1003                        24            .byte	$24
04473 1004                        66            .byte	$66
04474 1005                        FF            .byte	$FF
04475 1006                        66            .byte	$66
04476 1007                        24            .byte	$24
04477 1008                        00            .byte	0
04478 1009                        00            .byte	0
04479                                           ! 716  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04480 100A                        00            .byte	0
04481 100B                        18            .byte	$18
04482 100C                        3C            .byte	$3C
04483 100D                        7E            .byte	$7E
04484 100E                        FF            .byte	$FF
04485 100F                        FF            .byte	$FF
04486 1010                        00            .byte	0
04487 1011                        00            .byte	0
04488                                           ! 717  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04489 1012                        00            .byte	0
04490 1013                        FF            .byte	$FF
04491 1014                        FF            .byte	$FF
04492 1015                        7E            .byte	$7E
04493 1016                        3C            .byte	$3C
04494 1017                        18            .byte	$18
04495 1018                        00            .byte	0
04496 1019                        00            .byte	0
04497                                           ! 718  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04498 101A                        00            .byte	0
04499 101B                        00            .byte	0
04500 101C                        00            .byte	0
04501 101D                        00            .byte	0
04502 101E                        00            .byte	0
04503 101F                        00            .byte	0
04504 1020                        00            .byte	0
04505 1021                        00            .byte	0
04506                                           ! 719  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04507 1022                        30            .byte	$30
04508 1023                        78            .byte	$78
04509 1024                        78            .byte	$78
04510 1025                        30            .byte	$30
04511 1026                        30            .byte	$30
04512 1027                        00            .byte	0
04513 1028                        30            .byte	$30
04514 1029                        00            .byte	0
04515                                           ! 720  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04516 102A                        6C            .byte	$6C
04517 102B                        6C            .byte	$6C
04518 102C                        6C            .byte	$6C
04519 102D                        00            .byte	0
04520 102E                        00            .byte	0
04521 102F                        00            .byte	0
04522 1030                        00            .byte	0
04523 1031                        00            .byte	0
04524                                           ! 721  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04525 1032                        6C            .byte	$6C
04526 1033                        6C            .byte	$6C
04527 1034                        FE            .byte	$FE
04528 1035                        6C            .byte	$6C
04529 1036                        FE            .byte	$FE
04530 1037                        6C            .byte	$6C
04531 1038                        6C            .byte	$6C
04532 1039                        00            .byte	0
04533                                           ! 722  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04534 103A                        30            .byte	$30
04535 103B                        7C            .byte	$7C
04536 103C                        C0            .byte	$C0
04537 103D                        78            .byte	$78
04538 103E                        0C            .byte	$C
04539 103F                        F8            .byte	$F8
04540 1040                        30            .byte	$30
04541 1041                        00            .byte	0
04542                                           ! 723  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04543 1042                        00            .byte	0
04544 1043                        C6            .byte	$C6
04545 1044                        CC            .byte	$CC
04546 1045                        18            .byte	$18
04547 1046                        30            .byte	$30
04548 1047                        66            .byte	$66
04549 1048                        C6            .byte	$C6
04550 1049                        00            .byte	0
04551                                           ! 724  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04552 104A                        38            .byte	$38
04553 104B                        6C            .byte	$6C
04554 104C                        38            .byte	$38
04555 104D                        76            .byte	$76
04556 104E                        DC            .byte	$DC
04557 104F                        CC            .byte	$CC
04558 1050                        76            .byte	$76
04559 1051                        00            .byte	0
04560                                           ! 725  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04561 1052                        60            .byte	$60
04562 1053                        60            .byte	$60
04563 1054                        C0            .byte	$C0
04564 1055                        00            .byte	0
04565 1056                        00            .byte	0
04566 1057                        00            .byte	0
04567 1058                        00            .byte	0
04568 1059                        00            .byte	0
04569                                           ! 726  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04570 105A                        18            .byte	$18
04571 105B                        30            .byte	$30
04572 105C                        60            .byte	$60
04573 105D                        60            .byte	$60
04574 105E                        60            .byte	$60
04575 105F                        30            .byte	$30
04576 1060                        18            .byte	$18
04577 1061                        00            .byte	0
04578                                           ! 727  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04579 1062                        60            .byte	$60
04580 1063                        30            .byte	$30
04581 1064                        18            .byte	$18
04582 1065                        18            .byte	$18
04583 1066                        18            .byte	$18
04584 1067                        30            .byte	$30
04585 1068                        60            .byte	$60
04586 1069                        00            .byte	0
04587                                           ! 728  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04588 106A                        00            .byte	0
04589 106B                        66            .byte	$66
04590 106C                        3C            .byte	$3C
04591 106D                        FF            .byte	$FF
04592 106E                        3C            .byte	$3C
04593 106F                        66            .byte	$66
04594 1070                        00            .byte	0
04595 1071                        00            .byte	0
04596                                           ! 729  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04597 1072                        00            .byte	0
04598 1073                        30            .byte	$30
04599 1074                        30            .byte	$30
04600 1075                        FC            .byte	$FC
04601 1076                        30            .byte	$30
04602 1077                        30            .byte	$30
04603 1078                        00            .byte	0
04604 1079                        00            .byte	0
04605                                           ! 730  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04606 107A                        00            .byte	0
04607 107B                        00            .byte	0
04608 107C                        00            .byte	0
04609 107D                        00            .byte	0
04610 107E                        00            .byte	0
04611 107F                        30            .byte	$30
04612 1080                        30            .byte	$30
04613 1081                        60            .byte	$60
04614                                           ! 731  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04615 1082                        00            .byte	0
04616 1083                        00            .byte	0
04617 1084                        00            .byte	0
04618 1085                        FC            .byte	$FC
04619 1086                        00            .byte	0
04620 1087                        00            .byte	0
04621 1088                        00            .byte	0
04622 1089                        00            .byte	0
04623                                           ! 732  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04624 108A                        00            .byte	0
04625 108B                        00            .byte	0
04626 108C                        00            .byte	0
04627 108D                        00            .byte	0
04628 108E                        00            .byte	0
04629 108F                        30            .byte	$30
04630 1090                        30            .byte	$30
04631 1091                        00            .byte	0
04632                                           ! 733  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04633 1092                        06            .byte	6
04634 1093                        0C            .byte	$C
04635 1094                        18            .byte	$18
04636 1095                        30            .byte	$30
04637 1096                        60            .byte	$60
04638 1097                        C0            .byte	$C0
04639 1098                        80            .byte	$80
04640 1099                        00            .byte	0
04641                                           ! 734  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04642 109A                        7C            .byte	$7C
04643 109B                        C6            .byte	$C6
04644 109C                        CE            .byte	$CE
04645 109D                        DE            .byte	$DE
04646 109E                        F6            .byte	$F6
04647 109F                        E6            .byte	$E6
04648 10A0                        7C            .byte	$7C
04649 10A1                        00            .byte	0
04650                                           ! 735  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04651 10A2                        30            .byte	$30
04652 10A3                        70            .byte	$70
04653 10A4                        30            .byte	$30
04654 10A5                        30            .byte	$30
04655 10A6                        30            .byte	$30
04656 10A7                        30            .byte	$30
04657 10A8                        FC            .byte	$FC
04658 10A9                        00            .byte	0
04659                                           ! 736  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04660 10AA                        78            .byte	$78
04661 10AB                        CC            .byte	$CC
04662 10AC                        0C            .byte	$C
04663 10AD                        38            .byte	$38
04664 10AE                        60            .byte	$60
04665 10AF                        CC            .byte	$CC
04666 10B0                        FC            .byte	$FC
04667 10B1                        00            .byte	0
04668                                           ! 737  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04669 10B2                        78            .byte	$78
04670 10B3                        CC            .byte	$CC
04671 10B4                        0C            .byte	$C
04672 10B5                        38            .byte	$38
04673 10B6                        0C            .byte	$C
04674 10B7                        CC            .byte	$CC
04675 10B8                        78            .byte	$78
04676 10B9                        00            .byte	0
04677                                           ! 738  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04678 10BA                        1C            .byte	$1C
04679 10BB                        3C            .byte	$3C
04680 10BC                        6C            .byte	$6C
04681 10BD                        CC            .byte	$CC
04682 10BE                        FE            .byte	$FE
04683 10BF                        0C            .byte	$C
04684 10C0                        1E            .byte	$1E
04685 10C1                        00            .byte	0
04686                                           ! 739  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
04687 10C2                        FC            .byte	$FC
04688 10C3                        C0            .byte	$C0
04689 10C4                        F8            .byte	$F8
04690 10C5                        0C            .byte	$C
04691 10C6                        0C            .byte	$C
04692 10C7                        CC            .byte	$CC
04693 10C8                        78            .byte	$78
04694 10C9                        00            .byte	0
04695                                           ! 740  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
04696 10CA                        38            .byte	$38
04697 10CB                        60            .byte	$60
04698 10CC                        C0            .byte	$C0
04699 10CD                        F8            .byte	$F8
04700 10CE                        CC            .byte	$CC
04701 10CF                        CC            .byte	$CC
04702 10D0                        78            .byte	$78
04703 10D1                        00            .byte	0
04704                                           ! 741  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
04705 10D2                        FC            .byte	$FC
04706 10D3                        CC            .byte	$CC
04707 10D4                        0C            .byte	$C
04708 10D5                        18            .byte	$18
04709 10D6                        30            .byte	$30
04710 10D7                        30            .byte	$30
04711 10D8                        30            .byte	$30
04712 10D9                        00            .byte	0
04713                                           ! 742  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
04714 10DA                        78            .byte	$78
04715 10DB                        CC            .byte	$CC
04716 10DC                        CC            .byte	$CC
04717 10DD                        78            .byte	$78
04718 10DE                        CC            .byte	$CC
04719 10DF                        CC            .byte	$CC
04720 10E0                        78            .byte	$78
04721 10E1                        00            .byte	0
04722                                           ! 743  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
04723 10E2                        78            .byte	$78
04724 10E3                        CC            .byte	$CC
04725 10E4                        CC            .byte	$CC
04726 10E5                        7C            .byte	$7C
04727 10E6                        0C            .byte	$C
04728 10E7                        18            .byte	$18
04729 10E8                        70            .byte	$70
04730 10E9                        00            .byte	0
04731                                           ! 744  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
04732 10EA                        00            .byte	0
04733 10EB                        30            .byte	$30
04734 10EC                        30            .byte	$30
04735 10ED                        00            .byte	0
04736 10EE                        00            .byte	0
04737 10EF                        30            .byte	$30
04738 10F0                        30            .byte	$30
04739 10F1                        00            .byte	0
04740                                           ! 745  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
04741 10F2                        00            .byte	0
04742 10F3                        30            .byte	$30
04743 10F4                        30            .byte	$30
04744 10F5                        00            .byte	0
04745 10F6                        00            .byte	0
04746 10F7                        30            .byte	$30
04747 10F8                        30            .byte	$30
04748 10F9                        60            .byte	$60
04749                                           ! 746  0x18, 0x30, 0x60, 0xc0, 
04750 10FA                        18            .byte	$18
04751 10FB                        30            .byte	$30
04752 10FC                        60            .byte	$60
04753 10FD                        C0            .byte	$C0
04754                                           ! 746 0x60, 0x30, 0x18, 0x00,
04755 10FE                        60            .byte	$60
04756 10FF                        30            .byte	$30
04757 1100                        18            .byte	$18
04758 1101                        00            .byte	0
04759                                           ! 747  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
04760 1102                        00            .byte	0
04761 1103                        00            .byte	0
04762 1104                        FC            .byte	$FC
04763 1105                        00            .byte	0
04764 1106                        00            .byte	0
04765 1107                        FC            .byte	$FC
04766 1108                        00            .byte	0
04767 1109                        00            .byte	0
04768                                           ! 748  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
04769 110A                        60            .byte	$60
04770 110B                        30            .byte	$30
04771 110C                        18            .byte	$18
04772 110D                        0C            .byte	$C
04773 110E                        18            .byte	$18
04774 110F                        30            .byte	$30
04775 1110                        60            .byte	$60
04776 1111                        00            .byte	0
04777                                           ! 749  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
04778 1112                        78            .byte	$78
04779 1113                        CC            .byte	$CC
04780 1114                        0C            .byte	$C
04781 1115                        18            .byte	$18
04782 1116                        30            .byte	$30
04783 1117                        00            .byte	0
04784 1118                        30            .byte	$30
04785 1119                        00            .byte	0
04786                                           ! 750  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
04787 111A                        7C            .byte	$7C
04788 111B                        C6            .byte	$C6
04789 111C                        DE            .byte	$DE
04790 111D                        DE            .byte	$DE
04791 111E                        DE            .byte	$DE
04792 111F                        C0            .byte	$C0
04793 1120                        78            .byte	$78
04794 1121                        00            .byte	0
04795                                           ! 751  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
04796 1122                        30            .byte	$30
04797 1123                        78            .byte	$78
04798 1124                        CC            .byte	$CC
04799 1125                        CC            .byte	$CC
04800 1126                        FC            .byte	$FC
04801 1127                        CC            .byte	$CC
04802 1128                        CC            .byte	$CC
04803 1129                        00            .byte	0
04804                                           ! 752  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
04805 112A                        FC            .byte	$FC
04806 112B                        66            .byte	$66
04807 112C                        66            .byte	$66
04808 112D                        7C            .byte	$7C
04809 112E                        66            .byte	$66
04810 112F                        66            .byte	$66
04811 1130                        FC            .byte	$FC
04812 1131                        00            .byte	0
04813                                           ! 753  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
04814 1132                        3C            .byte	$3C
04815 1133                        66            .byte	$66
04816 1134                        C0            .byte	$C0
04817 1135                        C0            .byte	$C0
04818 1136                        C0            .byte	$C0
04819 1137                        66            .byte	$66
04820 1138                        3C            .byte	$3C
04821 1139                        00            .byte	0
04822                                           ! 754  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
04823 113A                        F8            .byte	$F8
04824 113B                        6C            .byte	$6C
04825 113C                        66            .byte	$66
04826 113D                        66            .byte	$66
04827 113E                        66            .byte	$66
04828 113F                        6C            .byte	$6C
04829 1140                        F8            .byte	$F8
04830 1141                        00            .byte	0
04831                                           ! 755  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
04832 1142                        FE            .byte	$FE
04833 1143                        62            .byte	$62
04834 1144                        68            .byte	$68
04835 1145                        78            .byte	$78
04836 1146                        68            .byte	$68
04837 1147                        62            .byte	$62
04838 1148                        FE            .byte	$FE
04839 1149                        00            .byte	0
04840                                           ! 756  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
04841 114A                        FE            .byte	$FE
04842 114B                        62            .byte	$62
04843 114C                        68            .byte	$68
04844 114D                        78            .byte	$78
04845 114E                        68            .byte	$68
04846 114F                        60            .byte	$60
04847 1150                        F0            .byte	$F0
04848 1151                        00            .byte	0
04849                                           ! 757  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
04850 1152                        3C            .byte	$3C
04851 1153                        66            .byte	$66
04852 1154                        C0            .byte	$C0
04853 1155                        C0            .byte	$C0
04854 1156                        CE            .byte	$CE
04855 1157                        66            .byte	$66
04856 1158                        3E            .byte	$3E
04857 1159                        00            .byte	0
04858                                           ! 758  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
04859 115A                        CC            .byte	$CC
04860 115B                        CC            .byte	$CC
04861 115C                        CC            .byte	$CC
04862 115D                        FC            .byte	$FC
04863 115E                        CC            .byte	$CC
04864 115F                        CC            .byte	$CC
04865 1160                        CC            .byte	$CC
04866 1161                        00            .byte	0
04867                                           ! 759  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04868 1162                        78            .byte	$78
04869 1163                        30            .byte	$30
04870 1164                        30            .byte	$30
04871 1165                        30            .byte	$30
04872 1166                        30            .byte	$30
04873 1167                        30            .byte	$30
04874 1168                        78            .byte	$78
04875 1169                        00            .byte	0
04876                                           ! 760  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
04877 116A                        1E            .byte	$1E
04878 116B                        0C            .byte	$C
04879 116C                        0C            .byte	$C
04880 116D                        0C            .byte	$C
04881 116E                        CC            .byte	$CC
04882 116F                        CC            .byte	$CC
04883 1170                        78            .byte	$78
04884 1171                        00            .byte	0
04885                                           ! 761  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
04886 1172                        E6            .byte	$E6
04887 1173                        66            .byte	$66
04888 1174                        6C            .byte	$6C
04889 1175                        78            .byte	$78
04890 1176                        6C            .byte	$6C
04891 1177                        66            .byte	$66
04892 1178                        E6            .byte	$E6
04893 1179                        00            .byte	0
04894                                           ! 762  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
04895 117A                        F0            .byte	$F0
04896 117B                        60            .byte	$60
04897 117C                        60            .byte	$60
04898 117D                        60            .byte	$60
04899 117E                        62            .byte	$62
04900 117F                        66            .byte	$66
04901 1180                        FE            .byte	$FE
04902 1181                        00            .byte	0
04903                                           ! 763  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
04904 1182                        C6            .byte	$C6
04905 1183                        EE            .byte	$EE
04906 1184                        FE            .byte	$FE
04907 1185                        FE            .byte	$FE
04908 1186                        D6            .byte	$D6
04909 1187                        C6            .byte	$C6
04910 1188                        C6            .byte	$C6
04911 1189                        00            .byte	0
04912                                           ! 764  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
04913 118A                        C6            .byte	$C6
04914 118B                        E6            .byte	$E6
04915 118C                        F6            .byte	$F6
04916 118D                        DE            .byte	$DE
04917 118E                        CE            .byte	$CE
04918 118F                        C6            .byte	$C6
04919 1190                        C6            .byte	$C6
04920 1191                        00            .byte	0
04921                                           ! 765  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
04922 1192                        38            .byte	$38
04923 1193                        6C            .byte	$6C
04924 1194                        C6            .byte	$C6
04925 1195                        C6            .byte	$C6
04926 1196                        C6            .byte	$C6
04927 1197                        6C            .byte	$6C
04928 1198                        38            .byte	$38
04929 1199                        00            .byte	0
04930                                           ! 766  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
04931 119A                        FC            .byte	$FC
04932 119B                        66            .byte	$66
04933 119C                        66            .byte	$66
04934 119D                        7C            .byte	$7C
04935 119E                        60            .byte	$60
04936 119F                        60            .byte	$60
04937 11A0                        F0            .byte	$F0
04938 11A1                        00            .byte	0
04939                                           ! 767  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
04940 11A2                        78            .byte	$78
04941 11A3                        CC            .byte	$CC
04942 11A4                        CC            .byte	$CC
04943 11A5                        CC            .byte	$CC
04944 11A6                        DC            .byte	$DC
04945 11A7                        78            .byte	$78
04946 11A8                        1C            .byte	$1C
04947 11A9                        00            .byte	0
04948                                           ! 768  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
04949 11AA                        FC            .byte	$FC
04950 11AB                        66            .byte	$66
04951 11AC                        66            .byte	$66
04952 11AD                        7C            .byte	$7C
04953 11AE                        6C            .byte	$6C
04954 11AF                        66            .byte	$66
04955 11B0                        E6            .byte	$E6
04956 11B1                        00            .byte	0
04957                                           ! 769  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
04958 11B2                        78            .byte	$78
04959 11B3                        CC            .byte	$CC
04960 11B4                        E0            .byte	$E0
04961 11B5                        70            .byte	$70
04962 11B6                        1C            .byte	$1C
04963 11B7                        CC            .byte	$CC
04964 11B8                        78            .byte	$78
04965 11B9                        00            .byte	0
04966                                           ! 770  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04967 11BA                        FC            .byte	$FC
04968 11BB                        B4            .byte	$B4
04969 11BC                        30            .byte	$30
04970 11BD                        30            .byte	$30
04971 11BE                        30            .byte	$30
04972 11BF                        30            .byte	$30
04973 11C0                        78            .byte	$78
04974 11C1                        00            .byte	0
04975                                           ! 771  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
04976 11C2                        CC            .byte	$CC
04977 11C3                        CC            .byte	$CC
04978 11C4                        CC            .byte	$CC
04979 11C5                        CC            .byte	$CC
04980 11C6                        CC            .byte	$CC
04981 11C7                        CC            .byte	$CC
04982 11C8                        FC            .byte	$FC
04983 11C9                        00            .byte	0
04984                                           ! 772  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
04985 11CA                        CC            .byte	$CC
04986 11CB                        CC            .byte	$CC
04987 11CC                        CC            .byte	$CC
04988 11CD                        CC            .byte	$CC
04989 11CE                        CC            .byte	$CC
04990 11CF                        78            .byte	$78
04991 11D0                        30            .byte	$30
04992 11D1                        00            .byte	0
04993                                           ! 773  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
04994 11D2                        C6            .byte	$C6
04995 11D3                        C6            .byte	$C6
04996 11D4                        C6            .byte	$C6
04997 11D5                        D6            .byte	$D6
04998 11D6                        FE            .byte	$FE
04999 11D7                        EE            .byte	$EE
05000 11D8                        C6            .byte	$C6
05001 11D9                        00            .byte	0
05002                                           ! 774  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05003 11DA                        C6            .byte	$C6
05004 11DB                        C6            .byte	$C6
05005 11DC                        6C            .byte	$6C
05006 11DD                        38            .byte	$38
05007 11DE                        38            .byte	$38
05008 11DF                        6C            .byte	$6C
05009 11E0                        C6            .byte	$C6
05010 11E1                        00            .byte	0
05011                                           ! 775  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05012 11E2                        CC            .byte	$CC
05013 11E3                        CC            .byte	$CC
05014 11E4                        CC            .byte	$CC
05015 11E5                        78            .byte	$78
05016 11E6                        30            .byte	$30
05017 11E7                        30            .byte	$30
05018 11E8                        78            .byte	$78
05019 11E9                        00            .byte	0
05020                                           ! 776  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05021 11EA                        FE            .byte	$FE
05022 11EB                        C6            .byte	$C6
05023 11EC                        8C            .byte	$8C
05024 11ED                        18            .byte	$18
05025 11EE                        32            .byte	$32
05026 11EF                        66            .byte	$66
05027 11F0                        FE            .byte	$FE
05028 11F1                        00            .byte	0
05029                                           ! 777  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05030 11F2                        78            .byte	$78
05031 11F3                        60            .byte	$60
05032 11F4                        60            .byte	$60
05033 11F5                        60            .byte	$60
05034 11F6                        60            .byte	$60
05035 11F7                        60            .byte	$60
05036 11F8                        78            .byte	$78
05037 11F9                        00            .byte	0
05038                                           ! 778  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05039 11FA                        C0            .byte	$C0
05040 11FB                        60            .byte	$60
05041 11FC                        30            .byte	$30
05042 11FD                        18            .byte	$18
05043 11FE                        0C            .byte	$C
05044 11FF                        06            .byte	6
05045 1200                        02            .byte	2
05046 1201                        00            .byte	0
05047                                           ! 779  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05048 1202                        78            .byte	$78
05049 1203                        18            .byte	$18
05050 1204                        18            .byte	$18
05051 1205                        18            .byte	$18
05052 1206                        18            .byte	$18
05053 1207                        18            .byte	$18
05054 1208                        78            .byte	$78
05055 1209                        00            .byte	0
05056                                           ! 780  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05057 120A                        10            .byte	$10
05058 120B                        38            .byte	$38
05059 120C                        6C            .byte	$6C
05060 120D                        C6            .byte	$C6
05061 120E                        00            .byte	0
05062 120F                        00            .byte	0
05063 1210                        00            .byte	0
05064 1211                        00            .byte	0
05065                                           ! 781  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05066 1212                        00            .byte	0
05067 1213                        00            .byte	0
05068 1214                        00            .byte	0
05069 1215                        00            .byte	0
05070 1216                        00            .byte	0
05071 1217                        00            .byte	0
05072 1218                        00            .byte	0
05073 1219                        FF            .byte	$FF
05074                                           ! 782  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05075 121A                        30            .byte	$30
05076 121B                        30            .byte	$30
05077 121C                        18            .byte	$18
05078 121D                        00            .byte	0
05079 121E                        00            .byte	0
05080 121F                        00            .byte	0
05081 1220                        00            .byte	0
05082 1221                        00            .byte	0
05083                                           ! 783  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05084 1222                        00            .byte	0
05085 1223                        00            .byte	0
05086 1224                        78            .byte	$78
05087 1225                        0C            .byte	$C
05088 1226                        7C            .byte	$7C
05089 1227                        CC            .byte	$CC
05090 1228                        76            .byte	$76
05091 1229                        00            .byte	0
05092                                           ! 784  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05093 122A                        E0            .byte	$E0
05094 122B                        60            .byte	$60
05095 122C                        60            .byte	$60
05096 122D                        7C            .byte	$7C
05097 122E                        66            .byte	$66
05098 122F                        66            .byte	$66
05099 1230                        DC            .byte	$DC
05100 1231                        00            .byte	0
05101                                           ! 785  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05102 1232                        00            .byte	0
05103 1233                        00            .byte	0
05104 1234                        78            .byte	$78
05105 1235                        CC            .byte	$CC
05106 1236                        C0            .byte	$C0
05107 1237                        CC            .byte	$CC
05108 1238                        78            .byte	$78
05109 1239                        00            .byte	0
05110                                           ! 786  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05111 123A                        1C            .byte	$1C
05112 123B                        0C            .byte	$C
05113 123C                        0C            .byte	$C
05114 123D                        7C            .byte	$7C
05115 123E                        CC            .byte	$CC
05116 123F                        CC            .byte	$CC
05117 1240                        76            .byte	$76
05118 1241                        00            .byte	0
05119                                           ! 787  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05120 1242                        00            .byte	0
05121 1243                        00            .byte	0
05122 1244                        78            .byte	$78
05123 1245                        CC            .byte	$CC
05124 1246                        FC            .byte	$FC
05125 1247                        C0            .byte	$C0
05126 1248                        78            .byte	$78
05127 1249                        00            .byte	0
05128                                           ! 788  0x38, 0x6c, 0x
05129 124A                        38            .byte	$38
05130 124B                        6C            .byte	$6C
05131                                           ! 788 60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05132 124C                        60            .byte	$60
05133 124D                        F0            .byte	$F0
05134 124E                        60            .byte	$60
05135 124F                        60            .byte	$60
05136 1250                        F0            .byte	$F0
05137 1251                        00            .byte	0
05138                                           ! 789  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05139 1252                        00            .byte	0
05140 1253                        00            .byte	0
05141 1254                        76            .byte	$76
05142 1255                        CC            .byte	$CC
05143 1256                        CC            .byte	$CC
05144 1257                        7C            .byte	$7C
05145 1258                        0C            .byte	$C
05146 1259                        F8            .byte	$F8
05147                                           ! 790  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05148 125A                        E0            .byte	$E0
05149 125B                        60            .byte	$60
05150 125C                        6C            .byte	$6C
05151 125D                        76            .byte	$76
05152 125E                        66            .byte	$66
05153 125F                        66            .byte	$66
05154 1260                        E6            .byte	$E6
05155 1261                        00            .byte	0
05156                                           ! 791  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05157 1262                        30            .byte	$30
05158 1263                        00            .byte	0
05159 1264                        70            .byte	$70
05160 1265                        30            .byte	$30
05161 1266                        30            .byte	$30
05162 1267                        30            .byte	$30
05163 1268                        78            .byte	$78
05164 1269                        00            .byte	0
05165                                           ! 792  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05166 126A                        0C            .byte	$C
05167 126B                        00            .byte	0
05168 126C                        0C            .byte	$C
05169 126D                        0C            .byte	$C
05170 126E                        0C            .byte	$C
05171 126F                        CC            .byte	$CC
05172 1270                        CC            .byte	$CC
05173 1271                        78            .byte	$78
05174                                           ! 793  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05175 1272                        E0            .byte	$E0
05176 1273                        60            .byte	$60
05177 1274                        66            .byte	$66
05178 1275                        6C            .byte	$6C
05179 1276                        78            .byte	$78
05180 1277                        6C            .byte	$6C
05181 1278                        E6            .byte	$E6
05182 1279                        00            .byte	0
05183                                           ! 794  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05184 127A                        70            .byte	$70
05185 127B                        30            .byte	$30
05186 127C                        30            .byte	$30
05187 127D                        30            .byte	$30
05188 127E                        30            .byte	$30
05189 127F                        30            .byte	$30
05190 1280                        78            .byte	$78
05191 1281                        00            .byte	0
05192                                           ! 795  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05193 1282                        00            .byte	0
05194 1283                        00            .byte	0
05195 1284                        CC            .byte	$CC
05196 1285                        FE            .byte	$FE
05197 1286                        FE            .byte	$FE
05198 1287                        D6            .byte	$D6
05199 1288                        C6            .byte	$C6
05200 1289                        00            .byte	0
05201                                           ! 796  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05202 128A                        00            .byte	0
05203 128B                        00            .byte	0
05204 128C                        F8            .byte	$F8
05205 128D                        CC            .byte	$CC
05206 128E                        CC            .byte	$CC
05207 128F                        CC            .byte	$CC
05208 1290                        CC            .byte	$CC
05209 1291                        00            .byte	0
05210                                           ! 797  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05211 1292                        00            .byte	0
05212 1293                        00            .byte	0
05213 1294                        78            .byte	$78
05214 1295                        CC            .byte	$CC
05215 1296                        CC            .byte	$CC
05216 1297                        CC            .byte	$CC
05217 1298                        78            .byte	$78
05218 1299                        00            .byte	0
05219                                           ! 798  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05220 129A                        00            .byte	0
05221 129B                        00            .byte	0
05222 129C                        DC            .byte	$DC
05223 129D                        66            .byte	$66
05224 129E                        66            .byte	$66
05225 129F                        7C            .byte	$7C
05226 12A0                        60            .byte	$60
05227 12A1                        F0            .byte	$F0
05228                                           ! 799  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05229 12A2                        00            .byte	0
05230 12A3                        00            .byte	0
05231 12A4                        76            .byte	$76
05232 12A5                        CC            .byte	$CC
05233 12A6                        CC            .byte	$CC
05234 12A7                        7C            .byte	$7C
05235 12A8                        0C            .byte	$C
05236 12A9                        1E            .byte	$1E
05237                                           ! 800  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05238 12AA                        00            .byte	0
05239 12AB                        00            .byte	0
05240 12AC                        DC            .byte	$DC
05241 12AD                        76            .byte	$76
05242 12AE                        66            .byte	$66
05243 12AF                        60            .byte	$60
05244 12B0                        F0            .byte	$F0
05245 12B1                        00            .byte	0
05246                                           ! 801  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05247 12B2                        00            .byte	0
05248 12B3                        00            .byte	0
05249 12B4                        7C            .byte	$7C
05250 12B5                        C0            .byte	$C0
05251 12B6                        78            .byte	$78
05252 12B7                        0C            .byte	$C
05253 12B8                        F8            .byte	$F8
05254 12B9                        00            .byte	0
05255                                           ! 802  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05256 12BA                        10            .byte	$10
05257 12BB                        30            .byte	$30
05258 12BC                        7C            .byte	$7C
05259 12BD                        30            .byte	$30
05260 12BE                        30            .byte	$30
05261 12BF                        34            .byte	$34
05262 12C0                        18            .byte	$18
05263 12C1                        00            .byte	0
05264                                           ! 803  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05265 12C2                        00            .byte	0
05266 12C3                        00            .byte	0
05267 12C4                        CC            .byte	$CC
05268 12C5                        CC            .byte	$CC
05269 12C6                        CC            .byte	$CC
05270 12C7                        CC            .byte	$CC
05271 12C8                        76            .byte	$76
05272 12C9                        00            .byte	0
05273                                           ! 804  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05274 12CA                        00            .byte	0
05275 12CB                        00            .byte	0
05276 12CC                        CC            .byte	$CC
05277 12CD                        CC            .byte	$CC
05278 12CE                        CC            .byte	$CC
05279 12CF                        78            .byte	$78
05280 12D0                        30            .byte	$30
05281 12D1                        00            .byte	0
05282                                           ! 805  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05283 12D2                        00            .byte	0
05284 12D3                        00            .byte	0
05285 12D4                        C6            .byte	$C6
05286 12D5                        D6            .byte	$D6
05287 12D6                        FE            .byte	$FE
05288 12D7                        FE            .byte	$FE
05289 12D8                        6C            .byte	$6C
05290 12D9                        00            .byte	0
05291                                           ! 806  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05292 12DA                        00            .byte	0
05293 12DB                        00            .byte	0
05294 12DC                        C6            .byte	$C6
05295 12DD                        6C            .byte	$6C
05296 12DE                        38            .byte	$38
05297 12DF                        6C            .byte	$6C
05298 12E0                        C6            .byte	$C6
05299 12E1                        00            .byte	0
05300                                           ! 807  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05301 12E2                        00            .byte	0
05302 12E3                        00            .byte	0
05303 12E4                        CC            .byte	$CC
05304 12E5                        CC            .byte	$CC
05305 12E6                        CC            .byte	$CC
05306 12E7                        7C            .byte	$7C
05307 12E8                        0C            .byte	$C
05308 12E9                        F8            .byte	$F8
05309                                           ! 808  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05310 12EA                        00            .byte	0
05311 12EB                        00            .byte	0
05312 12EC                        FC            .byte	$FC
05313 12ED                        98            .byte	$98
05314 12EE                        30            .byte	$30
05315 12EF                        64            .byte	$64
05316 12F0                        FC            .byte	$FC
05317 12F1                        00            .byte	0
05318                                           ! 809  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05319 12F2                        1C            .byte	$1C
05320 12F3                        30            .byte	$30
05321 12F4                        30            .byte	$30
05322 12F5                        E0            .byte	$E0
05323 12F6                        30            .byte	$30
05324 12F7                        30            .byte	$30
05325 12F8                        1C            .byte	$1C
05326 12F9                        00            .byte	0
05327                                           ! 810  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05328 12FA                        18            .byte	$18
05329 12FB                        18            .byte	$18
05330 12FC                        18            .byte	$18
05331 12FD                        00            .byte	0
05332 12FE                        18            .byte	$18
05333 12FF                        18            .byte	$18
05334 1300                        18            .byte	$18
05335 1301                        00            .byte	0
05336                                           ! 811  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05337 1302                        E0            .byte	$E0
05338 1303                        30            .byte	$30
05339 1304                        30            .byte	$30
05340 1305                        1C            .byte	$1C
05341 1306                        30            .byte	$30
05342 1307                        30            .byte	$30
05343 1308                        E0            .byte	$E0
05344 1309                        00            .byte	0
05345                                           ! 812  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05346 130A                        76            .byte	$76
05347 130B                        DC            .byte	$DC
05348 130C                        00            .byte	0
05349 130D                        00            .byte	0
05350 130E                        00            .byte	0
05351 130F                        00            .byte	0
05352 1310                        00            .byte	0
05353 1311                        00            .byte	0
05354                                           ! 813  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05355 1312                        00            .byte	0
05356 1313                        10            .byte	$10
05357 1314                        38            .byte	$38
05358 1315                        6C            .byte	$6C
05359 1316                        C6            .byte	$C6
05360 1317                        C6            .byte	$C6
05361 1318                        FE            .byte	$FE
05362 1319                        00            .byte	0
05363                                           ! 814  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05364 131A                        78            .byte	$78
05365 131B                        CC            .byte	$CC
05366 131C                        C0            .byte	$C0
05367 131D                        CC            .byte	$CC
05368 131E                        78            .byte	$78
05369 131F                        18            .byte	$18
05370 1320                        0C            .byte	$C
05371 1321                        78            .byte	$78
05372                                           ! 815  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05373 1322                        00            .byte	0
05374 1323                        CC            .byte	$CC
05375 1324                        00            .byte	0
05376 1325                        CC            .byte	$CC
05377 1326                        CC            .byte	$CC
05378 1327                        CC            .byte	$CC
05379 1328                        7E            .byte	$7E
05380 1329                        00            .byte	0
05381                                           ! 816  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05382 132A                        1C            .byte	$1C
05383 132B                        00            .byte	0
05384 132C                        78            .byte	$78
05385 132D                        CC            .byte	$CC
05386 132E                        FC            .byte	$FC
05387 132F                        C0            .byte	$C0
05388 1330                        78            .byte	$78
05389 1331                        00            .byte	0
05390                                           ! 817  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05391 1332                        7E            .byte	$7E
05392 1333                        C3            .byte	$C3
05393 1334                        3C            .byte	$3C
05394 1335                        06            .byte	6
05395 1336                        3E            .byte	$3E
05396 1337                        66            .byte	$66
05397 1338                        3F            .byte	$3F
05398 1339                        00            .byte	0
05399                                           ! 818  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05400 133A                        CC            .byte	$CC
05401 133B                        00            .byte	0
05402 133C                        78            .byte	$78
05403 133D                        0C            .byte	$C
05404 133E                        7C            .byte	$7C
05405 133F                        CC            .byte	$CC
05406 1340                        7E            .byte	$7E
05407 1341                        00            .byte	0
05408                                           ! 819  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05409 1342                        E0            .byte	$E0
05410 1343                        00            .byte	0
05411 1344                        78            .byte	$78
05412 1345                        0C            .byte	$C
05413 1346                        7C            .byte	$7C
05414 1347                        CC            .byte	$CC
05415 1348                        7E            .byte	$7E
05416 1349                        00            .byte	0
05417                                           ! 820  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05418 134A                        30            .byte	$30
05419 134B                        30            .byte	$30
05420 134C                        78            .byte	$78
05421 134D                        0C            .byte	$C
05422 134E                        7C            .byte	$7C
05423 134F                        CC            .byte	$CC
05424 1350                        7E            .byte	$7E
05425 1351                        00            .byte	0
05426                                           ! 821  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05427 1352                        00            .byte	0
05428 1353                        00            .byte	0
05429 1354                        78            .byte	$78
05430 1355                        C0            .byte	$C0
05431 1356                        C0            .byte	$C0
05432 1357                        78            .byte	$78
05433 1358                        0C            .byte	$C
05434 1359                        38            .byte	$38
05435                                           ! 822  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05436 135A                        7E            .byte	$7E
05437 135B                        C3            .byte	$C3
05438 135C                        3C            .byte	$3C
05439 135D                        66            .byte	$66
05440 135E                        7E            .byte	$7E
05441 135F                        60            .byte	$60
05442 1360                        3C            .byte	$3C
05443 1361                        00            .byte	0
05444                                           ! 823  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05445 1362                        CC            .byte	$CC
05446 1363                        00            .byte	0
05447 1364                        78            .byte	$78
05448 1365                        CC            .byte	$CC
05449 1366                        FC            .byte	$FC
05450 1367                        C0            .byte	$C0
05451 1368                        78            .byte	$78
05452 1369                        00            .byte	0
05453                                           ! 824  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05454 136A                        E0            .byte	$E0
05455 136B                        00            .byte	0
05456 136C                        78            .byte	$78
05457 136D                        CC            .byte	$CC
05458 136E                        FC            .byte	$FC
05459 136F                        C0            .byte	$C0
05460 1370                        78            .byte	$78
05461 1371                        00            .byte	0
05462                                           ! 825  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05463 1372                        CC            .byte	$CC
05464 1373                        00            .byte	0
05465 1374                        70            .byte	$70
05466 1375                        30            .byte	$30
05467 1376                        30            .byte	$30
05468 1377                        30            .byte	$30
05469 1378                        78            .byte	$78
05470 1379                        00            .byte	0
05471                                           ! 826  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05472 137A                        7C            .byte	$7C
05473 137B                        C6            .byte	$C6
05474 137C                        38            .byte	$38
05475 137D                        18            .byte	$18
05476 137E                        18            .byte	$18
05477 137F                        18            .byte	$18
05478 1380                        3C            .byte	$3C
05479 1381                        00            .byte	0
05480                                           ! 827  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05481 1382                        E0            .byte	$E0
05482 1383                        00            .byte	0
05483 1384                        70            .byte	$70
05484 1385                        30            .byte	$30
05485 1386                        30            .byte	$30
05486 1387                        30            .byte	$30
05487 1388                        78            .byte	$78
05488 1389                        00            .byte	0
05489                                           ! 828  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05490 138A                        C6            .byte	$C6
05491 138B                        38            .byte	$38
05492 138C                        6C            .byte	$6C
05493 138D                        C6            .byte	$C6
05494 138E                        FE            .byte	$FE
05495 138F                        C6            .byte	$C6
05496 1390                        C6            .byte	$C6
05497 1391                        00            .byte	0
05498                                           ! 829  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05499 1392                        30            .byte	$30
05500 1393                        30            .byte	$30
05501 1394                        00            .byte	0
05502 1395                        78            .byte	$78
05503 1396                        CC            .byte	$CC
05504 1397                        FC            .byte	$FC
05505 1398                        CC            .byte	$CC
05506 1399                        00            .byte	0
05507                                           ! 830  0x1c
05508                                           ! 830 , 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05509 139A                        1C            .byte	$1C
05510 139B                        00            .byte	0
05511 139C                        FC            .byte	$FC
05512 139D                        60            .byte	$60
05513 139E                        78            .byte	$78
05514 139F                        60            .byte	$60
05515 13A0                        FC            .byte	$FC
05516 13A1                        00            .byte	0
05517                                           ! 831  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05518 13A2                        00            .byte	0
05519 13A3                        00            .byte	0
05520 13A4                        7F            .byte	$7F
05521 13A5                        0C            .byte	$C
05522 13A6                        7F            .byte	$7F
05523 13A7                        CC            .byte	$CC
05524 13A8                        7F            .byte	$7F
05525 13A9                        00            .byte	0
05526                                           ! 832  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05527 13AA                        3E            .byte	$3E
05528 13AB                        6C            .byte	$6C
05529 13AC                        CC            .byte	$CC
05530 13AD                        FE            .byte	$FE
05531 13AE                        CC            .byte	$CC
05532 13AF                        CC            .byte	$CC
05533 13B0                        CE            .byte	$CE
05534 13B1                        00            .byte	0
05535                                           ! 833  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05536 13B2                        78            .byte	$78
05537 13B3                        CC            .byte	$CC
05538 13B4                        00            .byte	0
05539 13B5                        78            .byte	$78
05540 13B6                        CC            .byte	$CC
05541 13B7                        CC            .byte	$CC
05542 13B8                        78            .byte	$78
05543 13B9                        00            .byte	0
05544                                           ! 834  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05545 13BA                        00            .byte	0
05546 13BB                        CC            .byte	$CC
05547 13BC                        00            .byte	0
05548 13BD                        78            .byte	$78
05549 13BE                        CC            .byte	$CC
05550 13BF                        CC            .byte	$CC
05551 13C0                        78            .byte	$78
05552 13C1                        00            .byte	0
05553                                           ! 835  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05554 13C2                        00            .byte	0
05555 13C3                        E0            .byte	$E0
05556 13C4                        00            .byte	0
05557 13C5                        78            .byte	$78
05558 13C6                        CC            .byte	$CC
05559 13C7                        CC            .byte	$CC
05560 13C8                        78            .byte	$78
05561 13C9                        00            .byte	0
05562                                           ! 836  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05563 13CA                        78            .byte	$78
05564 13CB                        CC            .byte	$CC
05565 13CC                        00            .byte	0
05566 13CD                        CC            .byte	$CC
05567 13CE                        CC            .byte	$CC
05568 13CF                        CC            .byte	$CC
05569 13D0                        7E            .byte	$7E
05570 13D1                        00            .byte	0
05571                                           ! 837  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05572 13D2                        00            .byte	0
05573 13D3                        E0            .byte	$E0
05574 13D4                        00            .byte	0
05575 13D5                        CC            .byte	$CC
05576 13D6                        CC            .byte	$CC
05577 13D7                        CC            .byte	$CC
05578 13D8                        7E            .byte	$7E
05579 13D9                        00            .byte	0
05580                                           ! 838  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05581 13DA                        00            .byte	0
05582 13DB                        CC            .byte	$CC
05583 13DC                        00            .byte	0
05584 13DD                        CC            .byte	$CC
05585 13DE                        CC            .byte	$CC
05586 13DF                        7C            .byte	$7C
05587 13E0                        0C            .byte	$C
05588 13E1                        F8            .byte	$F8
05589                                           ! 839  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05590 13E2                        C3            .byte	$C3
05591 13E3                        18            .byte	$18
05592 13E4                        3C            .byte	$3C
05593 13E5                        66            .byte	$66
05594 13E6                        66            .byte	$66
05595 13E7                        3C            .byte	$3C
05596 13E8                        18            .byte	$18
05597 13E9                        00            .byte	0
05598                                           ! 840  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05599 13EA                        CC            .byte	$CC
05600 13EB                        00            .byte	0
05601 13EC                        CC            .byte	$CC
05602 13ED                        CC            .byte	$CC
05603 13EE                        CC            .byte	$CC
05604 13EF                        CC            .byte	$CC
05605 13F0                        78            .byte	$78
05606 13F1                        00            .byte	0
05607                                           ! 841  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05608 13F2                        18            .byte	$18
05609 13F3                        18            .byte	$18
05610 13F4                        7E            .byte	$7E
05611 13F5                        C0            .byte	$C0
05612 13F6                        C0            .byte	$C0
05613 13F7                        7E            .byte	$7E
05614 13F8                        18            .byte	$18
05615 13F9                        18            .byte	$18
05616                                           ! 842  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05617 13FA                        38            .byte	$38
05618 13FB                        6C            .byte	$6C
05619 13FC                        64            .byte	$64
05620 13FD                        F0            .byte	$F0
05621 13FE                        60            .byte	$60
05622 13FF                        E6            .byte	$E6
05623 1400                        FC            .byte	$FC
05624 1401                        00            .byte	0
05625                                           ! 843  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05626 1402                        CC            .byte	$CC
05627 1403                        CC            .byte	$CC
05628 1404                        78            .byte	$78
05629 1405                        FC            .byte	$FC
05630 1406                        30            .byte	$30
05631 1407                        FC            .byte	$FC
05632 1408                        30            .byte	$30
05633 1409                        30            .byte	$30
05634                                           ! 844  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05635 140A                        F8            .byte	$F8
05636 140B                        CC            .byte	$CC
05637 140C                        CC            .byte	$CC
05638 140D                        FA            .byte	$FA
05639 140E                        C6            .byte	$C6
05640 140F                        CF            .byte	$CF
05641 1410                        C6            .byte	$C6
05642 1411                        C7            .byte	$C7
05643                                           ! 845  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05644 1412                        0E            .byte	$E
05645 1413                        1B            .byte	$1B
05646 1414                        18            .byte	$18
05647 1415                        3C            .byte	$3C
05648 1416                        18            .byte	$18
05649 1417                        18            .byte	$18
05650 1418                        D8            .byte	$D8
05651 1419                        70            .byte	$70
05652                                           ! 846  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05653 141A                        1C            .byte	$1C
05654 141B                        00            .byte	0
05655 141C                        78            .byte	$78
05656 141D                        0C            .byte	$C
05657 141E                        7C            .byte	$7C
05658 141F                        CC            .byte	$CC
05659 1420                        7E            .byte	$7E
05660 1421                        00            .byte	0
05661                                           ! 847  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05662 1422                        38            .byte	$38
05663 1423                        00            .byte	0
05664 1424                        70            .byte	$70
05665 1425                        30            .byte	$30
05666 1426                        30            .byte	$30
05667 1427                        30            .byte	$30
05668 1428                        78            .byte	$78
05669 1429                        00            .byte	0
05670                                           ! 848  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05671 142A                        00            .byte	0
05672 142B                        1C            .byte	$1C
05673 142C                        00            .byte	0
05674 142D                        78            .byte	$78
05675 142E                        CC            .byte	$CC
05676 142F                        CC            .byte	$CC
05677 1430                        78            .byte	$78
05678 1431                        00            .byte	0
05679                                           ! 849  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05680 1432                        00            .byte	0
05681 1433                        1C            .byte	$1C
05682 1434                        00            .byte	0
05683 1435                        CC            .byte	$CC
05684 1436                        CC            .byte	$CC
05685 1437                        CC            .byte	$CC
05686 1438                        7E            .byte	$7E
05687 1439                        00            .byte	0
05688                                           ! 850  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
05689 143A                        00            .byte	0
05690 143B                        F8            .byte	$F8
05691 143C                        00            .byte	0
05692 143D                        F8            .byte	$F8
05693 143E                        CC            .byte	$CC
05694 143F                        CC            .byte	$CC
05695 1440                        CC            .byte	$CC
05696 1441                        00            .byte	0
05697                                           ! 851  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
05698 1442                        FC            .byte	$FC
05699 1443                        00            .byte	0
05700 1444                        CC            .byte	$CC
05701 1445                        EC            .byte	$EC
05702 1446                        FC            .byte	$FC
05703 1447                        DC            .byte	$DC
05704 1448                        CC            .byte	$CC
05705 1449                        00            .byte	0
05706                                           ! 852  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
05707 144A                        3C            .byte	$3C
05708 144B                        6C            .byte	$6C
05709 144C                        6C            .byte	$6C
05710 144D                        3E            .byte	$3E
05711 144E                        00            .byte	0
05712 144F                        7E            .byte	$7E
05713 1450                        00            .byte	0
05714 1451                        00            .byte	0
05715                                           ! 853  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
05716 1452                        38            .byte	$38
05717 1453                        6C            .byte	$6C
05718 1454                        6C            .byte	$6C
05719 1455                        38            .byte	$38
05720 1456                        00            .byte	0
05721 1457                        7C            .byte	$7C
05722 1458                        00            .byte	0
05723 1459                        00            .byte	0
05724                                           ! 854  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
05725 145A                        30            .byte	$30
05726 145B                        00            .byte	0
05727 145C                        30            .byte	$30
05728 145D                        60            .byte	$60
05729 145E                        C0            .byte	$C0
05730 145F                        CC            .byte	$CC
05731 1460                        78            .byte	$78
05732 1461                        00            .byte	0
05733                                           ! 855  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
05734 1462                        00            .byte	0
05735 1463                        00            .byte	0
05736 1464                        00            .byte	0
05737 1465                        FC            .byte	$FC
05738 1466                        C0            .byte	$C0
05739 1467                        C0            .byte	$C0
05740 1468                        00            .byte	0
05741 1469                        00            .byte	0
05742                                           ! 856  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
05743 146A                        00            .byte	0
05744 146B                        00            .byte	0
05745 146C                        00            .byte	0
05746 146D                        FC            .byte	$FC
05747 146E                        0C            .byte	$C
05748 146F                        0C            .byte	$C
05749 1470                        00            .byte	0
05750 1471                        00            .byte	0
05751                                           ! 857  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
05752 1472                        C3            .byte	$C3
05753 1473                        C6            .byte	$C6
05754 1474                        CC            .byte	$CC
05755 1475                        DE            .byte	$DE
05756 1476                        33            .byte	$33
05757 1477                        66            .byte	$66
05758 1478                        CC            .byte	$CC
05759 1479                        0F            .byte	$F
05760                                           ! 858  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
05761 147A                        C3            .byte	$C3
05762 147B                        C6            .byte	$C6
05763 147C                        CC            .byte	$CC
05764 147D                        DB            .byte	$DB
05765 147E                        37            .byte	$37
05766 147F                        6F            .byte	$6F
05767 1480                        CF            .byte	$CF
05768 1481                        03            .byte	3
05769                                           ! 859  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
05770 1482                        18            .byte	$18
05771 1483                        18            .byte	$18
05772 1484                        00            .byte	0
05773 1485                        18            .byte	$18
05774 1486                        18            .byte	$18
05775 1487                        18            .byte	$18
05776 1488                        18            .byte	$18
05777 1489                        00            .byte	0
05778                                           ! 860  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
05779 148A                        00            .byte	0
05780 148B                        33            .byte	$33
05781 148C                        66            .byte	$66
05782 148D                        CC            .byte	$CC
05783 148E                        66            .byte	$66
05784 148F                        33            .byte	$33
05785 1490                        00            .byte	0
05786 1491                        00            .byte	0
05787                                           ! 861  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
05788 1492                        00            .byte	0
05789 1493                        CC            .byte	$CC
05790 1494                        66            .byte	$66
05791 1495                        33            .byte	$33
05792 1496                        66            .byte	$66
05793 1497                        CC            .byte	$CC
05794 1498                        00            .byte	0
05795 1499                        00            .byte	0
05796                                           ! 862  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
05797 149A                        22            .byte	$22
05798 149B                        88            .byte	$88
05799 149C                        22            .byte	$22
05800 149D                        88            .byte	$88
05801 149E                        22            .byte	$22
05802 149F                        88            .byte	$88
05803 14A0                        22            .byte	$22
05804 14A1                        88            .byte	$88
05805                                           ! 863  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
05806 14A2                        55            .byte	$55
05807 14A3                        AA            .byte	$AA
05808 14A4                        55            .byte	$55
05809 14A5                        AA            .byte	$AA
05810 14A6                        55            .byte	$55
05811 14A7                        AA            .byte	$AA
05812 14A8                        55            .byte	$55
05813 14A9                        AA            .byte	$AA
05814                                           ! 864  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
05815 14AA                        DB            .byte	$DB
05816 14AB                        77            .byte	$77
05817 14AC                        DB            .byte	$DB
05818 14AD                        EE            .byte	$EE
05819 14AE                        DB            .byte	$DB
05820 14AF                        77            .byte	$77
05821 14B0                        DB            .byte	$DB
05822 14B1                        EE            .byte	$EE
05823                                           ! 865  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
05824 14B2                        18            .byte	$18
05825 14B3                        18            .byte	$18
05826 14B4                        18            .byte	$18
05827 14B5                        18            .byte	$18
05828 14B6                        18            .byte	$18
05829 14B7                        18            .byte	$18
05830 14B8                        18            .byte	$18
05831 14B9                        18            .byte	$18
05832                                           ! 866  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
05833 14BA                        18            .byte	$18
05834 14BB                        18            .byte	$18
05835 14BC                        18            .byte	$18
05836 14BD                        18            .byte	$18
05837 14BE                        F8            .byte	$F8
05838 14BF                        18            .byte	$18
05839 14C0                        18            .byte	$18
05840 14C1                        18            .byte	$18
05841                                           ! 867  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05842 14C2                        18            .byte	$18
05843 14C3                        18            .byte	$18
05844 14C4                        F8            .byte	$F8
05845 14C5                        18            .byte	$18
05846 14C6                        F8            .byte	$F8
05847 14C7                        18            .byte	$18
05848 14C8                        18            .byte	$18
05849 14C9                        18            .byte	$18
05850                                           ! 868  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
05851 14CA                        36            .byte	$36
05852 14CB                        36            .byte	$36
05853 14CC                        36            .byte	$36
05854 14CD                        36            .byte	$36
05855 14CE                        F6            .byte	$F6
05856 14CF                        36            .byte	$36
05857 14D0                        36            .byte	$36
05858 14D1                        36            .byte	$36
05859                                           ! 869  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
05860 14D2                        00            .byte	0
05861 14D3                        00            .byte	0
05862 14D4                        00            .byte	0
05863 14D5                        00            .byte	0
05864 14D6                        FE            .byte	$FE
05865 14D7                        36            .byte	$36
05866 14D8                        36            .byte	$36
05867 14D9                        36            .byte	$36
05868                                           ! 870  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05869 14DA                        00            .byte	0
05870 14DB                        00            .byte	0
05871 14DC                        F8            .byte	$F8
05872 14DD                        18            .byte	$18
05873 14DE                        F8            .byte	$F8
05874 14DF                        18            .byte	$18
05875 14E0                        18            .byte	$18
05876 14E1                        18            .byte	$18
05877                                           ! 871  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0
05878 14E2                        36            .byte	$36
05879 14E3                        36            .byte	$36
05880 14E4                        F6            .byte	$F6
05881 14E5                        06            .byte	6
05882 14E6                        F6            .byte	$F6
05883 14E7                        36            .byte	$36
05884 14E8                        36            .byte	$36
05885                                           ! 871 x36,
05886 14E9                        36            .byte	$36
05887                                           ! 872  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
05888 14EA                        36            .byte	$36
05889 14EB                        36            .byte	$36
05890 14EC                        36            .byte	$36
05891 14ED                        36            .byte	$36
05892 14EE                        36            .byte	$36
05893 14EF                        36            .byte	$36
05894 14F0                        36            .byte	$36
05895 14F1                        36            .byte	$36
05896                                           ! 873  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
05897 14F2                        00            .byte	0
05898 14F3                        00            .byte	0
05899 14F4                        FE            .byte	$FE
05900 14F5                        06            .byte	6
05901 14F6                        F6            .byte	$F6
05902 14F7                        36            .byte	$36
05903 14F8                        36            .byte	$36
05904 14F9                        36            .byte	$36
05905                                           ! 874  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
05906 14FA                        36            .byte	$36
05907 14FB                        36            .byte	$36
05908 14FC                        F6            .byte	$F6
05909 14FD                        06            .byte	6
05910 14FE                        FE            .byte	$FE
05911 14FF                        00            .byte	0
05912 1500                        00            .byte	0
05913 1501                        00            .byte	0
05914                                           ! 875  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
05915 1502                        36            .byte	$36
05916 1503                        36            .byte	$36
05917 1504                        36            .byte	$36
05918 1505                        36            .byte	$36
05919 1506                        FE            .byte	$FE
05920 1507                        00            .byte	0
05921 1508                        00            .byte	0
05922 1509                        00            .byte	0
05923                                           ! 876  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
05924 150A                        18            .byte	$18
05925 150B                        18            .byte	$18
05926 150C                        F8            .byte	$F8
05927 150D                        18            .byte	$18
05928 150E                        F8            .byte	$F8
05929 150F                        00            .byte	0
05930 1510                        00            .byte	0
05931 1511                        00            .byte	0
05932                                           ! 877  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
05933 1512                        00            .byte	0
05934 1513                        00            .byte	0
05935 1514                        00            .byte	0
05936 1515                        00            .byte	0
05937 1516                        F8            .byte	$F8
05938 1517                        18            .byte	$18
05939 1518                        18            .byte	$18
05940 1519                        18            .byte	$18
05941                                           ! 878  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
05942 151A                        18            .byte	$18
05943 151B                        18            .byte	$18
05944 151C                        18            .byte	$18
05945 151D                        18            .byte	$18
05946 151E                        1F            .byte	$1F
05947 151F                        00            .byte	0
05948 1520                        00            .byte	0
05949 1521                        00            .byte	0
05950                                           ! 879  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
05951 1522                        18            .byte	$18
05952 1523                        18            .byte	$18
05953 1524                        18            .byte	$18
05954 1525                        18            .byte	$18
05955 1526                        FF            .byte	$FF
05956 1527                        00            .byte	0
05957 1528                        00            .byte	0
05958 1529                        00            .byte	0
05959                                           ! 880  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
05960 152A                        00            .byte	0
05961 152B                        00            .byte	0
05962 152C                        00            .byte	0
05963 152D                        00            .byte	0
05964 152E                        FF            .byte	$FF
05965 152F                        18            .byte	$18
05966 1530                        18            .byte	$18
05967 1531                        18            .byte	$18
05968                                           ! 881  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
05969 1532                        18            .byte	$18
05970 1533                        18            .byte	$18
05971 1534                        18            .byte	$18
05972 1535                        18            .byte	$18
05973 1536                        1F            .byte	$1F
05974 1537                        18            .byte	$18
05975 1538                        18            .byte	$18
05976 1539                        18            .byte	$18
05977                                           ! 882  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
05978 153A                        00            .byte	0
05979 153B                        00            .byte	0
05980 153C                        00            .byte	0
05981 153D                        00            .byte	0
05982 153E                        FF            .byte	$FF
05983 153F                        00            .byte	0
05984 1540                        00            .byte	0
05985 1541                        00            .byte	0
05986                                           ! 883  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
05987 1542                        18            .byte	$18
05988 1543                        18            .byte	$18
05989 1544                        18            .byte	$18
05990 1545                        18            .byte	$18
05991 1546                        FF            .byte	$FF
05992 1547                        18            .byte	$18
05993 1548                        18            .byte	$18
05994 1549                        18            .byte	$18
05995                                           ! 884  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
05996 154A                        18            .byte	$18
05997 154B                        18            .byte	$18
05998 154C                        1F            .byte	$1F
05999 154D                        18            .byte	$18
06000 154E                        1F            .byte	$1F
06001 154F                        18            .byte	$18
06002 1550                        18            .byte	$18
06003 1551                        18            .byte	$18
06004                                           ! 885  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06005 1552                        36            .byte	$36
06006 1553                        36            .byte	$36
06007 1554                        36            .byte	$36
06008 1555                        36            .byte	$36
06009 1556                        37            .byte	$37
06010 1557                        36            .byte	$36
06011 1558                        36            .byte	$36
06012 1559                        36            .byte	$36
06013                                           ! 886  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06014 155A                        36            .byte	$36
06015 155B                        36            .byte	$36
06016 155C                        37            .byte	$37
06017 155D                        30            .byte	$30
06018 155E                        3F            .byte	$3F
06019 155F                        00            .byte	0
06020 1560                        00            .byte	0
06021 1561                        00            .byte	0
06022                                           ! 887  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06023 1562                        00            .byte	0
06024 1563                        00            .byte	0
06025 1564                        3F            .byte	$3F
06026 1565                        30            .byte	$30
06027 1566                        37            .byte	$37
06028 1567                        36            .byte	$36
06029 1568                        36            .byte	$36
06030 1569                        36            .byte	$36
06031                                           ! 888  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06032 156A                        36            .byte	$36
06033 156B                        36            .byte	$36
06034 156C                        F7            .byte	$F7
06035 156D                        00            .byte	0
06036 156E                        FF            .byte	$FF
06037 156F                        00            .byte	0
06038 1570                        00            .byte	0
06039 1571                        00            .byte	0
06040                                           ! 889  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06041 1572                        00            .byte	0
06042 1573                        00            .byte	0
06043 1574                        FF            .byte	$FF
06044 1575                        00            .byte	0
06045 1576                        F7            .byte	$F7
06046 1577                        36            .byte	$36
06047 1578                        36            .byte	$36
06048 1579                        36            .byte	$36
06049                                           ! 890  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06050 157A                        36            .byte	$36
06051 157B                        36            .byte	$36
06052 157C                        37            .byte	$37
06053 157D                        30            .byte	$30
06054 157E                        37            .byte	$37
06055 157F                        36            .byte	$36
06056 1580                        36            .byte	$36
06057 1581                        36            .byte	$36
06058                                           ! 891  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06059 1582                        00            .byte	0
06060 1583                        00            .byte	0
06061 1584                        FF            .byte	$FF
06062 1585                        00            .byte	0
06063 1586                        FF            .byte	$FF
06064 1587                        00            .byte	0
06065 1588                        00            .byte	0
06066 1589                        00            .byte	0
06067                                           ! 892  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06068 158A                        36            .byte	$36
06069 158B                        36            .byte	$36
06070 158C                        F7            .byte	$F7
06071 158D                        00            .byte	0
06072 158E                        F7            .byte	$F7
06073 158F                        36            .byte	$36
06074 1590                        36            .byte	$36
06075 1591                        36            .byte	$36
06076                                           ! 893  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06077 1592                        18            .byte	$18
06078 1593                        18            .byte	$18
06079 1594                        FF            .byte	$FF
06080 1595                        00            .byte	0
06081 1596                        FF            .byte	$FF
06082 1597                        00            .byte	0
06083 1598                        00            .byte	0
06084 1599                        00            .byte	0
06085                                           ! 894  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06086 159A                        36            .byte	$36
06087 159B                        36            .byte	$36
06088 159C                        36            .byte	$36
06089 159D                        36            .byte	$36
06090 159E                        FF            .byte	$FF
06091 159F                        00            .byte	0
06092 15A0                        00            .byte	0
06093 15A1                        00            .byte	0
06094                                           ! 895  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06095 15A2                        00            .byte	0
06096 15A3                        00            .byte	0
06097 15A4                        FF            .byte	$FF
06098 15A5                        00            .byte	0
06099 15A6                        FF            .byte	$FF
06100 15A7                        18            .byte	$18
06101 15A8                        18            .byte	$18
06102 15A9                        18            .byte	$18
06103                                           ! 896  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06104 15AA                        00            .byte	0
06105 15AB                        00            .byte	0
06106 15AC                        00            .byte	0
06107 15AD                        00            .byte	0
06108 15AE                        FF            .byte	$FF
06109 15AF                        36            .byte	$36
06110 15B0                        36            .byte	$36
06111 15B1                        36            .byte	$36
06112                                           ! 897  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06113 15B2                        36            .byte	$36
06114 15B3                        36            .byte	$36
06115 15B4                        36            .byte	$36
06116 15B5                        36            .byte	$36
06117 15B6                        3F            .byte	$3F
06118 15B7                        00            .byte	0
06119 15B8                        00            .byte	0
06120 15B9                        00            .byte	0
06121                                           ! 898  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06122 15BA                        18            .byte	$18
06123 15BB                        18            .byte	$18
06124 15BC                        1F            .byte	$1F
06125 15BD                        18            .byte	$18
06126 15BE                        1F            .byte	$1F
06127 15BF                        00            .byte	0
06128 15C0                        00            .byte	0
06129 15C1                        00            .byte	0
06130                                           ! 899  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06131 15C2                        00            .byte	0
06132 15C3                        00            .byte	0
06133 15C4                        1F            .byte	$1F
06134 15C5                        18            .byte	$18
06135 15C6                        1F            .byte	$1F
06136 15C7                        18            .byte	$18
06137 15C8                        18            .byte	$18
06138 15C9                        18            .byte	$18
06139                                           ! 900  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06140 15CA                        00            .byte	0
06141 15CB                        00            .byte	0
06142 15CC                        00            .byte	0
06143 15CD                        00            .byte	0
06144 15CE                        3F            .byte	$3F
06145 15CF                        36            .byte	$36
06146 15D0                        36            .byte	$36
06147 15D1                        36            .byte	$36
06148                                           ! 901  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06149 15D2                        36            .byte	$36
06150 15D3                        36            .byte	$36
06151 15D4                        36            .byte	$36
06152 15D5                        36            .byte	$36
06153 15D6                        FF            .byte	$FF
06154 15D7                        36            .byte	$36
06155 15D8                        36            .byte	$36
06156 15D9                        36            .byte	$36
06157                                           ! 902  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06158 15DA                        18            .byte	$18
06159 15DB                        18            .byte	$18
06160 15DC                        FF            .byte	$FF
06161 15DD                        18            .byte	$18
06162 15DE                        FF            .byte	$FF
06163 15DF                        18            .byte	$18
06164 15E0                        18            .byte	$18
06165 15E1                        18            .byte	$18
06166                                           ! 903  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06167 15E2                        18            .byte	$18
06168 15E3                        18            .byte	$18
06169 15E4                        18            .byte	$18
06170 15E5                        18            .byte	$18
06171 15E6                        F8            .byte	$F8
06172 15E7                        00            .byte	0
06173 15E8                        00            .byte	0
06174 15E9                        00            .byte	0
06175                                           ! 904  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06176 15EA                        00            .byte	0
06177 15EB                        00            .byte	0
06178 15EC                        00            .byte	0
06179 15ED                        00            .byte	0
06180 15EE                        1F            .byte	$1F
06181 15EF                        18            .byte	$18
06182 15F0                        18            .byte	$18
06183 15F1                        18            .byte	$18
06184                                           ! 905  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06185 15F2                        FF            .byte	$FF
06186 15F3                        FF            .byte	$FF
06187 15F4                        FF            .byte	$FF
06188 15F5                        FF            .byte	$FF
06189 15F6                        FF            .byte	$FF
06190 15F7                        FF            .byte	$FF
06191 15F8                        FF            .byte	$FF
06192 15F9                        FF            .byte	$FF
06193                                           ! 906  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06194 15FA                        00            .byte	0
06195 15FB                        00            .byte	0
06196 15FC                        00            .byte	0
06197 15FD                        00            .byte	0
06198 15FE                        FF            .byte	$FF
06199 15FF                        FF            .byte	$FF
06200 1600                        FF            .byte	$FF
06201 1601                        FF            .byte	$FF
06202                                           ! 907  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06203 1602                        F0            .byte	$F0
06204 1603                        F0            .byte	$F0
06205 1604                        F0            .byte	$F0
06206 1605                        F0            .byte	$F0
06207 1606                        F0            .byte	$F0
06208 1607                        F0            .byte	$F0
06209 1608                        F0            .byte	$F0
06210 1609                        F0            .byte	$F0
06211                                           ! 908  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06212 160A                        0F            .byte	$F
06213 160B                        0F            .byte	$F
06214 160C                        0F            .byte	$F
06215 160D                        0F            .byte	$F
06216 160E                        0F            .byte	$F
06217 160F                        0F            .byte	$F
06218 1610                        0F            .byte	$F
06219 1611                        0F            .byte	$F
06220                                           ! 909  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06221 1612                        FF            .byte	$FF
06222 1613                        FF            .byte	$FF
06223 1614                        FF            .byte	$FF
06224 1615                        FF            .byte	$FF
06225 1616                        00            .byte	0
06226 1617                        00            .byte	0
06227 1618                        00            .byte	0
06228 1619                        00            .byte	0
06229                                           ! 910  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06230 161A                        00            .byte	0
06231 161B                        00            .byte	0
06232 161C                        76            .byte	$76
06233 161D                        DC            .byte	$DC
06234 161E                        C8            .byte	$C8
06235 161F                        DC            .byte	$DC
06236 1620                        76            .byte	$76
06237 1621                        00            .byte	0
06238                                           ! 911  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06239 1622                        00            .byte	0
06240 1623                        78            .byte	$78
06241 1624                        CC            .byte	$CC
06242 1625                        F8            .byte	$F8
06243 1626                        CC            .byte	$CC
06244 1627                        F8            .byte	$F8
06245 1628                        C0            .byte	$C0
06246 1629                        C0            .byte	$C0
06247                                           ! 912  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06248 162A                        00            .byte	0
06249 162B                        FC            .byte	$FC
06250 162C                        CC            .byte	$CC
06251 162D                        C0            .byte	$C0
06252 162E                        C0            .byte	$C0
06253 162F                        C0            .byte	$C0
06254 1630                        C0            .byte	$C0
06255 1631                        00            .byte	0
06256                                           ! 913  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6
06257 1632                        00            .byte	0
06258 1633                        FE            .byte	$FE
06259 1634                        6C            .byte	$6C
06260 1635                        6C            .byte	$6C
06261 1636                        6C            .byte	$6C
06262                                           ! 913 c, 0x6c, 0x00,
06263 1637                        6C            .byte	$6C
06264 1638                        6C            .byte	$6C
06265 1639                        00            .byte	0
06266                                           ! 914  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06267 163A                        FC            .byte	$FC
06268 163B                        CC            .byte	$CC
06269 163C                        60            .byte	$60
06270 163D                        30            .byte	$30
06271 163E                        60            .byte	$60
06272 163F                        CC            .byte	$CC
06273 1640                        FC            .byte	$FC
06274 1641                        00            .byte	0
06275                                           ! 915  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06276 1642                        00            .byte	0
06277 1643                        00            .byte	0
06278 1644                        7E            .byte	$7E
06279 1645                        D8            .byte	$D8
06280 1646                        D8            .byte	$D8
06281 1647                        D8            .byte	$D8
06282 1648                        70            .byte	$70
06283 1649                        00            .byte	0
06284                                           ! 916  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06285 164A                        00            .byte	0
06286 164B                        66            .byte	$66
06287 164C                        66            .byte	$66
06288 164D                        66            .byte	$66
06289 164E                        66            .byte	$66
06290 164F                        7C            .byte	$7C
06291 1650                        60            .byte	$60
06292 1651                        C0            .byte	$C0
06293                                           ! 917  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06294 1652                        00            .byte	0
06295 1653                        76            .byte	$76
06296 1654                        DC            .byte	$DC
06297 1655                        18            .byte	$18
06298 1656                        18            .byte	$18
06299 1657                        18            .byte	$18
06300 1658                        18            .byte	$18
06301 1659                        00            .byte	0
06302                                           ! 918  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06303 165A                        FC            .byte	$FC
06304 165B                        30            .byte	$30
06305 165C                        78            .byte	$78
06306 165D                        CC            .byte	$CC
06307 165E                        CC            .byte	$CC
06308 165F                        78            .byte	$78
06309 1660                        30            .byte	$30
06310 1661                        FC            .byte	$FC
06311                                           ! 919  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06312 1662                        38            .byte	$38
06313 1663                        6C            .byte	$6C
06314 1664                        C6            .byte	$C6
06315 1665                        FE            .byte	$FE
06316 1666                        C6            .byte	$C6
06317 1667                        6C            .byte	$6C
06318 1668                        38            .byte	$38
06319 1669                        00            .byte	0
06320                                           ! 920  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06321 166A                        38            .byte	$38
06322 166B                        6C            .byte	$6C
06323 166C                        C6            .byte	$C6
06324 166D                        C6            .byte	$C6
06325 166E                        6C            .byte	$6C
06326 166F                        6C            .byte	$6C
06327 1670                        EE            .byte	$EE
06328 1671                        00            .byte	0
06329                                           ! 921  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06330 1672                        1C            .byte	$1C
06331 1673                        30            .byte	$30
06332 1674                        18            .byte	$18
06333 1675                        7C            .byte	$7C
06334 1676                        CC            .byte	$CC
06335 1677                        CC            .byte	$CC
06336 1678                        78            .byte	$78
06337 1679                        00            .byte	0
06338                                           ! 922  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06339 167A                        00            .byte	0
06340 167B                        00            .byte	0
06341 167C                        7E            .byte	$7E
06342 167D                        DB            .byte	$DB
06343 167E                        DB            .byte	$DB
06344 167F                        7E            .byte	$7E
06345 1680                        00            .byte	0
06346 1681                        00            .byte	0
06347                                           ! 923  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06348 1682                        06            .byte	6
06349 1683                        0C            .byte	$C
06350 1684                        7E            .byte	$7E
06351 1685                        DB            .byte	$DB
06352 1686                        DB            .byte	$DB
06353 1687                        7E            .byte	$7E
06354 1688                        60            .byte	$60
06355 1689                        C0            .byte	$C0
06356                                           ! 924  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06357 168A                        38            .byte	$38
06358 168B                        60            .byte	$60
06359 168C                        C0            .byte	$C0
06360 168D                        F8            .byte	$F8
06361 168E                        C0            .byte	$C0
06362 168F                        60            .byte	$60
06363 1690                        38            .byte	$38
06364 1691                        00            .byte	0
06365                                           ! 925  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06366 1692                        78            .byte	$78
06367 1693                        CC            .byte	$CC
06368 1694                        CC            .byte	$CC
06369 1695                        CC            .byte	$CC
06370 1696                        CC            .byte	$CC
06371 1697                        CC            .byte	$CC
06372 1698                        CC            .byte	$CC
06373 1699                        00            .byte	0
06374                                           ! 926  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06375 169A                        00            .byte	0
06376 169B                        FC            .byte	$FC
06377 169C                        00            .byte	0
06378 169D                        FC            .byte	$FC
06379 169E                        00            .byte	0
06380 169F                        FC            .byte	$FC
06381 16A0                        00            .byte	0
06382 16A1                        00            .byte	0
06383                                           ! 927  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06384 16A2                        30            .byte	$30
06385 16A3                        30            .byte	$30
06386 16A4                        FC            .byte	$FC
06387 16A5                        30            .byte	$30
06388 16A6                        30            .byte	$30
06389 16A7                        00            .byte	0
06390 16A8                        FC            .byte	$FC
06391 16A9                        00            .byte	0
06392                                           ! 928  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06393 16AA                        60            .byte	$60
06394 16AB                        30            .byte	$30
06395 16AC                        18            .byte	$18
06396 16AD                        30            .byte	$30
06397 16AE                        60            .byte	$60
06398 16AF                        00            .byte	0
06399 16B0                        FC            .byte	$FC
06400 16B1                        00            .byte	0
06401                                           ! 929  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06402 16B2                        18            .byte	$18
06403 16B3                        30            .byte	$30
06404 16B4                        60            .byte	$60
06405 16B5                        30            .byte	$30
06406 16B6                        18            .byte	$18
06407 16B7                        00            .byte	0
06408 16B8                        FC            .byte	$FC
06409 16B9                        00            .byte	0
06410                                           ! 930  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06411 16BA                        0E            .byte	$E
06412 16BB                        1B            .byte	$1B
06413 16BC                        1B            .byte	$1B
06414 16BD                        18            .byte	$18
06415 16BE                        18            .byte	$18
06416 16BF                        18            .byte	$18
06417 16C0                        18            .byte	$18
06418 16C1                        18            .byte	$18
06419                                           ! 931  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06420 16C2                        18            .byte	$18
06421 16C3                        18            .byte	$18
06422 16C4                        18            .byte	$18
06423 16C5                        18            .byte	$18
06424 16C6                        18            .byte	$18
06425 16C7                        D8            .byte	$D8
06426 16C8                        D8            .byte	$D8
06427 16C9                        70            .byte	$70
06428                                           ! 932  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06429 16CA                        30            .byte	$30
06430 16CB                        30            .byte	$30
06431 16CC                        00            .byte	0
06432 16CD                        FC            .byte	$FC
06433 16CE                        00            .byte	0
06434 16CF                        30            .byte	$30
06435 16D0                        30            .byte	$30
06436 16D1                        00            .byte	0
06437                                           ! 933  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06438 16D2                        00            .byte	0
06439 16D3                        76            .byte	$76
06440 16D4                        DC            .byte	$DC
06441 16D5                        00            .byte	0
06442 16D6                        76            .byte	$76
06443 16D7                        DC            .byte	$DC
06444 16D8                        00            .byte	0
06445 16D9                        00            .byte	0
06446                                           ! 934  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06447 16DA                        38            .byte	$38
06448 16DB                        6C            .byte	$6C
06449 16DC                        6C            .byte	$6C
06450 16DD                        38            .byte	$38
06451 16DE                        00            .byte	0
06452 16DF                        00            .byte	0
06453 16E0                        00            .byte	0
06454 16E1                        00            .byte	0
06455                                           ! 935  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06456 16E2                        00            .byte	0
06457 16E3                        00            .byte	0
06458 16E4                        00            .byte	0
06459 16E5                        18            .byte	$18
06460 16E6                        18            .byte	$18
06461 16E7                        00            .byte	0
06462 16E8                        00            .byte	0
06463 16E9                        00            .byte	0
06464                                           ! 936  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06465 16EA                        00            .byte	0
06466 16EB                        00            .byte	0
06467 16EC                        00            .byte	0
06468 16ED                        00            .byte	0
06469 16EE                        18            .byte	$18
06470 16EF                        00            .byte	0
06471 16F0                        00            .byte	0
06472 16F1                        00            .byte	0
06473                                           ! 937  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06474 16F2                        0F            .byte	$F
06475 16F3                        0C            .byte	$C
06476 16F4                        0C            .byte	$C
06477 16F5                        0C            .byte	$C
06478 16F6                        EC            .byte	$EC
06479 16F7                        6C            .byte	$6C
06480 16F8                        3C            .byte	$3C
06481 16F9                        1C            .byte	$1C
06482                                           ! 938  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06483 16FA                        78            .byte	$78
06484 16FB                        6C            .byte	$6C
06485 16FC                        6C            .byte	$6C
06486 16FD                        6C            .byte	$6C
06487 16FE                        6C            .byte	$6C
06488 16FF                        00            .byte	0
06489 1700                        00            .byte	0
06490 1701                        00            .byte	0
06491                                           ! 939  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06492 1702                        70            .byte	$70
06493 1703                        18            .byte	$18
06494 1704                        30            .byte	$30
06495 1705                        60            .byte	$60
06496 1706                        78            .byte	$78
06497 1707                        00            .byte	0
06498 1708                        00            .byte	0
06499 1709                        00            .byte	0
06500                                           ! 940  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06501 170A                        00            .byte	0
06502 170B                        00            .byte	0
06503 170C                        3C            .byte	$3C
06504 170D                        3C            .byte	$3C
06505 170E                        3C            .byte	$3C
06506 170F                        3C            .byte	$3C
06507 1710                        00            .byte	0
06508 1711                        00            .byte	0
06509                                           ! 941  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06510 1712                        00            .byte	0
06511 1713                        00            .byte	0
06512 1714                        00            .byte	0
06513 1715                        00            .byte	0
06514 1716                        00            .byte	0
06515 1717                        00            .byte	0
06516 1718                        00            .byte	0
06517                                           ! 942 };
06518 1719                        00            .byte	0
06519                                           !BCC_EOS
06520                                           ! 943 static Bit8u vgafont14[256*14]=
06521                                           ! 944 {
06522                       0000171A            _vgafont14:
06523                                           ! 945  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06524 171A                        00            .byte	0
06525 171B                        00            .byte	0
06526 171C                        00            .byte	0
06527 171D                        00            .byte	0
06528 171E                        00            .byte	0
06529 171F                        00            .byte	0
06530 1720                        00            .byte	0
06531 1721                        00            .byte	0
06532 1722                        00            .byte	0
06533 1723                        00            .byte	0
06534 1724                        00            .byte	0
06535 1725                        00            .byte	0
06536 1726                        00            .byte	0
06537 1727                        00            .byte	0
06538                                           ! 946  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06539 1728                        00            .byte	0
06540 1729                        00            .byte	0
06541 172A                        7E            .byte	$7E
06542 172B                        81            .byte	$81
06543 172C                        A5            .byte	$A5
06544 172D                        81            .byte	$81
06545 172E                        81            .byte	$81
06546 172F                        BD            .byte	$BD
06547 1730                        99            .byte	$99
06548 1731                        81            .byte	$81
06549 1732                        7E            .byte	$7E
06550 1733                        00            .byte	0
06551 1734                        00            .byte	0
06552 1735                        00            .byte	0
06553                                           ! 947  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06554 1736                        00            .byte	0
06555 1737                        00            .byte	0
06556 1738                        7E            .byte	$7E
06557 1739                        FF            .byte	$FF
06558 173A                        DB            .byte	$DB
06559 173B                        FF            .byte	$FF
06560 173C                        FF            .byte	$FF
06561 173D                        C3            .byte	$C3
06562 173E                        E7            .byte	$E7
06563 173F                        FF            .byte	$FF
06564 1740                        7E            .byte	$7E
06565 1741                        00            .byte	0
06566 1742                        00            .byte	0
06567 1743                        00            .byte	0
06568                                           ! 948  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06569 1744                        00            .byte	0
06570 1745                        00            .byte	0
06571 1746                        00            .byte	0
06572 1747                        6C            .byte	$6C
06573 1748                        FE            .byte	$FE
06574 1749                        FE            .byte	$FE
06575 174A                        FE            .byte	$FE
06576 174B                        FE            .byte	$FE
06577 174C                        7C            .byte	$7C
06578 174D                        38            .byte	$38
06579 174E                        10            .byte	$10
06580 174F                        00            .byte	0
06581 1750                        00            .byte	0
06582 1751                        00            .byte	0
06583                                           ! 949  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06584 1752                        00            .byte	0
06585 1753                        00            .byte	0
06586 1754                        00            .byte	0
06587 1755                        10            .byte	$10
06588 1756                        38            .byte	$38
06589 1757                        7C            .byte	$7C
06590 1758                        FE            .byte	$FE
06591 1759                        7C            .byte	$7C
06592 175A                        38            .byte	$38
06593 175B                        10            .byte	$10
06594 175C                        00            .byte	0
06595 175D                        00            .byte	0
06596 175E                        00            .byte	0
06597 175F                        00            .byte	0
06598                                           ! 950  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06599 1760                        00            .byte	0
06600 1761                        00            .byte	0
06601 1762                        18            .byte	$18
06602 1763                        3C            .byte	$3C
06603 1764                        3C            .byte	$3C
06604 1765                        E7            .byte	$E7
06605 1766                        E7            .byte	$E7
06606 1767                        E7            .byte	$E7
06607 1768                        18            .byte	$18
06608 1769                        18            .byte	$18
06609 176A                        3C            .byte	$3C
06610 176B                        00            .byte	0
06611 176C                        00            .byte	0
06612 176D                        00            .byte	0
06613                                           ! 951  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06614 176E                        00            .byte	0
06615 176F                        00            .byte	0
06616 1770                        18            .byte	$18
06617 1771                        3C            .byte	$3C
06618 1772                        7E            .byte	$7E
06619 1773                        FF            .byte	$FF
06620 1774                        FF            .byte	$FF
06621 1775                        7E            .byte	$7E
06622 1776                        18            .byte	$18
06623 1777                        18            .byte	$18
06624 1778                        3C            .byte	$3C
06625 1779                        00            .byte	0
06626 177A                        00            .byte	0
06627 177B                        00            .byte	0
06628                                           ! 952  0x00, 0x00, 0x00, 0x00, 0x00,
06629 177C                        00            .byte	0
06630 177D                        00            .byte	0
06631 177E                        00            .byte	0
06632 177F                        00            .byte	0
06633                                           ! 952  0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06634 1780                        00            .byte	0
06635 1781                        18            .byte	$18
06636 1782                        3C            .byte	$3C
06637 1783                        3C            .byte	$3C
06638 1784                        18            .byte	$18
06639 1785                        00            .byte	0
06640 1786                        00            .byte	0
06641 1787                        00            .byte	0
06642 1788                        00            .byte	0
06643 1789                        00            .byte	0
06644                                           ! 953  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06645 178A                        FF            .byte	$FF
06646 178B                        FF            .byte	$FF
06647 178C                        FF            .byte	$FF
06648 178D                        FF            .byte	$FF
06649 178E                        FF            .byte	$FF
06650 178F                        E7            .byte	$E7
06651 1790                        C3            .byte	$C3
06652 1791                        C3            .byte	$C3
06653 1792                        E7            .byte	$E7
06654 1793                        FF            .byte	$FF
06655 1794                        FF            .byte	$FF
06656 1795                        FF            .byte	$FF
06657 1796                        FF            .byte	$FF
06658 1797                        FF            .byte	$FF
06659                                           ! 954  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06660 1798                        00            .byte	0
06661 1799                        00            .byte	0
06662 179A                        00            .byte	0
06663 179B                        00            .byte	0
06664 179C                        3C            .byte	$3C
06665 179D                        66            .byte	$66
06666 179E                        42            .byte	$42
06667 179F                        42            .byte	$42
06668 17A0                        66            .byte	$66
06669 17A1                        3C            .byte	$3C
06670 17A2                        00            .byte	0
06671 17A3                        00            .byte	0
06672 17A4                        00            .byte	0
06673 17A5                        00            .byte	0
06674                                           ! 955  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06675 17A6                        FF            .byte	$FF
06676 17A7                        FF            .byte	$FF
06677 17A8                        FF            .byte	$FF
06678 17A9                        FF            .byte	$FF
06679 17AA                        C3            .byte	$C3
06680 17AB                        99            .byte	$99
06681 17AC                        BD            .byte	$BD
06682 17AD                        BD            .byte	$BD
06683 17AE                        99            .byte	$99
06684 17AF                        C3            .byte	$C3
06685 17B0                        FF            .byte	$FF
06686 17B1                        FF            .byte	$FF
06687 17B2                        FF            .byte	$FF
06688 17B3                        FF            .byte	$FF
06689                                           ! 956  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
06690 17B4                        00            .byte	0
06691 17B5                        00            .byte	0
06692 17B6                        1E            .byte	$1E
06693 17B7                        0E            .byte	$E
06694 17B8                        1A            .byte	$1A
06695 17B9                        32            .byte	$32
06696 17BA                        78            .byte	$78
06697 17BB                        CC            .byte	$CC
06698 17BC                        CC            .byte	$CC
06699 17BD                        CC            .byte	$CC
06700 17BE                        78            .byte	$78
06701 17BF                        00            .byte	0
06702 17C0                        00            .byte	0
06703 17C1                        00            .byte	0
06704                                           ! 957  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
06705 17C2                        00            .byte	0
06706 17C3                        00            .byte	0
06707 17C4                        3C            .byte	$3C
06708 17C5                        66            .byte	$66
06709 17C6                        66            .byte	$66
06710 17C7                        66            .byte	$66
06711 17C8                        3C            .byte	$3C
06712 17C9                        18            .byte	$18
06713 17CA                        7E            .byte	$7E
06714 17CB                        18            .byte	$18
06715 17CC                        18            .byte	$18
06716 17CD                        00            .byte	0
06717 17CE                        00            .byte	0
06718 17CF                        00            .byte	0
06719                                           ! 958  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
06720 17D0                        00            .byte	0
06721 17D1                        00            .byte	0
06722 17D2                        3F            .byte	$3F
06723 17D3                        33            .byte	$33
06724 17D4                        3F            .byte	$3F
06725 17D5                        30            .byte	$30
06726 17D6                        30            .byte	$30
06727 17D7                        30            .byte	$30
06728 17D8                        70            .byte	$70
06729 17D9                        F0            .byte	$F0
06730 17DA                        E0            .byte	$E0
06731 17DB                        00            .byte	0
06732 17DC                        00            .byte	0
06733 17DD                        00            .byte	0
06734                                           ! 959  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
06735 17DE                        00            .byte	0
06736 17DF                        00            .byte	0
06737 17E0                        7F            .byte	$7F
06738 17E1                        63            .byte	$63
06739 17E2                        7F            .byte	$7F
06740 17E3                        63            .byte	$63
06741 17E4                        63            .byte	$63
06742 17E5                        63            .byte	$63
06743 17E6                        67            .byte	$67
06744 17E7                        E7            .byte	$E7
06745 17E8                        E6            .byte	$E6
06746 17E9                        C0            .byte	$C0
06747 17EA                        00            .byte	0
06748 17EB                        00            .byte	0
06749                                           ! 960  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
06750 17EC                        00            .byte	0
06751 17ED                        00            .byte	0
06752 17EE                        18            .byte	$18
06753 17EF                        18            .byte	$18
06754 17F0                        DB            .byte	$DB
06755 17F1                        3C            .byte	$3C
06756 17F2                        E7            .byte	$E7
06757 17F3                        3C            .byte	$3C
06758 17F4                        DB            .byte	$DB
06759 17F5                        18            .byte	$18
06760 17F6                        18            .byte	$18
06761 17F7                        00            .byte	0
06762 17F8                        00            .byte	0
06763 17F9                        00            .byte	0
06764                                           ! 961  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
06765 17FA                        00            .byte	0
06766 17FB                        00            .byte	0
06767 17FC                        80            .byte	$80
06768 17FD                        C0            .byte	$C0
06769 17FE                        E0            .byte	$E0
06770 17FF                        F8            .byte	$F8
06771 1800                        FE            .byte	$FE
06772 1801                        F8            .byte	$F8
06773 1802                        E0            .byte	$E0
06774 1803                        C0            .byte	$C0
06775 1804                        80            .byte	$80
06776 1805                        00            .byte	0
06777 1806                        00            .byte	0
06778 1807                        00            .byte	0
06779                                           ! 962  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
06780 1808                        00            .byte	0
06781 1809                        00            .byte	0
06782 180A                        02            .byte	2
06783 180B                        06            .byte	6
06784 180C                        0E            .byte	$E
06785 180D                        3E            .byte	$3E
06786 180E                        FE            .byte	$FE
06787 180F                        3E            .byte	$3E
06788 1810                        0E            .byte	$E
06789 1811                        06            .byte	6
06790 1812                        02            .byte	2
06791 1813                        00            .byte	0
06792 1814                        00            .byte	0
06793 1815                        00            .byte	0
06794                                           ! 963  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06795 1816                        00            .byte	0
06796 1817                        00            .byte	0
06797 1818                        18            .byte	$18
06798 1819                        3C            .byte	$3C
06799 181A                        7E            .byte	$7E
06800 181B                        18            .byte	$18
06801 181C                        18            .byte	$18
06802 181D                        18            .byte	$18
06803 181E                        7E            .byte	$7E
06804 181F                        3C            .byte	$3C
06805 1820                        18            .byte	$18
06806 1821                        00            .byte	0
06807 1822                        00            .byte	0
06808 1823                        00            .byte	0
06809                                           ! 964  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
06810 1824                        00            .byte	0
06811 1825                        00            .byte	0
06812 1826                        66            .byte	$66
06813 1827                        66            .byte	$66
06814 1828                        66            .byte	$66
06815 1829                        66            .byte	$66
06816 182A                        66            .byte	$66
06817 182B                        66            .byte	$66
06818 182C                        00            .byte	0
06819 182D                        66            .byte	$66
06820 182E                        66            .byte	$66
06821 182F                        00            .byte	0
06822 1830                        00            .byte	0
06823 1831                        00            .byte	0
06824                                           ! 965  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
06825 1832                        00            .byte	0
06826 1833                        00            .byte	0
06827 1834                        7F            .byte	$7F
06828 1835                        DB            .byte	$DB
06829 1836                        DB            .byte	$DB
06830 1837                        DB            .byte	$DB
06831 1838                        7B            .byte	$7B
06832 1839                        1B            .byte	$1B
06833 183A                        1B            .byte	$1B
06834 183B                        1B            .byte	$1B
06835 183C                        1B            .byte	$1B
06836 183D                        00            .byte	0
06837 183E                        00            .byte	0
06838 183F                        00            .byte	0
06839                                           ! 966  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
06840 1840                        00            .byte	0
06841 1841                        7C            .byte	$7C
06842 1842                        C6            .byte	$C6
06843 1843                        60            .byte	$60
06844 1844                        38            .byte	$38
06845 1845                        6C            .byte	$6C
06846 1846                        C6            .byte	$C6
06847 1847                        C6            .byte	$C6
06848 1848                        6C            .byte	$6C
06849 1849                        38            .byte	$38
06850 184A                        0C            .byte	$C
06851 184B                        C6            .byte	$C6
06852 184C                        7C            .byte	$7C
06853 184D                        00            .byte	0
06854                                           ! 967  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
06855 184E                        00            .byte	0
06856 184F                        00            .byte	0
06857 1850                        00            .byte	0
06858 1851                        00            .byte	0
06859 1852                        00            .byte	0
06860 1853                        00            .byte	0
06861 1854                        00            .byte	0
06862 1855                        00            .byte	0
06863 1856                        FE            .byte	$FE
06864 1857                        FE            .byte	$FE
06865 1858                        FE            .byte	$FE
06866 1859                        00            .byte	0
06867 185A                        00            .byte	0
06868 185B                        00            .byte	0
06869                                           ! 968  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
06870 185C                        00            .byte	0
06871 185D                        00            .byte	0
06872 185E                        18            .byte	$18
06873 185F                        3C            .byte	$3C
06874 1860                        7E            .byte	$7E
06875 1861                        18            .byte	$18
06876 1862                        18            .byte	$18
06877 1863                        18            .byte	$18
06878 1864                        7E            .byte	$7E
06879 1865                        3C            .byte	$3C
06880 1866                        18            .byte	$18
06881 1867                        7E            .byte	$7E
06882 1868                        00            .byte	0
06883 1869                        00            .byte	0
06884                                           ! 969  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
06885 186A                        00            .byte	0
06886 186B                        00            .byte	0
06887 186C                        18            .byte	$18
06888 186D                        3C            .byte	$3C
06889 186E                        7E            .byte	$7E
06890 186F                        18            .byte	$18
06891 1870                        18            .byte	$18
06892 1871                        18            .byte	$18
06893 1872                        18            .byte	$18
06894 1873                        18            .byte	$18
06895 1874                        18            .byte	$18
06896 1875                        00            .byte	0
06897 1876                        00            .byte	0
06898 1877                        00            .byte	0
06899                                           ! 970  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06900 1878                        00            .byte	0
06901 1879                        00            .byte	0
06902 187A                        18            .byte	$18
06903 187B                        18            .byte	$18
06904 187C                        18            .byte	$18
06905 187D                        18            .byte	$18
06906 187E                        18            .byte	$18
06907 187F                        18            .byte	$18
06908 1880                        7E            .byte	$7E
06909 1881                        3C            .byte	$3C
06910 1882                        18            .byte	$18
06911 1883                        00            .byte	0
06912 1884                        00            .byte	0
06913 1885                        00            .byte	0
06914                                           ! 971  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06915 1886                        00            .byte	0
06916 1887                        00            .byte	0
06917 1888                        00            .byte	0
06918 1889                        00            .byte	0
06919 188A                        18            .byte	$18
06920 188B                        0C            .byte	$C
06921 188C                        FE            .byte	$FE
06922 188D                        0C            .byte	$C
06923 188E                        18            .byte	$18
06924 188F                        00            .byte	0
06925 1890                        00            .byte	0
06926 1891                        00            .byte	0
06927 1892                        00            .byte	0
06928 1893                        00            .byte	0
06929                                           ! 972  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
06930 1894                        00            .byte	0
06931 1895                        00            .byte	0
06932 1896                        00            .byte	0
06933 1897                        00            .byte	0
06934 1898                        30            .byte	$30
06935 1899                        60            .byte	$60
06936 189A                        FE            .byte	$FE
06937 189B                        60            .byte	$60
06938 189C                        30            .byte	$30
06939 189D                        00            .byte	0
06940 189E                        00            .byte	0
06941 189F                        00            .byte	0
06942 18A0                        00            .byte	0
06943 18A1                        00            .byte	0
06944                                           ! 973  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
06945 18A2                        00            .byte	0
06946 18A3                        00            .byte	0
06947 18A4                        00            .byte	0
06948 18A5                        00            .byte	0
06949 18A6                        00            .byte	0
06950 18A7                        C0            .byte	$C0
06951 18A8                        C0            .byte	$C0
06952 18A9                        C0            .byte	$C0
06953 18AA                        FE            .byte	$FE
06954 18AB                        00            .byte	0
06955 18AC                        00            .byte	0
06956 18AD                        00            .byte	0
06957 18AE                        00            .byte	0
06958 18AF                        00            .byte	0
06959                                           ! 974  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
06960 18B0                        00            .byte	0
06961 18B1                        00            .byte	0
06962 18B2                        00            .byte	0
06963 18B3                        00            .byte	0
06964 18B4                        28            .byte	$28
06965 18B5                        6C            .byte	$6C
06966 18B6                        FE            .byte	$FE
06967 18B7                        6C            .byte	$6C
06968 18B8                        28            .byte	$28
06969 18B9                        00            .byte	0
06970 18BA                        00            .byte	0
06971 18BB                        00            .byte	0
06972 18BC                        00            .byte	0
06973 18BD                        00            .byte	0
06974                                           ! 975  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
06975 18BE                        00            .byte	0
06976 18BF                        00            .byte	0
06977 18C0                        00            .byte	0
06978 18C1                        10            .byte	$10
06979 18C2                        38            .byte	$38
06980 18C3                        38            .byte	$38
06981 18C4                        7C            .byte	$7C
06982 18C5                        7C            .byte	$7C
06983 18C6                        FE            .byte	$FE
06984 18C7                        FE            .byte	$FE
06985 18C8                        00            .byte	0
06986 18C9                        00            .byte	0
06987 18CA                        00            .byte	0
06988 18CB                        00            .byte	0
06989                                           ! 976  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0
06990 18CC                        00            .byte	0
06991 18CD                        00            .byte	0
06992 18CE                        00            .byte	0
06993 18CF                        FE            .byte	$FE
06994 18D0                        FE            .byte	$FE
06995 18D1                        7C            .byte	$7C
06996                                           ! 976 x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06997 18D2                        7C            .byte	$7C
06998 18D3                        38            .byte	$38
06999 18D4                        38            .byte	$38
07000 18D5                        10            .byte	$10
07001 18D6                        00            .byte	0
07002 18D7                        00            .byte	0
07003 18D8                        00            .byte	0
07004 18D9                        00            .byte	0
07005                                           ! 977  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07006 18DA                        00            .byte	0
07007 18DB                        00            .byte	0
07008 18DC                        00            .byte	0
07009 18DD                        00            .byte	0
07010 18DE                        00            .byte	0
07011 18DF                        00            .byte	0
07012 18E0                        00            .byte	0
07013 18E1                        00            .byte	0
07014 18E2                        00            .byte	0
07015 18E3                        00            .byte	0
07016 18E4                        00            .byte	0
07017 18E5                        00            .byte	0
07018 18E6                        00            .byte	0
07019 18E7                        00            .byte	0
07020                                           ! 978  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07021 18E8                        00            .byte	0
07022 18E9                        00            .byte	0
07023 18EA                        18            .byte	$18
07024 18EB                        3C            .byte	$3C
07025 18EC                        3C            .byte	$3C
07026 18ED                        3C            .byte	$3C
07027 18EE                        18            .byte	$18
07028 18EF                        18            .byte	$18
07029 18F0                        00            .byte	0
07030 18F1                        18            .byte	$18
07031 18F2                        18            .byte	$18
07032 18F3                        00            .byte	0
07033 18F4                        00            .byte	0
07034 18F5                        00            .byte	0
07035                                           ! 979  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07036 18F6                        00            .byte	0
07037 18F7                        66            .byte	$66
07038 18F8                        66            .byte	$66
07039 18F9                        66            .byte	$66
07040 18FA                        24            .byte	$24
07041 18FB                        00            .byte	0
07042 18FC                        00            .byte	0
07043 18FD                        00            .byte	0
07044 18FE                        00            .byte	0
07045 18FF                        00            .byte	0
07046 1900                        00            .byte	0
07047 1901                        00            .byte	0
07048 1902                        00            .byte	0
07049 1903                        00            .byte	0
07050                                           ! 980  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07051 1904                        00            .byte	0
07052 1905                        00            .byte	0
07053 1906                        6C            .byte	$6C
07054 1907                        6C            .byte	$6C
07055 1908                        FE            .byte	$FE
07056 1909                        6C            .byte	$6C
07057 190A                        6C            .byte	$6C
07058 190B                        6C            .byte	$6C
07059 190C                        FE            .byte	$FE
07060 190D                        6C            .byte	$6C
07061 190E                        6C            .byte	$6C
07062 190F                        00            .byte	0
07063 1910                        00            .byte	0
07064 1911                        00            .byte	0
07065                                           ! 981  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07066 1912                        18            .byte	$18
07067 1913                        18            .byte	$18
07068 1914                        7C            .byte	$7C
07069 1915                        C6            .byte	$C6
07070 1916                        C2            .byte	$C2
07071 1917                        C0            .byte	$C0
07072 1918                        7C            .byte	$7C
07073 1919                        06            .byte	6
07074 191A                        86            .byte	$86
07075 191B                        C6            .byte	$C6
07076 191C                        7C            .byte	$7C
07077 191D                        18            .byte	$18
07078 191E                        18            .byte	$18
07079 191F                        00            .byte	0
07080                                           ! 982  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07081 1920                        00            .byte	0
07082 1921                        00            .byte	0
07083 1922                        00            .byte	0
07084 1923                        00            .byte	0
07085 1924                        C2            .byte	$C2
07086 1925                        C6            .byte	$C6
07087 1926                        0C            .byte	$C
07088 1927                        18            .byte	$18
07089 1928                        30            .byte	$30
07090 1929                        66            .byte	$66
07091 192A                        C6            .byte	$C6
07092 192B                        00            .byte	0
07093 192C                        00            .byte	0
07094 192D                        00            .byte	0
07095                                           ! 983  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07096 192E                        00            .byte	0
07097 192F                        00            .byte	0
07098 1930                        38            .byte	$38
07099 1931                        6C            .byte	$6C
07100 1932                        6C            .byte	$6C
07101 1933                        38            .byte	$38
07102 1934                        76            .byte	$76
07103 1935                        DC            .byte	$DC
07104 1936                        CC            .byte	$CC
07105 1937                        CC            .byte	$CC
07106 1938                        76            .byte	$76
07107 1939                        00            .byte	0
07108 193A                        00            .byte	0
07109 193B                        00            .byte	0
07110                                           ! 984  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07111 193C                        00            .byte	0
07112 193D                        30            .byte	$30
07113 193E                        30            .byte	$30
07114 193F                        30            .byte	$30
07115 1940                        60            .byte	$60
07116 1941                        00            .byte	0
07117 1942                        00            .byte	0
07118 1943                        00            .byte	0
07119 1944                        00            .byte	0
07120 1945                        00            .byte	0
07121 1946                        00            .byte	0
07122 1947                        00            .byte	0
07123 1948                        00            .byte	0
07124 1949                        00            .byte	0
07125                                           ! 985  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07126 194A                        00            .byte	0
07127 194B                        00            .byte	0
07128 194C                        0C            .byte	$C
07129 194D                        18            .byte	$18
07130 194E                        30            .byte	$30
07131 194F                        30            .byte	$30
07132 1950                        30            .byte	$30
07133 1951                        30            .byte	$30
07134 1952                        30            .byte	$30
07135 1953                        18            .byte	$18
07136 1954                        0C            .byte	$C
07137 1955                        00            .byte	0
07138 1956                        00            .byte	0
07139 1957                        00            .byte	0
07140                                           ! 986  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07141 1958                        00            .byte	0
07142 1959                        00            .byte	0
07143 195A                        30            .byte	$30
07144 195B                        18            .byte	$18
07145 195C                        0C            .byte	$C
07146 195D                        0C            .byte	$C
07147 195E                        0C            .byte	$C
07148 195F                        0C            .byte	$C
07149 1960                        0C            .byte	$C
07150 1961                        18            .byte	$18
07151 1962                        30            .byte	$30
07152 1963                        00            .byte	0
07153 1964                        00            .byte	0
07154 1965                        00            .byte	0
07155                                           ! 987  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07156 1966                        00            .byte	0
07157 1967                        00            .byte	0
07158 1968                        00            .byte	0
07159 1969                        00            .byte	0
07160 196A                        66            .byte	$66
07161 196B                        3C            .byte	$3C
07162 196C                        FF            .byte	$FF
07163 196D                        3C            .byte	$3C
07164 196E                        66            .byte	$66
07165 196F                        00            .byte	0
07166 1970                        00            .byte	0
07167 1971                        00            .byte	0
07168 1972                        00            .byte	0
07169 1973                        00            .byte	0
07170                                           ! 988  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07171 1974                        00            .byte	0
07172 1975                        00            .byte	0
07173 1976                        00            .byte	0
07174 1977                        00            .byte	0
07175 1978                        18            .byte	$18
07176 1979                        18            .byte	$18
07177 197A                        7E            .byte	$7E
07178 197B                        18            .byte	$18
07179 197C                        18            .byte	$18
07180 197D                        00            .byte	0
07181 197E                        00            .byte	0
07182 197F                        00            .byte	0
07183 1980                        00            .byte	0
07184 1981                        00            .byte	0
07185                                           ! 989  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07186 1982                        00            .byte	0
07187 1983                        00            .byte	0
07188 1984                        00            .byte	0
07189 1985                        00            .byte	0
07190 1986                        00            .byte	0
07191 1987                        00            .byte	0
07192 1988                        00            .byte	0
07193 1989                        00            .byte	0
07194 198A                        18            .byte	$18
07195 198B                        18            .byte	$18
07196 198C                        18            .byte	$18
07197 198D                        30            .byte	$30
07198 198E                        00            .byte	0
07199 198F                        00            .byte	0
07200                                           ! 990  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07201 1990                        00            .byte	0
07202 1991                        00            .byte	0
07203 1992                        00            .byte	0
07204 1993                        00            .byte	0
07205 1994                        00            .byte	0
07206 1995                        00            .byte	0
07207 1996                        FE            .byte	$FE
07208 1997                        00            .byte	0
07209 1998                        00            .byte	0
07210 1999                        00            .byte	0
07211 199A                        00            .byte	0
07212 199B                        00            .byte	0
07213 199C                        00            .byte	0
07214 199D                        00            .byte	0
07215                                           ! 991  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07216 199E                        00            .byte	0
07217 199F                        00            .byte	0
07218 19A0                        00            .byte	0
07219 19A1                        00            .byte	0
07220 19A2                        00            .byte	0
07221 19A3                        00            .byte	0
07222 19A4                        00            .byte	0
07223 19A5                        00            .byte	0
07224 19A6                        00            .byte	0
07225 19A7                        18            .byte	$18
07226 19A8                        18            .byte	$18
07227 19A9                        00            .byte	0
07228 19AA                        00            .byte	0
07229 19AB                        00            .byte	0
07230                                           ! 992  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07231 19AC                        00            .byte	0
07232 19AD                        00            .byte	0
07233 19AE                        02            .byte	2
07234 19AF                        06            .byte	6
07235 19B0                        0C            .byte	$C
07236 19B1                        18            .byte	$18
07237 19B2                        30            .byte	$30
07238 19B3                        60            .byte	$60
07239 19B4                        C0            .byte	$C0
07240 19B5                        80            .byte	$80
07241 19B6                        00            .byte	0
07242 19B7                        00            .byte	0
07243 19B8                        00            .byte	0
07244 19B9                        00            .byte	0
07245                                           ! 993  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07246 19BA                        00            .byte	0
07247 19BB                        00            .byte	0
07248 19BC                        7C            .byte	$7C
07249 19BD                        C6            .byte	$C6
07250 19BE                        CE            .byte	$CE
07251 19BF                        DE            .byte	$DE
07252 19C0                        F6            .byte	$F6
07253 19C1                        E6            .byte	$E6
07254 19C2                        C6            .byte	$C6
07255 19C3                        C6            .byte	$C6
07256 19C4                        7C            .byte	$7C
07257 19C5                        00            .byte	0
07258 19C6                        00            .byte	0
07259 19C7                        00            .byte	0
07260                                           ! 994  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07261 19C8                        00            .byte	0
07262 19C9                        00            .byte	0
07263 19CA                        18            .byte	$18
07264 19CB                        38            .byte	$38
07265 19CC                        78            .byte	$78
07266 19CD                        18            .byte	$18
07267 19CE                        18            .byte	$18
07268 19CF                        18            .byte	$18
07269 19D0                        18            .byte	$18
07270 19D1                        18            .byte	$18
07271 19D2                        7E            .byte	$7E
07272 19D3                        00            .byte	0
07273 19D4                        00            .byte	0
07274 19D5                        00            .byte	0
07275                                           ! 995  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07276 19D6                        00            .byte	0
07277 19D7                        00            .byte	0
07278 19D8                        7C            .byte	$7C
07279 19D9                        C6            .byte	$C6
07280 19DA                        06            .byte	6
07281 19DB                        0C            .byte	$C
07282 19DC                        18            .byte	$18
07283 19DD                        30            .byte	$30
07284 19DE                        60            .byte	$60
07285 19DF                        C6            .byte	$C6
07286 19E0                        FE            .byte	$FE
07287 19E1                        00            .byte	0
07288 19E2                        00            .byte	0
07289 19E3                        00            .byte	0
07290                                           ! 996  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07291 19E4                        00            .byte	0
07292 19E5                        00            .byte	0
07293 19E6                        7C            .byte	$7C
07294 19E7                        C6            .byte	$C6
07295 19E8                        06            .byte	6
07296 19E9                        06            .byte	6
07297 19EA                        3C            .byte	$3C
07298 19EB                        06            .byte	6
07299 19EC                        06            .byte	6
07300 19ED                        C6            .byte	$C6
07301 19EE                        7C            .byte	$7C
07302 19EF                        00            .byte	0
07303 19F0                        00            .byte	0
07304 19F1                        00            .byte	0
07305                                           ! 997  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07306 19F2                        00            .byte	0
07307 19F3                        00            .byte	0
07308 19F4                        0C            .byte	$C
07309 19F5                        1C            .byte	$1C
07310 19F6                        3C            .byte	$3C
07311 19F7                        6C            .byte	$6C
07312 19F8                        CC            .byte	$CC
07313 19F9                        FE            .byte	$FE
07314 19FA                        0C            .byte	$C
07315 19FB                        0C            .byte	$C
07316 19FC                        1E            .byte	$1E
07317 19FD                        00            .byte	0
07318 19FE                        00            .byte	0
07319 19FF                        00            .byte	0
07320                                           ! 998  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07321 1A00                        00            .byte	0
07322 1A01                        00            .byte	0
07323 1A02                        FE            .byte	$FE
07324 1A03                        C0            .byte	$C0
07325 1A04                        C0            .byte	$C0
07326 1A05                        C0            .byte	$C0
07327 1A06                        FC            .byte	$FC
07328 1A07                        06            .byte	6
07329 1A08                        06            .byte	6
07330 1A09                        C6            .byte	$C6
07331 1A0A                        7C            .byte	$7C
07332 1A0B                        00            .byte	0
07333 1A0C                        00            .byte	0
07334 1A0D                        00            .byte	0
07335                                           ! 999  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07336 1A0E                        00            .byte	0
07337 1A0F                        00            .byte	0
07338 1A10                        38            .byte	$38
07339 1A11                        60            .byte	$60
07340 1A12                        C0            .byte	$C0
07341 1A13                        C0            .byte	$C0
07342 1A14                        FC            .byte	$FC
07343 1A15                        C6            .byte	$C6
07344 1A16                        C6            .byte	$C6
07345 1A17                        C6            .byte	$C6
07346 1A18                        7C            .byte	$7C
07347 1A19                        00            .byte	0
07348 1A1A                        00            .byte	0
07349 1A1B                        00            .byte	0
07350                                           ! 1000  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x3
07351 1A1C                        00            .byte	0
07352 1A1D                        00            .byte	0
07353 1A1E                        FE            .byte	$FE
07354 1A1F                        C6            .byte	$C6
07355 1A20                        06            .byte	6
07356 1A21                        0C            .byte	$C
07357 1A22                        18            .byte	$18
07358                                           ! 1000 0, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07359 1A23                        30            .byte	$30
07360 1A24                        30            .byte	$30
07361 1A25                        30            .byte	$30
07362 1A26                        30            .byte	$30
07363 1A27                        00            .byte	0
07364 1A28                        00            .byte	0
07365 1A29                        00            .byte	0
07366                                           ! 1001  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07367 1A2A                        00            .byte	0
07368 1A2B                        00            .byte	0
07369 1A2C                        7C            .byte	$7C
07370 1A2D                        C6            .byte	$C6
07371 1A2E                        C6            .byte	$C6
07372 1A2F                        C6            .byte	$C6
07373 1A30                        7C            .byte	$7C
07374 1A31                        C6            .byte	$C6
07375 1A32                        C6            .byte	$C6
07376 1A33                        C6            .byte	$C6
07377 1A34                        7C            .byte	$7C
07378 1A35                        00            .byte	0
07379 1A36                        00            .byte	0
07380 1A37                        00            .byte	0
07381                                           ! 1002  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07382 1A38                        00            .byte	0
07383 1A39                        00            .byte	0
07384 1A3A                        7C            .byte	$7C
07385 1A3B                        C6            .byte	$C6
07386 1A3C                        C6            .byte	$C6
07387 1A3D                        C6            .byte	$C6
07388 1A3E                        7E            .byte	$7E
07389 1A3F                        06            .byte	6
07390 1A40                        06            .byte	6
07391 1A41                        0C            .byte	$C
07392 1A42                        78            .byte	$78
07393 1A43                        00            .byte	0
07394 1A44                        00            .byte	0
07395 1A45                        00            .byte	0
07396                                           ! 1003  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07397 1A46                        00            .byte	0
07398 1A47                        00            .byte	0
07399 1A48                        00            .byte	0
07400 1A49                        18            .byte	$18
07401 1A4A                        18            .byte	$18
07402 1A4B                        00            .byte	0
07403 1A4C                        00            .byte	0
07404 1A4D                        00            .byte	0
07405 1A4E                        18            .byte	$18
07406 1A4F                        18            .byte	$18
07407 1A50                        00            .byte	0
07408 1A51                        00            .byte	0
07409 1A52                        00            .byte	0
07410 1A53                        00            .byte	0
07411                                           ! 1004  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07412 1A54                        00            .byte	0
07413 1A55                        00            .byte	0
07414 1A56                        00            .byte	0
07415 1A57                        18            .byte	$18
07416 1A58                        18            .byte	$18
07417 1A59                        00            .byte	0
07418 1A5A                        00            .byte	0
07419 1A5B                        00            .byte	0
07420 1A5C                        18            .byte	$18
07421 1A5D                        18            .byte	$18
07422 1A5E                        30            .byte	$30
07423 1A5F                        00            .byte	0
07424 1A60                        00            .byte	0
07425 1A61                        00            .byte	0
07426                                           ! 1005  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07427 1A62                        00            .byte	0
07428 1A63                        00            .byte	0
07429 1A64                        06            .byte	6
07430 1A65                        0C            .byte	$C
07431 1A66                        18            .byte	$18
07432 1A67                        30            .byte	$30
07433 1A68                        60            .byte	$60
07434 1A69                        30            .byte	$30
07435 1A6A                        18            .byte	$18
07436 1A6B                        0C            .byte	$C
07437 1A6C                        06            .byte	6
07438 1A6D                        00            .byte	0
07439 1A6E                        00            .byte	0
07440 1A6F                        00            .byte	0
07441                                           ! 1006  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07442 1A70                        00            .byte	0
07443 1A71                        00            .byte	0
07444 1A72                        00            .byte	0
07445 1A73                        00            .byte	0
07446 1A74                        00            .byte	0
07447 1A75                        7E            .byte	$7E
07448 1A76                        00            .byte	0
07449 1A77                        00            .byte	0
07450 1A78                        7E            .byte	$7E
07451 1A79                        00            .byte	0
07452 1A7A                        00            .byte	0
07453 1A7B                        00            .byte	0
07454 1A7C                        00            .byte	0
07455 1A7D                        00            .byte	0
07456                                           ! 1007  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07457 1A7E                        00            .byte	0
07458 1A7F                        00            .byte	0
07459 1A80                        60            .byte	$60
07460 1A81                        30            .byte	$30
07461 1A82                        18            .byte	$18
07462 1A83                        0C            .byte	$C
07463 1A84                        06            .byte	6
07464 1A85                        0C            .byte	$C
07465 1A86                        18            .byte	$18
07466 1A87                        30            .byte	$30
07467 1A88                        60            .byte	$60
07468 1A89                        00            .byte	0
07469 1A8A                        00            .byte	0
07470 1A8B                        00            .byte	0
07471                                           ! 1008  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07472 1A8C                        00            .byte	0
07473 1A8D                        00            .byte	0
07474 1A8E                        7C            .byte	$7C
07475 1A8F                        C6            .byte	$C6
07476 1A90                        C6            .byte	$C6
07477 1A91                        0C            .byte	$C
07478 1A92                        18            .byte	$18
07479 1A93                        18            .byte	$18
07480 1A94                        00            .byte	0
07481 1A95                        18            .byte	$18
07482 1A96                        18            .byte	$18
07483 1A97                        00            .byte	0
07484 1A98                        00            .byte	0
07485 1A99                        00            .byte	0
07486                                           ! 1009  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07487 1A9A                        00            .byte	0
07488 1A9B                        00            .byte	0
07489 1A9C                        7C            .byte	$7C
07490 1A9D                        C6            .byte	$C6
07491 1A9E                        C6            .byte	$C6
07492 1A9F                        DE            .byte	$DE
07493 1AA0                        DE            .byte	$DE
07494 1AA1                        DE            .byte	$DE
07495 1AA2                        DC            .byte	$DC
07496 1AA3                        C0            .byte	$C0
07497 1AA4                        7C            .byte	$7C
07498 1AA5                        00            .byte	0
07499 1AA6                        00            .byte	0
07500 1AA7                        00            .byte	0
07501                                           ! 1010  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07502 1AA8                        00            .byte	0
07503 1AA9                        00            .byte	0
07504 1AAA                        10            .byte	$10
07505 1AAB                        38            .byte	$38
07506 1AAC                        6C            .byte	$6C
07507 1AAD                        C6            .byte	$C6
07508 1AAE                        C6            .byte	$C6
07509 1AAF                        FE            .byte	$FE
07510 1AB0                        C6            .byte	$C6
07511 1AB1                        C6            .byte	$C6
07512 1AB2                        C6            .byte	$C6
07513 1AB3                        00            .byte	0
07514 1AB4                        00            .byte	0
07515 1AB5                        00            .byte	0
07516                                           ! 1011  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07517 1AB6                        00            .byte	0
07518 1AB7                        00            .byte	0
07519 1AB8                        FC            .byte	$FC
07520 1AB9                        66            .byte	$66
07521 1ABA                        66            .byte	$66
07522 1ABB                        66            .byte	$66
07523 1ABC                        7C            .byte	$7C
07524 1ABD                        66            .byte	$66
07525 1ABE                        66            .byte	$66
07526 1ABF                        66            .byte	$66
07527 1AC0                        FC            .byte	$FC
07528 1AC1                        00            .byte	0
07529 1AC2                        00            .byte	0
07530 1AC3                        00            .byte	0
07531                                           ! 1012  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07532 1AC4                        00            .byte	0
07533 1AC5                        00            .byte	0
07534 1AC6                        3C            .byte	$3C
07535 1AC7                        66            .byte	$66
07536 1AC8                        C2            .byte	$C2
07537 1AC9                        C0            .byte	$C0
07538 1ACA                        C0            .byte	$C0
07539 1ACB                        C0            .byte	$C0
07540 1ACC                        C2            .byte	$C2
07541 1ACD                        66            .byte	$66
07542 1ACE                        3C            .byte	$3C
07543 1ACF                        00            .byte	0
07544 1AD0                        00            .byte	0
07545 1AD1                        00            .byte	0
07546                                           ! 1013  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07547 1AD2                        00            .byte	0
07548 1AD3                        00            .byte	0
07549 1AD4                        F8            .byte	$F8
07550 1AD5                        6C            .byte	$6C
07551 1AD6                        66            .byte	$66
07552 1AD7                        66            .byte	$66
07553 1AD8                        66            .byte	$66
07554 1AD9                        66            .byte	$66
07555 1ADA                        66            .byte	$66
07556 1ADB                        6C            .byte	$6C
07557 1ADC                        F8            .byte	$F8
07558 1ADD                        00            .byte	0
07559 1ADE                        00            .byte	0
07560 1ADF                        00            .byte	0
07561                                           ! 1014  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07562 1AE0                        00            .byte	0
07563 1AE1                        00            .byte	0
07564 1AE2                        FE            .byte	$FE
07565 1AE3                        66            .byte	$66
07566 1AE4                        62            .byte	$62
07567 1AE5                        68            .byte	$68
07568 1AE6                        78            .byte	$78
07569 1AE7                        68            .byte	$68
07570 1AE8                        62            .byte	$62
07571 1AE9                        66            .byte	$66
07572 1AEA                        FE            .byte	$FE
07573 1AEB                        00            .byte	0
07574 1AEC                        00            .byte	0
07575 1AED                        00            .byte	0
07576                                           ! 1015  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07577 1AEE                        00            .byte	0
07578 1AEF                        00            .byte	0
07579 1AF0                        FE            .byte	$FE
07580 1AF1                        66            .byte	$66
07581 1AF2                        62            .byte	$62
07582 1AF3                        68            .byte	$68
07583 1AF4                        78            .byte	$78
07584 1AF5                        68            .byte	$68
07585 1AF6                        60            .byte	$60
07586 1AF7                        60            .byte	$60
07587 1AF8                        F0            .byte	$F0
07588 1AF9                        00            .byte	0
07589 1AFA                        00            .byte	0
07590 1AFB                        00            .byte	0
07591                                           ! 1016  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07592 1AFC                        00            .byte	0
07593 1AFD                        00            .byte	0
07594 1AFE                        3C            .byte	$3C
07595 1AFF                        66            .byte	$66
07596 1B00                        C2            .byte	$C2
07597 1B01                        C0            .byte	$C0
07598 1B02                        C0            .byte	$C0
07599 1B03                        DE            .byte	$DE
07600 1B04                        C6            .byte	$C6
07601 1B05                        66            .byte	$66
07602 1B06                        3A            .byte	$3A
07603 1B07                        00            .byte	0
07604 1B08                        00            .byte	0
07605 1B09                        00            .byte	0
07606                                           ! 1017  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07607 1B0A                        00            .byte	0
07608 1B0B                        00            .byte	0
07609 1B0C                        C6            .byte	$C6
07610 1B0D                        C6            .byte	$C6
07611 1B0E                        C6            .byte	$C6
07612 1B0F                        C6            .byte	$C6
07613 1B10                        FE            .byte	$FE
07614 1B11                        C6            .byte	$C6
07615 1B12                        C6            .byte	$C6
07616 1B13                        C6            .byte	$C6
07617 1B14                        C6            .byte	$C6
07618 1B15                        00            .byte	0
07619 1B16                        00            .byte	0
07620 1B17                        00            .byte	0
07621                                           ! 1018  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07622 1B18                        00            .byte	0
07623 1B19                        00            .byte	0
07624 1B1A                        3C            .byte	$3C
07625 1B1B                        18            .byte	$18
07626 1B1C                        18            .byte	$18
07627 1B1D                        18            .byte	$18
07628 1B1E                        18            .byte	$18
07629 1B1F                        18            .byte	$18
07630 1B20                        18            .byte	$18
07631 1B21                        18            .byte	$18
07632 1B22                        3C            .byte	$3C
07633 1B23                        00            .byte	0
07634 1B24                        00            .byte	0
07635 1B25                        00            .byte	0
07636                                           ! 1019  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07637 1B26                        00            .byte	0
07638 1B27                        00            .byte	0
07639 1B28                        1E            .byte	$1E
07640 1B29                        0C            .byte	$C
07641 1B2A                        0C            .byte	$C
07642 1B2B                        0C            .byte	$C
07643 1B2C                        0C            .byte	$C
07644 1B2D                        0C            .byte	$C
07645 1B2E                        CC            .byte	$CC
07646 1B2F                        CC            .byte	$CC
07647 1B30                        78            .byte	$78
07648 1B31                        00            .byte	0
07649 1B32                        00            .byte	0
07650 1B33                        00            .byte	0
07651                                           ! 1020  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07652 1B34                        00            .byte	0
07653 1B35                        00            .byte	0
07654 1B36                        E6            .byte	$E6
07655 1B37                        66            .byte	$66
07656 1B38                        6C            .byte	$6C
07657 1B39                        6C            .byte	$6C
07658 1B3A                        78            .byte	$78
07659 1B3B                        6C            .byte	$6C
07660 1B3C                        6C            .byte	$6C
07661 1B3D                        66            .byte	$66
07662 1B3E                        E6            .byte	$E6
07663 1B3F                        00            .byte	0
07664 1B40                        00            .byte	0
07665 1B41                        00            .byte	0
07666                                           ! 1021  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07667 1B42                        00            .byte	0
07668 1B43                        00            .byte	0
07669 1B44                        F0            .byte	$F0
07670 1B45                        60            .byte	$60
07671 1B46                        60            .byte	$60
07672 1B47                        60            .byte	$60
07673 1B48                        60            .byte	$60
07674 1B49                        60            .byte	$60
07675 1B4A                        62            .byte	$62
07676 1B4B                        66            .byte	$66
07677 1B4C                        FE            .byte	$FE
07678 1B4D                        00            .byte	0
07679 1B4E                        00            .byte	0
07680 1B4F                        00            .byte	0
07681                                           ! 1022  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07682 1B50                        00            .byte	0
07683 1B51                        00            .byte	0
07684 1B52                        C6            .byte	$C6
07685 1B53                        EE            .byte	$EE
07686 1B54                        FE            .byte	$FE
07687 1B55                        FE            .byte	$FE
07688 1B56                        D6            .byte	$D6
07689 1B57                        C6            .byte	$C6
07690 1B58                        C6            .byte	$C6
07691 1B59                        C6            .byte	$C6
07692 1B5A                        C6            .byte	$C6
07693 1B5B                        00            .byte	0
07694 1B5C                        00            .byte	0
07695 1B5D                        00            .byte	0
07696                                           ! 1023  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07697 1B5E                        00            .byte	0
07698 1B5F                        00            .byte	0
07699 1B60                        C6            .byte	$C6
07700 1B61                        E6            .byte	$E6
07701 1B62                        F6            .byte	$F6
07702 1B63                        FE            .byte	$FE
07703 1B64                        DE            .byte	$DE
07704 1B65                        CE            .byte	$CE
07705 1B66                        C6            .byte	$C6
07706 1B67                        C6            .byte	$C6
07707 1B68                        C6            .byte	$C6
07708 1B69                        00            .byte	0
07709 1B6A                        00            .byte	0
07710 1B6B                        00            .byte	0
07711                                           ! 1024  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6,
07712 1B6C                        00            .byte	0
07713 1B6D                        00            .byte	0
07714 1B6E                        38            .byte	$38
07715 1B6F                        6C            .byte	$6C
07716 1B70                        C6            .byte	$C6
07717 1B71                        C6            .byte	$C6
07718 1B72                        C6            .byte	$C6
07719 1B73                        C6            .byte	$C6
07720                                           ! 1024  0x6c, 0x38, 0x00, 0x00, 0x00,
07721 1B74                        C6            .byte	$C6
07722 1B75                        6C            .byte	$6C
07723 1B76                        38            .byte	$38
07724 1B77                        00            .byte	0
07725 1B78                        00            .byte	0
07726 1B79                        00            .byte	0
07727                                           ! 1025  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07728 1B7A                        00            .byte	0
07729 1B7B                        00            .byte	0
07730 1B7C                        FC            .byte	$FC
07731 1B7D                        66            .byte	$66
07732 1B7E                        66            .byte	$66
07733 1B7F                        66            .byte	$66
07734 1B80                        7C            .byte	$7C
07735 1B81                        60            .byte	$60
07736 1B82                        60            .byte	$60
07737 1B83                        60            .byte	$60
07738 1B84                        F0            .byte	$F0
07739 1B85                        00            .byte	0
07740 1B86                        00            .byte	0
07741 1B87                        00            .byte	0
07742                                           ! 1026  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
07743 1B88                        00            .byte	0
07744 1B89                        00            .byte	0
07745 1B8A                        7C            .byte	$7C
07746 1B8B                        C6            .byte	$C6
07747 1B8C                        C6            .byte	$C6
07748 1B8D                        C6            .byte	$C6
07749 1B8E                        C6            .byte	$C6
07750 1B8F                        D6            .byte	$D6
07751 1B90                        DE            .byte	$DE
07752 1B91                        7C            .byte	$7C
07753 1B92                        0C            .byte	$C
07754 1B93                        0E            .byte	$E
07755 1B94                        00            .byte	0
07756 1B95                        00            .byte	0
07757                                           ! 1027  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
07758 1B96                        00            .byte	0
07759 1B97                        00            .byte	0
07760 1B98                        FC            .byte	$FC
07761 1B99                        66            .byte	$66
07762 1B9A                        66            .byte	$66
07763 1B9B                        66            .byte	$66
07764 1B9C                        7C            .byte	$7C
07765 1B9D                        6C            .byte	$6C
07766 1B9E                        66            .byte	$66
07767 1B9F                        66            .byte	$66
07768 1BA0                        E6            .byte	$E6
07769 1BA1                        00            .byte	0
07770 1BA2                        00            .byte	0
07771 1BA3                        00            .byte	0
07772                                           ! 1028  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07773 1BA4                        00            .byte	0
07774 1BA5                        00            .byte	0
07775 1BA6                        7C            .byte	$7C
07776 1BA7                        C6            .byte	$C6
07777 1BA8                        C6            .byte	$C6
07778 1BA9                        60            .byte	$60
07779 1BAA                        38            .byte	$38
07780 1BAB                        0C            .byte	$C
07781 1BAC                        C6            .byte	$C6
07782 1BAD                        C6            .byte	$C6
07783 1BAE                        7C            .byte	$7C
07784 1BAF                        00            .byte	0
07785 1BB0                        00            .byte	0
07786 1BB1                        00            .byte	0
07787                                           ! 1029  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07788 1BB2                        00            .byte	0
07789 1BB3                        00            .byte	0
07790 1BB4                        7E            .byte	$7E
07791 1BB5                        7E            .byte	$7E
07792 1BB6                        5A            .byte	$5A
07793 1BB7                        18            .byte	$18
07794 1BB8                        18            .byte	$18
07795 1BB9                        18            .byte	$18
07796 1BBA                        18            .byte	$18
07797 1BBB                        18            .byte	$18
07798 1BBC                        3C            .byte	$3C
07799 1BBD                        00            .byte	0
07800 1BBE                        00            .byte	0
07801 1BBF                        00            .byte	0
07802                                           ! 1030  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07803 1BC0                        00            .byte	0
07804 1BC1                        00            .byte	0
07805 1BC2                        C6            .byte	$C6
07806 1BC3                        C6            .byte	$C6
07807 1BC4                        C6            .byte	$C6
07808 1BC5                        C6            .byte	$C6
07809 1BC6                        C6            .byte	$C6
07810 1BC7                        C6            .byte	$C6
07811 1BC8                        C6            .byte	$C6
07812 1BC9                        C6            .byte	$C6
07813 1BCA                        7C            .byte	$7C
07814 1BCB                        00            .byte	0
07815 1BCC                        00            .byte	0
07816 1BCD                        00            .byte	0
07817                                           ! 1031  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
07818 1BCE                        00            .byte	0
07819 1BCF                        00            .byte	0
07820 1BD0                        C6            .byte	$C6
07821 1BD1                        C6            .byte	$C6
07822 1BD2                        C6            .byte	$C6
07823 1BD3                        C6            .byte	$C6
07824 1BD4                        C6            .byte	$C6
07825 1BD5                        C6            .byte	$C6
07826 1BD6                        6C            .byte	$6C
07827 1BD7                        38            .byte	$38
07828 1BD8                        10            .byte	$10
07829 1BD9                        00            .byte	0
07830 1BDA                        00            .byte	0
07831 1BDB                        00            .byte	0
07832                                           ! 1032  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
07833 1BDC                        00            .byte	0
07834 1BDD                        00            .byte	0
07835 1BDE                        C6            .byte	$C6
07836 1BDF                        C6            .byte	$C6
07837 1BE0                        C6            .byte	$C6
07838 1BE1                        C6            .byte	$C6
07839 1BE2                        D6            .byte	$D6
07840 1BE3                        D6            .byte	$D6
07841 1BE4                        FE            .byte	$FE
07842 1BE5                        7C            .byte	$7C
07843 1BE6                        6C            .byte	$6C
07844 1BE7                        00            .byte	0
07845 1BE8                        00            .byte	0
07846 1BE9                        00            .byte	0
07847                                           ! 1033  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07848 1BEA                        00            .byte	0
07849 1BEB                        00            .byte	0
07850 1BEC                        C6            .byte	$C6
07851 1BED                        C6            .byte	$C6
07852 1BEE                        6C            .byte	$6C
07853 1BEF                        38            .byte	$38
07854 1BF0                        38            .byte	$38
07855 1BF1                        38            .byte	$38
07856 1BF2                        6C            .byte	$6C
07857 1BF3                        C6            .byte	$C6
07858 1BF4                        C6            .byte	$C6
07859 1BF5                        00            .byte	0
07860 1BF6                        00            .byte	0
07861 1BF7                        00            .byte	0
07862                                           ! 1034  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07863 1BF8                        00            .byte	0
07864 1BF9                        00            .byte	0
07865 1BFA                        66            .byte	$66
07866 1BFB                        66            .byte	$66
07867 1BFC                        66            .byte	$66
07868 1BFD                        66            .byte	$66
07869 1BFE                        3C            .byte	$3C
07870 1BFF                        18            .byte	$18
07871 1C00                        18            .byte	$18
07872 1C01                        18            .byte	$18
07873 1C02                        3C            .byte	$3C
07874 1C03                        00            .byte	0
07875 1C04                        00            .byte	0
07876 1C05                        00            .byte	0
07877                                           ! 1035  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07878 1C06                        00            .byte	0
07879 1C07                        00            .byte	0
07880 1C08                        FE            .byte	$FE
07881 1C09                        C6            .byte	$C6
07882 1C0A                        8C            .byte	$8C
07883 1C0B                        18            .byte	$18
07884 1C0C                        30            .byte	$30
07885 1C0D                        60            .byte	$60
07886 1C0E                        C2            .byte	$C2
07887 1C0F                        C6            .byte	$C6
07888 1C10                        FE            .byte	$FE
07889 1C11                        00            .byte	0
07890 1C12                        00            .byte	0
07891 1C13                        00            .byte	0
07892                                           ! 1036  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
07893 1C14                        00            .byte	0
07894 1C15                        00            .byte	0
07895 1C16                        3C            .byte	$3C
07896 1C17                        30            .byte	$30
07897 1C18                        30            .byte	$30
07898 1C19                        30            .byte	$30
07899 1C1A                        30            .byte	$30
07900 1C1B                        30            .byte	$30
07901 1C1C                        30            .byte	$30
07902 1C1D                        30            .byte	$30
07903 1C1E                        3C            .byte	$3C
07904 1C1F                        00            .byte	0
07905 1C20                        00            .byte	0
07906 1C21                        00            .byte	0
07907                                           ! 1037  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07908 1C22                        00            .byte	0
07909 1C23                        00            .byte	0
07910 1C24                        80            .byte	$80
07911 1C25                        C0            .byte	$C0
07912 1C26                        E0            .byte	$E0
07913 1C27                        70            .byte	$70
07914 1C28                        38            .byte	$38
07915 1C29                        1C            .byte	$1C
07916 1C2A                        0E            .byte	$E
07917 1C2B                        06            .byte	6
07918 1C2C                        02            .byte	2
07919 1C2D                        00            .byte	0
07920 1C2E                        00            .byte	0
07921 1C2F                        00            .byte	0
07922                                           ! 1038  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
07923 1C30                        00            .byte	0
07924 1C31                        00            .byte	0
07925 1C32                        3C            .byte	$3C
07926 1C33                        0C            .byte	$C
07927 1C34                        0C            .byte	$C
07928 1C35                        0C            .byte	$C
07929 1C36                        0C            .byte	$C
07930 1C37                        0C            .byte	$C
07931 1C38                        0C            .byte	$C
07932 1C39                        0C            .byte	$C
07933 1C3A                        3C            .byte	$3C
07934 1C3B                        00            .byte	0
07935 1C3C                        00            .byte	0
07936 1C3D                        00            .byte	0
07937                                           ! 1039  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07938 1C3E                        10            .byte	$10
07939 1C3F                        38            .byte	$38
07940 1C40                        6C            .byte	$6C
07941 1C41                        C6            .byte	$C6
07942 1C42                        00            .byte	0
07943 1C43                        00            .byte	0
07944 1C44                        00            .byte	0
07945 1C45                        00            .byte	0
07946 1C46                        00            .byte	0
07947 1C47                        00            .byte	0
07948 1C48                        00            .byte	0
07949 1C49                        00            .byte	0
07950 1C4A                        00            .byte	0
07951 1C4B                        00            .byte	0
07952                                           ! 1040  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
07953 1C4C                        00            .byte	0
07954 1C4D                        00            .byte	0
07955 1C4E                        00            .byte	0
07956 1C4F                        00            .byte	0
07957 1C50                        00            .byte	0
07958 1C51                        00            .byte	0
07959 1C52                        00            .byte	0
07960 1C53                        00            .byte	0
07961 1C54                        00            .byte	0
07962 1C55                        00            .byte	0
07963 1C56                        00            .byte	0
07964 1C57                        00            .byte	0
07965 1C58                        FF            .byte	$FF
07966 1C59                        00            .byte	0
07967                                           ! 1041  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07968 1C5A                        30            .byte	$30
07969 1C5B                        30            .byte	$30
07970 1C5C                        18            .byte	$18
07971 1C5D                        00            .byte	0
07972 1C5E                        00            .byte	0
07973 1C5F                        00            .byte	0
07974 1C60                        00            .byte	0
07975 1C61                        00            .byte	0
07976 1C62                        00            .byte	0
07977 1C63                        00            .byte	0
07978 1C64                        00            .byte	0
07979 1C65                        00            .byte	0
07980 1C66                        00            .byte	0
07981 1C67                        00            .byte	0
07982                                           ! 1042  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07983 1C68                        00            .byte	0
07984 1C69                        00            .byte	0
07985 1C6A                        00            .byte	0
07986 1C6B                        00            .byte	0
07987 1C6C                        00            .byte	0
07988 1C6D                        78            .byte	$78
07989 1C6E                        0C            .byte	$C
07990 1C6F                        7C            .byte	$7C
07991 1C70                        CC            .byte	$CC
07992 1C71                        CC            .byte	$CC
07993 1C72                        76            .byte	$76
07994 1C73                        00            .byte	0
07995 1C74                        00            .byte	0
07996 1C75                        00            .byte	0
07997                                           ! 1043  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
07998 1C76                        00            .byte	0
07999 1C77                        00            .byte	0
08000 1C78                        E0            .byte	$E0
08001 1C79                        60            .byte	$60
08002 1C7A                        60            .byte	$60
08003 1C7B                        78            .byte	$78
08004 1C7C                        6C            .byte	$6C
08005 1C7D                        66            .byte	$66
08006 1C7E                        66            .byte	$66
08007 1C7F                        66            .byte	$66
08008 1C80                        7C            .byte	$7C
08009 1C81                        00            .byte	0
08010 1C82                        00            .byte	0
08011 1C83                        00            .byte	0
08012                                           ! 1044  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08013 1C84                        00            .byte	0
08014 1C85                        00            .byte	0
08015 1C86                        00            .byte	0
08016 1C87                        00            .byte	0
08017 1C88                        00            .byte	0
08018 1C89                        7C            .byte	$7C
08019 1C8A                        C6            .byte	$C6
08020 1C8B                        C0            .byte	$C0
08021 1C8C                        C0            .byte	$C0
08022 1C8D                        C6            .byte	$C6
08023 1C8E                        7C            .byte	$7C
08024 1C8F                        00            .byte	0
08025 1C90                        00            .byte	0
08026 1C91                        00            .byte	0
08027                                           ! 1045  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08028 1C92                        00            .byte	0
08029 1C93                        00            .byte	0
08030 1C94                        1C            .byte	$1C
08031 1C95                        0C            .byte	$C
08032 1C96                        0C            .byte	$C
08033 1C97                        3C            .byte	$3C
08034 1C98                        6C            .byte	$6C
08035 1C99                        CC            .byte	$CC
08036 1C9A                        CC            .byte	$CC
08037 1C9B                        CC            .byte	$CC
08038 1C9C                        76            .byte	$76
08039 1C9D                        00            .byte	0
08040 1C9E                        00            .byte	0
08041 1C9F                        00            .byte	0
08042                                           ! 1046  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08043 1CA0                        00            .byte	0
08044 1CA1                        00            .byte	0
08045 1CA2                        00            .byte	0
08046 1CA3                        00            .byte	0
08047 1CA4                        00            .byte	0
08048 1CA5                        7C            .byte	$7C
08049 1CA6                        C6            .byte	$C6
08050 1CA7                        FE            .byte	$FE
08051 1CA8                        C0            .byte	$C0
08052 1CA9                        C6            .byte	$C6
08053 1CAA                        7C            .byte	$7C
08054 1CAB                        00            .byte	0
08055 1CAC                        00            .byte	0
08056 1CAD                        00            .byte	0
08057                                           ! 1047  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08058 1CAE                        00            .byte	0
08059 1CAF                        00            .byte	0
08060 1CB0                        38            .byte	$38
08061 1CB1                        6C            .byte	$6C
08062 1CB2                        64            .byte	$64
08063 1CB3                        60            .byte	$60
08064 1CB4                        F0            .byte	$F0
08065 1CB5                        60            .byte	$60
08066 1CB6                        60            .byte	$60
08067 1CB7                        60            .byte	$60
08068 1CB8                        F0            .byte	$F0
08069 1CB9                        00            .byte	0
08070 1CBA                        00            .byte	0
08071 1CBB                        00            .byte	0
08072                                           ! 1048  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0
08073 1CBC                        00            .byte	0
08074 1CBD                        00            .byte	0
08075 1CBE                        00            .byte	0
08076 1CBF                        00            .byte	0
08077 1CC0                        00            .byte	0
08078 1CC1                        76            .byte	$76
08079 1CC2                        CC            .byte	$CC
08080 1CC3                        CC            .byte	$CC
08081 1CC4                        CC            .byte	$CC
08082 1CC5                        7C            .byte	$7C
08083                                           ! 1048 x0c, 0xcc, 0x78, 0x00,
08084 1CC6                        0C            .byte	$C
08085 1CC7                        CC            .byte	$CC
08086 1CC8                        78            .byte	$78
08087 1CC9                        00            .byte	0
08088                                           ! 1049  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08089 1CCA                        00            .byte	0
08090 1CCB                        00            .byte	0
08091 1CCC                        E0            .byte	$E0
08092 1CCD                        60            .byte	$60
08093 1CCE                        60            .byte	$60
08094 1CCF                        6C            .byte	$6C
08095 1CD0                        76            .byte	$76
08096 1CD1                        66            .byte	$66
08097 1CD2                        66            .byte	$66
08098 1CD3                        66            .byte	$66
08099 1CD4                        E6            .byte	$E6
08100 1CD5                        00            .byte	0
08101 1CD6                        00            .byte	0
08102 1CD7                        00            .byte	0
08103                                           ! 1050  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08104 1CD8                        00            .byte	0
08105 1CD9                        00            .byte	0
08106 1CDA                        18            .byte	$18
08107 1CDB                        18            .byte	$18
08108 1CDC                        00            .byte	0
08109 1CDD                        38            .byte	$38
08110 1CDE                        18            .byte	$18
08111 1CDF                        18            .byte	$18
08112 1CE0                        18            .byte	$18
08113 1CE1                        18            .byte	$18
08114 1CE2                        3C            .byte	$3C
08115 1CE3                        00            .byte	0
08116 1CE4                        00            .byte	0
08117 1CE5                        00            .byte	0
08118                                           ! 1051  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08119 1CE6                        00            .byte	0
08120 1CE7                        00            .byte	0
08121 1CE8                        06            .byte	6
08122 1CE9                        06            .byte	6
08123 1CEA                        00            .byte	0
08124 1CEB                        0E            .byte	$E
08125 1CEC                        06            .byte	6
08126 1CED                        06            .byte	6
08127 1CEE                        06            .byte	6
08128 1CEF                        06            .byte	6
08129 1CF0                        66            .byte	$66
08130 1CF1                        66            .byte	$66
08131 1CF2                        3C            .byte	$3C
08132 1CF3                        00            .byte	0
08133                                           ! 1052  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08134 1CF4                        00            .byte	0
08135 1CF5                        00            .byte	0
08136 1CF6                        E0            .byte	$E0
08137 1CF7                        60            .byte	$60
08138 1CF8                        60            .byte	$60
08139 1CF9                        66            .byte	$66
08140 1CFA                        6C            .byte	$6C
08141 1CFB                        78            .byte	$78
08142 1CFC                        6C            .byte	$6C
08143 1CFD                        66            .byte	$66
08144 1CFE                        E6            .byte	$E6
08145 1CFF                        00            .byte	0
08146 1D00                        00            .byte	0
08147 1D01                        00            .byte	0
08148                                           ! 1053  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08149 1D02                        00            .byte	0
08150 1D03                        00            .byte	0
08151 1D04                        38            .byte	$38
08152 1D05                        18            .byte	$18
08153 1D06                        18            .byte	$18
08154 1D07                        18            .byte	$18
08155 1D08                        18            .byte	$18
08156 1D09                        18            .byte	$18
08157 1D0A                        18            .byte	$18
08158 1D0B                        18            .byte	$18
08159 1D0C                        3C            .byte	$3C
08160 1D0D                        00            .byte	0
08161 1D0E                        00            .byte	0
08162 1D0F                        00            .byte	0
08163                                           ! 1054  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08164 1D10                        00            .byte	0
08165 1D11                        00            .byte	0
08166 1D12                        00            .byte	0
08167 1D13                        00            .byte	0
08168 1D14                        00            .byte	0
08169 1D15                        EC            .byte	$EC
08170 1D16                        FE            .byte	$FE
08171 1D17                        D6            .byte	$D6
08172 1D18                        D6            .byte	$D6
08173 1D19                        D6            .byte	$D6
08174 1D1A                        C6            .byte	$C6
08175 1D1B                        00            .byte	0
08176 1D1C                        00            .byte	0
08177 1D1D                        00            .byte	0
08178                                           ! 1055  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08179 1D1E                        00            .byte	0
08180 1D1F                        00            .byte	0
08181 1D20                        00            .byte	0
08182 1D21                        00            .byte	0
08183 1D22                        00            .byte	0
08184 1D23                        DC            .byte	$DC
08185 1D24                        66            .byte	$66
08186 1D25                        66            .byte	$66
08187 1D26                        66            .byte	$66
08188 1D27                        66            .byte	$66
08189 1D28                        66            .byte	$66
08190 1D29                        00            .byte	0
08191 1D2A                        00            .byte	0
08192 1D2B                        00            .byte	0
08193                                           ! 1056  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08194 1D2C                        00            .byte	0
08195 1D2D                        00            .byte	0
08196 1D2E                        00            .byte	0
08197 1D2F                        00            .byte	0
08198 1D30                        00            .byte	0
08199 1D31                        7C            .byte	$7C
08200 1D32                        C6            .byte	$C6
08201 1D33                        C6            .byte	$C6
08202 1D34                        C6            .byte	$C6
08203 1D35                        C6            .byte	$C6
08204 1D36                        7C            .byte	$7C
08205 1D37                        00            .byte	0
08206 1D38                        00            .byte	0
08207 1D39                        00            .byte	0
08208                                           ! 1057  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08209 1D3A                        00            .byte	0
08210 1D3B                        00            .byte	0
08211 1D3C                        00            .byte	0
08212 1D3D                        00            .byte	0
08213 1D3E                        00            .byte	0
08214 1D3F                        DC            .byte	$DC
08215 1D40                        66            .byte	$66
08216 1D41                        66            .byte	$66
08217 1D42                        66            .byte	$66
08218 1D43                        7C            .byte	$7C
08219 1D44                        60            .byte	$60
08220 1D45                        60            .byte	$60
08221 1D46                        F0            .byte	$F0
08222 1D47                        00            .byte	0
08223                                           ! 1058  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08224 1D48                        00            .byte	0
08225 1D49                        00            .byte	0
08226 1D4A                        00            .byte	0
08227 1D4B                        00            .byte	0
08228 1D4C                        00            .byte	0
08229 1D4D                        76            .byte	$76
08230 1D4E                        CC            .byte	$CC
08231 1D4F                        CC            .byte	$CC
08232 1D50                        CC            .byte	$CC
08233 1D51                        7C            .byte	$7C
08234 1D52                        0C            .byte	$C
08235 1D53                        0C            .byte	$C
08236 1D54                        1E            .byte	$1E
08237 1D55                        00            .byte	0
08238                                           ! 1059  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08239 1D56                        00            .byte	0
08240 1D57                        00            .byte	0
08241 1D58                        00            .byte	0
08242 1D59                        00            .byte	0
08243 1D5A                        00            .byte	0
08244 1D5B                        DC            .byte	$DC
08245 1D5C                        76            .byte	$76
08246 1D5D                        66            .byte	$66
08247 1D5E                        60            .byte	$60
08248 1D5F                        60            .byte	$60
08249 1D60                        F0            .byte	$F0
08250 1D61                        00            .byte	0
08251 1D62                        00            .byte	0
08252 1D63                        00            .byte	0
08253                                           ! 1060  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08254 1D64                        00            .byte	0
08255 1D65                        00            .byte	0
08256 1D66                        00            .byte	0
08257 1D67                        00            .byte	0
08258 1D68                        00            .byte	0
08259 1D69                        7C            .byte	$7C
08260 1D6A                        C6            .byte	$C6
08261 1D6B                        70            .byte	$70
08262 1D6C                        1C            .byte	$1C
08263 1D6D                        C6            .byte	$C6
08264 1D6E                        7C            .byte	$7C
08265 1D6F                        00            .byte	0
08266 1D70                        00            .byte	0
08267 1D71                        00            .byte	0
08268                                           ! 1061  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08269 1D72                        00            .byte	0
08270 1D73                        00            .byte	0
08271 1D74                        10            .byte	$10
08272 1D75                        30            .byte	$30
08273 1D76                        30            .byte	$30
08274 1D77                        FC            .byte	$FC
08275 1D78                        30            .byte	$30
08276 1D79                        30            .byte	$30
08277 1D7A                        30            .byte	$30
08278 1D7B                        36            .byte	$36
08279 1D7C                        1C            .byte	$1C
08280 1D7D                        00            .byte	0
08281 1D7E                        00            .byte	0
08282 1D7F                        00            .byte	0
08283                                           ! 1062  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08284 1D80                        00            .byte	0
08285 1D81                        00            .byte	0
08286 1D82                        00            .byte	0
08287 1D83                        00            .byte	0
08288 1D84                        00            .byte	0
08289 1D85                        CC            .byte	$CC
08290 1D86                        CC            .byte	$CC
08291 1D87                        CC            .byte	$CC
08292 1D88                        CC            .byte	$CC
08293 1D89                        CC            .byte	$CC
08294 1D8A                        76            .byte	$76
08295 1D8B                        00            .byte	0
08296 1D8C                        00            .byte	0
08297 1D8D                        00            .byte	0
08298                                           ! 1063  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08299 1D8E                        00            .byte	0
08300 1D8F                        00            .byte	0
08301 1D90                        00            .byte	0
08302 1D91                        00            .byte	0
08303 1D92                        00            .byte	0
08304 1D93                        66            .byte	$66
08305 1D94                        66            .byte	$66
08306 1D95                        66            .byte	$66
08307 1D96                        66            .byte	$66
08308 1D97                        3C            .byte	$3C
08309 1D98                        18            .byte	$18
08310 1D99                        00            .byte	0
08311 1D9A                        00            .byte	0
08312 1D9B                        00            .byte	0
08313                                           ! 1064  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08314 1D9C                        00            .byte	0
08315 1D9D                        00            .byte	0
08316 1D9E                        00            .byte	0
08317 1D9F                        00            .byte	0
08318 1DA0                        00            .byte	0
08319 1DA1                        C6            .byte	$C6
08320 1DA2                        C6            .byte	$C6
08321 1DA3                        D6            .byte	$D6
08322 1DA4                        D6            .byte	$D6
08323 1DA5                        FE            .byte	$FE
08324 1DA6                        6C            .byte	$6C
08325 1DA7                        00            .byte	0
08326 1DA8                        00            .byte	0
08327 1DA9                        00            .byte	0
08328                                           ! 1065  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08329 1DAA                        00            .byte	0
08330 1DAB                        00            .byte	0
08331 1DAC                        00            .byte	0
08332 1DAD                        00            .byte	0
08333 1DAE                        00            .byte	0
08334 1DAF                        C6            .byte	$C6
08335 1DB0                        6C            .byte	$6C
08336 1DB1                        38            .byte	$38
08337 1DB2                        38            .byte	$38
08338 1DB3                        6C            .byte	$6C
08339 1DB4                        C6            .byte	$C6
08340 1DB5                        00            .byte	0
08341 1DB6                        00            .byte	0
08342 1DB7                        00            .byte	0
08343                                           ! 1066  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08344 1DB8                        00            .byte	0
08345 1DB9                        00            .byte	0
08346 1DBA                        00            .byte	0
08347 1DBB                        00            .byte	0
08348 1DBC                        00            .byte	0
08349 1DBD                        C6            .byte	$C6
08350 1DBE                        C6            .byte	$C6
08351 1DBF                        C6            .byte	$C6
08352 1DC0                        C6            .byte	$C6
08353 1DC1                        7E            .byte	$7E
08354 1DC2                        06            .byte	6
08355 1DC3                        0C            .byte	$C
08356 1DC4                        F8            .byte	$F8
08357 1DC5                        00            .byte	0
08358                                           ! 1067  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08359 1DC6                        00            .byte	0
08360 1DC7                        00            .byte	0
08361 1DC8                        00            .byte	0
08362 1DC9                        00            .byte	0
08363 1DCA                        00            .byte	0
08364 1DCB                        FE            .byte	$FE
08365 1DCC                        CC            .byte	$CC
08366 1DCD                        18            .byte	$18
08367 1DCE                        30            .byte	$30
08368 1DCF                        66            .byte	$66
08369 1DD0                        FE            .byte	$FE
08370 1DD1                        00            .byte	0
08371 1DD2                        00            .byte	0
08372 1DD3                        00            .byte	0
08373                                           ! 1068  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08374 1DD4                        00            .byte	0
08375 1DD5                        00            .byte	0
08376 1DD6                        0E            .byte	$E
08377 1DD7                        18            .byte	$18
08378 1DD8                        18            .byte	$18
08379 1DD9                        18            .byte	$18
08380 1DDA                        70            .byte	$70
08381 1DDB                        18            .byte	$18
08382 1DDC                        18            .byte	$18
08383 1DDD                        18            .byte	$18
08384 1DDE                        0E            .byte	$E
08385 1DDF                        00            .byte	0
08386 1DE0                        00            .byte	0
08387 1DE1                        00            .byte	0
08388                                           ! 1069  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08389 1DE2                        00            .byte	0
08390 1DE3                        00            .byte	0
08391 1DE4                        18            .byte	$18
08392 1DE5                        18            .byte	$18
08393 1DE6                        18            .byte	$18
08394 1DE7                        18            .byte	$18
08395 1DE8                        00            .byte	0
08396 1DE9                        18            .byte	$18
08397 1DEA                        18            .byte	$18
08398 1DEB                        18            .byte	$18
08399 1DEC                        18            .byte	$18
08400 1DED                        00            .byte	0
08401 1DEE                        00            .byte	0
08402 1DEF                        00            .byte	0
08403                                           ! 1070  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08404 1DF0                        00            .byte	0
08405 1DF1                        00            .byte	0
08406 1DF2                        70            .byte	$70
08407 1DF3                        18            .byte	$18
08408 1DF4                        18            .byte	$18
08409 1DF5                        18            .byte	$18
08410 1DF6                        0E            .byte	$E
08411 1DF7                        18            .byte	$18
08412 1DF8                        18            .byte	$18
08413 1DF9                        18            .byte	$18
08414 1DFA                        70            .byte	$70
08415 1DFB                        00            .byte	0
08416 1DFC                        00            .byte	0
08417 1DFD                        00            .byte	0
08418                                           ! 1071  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08419 1DFE                        00            .byte	0
08420 1DFF                        00            .byte	0
08421 1E00                        76            .byte	$76
08422 1E01                        DC            .byte	$DC
08423 1E02                        00            .byte	0
08424 1E03                        00            .byte	0
08425 1E04                        00            .byte	0
08426 1E05                        00            .byte	0
08427 1E06                        00            .byte	0
08428 1E07                        00            .byte	0
08429 1E08                        00            .byte	0
08430 1E09                        00            .byte	0
08431 1E0A                        00            .byte	0
08432 1E0B                        00            .byte	0
08433                                           ! 1072  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x0
08434 1E0C                        00            .byte	0
08435 1E0D                        00            .byte	0
08436 1E0E                        00            .byte	0
08437 1E0F                        00            .byte	0
08438 1E10                        10            .byte	$10
08439 1E11                        38            .byte	$38
08440 1E12                        6C            .byte	$6C
08441 1E13                        C6            .byte	$C6
08442 1E14                        C6            .byte	$C6
08443 1E15                        FE            .byte	$FE
08444 1E16                        00            .byte	0
08445                                           ! 1072 0, 0x00, 0x00,
08446 1E17                        00            .byte	0
08447 1E18                        00            .byte	0
08448 1E19                        00            .byte	0
08449                                           ! 1073  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08450 1E1A                        00            .byte	0
08451 1E1B                        00            .byte	0
08452 1E1C                        3C            .byte	$3C
08453 1E1D                        66            .byte	$66
08454 1E1E                        C2            .byte	$C2
08455 1E1F                        C0            .byte	$C0
08456 1E20                        C0            .byte	$C0
08457 1E21                        C2            .byte	$C2
08458 1E22                        66            .byte	$66
08459 1E23                        3C            .byte	$3C
08460 1E24                        0C            .byte	$C
08461 1E25                        06            .byte	6
08462 1E26                        7C            .byte	$7C
08463 1E27                        00            .byte	0
08464                                           ! 1074  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08465 1E28                        00            .byte	0
08466 1E29                        00            .byte	0
08467 1E2A                        CC            .byte	$CC
08468 1E2B                        CC            .byte	$CC
08469 1E2C                        00            .byte	0
08470 1E2D                        CC            .byte	$CC
08471 1E2E                        CC            .byte	$CC
08472 1E2F                        CC            .byte	$CC
08473 1E30                        CC            .byte	$CC
08474 1E31                        CC            .byte	$CC
08475 1E32                        76            .byte	$76
08476 1E33                        00            .byte	0
08477 1E34                        00            .byte	0
08478 1E35                        00            .byte	0
08479                                           ! 1075  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08480 1E36                        00            .byte	0
08481 1E37                        0C            .byte	$C
08482 1E38                        18            .byte	$18
08483 1E39                        30            .byte	$30
08484 1E3A                        00            .byte	0
08485 1E3B                        7C            .byte	$7C
08486 1E3C                        C6            .byte	$C6
08487 1E3D                        FE            .byte	$FE
08488 1E3E                        C0            .byte	$C0
08489 1E3F                        C6            .byte	$C6
08490 1E40                        7C            .byte	$7C
08491 1E41                        00            .byte	0
08492 1E42                        00            .byte	0
08493 1E43                        00            .byte	0
08494                                           ! 1076  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08495 1E44                        00            .byte	0
08496 1E45                        10            .byte	$10
08497 1E46                        38            .byte	$38
08498 1E47                        6C            .byte	$6C
08499 1E48                        00            .byte	0
08500 1E49                        78            .byte	$78
08501 1E4A                        0C            .byte	$C
08502 1E4B                        7C            .byte	$7C
08503 1E4C                        CC            .byte	$CC
08504 1E4D                        CC            .byte	$CC
08505 1E4E                        76            .byte	$76
08506 1E4F                        00            .byte	0
08507 1E50                        00            .byte	0
08508 1E51                        00            .byte	0
08509                                           ! 1077  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08510 1E52                        00            .byte	0
08511 1E53                        00            .byte	0
08512 1E54                        CC            .byte	$CC
08513 1E55                        CC            .byte	$CC
08514 1E56                        00            .byte	0
08515 1E57                        78            .byte	$78
08516 1E58                        0C            .byte	$C
08517 1E59                        7C            .byte	$7C
08518 1E5A                        CC            .byte	$CC
08519 1E5B                        CC            .byte	$CC
08520 1E5C                        76            .byte	$76
08521 1E5D                        00            .byte	0
08522 1E5E                        00            .byte	0
08523 1E5F                        00            .byte	0
08524                                           ! 1078  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08525 1E60                        00            .byte	0
08526 1E61                        60            .byte	$60
08527 1E62                        30            .byte	$30
08528 1E63                        18            .byte	$18
08529 1E64                        00            .byte	0
08530 1E65                        78            .byte	$78
08531 1E66                        0C            .byte	$C
08532 1E67                        7C            .byte	$7C
08533 1E68                        CC            .byte	$CC
08534 1E69                        CC            .byte	$CC
08535 1E6A                        76            .byte	$76
08536 1E6B                        00            .byte	0
08537 1E6C                        00            .byte	0
08538 1E6D                        00            .byte	0
08539                                           ! 1079  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08540 1E6E                        00            .byte	0
08541 1E6F                        38            .byte	$38
08542 1E70                        6C            .byte	$6C
08543 1E71                        38            .byte	$38
08544 1E72                        00            .byte	0
08545 1E73                        78            .byte	$78
08546 1E74                        0C            .byte	$C
08547 1E75                        7C            .byte	$7C
08548 1E76                        CC            .byte	$CC
08549 1E77                        CC            .byte	$CC
08550 1E78                        76            .byte	$76
08551 1E79                        00            .byte	0
08552 1E7A                        00            .byte	0
08553 1E7B                        00            .byte	0
08554                                           ! 1080  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08555 1E7C                        00            .byte	0
08556 1E7D                        00            .byte	0
08557 1E7E                        00            .byte	0
08558 1E7F                        00            .byte	0
08559 1E80                        3C            .byte	$3C
08560 1E81                        66            .byte	$66
08561 1E82                        60            .byte	$60
08562 1E83                        66            .byte	$66
08563 1E84                        3C            .byte	$3C
08564 1E85                        0C            .byte	$C
08565 1E86                        06            .byte	6
08566 1E87                        3C            .byte	$3C
08567 1E88                        00            .byte	0
08568 1E89                        00            .byte	0
08569                                           ! 1081  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08570 1E8A                        00            .byte	0
08571 1E8B                        10            .byte	$10
08572 1E8C                        38            .byte	$38
08573 1E8D                        6C            .byte	$6C
08574 1E8E                        00            .byte	0
08575 1E8F                        7C            .byte	$7C
08576 1E90                        C6            .byte	$C6
08577 1E91                        FE            .byte	$FE
08578 1E92                        C0            .byte	$C0
08579 1E93                        C6            .byte	$C6
08580 1E94                        7C            .byte	$7C
08581 1E95                        00            .byte	0
08582 1E96                        00            .byte	0
08583 1E97                        00            .byte	0
08584                                           ! 1082  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08585 1E98                        00            .byte	0
08586 1E99                        00            .byte	0
08587 1E9A                        CC            .byte	$CC
08588 1E9B                        CC            .byte	$CC
08589 1E9C                        00            .byte	0
08590 1E9D                        7C            .byte	$7C
08591 1E9E                        C6            .byte	$C6
08592 1E9F                        FE            .byte	$FE
08593 1EA0                        C0            .byte	$C0
08594 1EA1                        C6            .byte	$C6
08595 1EA2                        7C            .byte	$7C
08596 1EA3                        00            .byte	0
08597 1EA4                        00            .byte	0
08598 1EA5                        00            .byte	0
08599                                           ! 1083  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08600 1EA6                        00            .byte	0
08601 1EA7                        60            .byte	$60
08602 1EA8                        30            .byte	$30
08603 1EA9                        18            .byte	$18
08604 1EAA                        00            .byte	0
08605 1EAB                        7C            .byte	$7C
08606 1EAC                        C6            .byte	$C6
08607 1EAD                        FE            .byte	$FE
08608 1EAE                        C0            .byte	$C0
08609 1EAF                        C6            .byte	$C6
08610 1EB0                        7C            .byte	$7C
08611 1EB1                        00            .byte	0
08612 1EB2                        00            .byte	0
08613 1EB3                        00            .byte	0
08614                                           ! 1084  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08615 1EB4                        00            .byte	0
08616 1EB5                        00            .byte	0
08617 1EB6                        66            .byte	$66
08618 1EB7                        66            .byte	$66
08619 1EB8                        00            .byte	0
08620 1EB9                        38            .byte	$38
08621 1EBA                        18            .byte	$18
08622 1EBB                        18            .byte	$18
08623 1EBC                        18            .byte	$18
08624 1EBD                        18            .byte	$18
08625 1EBE                        3C            .byte	$3C
08626 1EBF                        00            .byte	0
08627 1EC0                        00            .byte	0
08628 1EC1                        00            .byte	0
08629                                           ! 1085  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08630 1EC2                        00            .byte	0
08631 1EC3                        18            .byte	$18
08632 1EC4                        3C            .byte	$3C
08633 1EC5                        66            .byte	$66
08634 1EC6                        00            .byte	0
08635 1EC7                        38            .byte	$38
08636 1EC8                        18            .byte	$18
08637 1EC9                        18            .byte	$18
08638 1ECA                        18            .byte	$18
08639 1ECB                        18            .byte	$18
08640 1ECC                        3C            .byte	$3C
08641 1ECD                        00            .byte	0
08642 1ECE                        00            .byte	0
08643 1ECF                        00            .byte	0
08644                                           ! 1086  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08645 1ED0                        00            .byte	0
08646 1ED1                        60            .byte	$60
08647 1ED2                        30            .byte	$30
08648 1ED3                        18            .byte	$18
08649 1ED4                        00            .byte	0
08650 1ED5                        38            .byte	$38
08651 1ED6                        18            .byte	$18
08652 1ED7                        18            .byte	$18
08653 1ED8                        18            .byte	$18
08654 1ED9                        18            .byte	$18
08655 1EDA                        3C            .byte	$3C
08656 1EDB                        00            .byte	0
08657 1EDC                        00            .byte	0
08658 1EDD                        00            .byte	0
08659                                           ! 1087  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08660 1EDE                        00            .byte	0
08661 1EDF                        C6            .byte	$C6
08662 1EE0                        C6            .byte	$C6
08663 1EE1                        10            .byte	$10
08664 1EE2                        38            .byte	$38
08665 1EE3                        6C            .byte	$6C
08666 1EE4                        C6            .byte	$C6
08667 1EE5                        C6            .byte	$C6
08668 1EE6                        FE            .byte	$FE
08669 1EE7                        C6            .byte	$C6
08670 1EE8                        C6            .byte	$C6
08671 1EE9                        00            .byte	0
08672 1EEA                        00            .byte	0
08673 1EEB                        00            .byte	0
08674                                           ! 1088  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08675 1EEC                        38            .byte	$38
08676 1EED                        6C            .byte	$6C
08677 1EEE                        38            .byte	$38
08678 1EEF                        00            .byte	0
08679 1EF0                        38            .byte	$38
08680 1EF1                        6C            .byte	$6C
08681 1EF2                        C6            .byte	$C6
08682 1EF3                        C6            .byte	$C6
08683 1EF4                        FE            .byte	$FE
08684 1EF5                        C6            .byte	$C6
08685 1EF6                        C6            .byte	$C6
08686 1EF7                        00            .byte	0
08687 1EF8                        00            .byte	0
08688 1EF9                        00            .byte	0
08689                                           ! 1089  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
08690 1EFA                        18            .byte	$18
08691 1EFB                        30            .byte	$30
08692 1EFC                        60            .byte	$60
08693 1EFD                        00            .byte	0
08694 1EFE                        FE            .byte	$FE
08695 1EFF                        66            .byte	$66
08696 1F00                        60            .byte	$60
08697 1F01                        7C            .byte	$7C
08698 1F02                        60            .byte	$60
08699 1F03                        66            .byte	$66
08700 1F04                        FE            .byte	$FE
08701 1F05                        00            .byte	0
08702 1F06                        00            .byte	0
08703 1F07                        00            .byte	0
08704                                           ! 1090  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
08705 1F08                        00            .byte	0
08706 1F09                        00            .byte	0
08707 1F0A                        00            .byte	0
08708 1F0B                        00            .byte	0
08709 1F0C                        CC            .byte	$CC
08710 1F0D                        76            .byte	$76
08711 1F0E                        36            .byte	$36
08712 1F0F                        7E            .byte	$7E
08713 1F10                        D8            .byte	$D8
08714 1F11                        D8            .byte	$D8
08715 1F12                        6E            .byte	$6E
08716 1F13                        00            .byte	0
08717 1F14                        00            .byte	0
08718 1F15                        00            .byte	0
08719                                           ! 1091  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
08720 1F16                        00            .byte	0
08721 1F17                        00            .byte	0
08722 1F18                        3E            .byte	$3E
08723 1F19                        6C            .byte	$6C
08724 1F1A                        CC            .byte	$CC
08725 1F1B                        CC            .byte	$CC
08726 1F1C                        FE            .byte	$FE
08727 1F1D                        CC            .byte	$CC
08728 1F1E                        CC            .byte	$CC
08729 1F1F                        CC            .byte	$CC
08730 1F20                        CE            .byte	$CE
08731 1F21                        00            .byte	0
08732 1F22                        00            .byte	0
08733 1F23                        00            .byte	0
08734                                           ! 1092  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08735 1F24                        00            .byte	0
08736 1F25                        10            .byte	$10
08737 1F26                        38            .byte	$38
08738 1F27                        6C            .byte	$6C
08739 1F28                        00            .byte	0
08740 1F29                        7C            .byte	$7C
08741 1F2A                        C6            .byte	$C6
08742 1F2B                        C6            .byte	$C6
08743 1F2C                        C6            .byte	$C6
08744 1F2D                        C6            .byte	$C6
08745 1F2E                        7C            .byte	$7C
08746 1F2F                        00            .byte	0
08747 1F30                        00            .byte	0
08748 1F31                        00            .byte	0
08749                                           ! 1093  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08750 1F32                        00            .byte	0
08751 1F33                        00            .byte	0
08752 1F34                        C6            .byte	$C6
08753 1F35                        C6            .byte	$C6
08754 1F36                        00            .byte	0
08755 1F37                        7C            .byte	$7C
08756 1F38                        C6            .byte	$C6
08757 1F39                        C6            .byte	$C6
08758 1F3A                        C6            .byte	$C6
08759 1F3B                        C6            .byte	$C6
08760 1F3C                        7C            .byte	$7C
08761 1F3D                        00            .byte	0
08762 1F3E                        00            .byte	0
08763 1F3F                        00            .byte	0
08764                                           ! 1094  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08765 1F40                        00            .byte	0
08766 1F41                        60            .byte	$60
08767 1F42                        30            .byte	$30
08768 1F43                        18            .byte	$18
08769 1F44                        00            .byte	0
08770 1F45                        7C            .byte	$7C
08771 1F46                        C6            .byte	$C6
08772 1F47                        C6            .byte	$C6
08773 1F48                        C6            .byte	$C6
08774 1F49                        C6            .byte	$C6
08775 1F4A                        7C            .byte	$7C
08776 1F4B                        00            .byte	0
08777 1F4C                        00            .byte	0
08778 1F4D                        00            .byte	0
08779                                           ! 1095  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08780 1F4E                        00            .byte	0
08781 1F4F                        30            .byte	$30
08782 1F50                        78            .byte	$78
08783 1F51                        CC            .byte	$CC
08784 1F52                        00            .byte	0
08785 1F53                        CC            .byte	$CC
08786 1F54                        CC            .byte	$CC
08787 1F55                        CC            .byte	$CC
08788 1F56                        CC            .byte	$CC
08789 1F57                        CC            .byte	$CC
08790 1F58                        76            .byte	$76
08791 1F59                        00            .byte	0
08792 1F5A                        00            .byte	0
08793 1F5B                        00            .byte	0
08794                                           ! 1096  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00,
08795 1F5C                        00            .byte	0
08796 1F5D                        60            .byte	$60
08797 1F5E                        30            .byte	$30
08798 1F5F                        18            .byte	$18
08799 1F60                        00            .byte	0
08800 1F61                        CC            .byte	$CC
08801 1F62                        CC            .byte	$CC
08802 1F63                        CC            .byte	$CC
08803 1F64                        CC            .byte	$CC
08804 1F65                        CC            .byte	$CC
08805 1F66                        76            .byte	$76
08806 1F67                        00            .byte	0
08807                                           ! 1096  0x00,
08808 1F68                        00            .byte	0
08809 1F69                        00            .byte	0
08810                                           ! 1097  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
08811 1F6A                        00            .byte	0
08812 1F6B                        00            .byte	0
08813 1F6C                        C6            .byte	$C6
08814 1F6D                        C6            .byte	$C6
08815 1F6E                        00            .byte	0
08816 1F6F                        C6            .byte	$C6
08817 1F70                        C6            .byte	$C6
08818 1F71                        C6            .byte	$C6
08819 1F72                        C6            .byte	$C6
08820 1F73                        7E            .byte	$7E
08821 1F74                        06            .byte	6
08822 1F75                        0C            .byte	$C
08823 1F76                        78            .byte	$78
08824 1F77                        00            .byte	0
08825                                           ! 1098  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08826 1F78                        00            .byte	0
08827 1F79                        C6            .byte	$C6
08828 1F7A                        C6            .byte	$C6
08829 1F7B                        38            .byte	$38
08830 1F7C                        6C            .byte	$6C
08831 1F7D                        C6            .byte	$C6
08832 1F7E                        C6            .byte	$C6
08833 1F7F                        C6            .byte	$C6
08834 1F80                        C6            .byte	$C6
08835 1F81                        6C            .byte	$6C
08836 1F82                        38            .byte	$38
08837 1F83                        00            .byte	0
08838 1F84                        00            .byte	0
08839 1F85                        00            .byte	0
08840                                           ! 1099  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08841 1F86                        00            .byte	0
08842 1F87                        C6            .byte	$C6
08843 1F88                        C6            .byte	$C6
08844 1F89                        00            .byte	0
08845 1F8A                        C6            .byte	$C6
08846 1F8B                        C6            .byte	$C6
08847 1F8C                        C6            .byte	$C6
08848 1F8D                        C6            .byte	$C6
08849 1F8E                        C6            .byte	$C6
08850 1F8F                        C6            .byte	$C6
08851 1F90                        7C            .byte	$7C
08852 1F91                        00            .byte	0
08853 1F92                        00            .byte	0
08854 1F93                        00            .byte	0
08855                                           ! 1100  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
08856 1F94                        00            .byte	0
08857 1F95                        18            .byte	$18
08858 1F96                        18            .byte	$18
08859 1F97                        3C            .byte	$3C
08860 1F98                        66            .byte	$66
08861 1F99                        60            .byte	$60
08862 1F9A                        60            .byte	$60
08863 1F9B                        66            .byte	$66
08864 1F9C                        3C            .byte	$3C
08865 1F9D                        18            .byte	$18
08866 1F9E                        18            .byte	$18
08867 1F9F                        00            .byte	0
08868 1FA0                        00            .byte	0
08869 1FA1                        00            .byte	0
08870                                           ! 1101  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
08871 1FA2                        00            .byte	0
08872 1FA3                        38            .byte	$38
08873 1FA4                        6C            .byte	$6C
08874 1FA5                        64            .byte	$64
08875 1FA6                        60            .byte	$60
08876 1FA7                        F0            .byte	$F0
08877 1FA8                        60            .byte	$60
08878 1FA9                        60            .byte	$60
08879 1FAA                        60            .byte	$60
08880 1FAB                        E6            .byte	$E6
08881 1FAC                        FC            .byte	$FC
08882 1FAD                        00            .byte	0
08883 1FAE                        00            .byte	0
08884 1FAF                        00            .byte	0
08885                                           ! 1102  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
08886 1FB0                        00            .byte	0
08887 1FB1                        00            .byte	0
08888 1FB2                        66            .byte	$66
08889 1FB3                        66            .byte	$66
08890 1FB4                        3C            .byte	$3C
08891 1FB5                        18            .byte	$18
08892 1FB6                        7E            .byte	$7E
08893 1FB7                        18            .byte	$18
08894 1FB8                        7E            .byte	$7E
08895 1FB9                        18            .byte	$18
08896 1FBA                        18            .byte	$18
08897 1FBB                        00            .byte	0
08898 1FBC                        00            .byte	0
08899 1FBD                        00            .byte	0
08900                                           ! 1103  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
08901 1FBE                        00            .byte	0
08902 1FBF                        F8            .byte	$F8
08903 1FC0                        CC            .byte	$CC
08904 1FC1                        CC            .byte	$CC
08905 1FC2                        F8            .byte	$F8
08906 1FC3                        C4            .byte	$C4
08907 1FC4                        CC            .byte	$CC
08908 1FC5                        DE            .byte	$DE
08909 1FC6                        CC            .byte	$CC
08910 1FC7                        CC            .byte	$CC
08911 1FC8                        C6            .byte	$C6
08912 1FC9                        00            .byte	0
08913 1FCA                        00            .byte	0
08914 1FCB                        00            .byte	0
08915                                           ! 1104  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
08916 1FCC                        00            .byte	0
08917 1FCD                        0E            .byte	$E
08918 1FCE                        1B            .byte	$1B
08919 1FCF                        18            .byte	$18
08920 1FD0                        18            .byte	$18
08921 1FD1                        18            .byte	$18
08922 1FD2                        7E            .byte	$7E
08923 1FD3                        18            .byte	$18
08924 1FD4                        18            .byte	$18
08925 1FD5                        18            .byte	$18
08926 1FD6                        18            .byte	$18
08927 1FD7                        D8            .byte	$D8
08928 1FD8                        70            .byte	$70
08929 1FD9                        00            .byte	0
08930                                           ! 1105  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08931 1FDA                        00            .byte	0
08932 1FDB                        18            .byte	$18
08933 1FDC                        30            .byte	$30
08934 1FDD                        60            .byte	$60
08935 1FDE                        00            .byte	0
08936 1FDF                        78            .byte	$78
08937 1FE0                        0C            .byte	$C
08938 1FE1                        7C            .byte	$7C
08939 1FE2                        CC            .byte	$CC
08940 1FE3                        CC            .byte	$CC
08941 1FE4                        76            .byte	$76
08942 1FE5                        00            .byte	0
08943 1FE6                        00            .byte	0
08944 1FE7                        00            .byte	0
08945                                           ! 1106  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08946 1FE8                        00            .byte	0
08947 1FE9                        0C            .byte	$C
08948 1FEA                        18            .byte	$18
08949 1FEB                        30            .byte	$30
08950 1FEC                        00            .byte	0
08951 1FED                        38            .byte	$38
08952 1FEE                        18            .byte	$18
08953 1FEF                        18            .byte	$18
08954 1FF0                        18            .byte	$18
08955 1FF1                        18            .byte	$18
08956 1FF2                        3C            .byte	$3C
08957 1FF3                        00            .byte	0
08958 1FF4                        00            .byte	0
08959 1FF5                        00            .byte	0
08960                                           ! 1107  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08961 1FF6                        00            .byte	0
08962 1FF7                        18            .byte	$18
08963 1FF8                        30            .byte	$30
08964 1FF9                        60            .byte	$60
08965 1FFA                        00            .byte	0
08966 1FFB                        7C            .byte	$7C
08967 1FFC                        C6            .byte	$C6
08968 1FFD                        C6            .byte	$C6
08969 1FFE                        C6            .byte	$C6
08970 1FFF                        C6            .byte	$C6
08971 2000                        7C            .byte	$7C
08972 2001                        00            .byte	0
08973 2002                        00            .byte	0
08974 2003                        00            .byte	0
08975                                           ! 1108  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08976 2004                        00            .byte	0
08977 2005                        18            .byte	$18
08978 2006                        30            .byte	$30
08979 2007                        60            .byte	$60
08980 2008                        00            .byte	0
08981 2009                        CC            .byte	$CC
08982 200A                        CC            .byte	$CC
08983 200B                        CC            .byte	$CC
08984 200C                        CC            .byte	$CC
08985 200D                        CC            .byte	$CC
08986 200E                        76            .byte	$76
08987 200F                        00            .byte	0
08988 2010                        00            .byte	0
08989 2011                        00            .byte	0
08990                                           ! 1109  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08991 2012                        00            .byte	0
08992 2013                        00            .byte	0
08993 2014                        76            .byte	$76
08994 2015                        DC            .byte	$DC
08995 2016                        00            .byte	0
08996 2017                        DC            .byte	$DC
08997 2018                        66            .byte	$66
08998 2019                        66            .byte	$66
08999 201A                        66            .byte	$66
09000 201B                        66            .byte	$66
09001 201C                        66            .byte	$66
09002 201D                        00            .byte	0
09003 201E                        00            .byte	0
09004 201F                        00            .byte	0
09005                                           ! 1110  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09006 2020                        76            .byte	$76
09007 2021                        DC            .byte	$DC
09008 2022                        00            .byte	0
09009 2023                        C6            .byte	$C6
09010 2024                        E6            .byte	$E6
09011 2025                        F6            .byte	$F6
09012 2026                        FE            .byte	$FE
09013 2027                        DE            .byte	$DE
09014 2028                        CE            .byte	$CE
09015 2029                        C6            .byte	$C6
09016 202A                        C6            .byte	$C6
09017 202B                        00            .byte	0
09018 202C                        00            .byte	0
09019 202D                        00            .byte	0
09020                                           ! 1111  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09021 202E                        00            .byte	0
09022 202F                        3C            .byte	$3C
09023 2030                        6C            .byte	$6C
09024 2031                        6C            .byte	$6C
09025 2032                        3E            .byte	$3E
09026 2033                        00            .byte	0
09027 2034                        7E            .byte	$7E
09028 2035                        00            .byte	0
09029 2036                        00            .byte	0
09030 2037                        00            .byte	0
09031 2038                        00            .byte	0
09032 2039                        00            .byte	0
09033 203A                        00            .byte	0
09034 203B                        00            .byte	0
09035                                           ! 1112  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09036 203C                        00            .byte	0
09037 203D                        38            .byte	$38
09038 203E                        6C            .byte	$6C
09039 203F                        6C            .byte	$6C
09040 2040                        38            .byte	$38
09041 2041                        00            .byte	0
09042 2042                        7C            .byte	$7C
09043 2043                        00            .byte	0
09044 2044                        00            .byte	0
09045 2045                        00            .byte	0
09046 2046                        00            .byte	0
09047 2047                        00            .byte	0
09048 2048                        00            .byte	0
09049 2049                        00            .byte	0
09050                                           ! 1113  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09051 204A                        00            .byte	0
09052 204B                        00            .byte	0
09053 204C                        30            .byte	$30
09054 204D                        30            .byte	$30
09055 204E                        00            .byte	0
09056 204F                        30            .byte	$30
09057 2050                        30            .byte	$30
09058 2051                        60            .byte	$60
09059 2052                        C6            .byte	$C6
09060 2053                        C6            .byte	$C6
09061 2054                        7C            .byte	$7C
09062 2055                        00            .byte	0
09063 2056                        00            .byte	0
09064 2057                        00            .byte	0
09065                                           ! 1114  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09066 2058                        00            .byte	0
09067 2059                        00            .byte	0
09068 205A                        00            .byte	0
09069 205B                        00            .byte	0
09070 205C                        00            .byte	0
09071 205D                        00            .byte	0
09072 205E                        FE            .byte	$FE
09073 205F                        C0            .byte	$C0
09074 2060                        C0            .byte	$C0
09075 2061                        C0            .byte	$C0
09076 2062                        00            .byte	0
09077 2063                        00            .byte	0
09078 2064                        00            .byte	0
09079 2065                        00            .byte	0
09080                                           ! 1115  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09081 2066                        00            .byte	0
09082 2067                        00            .byte	0
09083 2068                        00            .byte	0
09084 2069                        00            .byte	0
09085 206A                        00            .byte	0
09086 206B                        00            .byte	0
09087 206C                        FE            .byte	$FE
09088 206D                        06            .byte	6
09089 206E                        06            .byte	6
09090 206F                        06            .byte	6
09091 2070                        00            .byte	0
09092 2071                        00            .byte	0
09093 2072                        00            .byte	0
09094 2073                        00            .byte	0
09095                                           ! 1116  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09096 2074                        00            .byte	0
09097 2075                        C0            .byte	$C0
09098 2076                        C0            .byte	$C0
09099 2077                        C6            .byte	$C6
09100 2078                        CC            .byte	$CC
09101 2079                        D8            .byte	$D8
09102 207A                        30            .byte	$30
09103 207B                        60            .byte	$60
09104 207C                        DC            .byte	$DC
09105 207D                        86            .byte	$86
09106 207E                        0C            .byte	$C
09107 207F                        18            .byte	$18
09108 2080                        3E            .byte	$3E
09109 2081                        00            .byte	0
09110                                           ! 1117  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09111 2082                        00            .byte	0
09112 2083                        C0            .byte	$C0
09113 2084                        C0            .byte	$C0
09114 2085                        C6            .byte	$C6
09115 2086                        CC            .byte	$CC
09116 2087                        D8            .byte	$D8
09117 2088                        30            .byte	$30
09118 2089                        66            .byte	$66
09119 208A                        CE            .byte	$CE
09120 208B                        9E            .byte	$9E
09121 208C                        3E            .byte	$3E
09122 208D                        06            .byte	6
09123 208E                        06            .byte	6
09124 208F                        00            .byte	0
09125                                           ! 1118  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09126 2090                        00            .byte	0
09127 2091                        00            .byte	0
09128 2092                        18            .byte	$18
09129 2093                        18            .byte	$18
09130 2094                        00            .byte	0
09131 2095                        18            .byte	$18
09132 2096                        18            .byte	$18
09133 2097                        3C            .byte	$3C
09134 2098                        3C            .byte	$3C
09135 2099                        3C            .byte	$3C
09136 209A                        18            .byte	$18
09137 209B                        00            .byte	0
09138 209C                        00            .byte	0
09139 209D                        00            .byte	0
09140                                           ! 1119  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09141 209E                        00            .byte	0
09142 209F                        00            .byte	0
09143 20A0                        00            .byte	0
09144 20A1                        00            .byte	0
09145 20A2                        36            .byte	$36
09146 20A3                        6C            .byte	$6C
09147 20A4                        D8            .byte	$D8
09148 20A5                        6C            .byte	$6C
09149 20A6                        36            .byte	$36
09150 20A7                        00            .byte	0
09151 20A8                        00            .byte	0
09152 20A9                        00            .byte	0
09153 20AA                        00            .byte	0
09154 20AB                        00            .byte	0
09155                                           ! 1120  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09156 20AC                        00            .byte	0
09157 20AD                        00            .byte	0
09158 20AE                        00            .byte	0
09159 20AF                        00            .byte	0
09160 20B0                        D8            .byte	$D8
09161 20B1                        6C            .byte	$6C
09162 20B2                        36            .byte	$36
09163 20B3                        6C            .byte	$6C
09164 20B4                        D8            .byte	$D8
09165 20B5                        00            .byte	0
09166 20B6                        00            .byte	0
09167 20B7                        00            .byte	0
09168 20B8                        00            .byte	0
09169 20B9                        00            .byte	0
09170                                           ! 1121  
09171                                           ! 1121 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09172 20BA                        11            .byte	$11
09173 20BB                        44            .byte	$44
09174 20BC                        11            .byte	$11
09175 20BD                        44            .byte	$44
09176 20BE                        11            .byte	$11
09177 20BF                        44            .byte	$44
09178 20C0                        11            .byte	$11
09179 20C1                        44            .byte	$44
09180 20C2                        11            .byte	$11
09181 20C3                        44            .byte	$44
09182 20C4                        11            .byte	$11
09183 20C5                        44            .byte	$44
09184 20C6                        11            .byte	$11
09185 20C7                        44            .byte	$44
09186                                           ! 1122  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09187 20C8                        55            .byte	$55
09188 20C9                        AA            .byte	$AA
09189 20CA                        55            .byte	$55
09190 20CB                        AA            .byte	$AA
09191 20CC                        55            .byte	$55
09192 20CD                        AA            .byte	$AA
09193 20CE                        55            .byte	$55
09194 20CF                        AA            .byte	$AA
09195 20D0                        55            .byte	$55
09196 20D1                        AA            .byte	$AA
09197 20D2                        55            .byte	$55
09198 20D3                        AA            .byte	$AA
09199 20D4                        55            .byte	$55
09200 20D5                        AA            .byte	$AA
09201                                           ! 1123  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09202 20D6                        DD            .byte	$DD
09203 20D7                        77            .byte	$77
09204 20D8                        DD            .byte	$DD
09205 20D9                        77            .byte	$77
09206 20DA                        DD            .byte	$DD
09207 20DB                        77            .byte	$77
09208 20DC                        DD            .byte	$DD
09209 20DD                        77            .byte	$77
09210 20DE                        DD            .byte	$DD
09211 20DF                        77            .byte	$77
09212 20E0                        DD            .byte	$DD
09213 20E1                        77            .byte	$77
09214 20E2                        DD            .byte	$DD
09215 20E3                        77            .byte	$77
09216                                           ! 1124  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09217 20E4                        18            .byte	$18
09218 20E5                        18            .byte	$18
09219 20E6                        18            .byte	$18
09220 20E7                        18            .byte	$18
09221 20E8                        18            .byte	$18
09222 20E9                        18            .byte	$18
09223 20EA                        18            .byte	$18
09224 20EB                        18            .byte	$18
09225 20EC                        18            .byte	$18
09226 20ED                        18            .byte	$18
09227 20EE                        18            .byte	$18
09228 20EF                        18            .byte	$18
09229 20F0                        18            .byte	$18
09230 20F1                        18            .byte	$18
09231                                           ! 1125  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09232 20F2                        18            .byte	$18
09233 20F3                        18            .byte	$18
09234 20F4                        18            .byte	$18
09235 20F5                        18            .byte	$18
09236 20F6                        18            .byte	$18
09237 20F7                        18            .byte	$18
09238 20F8                        18            .byte	$18
09239 20F9                        F8            .byte	$F8
09240 20FA                        18            .byte	$18
09241 20FB                        18            .byte	$18
09242 20FC                        18            .byte	$18
09243 20FD                        18            .byte	$18
09244 20FE                        18            .byte	$18
09245 20FF                        18            .byte	$18
09246                                           ! 1126  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09247 2100                        18            .byte	$18
09248 2101                        18            .byte	$18
09249 2102                        18            .byte	$18
09250 2103                        18            .byte	$18
09251 2104                        18            .byte	$18
09252 2105                        F8            .byte	$F8
09253 2106                        18            .byte	$18
09254 2107                        F8            .byte	$F8
09255 2108                        18            .byte	$18
09256 2109                        18            .byte	$18
09257 210A                        18            .byte	$18
09258 210B                        18            .byte	$18
09259 210C                        18            .byte	$18
09260 210D                        18            .byte	$18
09261                                           ! 1127  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09262 210E                        36            .byte	$36
09263 210F                        36            .byte	$36
09264 2110                        36            .byte	$36
09265 2111                        36            .byte	$36
09266 2112                        36            .byte	$36
09267 2113                        36            .byte	$36
09268 2114                        36            .byte	$36
09269 2115                        F6            .byte	$F6
09270 2116                        36            .byte	$36
09271 2117                        36            .byte	$36
09272 2118                        36            .byte	$36
09273 2119                        36            .byte	$36
09274 211A                        36            .byte	$36
09275 211B                        36            .byte	$36
09276                                           ! 1128  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09277 211C                        00            .byte	0
09278 211D                        00            .byte	0
09279 211E                        00            .byte	0
09280 211F                        00            .byte	0
09281 2120                        00            .byte	0
09282 2121                        00            .byte	0
09283 2122                        00            .byte	0
09284 2123                        FE            .byte	$FE
09285 2124                        36            .byte	$36
09286 2125                        36            .byte	$36
09287 2126                        36            .byte	$36
09288 2127                        36            .byte	$36
09289 2128                        36            .byte	$36
09290 2129                        36            .byte	$36
09291                                           ! 1129  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09292 212A                        00            .byte	0
09293 212B                        00            .byte	0
09294 212C                        00            .byte	0
09295 212D                        00            .byte	0
09296 212E                        00            .byte	0
09297 212F                        F8            .byte	$F8
09298 2130                        18            .byte	$18
09299 2131                        F8            .byte	$F8
09300 2132                        18            .byte	$18
09301 2133                        18            .byte	$18
09302 2134                        18            .byte	$18
09303 2135                        18            .byte	$18
09304 2136                        18            .byte	$18
09305 2137                        18            .byte	$18
09306                                           ! 1130  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09307 2138                        36            .byte	$36
09308 2139                        36            .byte	$36
09309 213A                        36            .byte	$36
09310 213B                        36            .byte	$36
09311 213C                        36            .byte	$36
09312 213D                        F6            .byte	$F6
09313 213E                        06            .byte	6
09314 213F                        F6            .byte	$F6
09315 2140                        36            .byte	$36
09316 2141                        36            .byte	$36
09317 2142                        36            .byte	$36
09318 2143                        36            .byte	$36
09319 2144                        36            .byte	$36
09320 2145                        36            .byte	$36
09321                                           ! 1131  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09322 2146                        36            .byte	$36
09323 2147                        36            .byte	$36
09324 2148                        36            .byte	$36
09325 2149                        36            .byte	$36
09326 214A                        36            .byte	$36
09327 214B                        36            .byte	$36
09328 214C                        36            .byte	$36
09329 214D                        36            .byte	$36
09330 214E                        36            .byte	$36
09331 214F                        36            .byte	$36
09332 2150                        36            .byte	$36
09333 2151                        36            .byte	$36
09334 2152                        36            .byte	$36
09335 2153                        36            .byte	$36
09336                                           ! 1132  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09337 2154                        00            .byte	0
09338 2155                        00            .byte	0
09339 2156                        00            .byte	0
09340 2157                        00            .byte	0
09341 2158                        00            .byte	0
09342 2159                        FE            .byte	$FE
09343 215A                        06            .byte	6
09344 215B                        F6            .byte	$F6
09345 215C                        36            .byte	$36
09346 215D                        36            .byte	$36
09347 215E                        36            .byte	$36
09348 215F                        36            .byte	$36
09349 2160                        36            .byte	$36
09350 2161                        36            .byte	$36
09351                                           ! 1133  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09352 2162                        36            .byte	$36
09353 2163                        36            .byte	$36
09354 2164                        36            .byte	$36
09355 2165                        36            .byte	$36
09356 2166                        36            .byte	$36
09357 2167                        F6            .byte	$F6
09358 2168                        06            .byte	6
09359 2169                        FE            .byte	$FE
09360 216A                        00            .byte	0
09361 216B                        00            .byte	0
09362 216C                        00            .byte	0
09363 216D                        00            .byte	0
09364 216E                        00            .byte	0
09365 216F                        00            .byte	0
09366                                           ! 1134  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09367 2170                        36            .byte	$36
09368 2171                        36            .byte	$36
09369 2172                        36            .byte	$36
09370 2173                        36            .byte	$36
09371 2174                        36            .byte	$36
09372 2175                        36            .byte	$36
09373 2176                        36            .byte	$36
09374 2177                        FE            .byte	$FE
09375 2178                        00            .byte	0
09376 2179                        00            .byte	0
09377 217A                        00            .byte	0
09378 217B                        00            .byte	0
09379 217C                        00            .byte	0
09380 217D                        00            .byte	0
09381                                           ! 1135  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09382 217E                        18            .byte	$18
09383 217F                        18            .byte	$18
09384 2180                        18            .byte	$18
09385 2181                        18            .byte	$18
09386 2182                        18            .byte	$18
09387 2183                        F8            .byte	$F8
09388 2184                        18            .byte	$18
09389 2185                        F8            .byte	$F8
09390 2186                        00            .byte	0
09391 2187                        00            .byte	0
09392 2188                        00            .byte	0
09393 2189                        00            .byte	0
09394 218A                        00            .byte	0
09395 218B                        00            .byte	0
09396                                           ! 1136  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09397 218C                        00            .byte	0
09398 218D                        00            .byte	0
09399 218E                        00            .byte	0
09400 218F                        00            .byte	0
09401 2190                        00            .byte	0
09402 2191                        00            .byte	0
09403 2192                        00            .byte	0
09404 2193                        F8            .byte	$F8
09405 2194                        18            .byte	$18
09406 2195                        18            .byte	$18
09407 2196                        18            .byte	$18
09408 2197                        18            .byte	$18
09409 2198                        18            .byte	$18
09410 2199                        18            .byte	$18
09411                                           ! 1137  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09412 219A                        18            .byte	$18
09413 219B                        18            .byte	$18
09414 219C                        18            .byte	$18
09415 219D                        18            .byte	$18
09416 219E                        18            .byte	$18
09417 219F                        18            .byte	$18
09418 21A0                        18            .byte	$18
09419 21A1                        1F            .byte	$1F
09420 21A2                        00            .byte	0
09421 21A3                        00            .byte	0
09422 21A4                        00            .byte	0
09423 21A5                        00            .byte	0
09424 21A6                        00            .byte	0
09425 21A7                        00            .byte	0
09426                                           ! 1138  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09427 21A8                        18            .byte	$18
09428 21A9                        18            .byte	$18
09429 21AA                        18            .byte	$18
09430 21AB                        18            .byte	$18
09431 21AC                        18            .byte	$18
09432 21AD                        18            .byte	$18
09433 21AE                        18            .byte	$18
09434 21AF                        FF            .byte	$FF
09435 21B0                        00            .byte	0
09436 21B1                        00            .byte	0
09437 21B2                        00            .byte	0
09438 21B3                        00            .byte	0
09439 21B4                        00            .byte	0
09440 21B5                        00            .byte	0
09441                                           ! 1139  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09442 21B6                        00            .byte	0
09443 21B7                        00            .byte	0
09444 21B8                        00            .byte	0
09445 21B9                        00            .byte	0
09446 21BA                        00            .byte	0
09447 21BB                        00            .byte	0
09448 21BC                        00            .byte	0
09449 21BD                        FF            .byte	$FF
09450 21BE                        18            .byte	$18
09451 21BF                        18            .byte	$18
09452 21C0                        18            .byte	$18
09453 21C1                        18            .byte	$18
09454 21C2                        18            .byte	$18
09455 21C3                        18            .byte	$18
09456                                           ! 1140  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09457 21C4                        18            .byte	$18
09458 21C5                        18            .byte	$18
09459 21C6                        18            .byte	$18
09460 21C7                        18            .byte	$18
09461 21C8                        18            .byte	$18
09462 21C9                        18            .byte	$18
09463 21CA                        18            .byte	$18
09464 21CB                        1F            .byte	$1F
09465 21CC                        18            .byte	$18
09466 21CD                        18            .byte	$18
09467 21CE                        18            .byte	$18
09468 21CF                        18            .byte	$18
09469 21D0                        18            .byte	$18
09470 21D1                        18            .byte	$18
09471                                           ! 1141  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09472 21D2                        00            .byte	0
09473 21D3                        00            .byte	0
09474 21D4                        00            .byte	0
09475 21D5                        00            .byte	0
09476 21D6                        00            .byte	0
09477 21D7                        00            .byte	0
09478 21D8                        00            .byte	0
09479 21D9                        FF            .byte	$FF
09480 21DA                        00            .byte	0
09481 21DB                        00            .byte	0
09482 21DC                        00            .byte	0
09483 21DD                        00            .byte	0
09484 21DE                        00            .byte	0
09485 21DF                        00            .byte	0
09486                                           ! 1142  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09487 21E0                        18            .byte	$18
09488 21E1                        18            .byte	$18
09489 21E2                        18            .byte	$18
09490 21E3                        18            .byte	$18
09491 21E4                        18            .byte	$18
09492 21E5                        18            .byte	$18
09493 21E6                        18            .byte	$18
09494 21E7                        FF            .byte	$FF
09495 21E8                        18            .byte	$18
09496 21E9                        18            .byte	$18
09497 21EA                        18            .byte	$18
09498 21EB                        18            .byte	$18
09499 21EC                        18            .byte	$18
09500 21ED                        18            .byte	$18
09501                                           ! 1143  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09502 21EE                        18            .byte	$18
09503 21EF                        18            .byte	$18
09504 21F0                        18            .byte	$18
09505 21F1                        18            .byte	$18
09506 21F2                        18            .byte	$18
09507 21F3                        1F            .byte	$1F
09508 21F4                        18            .byte	$18
09509 21F5                        1F            .byte	$1F
09510 21F6                        18            .byte	$18
09511 21F7                        18            .byte	$18
09512 21F8                        18            .byte	$18
09513 21F9                        18            .byte	$18
09514 21FA                        18            .byte	$18
09515 21FB                        18            .byte	$18
09516                                           ! 1144  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09517 21FC                        36            .byte	$36
09518 21FD                        36            .byte	$36
09519 21FE                        36            .byte	$36
09520 21FF                        36            .byte	$36
09521 2200                        36            .byte	$36
09522 2201                        36            .byte	$36
09523 2202                        36            .byte	$36
09524 2203                        37            .byte	$37
09525 2204                        36            .byte	$36
09526 2205                        36            .byte	$36
09527 2206                        36            .byte	$36
09528 2207                        36            .byte	$36
09529 2208                        36            .byte	$36
09530 2209                        36            .byte	$36
09531                                           ! 1145  0x36, 0x
09532 220A                        36            .byte	$36
09533                                           ! 1145 36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09534 220B                        36            .byte	$36
09535 220C                        36            .byte	$36
09536 220D                        36            .byte	$36
09537 220E                        36            .byte	$36
09538 220F                        37            .byte	$37
09539 2210                        30            .byte	$30
09540 2211                        3F            .byte	$3F
09541 2212                        00            .byte	0
09542 2213                        00            .byte	0
09543 2214                        00            .byte	0
09544 2215                        00            .byte	0
09545 2216                        00            .byte	0
09546 2217                        00            .byte	0
09547                                           ! 1146  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09548 2218                        00            .byte	0
09549 2219                        00            .byte	0
09550 221A                        00            .byte	0
09551 221B                        00            .byte	0
09552 221C                        00            .byte	0
09553 221D                        3F            .byte	$3F
09554 221E                        30            .byte	$30
09555 221F                        37            .byte	$37
09556 2220                        36            .byte	$36
09557 2221                        36            .byte	$36
09558 2222                        36            .byte	$36
09559 2223                        36            .byte	$36
09560 2224                        36            .byte	$36
09561 2225                        36            .byte	$36
09562                                           ! 1147  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09563 2226                        36            .byte	$36
09564 2227                        36            .byte	$36
09565 2228                        36            .byte	$36
09566 2229                        36            .byte	$36
09567 222A                        36            .byte	$36
09568 222B                        F7            .byte	$F7
09569 222C                        00            .byte	0
09570 222D                        FF            .byte	$FF
09571 222E                        00            .byte	0
09572 222F                        00            .byte	0
09573 2230                        00            .byte	0
09574 2231                        00            .byte	0
09575 2232                        00            .byte	0
09576 2233                        00            .byte	0
09577                                           ! 1148  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09578 2234                        00            .byte	0
09579 2235                        00            .byte	0
09580 2236                        00            .byte	0
09581 2237                        00            .byte	0
09582 2238                        00            .byte	0
09583 2239                        FF            .byte	$FF
09584 223A                        00            .byte	0
09585 223B                        F7            .byte	$F7
09586 223C                        36            .byte	$36
09587 223D                        36            .byte	$36
09588 223E                        36            .byte	$36
09589 223F                        36            .byte	$36
09590 2240                        36            .byte	$36
09591 2241                        36            .byte	$36
09592                                           ! 1149  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09593 2242                        36            .byte	$36
09594 2243                        36            .byte	$36
09595 2244                        36            .byte	$36
09596 2245                        36            .byte	$36
09597 2246                        36            .byte	$36
09598 2247                        37            .byte	$37
09599 2248                        30            .byte	$30
09600 2249                        37            .byte	$37
09601 224A                        36            .byte	$36
09602 224B                        36            .byte	$36
09603 224C                        36            .byte	$36
09604 224D                        36            .byte	$36
09605 224E                        36            .byte	$36
09606 224F                        36            .byte	$36
09607                                           ! 1150  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09608 2250                        00            .byte	0
09609 2251                        00            .byte	0
09610 2252                        00            .byte	0
09611 2253                        00            .byte	0
09612 2254                        00            .byte	0
09613 2255                        FF            .byte	$FF
09614 2256                        00            .byte	0
09615 2257                        FF            .byte	$FF
09616 2258                        00            .byte	0
09617 2259                        00            .byte	0
09618 225A                        00            .byte	0
09619 225B                        00            .byte	0
09620 225C                        00            .byte	0
09621 225D                        00            .byte	0
09622                                           ! 1151  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09623 225E                        36            .byte	$36
09624 225F                        36            .byte	$36
09625 2260                        36            .byte	$36
09626 2261                        36            .byte	$36
09627 2262                        36            .byte	$36
09628 2263                        F7            .byte	$F7
09629 2264                        00            .byte	0
09630 2265                        F7            .byte	$F7
09631 2266                        36            .byte	$36
09632 2267                        36            .byte	$36
09633 2268                        36            .byte	$36
09634 2269                        36            .byte	$36
09635 226A                        36            .byte	$36
09636 226B                        36            .byte	$36
09637                                           ! 1152  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09638 226C                        18            .byte	$18
09639 226D                        18            .byte	$18
09640 226E                        18            .byte	$18
09641 226F                        18            .byte	$18
09642 2270                        18            .byte	$18
09643 2271                        FF            .byte	$FF
09644 2272                        00            .byte	0
09645 2273                        FF            .byte	$FF
09646 2274                        00            .byte	0
09647 2275                        00            .byte	0
09648 2276                        00            .byte	0
09649 2277                        00            .byte	0
09650 2278                        00            .byte	0
09651 2279                        00            .byte	0
09652                                           ! 1153  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09653 227A                        36            .byte	$36
09654 227B                        36            .byte	$36
09655 227C                        36            .byte	$36
09656 227D                        36            .byte	$36
09657 227E                        36            .byte	$36
09658 227F                        36            .byte	$36
09659 2280                        36            .byte	$36
09660 2281                        FF            .byte	$FF
09661 2282                        00            .byte	0
09662 2283                        00            .byte	0
09663 2284                        00            .byte	0
09664 2285                        00            .byte	0
09665 2286                        00            .byte	0
09666 2287                        00            .byte	0
09667                                           ! 1154  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09668 2288                        00            .byte	0
09669 2289                        00            .byte	0
09670 228A                        00            .byte	0
09671 228B                        00            .byte	0
09672 228C                        00            .byte	0
09673 228D                        FF            .byte	$FF
09674 228E                        00            .byte	0
09675 228F                        FF            .byte	$FF
09676 2290                        18            .byte	$18
09677 2291                        18            .byte	$18
09678 2292                        18            .byte	$18
09679 2293                        18            .byte	$18
09680 2294                        18            .byte	$18
09681 2295                        18            .byte	$18
09682                                           ! 1155  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09683 2296                        00            .byte	0
09684 2297                        00            .byte	0
09685 2298                        00            .byte	0
09686 2299                        00            .byte	0
09687 229A                        00            .byte	0
09688 229B                        00            .byte	0
09689 229C                        00            .byte	0
09690 229D                        FF            .byte	$FF
09691 229E                        36            .byte	$36
09692 229F                        36            .byte	$36
09693 22A0                        36            .byte	$36
09694 22A1                        36            .byte	$36
09695 22A2                        36            .byte	$36
09696 22A3                        36            .byte	$36
09697                                           ! 1156  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09698 22A4                        36            .byte	$36
09699 22A5                        36            .byte	$36
09700 22A6                        36            .byte	$36
09701 22A7                        36            .byte	$36
09702 22A8                        36            .byte	$36
09703 22A9                        36            .byte	$36
09704 22AA                        36            .byte	$36
09705 22AB                        3F            .byte	$3F
09706 22AC                        00            .byte	0
09707 22AD                        00            .byte	0
09708 22AE                        00            .byte	0
09709 22AF                        00            .byte	0
09710 22B0                        00            .byte	0
09711 22B1                        00            .byte	0
09712                                           ! 1157  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09713 22B2                        18            .byte	$18
09714 22B3                        18            .byte	$18
09715 22B4                        18            .byte	$18
09716 22B5                        18            .byte	$18
09717 22B6                        18            .byte	$18
09718 22B7                        1F            .byte	$1F
09719 22B8                        18            .byte	$18
09720 22B9                        1F            .byte	$1F
09721 22BA                        00            .byte	0
09722 22BB                        00            .byte	0
09723 22BC                        00            .byte	0
09724 22BD                        00            .byte	0
09725 22BE                        00            .byte	0
09726 22BF                        00            .byte	0
09727                                           ! 1158  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09728 22C0                        00            .byte	0
09729 22C1                        00            .byte	0
09730 22C2                        00            .byte	0
09731 22C3                        00            .byte	0
09732 22C4                        00            .byte	0
09733 22C5                        1F            .byte	$1F
09734 22C6                        18            .byte	$18
09735 22C7                        1F            .byte	$1F
09736 22C8                        18            .byte	$18
09737 22C9                        18            .byte	$18
09738 22CA                        18            .byte	$18
09739 22CB                        18            .byte	$18
09740 22CC                        18            .byte	$18
09741 22CD                        18            .byte	$18
09742                                           ! 1159  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09743 22CE                        00            .byte	0
09744 22CF                        00            .byte	0
09745 22D0                        00            .byte	0
09746 22D1                        00            .byte	0
09747 22D2                        00            .byte	0
09748 22D3                        00            .byte	0
09749 22D4                        00            .byte	0
09750 22D5                        3F            .byte	$3F
09751 22D6                        36            .byte	$36
09752 22D7                        36            .byte	$36
09753 22D8                        36            .byte	$36
09754 22D9                        36            .byte	$36
09755 22DA                        36            .byte	$36
09756 22DB                        36            .byte	$36
09757                                           ! 1160  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09758 22DC                        36            .byte	$36
09759 22DD                        36            .byte	$36
09760 22DE                        36            .byte	$36
09761 22DF                        36            .byte	$36
09762 22E0                        36            .byte	$36
09763 22E1                        36            .byte	$36
09764 22E2                        36            .byte	$36
09765 22E3                        FF            .byte	$FF
09766 22E4                        36            .byte	$36
09767 22E5                        36            .byte	$36
09768 22E6                        36            .byte	$36
09769 22E7                        36            .byte	$36
09770 22E8                        36            .byte	$36
09771 22E9                        36            .byte	$36
09772                                           ! 1161  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09773 22EA                        18            .byte	$18
09774 22EB                        18            .byte	$18
09775 22EC                        18            .byte	$18
09776 22ED                        18            .byte	$18
09777 22EE                        18            .byte	$18
09778 22EF                        FF            .byte	$FF
09779 22F0                        18            .byte	$18
09780 22F1                        FF            .byte	$FF
09781 22F2                        18            .byte	$18
09782 22F3                        18            .byte	$18
09783 22F4                        18            .byte	$18
09784 22F5                        18            .byte	$18
09785 22F6                        18            .byte	$18
09786 22F7                        18            .byte	$18
09787                                           ! 1162  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09788 22F8                        18            .byte	$18
09789 22F9                        18            .byte	$18
09790 22FA                        18            .byte	$18
09791 22FB                        18            .byte	$18
09792 22FC                        18            .byte	$18
09793 22FD                        18            .byte	$18
09794 22FE                        18            .byte	$18
09795 22FF                        F8            .byte	$F8
09796 2300                        00            .byte	0
09797 2301                        00            .byte	0
09798 2302                        00            .byte	0
09799 2303                        00            .byte	0
09800 2304                        00            .byte	0
09801 2305                        00            .byte	0
09802                                           ! 1163  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09803 2306                        00            .byte	0
09804 2307                        00            .byte	0
09805 2308                        00            .byte	0
09806 2309                        00            .byte	0
09807 230A                        00            .byte	0
09808 230B                        00            .byte	0
09809 230C                        00            .byte	0
09810 230D                        1F            .byte	$1F
09811 230E                        18            .byte	$18
09812 230F                        18            .byte	$18
09813 2310                        18            .byte	$18
09814 2311                        18            .byte	$18
09815 2312                        18            .byte	$18
09816 2313                        18            .byte	$18
09817                                           ! 1164  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09818 2314                        FF            .byte	$FF
09819 2315                        FF            .byte	$FF
09820 2316                        FF            .byte	$FF
09821 2317                        FF            .byte	$FF
09822 2318                        FF            .byte	$FF
09823 2319                        FF            .byte	$FF
09824 231A                        FF            .byte	$FF
09825 231B                        FF            .byte	$FF
09826 231C                        FF            .byte	$FF
09827 231D                        FF            .byte	$FF
09828 231E                        FF            .byte	$FF
09829 231F                        FF            .byte	$FF
09830 2320                        FF            .byte	$FF
09831 2321                        FF            .byte	$FF
09832                                           ! 1165  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09833 2322                        00            .byte	0
09834 2323                        00            .byte	0
09835 2324                        00            .byte	0
09836 2325                        00            .byte	0
09837 2326                        00            .byte	0
09838 2327                        00            .byte	0
09839 2328                        00            .byte	0
09840 2329                        FF            .byte	$FF
09841 232A                        FF            .byte	$FF
09842 232B                        FF            .byte	$FF
09843 232C                        FF            .byte	$FF
09844 232D                        FF            .byte	$FF
09845 232E                        FF            .byte	$FF
09846 232F                        FF            .byte	$FF
09847                                           ! 1166  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
09848 2330                        F0            .byte	$F0
09849 2331                        F0            .byte	$F0
09850 2332                        F0            .byte	$F0
09851 2333                        F0            .byte	$F0
09852 2334                        F0            .byte	$F0
09853 2335                        F0            .byte	$F0
09854 2336                        F0            .byte	$F0
09855 2337                        F0            .byte	$F0
09856 2338                        F0            .byte	$F0
09857 2339                        F0            .byte	$F0
09858 233A                        F0            .byte	$F0
09859 233B                        F0            .byte	$F0
09860 233C                        F0            .byte	$F0
09861 233D                        F0            .byte	$F0
09862                                           ! 1167  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
09863 233E                        0F            .byte	$F
09864 233F                        0F            .byte	$F
09865 2340                        0F            .byte	$F
09866 2341                        0F            .byte	$F
09867 2342                        0F            .byte	$F
09868 2343                        0F            .byte	$F
09869 2344                        0F            .byte	$F
09870 2345                        0F            .byte	$F
09871 2346                        0F            .byte	$F
09872 2347                        0F            .byte	$F
09873 2348                        0F            .byte	$F
09874 2349                        0F            .byte	$F
09875 234A                        0F            .byte	$F
09876 234B                        0F            .byte	$F
09877                                           ! 1168  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09878 234C                        FF            .byte	$FF
09879 234D                        FF            .byte	$FF
09880 234E                        FF            .byte	$FF
09881 234F                        FF            .byte	$FF
09882 2350                        FF            .byte	$FF
09883 2351                        FF            .byte	$FF
09884 2352                        FF            .byte	$FF
09885 2353                        00            .byte	0
09886 2354                        00            .byte	0
09887 2355                        00            .byte	0
09888 2356                        00            .byte	0
09889 2357                        00            .byte	0
09890 2358                        00            .byte	0
09891 2359                        00            .byte	0
09892                                           ! 1169  0x00, 0x00, 0x00
09893 235A                        00            .byte	0
09894 235B                        00            .byte	0
09895                                           ! 1169 , 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
09896 235C                        00            .byte	0
09897 235D                        00            .byte	0
09898 235E                        00            .byte	0
09899 235F                        76            .byte	$76
09900 2360                        DC            .byte	$DC
09901 2361                        D8            .byte	$D8
09902 2362                        D8            .byte	$D8
09903 2363                        DC            .byte	$DC
09904 2364                        76            .byte	$76
09905 2365                        00            .byte	0
09906 2366                        00            .byte	0
09907 2367                        00            .byte	0
09908                                           ! 1170  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
09909 2368                        00            .byte	0
09910 2369                        00            .byte	0
09911 236A                        00            .byte	0
09912 236B                        00            .byte	0
09913 236C                        7C            .byte	$7C
09914 236D                        C6            .byte	$C6
09915 236E                        FC            .byte	$FC
09916 236F                        C6            .byte	$C6
09917 2370                        C6            .byte	$C6
09918 2371                        FC            .byte	$FC
09919 2372                        C0            .byte	$C0
09920 2373                        C0            .byte	$C0
09921 2374                        40            .byte	$40
09922 2375                        00            .byte	0
09923                                           ! 1171  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
09924 2376                        00            .byte	0
09925 2377                        00            .byte	0
09926 2378                        FE            .byte	$FE
09927 2379                        C6            .byte	$C6
09928 237A                        C6            .byte	$C6
09929 237B                        C0            .byte	$C0
09930 237C                        C0            .byte	$C0
09931 237D                        C0            .byte	$C0
09932 237E                        C0            .byte	$C0
09933 237F                        C0            .byte	$C0
09934 2380                        C0            .byte	$C0
09935 2381                        00            .byte	0
09936 2382                        00            .byte	0
09937 2383                        00            .byte	0
09938                                           ! 1172  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
09939 2384                        00            .byte	0
09940 2385                        00            .byte	0
09941 2386                        00            .byte	0
09942 2387                        00            .byte	0
09943 2388                        FE            .byte	$FE
09944 2389                        6C            .byte	$6C
09945 238A                        6C            .byte	$6C
09946 238B                        6C            .byte	$6C
09947 238C                        6C            .byte	$6C
09948 238D                        6C            .byte	$6C
09949 238E                        6C            .byte	$6C
09950 238F                        00            .byte	0
09951 2390                        00            .byte	0
09952 2391                        00            .byte	0
09953                                           ! 1173  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
09954 2392                        00            .byte	0
09955 2393                        00            .byte	0
09956 2394                        FE            .byte	$FE
09957 2395                        C6            .byte	$C6
09958 2396                        60            .byte	$60
09959 2397                        30            .byte	$30
09960 2398                        18            .byte	$18
09961 2399                        30            .byte	$30
09962 239A                        60            .byte	$60
09963 239B                        C6            .byte	$C6
09964 239C                        FE            .byte	$FE
09965 239D                        00            .byte	0
09966 239E                        00            .byte	0
09967 239F                        00            .byte	0
09968                                           ! 1174  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
09969 23A0                        00            .byte	0
09970 23A1                        00            .byte	0
09971 23A2                        00            .byte	0
09972 23A3                        00            .byte	0
09973 23A4                        00            .byte	0
09974 23A5                        7E            .byte	$7E
09975 23A6                        D8            .byte	$D8
09976 23A7                        D8            .byte	$D8
09977 23A8                        D8            .byte	$D8
09978 23A9                        D8            .byte	$D8
09979 23AA                        70            .byte	$70
09980 23AB                        00            .byte	0
09981 23AC                        00            .byte	0
09982 23AD                        00            .byte	0
09983                                           ! 1175  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
09984 23AE                        00            .byte	0
09985 23AF                        00            .byte	0
09986 23B0                        00            .byte	0
09987 23B1                        00            .byte	0
09988 23B2                        66            .byte	$66
09989 23B3                        66            .byte	$66
09990 23B4                        66            .byte	$66
09991 23B5                        66            .byte	$66
09992 23B6                        7C            .byte	$7C
09993 23B7                        60            .byte	$60
09994 23B8                        60            .byte	$60
09995 23B9                        C0            .byte	$C0
09996 23BA                        00            .byte	0
09997 23BB                        00            .byte	0
09998                                           ! 1176  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
09999 23BC                        00            .byte	0
10000 23BD                        00            .byte	0
10001 23BE                        00            .byte	0
10002 23BF                        00            .byte	0
10003 23C0                        76            .byte	$76
10004 23C1                        DC            .byte	$DC
10005 23C2                        18            .byte	$18
10006 23C3                        18            .byte	$18
10007 23C4                        18            .byte	$18
10008 23C5                        18            .byte	$18
10009 23C6                        18            .byte	$18
10010 23C7                        00            .byte	0
10011 23C8                        00            .byte	0
10012 23C9                        00            .byte	0
10013                                           ! 1177  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10014 23CA                        00            .byte	0
10015 23CB                        00            .byte	0
10016 23CC                        7E            .byte	$7E
10017 23CD                        18            .byte	$18
10018 23CE                        3C            .byte	$3C
10019 23CF                        66            .byte	$66
10020 23D0                        66            .byte	$66
10021 23D1                        66            .byte	$66
10022 23D2                        3C            .byte	$3C
10023 23D3                        18            .byte	$18
10024 23D4                        7E            .byte	$7E
10025 23D5                        00            .byte	0
10026 23D6                        00            .byte	0
10027 23D7                        00            .byte	0
10028                                           ! 1178  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10029 23D8                        00            .byte	0
10030 23D9                        00            .byte	0
10031 23DA                        38            .byte	$38
10032 23DB                        6C            .byte	$6C
10033 23DC                        C6            .byte	$C6
10034 23DD                        C6            .byte	$C6
10035 23DE                        FE            .byte	$FE
10036 23DF                        C6            .byte	$C6
10037 23E0                        C6            .byte	$C6
10038 23E1                        6C            .byte	$6C
10039 23E2                        38            .byte	$38
10040 23E3                        00            .byte	0
10041 23E4                        00            .byte	0
10042 23E5                        00            .byte	0
10043                                           ! 1179  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10044 23E6                        00            .byte	0
10045 23E7                        00            .byte	0
10046 23E8                        38            .byte	$38
10047 23E9                        6C            .byte	$6C
10048 23EA                        C6            .byte	$C6
10049 23EB                        C6            .byte	$C6
10050 23EC                        C6            .byte	$C6
10051 23ED                        6C            .byte	$6C
10052 23EE                        6C            .byte	$6C
10053 23EF                        6C            .byte	$6C
10054 23F0                        EE            .byte	$EE
10055 23F1                        00            .byte	0
10056 23F2                        00            .byte	0
10057 23F3                        00            .byte	0
10058                                           ! 1180  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10059 23F4                        00            .byte	0
10060 23F5                        00            .byte	0
10061 23F6                        1E            .byte	$1E
10062 23F7                        30            .byte	$30
10063 23F8                        18            .byte	$18
10064 23F9                        0C            .byte	$C
10065 23FA                        3E            .byte	$3E
10066 23FB                        66            .byte	$66
10067 23FC                        66            .byte	$66
10068 23FD                        66            .byte	$66
10069 23FE                        3C            .byte	$3C
10070 23FF                        00            .byte	0
10071 2400                        00            .byte	0
10072 2401                        00            .byte	0
10073                                           ! 1181  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10074 2402                        00            .byte	0
10075 2403                        00            .byte	0
10076 2404                        00            .byte	0
10077 2405                        00            .byte	0
10078 2406                        00            .byte	0
10079 2407                        7E            .byte	$7E
10080 2408                        DB            .byte	$DB
10081 2409                        DB            .byte	$DB
10082 240A                        7E            .byte	$7E
10083 240B                        00            .byte	0
10084 240C                        00            .byte	0
10085 240D                        00            .byte	0
10086 240E                        00            .byte	0
10087 240F                        00            .byte	0
10088                                           ! 1182  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10089 2410                        00            .byte	0
10090 2411                        00            .byte	0
10091 2412                        03            .byte	3
10092 2413                        06            .byte	6
10093 2414                        7E            .byte	$7E
10094 2415                        DB            .byte	$DB
10095 2416                        DB            .byte	$DB
10096 2417                        F3            .byte	$F3
10097 2418                        7E            .byte	$7E
10098 2419                        60            .byte	$60
10099 241A                        C0            .byte	$C0
10100 241B                        00            .byte	0
10101 241C                        00            .byte	0
10102 241D                        00            .byte	0
10103                                           ! 1183  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10104 241E                        00            .byte	0
10105 241F                        00            .byte	0
10106 2420                        1C            .byte	$1C
10107 2421                        30            .byte	$30
10108 2422                        60            .byte	$60
10109 2423                        60            .byte	$60
10110 2424                        7C            .byte	$7C
10111 2425                        60            .byte	$60
10112 2426                        60            .byte	$60
10113 2427                        30            .byte	$30
10114 2428                        1C            .byte	$1C
10115 2429                        00            .byte	0
10116 242A                        00            .byte	0
10117 242B                        00            .byte	0
10118                                           ! 1184  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10119 242C                        00            .byte	0
10120 242D                        00            .byte	0
10121 242E                        00            .byte	0
10122 242F                        7C            .byte	$7C
10123 2430                        C6            .byte	$C6
10124 2431                        C6            .byte	$C6
10125 2432                        C6            .byte	$C6
10126 2433                        C6            .byte	$C6
10127 2434                        C6            .byte	$C6
10128 2435                        C6            .byte	$C6
10129 2436                        C6            .byte	$C6
10130 2437                        00            .byte	0
10131 2438                        00            .byte	0
10132 2439                        00            .byte	0
10133                                           ! 1185  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10134 243A                        00            .byte	0
10135 243B                        00            .byte	0
10136 243C                        00            .byte	0
10137 243D                        FE            .byte	$FE
10138 243E                        00            .byte	0
10139 243F                        00            .byte	0
10140 2440                        FE            .byte	$FE
10141 2441                        00            .byte	0
10142 2442                        00            .byte	0
10143 2443                        FE            .byte	$FE
10144 2444                        00            .byte	0
10145 2445                        00            .byte	0
10146 2446                        00            .byte	0
10147 2447                        00            .byte	0
10148                                           ! 1186  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10149 2448                        00            .byte	0
10150 2449                        00            .byte	0
10151 244A                        00            .byte	0
10152 244B                        18            .byte	$18
10153 244C                        18            .byte	$18
10154 244D                        7E            .byte	$7E
10155 244E                        18            .byte	$18
10156 244F                        18            .byte	$18
10157 2450                        00            .byte	0
10158 2451                        00            .byte	0
10159 2452                        FF            .byte	$FF
10160 2453                        00            .byte	0
10161 2454                        00            .byte	0
10162 2455                        00            .byte	0
10163                                           ! 1187  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10164 2456                        00            .byte	0
10165 2457                        00            .byte	0
10166 2458                        30            .byte	$30
10167 2459                        18            .byte	$18
10168 245A                        0C            .byte	$C
10169 245B                        06            .byte	6
10170 245C                        0C            .byte	$C
10171 245D                        18            .byte	$18
10172 245E                        30            .byte	$30
10173 245F                        00            .byte	0
10174 2460                        7E            .byte	$7E
10175 2461                        00            .byte	0
10176 2462                        00            .byte	0
10177 2463                        00            .byte	0
10178                                           ! 1188  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10179 2464                        00            .byte	0
10180 2465                        00            .byte	0
10181 2466                        0C            .byte	$C
10182 2467                        18            .byte	$18
10183 2468                        30            .byte	$30
10184 2469                        60            .byte	$60
10185 246A                        30            .byte	$30
10186 246B                        18            .byte	$18
10187 246C                        0C            .byte	$C
10188 246D                        00            .byte	0
10189 246E                        7E            .byte	$7E
10190 246F                        00            .byte	0
10191 2470                        00            .byte	0
10192 2471                        00            .byte	0
10193                                           ! 1189  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10194 2472                        00            .byte	0
10195 2473                        00            .byte	0
10196 2474                        0E            .byte	$E
10197 2475                        1B            .byte	$1B
10198 2476                        1B            .byte	$1B
10199 2477                        18            .byte	$18
10200 2478                        18            .byte	$18
10201 2479                        18            .byte	$18
10202 247A                        18            .byte	$18
10203 247B                        18            .byte	$18
10204 247C                        18            .byte	$18
10205 247D                        18            .byte	$18
10206 247E                        18            .byte	$18
10207 247F                        18            .byte	$18
10208                                           ! 1190  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10209 2480                        18            .byte	$18
10210 2481                        18            .byte	$18
10211 2482                        18            .byte	$18
10212 2483                        18            .byte	$18
10213 2484                        18            .byte	$18
10214 2485                        18            .byte	$18
10215 2486                        18            .byte	$18
10216 2487                        18            .byte	$18
10217 2488                        D8            .byte	$D8
10218 2489                        D8            .byte	$D8
10219 248A                        70            .byte	$70
10220 248B                        00            .byte	0
10221 248C                        00            .byte	0
10222 248D                        00            .byte	0
10223                                           ! 1191  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10224 248E                        00            .byte	0
10225 248F                        00            .byte	0
10226 2490                        00            .byte	0
10227 2491                        18            .byte	$18
10228 2492                        18            .byte	$18
10229 2493                        00            .byte	0
10230 2494                        7E            .byte	$7E
10231 2495                        00            .byte	0
10232 2496                        18            .byte	$18
10233 2497                        18            .byte	$18
10234 2498                        00            .byte	0
10235 2499                        00            .byte	0
10236 249A                        00            .byte	0
10237 249B                        00            .byte	0
10238                                           ! 1192  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10239 249C                        00            .byte	0
10240 249D                        00            .byte	0
10241 249E                        00            .byte	0
10242 249F                        00            .byte	0
10243 24A0                        76            .byte	$76
10244 24A1                        DC            .byte	$DC
10245 24A2                        00            .byte	0
10246 24A3                        76            .byte	$76
10247 24A4                        DC            .byte	$DC
10248 24A5                        00            .byte	0
10249 24A6                        00            .byte	0
10250 24A7                        00            .byte	0
10251 24A8                        00            .byte	0
10252 24A9                        00            .byte	0
10253                                           ! 1193  0x00, 0x38, 0x6c, 0x6c, 
10254 24AA                        00            .byte	0
10255 24AB                        38            .byte	$38
10256 24AC                        6C            .byte	$6C
10257 24AD                        6C            .byte	$6C
10258                                           ! 1193 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10259 24AE                        38            .byte	$38
10260 24AF                        00            .byte	0
10261 24B0                        00            .byte	0
10262 24B1                        00            .byte	0
10263 24B2                        00            .byte	0
10264 24B3                        00            .byte	0
10265 24B4                        00            .byte	0
10266 24B5                        00            .byte	0
10267 24B6                        00            .byte	0
10268 24B7                        00            .byte	0
10269                                           ! 1194  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10270 24B8                        00            .byte	0
10271 24B9                        00            .byte	0
10272 24BA                        00            .byte	0
10273 24BB                        00            .byte	0
10274 24BC                        00            .byte	0
10275 24BD                        00            .byte	0
10276 24BE                        18            .byte	$18
10277 24BF                        18            .byte	$18
10278 24C0                        00            .byte	0
10279 24C1                        00            .byte	0
10280 24C2                        00            .byte	0
10281 24C3                        00            .byte	0
10282 24C4                        00            .byte	0
10283 24C5                        00            .byte	0
10284                                           ! 1195  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10285 24C6                        00            .byte	0
10286 24C7                        00            .byte	0
10287 24C8                        00            .byte	0
10288 24C9                        00            .byte	0
10289 24CA                        00            .byte	0
10290 24CB                        00            .byte	0
10291 24CC                        00            .byte	0
10292 24CD                        18            .byte	$18
10293 24CE                        00            .byte	0
10294 24CF                        00            .byte	0
10295 24D0                        00            .byte	0
10296 24D1                        00            .byte	0
10297 24D2                        00            .byte	0
10298 24D3                        00            .byte	0
10299                                           ! 1196  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10300 24D4                        00            .byte	0
10301 24D5                        0F            .byte	$F
10302 24D6                        0C            .byte	$C
10303 24D7                        0C            .byte	$C
10304 24D8                        0C            .byte	$C
10305 24D9                        0C            .byte	$C
10306 24DA                        0C            .byte	$C
10307 24DB                        EC            .byte	$EC
10308 24DC                        6C            .byte	$6C
10309 24DD                        3C            .byte	$3C
10310 24DE                        1C            .byte	$1C
10311 24DF                        00            .byte	0
10312 24E0                        00            .byte	0
10313 24E1                        00            .byte	0
10314                                           ! 1197  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10315 24E2                        00            .byte	0
10316 24E3                        D8            .byte	$D8
10317 24E4                        6C            .byte	$6C
10318 24E5                        6C            .byte	$6C
10319 24E6                        6C            .byte	$6C
10320 24E7                        6C            .byte	$6C
10321 24E8                        6C            .byte	$6C
10322 24E9                        00            .byte	0
10323 24EA                        00            .byte	0
10324 24EB                        00            .byte	0
10325 24EC                        00            .byte	0
10326 24ED                        00            .byte	0
10327 24EE                        00            .byte	0
10328 24EF                        00            .byte	0
10329                                           ! 1198  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10330 24F0                        00            .byte	0
10331 24F1                        70            .byte	$70
10332 24F2                        D8            .byte	$D8
10333 24F3                        30            .byte	$30
10334 24F4                        60            .byte	$60
10335 24F5                        C8            .byte	$C8
10336 24F6                        F8            .byte	$F8
10337 24F7                        00            .byte	0
10338 24F8                        00            .byte	0
10339 24F9                        00            .byte	0
10340 24FA                        00            .byte	0
10341 24FB                        00            .byte	0
10342 24FC                        00            .byte	0
10343 24FD                        00            .byte	0
10344                                           ! 1199  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10345 24FE                        00            .byte	0
10346 24FF                        00            .byte	0
10347 2500                        00            .byte	0
10348 2501                        00            .byte	0
10349 2502                        7C            .byte	$7C
10350 2503                        7C            .byte	$7C
10351 2504                        7C            .byte	$7C
10352 2505                        7C            .byte	$7C
10353 2506                        7C            .byte	$7C
10354 2507                        7C            .byte	$7C
10355 2508                        00            .byte	0
10356 2509                        00            .byte	0
10357 250A                        00            .byte	0
10358 250B                        00            .byte	0
10359                                           ! 1200  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10360 250C                        00            .byte	0
10361 250D                        00            .byte	0
10362 250E                        00            .byte	0
10363 250F                        00            .byte	0
10364 2510                        00            .byte	0
10365 2511                        00            .byte	0
10366 2512                        00            .byte	0
10367 2513                        00            .byte	0
10368 2514                        00            .byte	0
10369 2515                        00            .byte	0
10370 2516                        00            .byte	0
10371 2517                        00            .byte	0
10372 2518                        00            .byte	0
10373                                           ! 1201 };
10374 2519                        00            .byte	0
10375                                           !BCC_EOS
10376                                           ! 1202 static Bit8u vgafont16[256*16]=
10377                                           ! 1203 {
10378                       0000251A            _vgafont16:
10379                                           ! 1204  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10380 251A                        00            .byte	0
10381 251B                        00            .byte	0
10382 251C                        00            .byte	0
10383 251D                        00            .byte	0
10384 251E                        00            .byte	0
10385 251F                        00            .byte	0
10386 2520                        00            .byte	0
10387 2521                        00            .byte	0
10388 2522                        00            .byte	0
10389 2523                        00            .byte	0
10390 2524                        00            .byte	0
10391 2525                        00            .byte	0
10392 2526                        00            .byte	0
10393 2527                        00            .byte	0
10394 2528                        00            .byte	0
10395 2529                        00            .byte	0
10396                                           ! 1205  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10397 252A                        00            .byte	0
10398 252B                        00            .byte	0
10399 252C                        7E            .byte	$7E
10400 252D                        81            .byte	$81
10401 252E                        A5            .byte	$A5
10402 252F                        81            .byte	$81
10403 2530                        81            .byte	$81
10404 2531                        BD            .byte	$BD
10405 2532                        99            .byte	$99
10406 2533                        81            .byte	$81
10407 2534                        81            .byte	$81
10408 2535                        7E            .byte	$7E
10409 2536                        00            .byte	0
10410 2537                        00            .byte	0
10411 2538                        00            .byte	0
10412 2539                        00            .byte	0
10413                                           ! 1206  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10414 253A                        00            .byte	0
10415 253B                        00            .byte	0
10416 253C                        7E            .byte	$7E
10417 253D                        FF            .byte	$FF
10418 253E                        DB            .byte	$DB
10419 253F                        FF            .byte	$FF
10420 2540                        FF            .byte	$FF
10421 2541                        C3            .byte	$C3
10422 2542                        E7            .byte	$E7
10423 2543                        FF            .byte	$FF
10424 2544                        FF            .byte	$FF
10425 2545                        7E            .byte	$7E
10426 2546                        00            .byte	0
10427 2547                        00            .byte	0
10428 2548                        00            .byte	0
10429 2549                        00            .byte	0
10430                                           ! 1207  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10431 254A                        00            .byte	0
10432 254B                        00            .byte	0
10433 254C                        00            .byte	0
10434 254D                        00            .byte	0
10435 254E                        6C            .byte	$6C
10436 254F                        FE            .byte	$FE
10437 2550                        FE            .byte	$FE
10438 2551                        FE            .byte	$FE
10439 2552                        FE            .byte	$FE
10440 2553                        7C            .byte	$7C
10441 2554                        38            .byte	$38
10442 2555                        10            .byte	$10
10443 2556                        00            .byte	0
10444 2557                        00            .byte	0
10445 2558                        00            .byte	0
10446 2559                        00            .byte	0
10447                                           ! 1208  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10448 255A                        00            .byte	0
10449 255B                        00            .byte	0
10450 255C                        00            .byte	0
10451 255D                        00            .byte	0
10452 255E                        10            .byte	$10
10453 255F                        38            .byte	$38
10454 2560                        7C            .byte	$7C
10455 2561                        FE            .byte	$FE
10456 2562                        7C            .byte	$7C
10457 2563                        38            .byte	$38
10458 2564                        10            .byte	$10
10459 2565                        00            .byte	0
10460 2566                        00            .byte	0
10461 2567                        00            .byte	0
10462 2568                        00            .byte	0
10463 2569                        00            .byte	0
10464                                           ! 1209  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10465 256A                        00            .byte	0
10466 256B                        00            .byte	0
10467 256C                        00            .byte	0
10468 256D                        18            .byte	$18
10469 256E                        3C            .byte	$3C
10470 256F                        3C            .byte	$3C
10471 2570                        E7            .byte	$E7
10472 2571                        E7            .byte	$E7
10473 2572                        E7            .byte	$E7
10474 2573                        18            .byte	$18
10475 2574                        18            .byte	$18
10476 2575                        3C            .byte	$3C
10477 2576                        00            .byte	0
10478 2577                        00            .byte	0
10479 2578                        00            .byte	0
10480 2579                        00            .byte	0
10481                                           ! 1210  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10482 257A                        00            .byte	0
10483 257B                        00            .byte	0
10484 257C                        00            .byte	0
10485 257D                        18            .byte	$18
10486 257E                        3C            .byte	$3C
10487 257F                        7E            .byte	$7E
10488 2580                        FF            .byte	$FF
10489 2581                        FF            .byte	$FF
10490 2582                        7E            .byte	$7E
10491 2583                        18            .byte	$18
10492 2584                        18            .byte	$18
10493 2585                        3C            .byte	$3C
10494 2586                        00            .byte	0
10495 2587                        00            .byte	0
10496 2588                        00            .byte	0
10497 2589                        00            .byte	0
10498                                           ! 1211  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10499 258A                        00            .byte	0
10500 258B                        00            .byte	0
10501 258C                        00            .byte	0
10502 258D                        00            .byte	0
10503 258E                        00            .byte	0
10504 258F                        00            .byte	0
10505 2590                        18            .byte	$18
10506 2591                        3C            .byte	$3C
10507 2592                        3C            .byte	$3C
10508 2593                        18            .byte	$18
10509 2594                        00            .byte	0
10510 2595                        00            .byte	0
10511 2596                        00            .byte	0
10512 2597                        00            .byte	0
10513 2598                        00            .byte	0
10514 2599                        00            .byte	0
10515                                           ! 1212  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10516 259A                        FF            .byte	$FF
10517 259B                        FF            .byte	$FF
10518 259C                        FF            .byte	$FF
10519 259D                        FF            .byte	$FF
10520 259E                        FF            .byte	$FF
10521 259F                        FF            .byte	$FF
10522 25A0                        E7            .byte	$E7
10523 25A1                        C3            .byte	$C3
10524 25A2                        C3            .byte	$C3
10525 25A3                        E7            .byte	$E7
10526 25A4                        FF            .byte	$FF
10527 25A5                        FF            .byte	$FF
10528 25A6                        FF            .byte	$FF
10529 25A7                        FF            .byte	$FF
10530 25A8                        FF            .byte	$FF
10531 25A9                        FF            .byte	$FF
10532                                           ! 1213  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10533 25AA                        00            .byte	0
10534 25AB                        00            .byte	0
10535 25AC                        00            .byte	0
10536 25AD                        00            .byte	0
10537 25AE                        00            .byte	0
10538 25AF                        3C            .byte	$3C
10539 25B0                        66            .byte	$66
10540 25B1                        42            .byte	$42
10541 25B2                        42            .byte	$42
10542 25B3                        66            .byte	$66
10543 25B4                        3C            .byte	$3C
10544 25B5                        00            .byte	0
10545 25B6                        00            .byte	0
10546 25B7                        00            .byte	0
10547 25B8                        00            .byte	0
10548 25B9                        00            .byte	0
10549                                           ! 1214  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10550 25BA                        FF            .byte	$FF
10551 25BB                        FF            .byte	$FF
10552 25BC                        FF            .byte	$FF
10553 25BD                        FF            .byte	$FF
10554 25BE                        FF            .byte	$FF
10555 25BF                        C3            .byte	$C3
10556 25C0                        99            .byte	$99
10557 25C1                        BD            .byte	$BD
10558 25C2                        BD            .byte	$BD
10559 25C3                        99            .byte	$99
10560 25C4                        C3            .byte	$C3
10561 25C5                        FF            .byte	$FF
10562 25C6                        FF            .byte	$FF
10563 25C7                        FF            .byte	$FF
10564 25C8                        FF            .byte	$FF
10565 25C9                        FF            .byte	$FF
10566                                           ! 1215  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10567 25CA                        00            .byte	0
10568 25CB                        00            .byte	0
10569 25CC                        1E            .byte	$1E
10570 25CD                        0E            .byte	$E
10571 25CE                        1A            .byte	$1A
10572 25CF                        32            .byte	$32
10573 25D0                        78            .byte	$78
10574 25D1                        CC            .byte	$CC
10575 25D2                        CC            .byte	$CC
10576 25D3                        CC            .byte	$CC
10577 25D4                        CC            .byte	$CC
10578 25D5                        78            .byte	$78
10579 25D6                        00            .byte	0
10580 25D7                        00            .byte	0
10581 25D8                        00            .byte	0
10582 25D9                        00            .byte	0
10583                                           ! 1216  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10584 25DA                        00            .byte	0
10585 25DB                        00            .byte	0
10586 25DC                        3C            .byte	$3C
10587 25DD                        66            .byte	$66
10588 25DE                        66            .byte	$66
10589 25DF                        66            .byte	$66
10590 25E0                        66            .byte	$66
10591 25E1                        3C            .byte	$3C
10592 25E2                        18            .byte	$18
10593 25E3                        7E            .byte	$7E
10594 25E4                        18            .byte	$18
10595 25E5                        18            .byte	$18
10596 25E6                        00            .byte	0
10597 25E7                        00            .byte	0
10598 25E8                        00            .byte	0
10599 25E9                        00            .byte	0
10600                                           ! 1217  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10601 25EA                        00            .byte	0
10602 25EB                        00            .byte	0
10603 25EC                        3F            .byte	$3F
10604 25ED                        33            .byte	$33
10605 25EE                        3F            .byte	$3F
10606 25EF                        30            .byte	$30
10607 25F0                        30            .byte	$30
10608 25F1                        30            .byte	$30
10609 25F2                        30            .byte	$30
10610 25F3                        70            .byte	$70
10611 25F4                        F0            .byte	$F0
10612 25F5                        E0            .byte	$E0
10613 25F6                        00            .byte	0
10614 25F7                        00            .byte	0
10615 25F8                        00            .byte	0
10616                                           ! 1217 
10617 25F9                        00            .byte	0
10618                                           ! 1218  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10619 25FA                        00            .byte	0
10620 25FB                        00            .byte	0
10621 25FC                        7F            .byte	$7F
10622 25FD                        63            .byte	$63
10623 25FE                        7F            .byte	$7F
10624 25FF                        63            .byte	$63
10625 2600                        63            .byte	$63
10626 2601                        63            .byte	$63
10627 2602                        63            .byte	$63
10628 2603                        67            .byte	$67
10629 2604                        E7            .byte	$E7
10630 2605                        E6            .byte	$E6
10631 2606                        C0            .byte	$C0
10632 2607                        00            .byte	0
10633 2608                        00            .byte	0
10634 2609                        00            .byte	0
10635                                           ! 1219  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10636 260A                        00            .byte	0
10637 260B                        00            .byte	0
10638 260C                        00            .byte	0
10639 260D                        18            .byte	$18
10640 260E                        18            .byte	$18
10641 260F                        DB            .byte	$DB
10642 2610                        3C            .byte	$3C
10643 2611                        E7            .byte	$E7
10644 2612                        3C            .byte	$3C
10645 2613                        DB            .byte	$DB
10646 2614                        18            .byte	$18
10647 2615                        18            .byte	$18
10648 2616                        00            .byte	0
10649 2617                        00            .byte	0
10650 2618                        00            .byte	0
10651 2619                        00            .byte	0
10652                                           ! 1220  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10653 261A                        00            .byte	0
10654 261B                        80            .byte	$80
10655 261C                        C0            .byte	$C0
10656 261D                        E0            .byte	$E0
10657 261E                        F0            .byte	$F0
10658 261F                        F8            .byte	$F8
10659 2620                        FE            .byte	$FE
10660 2621                        F8            .byte	$F8
10661 2622                        F0            .byte	$F0
10662 2623                        E0            .byte	$E0
10663 2624                        C0            .byte	$C0
10664 2625                        80            .byte	$80
10665 2626                        00            .byte	0
10666 2627                        00            .byte	0
10667 2628                        00            .byte	0
10668 2629                        00            .byte	0
10669                                           ! 1221  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10670 262A                        00            .byte	0
10671 262B                        02            .byte	2
10672 262C                        06            .byte	6
10673 262D                        0E            .byte	$E
10674 262E                        1E            .byte	$1E
10675 262F                        3E            .byte	$3E
10676 2630                        FE            .byte	$FE
10677 2631                        3E            .byte	$3E
10678 2632                        1E            .byte	$1E
10679 2633                        0E            .byte	$E
10680 2634                        06            .byte	6
10681 2635                        02            .byte	2
10682 2636                        00            .byte	0
10683 2637                        00            .byte	0
10684 2638                        00            .byte	0
10685 2639                        00            .byte	0
10686                                           ! 1222  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
10687 263A                        00            .byte	0
10688 263B                        00            .byte	0
10689 263C                        18            .byte	$18
10690 263D                        3C            .byte	$3C
10691 263E                        7E            .byte	$7E
10692 263F                        18            .byte	$18
10693 2640                        18            .byte	$18
10694 2641                        18            .byte	$18
10695 2642                        7E            .byte	$7E
10696 2643                        3C            .byte	$3C
10697 2644                        18            .byte	$18
10698 2645                        00            .byte	0
10699 2646                        00            .byte	0
10700 2647                        00            .byte	0
10701 2648                        00            .byte	0
10702 2649                        00            .byte	0
10703                                           ! 1223  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
10704 264A                        00            .byte	0
10705 264B                        00            .byte	0
10706 264C                        66            .byte	$66
10707 264D                        66            .byte	$66
10708 264E                        66            .byte	$66
10709 264F                        66            .byte	$66
10710 2650                        66            .byte	$66
10711 2651                        66            .byte	$66
10712 2652                        66            .byte	$66
10713 2653                        00            .byte	0
10714 2654                        66            .byte	$66
10715 2655                        66            .byte	$66
10716 2656                        00            .byte	0
10717 2657                        00            .byte	0
10718 2658                        00            .byte	0
10719 2659                        00            .byte	0
10720                                           ! 1224  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
10721 265A                        00            .byte	0
10722 265B                        00            .byte	0
10723 265C                        7F            .byte	$7F
10724 265D                        DB            .byte	$DB
10725 265E                        DB            .byte	$DB
10726 265F                        DB            .byte	$DB
10727 2660                        7B            .byte	$7B
10728 2661                        1B            .byte	$1B
10729 2662                        1B            .byte	$1B
10730 2663                        1B            .byte	$1B
10731 2664                        1B            .byte	$1B
10732 2665                        1B            .byte	$1B
10733 2666                        00            .byte	0
10734 2667                        00            .byte	0
10735 2668                        00            .byte	0
10736 2669                        00            .byte	0
10737                                           ! 1225  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
10738 266A                        00            .byte	0
10739 266B                        7C            .byte	$7C
10740 266C                        C6            .byte	$C6
10741 266D                        60            .byte	$60
10742 266E                        38            .byte	$38
10743 266F                        6C            .byte	$6C
10744 2670                        C6            .byte	$C6
10745 2671                        C6            .byte	$C6
10746 2672                        6C            .byte	$6C
10747 2673                        38            .byte	$38
10748 2674                        0C            .byte	$C
10749 2675                        C6            .byte	$C6
10750 2676                        7C            .byte	$7C
10751 2677                        00            .byte	0
10752 2678                        00            .byte	0
10753 2679                        00            .byte	0
10754                                           ! 1226  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
10755 267A                        00            .byte	0
10756 267B                        00            .byte	0
10757 267C                        00            .byte	0
10758 267D                        00            .byte	0
10759 267E                        00            .byte	0
10760 267F                        00            .byte	0
10761 2680                        00            .byte	0
10762 2681                        00            .byte	0
10763 2682                        FE            .byte	$FE
10764 2683                        FE            .byte	$FE
10765 2684                        FE            .byte	$FE
10766 2685                        FE            .byte	$FE
10767 2686                        00            .byte	0
10768 2687                        00            .byte	0
10769 2688                        00            .byte	0
10770 2689                        00            .byte	0
10771                                           ! 1227  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
10772 268A                        00            .byte	0
10773 268B                        00            .byte	0
10774 268C                        18            .byte	$18
10775 268D                        3C            .byte	$3C
10776 268E                        7E            .byte	$7E
10777 268F                        18            .byte	$18
10778 2690                        18            .byte	$18
10779 2691                        18            .byte	$18
10780 2692                        7E            .byte	$7E
10781 2693                        3C            .byte	$3C
10782 2694                        18            .byte	$18
10783 2695                        7E            .byte	$7E
10784 2696                        00            .byte	0
10785 2697                        00            .byte	0
10786 2698                        00            .byte	0
10787 2699                        00            .byte	0
10788                                           ! 1228  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10789 269A                        00            .byte	0
10790 269B                        00            .byte	0
10791 269C                        18            .byte	$18
10792 269D                        3C            .byte	$3C
10793 269E                        7E            .byte	$7E
10794 269F                        18            .byte	$18
10795 26A0                        18            .byte	$18
10796 26A1                        18            .byte	$18
10797 26A2                        18            .byte	$18
10798 26A3                        18            .byte	$18
10799 26A4                        18            .byte	$18
10800 26A5                        18            .byte	$18
10801 26A6                        00            .byte	0
10802 26A7                        00            .byte	0
10803 26A8                        00            .byte	0
10804 26A9                        00            .byte	0
10805                                           ! 1229  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
10806 26AA                        00            .byte	0
10807 26AB                        00            .byte	0
10808 26AC                        18            .byte	$18
10809 26AD                        18            .byte	$18
10810 26AE                        18            .byte	$18
10811 26AF                        18            .byte	$18
10812 26B0                        18            .byte	$18
10813 26B1                        18            .byte	$18
10814 26B2                        18            .byte	$18
10815 26B3                        7E            .byte	$7E
10816 26B4                        3C            .byte	$3C
10817 26B5                        18            .byte	$18
10818 26B6                        00            .byte	0
10819 26B7                        00            .byte	0
10820 26B8                        00            .byte	0
10821 26B9                        00            .byte	0
10822                                           ! 1230  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10823 26BA                        00            .byte	0
10824 26BB                        00            .byte	0
10825 26BC                        00            .byte	0
10826 26BD                        00            .byte	0
10827 26BE                        00            .byte	0
10828 26BF                        18            .byte	$18
10829 26C0                        0C            .byte	$C
10830 26C1                        FE            .byte	$FE
10831 26C2                        0C            .byte	$C
10832 26C3                        18            .byte	$18
10833 26C4                        00            .byte	0
10834 26C5                        00            .byte	0
10835 26C6                        00            .byte	0
10836 26C7                        00            .byte	0
10837 26C8                        00            .byte	0
10838 26C9                        00            .byte	0
10839                                           ! 1231  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10840 26CA                        00            .byte	0
10841 26CB                        00            .byte	0
10842 26CC                        00            .byte	0
10843 26CD                        00            .byte	0
10844 26CE                        00            .byte	0
10845 26CF                        30            .byte	$30
10846 26D0                        60            .byte	$60
10847 26D1                        FE            .byte	$FE
10848 26D2                        60            .byte	$60
10849 26D3                        30            .byte	$30
10850 26D4                        00            .byte	0
10851 26D5                        00            .byte	0
10852 26D6                        00            .byte	0
10853 26D7                        00            .byte	0
10854 26D8                        00            .byte	0
10855 26D9                        00            .byte	0
10856                                           ! 1232  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10857 26DA                        00            .byte	0
10858 26DB                        00            .byte	0
10859 26DC                        00            .byte	0
10860 26DD                        00            .byte	0
10861 26DE                        00            .byte	0
10862 26DF                        00            .byte	0
10863 26E0                        C0            .byte	$C0
10864 26E1                        C0            .byte	$C0
10865 26E2                        C0            .byte	$C0
10866 26E3                        FE            .byte	$FE
10867 26E4                        00            .byte	0
10868 26E5                        00            .byte	0
10869 26E6                        00            .byte	0
10870 26E7                        00            .byte	0
10871 26E8                        00            .byte	0
10872 26E9                        00            .byte	0
10873                                           ! 1233  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10874 26EA                        00            .byte	0
10875 26EB                        00            .byte	0
10876 26EC                        00            .byte	0
10877 26ED                        00            .byte	0
10878 26EE                        00            .byte	0
10879 26EF                        24            .byte	$24
10880 26F0                        66            .byte	$66
10881 26F1                        FF            .byte	$FF
10882 26F2                        66            .byte	$66
10883 26F3                        24            .byte	$24
10884 26F4                        00            .byte	0
10885 26F5                        00            .byte	0
10886 26F6                        00            .byte	0
10887 26F7                        00            .byte	0
10888 26F8                        00            .byte	0
10889 26F9                        00            .byte	0
10890                                           ! 1234  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
10891 26FA                        00            .byte	0
10892 26FB                        00            .byte	0
10893 26FC                        00            .byte	0
10894 26FD                        00            .byte	0
10895 26FE                        10            .byte	$10
10896 26FF                        38            .byte	$38
10897 2700                        38            .byte	$38
10898 2701                        7C            .byte	$7C
10899 2702                        7C            .byte	$7C
10900 2703                        FE            .byte	$FE
10901 2704                        FE            .byte	$FE
10902 2705                        00            .byte	0
10903 2706                        00            .byte	0
10904 2707                        00            .byte	0
10905 2708                        00            .byte	0
10906 2709                        00            .byte	0
10907                                           ! 1235  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10908 270A                        00            .byte	0
10909 270B                        00            .byte	0
10910 270C                        00            .byte	0
10911 270D                        00            .byte	0
10912 270E                        FE            .byte	$FE
10913 270F                        FE            .byte	$FE
10914 2710                        7C            .byte	$7C
10915 2711                        7C            .byte	$7C
10916 2712                        38            .byte	$38
10917 2713                        38            .byte	$38
10918 2714                        10            .byte	$10
10919 2715                        00            .byte	0
10920 2716                        00            .byte	0
10921 2717                        00            .byte	0
10922 2718                        00            .byte	0
10923 2719                        00            .byte	0
10924                                           ! 1236  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10925 271A                        00            .byte	0
10926 271B                        00            .byte	0
10927 271C                        00            .byte	0
10928 271D                        00            .byte	0
10929 271E                        00            .byte	0
10930 271F                        00            .byte	0
10931 2720                        00            .byte	0
10932 2721                        00            .byte	0
10933 2722                        00            .byte	0
10934 2723                        00            .byte	0
10935 2724                        00            .byte	0
10936 2725                        00            .byte	0
10937 2726                        00            .byte	0
10938 2727                        00            .byte	0
10939 2728                        00            .byte	0
10940 2729                        00            .byte	0
10941                                           ! 1237  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10942 272A                        00            .byte	0
10943 272B                        00            .byte	0
10944 272C                        18            .byte	$18
10945 272D                        3C            .byte	$3C
10946 272E                        3C            .byte	$3C
10947 272F                        3C            .byte	$3C
10948 2730                        18            .byte	$18
10949 2731                        18            .byte	$18
10950 2732                        18            .byte	$18
10951 2733                        00            .byte	0
10952 2734                        18            .byte	$18
10953 2735                        18            .byte	$18
10954 2736                        00            .byte	0
10955 2737                        00            .byte	0
10956 2738                        00            .byte	0
10957 2739                        00            .byte	0
10958                                           ! 1238  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10959 273A                        00            .byte	0
10960 273B                        66            .byte	$66
10961 273C                        66            .byte	$66
10962 273D                        66            .byte	$66
10963 273E                        24            .byte	$24
10964 273F                        00            .byte	0
10965 2740                        00            .byte	0
10966 2741                        00            .byte	0
10967 2742                        00            .byte	0
10968 2743                        00            .byte	0
10969 2744                        00            .byte	0
10970 2745                        00            .byte	0
10971 2746                        00            .byte	0
10972 2747                        00            .byte	0
10973 2748                        00            .byte	0
10974 2749                        00            .byte	0
10975                                           ! 1239  0x00, 0x0
10976 274A                        00            .byte	0
10977                                           ! 1239 0, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
10978 274B                        00            .byte	0
10979 274C                        00            .byte	0
10980 274D                        6C            .byte	$6C
10981 274E                        6C            .byte	$6C
10982 274F                        FE            .byte	$FE
10983 2750                        6C            .byte	$6C
10984 2751                        6C            .byte	$6C
10985 2752                        6C            .byte	$6C
10986 2753                        FE            .byte	$FE
10987 2754                        6C            .byte	$6C
10988 2755                        6C            .byte	$6C
10989 2756                        00            .byte	0
10990 2757                        00            .byte	0
10991 2758                        00            .byte	0
10992 2759                        00            .byte	0
10993                                           ! 1240  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
10994 275A                        18            .byte	$18
10995 275B                        18            .byte	$18
10996 275C                        7C            .byte	$7C
10997 275D                        C6            .byte	$C6
10998 275E                        C2            .byte	$C2
10999 275F                        C0            .byte	$C0
11000 2760                        7C            .byte	$7C
11001 2761                        06            .byte	6
11002 2762                        06            .byte	6
11003 2763                        86            .byte	$86
11004 2764                        C6            .byte	$C6
11005 2765                        7C            .byte	$7C
11006 2766                        18            .byte	$18
11007 2767                        18            .byte	$18
11008 2768                        00            .byte	0
11009 2769                        00            .byte	0
11010                                           ! 1241  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11011 276A                        00            .byte	0
11012 276B                        00            .byte	0
11013 276C                        00            .byte	0
11014 276D                        00            .byte	0
11015 276E                        C2            .byte	$C2
11016 276F                        C6            .byte	$C6
11017 2770                        0C            .byte	$C
11018 2771                        18            .byte	$18
11019 2772                        30            .byte	$30
11020 2773                        60            .byte	$60
11021 2774                        C6            .byte	$C6
11022 2775                        86            .byte	$86
11023 2776                        00            .byte	0
11024 2777                        00            .byte	0
11025 2778                        00            .byte	0
11026 2779                        00            .byte	0
11027                                           ! 1242  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11028 277A                        00            .byte	0
11029 277B                        00            .byte	0
11030 277C                        38            .byte	$38
11031 277D                        6C            .byte	$6C
11032 277E                        6C            .byte	$6C
11033 277F                        38            .byte	$38
11034 2780                        76            .byte	$76
11035 2781                        DC            .byte	$DC
11036 2782                        CC            .byte	$CC
11037 2783                        CC            .byte	$CC
11038 2784                        CC            .byte	$CC
11039 2785                        76            .byte	$76
11040 2786                        00            .byte	0
11041 2787                        00            .byte	0
11042 2788                        00            .byte	0
11043 2789                        00            .byte	0
11044                                           ! 1243  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11045 278A                        00            .byte	0
11046 278B                        30            .byte	$30
11047 278C                        30            .byte	$30
11048 278D                        30            .byte	$30
11049 278E                        60            .byte	$60
11050 278F                        00            .byte	0
11051 2790                        00            .byte	0
11052 2791                        00            .byte	0
11053 2792                        00            .byte	0
11054 2793                        00            .byte	0
11055 2794                        00            .byte	0
11056 2795                        00            .byte	0
11057 2796                        00            .byte	0
11058 2797                        00            .byte	0
11059 2798                        00            .byte	0
11060 2799                        00            .byte	0
11061                                           ! 1244  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11062 279A                        00            .byte	0
11063 279B                        00            .byte	0
11064 279C                        0C            .byte	$C
11065 279D                        18            .byte	$18
11066 279E                        30            .byte	$30
11067 279F                        30            .byte	$30
11068 27A0                        30            .byte	$30
11069 27A1                        30            .byte	$30
11070 27A2                        30            .byte	$30
11071 27A3                        30            .byte	$30
11072 27A4                        18            .byte	$18
11073 27A5                        0C            .byte	$C
11074 27A6                        00            .byte	0
11075 27A7                        00            .byte	0
11076 27A8                        00            .byte	0
11077 27A9                        00            .byte	0
11078                                           ! 1245  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11079 27AA                        00            .byte	0
11080 27AB                        00            .byte	0
11081 27AC                        30            .byte	$30
11082 27AD                        18            .byte	$18
11083 27AE                        0C            .byte	$C
11084 27AF                        0C            .byte	$C
11085 27B0                        0C            .byte	$C
11086 27B1                        0C            .byte	$C
11087 27B2                        0C            .byte	$C
11088 27B3                        0C            .byte	$C
11089 27B4                        18            .byte	$18
11090 27B5                        30            .byte	$30
11091 27B6                        00            .byte	0
11092 27B7                        00            .byte	0
11093 27B8                        00            .byte	0
11094 27B9                        00            .byte	0
11095                                           ! 1246  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11096 27BA                        00            .byte	0
11097 27BB                        00            .byte	0
11098 27BC                        00            .byte	0
11099 27BD                        00            .byte	0
11100 27BE                        00            .byte	0
11101 27BF                        66            .byte	$66
11102 27C0                        3C            .byte	$3C
11103 27C1                        FF            .byte	$FF
11104 27C2                        3C            .byte	$3C
11105 27C3                        66            .byte	$66
11106 27C4                        00            .byte	0
11107 27C5                        00            .byte	0
11108 27C6                        00            .byte	0
11109 27C7                        00            .byte	0
11110 27C8                        00            .byte	0
11111 27C9                        00            .byte	0
11112                                           ! 1247  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11113 27CA                        00            .byte	0
11114 27CB                        00            .byte	0
11115 27CC                        00            .byte	0
11116 27CD                        00            .byte	0
11117 27CE                        00            .byte	0
11118 27CF                        18            .byte	$18
11119 27D0                        18            .byte	$18
11120 27D1                        7E            .byte	$7E
11121 27D2                        18            .byte	$18
11122 27D3                        18            .byte	$18
11123 27D4                        00            .byte	0
11124 27D5                        00            .byte	0
11125 27D6                        00            .byte	0
11126 27D7                        00            .byte	0
11127 27D8                        00            .byte	0
11128 27D9                        00            .byte	0
11129                                           ! 1248  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11130 27DA                        00            .byte	0
11131 27DB                        00            .byte	0
11132 27DC                        00            .byte	0
11133 27DD                        00            .byte	0
11134 27DE                        00            .byte	0
11135 27DF                        00            .byte	0
11136 27E0                        00            .byte	0
11137 27E1                        00            .byte	0
11138 27E2                        00            .byte	0
11139 27E3                        18            .byte	$18
11140 27E4                        18            .byte	$18
11141 27E5                        18            .byte	$18
11142 27E6                        30            .byte	$30
11143 27E7                        00            .byte	0
11144 27E8                        00            .byte	0
11145 27E9                        00            .byte	0
11146                                           ! 1249  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11147 27EA                        00            .byte	0
11148 27EB                        00            .byte	0
11149 27EC                        00            .byte	0
11150 27ED                        00            .byte	0
11151 27EE                        00            .byte	0
11152 27EF                        00            .byte	0
11153 27F0                        00            .byte	0
11154 27F1                        FE            .byte	$FE
11155 27F2                        00            .byte	0
11156 27F3                        00            .byte	0
11157 27F4                        00            .byte	0
11158 27F5                        00            .byte	0
11159 27F6                        00            .byte	0
11160 27F7                        00            .byte	0
11161 27F8                        00            .byte	0
11162 27F9                        00            .byte	0
11163                                           ! 1250  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11164 27FA                        00            .byte	0
11165 27FB                        00            .byte	0
11166 27FC                        00            .byte	0
11167 27FD                        00            .byte	0
11168 27FE                        00            .byte	0
11169 27FF                        00            .byte	0
11170 2800                        00            .byte	0
11171 2801                        00            .byte	0
11172 2802                        00            .byte	0
11173 2803                        00            .byte	0
11174 2804                        18            .byte	$18
11175 2805                        18            .byte	$18
11176 2806                        00            .byte	0
11177 2807                        00            .byte	0
11178 2808                        00            .byte	0
11179 2809                        00            .byte	0
11180                                           ! 1251  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11181 280A                        00            .byte	0
11182 280B                        00            .byte	0
11183 280C                        00            .byte	0
11184 280D                        00            .byte	0
11185 280E                        02            .byte	2
11186 280F                        06            .byte	6
11187 2810                        0C            .byte	$C
11188 2811                        18            .byte	$18
11189 2812                        30            .byte	$30
11190 2813                        60            .byte	$60
11191 2814                        C0            .byte	$C0
11192 2815                        80            .byte	$80
11193 2816                        00            .byte	0
11194 2817                        00            .byte	0
11195 2818                        00            .byte	0
11196 2819                        00            .byte	0
11197                                           ! 1252  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11198 281A                        00            .byte	0
11199 281B                        00            .byte	0
11200 281C                        3C            .byte	$3C
11201 281D                        66            .byte	$66
11202 281E                        C3            .byte	$C3
11203 281F                        C3            .byte	$C3
11204 2820                        DB            .byte	$DB
11205 2821                        DB            .byte	$DB
11206 2822                        C3            .byte	$C3
11207 2823                        C3            .byte	$C3
11208 2824                        66            .byte	$66
11209 2825                        3C            .byte	$3C
11210 2826                        00            .byte	0
11211 2827                        00            .byte	0
11212 2828                        00            .byte	0
11213 2829                        00            .byte	0
11214                                           ! 1253  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11215 282A                        00            .byte	0
11216 282B                        00            .byte	0
11217 282C                        18            .byte	$18
11218 282D                        38            .byte	$38
11219 282E                        78            .byte	$78
11220 282F                        18            .byte	$18
11221 2830                        18            .byte	$18
11222 2831                        18            .byte	$18
11223 2832                        18            .byte	$18
11224 2833                        18            .byte	$18
11225 2834                        18            .byte	$18
11226 2835                        7E            .byte	$7E
11227 2836                        00            .byte	0
11228 2837                        00            .byte	0
11229 2838                        00            .byte	0
11230 2839                        00            .byte	0
11231                                           ! 1254  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11232 283A                        00            .byte	0
11233 283B                        00            .byte	0
11234 283C                        7C            .byte	$7C
11235 283D                        C6            .byte	$C6
11236 283E                        06            .byte	6
11237 283F                        0C            .byte	$C
11238 2840                        18            .byte	$18
11239 2841                        30            .byte	$30
11240 2842                        60            .byte	$60
11241 2843                        C0            .byte	$C0
11242 2844                        C6            .byte	$C6
11243 2845                        FE            .byte	$FE
11244 2846                        00            .byte	0
11245 2847                        00            .byte	0
11246 2848                        00            .byte	0
11247 2849                        00            .byte	0
11248                                           ! 1255  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11249 284A                        00            .byte	0
11250 284B                        00            .byte	0
11251 284C                        7C            .byte	$7C
11252 284D                        C6            .byte	$C6
11253 284E                        06            .byte	6
11254 284F                        06            .byte	6
11255 2850                        3C            .byte	$3C
11256 2851                        06            .byte	6
11257 2852                        06            .byte	6
11258 2853                        06            .byte	6
11259 2854                        C6            .byte	$C6
11260 2855                        7C            .byte	$7C
11261 2856                        00            .byte	0
11262 2857                        00            .byte	0
11263 2858                        00            .byte	0
11264 2859                        00            .byte	0
11265                                           ! 1256  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11266 285A                        00            .byte	0
11267 285B                        00            .byte	0
11268 285C                        0C            .byte	$C
11269 285D                        1C            .byte	$1C
11270 285E                        3C            .byte	$3C
11271 285F                        6C            .byte	$6C
11272 2860                        CC            .byte	$CC
11273 2861                        FE            .byte	$FE
11274 2862                        0C            .byte	$C
11275 2863                        0C            .byte	$C
11276 2864                        0C            .byte	$C
11277 2865                        1E            .byte	$1E
11278 2866                        00            .byte	0
11279 2867                        00            .byte	0
11280 2868                        00            .byte	0
11281 2869                        00            .byte	0
11282                                           ! 1257  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11283 286A                        00            .byte	0
11284 286B                        00            .byte	0
11285 286C                        FE            .byte	$FE
11286 286D                        C0            .byte	$C0
11287 286E                        C0            .byte	$C0
11288 286F                        C0            .byte	$C0
11289 2870                        FC            .byte	$FC
11290 2871                        06            .byte	6
11291 2872                        06            .byte	6
11292 2873                        06            .byte	6
11293 2874                        C6            .byte	$C6
11294 2875                        7C            .byte	$7C
11295 2876                        00            .byte	0
11296 2877                        00            .byte	0
11297 2878                        00            .byte	0
11298 2879                        00            .byte	0
11299                                           ! 1258  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11300 287A                        00            .byte	0
11301 287B                        00            .byte	0
11302 287C                        38            .byte	$38
11303 287D                        60            .byte	$60
11304 287E                        C0            .byte	$C0
11305 287F                        C0            .byte	$C0
11306 2880                        FC            .byte	$FC
11307 2881                        C6            .byte	$C6
11308 2882                        C6            .byte	$C6
11309 2883                        C6            .byte	$C6
11310 2884                        C6            .byte	$C6
11311 2885                        7C            .byte	$7C
11312 2886                        00            .byte	0
11313 2887                        00            .byte	0
11314 2888                        00            .byte	0
11315 2889                        00            .byte	0
11316                                           ! 1259  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11317 288A                        00            .byte	0
11318 288B                        00            .byte	0
11319 288C                        FE            .byte	$FE
11320 288D                        C6            .byte	$C6
11321 288E                        06            .byte	6
11322 288F                        06            .byte	6
11323 2890                        0C            .byte	$C
11324 2891                        18            .byte	$18
11325 2892                        30            .byte	$30
11326 2893                        30            .byte	$30
11327 2894                        30            .byte	$30
11328 2895                        30            .byte	$30
11329 2896                        00            .byte	0
11330 2897                        00            .byte	0
11331 2898                        00            .byte	0
11332 2899                        00            .byte	0
11333                                           ! 1260  0x00, 0x00, 0x7c, 0x
11334 289A                        00            .byte	0
11335 289B                        00            .byte	0
11336 289C                        7C            .byte	$7C
11337                                           ! 1260 c6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11338 289D                        C6            .byte	$C6
11339 289E                        C6            .byte	$C6
11340 289F                        C6            .byte	$C6
11341 28A0                        7C            .byte	$7C
11342 28A1                        C6            .byte	$C6
11343 28A2                        C6            .byte	$C6
11344 28A3                        C6            .byte	$C6
11345 28A4                        C6            .byte	$C6
11346 28A5                        7C            .byte	$7C
11347 28A6                        00            .byte	0
11348 28A7                        00            .byte	0
11349 28A8                        00            .byte	0
11350 28A9                        00            .byte	0
11351                                           ! 1261  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11352 28AA                        00            .byte	0
11353 28AB                        00            .byte	0
11354 28AC                        7C            .byte	$7C
11355 28AD                        C6            .byte	$C6
11356 28AE                        C6            .byte	$C6
11357 28AF                        C6            .byte	$C6
11358 28B0                        7E            .byte	$7E
11359 28B1                        06            .byte	6
11360 28B2                        06            .byte	6
11361 28B3                        06            .byte	6
11362 28B4                        0C            .byte	$C
11363 28B5                        78            .byte	$78
11364 28B6                        00            .byte	0
11365 28B7                        00            .byte	0
11366 28B8                        00            .byte	0
11367 28B9                        00            .byte	0
11368                                           ! 1262  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11369 28BA                        00            .byte	0
11370 28BB                        00            .byte	0
11371 28BC                        00            .byte	0
11372 28BD                        00            .byte	0
11373 28BE                        18            .byte	$18
11374 28BF                        18            .byte	$18
11375 28C0                        00            .byte	0
11376 28C1                        00            .byte	0
11377 28C2                        00            .byte	0
11378 28C3                        18            .byte	$18
11379 28C4                        18            .byte	$18
11380 28C5                        00            .byte	0
11381 28C6                        00            .byte	0
11382 28C7                        00            .byte	0
11383 28C8                        00            .byte	0
11384 28C9                        00            .byte	0
11385                                           ! 1263  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11386 28CA                        00            .byte	0
11387 28CB                        00            .byte	0
11388 28CC                        00            .byte	0
11389 28CD                        00            .byte	0
11390 28CE                        18            .byte	$18
11391 28CF                        18            .byte	$18
11392 28D0                        00            .byte	0
11393 28D1                        00            .byte	0
11394 28D2                        00            .byte	0
11395 28D3                        18            .byte	$18
11396 28D4                        18            .byte	$18
11397 28D5                        30            .byte	$30
11398 28D6                        00            .byte	0
11399 28D7                        00            .byte	0
11400 28D8                        00            .byte	0
11401 28D9                        00            .byte	0
11402                                           ! 1264  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11403 28DA                        00            .byte	0
11404 28DB                        00            .byte	0
11405 28DC                        00            .byte	0
11406 28DD                        06            .byte	6
11407 28DE                        0C            .byte	$C
11408 28DF                        18            .byte	$18
11409 28E0                        30            .byte	$30
11410 28E1                        60            .byte	$60
11411 28E2                        30            .byte	$30
11412 28E3                        18            .byte	$18
11413 28E4                        0C            .byte	$C
11414 28E5                        06            .byte	6
11415 28E6                        00            .byte	0
11416 28E7                        00            .byte	0
11417 28E8                        00            .byte	0
11418 28E9                        00            .byte	0
11419                                           ! 1265  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11420 28EA                        00            .byte	0
11421 28EB                        00            .byte	0
11422 28EC                        00            .byte	0
11423 28ED                        00            .byte	0
11424 28EE                        00            .byte	0
11425 28EF                        7E            .byte	$7E
11426 28F0                        00            .byte	0
11427 28F1                        00            .byte	0
11428 28F2                        7E            .byte	$7E
11429 28F3                        00            .byte	0
11430 28F4                        00            .byte	0
11431 28F5                        00            .byte	0
11432 28F6                        00            .byte	0
11433 28F7                        00            .byte	0
11434 28F8                        00            .byte	0
11435 28F9                        00            .byte	0
11436                                           ! 1266  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11437 28FA                        00            .byte	0
11438 28FB                        00            .byte	0
11439 28FC                        00            .byte	0
11440 28FD                        60            .byte	$60
11441 28FE                        30            .byte	$30
11442 28FF                        18            .byte	$18
11443 2900                        0C            .byte	$C
11444 2901                        06            .byte	6
11445 2902                        0C            .byte	$C
11446 2903                        18            .byte	$18
11447 2904                        30            .byte	$30
11448 2905                        60            .byte	$60
11449 2906                        00            .byte	0
11450 2907                        00            .byte	0
11451 2908                        00            .byte	0
11452 2909                        00            .byte	0
11453                                           ! 1267  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11454 290A                        00            .byte	0
11455 290B                        00            .byte	0
11456 290C                        7C            .byte	$7C
11457 290D                        C6            .byte	$C6
11458 290E                        C6            .byte	$C6
11459 290F                        0C            .byte	$C
11460 2910                        18            .byte	$18
11461 2911                        18            .byte	$18
11462 2912                        18            .byte	$18
11463 2913                        00            .byte	0
11464 2914                        18            .byte	$18
11465 2915                        18            .byte	$18
11466 2916                        00            .byte	0
11467 2917                        00            .byte	0
11468 2918                        00            .byte	0
11469 2919                        00            .byte	0
11470                                           ! 1268  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11471 291A                        00            .byte	0
11472 291B                        00            .byte	0
11473 291C                        00            .byte	0
11474 291D                        7C            .byte	$7C
11475 291E                        C6            .byte	$C6
11476 291F                        C6            .byte	$C6
11477 2920                        DE            .byte	$DE
11478 2921                        DE            .byte	$DE
11479 2922                        DE            .byte	$DE
11480 2923                        DC            .byte	$DC
11481 2924                        C0            .byte	$C0
11482 2925                        7C            .byte	$7C
11483 2926                        00            .byte	0
11484 2927                        00            .byte	0
11485 2928                        00            .byte	0
11486 2929                        00            .byte	0
11487                                           ! 1269  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11488 292A                        00            .byte	0
11489 292B                        00            .byte	0
11490 292C                        10            .byte	$10
11491 292D                        38            .byte	$38
11492 292E                        6C            .byte	$6C
11493 292F                        C6            .byte	$C6
11494 2930                        C6            .byte	$C6
11495 2931                        FE            .byte	$FE
11496 2932                        C6            .byte	$C6
11497 2933                        C6            .byte	$C6
11498 2934                        C6            .byte	$C6
11499 2935                        C6            .byte	$C6
11500 2936                        00            .byte	0
11501 2937                        00            .byte	0
11502 2938                        00            .byte	0
11503 2939                        00            .byte	0
11504                                           ! 1270  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11505 293A                        00            .byte	0
11506 293B                        00            .byte	0
11507 293C                        FC            .byte	$FC
11508 293D                        66            .byte	$66
11509 293E                        66            .byte	$66
11510 293F                        66            .byte	$66
11511 2940                        7C            .byte	$7C
11512 2941                        66            .byte	$66
11513 2942                        66            .byte	$66
11514 2943                        66            .byte	$66
11515 2944                        66            .byte	$66
11516 2945                        FC            .byte	$FC
11517 2946                        00            .byte	0
11518 2947                        00            .byte	0
11519 2948                        00            .byte	0
11520 2949                        00            .byte	0
11521                                           ! 1271  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11522 294A                        00            .byte	0
11523 294B                        00            .byte	0
11524 294C                        3C            .byte	$3C
11525 294D                        66            .byte	$66
11526 294E                        C2            .byte	$C2
11527 294F                        C0            .byte	$C0
11528 2950                        C0            .byte	$C0
11529 2951                        C0            .byte	$C0
11530 2952                        C0            .byte	$C0
11531 2953                        C2            .byte	$C2
11532 2954                        66            .byte	$66
11533 2955                        3C            .byte	$3C
11534 2956                        00            .byte	0
11535 2957                        00            .byte	0
11536 2958                        00            .byte	0
11537 2959                        00            .byte	0
11538                                           ! 1272  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11539 295A                        00            .byte	0
11540 295B                        00            .byte	0
11541 295C                        F8            .byte	$F8
11542 295D                        6C            .byte	$6C
11543 295E                        66            .byte	$66
11544 295F                        66            .byte	$66
11545 2960                        66            .byte	$66
11546 2961                        66            .byte	$66
11547 2962                        66            .byte	$66
11548 2963                        66            .byte	$66
11549 2964                        6C            .byte	$6C
11550 2965                        F8            .byte	$F8
11551 2966                        00            .byte	0
11552 2967                        00            .byte	0
11553 2968                        00            .byte	0
11554 2969                        00            .byte	0
11555                                           ! 1273  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11556 296A                        00            .byte	0
11557 296B                        00            .byte	0
11558 296C                        FE            .byte	$FE
11559 296D                        66            .byte	$66
11560 296E                        62            .byte	$62
11561 296F                        68            .byte	$68
11562 2970                        78            .byte	$78
11563 2971                        68            .byte	$68
11564 2972                        60            .byte	$60
11565 2973                        62            .byte	$62
11566 2974                        66            .byte	$66
11567 2975                        FE            .byte	$FE
11568 2976                        00            .byte	0
11569 2977                        00            .byte	0
11570 2978                        00            .byte	0
11571 2979                        00            .byte	0
11572                                           ! 1274  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11573 297A                        00            .byte	0
11574 297B                        00            .byte	0
11575 297C                        FE            .byte	$FE
11576 297D                        66            .byte	$66
11577 297E                        62            .byte	$62
11578 297F                        68            .byte	$68
11579 2980                        78            .byte	$78
11580 2981                        68            .byte	$68
11581 2982                        60            .byte	$60
11582 2983                        60            .byte	$60
11583 2984                        60            .byte	$60
11584 2985                        F0            .byte	$F0
11585 2986                        00            .byte	0
11586 2987                        00            .byte	0
11587 2988                        00            .byte	0
11588 2989                        00            .byte	0
11589                                           ! 1275  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11590 298A                        00            .byte	0
11591 298B                        00            .byte	0
11592 298C                        3C            .byte	$3C
11593 298D                        66            .byte	$66
11594 298E                        C2            .byte	$C2
11595 298F                        C0            .byte	$C0
11596 2990                        C0            .byte	$C0
11597 2991                        DE            .byte	$DE
11598 2992                        C6            .byte	$C6
11599 2993                        C6            .byte	$C6
11600 2994                        66            .byte	$66
11601 2995                        3A            .byte	$3A
11602 2996                        00            .byte	0
11603 2997                        00            .byte	0
11604 2998                        00            .byte	0
11605 2999                        00            .byte	0
11606                                           ! 1276  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11607 299A                        00            .byte	0
11608 299B                        00            .byte	0
11609 299C                        C6            .byte	$C6
11610 299D                        C6            .byte	$C6
11611 299E                        C6            .byte	$C6
11612 299F                        C6            .byte	$C6
11613 29A0                        FE            .byte	$FE
11614 29A1                        C6            .byte	$C6
11615 29A2                        C6            .byte	$C6
11616 29A3                        C6            .byte	$C6
11617 29A4                        C6            .byte	$C6
11618 29A5                        C6            .byte	$C6
11619 29A6                        00            .byte	0
11620 29A7                        00            .byte	0
11621 29A8                        00            .byte	0
11622 29A9                        00            .byte	0
11623                                           ! 1277  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11624 29AA                        00            .byte	0
11625 29AB                        00            .byte	0
11626 29AC                        3C            .byte	$3C
11627 29AD                        18            .byte	$18
11628 29AE                        18            .byte	$18
11629 29AF                        18            .byte	$18
11630 29B0                        18            .byte	$18
11631 29B1                        18            .byte	$18
11632 29B2                        18            .byte	$18
11633 29B3                        18            .byte	$18
11634 29B4                        18            .byte	$18
11635 29B5                        3C            .byte	$3C
11636 29B6                        00            .byte	0
11637 29B7                        00            .byte	0
11638 29B8                        00            .byte	0
11639 29B9                        00            .byte	0
11640                                           ! 1278  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11641 29BA                        00            .byte	0
11642 29BB                        00            .byte	0
11643 29BC                        1E            .byte	$1E
11644 29BD                        0C            .byte	$C
11645 29BE                        0C            .byte	$C
11646 29BF                        0C            .byte	$C
11647 29C0                        0C            .byte	$C
11648 29C1                        0C            .byte	$C
11649 29C2                        CC            .byte	$CC
11650 29C3                        CC            .byte	$CC
11651 29C4                        CC            .byte	$CC
11652 29C5                        78            .byte	$78
11653 29C6                        00            .byte	0
11654 29C7                        00            .byte	0
11655 29C8                        00            .byte	0
11656 29C9                        00            .byte	0
11657                                           ! 1279  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11658 29CA                        00            .byte	0
11659 29CB                        00            .byte	0
11660 29CC                        E6            .byte	$E6
11661 29CD                        66            .byte	$66
11662 29CE                        66            .byte	$66
11663 29CF                        6C            .byte	$6C
11664 29D0                        78            .byte	$78
11665 29D1                        78            .byte	$78
11666 29D2                        6C            .byte	$6C
11667 29D3                        66            .byte	$66
11668 29D4                        66            .byte	$66
11669 29D5                        E6            .byte	$E6
11670 29D6                        00            .byte	0
11671 29D7                        00            .byte	0
11672 29D8                        00            .byte	0
11673 29D9                        00            .byte	0
11674                                           ! 1280  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11675 29DA                        00            .byte	0
11676 29DB                        00            .byte	0
11677 29DC                        F0            .byte	$F0
11678 29DD                        60            .byte	$60
11679 29DE                        60            .byte	$60
11680 29DF                        60            .byte	$60
11681 29E0                        60            .byte	$60
11682 29E1                        60            .byte	$60
11683 29E2                        60            .byte	$60
11684 29E3                        62            .byte	$62
11685 29E4                        66            .byte	$66
11686 29E5                        FE            .byte	$FE
11687 29E6                        00            .byte	0
11688 29E7                        00            .byte	0
11689 29E8                        00            .byte	0
11690 29E9                        00            .byte	0
11691                                           ! 1281  0x00, 0x00, 0xc3, 0xe7, 0xff, 0
11692 29EA                        00            .byte	0
11693 29EB                        00            .byte	0
11694 29EC                        C3            .byte	$C3
11695 29ED                        E7            .byte	$E7
11696 29EE                        FF            .byte	$FF
11697                                           ! 1281 xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11698 29EF                        FF            .byte	$FF
11699 29F0                        DB            .byte	$DB
11700 29F1                        C3            .byte	$C3
11701 29F2                        C3            .byte	$C3
11702 29F3                        C3            .byte	$C3
11703 29F4                        C3            .byte	$C3
11704 29F5                        C3            .byte	$C3
11705 29F6                        00            .byte	0
11706 29F7                        00            .byte	0
11707 29F8                        00            .byte	0
11708 29F9                        00            .byte	0
11709                                           ! 1282  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11710 29FA                        00            .byte	0
11711 29FB                        00            .byte	0
11712 29FC                        C6            .byte	$C6
11713 29FD                        E6            .byte	$E6
11714 29FE                        F6            .byte	$F6
11715 29FF                        FE            .byte	$FE
11716 2A00                        DE            .byte	$DE
11717 2A01                        CE            .byte	$CE
11718 2A02                        C6            .byte	$C6
11719 2A03                        C6            .byte	$C6
11720 2A04                        C6            .byte	$C6
11721 2A05                        C6            .byte	$C6
11722 2A06                        00            .byte	0
11723 2A07                        00            .byte	0
11724 2A08                        00            .byte	0
11725 2A09                        00            .byte	0
11726                                           ! 1283  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11727 2A0A                        00            .byte	0
11728 2A0B                        00            .byte	0
11729 2A0C                        7C            .byte	$7C
11730 2A0D                        C6            .byte	$C6
11731 2A0E                        C6            .byte	$C6
11732 2A0F                        C6            .byte	$C6
11733 2A10                        C6            .byte	$C6
11734 2A11                        C6            .byte	$C6
11735 2A12                        C6            .byte	$C6
11736 2A13                        C6            .byte	$C6
11737 2A14                        C6            .byte	$C6
11738 2A15                        7C            .byte	$7C
11739 2A16                        00            .byte	0
11740 2A17                        00            .byte	0
11741 2A18                        00            .byte	0
11742 2A19                        00            .byte	0
11743                                           ! 1284  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11744 2A1A                        00            .byte	0
11745 2A1B                        00            .byte	0
11746 2A1C                        FC            .byte	$FC
11747 2A1D                        66            .byte	$66
11748 2A1E                        66            .byte	$66
11749 2A1F                        66            .byte	$66
11750 2A20                        7C            .byte	$7C
11751 2A21                        60            .byte	$60
11752 2A22                        60            .byte	$60
11753 2A23                        60            .byte	$60
11754 2A24                        60            .byte	$60
11755 2A25                        F0            .byte	$F0
11756 2A26                        00            .byte	0
11757 2A27                        00            .byte	0
11758 2A28                        00            .byte	0
11759 2A29                        00            .byte	0
11760                                           ! 1285  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
11761 2A2A                        00            .byte	0
11762 2A2B                        00            .byte	0
11763 2A2C                        7C            .byte	$7C
11764 2A2D                        C6            .byte	$C6
11765 2A2E                        C6            .byte	$C6
11766 2A2F                        C6            .byte	$C6
11767 2A30                        C6            .byte	$C6
11768 2A31                        C6            .byte	$C6
11769 2A32                        C6            .byte	$C6
11770 2A33                        D6            .byte	$D6
11771 2A34                        DE            .byte	$DE
11772 2A35                        7C            .byte	$7C
11773 2A36                        0C            .byte	$C
11774 2A37                        0E            .byte	$E
11775 2A38                        00            .byte	0
11776 2A39                        00            .byte	0
11777                                           ! 1286  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11778 2A3A                        00            .byte	0
11779 2A3B                        00            .byte	0
11780 2A3C                        FC            .byte	$FC
11781 2A3D                        66            .byte	$66
11782 2A3E                        66            .byte	$66
11783 2A3F                        66            .byte	$66
11784 2A40                        7C            .byte	$7C
11785 2A41                        6C            .byte	$6C
11786 2A42                        66            .byte	$66
11787 2A43                        66            .byte	$66
11788 2A44                        66            .byte	$66
11789 2A45                        E6            .byte	$E6
11790 2A46                        00            .byte	0
11791 2A47                        00            .byte	0
11792 2A48                        00            .byte	0
11793 2A49                        00            .byte	0
11794                                           ! 1287  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11795 2A4A                        00            .byte	0
11796 2A4B                        00            .byte	0
11797 2A4C                        7C            .byte	$7C
11798 2A4D                        C6            .byte	$C6
11799 2A4E                        C6            .byte	$C6
11800 2A4F                        60            .byte	$60
11801 2A50                        38            .byte	$38
11802 2A51                        0C            .byte	$C
11803 2A52                        06            .byte	6
11804 2A53                        C6            .byte	$C6
11805 2A54                        C6            .byte	$C6
11806 2A55                        7C            .byte	$7C
11807 2A56                        00            .byte	0
11808 2A57                        00            .byte	0
11809 2A58                        00            .byte	0
11810 2A59                        00            .byte	0
11811                                           ! 1288  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11812 2A5A                        00            .byte	0
11813 2A5B                        00            .byte	0
11814 2A5C                        FF            .byte	$FF
11815 2A5D                        DB            .byte	$DB
11816 2A5E                        99            .byte	$99
11817 2A5F                        18            .byte	$18
11818 2A60                        18            .byte	$18
11819 2A61                        18            .byte	$18
11820 2A62                        18            .byte	$18
11821 2A63                        18            .byte	$18
11822 2A64                        18            .byte	$18
11823 2A65                        3C            .byte	$3C
11824 2A66                        00            .byte	0
11825 2A67                        00            .byte	0
11826 2A68                        00            .byte	0
11827 2A69                        00            .byte	0
11828                                           ! 1289  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11829 2A6A                        00            .byte	0
11830 2A6B                        00            .byte	0
11831 2A6C                        C6            .byte	$C6
11832 2A6D                        C6            .byte	$C6
11833 2A6E                        C6            .byte	$C6
11834 2A6F                        C6            .byte	$C6
11835 2A70                        C6            .byte	$C6
11836 2A71                        C6            .byte	$C6
11837 2A72                        C6            .byte	$C6
11838 2A73                        C6            .byte	$C6
11839 2A74                        C6            .byte	$C6
11840 2A75                        7C            .byte	$7C
11841 2A76                        00            .byte	0
11842 2A77                        00            .byte	0
11843 2A78                        00            .byte	0
11844 2A79                        00            .byte	0
11845                                           ! 1290  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11846 2A7A                        00            .byte	0
11847 2A7B                        00            .byte	0
11848 2A7C                        C3            .byte	$C3
11849 2A7D                        C3            .byte	$C3
11850 2A7E                        C3            .byte	$C3
11851 2A7F                        C3            .byte	$C3
11852 2A80                        C3            .byte	$C3
11853 2A81                        C3            .byte	$C3
11854 2A82                        C3            .byte	$C3
11855 2A83                        66            .byte	$66
11856 2A84                        3C            .byte	$3C
11857 2A85                        18            .byte	$18
11858 2A86                        00            .byte	0
11859 2A87                        00            .byte	0
11860 2A88                        00            .byte	0
11861 2A89                        00            .byte	0
11862                                           ! 1291  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11863 2A8A                        00            .byte	0
11864 2A8B                        00            .byte	0
11865 2A8C                        C3            .byte	$C3
11866 2A8D                        C3            .byte	$C3
11867 2A8E                        C3            .byte	$C3
11868 2A8F                        C3            .byte	$C3
11869 2A90                        C3            .byte	$C3
11870 2A91                        DB            .byte	$DB
11871 2A92                        DB            .byte	$DB
11872 2A93                        FF            .byte	$FF
11873 2A94                        66            .byte	$66
11874 2A95                        66            .byte	$66
11875 2A96                        00            .byte	0
11876 2A97                        00            .byte	0
11877 2A98                        00            .byte	0
11878 2A99                        00            .byte	0
11879                                           ! 1292  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11880 2A9A                        00            .byte	0
11881 2A9B                        00            .byte	0
11882 2A9C                        C3            .byte	$C3
11883 2A9D                        C3            .byte	$C3
11884 2A9E                        66            .byte	$66
11885 2A9F                        3C            .byte	$3C
11886 2AA0                        18            .byte	$18
11887 2AA1                        18            .byte	$18
11888 2AA2                        3C            .byte	$3C
11889 2AA3                        66            .byte	$66
11890 2AA4                        C3            .byte	$C3
11891 2AA5                        C3            .byte	$C3
11892 2AA6                        00            .byte	0
11893 2AA7                        00            .byte	0
11894 2AA8                        00            .byte	0
11895 2AA9                        00            .byte	0
11896                                           ! 1293  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11897 2AAA                        00            .byte	0
11898 2AAB                        00            .byte	0
11899 2AAC                        C3            .byte	$C3
11900 2AAD                        C3            .byte	$C3
11901 2AAE                        C3            .byte	$C3
11902 2AAF                        66            .byte	$66
11903 2AB0                        3C            .byte	$3C
11904 2AB1                        18            .byte	$18
11905 2AB2                        18            .byte	$18
11906 2AB3                        18            .byte	$18
11907 2AB4                        18            .byte	$18
11908 2AB5                        3C            .byte	$3C
11909 2AB6                        00            .byte	0
11910 2AB7                        00            .byte	0
11911 2AB8                        00            .byte	0
11912 2AB9                        00            .byte	0
11913                                           ! 1294  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
11914 2ABA                        00            .byte	0
11915 2ABB                        00            .byte	0
11916 2ABC                        FF            .byte	$FF
11917 2ABD                        C3            .byte	$C3
11918 2ABE                        86            .byte	$86
11919 2ABF                        0C            .byte	$C
11920 2AC0                        18            .byte	$18
11921 2AC1                        30            .byte	$30
11922 2AC2                        60            .byte	$60
11923 2AC3                        C1            .byte	$C1
11924 2AC4                        C3            .byte	$C3
11925 2AC5                        FF            .byte	$FF
11926 2AC6                        00            .byte	0
11927 2AC7                        00            .byte	0
11928 2AC8                        00            .byte	0
11929 2AC9                        00            .byte	0
11930                                           ! 1295  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
11931 2ACA                        00            .byte	0
11932 2ACB                        00            .byte	0
11933 2ACC                        3C            .byte	$3C
11934 2ACD                        30            .byte	$30
11935 2ACE                        30            .byte	$30
11936 2ACF                        30            .byte	$30
11937 2AD0                        30            .byte	$30
11938 2AD1                        30            .byte	$30
11939 2AD2                        30            .byte	$30
11940 2AD3                        30            .byte	$30
11941 2AD4                        30            .byte	$30
11942 2AD5                        3C            .byte	$3C
11943 2AD6                        00            .byte	0
11944 2AD7                        00            .byte	0
11945 2AD8                        00            .byte	0
11946 2AD9                        00            .byte	0
11947                                           ! 1296  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
11948 2ADA                        00            .byte	0
11949 2ADB                        00            .byte	0
11950 2ADC                        00            .byte	0
11951 2ADD                        80            .byte	$80
11952 2ADE                        C0            .byte	$C0
11953 2ADF                        E0            .byte	$E0
11954 2AE0                        70            .byte	$70
11955 2AE1                        38            .byte	$38
11956 2AE2                        1C            .byte	$1C
11957 2AE3                        0E            .byte	$E
11958 2AE4                        06            .byte	6
11959 2AE5                        02            .byte	2
11960 2AE6                        00            .byte	0
11961 2AE7                        00            .byte	0
11962 2AE8                        00            .byte	0
11963 2AE9                        00            .byte	0
11964                                           ! 1297  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
11965 2AEA                        00            .byte	0
11966 2AEB                        00            .byte	0
11967 2AEC                        3C            .byte	$3C
11968 2AED                        0C            .byte	$C
11969 2AEE                        0C            .byte	$C
11970 2AEF                        0C            .byte	$C
11971 2AF0                        0C            .byte	$C
11972 2AF1                        0C            .byte	$C
11973 2AF2                        0C            .byte	$C
11974 2AF3                        0C            .byte	$C
11975 2AF4                        0C            .byte	$C
11976 2AF5                        3C            .byte	$3C
11977 2AF6                        00            .byte	0
11978 2AF7                        00            .byte	0
11979 2AF8                        00            .byte	0
11980 2AF9                        00            .byte	0
11981                                           ! 1298  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11982 2AFA                        10            .byte	$10
11983 2AFB                        38            .byte	$38
11984 2AFC                        6C            .byte	$6C
11985 2AFD                        C6            .byte	$C6
11986 2AFE                        00            .byte	0
11987 2AFF                        00            .byte	0
11988 2B00                        00            .byte	0
11989 2B01                        00            .byte	0
11990 2B02                        00            .byte	0
11991 2B03                        00            .byte	0
11992 2B04                        00            .byte	0
11993 2B05                        00            .byte	0
11994 2B06                        00            .byte	0
11995 2B07                        00            .byte	0
11996 2B08                        00            .byte	0
11997 2B09                        00            .byte	0
11998                                           ! 1299  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
11999 2B0A                        00            .byte	0
12000 2B0B                        00            .byte	0
12001 2B0C                        00            .byte	0
12002 2B0D                        00            .byte	0
12003 2B0E                        00            .byte	0
12004 2B0F                        00            .byte	0
12005 2B10                        00            .byte	0
12006 2B11                        00            .byte	0
12007 2B12                        00            .byte	0
12008 2B13                        00            .byte	0
12009 2B14                        00            .byte	0
12010 2B15                        00            .byte	0
12011 2B16                        00            .byte	0
12012 2B17                        FF            .byte	$FF
12013 2B18                        00            .byte	0
12014 2B19                        00            .byte	0
12015                                           ! 1300  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12016 2B1A                        30            .byte	$30
12017 2B1B                        30            .byte	$30
12018 2B1C                        18            .byte	$18
12019 2B1D                        00            .byte	0
12020 2B1E                        00            .byte	0
12021 2B1F                        00            .byte	0
12022 2B20                        00            .byte	0
12023 2B21                        00            .byte	0
12024 2B22                        00            .byte	0
12025 2B23                        00            .byte	0
12026 2B24                        00            .byte	0
12027 2B25                        00            .byte	0
12028 2B26                        00            .byte	0
12029 2B27                        00            .byte	0
12030 2B28                        00            .byte	0
12031 2B29                        00            .byte	0
12032                                           ! 1301  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12033 2B2A                        00            .byte	0
12034 2B2B                        00            .byte	0
12035 2B2C                        00            .byte	0
12036 2B2D                        00            .byte	0
12037 2B2E                        00            .byte	0
12038 2B2F                        78            .byte	$78
12039 2B30                        0C            .byte	$C
12040 2B31                        7C            .byte	$7C
12041 2B32                        CC            .byte	$CC
12042 2B33                        CC            .byte	$CC
12043 2B34                        CC            .byte	$CC
12044 2B35                        76            .byte	$76
12045 2B36                        00            .byte	0
12046 2B37                        00            .byte	0
12047 2B38                        00            .byte	0
12048 2B39                        00            .byte	0
12049                                           ! 1302  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 
12050 2B3A                        00            .byte	0
12051 2B3B                        00            .byte	0
12052 2B3C                        E0            .byte	$E0
12053 2B3D                        60            .byte	$60
12054 2B3E                        60            .byte	$60
12055 2B3F                        78            .byte	$78
12056 2B40                        6C            .byte	$6C
12057                                           ! 1302 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12058 2B41                        66            .byte	$66
12059 2B42                        66            .byte	$66
12060 2B43                        66            .byte	$66
12061 2B44                        66            .byte	$66
12062 2B45                        7C            .byte	$7C
12063 2B46                        00            .byte	0
12064 2B47                        00            .byte	0
12065 2B48                        00            .byte	0
12066 2B49                        00            .byte	0
12067                                           ! 1303  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12068 2B4A                        00            .byte	0
12069 2B4B                        00            .byte	0
12070 2B4C                        00            .byte	0
12071 2B4D                        00            .byte	0
12072 2B4E                        00            .byte	0
12073 2B4F                        7C            .byte	$7C
12074 2B50                        C6            .byte	$C6
12075 2B51                        C0            .byte	$C0
12076 2B52                        C0            .byte	$C0
12077 2B53                        C0            .byte	$C0
12078 2B54                        C6            .byte	$C6
12079 2B55                        7C            .byte	$7C
12080 2B56                        00            .byte	0
12081 2B57                        00            .byte	0
12082 2B58                        00            .byte	0
12083 2B59                        00            .byte	0
12084                                           ! 1304  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12085 2B5A                        00            .byte	0
12086 2B5B                        00            .byte	0
12087 2B5C                        1C            .byte	$1C
12088 2B5D                        0C            .byte	$C
12089 2B5E                        0C            .byte	$C
12090 2B5F                        3C            .byte	$3C
12091 2B60                        6C            .byte	$6C
12092 2B61                        CC            .byte	$CC
12093 2B62                        CC            .byte	$CC
12094 2B63                        CC            .byte	$CC
12095 2B64                        CC            .byte	$CC
12096 2B65                        76            .byte	$76
12097 2B66                        00            .byte	0
12098 2B67                        00            .byte	0
12099 2B68                        00            .byte	0
12100 2B69                        00            .byte	0
12101                                           ! 1305  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12102 2B6A                        00            .byte	0
12103 2B6B                        00            .byte	0
12104 2B6C                        00            .byte	0
12105 2B6D                        00            .byte	0
12106 2B6E                        00            .byte	0
12107 2B6F                        7C            .byte	$7C
12108 2B70                        C6            .byte	$C6
12109 2B71                        FE            .byte	$FE
12110 2B72                        C0            .byte	$C0
12111 2B73                        C0            .byte	$C0
12112 2B74                        C6            .byte	$C6
12113 2B75                        7C            .byte	$7C
12114 2B76                        00            .byte	0
12115 2B77                        00            .byte	0
12116 2B78                        00            .byte	0
12117 2B79                        00            .byte	0
12118                                           ! 1306  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12119 2B7A                        00            .byte	0
12120 2B7B                        00            .byte	0
12121 2B7C                        38            .byte	$38
12122 2B7D                        6C            .byte	$6C
12123 2B7E                        64            .byte	$64
12124 2B7F                        60            .byte	$60
12125 2B80                        F0            .byte	$F0
12126 2B81                        60            .byte	$60
12127 2B82                        60            .byte	$60
12128 2B83                        60            .byte	$60
12129 2B84                        60            .byte	$60
12130 2B85                        F0            .byte	$F0
12131 2B86                        00            .byte	0
12132 2B87                        00            .byte	0
12133 2B88                        00            .byte	0
12134 2B89                        00            .byte	0
12135                                           ! 1307  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12136 2B8A                        00            .byte	0
12137 2B8B                        00            .byte	0
12138 2B8C                        00            .byte	0
12139 2B8D                        00            .byte	0
12140 2B8E                        00            .byte	0
12141 2B8F                        76            .byte	$76
12142 2B90                        CC            .byte	$CC
12143 2B91                        CC            .byte	$CC
12144 2B92                        CC            .byte	$CC
12145 2B93                        CC            .byte	$CC
12146 2B94                        CC            .byte	$CC
12147 2B95                        7C            .byte	$7C
12148 2B96                        0C            .byte	$C
12149 2B97                        CC            .byte	$CC
12150 2B98                        78            .byte	$78
12151 2B99                        00            .byte	0
12152                                           ! 1308  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12153 2B9A                        00            .byte	0
12154 2B9B                        00            .byte	0
12155 2B9C                        E0            .byte	$E0
12156 2B9D                        60            .byte	$60
12157 2B9E                        60            .byte	$60
12158 2B9F                        6C            .byte	$6C
12159 2BA0                        76            .byte	$76
12160 2BA1                        66            .byte	$66
12161 2BA2                        66            .byte	$66
12162 2BA3                        66            .byte	$66
12163 2BA4                        66            .byte	$66
12164 2BA5                        E6            .byte	$E6
12165 2BA6                        00            .byte	0
12166 2BA7                        00            .byte	0
12167 2BA8                        00            .byte	0
12168 2BA9                        00            .byte	0
12169                                           ! 1309  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12170 2BAA                        00            .byte	0
12171 2BAB                        00            .byte	0
12172 2BAC                        18            .byte	$18
12173 2BAD                        18            .byte	$18
12174 2BAE                        00            .byte	0
12175 2BAF                        38            .byte	$38
12176 2BB0                        18            .byte	$18
12177 2BB1                        18            .byte	$18
12178 2BB2                        18            .byte	$18
12179 2BB3                        18            .byte	$18
12180 2BB4                        18            .byte	$18
12181 2BB5                        3C            .byte	$3C
12182 2BB6                        00            .byte	0
12183 2BB7                        00            .byte	0
12184 2BB8                        00            .byte	0
12185 2BB9                        00            .byte	0
12186                                           ! 1310  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12187 2BBA                        00            .byte	0
12188 2BBB                        00            .byte	0
12189 2BBC                        06            .byte	6
12190 2BBD                        06            .byte	6
12191 2BBE                        00            .byte	0
12192 2BBF                        0E            .byte	$E
12193 2BC0                        06            .byte	6
12194 2BC1                        06            .byte	6
12195 2BC2                        06            .byte	6
12196 2BC3                        06            .byte	6
12197 2BC4                        06            .byte	6
12198 2BC5                        06            .byte	6
12199 2BC6                        66            .byte	$66
12200 2BC7                        66            .byte	$66
12201 2BC8                        3C            .byte	$3C
12202 2BC9                        00            .byte	0
12203                                           ! 1311  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12204 2BCA                        00            .byte	0
12205 2BCB                        00            .byte	0
12206 2BCC                        E0            .byte	$E0
12207 2BCD                        60            .byte	$60
12208 2BCE                        60            .byte	$60
12209 2BCF                        66            .byte	$66
12210 2BD0                        6C            .byte	$6C
12211 2BD1                        78            .byte	$78
12212 2BD2                        78            .byte	$78
12213 2BD3                        6C            .byte	$6C
12214 2BD4                        66            .byte	$66
12215 2BD5                        E6            .byte	$E6
12216 2BD6                        00            .byte	0
12217 2BD7                        00            .byte	0
12218 2BD8                        00            .byte	0
12219 2BD9                        00            .byte	0
12220                                           ! 1312  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12221 2BDA                        00            .byte	0
12222 2BDB                        00            .byte	0
12223 2BDC                        38            .byte	$38
12224 2BDD                        18            .byte	$18
12225 2BDE                        18            .byte	$18
12226 2BDF                        18            .byte	$18
12227 2BE0                        18            .byte	$18
12228 2BE1                        18            .byte	$18
12229 2BE2                        18            .byte	$18
12230 2BE3                        18            .byte	$18
12231 2BE4                        18            .byte	$18
12232 2BE5                        3C            .byte	$3C
12233 2BE6                        00            .byte	0
12234 2BE7                        00            .byte	0
12235 2BE8                        00            .byte	0
12236 2BE9                        00            .byte	0
12237                                           ! 1313  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12238 2BEA                        00            .byte	0
12239 2BEB                        00            .byte	0
12240 2BEC                        00            .byte	0
12241 2BED                        00            .byte	0
12242 2BEE                        00            .byte	0
12243 2BEF                        E6            .byte	$E6
12244 2BF0                        FF            .byte	$FF
12245 2BF1                        DB            .byte	$DB
12246 2BF2                        DB            .byte	$DB
12247 2BF3                        DB            .byte	$DB
12248 2BF4                        DB            .byte	$DB
12249 2BF5                        DB            .byte	$DB
12250 2BF6                        00            .byte	0
12251 2BF7                        00            .byte	0
12252 2BF8                        00            .byte	0
12253 2BF9                        00            .byte	0
12254                                           ! 1314  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12255 2BFA                        00            .byte	0
12256 2BFB                        00            .byte	0
12257 2BFC                        00            .byte	0
12258 2BFD                        00            .byte	0
12259 2BFE                        00            .byte	0
12260 2BFF                        DC            .byte	$DC
12261 2C00                        66            .byte	$66
12262 2C01                        66            .byte	$66
12263 2C02                        66            .byte	$66
12264 2C03                        66            .byte	$66
12265 2C04                        66            .byte	$66
12266 2C05                        66            .byte	$66
12267 2C06                        00            .byte	0
12268 2C07                        00            .byte	0
12269 2C08                        00            .byte	0
12270 2C09                        00            .byte	0
12271                                           ! 1315  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12272 2C0A                        00            .byte	0
12273 2C0B                        00            .byte	0
12274 2C0C                        00            .byte	0
12275 2C0D                        00            .byte	0
12276 2C0E                        00            .byte	0
12277 2C0F                        7C            .byte	$7C
12278 2C10                        C6            .byte	$C6
12279 2C11                        C6            .byte	$C6
12280 2C12                        C6            .byte	$C6
12281 2C13                        C6            .byte	$C6
12282 2C14                        C6            .byte	$C6
12283 2C15                        7C            .byte	$7C
12284 2C16                        00            .byte	0
12285 2C17                        00            .byte	0
12286 2C18                        00            .byte	0
12287 2C19                        00            .byte	0
12288                                           ! 1316  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12289 2C1A                        00            .byte	0
12290 2C1B                        00            .byte	0
12291 2C1C                        00            .byte	0
12292 2C1D                        00            .byte	0
12293 2C1E                        00            .byte	0
12294 2C1F                        DC            .byte	$DC
12295 2C20                        66            .byte	$66
12296 2C21                        66            .byte	$66
12297 2C22                        66            .byte	$66
12298 2C23                        66            .byte	$66
12299 2C24                        66            .byte	$66
12300 2C25                        7C            .byte	$7C
12301 2C26                        60            .byte	$60
12302 2C27                        60            .byte	$60
12303 2C28                        F0            .byte	$F0
12304 2C29                        00            .byte	0
12305                                           ! 1317  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12306 2C2A                        00            .byte	0
12307 2C2B                        00            .byte	0
12308 2C2C                        00            .byte	0
12309 2C2D                        00            .byte	0
12310 2C2E                        00            .byte	0
12311 2C2F                        76            .byte	$76
12312 2C30                        CC            .byte	$CC
12313 2C31                        CC            .byte	$CC
12314 2C32                        CC            .byte	$CC
12315 2C33                        CC            .byte	$CC
12316 2C34                        CC            .byte	$CC
12317 2C35                        7C            .byte	$7C
12318 2C36                        0C            .byte	$C
12319 2C37                        0C            .byte	$C
12320 2C38                        1E            .byte	$1E
12321 2C39                        00            .byte	0
12322                                           ! 1318  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12323 2C3A                        00            .byte	0
12324 2C3B                        00            .byte	0
12325 2C3C                        00            .byte	0
12326 2C3D                        00            .byte	0
12327 2C3E                        00            .byte	0
12328 2C3F                        DC            .byte	$DC
12329 2C40                        76            .byte	$76
12330 2C41                        66            .byte	$66
12331 2C42                        60            .byte	$60
12332 2C43                        60            .byte	$60
12333 2C44                        60            .byte	$60
12334 2C45                        F0            .byte	$F0
12335 2C46                        00            .byte	0
12336 2C47                        00            .byte	0
12337 2C48                        00            .byte	0
12338 2C49                        00            .byte	0
12339                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12340 2C4A                        00            .byte	0
12341 2C4B                        00            .byte	0
12342 2C4C                        00            .byte	0
12343 2C4D                        00            .byte	0
12344 2C4E                        00            .byte	0
12345 2C4F                        7C            .byte	$7C
12346 2C50                        C6            .byte	$C6
12347 2C51                        60            .byte	$60
12348 2C52                        38            .byte	$38
12349 2C53                        0C            .byte	$C
12350 2C54                        C6            .byte	$C6
12351 2C55                        7C            .byte	$7C
12352 2C56                        00            .byte	0
12353 2C57                        00            .byte	0
12354 2C58                        00            .byte	0
12355 2C59                        00            .byte	0
12356                                           ! 1320  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12357 2C5A                        00            .byte	0
12358 2C5B                        00            .byte	0
12359 2C5C                        10            .byte	$10
12360 2C5D                        30            .byte	$30
12361 2C5E                        30            .byte	$30
12362 2C5F                        FC            .byte	$FC
12363 2C60                        30            .byte	$30
12364 2C61                        30            .byte	$30
12365 2C62                        30            .byte	$30
12366 2C63                        30            .byte	$30
12367 2C64                        36            .byte	$36
12368 2C65                        1C            .byte	$1C
12369 2C66                        00            .byte	0
12370 2C67                        00            .byte	0
12371 2C68                        00            .byte	0
12372 2C69                        00            .byte	0
12373                                           ! 1321  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12374 2C6A                        00            .byte	0
12375 2C6B                        00            .byte	0
12376 2C6C                        00            .byte	0
12377 2C6D                        00            .byte	0
12378 2C6E                        00            .byte	0
12379 2C6F                        CC            .byte	$CC
12380 2C70                        CC            .byte	$CC
12381 2C71                        CC            .byte	$CC
12382 2C72                        CC            .byte	$CC
12383 2C73                        CC            .byte	$CC
12384 2C74                        CC            .byte	$CC
12385 2C75                        76            .byte	$76
12386 2C76                        00            .byte	0
12387 2C77                        00            .byte	0
12388 2C78                        00            .byte	0
12389 2C79                        00            .byte	0
12390                                           ! 1322  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12391 2C7A                        00            .byte	0
12392 2C7B                        00            .byte	0
12393 2C7C                        00            .byte	0
12394 2C7D                        00            .byte	0
12395 2C7E                        00            .byte	0
12396 2C7F                        C3            .byte	$C3
12397 2C80                        C3            .byte	$C3
12398 2C81                        C3            .byte	$C3
12399 2C82                        C3            .byte	$C3
12400 2C83                        66            .byte	$66
12401 2C84                        3C            .byte	$3C
12402 2C85                        18            .byte	$18
12403 2C86                        00            .byte	0
12404 2C87                        00            .byte	0
12405 2C88                        00            .byte	0
12406 2C89                        00            .byte	0
12407                                           ! 1323  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb,
12408 2C8A                        00            .byte	0
12409 2C8B                        00            .byte	0
12410 2C8C                        00            .byte	0
12411 2C8D                        00            .byte	0
12412 2C8E                        00            .byte	0
12413 2C8F                        C3            .byte	$C3
12414 2C90                        C3            .byte	$C3
12415 2C91                        C3            .byte	$C3
12416                                           ! 1323  0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12417 2C92                        DB            .byte	$DB
12418 2C93                        DB            .byte	$DB
12419 2C94                        FF            .byte	$FF
12420 2C95                        66            .byte	$66
12421 2C96                        00            .byte	0
12422 2C97                        00            .byte	0
12423 2C98                        00            .byte	0
12424 2C99                        00            .byte	0
12425                                           ! 1324  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12426 2C9A                        00            .byte	0
12427 2C9B                        00            .byte	0
12428 2C9C                        00            .byte	0
12429 2C9D                        00            .byte	0
12430 2C9E                        00            .byte	0
12431 2C9F                        C3            .byte	$C3
12432 2CA0                        66            .byte	$66
12433 2CA1                        3C            .byte	$3C
12434 2CA2                        18            .byte	$18
12435 2CA3                        3C            .byte	$3C
12436 2CA4                        66            .byte	$66
12437 2CA5                        C3            .byte	$C3
12438 2CA6                        00            .byte	0
12439 2CA7                        00            .byte	0
12440 2CA8                        00            .byte	0
12441 2CA9                        00            .byte	0
12442                                           ! 1325  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12443 2CAA                        00            .byte	0
12444 2CAB                        00            .byte	0
12445 2CAC                        00            .byte	0
12446 2CAD                        00            .byte	0
12447 2CAE                        00            .byte	0
12448 2CAF                        C6            .byte	$C6
12449 2CB0                        C6            .byte	$C6
12450 2CB1                        C6            .byte	$C6
12451 2CB2                        C6            .byte	$C6
12452 2CB3                        C6            .byte	$C6
12453 2CB4                        C6            .byte	$C6
12454 2CB5                        7E            .byte	$7E
12455 2CB6                        06            .byte	6
12456 2CB7                        0C            .byte	$C
12457 2CB8                        F8            .byte	$F8
12458 2CB9                        00            .byte	0
12459                                           ! 1326  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12460 2CBA                        00            .byte	0
12461 2CBB                        00            .byte	0
12462 2CBC                        00            .byte	0
12463 2CBD                        00            .byte	0
12464 2CBE                        00            .byte	0
12465 2CBF                        FE            .byte	$FE
12466 2CC0                        CC            .byte	$CC
12467 2CC1                        18            .byte	$18
12468 2CC2                        30            .byte	$30
12469 2CC3                        60            .byte	$60
12470 2CC4                        C6            .byte	$C6
12471 2CC5                        FE            .byte	$FE
12472 2CC6                        00            .byte	0
12473 2CC7                        00            .byte	0
12474 2CC8                        00            .byte	0
12475 2CC9                        00            .byte	0
12476                                           ! 1327  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12477 2CCA                        00            .byte	0
12478 2CCB                        00            .byte	0
12479 2CCC                        0E            .byte	$E
12480 2CCD                        18            .byte	$18
12481 2CCE                        18            .byte	$18
12482 2CCF                        18            .byte	$18
12483 2CD0                        70            .byte	$70
12484 2CD1                        18            .byte	$18
12485 2CD2                        18            .byte	$18
12486 2CD3                        18            .byte	$18
12487 2CD4                        18            .byte	$18
12488 2CD5                        0E            .byte	$E
12489 2CD6                        00            .byte	0
12490 2CD7                        00            .byte	0
12491 2CD8                        00            .byte	0
12492 2CD9                        00            .byte	0
12493                                           ! 1328  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12494 2CDA                        00            .byte	0
12495 2CDB                        00            .byte	0
12496 2CDC                        18            .byte	$18
12497 2CDD                        18            .byte	$18
12498 2CDE                        18            .byte	$18
12499 2CDF                        18            .byte	$18
12500 2CE0                        00            .byte	0
12501 2CE1                        18            .byte	$18
12502 2CE2                        18            .byte	$18
12503 2CE3                        18            .byte	$18
12504 2CE4                        18            .byte	$18
12505 2CE5                        18            .byte	$18
12506 2CE6                        00            .byte	0
12507 2CE7                        00            .byte	0
12508 2CE8                        00            .byte	0
12509 2CE9                        00            .byte	0
12510                                           ! 1329  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12511 2CEA                        00            .byte	0
12512 2CEB                        00            .byte	0
12513 2CEC                        70            .byte	$70
12514 2CED                        18            .byte	$18
12515 2CEE                        18            .byte	$18
12516 2CEF                        18            .byte	$18
12517 2CF0                        0E            .byte	$E
12518 2CF1                        18            .byte	$18
12519 2CF2                        18            .byte	$18
12520 2CF3                        18            .byte	$18
12521 2CF4                        18            .byte	$18
12522 2CF5                        70            .byte	$70
12523 2CF6                        00            .byte	0
12524 2CF7                        00            .byte	0
12525 2CF8                        00            .byte	0
12526 2CF9                        00            .byte	0
12527                                           ! 1330  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12528 2CFA                        00            .byte	0
12529 2CFB                        00            .byte	0
12530 2CFC                        76            .byte	$76
12531 2CFD                        DC            .byte	$DC
12532 2CFE                        00            .byte	0
12533 2CFF                        00            .byte	0
12534 2D00                        00            .byte	0
12535 2D01                        00            .byte	0
12536 2D02                        00            .byte	0
12537 2D03                        00            .byte	0
12538 2D04                        00            .byte	0
12539 2D05                        00            .byte	0
12540 2D06                        00            .byte	0
12541 2D07                        00            .byte	0
12542 2D08                        00            .byte	0
12543 2D09                        00            .byte	0
12544                                           ! 1331  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12545 2D0A                        00            .byte	0
12546 2D0B                        00            .byte	0
12547 2D0C                        00            .byte	0
12548 2D0D                        00            .byte	0
12549 2D0E                        10            .byte	$10
12550 2D0F                        38            .byte	$38
12551 2D10                        6C            .byte	$6C
12552 2D11                        C6            .byte	$C6
12553 2D12                        C6            .byte	$C6
12554 2D13                        C6            .byte	$C6
12555 2D14                        FE            .byte	$FE
12556 2D15                        00            .byte	0
12557 2D16                        00            .byte	0
12558 2D17                        00            .byte	0
12559 2D18                        00            .byte	0
12560 2D19                        00            .byte	0
12561                                           ! 1332  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12562 2D1A                        00            .byte	0
12563 2D1B                        00            .byte	0
12564 2D1C                        3C            .byte	$3C
12565 2D1D                        66            .byte	$66
12566 2D1E                        C2            .byte	$C2
12567 2D1F                        C0            .byte	$C0
12568 2D20                        C0            .byte	$C0
12569 2D21                        C0            .byte	$C0
12570 2D22                        C2            .byte	$C2
12571 2D23                        66            .byte	$66
12572 2D24                        3C            .byte	$3C
12573 2D25                        0C            .byte	$C
12574 2D26                        06            .byte	6
12575 2D27                        7C            .byte	$7C
12576 2D28                        00            .byte	0
12577 2D29                        00            .byte	0
12578                                           ! 1333  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12579 2D2A                        00            .byte	0
12580 2D2B                        00            .byte	0
12581 2D2C                        CC            .byte	$CC
12582 2D2D                        00            .byte	0
12583 2D2E                        00            .byte	0
12584 2D2F                        CC            .byte	$CC
12585 2D30                        CC            .byte	$CC
12586 2D31                        CC            .byte	$CC
12587 2D32                        CC            .byte	$CC
12588 2D33                        CC            .byte	$CC
12589 2D34                        CC            .byte	$CC
12590 2D35                        76            .byte	$76
12591 2D36                        00            .byte	0
12592 2D37                        00            .byte	0
12593 2D38                        00            .byte	0
12594 2D39                        00            .byte	0
12595                                           ! 1334  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12596 2D3A                        00            .byte	0
12597 2D3B                        0C            .byte	$C
12598 2D3C                        18            .byte	$18
12599 2D3D                        30            .byte	$30
12600 2D3E                        00            .byte	0
12601 2D3F                        7C            .byte	$7C
12602 2D40                        C6            .byte	$C6
12603 2D41                        FE            .byte	$FE
12604 2D42                        C0            .byte	$C0
12605 2D43                        C0            .byte	$C0
12606 2D44                        C6            .byte	$C6
12607 2D45                        7C            .byte	$7C
12608 2D46                        00            .byte	0
12609 2D47                        00            .byte	0
12610 2D48                        00            .byte	0
12611 2D49                        00            .byte	0
12612                                           ! 1335  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12613 2D4A                        00            .byte	0
12614 2D4B                        10            .byte	$10
12615 2D4C                        38            .byte	$38
12616 2D4D                        6C            .byte	$6C
12617 2D4E                        00            .byte	0
12618 2D4F                        78            .byte	$78
12619 2D50                        0C            .byte	$C
12620 2D51                        7C            .byte	$7C
12621 2D52                        CC            .byte	$CC
12622 2D53                        CC            .byte	$CC
12623 2D54                        CC            .byte	$CC
12624 2D55                        76            .byte	$76
12625 2D56                        00            .byte	0
12626 2D57                        00            .byte	0
12627 2D58                        00            .byte	0
12628 2D59                        00            .byte	0
12629                                           ! 1336  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12630 2D5A                        00            .byte	0
12631 2D5B                        00            .byte	0
12632 2D5C                        CC            .byte	$CC
12633 2D5D                        00            .byte	0
12634 2D5E                        00            .byte	0
12635 2D5F                        78            .byte	$78
12636 2D60                        0C            .byte	$C
12637 2D61                        7C            .byte	$7C
12638 2D62                        CC            .byte	$CC
12639 2D63                        CC            .byte	$CC
12640 2D64                        CC            .byte	$CC
12641 2D65                        76            .byte	$76
12642 2D66                        00            .byte	0
12643 2D67                        00            .byte	0
12644 2D68                        00            .byte	0
12645 2D69                        00            .byte	0
12646                                           ! 1337  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12647 2D6A                        00            .byte	0
12648 2D6B                        60            .byte	$60
12649 2D6C                        30            .byte	$30
12650 2D6D                        18            .byte	$18
12651 2D6E                        00            .byte	0
12652 2D6F                        78            .byte	$78
12653 2D70                        0C            .byte	$C
12654 2D71                        7C            .byte	$7C
12655 2D72                        CC            .byte	$CC
12656 2D73                        CC            .byte	$CC
12657 2D74                        CC            .byte	$CC
12658 2D75                        76            .byte	$76
12659 2D76                        00            .byte	0
12660 2D77                        00            .byte	0
12661 2D78                        00            .byte	0
12662 2D79                        00            .byte	0
12663                                           ! 1338  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12664 2D7A                        00            .byte	0
12665 2D7B                        38            .byte	$38
12666 2D7C                        6C            .byte	$6C
12667 2D7D                        38            .byte	$38
12668 2D7E                        00            .byte	0
12669 2D7F                        78            .byte	$78
12670 2D80                        0C            .byte	$C
12671 2D81                        7C            .byte	$7C
12672 2D82                        CC            .byte	$CC
12673 2D83                        CC            .byte	$CC
12674 2D84                        CC            .byte	$CC
12675 2D85                        76            .byte	$76
12676 2D86                        00            .byte	0
12677 2D87                        00            .byte	0
12678 2D88                        00            .byte	0
12679 2D89                        00            .byte	0
12680                                           ! 1339  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12681 2D8A                        00            .byte	0
12682 2D8B                        00            .byte	0
12683 2D8C                        00            .byte	0
12684 2D8D                        00            .byte	0
12685 2D8E                        3C            .byte	$3C
12686 2D8F                        66            .byte	$66
12687 2D90                        60            .byte	$60
12688 2D91                        60            .byte	$60
12689 2D92                        66            .byte	$66
12690 2D93                        3C            .byte	$3C
12691 2D94                        0C            .byte	$C
12692 2D95                        06            .byte	6
12693 2D96                        3C            .byte	$3C
12694 2D97                        00            .byte	0
12695 2D98                        00            .byte	0
12696 2D99                        00            .byte	0
12697                                           ! 1340  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12698 2D9A                        00            .byte	0
12699 2D9B                        10            .byte	$10
12700 2D9C                        38            .byte	$38
12701 2D9D                        6C            .byte	$6C
12702 2D9E                        00            .byte	0
12703 2D9F                        7C            .byte	$7C
12704 2DA0                        C6            .byte	$C6
12705 2DA1                        FE            .byte	$FE
12706 2DA2                        C0            .byte	$C0
12707 2DA3                        C0            .byte	$C0
12708 2DA4                        C6            .byte	$C6
12709 2DA5                        7C            .byte	$7C
12710 2DA6                        00            .byte	0
12711 2DA7                        00            .byte	0
12712 2DA8                        00            .byte	0
12713 2DA9                        00            .byte	0
12714                                           ! 1341  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12715 2DAA                        00            .byte	0
12716 2DAB                        00            .byte	0
12717 2DAC                        C6            .byte	$C6
12718 2DAD                        00            .byte	0
12719 2DAE                        00            .byte	0
12720 2DAF                        7C            .byte	$7C
12721 2DB0                        C6            .byte	$C6
12722 2DB1                        FE            .byte	$FE
12723 2DB2                        C0            .byte	$C0
12724 2DB3                        C0            .byte	$C0
12725 2DB4                        C6            .byte	$C6
12726 2DB5                        7C            .byte	$7C
12727 2DB6                        00            .byte	0
12728 2DB7                        00            .byte	0
12729 2DB8                        00            .byte	0
12730 2DB9                        00            .byte	0
12731                                           ! 1342  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12732 2DBA                        00            .byte	0
12733 2DBB                        60            .byte	$60
12734 2DBC                        30            .byte	$30
12735 2DBD                        18            .byte	$18
12736 2DBE                        00            .byte	0
12737 2DBF                        7C            .byte	$7C
12738 2DC0                        C6            .byte	$C6
12739 2DC1                        FE            .byte	$FE
12740 2DC2                        C0            .byte	$C0
12741 2DC3                        C0            .byte	$C0
12742 2DC4                        C6            .byte	$C6
12743 2DC5                        7C            .byte	$7C
12744 2DC6                        00            .byte	0
12745 2DC7                        00            .byte	0
12746 2DC8                        00            .byte	0
12747 2DC9                        00            .byte	0
12748                                           ! 1343  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12749 2DCA                        00            .byte	0
12750 2DCB                        00            .byte	0
12751 2DCC                        66            .byte	$66
12752 2DCD                        00            .byte	0
12753 2DCE                        00            .byte	0
12754 2DCF                        38            .byte	$38
12755 2DD0                        18            .byte	$18
12756 2DD1                        18            .byte	$18
12757 2DD2                        18            .byte	$18
12758 2DD3                        18            .byte	$18
12759 2DD4                        18            .byte	$18
12760 2DD5                        3C            .byte	$3C
12761 2DD6                        00            .byte	0
12762 2DD7                        00            .byte	0
12763 2DD8                        00            .byte	0
12764 2DD9                        00            .byte	0
12765                                           ! 1344  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18
12766 2DDA                        00            .byte	0
12767 2DDB                        18            .byte	$18
12768 2DDC                        3C            .byte	$3C
12769 2DDD                        66            .byte	$66
12770 2DDE                        00            .byte	0
12771 2DDF                        38            .byte	$38
12772 2DE0                        18            .byte	$18
12773 2DE1                        18            .byte	$18
12774 2DE2                        18            .byte	$18
12775 2DE3                        18            .byte	$18
12776                                           ! 1344 , 0x3c, 0x00, 0x00, 0x00, 0x00,
12777 2DE4                        18            .byte	$18
12778 2DE5                        3C            .byte	$3C
12779 2DE6                        00            .byte	0
12780 2DE7                        00            .byte	0
12781 2DE8                        00            .byte	0
12782 2DE9                        00            .byte	0
12783                                           ! 1345  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12784 2DEA                        00            .byte	0
12785 2DEB                        60            .byte	$60
12786 2DEC                        30            .byte	$30
12787 2DED                        18            .byte	$18
12788 2DEE                        00            .byte	0
12789 2DEF                        38            .byte	$38
12790 2DF0                        18            .byte	$18
12791 2DF1                        18            .byte	$18
12792 2DF2                        18            .byte	$18
12793 2DF3                        18            .byte	$18
12794 2DF4                        18            .byte	$18
12795 2DF5                        3C            .byte	$3C
12796 2DF6                        00            .byte	0
12797 2DF7                        00            .byte	0
12798 2DF8                        00            .byte	0
12799 2DF9                        00            .byte	0
12800                                           ! 1346  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12801 2DFA                        00            .byte	0
12802 2DFB                        C6            .byte	$C6
12803 2DFC                        00            .byte	0
12804 2DFD                        10            .byte	$10
12805 2DFE                        38            .byte	$38
12806 2DFF                        6C            .byte	$6C
12807 2E00                        C6            .byte	$C6
12808 2E01                        C6            .byte	$C6
12809 2E02                        FE            .byte	$FE
12810 2E03                        C6            .byte	$C6
12811 2E04                        C6            .byte	$C6
12812 2E05                        C6            .byte	$C6
12813 2E06                        00            .byte	0
12814 2E07                        00            .byte	0
12815 2E08                        00            .byte	0
12816 2E09                        00            .byte	0
12817                                           ! 1347  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12818 2E0A                        38            .byte	$38
12819 2E0B                        6C            .byte	$6C
12820 2E0C                        38            .byte	$38
12821 2E0D                        00            .byte	0
12822 2E0E                        38            .byte	$38
12823 2E0F                        6C            .byte	$6C
12824 2E10                        C6            .byte	$C6
12825 2E11                        C6            .byte	$C6
12826 2E12                        FE            .byte	$FE
12827 2E13                        C6            .byte	$C6
12828 2E14                        C6            .byte	$C6
12829 2E15                        C6            .byte	$C6
12830 2E16                        00            .byte	0
12831 2E17                        00            .byte	0
12832 2E18                        00            .byte	0
12833 2E19                        00            .byte	0
12834                                           ! 1348  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
12835 2E1A                        18            .byte	$18
12836 2E1B                        30            .byte	$30
12837 2E1C                        60            .byte	$60
12838 2E1D                        00            .byte	0
12839 2E1E                        FE            .byte	$FE
12840 2E1F                        66            .byte	$66
12841 2E20                        60            .byte	$60
12842 2E21                        7C            .byte	$7C
12843 2E22                        60            .byte	$60
12844 2E23                        60            .byte	$60
12845 2E24                        66            .byte	$66
12846 2E25                        FE            .byte	$FE
12847 2E26                        00            .byte	0
12848 2E27                        00            .byte	0
12849 2E28                        00            .byte	0
12850 2E29                        00            .byte	0
12851                                           ! 1349  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
12852 2E2A                        00            .byte	0
12853 2E2B                        00            .byte	0
12854 2E2C                        00            .byte	0
12855 2E2D                        00            .byte	0
12856 2E2E                        00            .byte	0
12857 2E2F                        6E            .byte	$6E
12858 2E30                        3B            .byte	$3B
12859 2E31                        1B            .byte	$1B
12860 2E32                        7E            .byte	$7E
12861 2E33                        D8            .byte	$D8
12862 2E34                        DC            .byte	$DC
12863 2E35                        77            .byte	$77
12864 2E36                        00            .byte	0
12865 2E37                        00            .byte	0
12866 2E38                        00            .byte	0
12867 2E39                        00            .byte	0
12868                                           ! 1350  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
12869 2E3A                        00            .byte	0
12870 2E3B                        00            .byte	0
12871 2E3C                        3E            .byte	$3E
12872 2E3D                        6C            .byte	$6C
12873 2E3E                        CC            .byte	$CC
12874 2E3F                        CC            .byte	$CC
12875 2E40                        FE            .byte	$FE
12876 2E41                        CC            .byte	$CC
12877 2E42                        CC            .byte	$CC
12878 2E43                        CC            .byte	$CC
12879 2E44                        CC            .byte	$CC
12880 2E45                        CE            .byte	$CE
12881 2E46                        00            .byte	0
12882 2E47                        00            .byte	0
12883 2E48                        00            .byte	0
12884 2E49                        00            .byte	0
12885                                           ! 1351  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12886 2E4A                        00            .byte	0
12887 2E4B                        10            .byte	$10
12888 2E4C                        38            .byte	$38
12889 2E4D                        6C            .byte	$6C
12890 2E4E                        00            .byte	0
12891 2E4F                        7C            .byte	$7C
12892 2E50                        C6            .byte	$C6
12893 2E51                        C6            .byte	$C6
12894 2E52                        C6            .byte	$C6
12895 2E53                        C6            .byte	$C6
12896 2E54                        C6            .byte	$C6
12897 2E55                        7C            .byte	$7C
12898 2E56                        00            .byte	0
12899 2E57                        00            .byte	0
12900 2E58                        00            .byte	0
12901 2E59                        00            .byte	0
12902                                           ! 1352  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12903 2E5A                        00            .byte	0
12904 2E5B                        00            .byte	0
12905 2E5C                        C6            .byte	$C6
12906 2E5D                        00            .byte	0
12907 2E5E                        00            .byte	0
12908 2E5F                        7C            .byte	$7C
12909 2E60                        C6            .byte	$C6
12910 2E61                        C6            .byte	$C6
12911 2E62                        C6            .byte	$C6
12912 2E63                        C6            .byte	$C6
12913 2E64                        C6            .byte	$C6
12914 2E65                        7C            .byte	$7C
12915 2E66                        00            .byte	0
12916 2E67                        00            .byte	0
12917 2E68                        00            .byte	0
12918 2E69                        00            .byte	0
12919                                           ! 1353  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12920 2E6A                        00            .byte	0
12921 2E6B                        60            .byte	$60
12922 2E6C                        30            .byte	$30
12923 2E6D                        18            .byte	$18
12924 2E6E                        00            .byte	0
12925 2E6F                        7C            .byte	$7C
12926 2E70                        C6            .byte	$C6
12927 2E71                        C6            .byte	$C6
12928 2E72                        C6            .byte	$C6
12929 2E73                        C6            .byte	$C6
12930 2E74                        C6            .byte	$C6
12931 2E75                        7C            .byte	$7C
12932 2E76                        00            .byte	0
12933 2E77                        00            .byte	0
12934 2E78                        00            .byte	0
12935 2E79                        00            .byte	0
12936                                           ! 1354  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12937 2E7A                        00            .byte	0
12938 2E7B                        30            .byte	$30
12939 2E7C                        78            .byte	$78
12940 2E7D                        CC            .byte	$CC
12941 2E7E                        00            .byte	0
12942 2E7F                        CC            .byte	$CC
12943 2E80                        CC            .byte	$CC
12944 2E81                        CC            .byte	$CC
12945 2E82                        CC            .byte	$CC
12946 2E83                        CC            .byte	$CC
12947 2E84                        CC            .byte	$CC
12948 2E85                        76            .byte	$76
12949 2E86                        00            .byte	0
12950 2E87                        00            .byte	0
12951 2E88                        00            .byte	0
12952 2E89                        00            .byte	0
12953                                           ! 1355  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12954 2E8A                        00            .byte	0
12955 2E8B                        60            .byte	$60
12956 2E8C                        30            .byte	$30
12957 2E8D                        18            .byte	$18
12958 2E8E                        00            .byte	0
12959 2E8F                        CC            .byte	$CC
12960 2E90                        CC            .byte	$CC
12961 2E91                        CC            .byte	$CC
12962 2E92                        CC            .byte	$CC
12963 2E93                        CC            .byte	$CC
12964 2E94                        CC            .byte	$CC
12965 2E95                        76            .byte	$76
12966 2E96                        00            .byte	0
12967 2E97                        00            .byte	0
12968 2E98                        00            .byte	0
12969 2E99                        00            .byte	0
12970                                           ! 1356  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
12971 2E9A                        00            .byte	0
12972 2E9B                        00            .byte	0
12973 2E9C                        C6            .byte	$C6
12974 2E9D                        00            .byte	0
12975 2E9E                        00            .byte	0
12976 2E9F                        C6            .byte	$C6
12977 2EA0                        C6            .byte	$C6
12978 2EA1                        C6            .byte	$C6
12979 2EA2                        C6            .byte	$C6
12980 2EA3                        C6            .byte	$C6
12981 2EA4                        C6            .byte	$C6
12982 2EA5                        7E            .byte	$7E
12983 2EA6                        06            .byte	6
12984 2EA7                        0C            .byte	$C
12985 2EA8                        78            .byte	$78
12986 2EA9                        00            .byte	0
12987                                           ! 1357  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12988 2EAA                        00            .byte	0
12989 2EAB                        C6            .byte	$C6
12990 2EAC                        00            .byte	0
12991 2EAD                        7C            .byte	$7C
12992 2EAE                        C6            .byte	$C6
12993 2EAF                        C6            .byte	$C6
12994 2EB0                        C6            .byte	$C6
12995 2EB1                        C6            .byte	$C6
12996 2EB2                        C6            .byte	$C6
12997 2EB3                        C6            .byte	$C6
12998 2EB4                        C6            .byte	$C6
12999 2EB5                        7C            .byte	$7C
13000 2EB6                        00            .byte	0
13001 2EB7                        00            .byte	0
13002 2EB8                        00            .byte	0
13003 2EB9                        00            .byte	0
13004                                           ! 1358  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13005 2EBA                        00            .byte	0
13006 2EBB                        C6            .byte	$C6
13007 2EBC                        00            .byte	0
13008 2EBD                        C6            .byte	$C6
13009 2EBE                        C6            .byte	$C6
13010 2EBF                        C6            .byte	$C6
13011 2EC0                        C6            .byte	$C6
13012 2EC1                        C6            .byte	$C6
13013 2EC2                        C6            .byte	$C6
13014 2EC3                        C6            .byte	$C6
13015 2EC4                        C6            .byte	$C6
13016 2EC5                        7C            .byte	$7C
13017 2EC6                        00            .byte	0
13018 2EC7                        00            .byte	0
13019 2EC8                        00            .byte	0
13020 2EC9                        00            .byte	0
13021                                           ! 1359  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13022 2ECA                        00            .byte	0
13023 2ECB                        18            .byte	$18
13024 2ECC                        18            .byte	$18
13025 2ECD                        7E            .byte	$7E
13026 2ECE                        C3            .byte	$C3
13027 2ECF                        C0            .byte	$C0
13028 2ED0                        C0            .byte	$C0
13029 2ED1                        C0            .byte	$C0
13030 2ED2                        C3            .byte	$C3
13031 2ED3                        7E            .byte	$7E
13032 2ED4                        18            .byte	$18
13033 2ED5                        18            .byte	$18
13034 2ED6                        00            .byte	0
13035 2ED7                        00            .byte	0
13036 2ED8                        00            .byte	0
13037 2ED9                        00            .byte	0
13038                                           ! 1360  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13039 2EDA                        00            .byte	0
13040 2EDB                        38            .byte	$38
13041 2EDC                        6C            .byte	$6C
13042 2EDD                        64            .byte	$64
13043 2EDE                        60            .byte	$60
13044 2EDF                        F0            .byte	$F0
13045 2EE0                        60            .byte	$60
13046 2EE1                        60            .byte	$60
13047 2EE2                        60            .byte	$60
13048 2EE3                        60            .byte	$60
13049 2EE4                        E6            .byte	$E6
13050 2EE5                        FC            .byte	$FC
13051 2EE6                        00            .byte	0
13052 2EE7                        00            .byte	0
13053 2EE8                        00            .byte	0
13054 2EE9                        00            .byte	0
13055                                           ! 1361  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13056 2EEA                        00            .byte	0
13057 2EEB                        00            .byte	0
13058 2EEC                        C3            .byte	$C3
13059 2EED                        66            .byte	$66
13060 2EEE                        3C            .byte	$3C
13061 2EEF                        18            .byte	$18
13062 2EF0                        FF            .byte	$FF
13063 2EF1                        18            .byte	$18
13064 2EF2                        FF            .byte	$FF
13065 2EF3                        18            .byte	$18
13066 2EF4                        18            .byte	$18
13067 2EF5                        18            .byte	$18
13068 2EF6                        00            .byte	0
13069 2EF7                        00            .byte	0
13070 2EF8                        00            .byte	0
13071 2EF9                        00            .byte	0
13072                                           ! 1362  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13073 2EFA                        00            .byte	0
13074 2EFB                        FC            .byte	$FC
13075 2EFC                        66            .byte	$66
13076 2EFD                        66            .byte	$66
13077 2EFE                        7C            .byte	$7C
13078 2EFF                        62            .byte	$62
13079 2F00                        66            .byte	$66
13080 2F01                        6F            .byte	$6F
13081 2F02                        66            .byte	$66
13082 2F03                        66            .byte	$66
13083 2F04                        66            .byte	$66
13084 2F05                        F3            .byte	$F3
13085 2F06                        00            .byte	0
13086 2F07                        00            .byte	0
13087 2F08                        00            .byte	0
13088 2F09                        00            .byte	0
13089                                           ! 1363  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13090 2F0A                        00            .byte	0
13091 2F0B                        0E            .byte	$E
13092 2F0C                        1B            .byte	$1B
13093 2F0D                        18            .byte	$18
13094 2F0E                        18            .byte	$18
13095 2F0F                        18            .byte	$18
13096 2F10                        7E            .byte	$7E
13097 2F11                        18            .byte	$18
13098 2F12                        18            .byte	$18
13099 2F13                        18            .byte	$18
13100 2F14                        18            .byte	$18
13101 2F15                        18            .byte	$18
13102 2F16                        D8            .byte	$D8
13103 2F17                        70            .byte	$70
13104 2F18                        00            .byte	0
13105 2F19                        00            .byte	0
13106                                           ! 1364  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13107 2F1A                        00            .byte	0
13108 2F1B                        18            .byte	$18
13109 2F1C                        30            .byte	$30
13110 2F1D                        60            .byte	$60
13111 2F1E                        00            .byte	0
13112 2F1F                        78            .byte	$78
13113 2F20                        0C            .byte	$C
13114 2F21                        7C            .byte	$7C
13115 2F22                        CC            .byte	$CC
13116 2F23                        CC            .byte	$CC
13117 2F24                        CC            .byte	$CC
13118 2F25                        76            .byte	$76
13119 2F26                        00            .byte	0
13120 2F27                        00            .byte	0
13121 2F28                        00            .byte	0
13122 2F29                        00            .byte	0
13123                                           ! 1365  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x0
13124 2F2A                        00            .byte	0
13125 2F2B                        0C            .byte	$C
13126 2F2C                        18            .byte	$18
13127 2F2D                        30            .byte	$30
13128 2F2E                        00            .byte	0
13129 2F2F                        38            .byte	$38
13130 2F30                        18            .byte	$18
13131 2F31                        18            .byte	$18
13132 2F32                        18            .byte	$18
13133 2F33                        18            .byte	$18
13134 2F34                        18            .byte	$18
13135 2F35                        3C            .byte	$3C
13136                                           ! 1365 0, 0x00, 0x00, 0x00,
13137 2F36                        00            .byte	0
13138 2F37                        00            .byte	0
13139 2F38                        00            .byte	0
13140 2F39                        00            .byte	0
13141                                           ! 1366  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13142 2F3A                        00            .byte	0
13143 2F3B                        18            .byte	$18
13144 2F3C                        30            .byte	$30
13145 2F3D                        60            .byte	$60
13146 2F3E                        00            .byte	0
13147 2F3F                        7C            .byte	$7C
13148 2F40                        C6            .byte	$C6
13149 2F41                        C6            .byte	$C6
13150 2F42                        C6            .byte	$C6
13151 2F43                        C6            .byte	$C6
13152 2F44                        C6            .byte	$C6
13153 2F45                        7C            .byte	$7C
13154 2F46                        00            .byte	0
13155 2F47                        00            .byte	0
13156 2F48                        00            .byte	0
13157 2F49                        00            .byte	0
13158                                           ! 1367  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13159 2F4A                        00            .byte	0
13160 2F4B                        18            .byte	$18
13161 2F4C                        30            .byte	$30
13162 2F4D                        60            .byte	$60
13163 2F4E                        00            .byte	0
13164 2F4F                        CC            .byte	$CC
13165 2F50                        CC            .byte	$CC
13166 2F51                        CC            .byte	$CC
13167 2F52                        CC            .byte	$CC
13168 2F53                        CC            .byte	$CC
13169 2F54                        CC            .byte	$CC
13170 2F55                        76            .byte	$76
13171 2F56                        00            .byte	0
13172 2F57                        00            .byte	0
13173 2F58                        00            .byte	0
13174 2F59                        00            .byte	0
13175                                           ! 1368  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13176 2F5A                        00            .byte	0
13177 2F5B                        00            .byte	0
13178 2F5C                        76            .byte	$76
13179 2F5D                        DC            .byte	$DC
13180 2F5E                        00            .byte	0
13181 2F5F                        DC            .byte	$DC
13182 2F60                        66            .byte	$66
13183 2F61                        66            .byte	$66
13184 2F62                        66            .byte	$66
13185 2F63                        66            .byte	$66
13186 2F64                        66            .byte	$66
13187 2F65                        66            .byte	$66
13188 2F66                        00            .byte	0
13189 2F67                        00            .byte	0
13190 2F68                        00            .byte	0
13191 2F69                        00            .byte	0
13192                                           ! 1369  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13193 2F6A                        76            .byte	$76
13194 2F6B                        DC            .byte	$DC
13195 2F6C                        00            .byte	0
13196 2F6D                        C6            .byte	$C6
13197 2F6E                        E6            .byte	$E6
13198 2F6F                        F6            .byte	$F6
13199 2F70                        FE            .byte	$FE
13200 2F71                        DE            .byte	$DE
13201 2F72                        CE            .byte	$CE
13202 2F73                        C6            .byte	$C6
13203 2F74                        C6            .byte	$C6
13204 2F75                        C6            .byte	$C6
13205 2F76                        00            .byte	0
13206 2F77                        00            .byte	0
13207 2F78                        00            .byte	0
13208 2F79                        00            .byte	0
13209                                           ! 1370  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13210 2F7A                        00            .byte	0
13211 2F7B                        3C            .byte	$3C
13212 2F7C                        6C            .byte	$6C
13213 2F7D                        6C            .byte	$6C
13214 2F7E                        3E            .byte	$3E
13215 2F7F                        00            .byte	0
13216 2F80                        7E            .byte	$7E
13217 2F81                        00            .byte	0
13218 2F82                        00            .byte	0
13219 2F83                        00            .byte	0
13220 2F84                        00            .byte	0
13221 2F85                        00            .byte	0
13222 2F86                        00            .byte	0
13223 2F87                        00            .byte	0
13224 2F88                        00            .byte	0
13225 2F89                        00            .byte	0
13226                                           ! 1371  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13227 2F8A                        00            .byte	0
13228 2F8B                        38            .byte	$38
13229 2F8C                        6C            .byte	$6C
13230 2F8D                        6C            .byte	$6C
13231 2F8E                        38            .byte	$38
13232 2F8F                        00            .byte	0
13233 2F90                        7C            .byte	$7C
13234 2F91                        00            .byte	0
13235 2F92                        00            .byte	0
13236 2F93                        00            .byte	0
13237 2F94                        00            .byte	0
13238 2F95                        00            .byte	0
13239 2F96                        00            .byte	0
13240 2F97                        00            .byte	0
13241 2F98                        00            .byte	0
13242 2F99                        00            .byte	0
13243                                           ! 1372  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13244 2F9A                        00            .byte	0
13245 2F9B                        00            .byte	0
13246 2F9C                        30            .byte	$30
13247 2F9D                        30            .byte	$30
13248 2F9E                        00            .byte	0
13249 2F9F                        30            .byte	$30
13250 2FA0                        30            .byte	$30
13251 2FA1                        60            .byte	$60
13252 2FA2                        C0            .byte	$C0
13253 2FA3                        C6            .byte	$C6
13254 2FA4                        C6            .byte	$C6
13255 2FA5                        7C            .byte	$7C
13256 2FA6                        00            .byte	0
13257 2FA7                        00            .byte	0
13258 2FA8                        00            .byte	0
13259 2FA9                        00            .byte	0
13260                                           ! 1373  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13261 2FAA                        00            .byte	0
13262 2FAB                        00            .byte	0
13263 2FAC                        00            .byte	0
13264 2FAD                        00            .byte	0
13265 2FAE                        00            .byte	0
13266 2FAF                        00            .byte	0
13267 2FB0                        FE            .byte	$FE
13268 2FB1                        C0            .byte	$C0
13269 2FB2                        C0            .byte	$C0
13270 2FB3                        C0            .byte	$C0
13271 2FB4                        C0            .byte	$C0
13272 2FB5                        00            .byte	0
13273 2FB6                        00            .byte	0
13274 2FB7                        00            .byte	0
13275 2FB8                        00            .byte	0
13276 2FB9                        00            .byte	0
13277                                           ! 1374  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13278 2FBA                        00            .byte	0
13279 2FBB                        00            .byte	0
13280 2FBC                        00            .byte	0
13281 2FBD                        00            .byte	0
13282 2FBE                        00            .byte	0
13283 2FBF                        00            .byte	0
13284 2FC0                        FE            .byte	$FE
13285 2FC1                        06            .byte	6
13286 2FC2                        06            .byte	6
13287 2FC3                        06            .byte	6
13288 2FC4                        06            .byte	6
13289 2FC5                        00            .byte	0
13290 2FC6                        00            .byte	0
13291 2FC7                        00            .byte	0
13292 2FC8                        00            .byte	0
13293 2FC9                        00            .byte	0
13294                                           ! 1375  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13295 2FCA                        00            .byte	0
13296 2FCB                        C0            .byte	$C0
13297 2FCC                        C0            .byte	$C0
13298 2FCD                        C2            .byte	$C2
13299 2FCE                        C6            .byte	$C6
13300 2FCF                        CC            .byte	$CC
13301 2FD0                        18            .byte	$18
13302 2FD1                        30            .byte	$30
13303 2FD2                        60            .byte	$60
13304 2FD3                        CE            .byte	$CE
13305 2FD4                        9B            .byte	$9B
13306 2FD5                        06            .byte	6
13307 2FD6                        0C            .byte	$C
13308 2FD7                        1F            .byte	$1F
13309 2FD8                        00            .byte	0
13310 2FD9                        00            .byte	0
13311                                           ! 1376  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13312 2FDA                        00            .byte	0
13313 2FDB                        C0            .byte	$C0
13314 2FDC                        C0            .byte	$C0
13315 2FDD                        C2            .byte	$C2
13316 2FDE                        C6            .byte	$C6
13317 2FDF                        CC            .byte	$CC
13318 2FE0                        18            .byte	$18
13319 2FE1                        30            .byte	$30
13320 2FE2                        66            .byte	$66
13321 2FE3                        CE            .byte	$CE
13322 2FE4                        96            .byte	$96
13323 2FE5                        3E            .byte	$3E
13324 2FE6                        06            .byte	6
13325 2FE7                        06            .byte	6
13326 2FE8                        00            .byte	0
13327 2FE9                        00            .byte	0
13328                                           ! 1377  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13329 2FEA                        00            .byte	0
13330 2FEB                        00            .byte	0
13331 2FEC                        18            .byte	$18
13332 2FED                        18            .byte	$18
13333 2FEE                        00            .byte	0
13334 2FEF                        18            .byte	$18
13335 2FF0                        18            .byte	$18
13336 2FF1                        18            .byte	$18
13337 2FF2                        3C            .byte	$3C
13338 2FF3                        3C            .byte	$3C
13339 2FF4                        3C            .byte	$3C
13340 2FF5                        18            .byte	$18
13341 2FF6                        00            .byte	0
13342 2FF7                        00            .byte	0
13343 2FF8                        00            .byte	0
13344 2FF9                        00            .byte	0
13345                                           ! 1378  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13346 2FFA                        00            .byte	0
13347 2FFB                        00            .byte	0
13348 2FFC                        00            .byte	0
13349 2FFD                        00            .byte	0
13350 2FFE                        00            .byte	0
13351 2FFF                        36            .byte	$36
13352 3000                        6C            .byte	$6C
13353 3001                        D8            .byte	$D8
13354 3002                        6C            .byte	$6C
13355 3003                        36            .byte	$36
13356 3004                        00            .byte	0
13357 3005                        00            .byte	0
13358 3006                        00            .byte	0
13359 3007                        00            .byte	0
13360 3008                        00            .byte	0
13361 3009                        00            .byte	0
13362                                           ! 1379  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13363 300A                        00            .byte	0
13364 300B                        00            .byte	0
13365 300C                        00            .byte	0
13366 300D                        00            .byte	0
13367 300E                        00            .byte	0
13368 300F                        D8            .byte	$D8
13369 3010                        6C            .byte	$6C
13370 3011                        36            .byte	$36
13371 3012                        6C            .byte	$6C
13372 3013                        D8            .byte	$D8
13373 3014                        00            .byte	0
13374 3015                        00            .byte	0
13375 3016                        00            .byte	0
13376 3017                        00            .byte	0
13377 3018                        00            .byte	0
13378 3019                        00            .byte	0
13379                                           ! 1380  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13380 301A                        11            .byte	$11
13381 301B                        44            .byte	$44
13382 301C                        11            .byte	$11
13383 301D                        44            .byte	$44
13384 301E                        11            .byte	$11
13385 301F                        44            .byte	$44
13386 3020                        11            .byte	$11
13387 3021                        44            .byte	$44
13388 3022                        11            .byte	$11
13389 3023                        44            .byte	$44
13390 3024                        11            .byte	$11
13391 3025                        44            .byte	$44
13392 3026                        11            .byte	$11
13393 3027                        44            .byte	$44
13394 3028                        11            .byte	$11
13395 3029                        44            .byte	$44
13396                                           ! 1381  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13397 302A                        55            .byte	$55
13398 302B                        AA            .byte	$AA
13399 302C                        55            .byte	$55
13400 302D                        AA            .byte	$AA
13401 302E                        55            .byte	$55
13402 302F                        AA            .byte	$AA
13403 3030                        55            .byte	$55
13404 3031                        AA            .byte	$AA
13405 3032                        55            .byte	$55
13406 3033                        AA            .byte	$AA
13407 3034                        55            .byte	$55
13408 3035                        AA            .byte	$AA
13409 3036                        55            .byte	$55
13410 3037                        AA            .byte	$AA
13411 3038                        55            .byte	$55
13412 3039                        AA            .byte	$AA
13413                                           ! 1382  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13414 303A                        DD            .byte	$DD
13415 303B                        77            .byte	$77
13416 303C                        DD            .byte	$DD
13417 303D                        77            .byte	$77
13418 303E                        DD            .byte	$DD
13419 303F                        77            .byte	$77
13420 3040                        DD            .byte	$DD
13421 3041                        77            .byte	$77
13422 3042                        DD            .byte	$DD
13423 3043                        77            .byte	$77
13424 3044                        DD            .byte	$DD
13425 3045                        77            .byte	$77
13426 3046                        DD            .byte	$DD
13427 3047                        77            .byte	$77
13428 3048                        DD            .byte	$DD
13429 3049                        77            .byte	$77
13430                                           ! 1383  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13431 304A                        18            .byte	$18
13432 304B                        18            .byte	$18
13433 304C                        18            .byte	$18
13434 304D                        18            .byte	$18
13435 304E                        18            .byte	$18
13436 304F                        18            .byte	$18
13437 3050                        18            .byte	$18
13438 3051                        18            .byte	$18
13439 3052                        18            .byte	$18
13440 3053                        18            .byte	$18
13441 3054                        18            .byte	$18
13442 3055                        18            .byte	$18
13443 3056                        18            .byte	$18
13444 3057                        18            .byte	$18
13445 3058                        18            .byte	$18
13446 3059                        18            .byte	$18
13447                                           ! 1384  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13448 305A                        18            .byte	$18
13449 305B                        18            .byte	$18
13450 305C                        18            .byte	$18
13451 305D                        18            .byte	$18
13452 305E                        18            .byte	$18
13453 305F                        18            .byte	$18
13454 3060                        18            .byte	$18
13455 3061                        F8            .byte	$F8
13456 3062                        18            .byte	$18
13457 3063                        18            .byte	$18
13458 3064                        18            .byte	$18
13459 3065                        18            .byte	$18
13460 3066                        18            .byte	$18
13461 3067                        18            .byte	$18
13462 3068                        18            .byte	$18
13463 3069                        18            .byte	$18
13464                                           ! 1385  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13465 306A                        18            .byte	$18
13466 306B                        18            .byte	$18
13467 306C                        18            .byte	$18
13468 306D                        18            .byte	$18
13469 306E                        18            .byte	$18
13470 306F                        F8            .byte	$F8
13471 3070                        18            .byte	$18
13472 3071                        F8            .byte	$F8
13473 3072                        18            .byte	$18
13474 3073                        18            .byte	$18
13475 3074                        18            .byte	$18
13476 3075                        18            .byte	$18
13477 3076                        18            .byte	$18
13478 3077                        18            .byte	$18
13479 3078                        18            .byte	$18
13480 3079                        18            .byte	$18
13481                                           ! 1386  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x
13482 307A                        36            .byte	$36
13483 307B                        36            .byte	$36
13484 307C                        36            .byte	$36
13485 307D                        36            .byte	$36
13486 307E                        36            .byte	$36
13487 307F                        36            .byte	$36
13488 3080                        36            .byte	$36
13489 3081                        F6            .byte	$F6
13490 3082                        36            .byte	$36
13491 3083                        36            .byte	$36
13492 3084                        36            .byte	$36
13493 3085                        36            .byte	$36
13494 3086                        36            .byte	$36
13495 3087                        36            .byte	$36
13496                                           ! 1386 36, 0x36,
13497 3088                        36            .byte	$36
13498 3089                        36            .byte	$36
13499                                           ! 1387  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13500 308A                        00            .byte	0
13501 308B                        00            .byte	0
13502 308C                        00            .byte	0
13503 308D                        00            .byte	0
13504 308E                        00            .byte	0
13505 308F                        00            .byte	0
13506 3090                        00            .byte	0
13507 3091                        FE            .byte	$FE
13508 3092                        36            .byte	$36
13509 3093                        36            .byte	$36
13510 3094                        36            .byte	$36
13511 3095                        36            .byte	$36
13512 3096                        36            .byte	$36
13513 3097                        36            .byte	$36
13514 3098                        36            .byte	$36
13515 3099                        36            .byte	$36
13516                                           ! 1388  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13517 309A                        00            .byte	0
13518 309B                        00            .byte	0
13519 309C                        00            .byte	0
13520 309D                        00            .byte	0
13521 309E                        00            .byte	0
13522 309F                        F8            .byte	$F8
13523 30A0                        18            .byte	$18
13524 30A1                        F8            .byte	$F8
13525 30A2                        18            .byte	$18
13526 30A3                        18            .byte	$18
13527 30A4                        18            .byte	$18
13528 30A5                        18            .byte	$18
13529 30A6                        18            .byte	$18
13530 30A7                        18            .byte	$18
13531 30A8                        18            .byte	$18
13532 30A9                        18            .byte	$18
13533                                           ! 1389  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13534 30AA                        36            .byte	$36
13535 30AB                        36            .byte	$36
13536 30AC                        36            .byte	$36
13537 30AD                        36            .byte	$36
13538 30AE                        36            .byte	$36
13539 30AF                        F6            .byte	$F6
13540 30B0                        06            .byte	6
13541 30B1                        F6            .byte	$F6
13542 30B2                        36            .byte	$36
13543 30B3                        36            .byte	$36
13544 30B4                        36            .byte	$36
13545 30B5                        36            .byte	$36
13546 30B6                        36            .byte	$36
13547 30B7                        36            .byte	$36
13548 30B8                        36            .byte	$36
13549 30B9                        36            .byte	$36
13550                                           ! 1390  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13551 30BA                        36            .byte	$36
13552 30BB                        36            .byte	$36
13553 30BC                        36            .byte	$36
13554 30BD                        36            .byte	$36
13555 30BE                        36            .byte	$36
13556 30BF                        36            .byte	$36
13557 30C0                        36            .byte	$36
13558 30C1                        36            .byte	$36
13559 30C2                        36            .byte	$36
13560 30C3                        36            .byte	$36
13561 30C4                        36            .byte	$36
13562 30C5                        36            .byte	$36
13563 30C6                        36            .byte	$36
13564 30C7                        36            .byte	$36
13565 30C8                        36            .byte	$36
13566 30C9                        36            .byte	$36
13567                                           ! 1391  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13568 30CA                        00            .byte	0
13569 30CB                        00            .byte	0
13570 30CC                        00            .byte	0
13571 30CD                        00            .byte	0
13572 30CE                        00            .byte	0
13573 30CF                        FE            .byte	$FE
13574 30D0                        06            .byte	6
13575 30D1                        F6            .byte	$F6
13576 30D2                        36            .byte	$36
13577 30D3                        36            .byte	$36
13578 30D4                        36            .byte	$36
13579 30D5                        36            .byte	$36
13580 30D6                        36            .byte	$36
13581 30D7                        36            .byte	$36
13582 30D8                        36            .byte	$36
13583 30D9                        36            .byte	$36
13584                                           ! 1392  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13585 30DA                        36            .byte	$36
13586 30DB                        36            .byte	$36
13587 30DC                        36            .byte	$36
13588 30DD                        36            .byte	$36
13589 30DE                        36            .byte	$36
13590 30DF                        F6            .byte	$F6
13591 30E0                        06            .byte	6
13592 30E1                        FE            .byte	$FE
13593 30E2                        00            .byte	0
13594 30E3                        00            .byte	0
13595 30E4                        00            .byte	0
13596 30E5                        00            .byte	0
13597 30E6                        00            .byte	0
13598 30E7                        00            .byte	0
13599 30E8                        00            .byte	0
13600 30E9                        00            .byte	0
13601                                           ! 1393  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13602 30EA                        36            .byte	$36
13603 30EB                        36            .byte	$36
13604 30EC                        36            .byte	$36
13605 30ED                        36            .byte	$36
13606 30EE                        36            .byte	$36
13607 30EF                        36            .byte	$36
13608 30F0                        36            .byte	$36
13609 30F1                        FE            .byte	$FE
13610 30F2                        00            .byte	0
13611 30F3                        00            .byte	0
13612 30F4                        00            .byte	0
13613 30F5                        00            .byte	0
13614 30F6                        00            .byte	0
13615 30F7                        00            .byte	0
13616 30F8                        00            .byte	0
13617 30F9                        00            .byte	0
13618                                           ! 1394  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13619 30FA                        18            .byte	$18
13620 30FB                        18            .byte	$18
13621 30FC                        18            .byte	$18
13622 30FD                        18            .byte	$18
13623 30FE                        18            .byte	$18
13624 30FF                        F8            .byte	$F8
13625 3100                        18            .byte	$18
13626 3101                        F8            .byte	$F8
13627 3102                        00            .byte	0
13628 3103                        00            .byte	0
13629 3104                        00            .byte	0
13630 3105                        00            .byte	0
13631 3106                        00            .byte	0
13632 3107                        00            .byte	0
13633 3108                        00            .byte	0
13634 3109                        00            .byte	0
13635                                           ! 1395  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13636 310A                        00            .byte	0
13637 310B                        00            .byte	0
13638 310C                        00            .byte	0
13639 310D                        00            .byte	0
13640 310E                        00            .byte	0
13641 310F                        00            .byte	0
13642 3110                        00            .byte	0
13643 3111                        F8            .byte	$F8
13644 3112                        18            .byte	$18
13645 3113                        18            .byte	$18
13646 3114                        18            .byte	$18
13647 3115                        18            .byte	$18
13648 3116                        18            .byte	$18
13649 3117                        18            .byte	$18
13650 3118                        18            .byte	$18
13651 3119                        18            .byte	$18
13652                                           ! 1396  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13653 311A                        18            .byte	$18
13654 311B                        18            .byte	$18
13655 311C                        18            .byte	$18
13656 311D                        18            .byte	$18
13657 311E                        18            .byte	$18
13658 311F                        18            .byte	$18
13659 3120                        18            .byte	$18
13660 3121                        1F            .byte	$1F
13661 3122                        00            .byte	0
13662 3123                        00            .byte	0
13663 3124                        00            .byte	0
13664 3125                        00            .byte	0
13665 3126                        00            .byte	0
13666 3127                        00            .byte	0
13667 3128                        00            .byte	0
13668 3129                        00            .byte	0
13669                                           ! 1397  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13670 312A                        18            .byte	$18
13671 312B                        18            .byte	$18
13672 312C                        18            .byte	$18
13673 312D                        18            .byte	$18
13674 312E                        18            .byte	$18
13675 312F                        18            .byte	$18
13676 3130                        18            .byte	$18
13677 3131                        FF            .byte	$FF
13678 3132                        00            .byte	0
13679 3133                        00            .byte	0
13680 3134                        00            .byte	0
13681 3135                        00            .byte	0
13682 3136                        00            .byte	0
13683 3137                        00            .byte	0
13684 3138                        00            .byte	0
13685 3139                        00            .byte	0
13686                                           ! 1398  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13687 313A                        00            .byte	0
13688 313B                        00            .byte	0
13689 313C                        00            .byte	0
13690 313D                        00            .byte	0
13691 313E                        00            .byte	0
13692 313F                        00            .byte	0
13693 3140                        00            .byte	0
13694 3141                        FF            .byte	$FF
13695 3142                        18            .byte	$18
13696 3143                        18            .byte	$18
13697 3144                        18            .byte	$18
13698 3145                        18            .byte	$18
13699 3146                        18            .byte	$18
13700 3147                        18            .byte	$18
13701 3148                        18            .byte	$18
13702 3149                        18            .byte	$18
13703                                           ! 1399  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13704 314A                        18            .byte	$18
13705 314B                        18            .byte	$18
13706 314C                        18            .byte	$18
13707 314D                        18            .byte	$18
13708 314E                        18            .byte	$18
13709 314F                        18            .byte	$18
13710 3150                        18            .byte	$18
13711 3151                        1F            .byte	$1F
13712 3152                        18            .byte	$18
13713 3153                        18            .byte	$18
13714 3154                        18            .byte	$18
13715 3155                        18            .byte	$18
13716 3156                        18            .byte	$18
13717 3157                        18            .byte	$18
13718 3158                        18            .byte	$18
13719 3159                        18            .byte	$18
13720                                           ! 1400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13721 315A                        00            .byte	0
13722 315B                        00            .byte	0
13723 315C                        00            .byte	0
13724 315D                        00            .byte	0
13725 315E                        00            .byte	0
13726 315F                        00            .byte	0
13727 3160                        00            .byte	0
13728 3161                        FF            .byte	$FF
13729 3162                        00            .byte	0
13730 3163                        00            .byte	0
13731 3164                        00            .byte	0
13732 3165                        00            .byte	0
13733 3166                        00            .byte	0
13734 3167                        00            .byte	0
13735 3168                        00            .byte	0
13736 3169                        00            .byte	0
13737                                           ! 1401  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13738 316A                        18            .byte	$18
13739 316B                        18            .byte	$18
13740 316C                        18            .byte	$18
13741 316D                        18            .byte	$18
13742 316E                        18            .byte	$18
13743 316F                        18            .byte	$18
13744 3170                        18            .byte	$18
13745 3171                        FF            .byte	$FF
13746 3172                        18            .byte	$18
13747 3173                        18            .byte	$18
13748 3174                        18            .byte	$18
13749 3175                        18            .byte	$18
13750 3176                        18            .byte	$18
13751 3177                        18            .byte	$18
13752 3178                        18            .byte	$18
13753 3179                        18            .byte	$18
13754                                           ! 1402  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13755 317A                        18            .byte	$18
13756 317B                        18            .byte	$18
13757 317C                        18            .byte	$18
13758 317D                        18            .byte	$18
13759 317E                        18            .byte	$18
13760 317F                        1F            .byte	$1F
13761 3180                        18            .byte	$18
13762 3181                        1F            .byte	$1F
13763 3182                        18            .byte	$18
13764 3183                        18            .byte	$18
13765 3184                        18            .byte	$18
13766 3185                        18            .byte	$18
13767 3186                        18            .byte	$18
13768 3187                        18            .byte	$18
13769 3188                        18            .byte	$18
13770 3189                        18            .byte	$18
13771                                           ! 1403  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13772 318A                        36            .byte	$36
13773 318B                        36            .byte	$36
13774 318C                        36            .byte	$36
13775 318D                        36            .byte	$36
13776 318E                        36            .byte	$36
13777 318F                        36            .byte	$36
13778 3190                        36            .byte	$36
13779 3191                        37            .byte	$37
13780 3192                        36            .byte	$36
13781 3193                        36            .byte	$36
13782 3194                        36            .byte	$36
13783 3195                        36            .byte	$36
13784 3196                        36            .byte	$36
13785 3197                        36            .byte	$36
13786 3198                        36            .byte	$36
13787 3199                        36            .byte	$36
13788                                           ! 1404  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13789 319A                        36            .byte	$36
13790 319B                        36            .byte	$36
13791 319C                        36            .byte	$36
13792 319D                        36            .byte	$36
13793 319E                        36            .byte	$36
13794 319F                        37            .byte	$37
13795 31A0                        30            .byte	$30
13796 31A1                        3F            .byte	$3F
13797 31A2                        00            .byte	0
13798 31A3                        00            .byte	0
13799 31A4                        00            .byte	0
13800 31A5                        00            .byte	0
13801 31A6                        00            .byte	0
13802 31A7                        00            .byte	0
13803 31A8                        00            .byte	0
13804 31A9                        00            .byte	0
13805                                           ! 1405  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13806 31AA                        00            .byte	0
13807 31AB                        00            .byte	0
13808 31AC                        00            .byte	0
13809 31AD                        00            .byte	0
13810 31AE                        00            .byte	0
13811 31AF                        3F            .byte	$3F
13812 31B0                        30            .byte	$30
13813 31B1                        37            .byte	$37
13814 31B2                        36            .byte	$36
13815 31B3                        36            .byte	$36
13816 31B4                        36            .byte	$36
13817 31B5                        36            .byte	$36
13818 31B6                        36            .byte	$36
13819 31B7                        36            .byte	$36
13820 31B8                        36            .byte	$36
13821 31B9                        36            .byte	$36
13822                                           ! 1406  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13823 31BA                        36            .byte	$36
13824 31BB                        36            .byte	$36
13825 31BC                        36            .byte	$36
13826 31BD                        36            .byte	$36
13827 31BE                        36            .byte	$36
13828 31BF                        F7            .byte	$F7
13829 31C0                        00            .byte	0
13830 31C1                        FF            .byte	$FF
13831 31C2                        00            .byte	0
13832 31C3                        00            .byte	0
13833 31C4                        00            .byte	0
13834 31C5                        00            .byte	0
13835 31C6                        00            .byte	0
13836 31C7                        00            .byte	0
13837 31C8                        00            .byte	0
13838 31C9                        00            .byte	0
13839                                           ! 1407  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13840 31CA                        00            .byte	0
13841 31CB                        00            .byte	0
13842 31CC                        00            .byte	0
13843 31CD                        00            .byte	0
13844 31CE                        00            .byte	0
13845 31CF                        FF            .byte	$FF
13846 31D0                        00            .byte	0
13847 31D1                        F7            .byte	$F7
13848 31D2                        36            .byte	$36
13849 31D3                        36            .byte	$36
13850 31D4                        36            .byte	$36
13851 31D5                        36            .byte	$36
13852 31D6                        36            .byte	$36
13853 31D7                        36            .byte	$36
13854 31D8                        36            .byte	$36
13855 31D9                        36            .byte	$36
13856                                           ! 1408  
13857                                           ! 1408 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13858 31DA                        36            .byte	$36
13859 31DB                        36            .byte	$36
13860 31DC                        36            .byte	$36
13861 31DD                        36            .byte	$36
13862 31DE                        36            .byte	$36
13863 31DF                        37            .byte	$37
13864 31E0                        30            .byte	$30
13865 31E1                        37            .byte	$37
13866 31E2                        36            .byte	$36
13867 31E3                        36            .byte	$36
13868 31E4                        36            .byte	$36
13869 31E5                        36            .byte	$36
13870 31E6                        36            .byte	$36
13871 31E7                        36            .byte	$36
13872 31E8                        36            .byte	$36
13873 31E9                        36            .byte	$36
13874                                           ! 1409  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13875 31EA                        00            .byte	0
13876 31EB                        00            .byte	0
13877 31EC                        00            .byte	0
13878 31ED                        00            .byte	0
13879 31EE                        00            .byte	0
13880 31EF                        FF            .byte	$FF
13881 31F0                        00            .byte	0
13882 31F1                        FF            .byte	$FF
13883 31F2                        00            .byte	0
13884 31F3                        00            .byte	0
13885 31F4                        00            .byte	0
13886 31F5                        00            .byte	0
13887 31F6                        00            .byte	0
13888 31F7                        00            .byte	0
13889 31F8                        00            .byte	0
13890 31F9                        00            .byte	0
13891                                           ! 1410  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13892 31FA                        36            .byte	$36
13893 31FB                        36            .byte	$36
13894 31FC                        36            .byte	$36
13895 31FD                        36            .byte	$36
13896 31FE                        36            .byte	$36
13897 31FF                        F7            .byte	$F7
13898 3200                        00            .byte	0
13899 3201                        F7            .byte	$F7
13900 3202                        36            .byte	$36
13901 3203                        36            .byte	$36
13902 3204                        36            .byte	$36
13903 3205                        36            .byte	$36
13904 3206                        36            .byte	$36
13905 3207                        36            .byte	$36
13906 3208                        36            .byte	$36
13907 3209                        36            .byte	$36
13908                                           ! 1411  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13909 320A                        18            .byte	$18
13910 320B                        18            .byte	$18
13911 320C                        18            .byte	$18
13912 320D                        18            .byte	$18
13913 320E                        18            .byte	$18
13914 320F                        FF            .byte	$FF
13915 3210                        00            .byte	0
13916 3211                        FF            .byte	$FF
13917 3212                        00            .byte	0
13918 3213                        00            .byte	0
13919 3214                        00            .byte	0
13920 3215                        00            .byte	0
13921 3216                        00            .byte	0
13922 3217                        00            .byte	0
13923 3218                        00            .byte	0
13924 3219                        00            .byte	0
13925                                           ! 1412  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13926 321A                        36            .byte	$36
13927 321B                        36            .byte	$36
13928 321C                        36            .byte	$36
13929 321D                        36            .byte	$36
13930 321E                        36            .byte	$36
13931 321F                        36            .byte	$36
13932 3220                        36            .byte	$36
13933 3221                        FF            .byte	$FF
13934 3222                        00            .byte	0
13935 3223                        00            .byte	0
13936 3224                        00            .byte	0
13937 3225                        00            .byte	0
13938 3226                        00            .byte	0
13939 3227                        00            .byte	0
13940 3228                        00            .byte	0
13941 3229                        00            .byte	0
13942                                           ! 1413  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13943 322A                        00            .byte	0
13944 322B                        00            .byte	0
13945 322C                        00            .byte	0
13946 322D                        00            .byte	0
13947 322E                        00            .byte	0
13948 322F                        FF            .byte	$FF
13949 3230                        00            .byte	0
13950 3231                        FF            .byte	$FF
13951 3232                        18            .byte	$18
13952 3233                        18            .byte	$18
13953 3234                        18            .byte	$18
13954 3235                        18            .byte	$18
13955 3236                        18            .byte	$18
13956 3237                        18            .byte	$18
13957 3238                        18            .byte	$18
13958 3239                        18            .byte	$18
13959                                           ! 1414  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13960 323A                        00            .byte	0
13961 323B                        00            .byte	0
13962 323C                        00            .byte	0
13963 323D                        00            .byte	0
13964 323E                        00            .byte	0
13965 323F                        00            .byte	0
13966 3240                        00            .byte	0
13967 3241                        FF            .byte	$FF
13968 3242                        36            .byte	$36
13969 3243                        36            .byte	$36
13970 3244                        36            .byte	$36
13971 3245                        36            .byte	$36
13972 3246                        36            .byte	$36
13973 3247                        36            .byte	$36
13974 3248                        36            .byte	$36
13975 3249                        36            .byte	$36
13976                                           ! 1415  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13977 324A                        36            .byte	$36
13978 324B                        36            .byte	$36
13979 324C                        36            .byte	$36
13980 324D                        36            .byte	$36
13981 324E                        36            .byte	$36
13982 324F                        36            .byte	$36
13983 3250                        36            .byte	$36
13984 3251                        3F            .byte	$3F
13985 3252                        00            .byte	0
13986 3253                        00            .byte	0
13987 3254                        00            .byte	0
13988 3255                        00            .byte	0
13989 3256                        00            .byte	0
13990 3257                        00            .byte	0
13991 3258                        00            .byte	0
13992 3259                        00            .byte	0
13993                                           ! 1416  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13994 325A                        18            .byte	$18
13995 325B                        18            .byte	$18
13996 325C                        18            .byte	$18
13997 325D                        18            .byte	$18
13998 325E                        18            .byte	$18
13999 325F                        1F            .byte	$1F
14000 3260                        18            .byte	$18
14001 3261                        1F            .byte	$1F
14002 3262                        00            .byte	0
14003 3263                        00            .byte	0
14004 3264                        00            .byte	0
14005 3265                        00            .byte	0
14006 3266                        00            .byte	0
14007 3267                        00            .byte	0
14008 3268                        00            .byte	0
14009 3269                        00            .byte	0
14010                                           ! 1417  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14011 326A                        00            .byte	0
14012 326B                        00            .byte	0
14013 326C                        00            .byte	0
14014 326D                        00            .byte	0
14015 326E                        00            .byte	0
14016 326F                        1F            .byte	$1F
14017 3270                        18            .byte	$18
14018 3271                        1F            .byte	$1F
14019 3272                        18            .byte	$18
14020 3273                        18            .byte	$18
14021 3274                        18            .byte	$18
14022 3275                        18            .byte	$18
14023 3276                        18            .byte	$18
14024 3277                        18            .byte	$18
14025 3278                        18            .byte	$18
14026 3279                        18            .byte	$18
14027                                           ! 1418  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14028 327A                        00            .byte	0
14029 327B                        00            .byte	0
14030 327C                        00            .byte	0
14031 327D                        00            .byte	0
14032 327E                        00            .byte	0
14033 327F                        00            .byte	0
14034 3280                        00            .byte	0
14035 3281                        3F            .byte	$3F
14036 3282                        36            .byte	$36
14037 3283                        36            .byte	$36
14038 3284                        36            .byte	$36
14039 3285                        36            .byte	$36
14040 3286                        36            .byte	$36
14041 3287                        36            .byte	$36
14042 3288                        36            .byte	$36
14043 3289                        36            .byte	$36
14044                                           ! 1419  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14045 328A                        36            .byte	$36
14046 328B                        36            .byte	$36
14047 328C                        36            .byte	$36
14048 328D                        36            .byte	$36
14049 328E                        36            .byte	$36
14050 328F                        36            .byte	$36
14051 3290                        36            .byte	$36
14052 3291                        FF            .byte	$FF
14053 3292                        36            .byte	$36
14054 3293                        36            .byte	$36
14055 3294                        36            .byte	$36
14056 3295                        36            .byte	$36
14057 3296                        36            .byte	$36
14058 3297                        36            .byte	$36
14059 3298                        36            .byte	$36
14060 3299                        36            .byte	$36
14061                                           ! 1420  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14062 329A                        18            .byte	$18
14063 329B                        18            .byte	$18
14064 329C                        18            .byte	$18
14065 329D                        18            .byte	$18
14066 329E                        18            .byte	$18
14067 329F                        FF            .byte	$FF
14068 32A0                        18            .byte	$18
14069 32A1                        FF            .byte	$FF
14070 32A2                        18            .byte	$18
14071 32A3                        18            .byte	$18
14072 32A4                        18            .byte	$18
14073 32A5                        18            .byte	$18
14074 32A6                        18            .byte	$18
14075 32A7                        18            .byte	$18
14076 32A8                        18            .byte	$18
14077 32A9                        18            .byte	$18
14078                                           ! 1421  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14079 32AA                        18            .byte	$18
14080 32AB                        18            .byte	$18
14081 32AC                        18            .byte	$18
14082 32AD                        18            .byte	$18
14083 32AE                        18            .byte	$18
14084 32AF                        18            .byte	$18
14085 32B0                        18            .byte	$18
14086 32B1                        F8            .byte	$F8
14087 32B2                        00            .byte	0
14088 32B3                        00            .byte	0
14089 32B4                        00            .byte	0
14090 32B5                        00            .byte	0
14091 32B6                        00            .byte	0
14092 32B7                        00            .byte	0
14093 32B8                        00            .byte	0
14094 32B9                        00            .byte	0
14095                                           ! 1422  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14096 32BA                        00            .byte	0
14097 32BB                        00            .byte	0
14098 32BC                        00            .byte	0
14099 32BD                        00            .byte	0
14100 32BE                        00            .byte	0
14101 32BF                        00            .byte	0
14102 32C0                        00            .byte	0
14103 32C1                        1F            .byte	$1F
14104 32C2                        18            .byte	$18
14105 32C3                        18            .byte	$18
14106 32C4                        18            .byte	$18
14107 32C5                        18            .byte	$18
14108 32C6                        18            .byte	$18
14109 32C7                        18            .byte	$18
14110 32C8                        18            .byte	$18
14111 32C9                        18            .byte	$18
14112                                           ! 1423  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14113 32CA                        FF            .byte	$FF
14114 32CB                        FF            .byte	$FF
14115 32CC                        FF            .byte	$FF
14116 32CD                        FF            .byte	$FF
14117 32CE                        FF            .byte	$FF
14118 32CF                        FF            .byte	$FF
14119 32D0                        FF            .byte	$FF
14120 32D1                        FF            .byte	$FF
14121 32D2                        FF            .byte	$FF
14122 32D3                        FF            .byte	$FF
14123 32D4                        FF            .byte	$FF
14124 32D5                        FF            .byte	$FF
14125 32D6                        FF            .byte	$FF
14126 32D7                        FF            .byte	$FF
14127 32D8                        FF            .byte	$FF
14128 32D9                        FF            .byte	$FF
14129                                           ! 1424  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14130 32DA                        00            .byte	0
14131 32DB                        00            .byte	0
14132 32DC                        00            .byte	0
14133 32DD                        00            .byte	0
14134 32DE                        00            .byte	0
14135 32DF                        00            .byte	0
14136 32E0                        00            .byte	0
14137 32E1                        FF            .byte	$FF
14138 32E2                        FF            .byte	$FF
14139 32E3                        FF            .byte	$FF
14140 32E4                        FF            .byte	$FF
14141 32E5                        FF            .byte	$FF
14142 32E6                        FF            .byte	$FF
14143 32E7                        FF            .byte	$FF
14144 32E8                        FF            .byte	$FF
14145 32E9                        FF            .byte	$FF
14146                                           ! 1425  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14147 32EA                        F0            .byte	$F0
14148 32EB                        F0            .byte	$F0
14149 32EC                        F0            .byte	$F0
14150 32ED                        F0            .byte	$F0
14151 32EE                        F0            .byte	$F0
14152 32EF                        F0            .byte	$F0
14153 32F0                        F0            .byte	$F0
14154 32F1                        F0            .byte	$F0
14155 32F2                        F0            .byte	$F0
14156 32F3                        F0            .byte	$F0
14157 32F4                        F0            .byte	$F0
14158 32F5                        F0            .byte	$F0
14159 32F6                        F0            .byte	$F0
14160 32F7                        F0            .byte	$F0
14161 32F8                        F0            .byte	$F0
14162 32F9                        F0            .byte	$F0
14163                                           ! 1426  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14164 32FA                        0F            .byte	$F
14165 32FB                        0F            .byte	$F
14166 32FC                        0F            .byte	$F
14167 32FD                        0F            .byte	$F
14168 32FE                        0F            .byte	$F
14169 32FF                        0F            .byte	$F
14170 3300                        0F            .byte	$F
14171 3301                        0F            .byte	$F
14172 3302                        0F            .byte	$F
14173 3303                        0F            .byte	$F
14174 3304                        0F            .byte	$F
14175 3305                        0F            .byte	$F
14176 3306                        0F            .byte	$F
14177 3307                        0F            .byte	$F
14178 3308                        0F            .byte	$F
14179 3309                        0F            .byte	$F
14180                                           ! 1427  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14181 330A                        FF            .byte	$FF
14182 330B                        FF            .byte	$FF
14183 330C                        FF            .byte	$FF
14184 330D                        FF            .byte	$FF
14185 330E                        FF            .byte	$FF
14186 330F                        FF            .byte	$FF
14187 3310                        FF            .byte	$FF
14188 3311                        00            .byte	0
14189 3312                        00            .byte	0
14190 3313                        00            .byte	0
14191 3314                        00            .byte	0
14192 3315                        00            .byte	0
14193 3316                        00            .byte	0
14194 3317                        00            .byte	0
14195 3318                        00            .byte	0
14196 3319                        00            .byte	0
14197                                           ! 1428  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14198 331A                        00            .byte	0
14199 331B                        00            .byte	0
14200 331C                        00            .byte	0
14201 331D                        00            .byte	0
14202 331E                        00            .byte	0
14203 331F                        76            .byte	$76
14204 3320                        DC            .byte	$DC
14205 3321                        D8            .byte	$D8
14206 3322                        D8            .byte	$D8
14207 3323                        D8            .byte	$D8
14208 3324                        DC            .byte	$DC
14209 3325                        76            .byte	$76
14210 3326                        00            .byte	0
14211 3327                        00            .byte	0
14212 3328                        00            .byte	0
14213 3329                        00            .byte	0
14214                                           ! 1429  0x00, 0x00,
14215 332A                        00            .byte	0
14216                                           ! 1429  0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14217 332B                        00            .byte	0
14218 332C                        78            .byte	$78
14219 332D                        CC            .byte	$CC
14220 332E                        CC            .byte	$CC
14221 332F                        CC            .byte	$CC
14222 3330                        D8            .byte	$D8
14223 3331                        CC            .byte	$CC
14224 3332                        C6            .byte	$C6
14225 3333                        C6            .byte	$C6
14226 3334                        C6            .byte	$C6
14227 3335                        CC            .byte	$CC
14228 3336                        00            .byte	0
14229 3337                        00            .byte	0
14230 3338                        00            .byte	0
14231 3339                        00            .byte	0
14232                                           ! 1430  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14233 333A                        00            .byte	0
14234 333B                        00            .byte	0
14235 333C                        FE            .byte	$FE
14236 333D                        C6            .byte	$C6
14237 333E                        C6            .byte	$C6
14238 333F                        C0            .byte	$C0
14239 3340                        C0            .byte	$C0
14240 3341                        C0            .byte	$C0
14241 3342                        C0            .byte	$C0
14242 3343                        C0            .byte	$C0
14243 3344                        C0            .byte	$C0
14244 3345                        C0            .byte	$C0
14245 3346                        00            .byte	0
14246 3347                        00            .byte	0
14247 3348                        00            .byte	0
14248 3349                        00            .byte	0
14249                                           ! 1431  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14250 334A                        00            .byte	0
14251 334B                        00            .byte	0
14252 334C                        00            .byte	0
14253 334D                        00            .byte	0
14254 334E                        FE            .byte	$FE
14255 334F                        6C            .byte	$6C
14256 3350                        6C            .byte	$6C
14257 3351                        6C            .byte	$6C
14258 3352                        6C            .byte	$6C
14259 3353                        6C            .byte	$6C
14260 3354                        6C            .byte	$6C
14261 3355                        6C            .byte	$6C
14262 3356                        00            .byte	0
14263 3357                        00            .byte	0
14264 3358                        00            .byte	0
14265 3359                        00            .byte	0
14266                                           ! 1432  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14267 335A                        00            .byte	0
14268 335B                        00            .byte	0
14269 335C                        00            .byte	0
14270 335D                        FE            .byte	$FE
14271 335E                        C6            .byte	$C6
14272 335F                        60            .byte	$60
14273 3360                        30            .byte	$30
14274 3361                        18            .byte	$18
14275 3362                        30            .byte	$30
14276 3363                        60            .byte	$60
14277 3364                        C6            .byte	$C6
14278 3365                        FE            .byte	$FE
14279 3366                        00            .byte	0
14280 3367                        00            .byte	0
14281 3368                        00            .byte	0
14282 3369                        00            .byte	0
14283                                           ! 1433  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14284 336A                        00            .byte	0
14285 336B                        00            .byte	0
14286 336C                        00            .byte	0
14287 336D                        00            .byte	0
14288 336E                        00            .byte	0
14289 336F                        7E            .byte	$7E
14290 3370                        D8            .byte	$D8
14291 3371                        D8            .byte	$D8
14292 3372                        D8            .byte	$D8
14293 3373                        D8            .byte	$D8
14294 3374                        D8            .byte	$D8
14295 3375                        70            .byte	$70
14296 3376                        00            .byte	0
14297 3377                        00            .byte	0
14298 3378                        00            .byte	0
14299 3379                        00            .byte	0
14300                                           ! 1434  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14301 337A                        00            .byte	0
14302 337B                        00            .byte	0
14303 337C                        00            .byte	0
14304 337D                        00            .byte	0
14305 337E                        66            .byte	$66
14306 337F                        66            .byte	$66
14307 3380                        66            .byte	$66
14308 3381                        66            .byte	$66
14309 3382                        66            .byte	$66
14310 3383                        7C            .byte	$7C
14311 3384                        60            .byte	$60
14312 3385                        60            .byte	$60
14313 3386                        C0            .byte	$C0
14314 3387                        00            .byte	0
14315 3388                        00            .byte	0
14316 3389                        00            .byte	0
14317                                           ! 1435  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14318 338A                        00            .byte	0
14319 338B                        00            .byte	0
14320 338C                        00            .byte	0
14321 338D                        00            .byte	0
14322 338E                        76            .byte	$76
14323 338F                        DC            .byte	$DC
14324 3390                        18            .byte	$18
14325 3391                        18            .byte	$18
14326 3392                        18            .byte	$18
14327 3393                        18            .byte	$18
14328 3394                        18            .byte	$18
14329 3395                        18            .byte	$18
14330 3396                        00            .byte	0
14331 3397                        00            .byte	0
14332 3398                        00            .byte	0
14333 3399                        00            .byte	0
14334                                           ! 1436  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14335 339A                        00            .byte	0
14336 339B                        00            .byte	0
14337 339C                        00            .byte	0
14338 339D                        7E            .byte	$7E
14339 339E                        18            .byte	$18
14340 339F                        3C            .byte	$3C
14341 33A0                        66            .byte	$66
14342 33A1                        66            .byte	$66
14343 33A2                        66            .byte	$66
14344 33A3                        3C            .byte	$3C
14345 33A4                        18            .byte	$18
14346 33A5                        7E            .byte	$7E
14347 33A6                        00            .byte	0
14348 33A7                        00            .byte	0
14349 33A8                        00            .byte	0
14350 33A9                        00            .byte	0
14351                                           ! 1437  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14352 33AA                        00            .byte	0
14353 33AB                        00            .byte	0
14354 33AC                        00            .byte	0
14355 33AD                        38            .byte	$38
14356 33AE                        6C            .byte	$6C
14357 33AF                        C6            .byte	$C6
14358 33B0                        C6            .byte	$C6
14359 33B1                        FE            .byte	$FE
14360 33B2                        C6            .byte	$C6
14361 33B3                        C6            .byte	$C6
14362 33B4                        6C            .byte	$6C
14363 33B5                        38            .byte	$38
14364 33B6                        00            .byte	0
14365 33B7                        00            .byte	0
14366 33B8                        00            .byte	0
14367 33B9                        00            .byte	0
14368                                           ! 1438  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14369 33BA                        00            .byte	0
14370 33BB                        00            .byte	0
14371 33BC                        38            .byte	$38
14372 33BD                        6C            .byte	$6C
14373 33BE                        C6            .byte	$C6
14374 33BF                        C6            .byte	$C6
14375 33C0                        C6            .byte	$C6
14376 33C1                        6C            .byte	$6C
14377 33C2                        6C            .byte	$6C
14378 33C3                        6C            .byte	$6C
14379 33C4                        6C            .byte	$6C
14380 33C5                        EE            .byte	$EE
14381 33C6                        00            .byte	0
14382 33C7                        00            .byte	0
14383 33C8                        00            .byte	0
14384 33C9                        00            .byte	0
14385                                           ! 1439  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14386 33CA                        00            .byte	0
14387 33CB                        00            .byte	0
14388 33CC                        1E            .byte	$1E
14389 33CD                        30            .byte	$30
14390 33CE                        18            .byte	$18
14391 33CF                        0C            .byte	$C
14392 33D0                        3E            .byte	$3E
14393 33D1                        66            .byte	$66
14394 33D2                        66            .byte	$66
14395 33D3                        66            .byte	$66
14396 33D4                        66            .byte	$66
14397 33D5                        3C            .byte	$3C
14398 33D6                        00            .byte	0
14399 33D7                        00            .byte	0
14400 33D8                        00            .byte	0
14401 33D9                        00            .byte	0
14402                                           ! 1440  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14403 33DA                        00            .byte	0
14404 33DB                        00            .byte	0
14405 33DC                        00            .byte	0
14406 33DD                        00            .byte	0
14407 33DE                        00            .byte	0
14408 33DF                        7E            .byte	$7E
14409 33E0                        DB            .byte	$DB
14410 33E1                        DB            .byte	$DB
14411 33E2                        DB            .byte	$DB
14412 33E3                        7E            .byte	$7E
14413 33E4                        00            .byte	0
14414 33E5                        00            .byte	0
14415 33E6                        00            .byte	0
14416 33E7                        00            .byte	0
14417 33E8                        00            .byte	0
14418 33E9                        00            .byte	0
14419                                           ! 1441  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14420 33EA                        00            .byte	0
14421 33EB                        00            .byte	0
14422 33EC                        00            .byte	0
14423 33ED                        03            .byte	3
14424 33EE                        06            .byte	6
14425 33EF                        7E            .byte	$7E
14426 33F0                        DB            .byte	$DB
14427 33F1                        DB            .byte	$DB
14428 33F2                        F3            .byte	$F3
14429 33F3                        7E            .byte	$7E
14430 33F4                        60            .byte	$60
14431 33F5                        C0            .byte	$C0
14432 33F6                        00            .byte	0
14433 33F7                        00            .byte	0
14434 33F8                        00            .byte	0
14435 33F9                        00            .byte	0
14436                                           ! 1442  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14437 33FA                        00            .byte	0
14438 33FB                        00            .byte	0
14439 33FC                        1C            .byte	$1C
14440 33FD                        30            .byte	$30
14441 33FE                        60            .byte	$60
14442 33FF                        60            .byte	$60
14443 3400                        7C            .byte	$7C
14444 3401                        60            .byte	$60
14445 3402                        60            .byte	$60
14446 3403                        60            .byte	$60
14447 3404                        30            .byte	$30
14448 3405                        1C            .byte	$1C
14449 3406                        00            .byte	0
14450 3407                        00            .byte	0
14451 3408                        00            .byte	0
14452 3409                        00            .byte	0
14453                                           ! 1443  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14454 340A                        00            .byte	0
14455 340B                        00            .byte	0
14456 340C                        00            .byte	0
14457 340D                        7C            .byte	$7C
14458 340E                        C6            .byte	$C6
14459 340F                        C6            .byte	$C6
14460 3410                        C6            .byte	$C6
14461 3411                        C6            .byte	$C6
14462 3412                        C6            .byte	$C6
14463 3413                        C6            .byte	$C6
14464 3414                        C6            .byte	$C6
14465 3415                        C6            .byte	$C6
14466 3416                        00            .byte	0
14467 3417                        00            .byte	0
14468 3418                        00            .byte	0
14469 3419                        00            .byte	0
14470                                           ! 1444  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14471 341A                        00            .byte	0
14472 341B                        00            .byte	0
14473 341C                        00            .byte	0
14474 341D                        00            .byte	0
14475 341E                        FE            .byte	$FE
14476 341F                        00            .byte	0
14477 3420                        00            .byte	0
14478 3421                        FE            .byte	$FE
14479 3422                        00            .byte	0
14480 3423                        00            .byte	0
14481 3424                        FE            .byte	$FE
14482 3425                        00            .byte	0
14483 3426                        00            .byte	0
14484 3427                        00            .byte	0
14485 3428                        00            .byte	0
14486 3429                        00            .byte	0
14487                                           ! 1445  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14488 342A                        00            .byte	0
14489 342B                        00            .byte	0
14490 342C                        00            .byte	0
14491 342D                        00            .byte	0
14492 342E                        18            .byte	$18
14493 342F                        18            .byte	$18
14494 3430                        7E            .byte	$7E
14495 3431                        18            .byte	$18
14496 3432                        18            .byte	$18
14497 3433                        00            .byte	0
14498 3434                        00            .byte	0
14499 3435                        FF            .byte	$FF
14500 3436                        00            .byte	0
14501 3437                        00            .byte	0
14502 3438                        00            .byte	0
14503 3439                        00            .byte	0
14504                                           ! 1446  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14505 343A                        00            .byte	0
14506 343B                        00            .byte	0
14507 343C                        00            .byte	0
14508 343D                        30            .byte	$30
14509 343E                        18            .byte	$18
14510 343F                        0C            .byte	$C
14511 3440                        06            .byte	6
14512 3441                        0C            .byte	$C
14513 3442                        18            .byte	$18
14514 3443                        30            .byte	$30
14515 3444                        00            .byte	0
14516 3445                        7E            .byte	$7E
14517 3446                        00            .byte	0
14518 3447                        00            .byte	0
14519 3448                        00            .byte	0
14520 3449                        00            .byte	0
14521                                           ! 1447  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14522 344A                        00            .byte	0
14523 344B                        00            .byte	0
14524 344C                        00            .byte	0
14525 344D                        0C            .byte	$C
14526 344E                        18            .byte	$18
14527 344F                        30            .byte	$30
14528 3450                        60            .byte	$60
14529 3451                        30            .byte	$30
14530 3452                        18            .byte	$18
14531 3453                        0C            .byte	$C
14532 3454                        00            .byte	0
14533 3455                        7E            .byte	$7E
14534 3456                        00            .byte	0
14535 3457                        00            .byte	0
14536 3458                        00            .byte	0
14537 3459                        00            .byte	0
14538                                           ! 1448  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14539 345A                        00            .byte	0
14540 345B                        00            .byte	0
14541 345C                        0E            .byte	$E
14542 345D                        1B            .byte	$1B
14543 345E                        1B            .byte	$1B
14544 345F                        18            .byte	$18
14545 3460                        18            .byte	$18
14546 3461                        18            .byte	$18
14547 3462                        18            .byte	$18
14548 3463                        18            .byte	$18
14549 3464                        18            .byte	$18
14550 3465                        18            .byte	$18
14551 3466                        18            .byte	$18
14552 3467                        18            .byte	$18
14553 3468                        18            .byte	$18
14554 3469                        18            .byte	$18
14555                                           ! 1449  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14556 346A                        18            .byte	$18
14557 346B                        18            .byte	$18
14558 346C                        18            .byte	$18
14559 346D                        18            .byte	$18
14560 346E                        18            .byte	$18
14561 346F                        18            .byte	$18
14562 3470                        18            .byte	$18
14563 3471                        18            .byte	$18
14564 3472                        D8            .byte	$D8
14565 3473                        D8            .byte	$D8
14566 3474                        D8            .byte	$D8
14567 3475                        70            .byte	$70
14568 3476                        00            .byte	0
14569 3477                        00            .byte	0
14570 3478                        00            .byte	0
14571 3479                        00            .byte	0
14572                                           ! 1450  0x00, 0x00, 0x00, 0x00
14573 347A                        00            .byte	0
14574 347B                        00            .byte	0
14575 347C                        00            .byte	0
14576                                           ! 1450 , 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14577 347D                        00            .byte	0
14578 347E                        18            .byte	$18
14579 347F                        18            .byte	$18
14580 3480                        00            .byte	0
14581 3481                        7E            .byte	$7E
14582 3482                        00            .byte	0
14583 3483                        18            .byte	$18
14584 3484                        18            .byte	$18
14585 3485                        00            .byte	0
14586 3486                        00            .byte	0
14587 3487                        00            .byte	0
14588 3488                        00            .byte	0
14589 3489                        00            .byte	0
14590                                           ! 1451  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14591 348A                        00            .byte	0
14592 348B                        00            .byte	0
14593 348C                        00            .byte	0
14594 348D                        00            .byte	0
14595 348E                        00            .byte	0
14596 348F                        76            .byte	$76
14597 3490                        DC            .byte	$DC
14598 3491                        00            .byte	0
14599 3492                        76            .byte	$76
14600 3493                        DC            .byte	$DC
14601 3494                        00            .byte	0
14602 3495                        00            .byte	0
14603 3496                        00            .byte	0
14604 3497                        00            .byte	0
14605 3498                        00            .byte	0
14606 3499                        00            .byte	0
14607                                           ! 1452  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14608 349A                        00            .byte	0
14609 349B                        38            .byte	$38
14610 349C                        6C            .byte	$6C
14611 349D                        6C            .byte	$6C
14612 349E                        38            .byte	$38
14613 349F                        00            .byte	0
14614 34A0                        00            .byte	0
14615 34A1                        00            .byte	0
14616 34A2                        00            .byte	0
14617 34A3                        00            .byte	0
14618 34A4                        00            .byte	0
14619 34A5                        00            .byte	0
14620 34A6                        00            .byte	0
14621 34A7                        00            .byte	0
14622 34A8                        00            .byte	0
14623 34A9                        00            .byte	0
14624                                           ! 1453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14625 34AA                        00            .byte	0
14626 34AB                        00            .byte	0
14627 34AC                        00            .byte	0
14628 34AD                        00            .byte	0
14629 34AE                        00            .byte	0
14630 34AF                        00            .byte	0
14631 34B0                        00            .byte	0
14632 34B1                        18            .byte	$18
14633 34B2                        18            .byte	$18
14634 34B3                        00            .byte	0
14635 34B4                        00            .byte	0
14636 34B5                        00            .byte	0
14637 34B6                        00            .byte	0
14638 34B7                        00            .byte	0
14639 34B8                        00            .byte	0
14640 34B9                        00            .byte	0
14641                                           ! 1454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14642 34BA                        00            .byte	0
14643 34BB                        00            .byte	0
14644 34BC                        00            .byte	0
14645 34BD                        00            .byte	0
14646 34BE                        00            .byte	0
14647 34BF                        00            .byte	0
14648 34C0                        00            .byte	0
14649 34C1                        00            .byte	0
14650 34C2                        18            .byte	$18
14651 34C3                        00            .byte	0
14652 34C4                        00            .byte	0
14653 34C5                        00            .byte	0
14654 34C6                        00            .byte	0
14655 34C7                        00            .byte	0
14656 34C8                        00            .byte	0
14657 34C9                        00            .byte	0
14658                                           ! 1455  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14659 34CA                        00            .byte	0
14660 34CB                        0F            .byte	$F
14661 34CC                        0C            .byte	$C
14662 34CD                        0C            .byte	$C
14663 34CE                        0C            .byte	$C
14664 34CF                        0C            .byte	$C
14665 34D0                        0C            .byte	$C
14666 34D1                        EC            .byte	$EC
14667 34D2                        6C            .byte	$6C
14668 34D3                        6C            .byte	$6C
14669 34D4                        3C            .byte	$3C
14670 34D5                        1C            .byte	$1C
14671 34D6                        00            .byte	0
14672 34D7                        00            .byte	0
14673 34D8                        00            .byte	0
14674 34D9                        00            .byte	0
14675                                           ! 1456  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14676 34DA                        00            .byte	0
14677 34DB                        D8            .byte	$D8
14678 34DC                        6C            .byte	$6C
14679 34DD                        6C            .byte	$6C
14680 34DE                        6C            .byte	$6C
14681 34DF                        6C            .byte	$6C
14682 34E0                        6C            .byte	$6C
14683 34E1                        00            .byte	0
14684 34E2                        00            .byte	0
14685 34E3                        00            .byte	0
14686 34E4                        00            .byte	0
14687 34E5                        00            .byte	0
14688 34E6                        00            .byte	0
14689 34E7                        00            .byte	0
14690 34E8                        00            .byte	0
14691 34E9                        00            .byte	0
14692                                           ! 1457  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14693 34EA                        00            .byte	0
14694 34EB                        70            .byte	$70
14695 34EC                        D8            .byte	$D8
14696 34ED                        30            .byte	$30
14697 34EE                        60            .byte	$60
14698 34EF                        C8            .byte	$C8
14699 34F0                        F8            .byte	$F8
14700 34F1                        00            .byte	0
14701 34F2                        00            .byte	0
14702 34F3                        00            .byte	0
14703 34F4                        00            .byte	0
14704 34F5                        00            .byte	0
14705 34F6                        00            .byte	0
14706 34F7                        00            .byte	0
14707 34F8                        00            .byte	0
14708 34F9                        00            .byte	0
14709                                           ! 1458  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
14710 34FA                        00            .byte	0
14711 34FB                        00            .byte	0
14712 34FC                        00            .byte	0
14713 34FD                        00            .byte	0
14714 34FE                        7C            .byte	$7C
14715 34FF                        7C            .byte	$7C
14716 3500                        7C            .byte	$7C
14717 3501                        7C            .byte	$7C
14718 3502                        7C            .byte	$7C
14719 3503                        7C            .byte	$7C
14720 3504                        7C            .byte	$7C
14721 3505                        00            .byte	0
14722 3506                        00            .byte	0
14723 3507                        00            .byte	0
14724 3508                        00            .byte	0
14725 3509                        00            .byte	0
14726                                           ! 1459  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
14727 350A                        00            .byte	0
14728 350B                        00            .byte	0
14729 350C                        00            .byte	0
14730 350D                        00            .byte	0
14731 350E                        00            .byte	0
14732 350F                        00            .byte	0
14733 3510                        00            .byte	0
14734 3511                        00            .byte	0
14735 3512                        00            .byte	0
14736 3513                        00            .byte	0
14737 3514                        00            .byte	0
14738 3515                        00            .byte	0
14739 3516                        00            .byte	0
14740 3517                        00            .byte	0
14741 3518                        00            .byte	0
14742                                           ! 1460 };
14743 3519                        00            .byte	0
14744                                           !BCC_EOS
14745                                           ! 1461 static Bit8u vgafont14alt[1]={0x00};
14746                       0000351A            _vgafont14alt:
14747 351A                        00            .byte	0
14748                                           !BCC_EOS
14749                                           ! 1462 static Bit8u vgafont16alt[1]={0x00};
14750                       0000351B            _vgafont16alt:
14751 351B                        00            .byte	0
14752                                           !BCC_EOS
14753                                           ! 1463 #asm
14754                                           !BCC_ASM
14755                       0000351C            init_vga_card:
14756                                           ;; switch to color mode and enable CPU access 480 lines
14757 351C           BA                   03C2    mov dx, #0x3C2
14758 351F           B0                     C3    mov al, #0xC3
14759 3521           EE                           outb dx,al
14760                                           ;; more than 64k 3C4/04
14761 3522           BA                   03C4    mov dx, #0x3C4
14762 3525           B0                     04    mov al, #0x04
14763 3527           EE                           outb dx,al
14764 3528           BA                   03C5    mov dx, #0x3C5
14765 352B           B0                     02    mov al, #0x02
14766 352D           EE                           outb dx,al
14767 352E           BB                   3538    mov bx, #msg_vga_init
14768 3531           53                           push bx
14769 3532           E8         4677              call _printf
14770 3535           44                           inc sp
14771 3536           44                           inc sp
14772 3537           C3                           ret
14773                       00003538            msg_vga_init:
14774 3538                        56            .ascii "VGABios $Id: vgabios.c,v 1.69 2009/04/07 18:18:20 vruppert Exp $"
14775 3578                        0D            .byte 0x0d,0x0a,0x00
14776                                           ! 1485 endasm
14777                                           !BCC_ENDASM
14778                                           ! 1486 #asm
14779                                           !BCC_ASM
14780                       0000357B            init_bios_area:
14781 357B           1E                           push ds
14782 357C           B8                   0040    mov ax, # 0x40
14783 357F           8ED8                         mov ds, ax
14784                                           ;; init detected hardware BIOS Area
14785 3581           BB                   0010    mov bx, # 0x10
14786 3584           8B07                         mov ax, [bx]
14787 3586           25                   FFCF    and ax, #0xffcf
14788                                           ;; set 80x25 color (not clear from RBIL but usual)
14789 3589           0D                   0020    or ax, #0x0020
14790 358C           8907                         mov [bx], ax
14791                                           ;; Just for the first int10 find its children
14792                                           ;; the default char height
14793 358E           BB                   0085    mov bx, # 0x85
14794 3591           B0                     10    mov al, #0x10
14795 3593           8807                         mov [bx], al
14796                                           ;; Clear the screen
14797 3595           BB                   0087    mov bx, # 0x87
14798 3598           B0                     60    mov al, #0x60
14799 359A           8807                         mov [bx], al
14800                                           ;; Set the basic screen we have
14801 359C           BB                   0088    mov bx, # 0x88
14802 359F           B0                     F9    mov al, #0xf9
14803 35A1           8807                         mov [bx], al
14804                                           ;; Set the basic modeset options
14805 35A3           BB                   0089    mov bx, # 0x89
14806 35A6           B0                     51    mov al, #0x51
14807 35A8           8807                         mov [bx], al
14808                                           ;; Set the default MSR
14809 35AA           BB                   0065    mov bx, # 0x65
14810 35AD           B0                     09    mov al, #0x09
14811 35AF           8807                         mov [bx], al
14812 35B1           1F                           pop ds
14813 35B2           C3                           ret
14814                       000035B3            _video_save_pointer_table:
14815 35B3                      024A              .word _video_param_table
14816 35B5                      C000              .word 0xc000
14817 35B7                      0000              .word 0
14818 35B9                      0000              .word 0
14819 35BB                      0000              .word 0
14820 35BD                      0000              .word 0
14821 35BF                      0000              .word 0
14822 35C1                      0000              .word 0
14823 35C3                      0000              .word 0
14824 35C5                      0000              .word 0
14825 35C7                      0000              .word 0
14826 35C9                      0000              .word 0
14827 35CB                      0000              .word 0
14828 35CD                      0000              .word 0
14829                                           ! 1536 endasm
14830                                           !BCC_ENDASM
14831                                           ! 1537 static void display_splash_screen()
14832                                           ! 1538 {
14833                                           
14834                       000035CF            _display_splash_screen:
14835                                           ! 1539 }
14836 35CF           C3                         ret
14837                                           ! 1540 static void display_info()
14838                                           ! 1541 {
14839                       000035D0            _display_info:
14840                                           ! 1542 #asm
14841                                           !BCC_ASM
14842 35D0           B8                   C000   mov ax,#0xc000
14843 35D3           8ED8                        mov ds,ax
14844 35D5           BE                   0022   mov si,#vgabios_name
14845 35D8           E8         0013             call _display_string
14846 35DB           BE                   0038   mov si,#vgabios_version
14847 35DE           E8         000D             call _display_string
14848                                            ;;mov si,#vgabios_copyright
14849                                            ;;call _display_string
14850                                            ;;mov si,#crlf
14851                                            ;;call _display_string
14852 35E1           BE                   007E   mov si,#vgabios_license
14853 35E4           E8         0007             call _display_string
14854 35E7           BE                   00B3   mov si,#vgabios_website
14855 35EA           E8         0001             call _display_string
14856                                           ! 1557 endasm
14857                                           !BCC_ENDASM
14858                                           ! 1558 }
14859 35ED           C3                         ret
14860                                           ! 1559 static void display_string()
14861                                           ! 1560 {
14862                       000035EE            _display_string:
14863                                           ! 1561 #asm
14864                                           !BCC_ASM
14865 35EE           8CD8                        mov ax,ds
14866 35F0           8EC0                        mov es,ax
14867 35F2           89F7                        mov di,si
14868 35F4           31C9                        xor cx,cx
14869 35F6           F7D1                        not cx
14870 35F8           30C0                        xor al,al
14871 35FA           FC                          cld
14872 35FB           F2                          repne
14873 35FC           AE                           scasb
14874 35FD           F7D1                        not cx
14875 35FF           49                          dec cx
14876 3600           51                          push cx
14877 3601           B8                   0300   mov ax,#0x0300
14878 3604           BB                   0000   mov bx,#0x0000
14879 3607           CD                     10   int #0x10
14880 3609           59                          pop cx
14881 360A           B8                   1301   mov ax,#0x1301
14882 360D           BB                   000B   mov bx,#0x000b
14883 3610           89F5                        mov bp,si
14884 3612           CD                     10   int #0x10
14885                                           ! 1582 endasm
14886                                           !BCC_ENDASM
14887                                           ! 1583 }
14888 3614           C3                         ret
14889                                           ! 1584 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
14890                                           ! 1585   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
14891                       00003615            _int10_func:
14892                                           !BCC_EOS
14893                                           ! 1586 {
14894                                           ! 1587  switch(( AX >> 8 ))
14895 3615           55                         push	bp
14896 3616           89E5                       mov	bp,sp
14897                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
14898 3618           8B46         12            mov	ax,$12[bp]
14899 361B           88E0                       mov	al,ah
14900 361D           30E4                       xor	ah,ah
14901                                           ! 1588   {
14902 361F           E9         0433            br 	.3
14903                                           ! 1589    case 0x00:
14904                                           ! 1590      biosfn_set_video_mode(( AX & 0x00ff ));
14905                       00003622            .4:
14906                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14907 3622           8A46         12            mov	al,$12[bp]
14908                                           ! Debug: list unsigned char = al+0 (used reg = )
14909 3625           30E4                       xor	ah,ah
14910 3627           50                         push	ax
14911                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
14912 3628           E8         0479            call	_biosfn_set_video_mode
14913 362B           44                         inc	sp
14914 362C           44                         inc	sp
14915                                           !BCC_EOS
14916                                           ! 1591      switch(( AX & 0x00ff )&0x7F)
14917                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14918 362D           8A46         12            mov	al,$12[bp]
14919                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
14920 3630           24                     7F  and	al,*$7F
14921                                           ! 1592       {case 6:
14922 3632           EB           24            jmp .7
14923                                           ! 1593         AX = ((AX & 0xff00) | (0x3F));
14924                       00003634            .8:
14925                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14926 3634           8B46         12            mov	ax,$12[bp]
14927 3637           30C0                       xor	al,al
14928                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
14929 3639           0C                     3F  or	al,*$3F
14930                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14931 363B           8946         12            mov	$12[bp],ax
14932                                           !BCC_EOS
14933                                           ! 1594         break;
14934 363E           EB           3D            jmp .5
14935                                           !BCC_EOS
14936                                           ! 1595        case 0:
14937                                           ! 1596        case 1:
14938                       00003640            .9:
14939                                           ! 1597        case 2:
14940                       00003640            .A:
14941                                           ! 1598        case 3:
14942                       00003640            .B:
14943                                           ! 1599        case 4:
14944                       00003640            .C:
14945                                           ! 1600        case 5:
14946                       00003640            .D:
14947                                           ! 1601        case 7:
14948                       00003640            .E:
14949                                           ! 1602         AX = ((AX & 0xff00) | (0x30));
14950                       00003640            .F:
14951                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14952 3640           8B46         12            mov	ax,$12[bp]
14953 3643           30C0                       xor	al,al
14954                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
14955 3645           0C                     30  or	al,*$30
14956                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14957 3647           8946         12            mov	$12[bp],ax
14958                                           !BCC_EOS
14959                                           ! 1603         break;
14960 364A           EB           31            jmp .5
14961                                           !BCC_EOS
14962                                           ! 1604       default:
14963                                           ! 1605         AX = ((AX & 0xff00) | (0x20));
14964                       0000364C            .10:
14965                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14966 364C           8B46         12            mov	ax,$12[bp]
14967 364F           30C0                       xor	al,al
14968                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
14969 3651           0C                     20  or	al,*$20
14970                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14971 3653           8946         12            mov	$12[bp],ax
14972                                           !BCC_EOS
14973                                           ! 1606       }
14974                                           ! 1607      break;
14975 3656           EB           25            jmp .5
14976                       00003658            .7:
14977 3658           2C                     00  sub	al,*0
14978 365A           72           F0            jb 	.10
14979 365C           3C                     07  cmp	al,*7
14980 365E           77           1B            ja  	.11
14981 3660           30E4                       xor	ah,ah
14982 3662           D1E0                       shl	ax,*1
14983 3664           89C3                       mov	bx,ax
14984 3666           2E                         seg	cs
14985 3667           FFA7       366B            br	.12[bx]
14986                       0000366B            .12:
14987 366B                      3640            .word	.9
14988 366D                      3640            .word	.A
14989 366F                      3640            .word	.B
14990 3671                      3640            .word	.C
14991 3673                      3640            .word	.D
14992 3675                      3640            .word	.E
14993 3677                      3634            .word	.8
14994 3679                      3640            .word	.F
14995                       0000367B            .11:
14996 367B           EB           CF            jmp	.10
14997                       0000367D            .5:
14998 367D           E9         0422            br 	.1
14999                                           !BCC_EOS
15000                                           ! 1608    case 0x01:
15001                                           ! 1609      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15002                       00003680            .13:
15003                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15004 3680           8A46         10            mov	al,$10[bp]
15005                                           ! Debug: list unsigned char = al+0 (used reg = )
15006 3683           30E4                       xor	ah,ah
15007 3685           50                         push	ax
15008                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15009 3686           8B46         10            mov	ax,$10[bp]
15010 3689           88E0                       mov	al,ah
15011 368B           30E4                       xor	ah,ah
15012                                           ! Debug: list unsigned int = ax+0 (used reg = )
15013 368D           50                         push	ax
15014                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15015 368E           E8         0A9F            call	_biosfn_set_cursor_shape
15016 3691           83C4                   04  add	sp,*4
15017                                           !BCC_EOS
15018                                           ! 1610      break;
15019 3694           E9         040B            br 	.1
15020                                           !BCC_EOS
15021                                           ! 1611    case 0x02:
15022                                           ! 1612      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15023                       00003697            .14:
15024                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15025 3697           FF76         0E            push	$E[bp]
15026                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15027 369A           8B46         0C            mov	ax,$C[bp]
15028 369D           88E0                       mov	al,ah
15029 369F           30E4                       xor	ah,ah
15030                                           ! Debug: list unsigned int = ax+0 (used reg = )
15031 36A1           50                         push	ax
15032                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15033 36A2           E8         0BA6            call	_biosfn_set_cursor_pos
15034 36A5           83C4                   04  add	sp,*4
15035                                           !BCC_EOS
15036                                           ! 1613      break;
15037 36A8           E9         03F7            br 	.1
15038                                           !BCC_EOS
15039                                           ! 1614    case 0x03:
15040                                           ! 1615      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15041                       000036AB            .15:
15042                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15043 36AB           8D5E         0E            lea	bx,$E[bp]
15044 36AE           53                         push	bx
15045                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15046 36AF           8D5E         10            lea	bx,$10[bp]
15047 36B2           53                         push	bx
15048                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15049 36B3           8B46         0C            mov	ax,$C[bp]
15050 36B6           88E0                       mov	al,ah
15051 36B8           30E4                       xor	ah,ah
15052                                           ! Debug: list unsigned int = ax+0 (used reg = )
15053 36BA           50                         push	ax
15054                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15055 36BB           E8         0C8E            call	_biosfn_get_cursor_pos
15056 36BE           83C4                   06  add	sp,*6
15057                                           !BCC_EOS
15058                                           ! 1616      break;
15059 36C1           E9         03DE            br 	.1
15060                                           !BCC_EOS
15061                                           ! 1617    case 0x04:
15062                                           ! 1618      AX=0x00;
15063                       000036C4            .16:
15064                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15065 36C4           31C0                       xor	ax,ax
15066 36C6           8946         12            mov	$12[bp],ax
15067                                           !BCC_EOS
15068                                           ! 1619      BX=0x00;
15069                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15070 36C9           31C0                       xor	ax,ax
15071 36CB           8946         0C            mov	$C[bp],ax
15072                                           !BCC_EOS
15073                                           ! 1620      CX=0x00;
15074                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15075 36CE           31C0                       xor	ax,ax
15076 36D0           8946         10            mov	$10[bp],ax
15077                                           !BCC_EOS
15078                                           ! 1621      DX=0x00;
15079                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15080 36D3           31C0                       xor	ax,ax
15081 36D5           8946         0E            mov	$E[bp],ax
15082                                           !BCC_EOS
15083                                           ! 1622      break;
15084 36D8           E9         03C7            br 	.1
15085                                           !BCC_EOS
15086                                           ! 1623    case 0x05:
15087                                           ! 1624      biosfn_set_active_page(( AX & 0x00ff ));
15088                       000036DB            .17:
15089                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15090 36DB           8A46         12            mov	al,$12[bp]
15091                                           ! Debug: list unsigned char = al+0 (used reg = )
15092 36DE           30E4                       xor	ah,ah
15093 36E0           50                         push	ax
15094                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15095 36E1           E8         0CDD            call	_biosfn_set_active_page
15096 36E4           44                         inc	sp
15097 36E5           44                         inc	sp
15098                                           !BCC_EOS
15099                                           ! 1625      break;
15100 36E6           E9         03B9            br 	.1
15101                                           !BCC_EOS
15102                                           ! 1626    case 0x06:
15103                                           ! 1627      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15104                       000036E9            .18:
15105                                           ! Debug: list int = const 1 (used reg = )
15106 36E9           B8                   0001  mov	ax,*1
15107 36EC           50                         push	ax
15108                                           ! Debug: list int = const $FF (used reg = )
15109 36ED           B8                   00FF  mov	ax,#$FF
15110 36F0           50                         push	ax
15111                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15112 36F1           8A46         0E            mov	al,$E[bp]
15113                                           ! Debug: list unsigned char = al+0 (used reg = )
15114 36F4           30E4                       xor	ah,ah
15115 36F6           50                         push	ax
15116                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15117 36F7           8B46         0E            mov	ax,$E[bp]
15118 36FA           88E0                       mov	al,ah
15119 36FC           30E4                       xor	ah,ah
15120                                           ! Debug: list unsigned int = ax+0 (used reg = )
15121 36FE           50                         push	ax
15122                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15123 36FF           8A46         10            mov	al,$10[bp]
15124                                           ! Debug: list unsigned char = al+0 (used reg = )
15125 3702           30E4                       xor	ah,ah
15126 3704           50                         push	ax
15127                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15128 3705           8B46         10            mov	ax,$10[bp]
15129 3708           88E0                       mov	al,ah
15130 370A           30E4                       xor	ah,ah
15131                                           ! Debug: list unsigned int = ax+0 (used reg = )
15132 370C           50                         push	ax
15133                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15134 370D           8B46         0C            mov	ax,$C[bp]
15135 3710           88E0                       mov	al,ah
15136 3712           30E4                       xor	ah,ah
15137                                           ! Debug: list unsigned int = ax+0 (used reg = )
15138 3714           50                         push	ax
15139                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15140 3715           8A46         12            mov	al,$12[bp]
15141                                           ! Debug: list unsigned char = al+0 (used reg = )
15142 3718           30E4                       xor	ah,ah
15143 371A           50                         push	ax
15144                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15145 371B           E8         1127            call	_biosfn_scroll
15146 371E           83C4                   10  add	sp,*$10
15147                                           !BCC_EOS
15148                                           ! 1628      break;
15149 3721           E9         037E            br 	.1
15150                                           !BCC_EOS
15151                                           ! 1629    case 0x07:
15152                                           ! 1630      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( C
15153                       00003724            .19:
15154                                           ! 1630 X >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15155                                           ! Debug: list int = const 0 (used reg = )
15156 3724           31C0                       xor	ax,ax
15157 3726           50                         push	ax
15158                                           ! Debug: list int = const $FF (used reg = )
15159 3727           B8                   00FF  mov	ax,#$FF
15160 372A           50                         push	ax
15161                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15162 372B           8A46         0E            mov	al,$E[bp]
15163                                           ! Debug: list unsigned char = al+0 (used reg = )
15164 372E           30E4                       xor	ah,ah
15165 3730           50                         push	ax
15166                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15167 3731           8B46         0E            mov	ax,$E[bp]
15168 3734           88E0                       mov	al,ah
15169 3736           30E4                       xor	ah,ah
15170                                           ! Debug: list unsigned int = ax+0 (used reg = )
15171 3738           50                         push	ax
15172                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15173 3739           8A46         10            mov	al,$10[bp]
15174                                           ! Debug: list unsigned char = al+0 (used reg = )
15175 373C           30E4                       xor	ah,ah
15176 373E           50                         push	ax
15177                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15178 373F           8B46         10            mov	ax,$10[bp]
15179 3742           88E0                       mov	al,ah
15180 3744           30E4                       xor	ah,ah
15181                                           ! Debug: list unsigned int = ax+0 (used reg = )
15182 3746           50                         push	ax
15183                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15184 3747           8B46         0C            mov	ax,$C[bp]
15185 374A           88E0                       mov	al,ah
15186 374C           30E4                       xor	ah,ah
15187                                           ! Debug: list unsigned int = ax+0 (used reg = )
15188 374E           50                         push	ax
15189                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15190 374F           8A46         12            mov	al,$12[bp]
15191                                           ! Debug: list unsigned char = al+0 (used reg = )
15192 3752           30E4                       xor	ah,ah
15193 3754           50                         push	ax
15194                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15195 3755           E8         10ED            call	_biosfn_scroll
15196 3758           83C4                   10  add	sp,*$10
15197                                           !BCC_EOS
15198                                           ! 1631      break;
15199 375B           E9         0344            br 	.1
15200                                           !BCC_EOS
15201                                           ! 1632    case 0x08:
15202                                           ! 1633      biosfn_read_char_attr(( BX >> 8 ),&AX);
15203                       0000375E            .1A:
15204                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15205 375E           8D5E         12            lea	bx,$12[bp]
15206 3761           53                         push	bx
15207                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15208 3762           8B46         0C            mov	ax,$C[bp]
15209 3765           88E0                       mov	al,ah
15210 3767           30E4                       xor	ah,ah
15211                                           ! Debug: list unsigned int = ax+0 (used reg = )
15212 3769           50                         push	ax
15213                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15214 376A           E8         17EC            call	_biosfn_read_char_attr
15215 376D           83C4                   04  add	sp,*4
15216                                           !BCC_EOS
15217                                           ! 1634      break;
15218 3770           E9         032F            br 	.1
15219                                           !BCC_EOS
15220                                           ! 1635    case 0x09:
15221                                           ! 1636      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15222                       00003773            .1B:
15223                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15224 3773           FF76         10            push	$10[bp]
15225                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15226 3776           8A46         0C            mov	al,$C[bp]
15227                                           ! Debug: list unsigned char = al+0 (used reg = )
15228 3779           30E4                       xor	ah,ah
15229 377B           50                         push	ax
15230                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15231 377C           8B46         0C            mov	ax,$C[bp]
15232 377F           88E0                       mov	al,ah
15233 3781           30E4                       xor	ah,ah
15234                                           ! Debug: list unsigned int = ax+0 (used reg = )
15235 3783           50                         push	ax
15236                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15237 3784           8A46         12            mov	al,$12[bp]
15238                                           ! Debug: list unsigned char = al+0 (used reg = )
15239 3787           30E4                       xor	ah,ah
15240 3789           50                         push	ax
15241                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15242 378A           E8         1D17            call	_biosfn_write_char_attr
15243 378D           83C4                   08  add	sp,*8
15244                                           !BCC_EOS
15245                                           ! 1637      break;
15246 3790           E9         030F            br 	.1
15247                                           !BCC_EOS
15248                                           ! 1638    case 0x0A:
15249                                           ! 1639      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15250                       00003793            .1C:
15251                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15252 3793           FF76         10            push	$10[bp]
15253                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15254 3796           8A46         0C            mov	al,$C[bp]
15255                                           ! Debug: list unsigned char = al+0 (used reg = )
15256 3799           30E4                       xor	ah,ah
15257 379B           50                         push	ax
15258                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15259 379C           8B46         0C            mov	ax,$C[bp]
15260 379F           88E0                       mov	al,ah
15261 37A1           30E4                       xor	ah,ah
15262                                           ! Debug: list unsigned int = ax+0 (used reg = )
15263 37A3           50                         push	ax
15264                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15265 37A4           8A46         12            mov	al,$12[bp]
15266                                           ! Debug: list unsigned char = al+0 (used reg = )
15267 37A7           30E4                       xor	ah,ah
15268 37A9           50                         push	ax
15269                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15270 37AA           E8         1EEF            call	_biosfn_write_char_only
15271 37AD           83C4                   08  add	sp,*8
15272                                           !BCC_EOS
15273                                           ! 1640      break;
15274 37B0           E9         02EF            br 	.1
15275                                           !BCC_EOS
15276                                           ! 1641    case 0x0C:
15277                                           ! 1642      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15278                       000037B3            .1D:
15279                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15280 37B3           FF76         0E            push	$E[bp]
15281                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15282 37B6           FF76         10            push	$10[bp]
15283                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15284 37B9           8A46         12            mov	al,$12[bp]
15285                                           ! Debug: list unsigned char = al+0 (used reg = )
15286 37BC           30E4                       xor	ah,ah
15287 37BE           50                         push	ax
15288                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15289 37BF           8B46         0C            mov	ax,$C[bp]
15290 37C2           88E0                       mov	al,ah
15291 37C4           30E4                       xor	ah,ah
15292                                           ! Debug: list unsigned int = ax+0 (used reg = )
15293 37C6           50                         push	ax
15294                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15295 37C7           E8         2143            call	_biosfn_write_pixel
15296 37CA           83C4                   08  add	sp,*8
15297                                           !BCC_EOS
15298                                           ! 1643      break;
15299 37CD           E9         02D2            br 	.1
15300                                           !BCC_EOS
15301                                           ! 1644    case 0x0D:
15302                                           ! 1645      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15303                       000037D0            .1E:
15304                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15305 37D0           8D5E         12            lea	bx,$12[bp]
15306 37D3           53                         push	bx
15307                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15308 37D4           FF76         0E            push	$E[bp]
15309                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15310 37D7           FF76         10            push	$10[bp]
15311                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15312 37DA           8B46         0C            mov	ax,$C[bp]
15313 37DD           88E0                       mov	al,ah
15314 37DF           30E4                       xor	ah,ah
15315                                           ! Debug: list unsigned int = ax+0 (used reg = )
15316 37E1           50                         push	ax
15317                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15318 37E2           E8         23C7            call	_biosfn_read_pixel
15319 37E5           83C4                   08  add	sp,*8
15320                                           !BCC_EOS
15321                                           ! 1646      break;
15322 37E8           E9         02B7            br 	.1
15323                                           !BCC_EOS
15324                                           ! 1647    case 0x0E:
15325                                           ! 1648      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15326                       000037EB            .1F:
15327                                           ! Debug: list int = const 2 (used reg = )
15328 37EB           B8                   0002  mov	ax,*2
15329 37EE           50                         push	ax
15330                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15331 37EF           8A46         0C            mov	al,$C[bp]
15332                                           ! Debug: list unsigned char = al+0 (used reg = )
15333 37F2           30E4                       xor	ah,ah
15334 37F4           50                         push	ax
15335                                           ! Debug: list int = const $FF (used reg = )
15336 37F5           B8                   00FF  mov	ax,#$FF
15337 37F8           50                         push	ax
15338                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15339 37F9           8A46         12            mov	al,$12[bp]
15340                                           ! Debug: list unsigned char = al+0 (used reg = )
15341 37FC           30E4                       xor	ah,ah
15342 37FE           50                         push	ax
15343                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15344 37FF           E8         25B3            call	_biosfn_write_teletype
15345 3802           83C4                   08  add	sp,*8
15346                                           !BCC_EOS
15347                                           ! 1649      break;
15348 3805           E9         029A            br 	.1
15349                                           !BCC_EOS
15350                                           ! 1650    case 0x10:
15351                                           ! 1651      biosfn_perform_gray_scale_summing(BX,CX);
15352                       00003808            .20:
15353                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15354 3808           FF76         10            push	$10[bp]
15355                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15356 380B           FF76         0C            push	$C[bp]
15357                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15358 380E           E8         2BFE            call	_biosfn_perform_gray_scale_summing
15359 3811           83C4                   04  add	sp,*4
15360                                           !BCC_EOS
15361                                           ! 1652      break;
15362 3814           E9         028B            br 	.1
15363                                           !BCC_EOS
15364                                           ! 1653    case 0x11:
15365                                           ! 1654      switch(( AX & 0x00ff ))
15366                       00003817            .21:
15367                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15368 3817           8A46         12            mov	al,$12[bp]
15369                                           ! 1655       {
15370 381A           E9         00E1            br 	.24
15371                                           ! 1656        case 0x00:
15372                                           ! 1657        case 0x10:
15373                       0000381D            .25:
15374                                           ! 1658         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15375                       0000381D            .26:
15376                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15377 381D           8B46         0C            mov	ax,$C[bp]
15378 3820           88E0                       mov	al,ah
15379 3822           30E4                       xor	ah,ah
15380                                           ! Debug: list unsigned int = ax+0 (used reg = )
15381 3824           50                         push	ax
15382                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15383 3825           8A46         0C            mov	al,$C[bp]
15384                                           ! Debug: list unsigned char = al+0 (used reg = )
15385 3828           30E4                       xor	ah,ah
15386 382A           50                         push	ax
15387                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15388 382B           FF76         0E            push	$E[bp]
15389                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15390 382E           FF76         10            push	$10[bp]
15391                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15392 3831           FF76         08            push	8[bp]
15393                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15394 3834           FF76         16            push	$16[bp]
15395                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15396 3837           8A46         12            mov	al,$12[bp]
15397                                           ! Debug: list unsigned char = al+0 (used reg = )
15398 383A           30E4                       xor	ah,ah
15399 383C           50                         push	ax
15400                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15401 383D           E8         2E77            call	_biosfn_load_text_user_pat
15402 3840           83C4                   0E  add	sp,*$E
15403                                           !BCC_EOS
15404                                           ! 1659         break;
15405 3843           E9         011A            br 	.22
15406                                           !BCC_EOS
15407                                           ! 1660        case 0x01:
15408                                           ! 1661        case 0x11:
15409                       00003846            .27:
15410                                           ! 1662         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15411                       00003846            .28:
15412                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15413 3846           8A46         0C            mov	al,$C[bp]
15414                                           ! Debug: list unsigned char = al+0 (used reg = )
15415 3849           30E4                       xor	ah,ah
15416 384B           50                         push	ax
15417                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15418 384C           8A46         12            mov	al,$12[bp]
15419                                           ! Debug: list unsigned char = al+0 (used reg = )
15420 384F           30E4                       xor	ah,ah
15421 3851           50                         push	ax
15422                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15423 3852           E8         2EFE            call	_biosfn_load_text_8_14_pat
15424 3855           83C4                   04  add	sp,*4
15425                                           !BCC_EOS
15426                                           ! 1663         break;
15427 3858           E9         0105            br 	.22
15428                                           !BCC_EOS
15429                                           ! 1664        case 0x02:
15430                                           ! 1665        case 0x12:
15431                       0000385B            .29:
15432                                           ! 1666         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15433                       0000385B            .2A:
15434                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15435 385B           8A46         0C            mov	al,$C[bp]
15436                                           ! Debug: list unsigned char = al+0 (used reg = )
15437 385E           30E4                       xor	ah,ah
15438 3860           50                         push	ax
15439                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15440 3861           8A46         12            mov	al,$12[bp]
15441                                           ! Debug: list unsigned char = al+0 (used reg = )
15442 3864           30E4                       xor	ah,ah
15443 3866           50                         push	ax
15444                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15445 3867           E8         2F80            call	_biosfn_load_text_8_8_pat
15446 386A           83C4                   04  add	sp,*4
15447                                           !BCC_EOS
15448                                           ! 1667         break;
15449 386D           E9         00F0            br 	.22
15450                                           !BCC_EOS
15451                                           ! 1668        case 0x04:
15452                                           ! 1669        case 0x14:
15453                       00003870            .2B:
15454                                           ! 1670         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15455                       00003870            .2C:
15456                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15457 3870           8A46         0C            mov	al,$C[bp]
15458                                           ! Debug: list unsigned char = al+0 (used reg = )
15459 3873           30E4                       xor	ah,ah
15460 3875           50                         push	ax
15461                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15462 3876           8A46         12            mov	al,$12[bp]
15463                                           ! Debug: list unsigned char = al+0 (used reg = )
15464 3879           30E4                       xor	ah,ah
15465 387B           50                         push	ax
15466                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15467 387C           E8         3009            call	_biosfn_load_text_8_16_pat
15468 387F           83C4                   04  add	sp,*4
15469                                           !BCC_EOS
15470                                           ! 1671         break;
15471 3882           E9         00DB            br 	.22
15472                                           !BCC_EOS
15473                                           ! 1672        case 0x20:
15474                                           ! 1673         biosfn_load_gfx_8_8_chars(ES,BP);
15475                       00003885            .2D:
15476                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15477 3885           FF76         08            push	8[bp]
15478                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15479 3888           FF76         16            push	$16[bp]
15480                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15481 388B           E8         308B            call	_biosfn_load_gfx_8_8_chars
15482 388E           83C4                   04  add	sp,*4
15483                                           !BCC_EOS
15484                                           ! 1674         break;
15485 3891           E9         00CC            br 	.22
15486                                           !BCC_EOS
15487                                           ! 1675        case 0x21:
15488                                           ! 1676         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15489                       00003894            .2E:
15490                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15491 3894           8A46         0E            mov	al,$E[bp]
15492                                           ! Debug: list unsigned char = al+0 (used reg = )
15493 3897           30E4                       xor	ah,ah
15494 3899           50                         push	ax
15495                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15496 389A           8A46         0C            mov	al,$C[bp]
15497                                           ! Debug: list unsigned char = al+0 (used reg = )
15498 389D           30E4                       xor	ah,ah
15499 389F           50                         push	ax
15500                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15501 38A0           FF76         10            push	$10[bp]
15502                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15503 38A3           FF76         08            push	8[bp]
15504                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15505 38A6           FF76         16            push	$16[bp]
15506                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15507 38A9           E8         306E            call	_biosfn_load_gfx_user_chars
15508 38AC           83C4                   0A  add	sp,*$A
15509                                           !BCC_EOS
15510                                           ! 1677         break;
15511 38AF           E9         00AE            br 	.22
15512                                           !BCC_EOS
15513                                           ! 1678        case 0x22:
15514                                           ! 1679         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15515                       000038B2            .2F:
15516                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15517 38B2           8A46         0C            mov	al,$C[bp]
15518                                           ! Debug: list unsigned char = al+0 (used reg = )
15519 38B5           30E4                       xor	ah,ah
15520 38B7           50                         push	ax
15521                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15522 38B8           E8         3060            call	_biosfn_load_gfx_8_14_chars
15523 38BB           44                         inc	sp
15524 38BC           44                         inc	sp
15525                                           !BCC_EOS
15526                                           ! 1680         break;
15527 38BD           E9         00A0            br 	.22
15528                                           !BCC_EOS
15529                                           ! 1681        case 0x23:
15530                                           ! 1682         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15531                       000038C0            .30:
15532                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15533 38C0           8A46         0C            mov	al,$C[bp]
15534                                           ! Debug: list unsigned char = al+0 (used reg = )
15535 38C3           30E4                       xor	ah,ah
15536 38C5           50                         push	ax
15537                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15538 38C6           E8         3053            call	_biosfn_load_gfx_8_8_dd_chars
15539 38C9           44                         inc	sp
15540 38CA           44                         inc	sp
15541                                           !BCC_EOS
15542                                           ! 1683         break;
15543 38CB           E9         0092            br 	.22
15544                                           !BCC_EOS
15545                                           ! 1684        case 0x24:
15546                                           ! 1685         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15547                       000038CE            .31:
15548                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15549 38CE           8A46         0C            mov	al,$C[bp]
15550                                           ! Debug: list unsigned char = al+0 (used reg = )
15551 38D1           30E4                       xor	ah,ah
15552 38D3           50                         push	ax
15553                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15554 38D4           E8         3046            call	_biosfn_load_gfx_8_16_chars
15555 38D7           44                         inc	sp
15556 38D8           44                         inc	sp
15557                                           !BCC_EOS
15558                                           ! 1686         break;
15559 38D9           E9         0084            br 	.22
15560                                           !BCC_EOS
15561                                           ! 1687        case 0x30:
15562                                           ! 1688         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15563                       000038DC            .32:
15564                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15565 38DC           8D5E         0E            lea	bx,$E[bp]
15566 38DF           53                         push	bx
15567                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15568 38E0           8D5E         10            lea	bx,$10[bp]
15569 38E3           53                         push	bx
15570                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15571 38E4           8D5E         08            lea	bx,8[bp]
15572 38E7           53                         push	bx
15573                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15574 38E8           8D5E         16            lea	bx,$16[bp]
15575 38EB           53                         push	bx
15576                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15577 38EC           8B46         0C            mov	ax,$C[bp]
15578 38EF           88E0                       mov	al,ah
15579 38F1           30E4                       xor	ah,ah
15580                                           ! Debug: list unsigned int = ax+0 (used reg = )
15581 38F3           50                         push	ax
15582                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15583 38F4           E8         3027            call	_biosfn_get_font_info
15584 38F7           83C4                   0A  add	sp,*$A
15585                                           !BCC_EOS
15586                                           ! 1689         break;
15587 38FA           EB           64            jmp .22
15588                                           !BCC_EOS
15589                                           ! 1690       }
15590                                           ! 1691      break;
15591 38FC           EB           62            jmp .22
15592                       000038FE            .24:
15593 38FE           2C                     00  sub	al,*0
15594 3900   7503    E9         FF18            beq 	.25
15595 3905           2C                     01  sub	al,*1
15596 3907   7503    E9         FF3A            beq 	.27
15597 390C           2C                     01  sub	al,*1
15598 390E   7503    E9         FF48            beq 	.29
15599 3913           2C                     02  sub	al,*2
15600 3915   7503    E9         FF56            beq 	.2B
15601 391A           2C                     0C  sub	al,*$C
15602 391C   7503    E9         FEFC            beq 	.26
15603 3921           2C                     01  sub	al,*1
15604 3923   7503    E9         FF1E            beq 	.28
15605 3928           2C                     01  sub	al,*1
15606 392A   7503    E9         FF2C            beq 	.2A
15607 392F           2C                     02  sub	al,*2
15608 3931   7503    E9         FF3A            beq 	.2C
15609 3936           2C                     0C  sub	al,*$C
15610 3938   7503    E9         FF48            beq 	.2D
15611 393D           2C                     01  sub	al,*1
15612 393F   7503    E9         FF50            beq 	.2E
15613 3944           2C                     01  sub	al,*1
15614 3946   7503    E9         FF67            beq 	.2F
15615 394B           2C                     01  sub	al,*1
15616 394D   7503    E9         FF6E            beq 	.30
15617 3952           2C                     01  sub	al,*1
15618 3954   7503    E9         FF75            beq 	.31
15619 3959           2C                     0C  sub	al,*$C
15620 395B   7503    E9         FF7C            beq 	.32
15621                       00003960            .22:
15622 3960           E9         013F            br 	.1
15623                                           !BCC_EOS
15624                                           ! 1692    case 0x12:
15625                                           ! 1693      switch(( BX & 0x00ff ))
15626                       00003963            .33:
15627                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15628 3963           8A46         0C            mov	al,$C[bp]
15629                                           ! 1694       {
15630 3966           EB           3C            jmp .36
15631                                           ! 1695        case 0x20:
15632                                           ! 1696         biosfn_alternate_prtsc();
15633                       00003968            .37:
15634                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15635 3968           E8         318D            call	_biosfn_alternate_prtsc
15636                                           !BCC_EOS
15637                                           ! 1697         break;
15638 396B           EB           43            jmp .34
15639                                           !BCC_EOS
15640                                           ! 1698        case 0x35:
15641                                           ! 1699         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
15642                       0000396D            .38:
15643                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15644 396D           FF76         0E            push	$E[bp]
15645                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15646 3970           FF76         16            push	$16[bp]
15647                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15648 3973           8A46         12            mov	al,$12[bp]
15649                                           ! Debug: list unsigned char = al+0 (used reg = )
15650 3976           30E4                       xor	ah,ah
15651 3978           50                         push	ax
15652                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15653 3979           E8         3256            call	_biosfn_switch_video_interface
15654 397C           83C4                   06  add	sp,*6
15655                                           !BCC_EOS
15656                                           ! 1700         AX = ((AX & 0xff00) | (0x12));
15657                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15658 397F           8B46         12            mov	ax,$12[bp]
15659 3982           30C0                       xor	al,al
15660                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15661 3984           0C                     12  or	al,*$12
15662                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15663 3986           8946         12            mov	$12[bp],ax
15664                                           !BCC_EOS
15665                                           ! 1701         break;
15666 3989           EB           25            jmp .34
15667                                           !BCC_EOS
15668                                           ! 1702        case
15669                                           ! 1702  0x36:
15670                                           ! 1703         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15671                       0000398B            .39:
15672                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15673 398B           8A46         12            mov	al,$12[bp]
15674                                           ! Debug: list unsigned char = al+0 (used reg = )
15675 398E           30E4                       xor	ah,ah
15676 3990           50                         push	ax
15677                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15678 3991           E8         323F            call	_biosfn_enable_video_refresh_control
15679 3994           44                         inc	sp
15680 3995           44                         inc	sp
15681                                           !BCC_EOS
15682                                           ! 1704         AX = ((AX & 0xff00) | (0x12));
15683                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15684 3996           8B46         12            mov	ax,$12[bp]
15685 3999           30C0                       xor	al,al
15686                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15687 399B           0C                     12  or	al,*$12
15688                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15689 399D           8946         12            mov	$12[bp],ax
15690                                           !BCC_EOS
15691                                           ! 1705         break;
15692 39A0           EB           0E            jmp .34
15693                                           !BCC_EOS
15694                                           ! 1706       }
15695                                           ! 1707      break;
15696 39A2           EB           0C            jmp .34
15697                       000039A4            .36:
15698 39A4           2C                     20  sub	al,*$20
15699 39A6           74           C0            je 	.37
15700 39A8           2C                     15  sub	al,*$15
15701 39AA           74           C1            je 	.38
15702 39AC           2C                     01  sub	al,*1
15703 39AE           74           DB            je 	.39
15704                       000039B0            .34:
15705 39B0           E9         00EF            br 	.1
15706                                           !BCC_EOS
15707                                           ! 1708    case 0x13:
15708                                           ! 1709      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
15709                       000039B3            .3A:
15710                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15711 39B3           FF76         08            push	8[bp]
15712                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15713 39B6           FF76         16            push	$16[bp]
15714                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15715 39B9           8A46         0E            mov	al,$E[bp]
15716                                           ! Debug: list unsigned char = al+0 (used reg = )
15717 39BC           30E4                       xor	ah,ah
15718 39BE           50                         push	ax
15719                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15720 39BF           8B46         0E            mov	ax,$E[bp]
15721 39C2           88E0                       mov	al,ah
15722 39C4           30E4                       xor	ah,ah
15723                                           ! Debug: list unsigned int = ax+0 (used reg = )
15724 39C6           50                         push	ax
15725                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
15726 39C7           FF76         10            push	$10[bp]
15727                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
15728 39CA           8A46         0C            mov	al,$C[bp]
15729                                           ! Debug: list unsigned char = al+0 (used reg = )
15730 39CD           30E4                       xor	ah,ah
15731 39CF           50                         push	ax
15732                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15733 39D0           8B46         0C            mov	ax,$C[bp]
15734 39D3           88E0                       mov	al,ah
15735 39D5           30E4                       xor	ah,ah
15736                                           ! Debug: list unsigned int = ax+0 (used reg = )
15737 39D7           50                         push	ax
15738                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15739 39D8           8A46         12            mov	al,$12[bp]
15740                                           ! Debug: list unsigned char = al+0 (used reg = )
15741 39DB           30E4                       xor	ah,ah
15742 39DD           50                         push	ax
15743                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
15744 39DE           E8         31F3            call	_biosfn_write_string
15745 39E1           83C4                   10  add	sp,*$10
15746                                           !BCC_EOS
15747                                           ! 1710      break;
15748 39E4           E9         00BB            br 	.1
15749                                           !BCC_EOS
15750                                           ! 1711    case 0x1B:
15751                                           ! 1712      biosfn_read_state_info(BX,ES,DI);
15752                       000039E7            .3B:
15753                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
15754 39E7           FF76         04            push	4[bp]
15755                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15756 39EA           FF76         16            push	$16[bp]
15757                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15758 39ED           FF76         0C            push	$C[bp]
15759                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
15760 39F0           E8         32ED            call	_biosfn_read_state_info
15761 39F3           83C4                   06  add	sp,*6
15762                                           !BCC_EOS
15763                                           ! 1713      AX = ((AX & 0xff00) | (0x1B));
15764                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15765 39F6           8B46         12            mov	ax,$12[bp]
15766 39F9           30C0                       xor	al,al
15767                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
15768 39FB           0C                     1B  or	al,*$1B
15769                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15770 39FD           8946         12            mov	$12[bp],ax
15771                                           !BCC_EOS
15772                                           ! 1714      break;
15773 3A00           E9         009F            br 	.1
15774                                           !BCC_EOS
15775                                           ! 1715    case 0x1C:
15776                                           ! 1716      switch(( AX & 0x00ff ))
15777                       00003A03            .3C:
15778                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15779 3A03           8A46         12            mov	al,$12[bp]
15780                                           ! 1717       {
15781 3A06           EB           33            jmp .3F
15782                                           ! 1718        case 0x00:
15783                                           ! 1719         biosfn_read_video_state_size(CX,&BX);
15784                       00003A08            .40:
15785                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
15786 3A08           8D5E         0C            lea	bx,$C[bp]
15787 3A0B           53                         push	bx
15788                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15789 3A0C           FF76         10            push	$10[bp]
15790                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
15791 3A0F           E8         344D            call	_biosfn_read_video_state_size
15792 3A12           83C4                   04  add	sp,*4
15793                                           !BCC_EOS
15794                                           ! 1720         break;
15795 3A15           EB           30            jmp .3D
15796                                           !BCC_EOS
15797                                           ! 1721        case 0x01:
15798                                           ! 1722         biosfn_save_video_state(CX,ES,BX);
15799                       00003A17            .41:
15800                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15801 3A17           FF76         0C            push	$C[bp]
15802                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15803 3A1A           FF76         16            push	$16[bp]
15804                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15805 3A1D           FF76         10            push	$10[bp]
15806                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
15807 3A20           E8         3460            call	_biosfn_save_video_state
15808 3A23           83C4                   06  add	sp,*6
15809                                           !BCC_EOS
15810                                           ! 1723         break;
15811 3A26           EB           1F            jmp .3D
15812                                           !BCC_EOS
15813                                           ! 1724        case 0x02:
15814                                           ! 1725         biosfn_restore_video_state(CX,ES,BX);
15815                       00003A28            .42:
15816                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15817 3A28           FF76         0C            push	$C[bp]
15818                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15819 3A2B           FF76         16            push	$16[bp]
15820                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15821 3A2E           FF76         10            push	$10[bp]
15822                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
15823 3A31           E8         3A1C            call	_biosfn_restore_video_state
15824 3A34           83C4                   06  add	sp,*6
15825                                           !BCC_EOS
15826                                           ! 1726         break;
15827 3A37           EB           0E            jmp .3D
15828                                           !BCC_EOS
15829                                           ! 1727       }
15830                                           ! 1728      AX = ((AX & 0xff00) | (0x1C));
15831 3A39           EB           0C            jmp .3D
15832                       00003A3B            .3F:
15833 3A3B           2C                     00  sub	al,*0
15834 3A3D           74           C9            je 	.40
15835 3A3F           2C                     01  sub	al,*1
15836 3A41           74           D4            je 	.41
15837 3A43           2C                     01  sub	al,*1
15838 3A45           74           E1            je 	.42
15839                       00003A47            .3D:
15840                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15841 3A47           8B46         12            mov	ax,$12[bp]
15842 3A4A           30C0                       xor	al,al
15843                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
15844 3A4C           0C                     1C  or	al,*$1C
15845                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15846 3A4E           8946         12            mov	$12[bp],ax
15847                                           !BCC_EOS
15848                                           ! 1729      break;
15849 3A51           EB           4F            jmp .1
15850                                           !BCC_EOS
15851                                           ! 1730   }
15852                                           ! 1731 }
15853 3A53           EB           4D            jmp .1
15854                       00003A55            .3:
15855 3A55           2D                   0000  sub	ax,*0
15856 3A58           7C           48            jl  	.1
15857 3A5A           3D                   001C  cmp	ax,*$1C
15858 3A5D           77           43            ja  	.43
15859 3A5F           D1E0                       shl	ax,*1
15860 3A61           89C3                       mov	bx,ax
15861 3A63           2E                         seg	cs
15862 3A64           FFA7       3A68            br	.44[bx]
15863                       00003A68            .44:
15864 3A68                      3622            .word	.4
15865 3A6A                      3680            .word	.13
15866 3A6C                      3697            .word	.14
15867 3A6E                      36AB            .word	.15
15868 3A70                      36C4            .word	.16
15869 3A72                      36DB            .word	.17
15870 3A74                      36E9            .word	.18
15871 3A76                      3724            .word	.19
15872 3A78                      375E            .word	.1A
15873 3A7A                      3773            .word	.1B
15874 3A7C                      3793            .word	.1C
15875 3A7E                      3AA2            .word	.1
15876 3A80                      37B3            .word	.1D
15877 3A82                      37D0            .word	.1E
15878 3A84                      37EB            .word	.1F
15879 3A86                      3AA2            .word	.1
15880 3A88                      3808            .word	.20
15881 3A8A                      3817            .word	.21
15882 3A8C                      3963            .word	.33
15883 3A8E                      39B3            .word	.3A
15884 3A90                      3AA2            .word	.1
15885 3A92                      3AA2            .word	.1
15886 3A94                      3AA2            .word	.1
15887 3A96                      3AA2            .word	.1
15888 3A98                      3AA2            .word	.1
15889 3A9A                      3AA2            .word	.1
15890 3A9C                      3AA2            .word	.1
15891 3A9E                      39E7            .word	.3B
15892 3AA0                      3A03            .word	.3C
15893                       00003AA2            .43:
15894                       00003AA2            .1:
15895                       FFFFFFFE            ..FFFF	=	-2
15896 3AA2           5D                         pop	bp
15897 3AA3           C3                         ret
15898                                           ! 1732 static void biosfn_set_video_mode(mode) Bit8u mode;
15899                                           ! Register BX used in function int10_func
15900                       00003AA4            _biosfn_set_video_mode:
15901                                           !BCC_EOS
15902                                           ! 1733 {
15903                                           ! 1734  Bit8u noclearmem=mode&0x80;
15904 3AA4           55                         push	bp
15905 3AA5           89E5                       mov	bp,sp
15906 3AA7           4C                         dec	sp
15907                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
15908 3AA8           8A46         04            mov	al,4[bp]
15909 3AAB           24                     80  and	al,#$80
15910                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
15911 3AAD           8846         FF            mov	-1[bp],al
15912                                           !BCC_EOS
15913                                           ! 1735  Bit8u line,mmask,*palette,vpti;
15914                                           !BCC_EOS
15915                                           ! 1736  Bit16u i,twidth,theightm1,cheight;
15916                                           !BCC_EOS
15917                                           ! 1737  Bit8u modeset_ctl,video_ctl,vga_switches;
15918                                           !BCC_EOS
15919                                           ! 1738  Bit16u crtc_addr;
15920                                           !BCC_EOS
15921                                           ! 1739  mode=mode&0x7f;
15922 3AB0           83C4                   EB  add	sp,*-$15
15923                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
15924 3AB3           8A46         04            mov	al,4[bp]
15925 3AB6           24                     7F  and	al,*$7F
15926                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
15927 3AB8           8846         04            mov	4[bp],al
15928                                           !BCC_EOS
15929                                           ! 1740  line=find_vga_entry(mode);
15930                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
15931 3ABB           8A46         04            mov	al,4[bp]
15932 3ABE           30E4                       xor	ah,ah
15933 3AC0           50                         push	ax
15934                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
15935 3AC1           E8         3F6D            call	_find_vga_entry
15936 3AC4           44                         inc	sp
15937 3AC5           44                         inc	sp
15938                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
15939 3AC6           8846         FE            mov	-2[bp],al
15940                                           !BCC_EOS
15941                                           ! 1741  if(line==0xFF)
15942                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
15943 3AC9           8A46         FE            mov	al,-2[bp]
15944 3ACC           3C                     FF  cmp	al,#$FF
15945 3ACE           75           04            jne 	.45
15946                       00003AD0            .46:
15947                                           ! 1742   return;
15948 3AD0           89EC                       mov	sp,bp
15949 3AD2           5D                         pop	bp
15950 3AD3           C3                         ret
15951                                           !BCC_EOS
15952                                           ! 1743  vpti=line_to_vpti[line];
15953                       00003AD4            .45:
15954                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
15955 3AD4           8A46         FE            mov	al,-2[bp]
15956 3AD7           30E4                       xor	ah,ah
15957 3AD9           89C3                       mov	bx,ax
15958                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
15959 3ADB           8A87       0236            mov	al,_line_to_vpti[bx]
15960 3ADF           8846         F9            mov	-7[bp],al
15961                                           !BCC_EOS
15962                                           ! 1744  twidth=video_param_table[vpti].twidth;
15963                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
15964 3AE2           8A46         F9            mov	al,-7[bp]
15965 3AE5           30E4                       xor	ah,ah
15966 3AE7           B1                     06  mov	cl,*6
15967 3AE9           D3E0                       shl	ax,cl
15968 3AEB           89C3                       mov	bx,ax
15969                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
15970 3AED           8A87       024A            mov	al,_video_param_table[bx]
15971 3AF1           30E4                       xor	ah,ah
15972 3AF3           8946         F4            mov	-$C[bp],ax
15973                                           !BCC_EOS
15974                                           ! 1745  theightm1=video_param_table[vpti].theightm1;
15975                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
15976 3AF6           8A46         F9            mov	al,-7[bp]
15977 3AF9           30E4                       xor	ah,ah
15978 3AFB           B1                     06  mov	cl,*6
15979 3AFD           D3E0                       shl	ax,cl
15980 3AFF           89C3                       mov	bx,ax
15981 3B01           81C3                 024A  add	bx,#_video_param_table
15982                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
15983 3B05           8A47         01            mov	al,1[bx]
15984 3B08           30E4                       xor	ah,ah
15985 3B0A           8946         F2            mov	-$E[bp],ax
15986                                           !BCC_EOS
15987                                           ! 1746  cheight=video_param_table[vpti].cheight;
15988                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
15989 3B0D           8A46         F9            mov	al,-7[bp]
15990 3B10           30E4                       xor	ah,ah
15991 3B12           B1                     06  mov	cl,*6
15992 3B14           D3E0                       shl	ax,cl
15993 3B16           89C3                       mov	bx,ax
15994 3B18           81C3                 024A  add	bx,#_video_param_table
15995                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
15996 3B1C           8A47         02            mov	al,2[bx]
15997 3B1F           30E4                       xor	ah,ah
15998 3B21           8946         F0            mov	-$10[bp],ax
15999                                           !BCC_EOS
16000                                           ! 1747  video_ctl=read_byte(0x40,0x87);
16001                                           ! Debug: list int = const $87 (used reg = )
16002 3B24           B8                   0087  mov	ax,#$87
16003 3B27           50                         push	ax
16004                                           ! Debug: list int = const $40 (used reg = )
16005 3B28           B8                   0040  mov	ax,*$40
16006 3B2B           50                         push	ax
16007                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16008 3B2C           E8         3FEE            call	_read_byte
16009 3B2F           83C4                   04  add	sp,*4
16010                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16011 3B32           8846         EE            mov	-$12[bp],al
16012                                           !BCC_EOS
16013                                           ! 1748  vga_switches=read_byte(0x40,0x88);
16014                                           ! Debug: list int = const $88 (used reg = )
16015 3B35           B8                   0088  mov	ax,#$88
16016 3B38           50                         push	ax
16017                                           ! Debug: list int = const $40 (used reg = )
16018 3B39           B8                   0040  mov	ax,*$40
16019 3B3C           50                         push	ax
16020                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16021 3B3D           E8         3FDD            call	_read_byte
16022 3B40           83C4                   04  add	sp,*4
16023                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16024 3B43           8846         ED            mov	-$13[bp],al
16025                                           !BCC_EOS
16026                                           ! 1749  modeset_ctl=read_byte(0x40,0x89);
16027                                           ! Debug: list int = const $89 (used reg = )
16028 3B46           B8                   0089  mov	ax,#$89
16029 3B49           50                         push	ax
16030                                           ! Debug: list int = const $40 (used reg = )
16031 3B4A           B8                   0040  mov	ax,*$40
16032 3B4D           50                         push	ax
16033                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16034 3B4E           E8         3FCC            call	_read_byte
16035 3B51           83C4                   04  add	sp,*4
16036                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16037 3B54           8846         EF            mov	-$11[bp],al
16038                                           !BCC_EOS
16039                                           ! 1750  if((modeset_ctl&0x08)==0)
16040                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16041 3B57           8A46         EF            mov	al,-$11[bp]
16042 3B5A           24                     08  and	al,*8
16043                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16044 3B5C           84C0                       test	al,al
16045 3B5E   7403    E9         0146            bne 	.47
16046                       00003B63            .48:
16047                                           ! 1751   {
16048                                           ! 1752    outb(0x3c6,vga_modes[line].pelmask);
16049                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16050 3B63           8A46         FE            mov	al,-2[bp]
16051 3B66           30E4                       xor	ah,ah
16052 3B68           B1                     03  mov	cl,*3
16053 3B6A           D3E0                       shl	ax,cl
16054 3B6C           89C3                       mov	bx,ax
16055 3B6E           81C3                 01B6  add	bx,#_vga_modes
16056                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16057 3B72           8A47         06            mov	al,6[bx]
16058 3B75           30E4                       xor	ah,ah
16059 3B77           50                         push	ax
16060                                           ! Debug: list int = const $3C6 (used reg = )
16061 3B78           B8                   03C6  mov	ax,#$3C6
16062 3B7B           50                         push	ax
16063                                           ! Debug: func () void = outb+0 (used reg = )
16064 3B7C           E8         400A            call	_outb
16065 3B7F           83C4                   04  add	sp,*4
16066                                           !BCC_EOS
16067                                           ! 1753    outb(0x3c8,0x00);
16068                                           ! Debug: list int = const 0 (used reg = )
16069 3B82           31C0                       xor	ax,ax
16070 3B84           50                         push	ax
16071                                           ! Debug: list int = const $3C8 (used reg = )
16072 3B85           B8                   03C8  mov	ax,#$3C8
16073 3B88           50                         push	ax
16074                                           ! Debug: func () void = outb+0 (used reg = )
16075 3B89           E8         3FFD            call	_outb
16076 3B8C           83C4                   04  add	sp,*4
16077                                           !BCC_EOS
16078                                           ! 1754    switch(vga_modes[line].dacmodel)
16079                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16080 3B8F           8A46         FE            mov	al,-2[bp]
16081 3B92           30E4                       xor	ah,ah
16082 3B94           B1                     03  mov	cl,*3
16083 3B96           D3E0                       shl	ax,cl
16084 3B98           89C3                       mov	bx,ax
16085 3B9A           81C3                 01B6  add	bx,#_vga_modes
16086 3B9E           8A47         07            mov	al,7[bx]
16087                                           ! 1755     {case 0:
16088 3BA1           EB           22            jmp .4B
16089                                           ! 1756       palette=&palette0;
16090                       00003BA3            .4C:
16091                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16092 3BA3           BB                   09CA  mov	bx,#_palette0
16093 3BA6           895E         FA            mov	-6[bp],bx
16094                                           !BCC_EOS
16095                                           ! 1757       break;
16096 3BA9           EB           2A            jmp .49
16097                                           !BCC_EOS
16098                                           ! 1758      case 1:
16099                                           ! 1759       palette=&palette1;
16100                       00003BAB            .4D:
16101                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16102 3BAB           BB                   0A8A  mov	bx,#_palette1
16103 3BAE           895E         FA            mov	-6[bp],bx
16104                                           !BCC_EOS
16105                                           ! 1760       break;
16106 3BB1           EB           22            jmp .49
16107                                           !BCC_EOS
16108                                           ! 1761      case 2:
16109                                           ! 1762       palette=&palette2;
16110                       00003BB3            .4E:
16111                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16112 3BB3           BB                   0B4A  mov	bx,#_palette2
16113 3BB6           895E         FA            mov	-6[bp],bx
16114                                           !BCC_EOS
16115                                           ! 1763       break;
16116 3BB9           EB           1A            jmp .49
16117                                           !BCC_EOS
16118                                           ! 1764      case 3:
16119                                           ! 1765       palette=&palette3;
16120                       00003BBB            .4F:
16121                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16122 3BBB           BB                   0C0A  mov	bx,#_palette3
16123 3BBE           895E         FA            mov	-6[bp],bx
16124                                           !BCC_EOS
16125                                           ! 1766       break;
16126 3BC1           EB           12            jmp .49
16127                                           !BCC_EOS
16128                                           ! 1767     }
16129                                           ! 1768    for(i=0;i<0x0100;i++)
16130 3BC3           EB           10            jmp .49
16131                       00003BC5            .4B:
16132 3BC5           2C                     00  sub	al,*0
16133 3BC7           74           DA            je 	.4C
16134 3BC9           2C                     01  sub	al,*1
16135 3BCB           74           DE            je 	.4D
16136 3BCD           2C                     01  sub	al,*1
16137 3BCF           74           E2            je 	.4E
16138 3BD1           2C                     01  sub	al,*1
16139 3BD3           74           E6            je 	.4F
16140                       00003BD5            .49:
16141                       FFFFFFE8            ..FFFE	=	-$18
16142                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16143 3BD5           31C0                       xor	ax,ax
16144 3BD7           8946         F6            mov	-$A[bp],ax
16145                                           !BCC_EOS
16146                                           !BCC_EOS
16147                                           ! 1769     {if(i<=dac_regs[vga_modes[line].dacmodel])
16148 3BDA           E9         00AB            br 	.52
16149                       00003BDD            .53:
16150                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16151 3BDD           8A46         FE            mov	al,-2[bp]
16152 3BE0           30E4                       xor	ah,ah
16153 3BE2           B1                     03  mov	cl,*3
16154 3BE4           D3E0                       shl	ax,cl
16155 3BE6           89C3                       mov	bx,ax
16156 3BE8           81C3                 01B6  add	bx,#_vga_modes
16157                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16158 3BEC           8A47         07            mov	al,7[bx]
16159 3BEF           30E4                       xor	ah,ah
16160 3BF1           89C3                       mov	bx,ax
16161                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16162 3BF3           8A87       0246            mov	al,_dac_regs[bx]
16163 3BF7           30E4                       xor	ah,ah
16164 3BF9           3B46         F6            cmp	ax,-$A[bp]
16165 3BFC           72           5C            jb  	.54
16166                       00003BFE            .55:
16167                                           ! 1770       {outb(0x3c9,palette[(i*3)+0]);
16168                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16169 3BFE           8B46         F6            mov	ax,-$A[bp]
16170 3C01           89C2                       mov	dx,ax
16171 3C03           D1E0                       shl	ax,*1
16172 3C05           01D0                       add	ax,dx
16173                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16174                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16175 3C07           0346         FA            add	ax,-6[bp]
16176 3C0A           89C3                       mov	bx,ax
16177                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16178 3C0C           8A07                       mov	al,[bx]
16179 3C0E           30E4                       xor	ah,ah
16180 3C10           50                         push	ax
16181                                           ! Debug: list int = const $3C9 (used reg = )
16182 3C11           B8                   03C9  mov	ax,#$3C9
16183 3C14           50                         push	ax
16184                                           ! Debug: func () void = outb+0 (used reg = )
16185 3C15           E8         3F71            call	_outb
16186 3C18           83C4                   04  add	sp,*4
16187                                           !BCC_EOS
16188                                           ! 1771        outb(0x3c9,palette[(i*3)+1]);
16189                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16190 3C1B           8B46         F6            mov	ax,-$A[bp]
16191 3C1E           89C2                       mov	dx,ax
16192 3C20           D1E0                       shl	ax,*1
16193 3C22           01D0                       add	ax,dx
16194                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16195                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16196 3C24           40                         inc	ax
16197 3C25           0346         FA            add	ax,-6[bp]
16198 3C28           89C3                       mov	bx,ax
16199                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16200 3C2A           8A07                       mov	al,[bx]
16201 3C2C           30E4                       xor	ah,ah
16202 3C2E           50                         push	ax
16203                                           ! Debug: list int = const $3C9 (used reg = )
16204 3C2F           B8                   03C9  mov	ax,#$3C9
16205 3C32           50                         push	ax
16206                                           ! Debug: func () void = outb+0 (used reg = )
16207 3C33           E8         3F53            call	_outb
16208 3C36           83C4                   04  add	sp,*4
16209                                           !BCC_EOS
16210                                           ! 1772        outb(0x3c9,palette[(i*3)+2]);
16211                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16212 3C39           8B46         F6            mov	ax,-$A[bp]
16213 3C3C           89C2                       mov	dx,ax
16214 3C3E           D1E0                       shl	ax,*1
16215 3C40           01D0                       add	ax,dx
16216                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16217                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16218 3C42           40                         inc	ax
16219 3C43           40                         inc	ax
16220 3C44           0346         FA            add	ax,-6[bp]
16221 3C47           89C3                       mov	bx,ax
16222                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16223 3C49           8A07                       mov	al,[bx]
16224 3C4B           30E4                       xor	ah,ah
16225 3C4D           50                         push	ax
16226                                           ! Debug: list int = const $3C9 (used reg = )
16227 3C4E           B8                   03C9  mov	ax,#$3C9
16228 3C51           50                         push	ax
16229                                           ! Debug: func () void = outb+0 (used reg = )
16230 3C52           E8         3F34            call	_outb
16231 3C55           83C4                   04  add	sp,*4
16232                                           !BCC_EOS
16233                                           ! 1773       }
16234                                           ! 1774      else
16235                                           ! 1775       {outb(0x3c9,0);
16236 3C58           EB           27            jmp .56
16237                       00003C5A            .54:
16238                                           ! Debug: list int = const 0 (used reg = )
16239 3C5A           31C0                       xor	ax,ax
16240 3C5C           50                         push	ax
16241                                           ! Debug: list int = const $3C9 (used reg = )
16242 3C5D           B8                   03C9  mov	ax,#$3C9
16243 3C60           50                         push	ax
16244                                           ! Debug: func () void = outb+0 (used reg = )
16245 3C61           E8         3F25            call	_outb
16246 3C64           83C4                   04  add	sp,*4
16247                                           !BCC_EOS
16248                                           ! 1776        outb(0x3c9,0);
16249                                           ! Debug: list int = const 0 (used reg = )
16250 3C67           31C0                       xor	ax,ax
16251 3C69           50                         push	ax
16252                                           ! Debug: list int = const $3C9 (used reg = )
16253 3C6A           B8                   03C9  mov	ax,#$3C9
16254 3C6D           50                         push	ax
16255                                           ! Debug: func () void = outb+0 (used reg = )
16256 3C6E           E8         3F18            call	_outb
16257 3C71           83C4                   04  add	sp,*4
16258                                           !BCC_EOS
16259                                           ! 1777        outb(0x3c9,0);
16260                                           ! Debug: list int = const 0 (used reg = )
16261 3C74           31C0                       xor	ax,ax
16262 3C76           50                         push	ax
16263                                           ! Debug: list int = const $3C9 (used reg = )
16264 3C77           B8                   03C9  mov	ax,#$3C9
16265 3C7A           50                         push	ax
16266                                           ! Debug: func () void = outb+0 (used reg = )
16267 3C7B           E8         3F0B            call	_outb
16268 3C7E           83C4                   04  add	sp,*4
16269                                           !BCC_EOS
16270                                           ! 1778       }
16271                                           ! 1779     }
16272                       00003C81            .56:
16273                                           ! 1780    if((modeset_ctl&0x02)==0x02)
16274                       00003C81            .51:
16275                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16276 3C81           8B46         F6            mov	ax,-$A[bp]
16277 3C84           40                         inc	ax
16278 3C85           8946         F6            mov	-$A[bp],ax
16279                       00003C88            .52:
16280                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16281 3C88           8B46         F6            mov	ax,-$A[bp]
16282 3C8B           3D                   0100  cmp	ax,#$100
16283 3C8E   7303    E9         FF4A            blo 	.53
16284                       00003C93            .57:
16285                       00003C93            .50:
16286                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16287 3C93           8A46         EF            mov	al,-$11[bp]
16288 3C96           24                     02  and	al,*2
16289                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16290 3C98           3C                     02  cmp	al,*2
16291 3C9A           75           0D            jne 	.58
16292                       00003C9C            .59:
16293                                           ! 1781     {
16294                                           ! 1782      biosfn_perform_gray_scale_summing(0x00, 0x100);
16295                                           ! Debug: list int = const $100 (used reg = )
16296 3C9C           B8                   0100  mov	ax,#$100
16297 3C9F           50                         push	ax
16298                                           ! Debug: list int = const 0 (used reg = )
16299 3CA0           31C0                       xor	ax,ax
16300 3CA2           50                         push	ax
16301                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16302 3CA3           E8         2769            call	_biosfn_perform_gray_scale_summing
16303 3CA6           83C4                   04  add	sp,*4
16304                                           !BCC_EOS
16305                                           ! 1783     }
16306                                           ! 1784   }
16307                       00003CA9            .58:
16308                                           ! 1785  inb(0x3da);
16309                       00003CA9            .47:
16310                                           ! Debug: list int = const $3DA (used reg = )
16311 3CA9           B8                   03DA  mov	ax,#$3DA
16312 3CAC           50                         push	ax
16313                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16314 3CAD           E8         3EC3            call	_inb
16315 3CB0           44                         inc	sp
16316 3CB1           44                         inc	sp
16317                                           !BCC_EOS
16318                                           ! 1786  for(i=0;i<=0x13;i++)
16319                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16320 3CB2           31C0                       xor	ax,ax
16321 3CB4           8946         F6            mov	-$A[bp],ax
16322                                           !BCC_EOS
16323                                           !BCC_EOS
16324                                           ! 1787   {outb(0x3c0,i);
16325 3CB7           EB           38            jmp .5C
16326                       00003CB9            .5D:
16327                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16328 3CB9           FF76         F6            push	-$A[bp]
16329                                           ! Debug: list int = const $3C0 (used reg = )
16330 3CBC           B8                   03C0  mov	ax,#$3C0
16331 3CBF           50                         push	ax
16332                                           ! Debug: func () void = outb+0 (used reg = )
16333 3CC0           E8         3EC6            call	_outb
16334 3CC3           83C4                   04  add	sp,*4
16335                                           !BCC_EOS
16336                                           ! 1788    outb
16337                                           ! 1788 (0x3c0,video_param_table[vpti].actl_regs[i]);
16338                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16339 3CC6           8A46         F9            mov	al,-7[bp]
16340 3CC9           30E4                       xor	ah,ah
16341 3CCB           B1                     06  mov	cl,*6
16342 3CCD           D3E0                       shl	ax,cl
16343 3CCF           89C3                       mov	bx,ax
16344 3CD1           81C3                 024A  add	bx,#_video_param_table
16345                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16346 3CD5           8B46         F6            mov	ax,-$A[bp]
16347 3CD8           01C3                       add	bx,ax
16348                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16349 3CDA           8A47         23            mov	al,$23[bx]
16350 3CDD           30E4                       xor	ah,ah
16351 3CDF           50                         push	ax
16352                                           ! Debug: list int = const $3C0 (used reg = )
16353 3CE0           B8                   03C0  mov	ax,#$3C0
16354 3CE3           50                         push	ax
16355                                           ! Debug: func () void = outb+0 (used reg = )
16356 3CE4           E8         3EA2            call	_outb
16357 3CE7           83C4                   04  add	sp,*4
16358                                           !BCC_EOS
16359                                           ! 1789   }
16360                                           ! 1790  outb(0x3c0,0x14);
16361                       00003CEA            .5B:
16362                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16363 3CEA           8B46         F6            mov	ax,-$A[bp]
16364 3CED           40                         inc	ax
16365 3CEE           8946         F6            mov	-$A[bp],ax
16366                       00003CF1            .5C:
16367                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16368 3CF1           8B46         F6            mov	ax,-$A[bp]
16369 3CF4           3D                   0013  cmp	ax,*$13
16370 3CF7           76           C0            jbe	.5D
16371                       00003CF9            .5E:
16372                       00003CF9            .5A:
16373                                           ! Debug: list int = const $14 (used reg = )
16374 3CF9           B8                   0014  mov	ax,*$14
16375 3CFC           50                         push	ax
16376                                           ! Debug: list int = const $3C0 (used reg = )
16377 3CFD           B8                   03C0  mov	ax,#$3C0
16378 3D00           50                         push	ax
16379                                           ! Debug: func () void = outb+0 (used reg = )
16380 3D01           E8         3E85            call	_outb
16381 3D04           83C4                   04  add	sp,*4
16382                                           !BCC_EOS
16383                                           ! 1791  outb(0x3c0,0x00);
16384                                           ! Debug: list int = const 0 (used reg = )
16385 3D07           31C0                       xor	ax,ax
16386 3D09           50                         push	ax
16387                                           ! Debug: list int = const $3C0 (used reg = )
16388 3D0A           B8                   03C0  mov	ax,#$3C0
16389 3D0D           50                         push	ax
16390                                           ! Debug: func () void = outb+0 (used reg = )
16391 3D0E           E8         3E78            call	_outb
16392 3D11           83C4                   04  add	sp,*4
16393                                           !BCC_EOS
16394                                           ! 1792  outb(0x3c4,0);
16395                                           ! Debug: list int = const 0 (used reg = )
16396 3D14           31C0                       xor	ax,ax
16397 3D16           50                         push	ax
16398                                           ! Debug: list int = const $3C4 (used reg = )
16399 3D17           B8                   03C4  mov	ax,#$3C4
16400 3D1A           50                         push	ax
16401                                           ! Debug: func () void = outb+0 (used reg = )
16402 3D1B           E8         3E6B            call	_outb
16403 3D1E           83C4                   04  add	sp,*4
16404                                           !BCC_EOS
16405                                           ! 1793  outb(0x3c5,0x03);
16406                                           ! Debug: list int = const 3 (used reg = )
16407 3D21           B8                   0003  mov	ax,*3
16408 3D24           50                         push	ax
16409                                           ! Debug: list int = const $3C5 (used reg = )
16410 3D25           B8                   03C5  mov	ax,#$3C5
16411 3D28           50                         push	ax
16412                                           ! Debug: func () void = outb+0 (used reg = )
16413 3D29           E8         3E5D            call	_outb
16414 3D2C           83C4                   04  add	sp,*4
16415                                           !BCC_EOS
16416                                           ! 1794  for(i=1;i<=4;i++)
16417                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16418 3D2F           B8                   0001  mov	ax,*1
16419 3D32           8946         F6            mov	-$A[bp],ax
16420                                           !BCC_EOS
16421                                           !BCC_EOS
16422                                           ! 1795   {outb(0x3c4,i);
16423 3D35           EB           3F            jmp .61
16424                       00003D37            .62:
16425                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16426 3D37           FF76         F6            push	-$A[bp]
16427                                           ! Debug: list int = const $3C4 (used reg = )
16428 3D3A           B8                   03C4  mov	ax,#$3C4
16429 3D3D           50                         push	ax
16430                                           ! Debug: func () void = outb+0 (used reg = )
16431 3D3E           E8         3E48            call	_outb
16432 3D41           83C4                   04  add	sp,*4
16433                                           !BCC_EOS
16434                                           ! 1796    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16435                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16436 3D44           8B46         F6            mov	ax,-$A[bp]
16437 3D47           48                         dec	ax
16438 3D48           50                         push	ax
16439                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16440 3D49           8A46         F9            mov	al,-7[bp]
16441 3D4C           30E4                       xor	ah,ah
16442 3D4E           B1                     06  mov	cl,*6
16443 3D50           D3E0                       shl	ax,cl
16444 3D52           89C3                       mov	bx,ax
16445 3D54           81C3                 024A  add	bx,#_video_param_table
16446                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16447 3D58           8B46         E8            mov	ax,-$18[bp]
16448 3D5B           01C3                       add	bx,ax
16449 3D5D           44                         inc	sp
16450 3D5E           44                         inc	sp
16451                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16452 3D5F           8A47         05            mov	al,5[bx]
16453 3D62           30E4                       xor	ah,ah
16454 3D64           50                         push	ax
16455                                           ! Debug: list int = const $3C5 (used reg = )
16456 3D65           B8                   03C5  mov	ax,#$3C5
16457 3D68           50                         push	ax
16458                                           ! Debug: func () void = outb+0 (used reg = )
16459 3D69           E8         3E1D            call	_outb
16460 3D6C           83C4                   04  add	sp,*4
16461                                           !BCC_EOS
16462                                           ! 1797   }
16463                                           ! 1798  for(i=0;i<=8;i++)
16464                       00003D6F            .60:
16465                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16466 3D6F           8B46         F6            mov	ax,-$A[bp]
16467 3D72           40                         inc	ax
16468 3D73           8946         F6            mov	-$A[bp],ax
16469                       00003D76            .61:
16470                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16471 3D76           8B46         F6            mov	ax,-$A[bp]
16472 3D79           3D                   0004  cmp	ax,*4
16473 3D7C           76           B9            jbe	.62
16474                       00003D7E            .63:
16475                       00003D7E            .5F:
16476                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16477 3D7E           31C0                       xor	ax,ax
16478 3D80           8946         F6            mov	-$A[bp],ax
16479                                           !BCC_EOS
16480                                           !BCC_EOS
16481                                           ! 1799   {outb(0x3ce,i);
16482 3D83           EB           38            jmp .66
16483                       00003D85            .67:
16484                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16485 3D85           FF76         F6            push	-$A[bp]
16486                                           ! Debug: list int = const $3CE (used reg = )
16487 3D88           B8                   03CE  mov	ax,#$3CE
16488 3D8B           50                         push	ax
16489                                           ! Debug: func () void = outb+0 (used reg = )
16490 3D8C           E8         3DFA            call	_outb
16491 3D8F           83C4                   04  add	sp,*4
16492                                           !BCC_EOS
16493                                           ! 1800    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16494                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16495 3D92           8A46         F9            mov	al,-7[bp]
16496 3D95           30E4                       xor	ah,ah
16497 3D97           B1                     06  mov	cl,*6
16498 3D99           D3E0                       shl	ax,cl
16499 3D9B           89C3                       mov	bx,ax
16500 3D9D           81C3                 024A  add	bx,#_video_param_table
16501                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16502 3DA1           8B46         F6            mov	ax,-$A[bp]
16503 3DA4           01C3                       add	bx,ax
16504                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16505 3DA6           8A47         37            mov	al,$37[bx]
16506 3DA9           30E4                       xor	ah,ah
16507 3DAB           50                         push	ax
16508                                           ! Debug: list int = const $3CF (used reg = )
16509 3DAC           B8                   03CF  mov	ax,#$3CF
16510 3DAF           50                         push	ax
16511                                           ! Debug: func () void = outb+0 (used reg = )
16512 3DB0           E8         3DD6            call	_outb
16513 3DB3           83C4                   04  add	sp,*4
16514                                           !BCC_EOS
16515                                           ! 1801   }
16516                                           ! 1802  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
16517                       00003DB6            .65:
16518                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16519 3DB6           8B46         F6            mov	ax,-$A[bp]
16520 3DB9           40                         inc	ax
16521 3DBA           8946         F6            mov	-$A[bp],ax
16522                       00003DBD            .66:
16523                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
16524 3DBD           8B46         F6            mov	ax,-$A[bp]
16525 3DC0           3D                   0008  cmp	ax,*8
16526 3DC3           76           C0            jbe	.67
16527                       00003DC5            .68:
16528                       00003DC5            .64:
16529                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16530 3DC5           8A46         FE            mov	al,-2[bp]
16531 3DC8           30E4                       xor	ah,ah
16532 3DCA           B1                     03  mov	cl,*3
16533 3DCC           D3E0                       shl	ax,cl
16534 3DCE           89C3                       mov	bx,ax
16535 3DD0           81C3                 01B6  add	bx,#_vga_modes
16536                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
16537 3DD4           8A47         02            mov	al,2[bx]
16538 3DD7           3C                     01  cmp	al,*1
16539 3DD9           75           05            jne 	.69
16540                       00003DDB            .6A:
16541 3DDB           B8                   03B4  mov	ax,#$3B4
16542 3DDE           EB           03            jmp .6B
16543                       00003DE0            .69:
16544 3DE0           B8                   03D4  mov	ax,#$3D4
16545                       00003DE3            .6B:
16546                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
16547 3DE3           8946         EA            mov	-$16[bp],ax
16548                                           !BCC_EOS
16549                                           ! 1803  outw(crtc_addr,0x0011);
16550                                           ! Debug: list int = const $11 (used reg = )
16551 3DE6           B8                   0011  mov	ax,*$11
16552 3DE9           50                         push	ax
16553                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16554 3DEA           FF76         EA            push	-$16[bp]
16555                                           ! Debug: func () void = outw+0 (used reg = )
16556 3DED           E8         3DA9            call	_outw
16557 3DF0           83C4                   04  add	sp,*4
16558                                           !BCC_EOS
16559                                           ! 1804  for(i=0;i<=0x18;i++)
16560                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16561 3DF3           31C0                       xor	ax,ax
16562 3DF5           8946         F6            mov	-$A[bp],ax
16563                                           !BCC_EOS
16564                                           !BCC_EOS
16565                                           ! 1805   {outb(crtc_addr,i);
16566 3DF8           EB           38            jmp .6E
16567                       00003DFA            .6F:
16568                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16569 3DFA           FF76         F6            push	-$A[bp]
16570                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16571 3DFD           FF76         EA            push	-$16[bp]
16572                                           ! Debug: func () void = outb+0 (used reg = )
16573 3E00           E8         3D86            call	_outb
16574 3E03           83C4                   04  add	sp,*4
16575                                           !BCC_EOS
16576                                           ! 1806    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
16577                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16578 3E06           8A46         F9            mov	al,-7[bp]
16579 3E09           30E4                       xor	ah,ah
16580 3E0B           B1                     06  mov	cl,*6
16581 3E0D           D3E0                       shl	ax,cl
16582 3E0F           89C3                       mov	bx,ax
16583 3E11           81C3                 024A  add	bx,#_video_param_table
16584                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
16585 3E15           8B46         F6            mov	ax,-$A[bp]
16586 3E18           01C3                       add	bx,ax
16587                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
16588 3E1A           8A47         0A            mov	al,$A[bx]
16589 3E1D           30E4                       xor	ah,ah
16590 3E1F           50                         push	ax
16591                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16592 3E20           8B46         EA            mov	ax,-$16[bp]
16593                                           ! Debug: list unsigned int = ax+1 (used reg = )
16594 3E23           40                         inc	ax
16595 3E24           50                         push	ax
16596                                           ! Debug: func () void = outb+0 (used reg = )
16597 3E25           E8         3D61            call	_outb
16598 3E28           83C4                   04  add	sp,*4
16599                                           !BCC_EOS
16600                                           ! 1807   }
16601                                           ! 1808  outb(0x3c2,video_param_table[vpti].miscreg);
16602                       00003E2B            .6D:
16603                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16604 3E2B           8B46         F6            mov	ax,-$A[bp]
16605 3E2E           40                         inc	ax
16606 3E2F           8946         F6            mov	-$A[bp],ax
16607                       00003E32            .6E:
16608                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
16609 3E32           8B46         F6            mov	ax,-$A[bp]
16610 3E35           3D                   0018  cmp	ax,*$18
16611 3E38           76           C0            jbe	.6F
16612                       00003E3A            .70:
16613                       00003E3A            .6C:
16614                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16615 3E3A           8A46         F9            mov	al,-7[bp]
16616 3E3D           30E4                       xor	ah,ah
16617 3E3F           B1                     06  mov	cl,*6
16618 3E41           D3E0                       shl	ax,cl
16619 3E43           89C3                       mov	bx,ax
16620 3E45           81C3                 024A  add	bx,#_video_param_table
16621                                           ! Debug: list unsigned char = [bx+9] (used reg = )
16622 3E49           8A47         09            mov	al,9[bx]
16623 3E4C           30E4                       xor	ah,ah
16624 3E4E           50                         push	ax
16625                                           ! Debug: list int = const $3C2 (used reg = )
16626 3E4F           B8                   03C2  mov	ax,#$3C2
16627 3E52           50                         push	ax
16628                                           ! Debug: func () void = outb+0 (used reg = )
16629 3E53           E8         3D33            call	_outb
16630 3E56           83C4                   04  add	sp,*4
16631                                           !BCC_EOS
16632                                           ! 1809  outb(0x3c0,0x20);
16633                                           ! Debug: list int = const $20 (used reg = )
16634 3E59           B8                   0020  mov	ax,*$20
16635 3E5C           50                         push	ax
16636                                           ! Debug: list int = const $3C0 (used reg = )
16637 3E5D           B8                   03C0  mov	ax,#$3C0
16638 3E60           50                         push	ax
16639                                           ! Debug: func () void = outb+0 (used reg = )
16640 3E61           E8         3D25            call	_outb
16641 3E64           83C4                   04  add	sp,*4
16642                                           !BCC_EOS
16643                                           ! 1810  inb(0x3da);
16644                                           ! Debug: list int = const $3DA (used reg = )
16645 3E67           B8                   03DA  mov	ax,#$3DA
16646 3E6A           50                         push	ax
16647                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16648 3E6B           E8         3D05            call	_inb
16649 3E6E           44                         inc	sp
16650 3E6F           44                         inc	sp
16651                                           !BCC_EOS
16652                                           ! 1811  if(noclearmem==0x00)
16653                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
16654 3E70           8A46         FF            mov	al,-1[bp]
16655 3E73           84C0                       test	al,al
16656 3E75   7403    E9         00C1            bne 	.71
16657                       00003E7A            .72:
16658                                           ! 1812   {
16659                                           ! 1813    if(vga_modes[line].class==0x00)
16660                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16661 3E7A           8A46         FE            mov	al,-2[bp]
16662 3E7D           30E4                       xor	ah,ah
16663 3E7F           B1                     03  mov	cl,*3
16664 3E81           D3E0                       shl	ax,cl
16665 3E83           89C3                       mov	bx,ax
16666 3E85           81C3                 01B6  add	bx,#_vga_modes
16667                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
16668 3E89           8A47         01            mov	al,1[bx]
16669 3E8C           84C0                       test	al,al
16670 3E8E           75           26            jne 	.73
16671                       00003E90            .74:
16672                                           ! 1814     {
16673                                           ! 1815      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
16674                                           ! Debug: list int = const $4000 (used reg = )
16675 3E90           B8                   4000  mov	ax,#$4000
16676 3E93           50                         push	ax
16677                                           ! Debug: list int = const $720 (used reg = )
16678 3E94           B8                   0720  mov	ax,#$720
16679 3E97           50                         push	ax
16680                                           ! Debug: list int = const 0 (used reg = )
16681 3E98           31C0                       xor	ax,ax
16682 3E9A           50                         push	ax
16683                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16684 3E9B           8A46         FE            mov	al,-2[bp]
16685 3E9E           30E4                       xor	ah,ah
16686 3EA0           B1                     03  mov	cl,*3
16687 3EA2           D3E0                       shl	ax,cl
16688 3EA4           89C3                       mov	bx,ax
16689 3EA6           81C3                 01B6  add	bx,#_vga_modes
16690                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16691 3EAA           FF77         04            push	4[bx]
16692                                           ! Debug: func () void = memsetw+0 (used reg = )
16693 3EAD           E8         3BE8            call	_memsetw
16694 3EB0           83C4                   08  add	sp,*8
16695                                           !BCC_EOS
16696                                           ! 1816     }
16697                                           ! 1817    else
16698                                           ! 1818     {
16699 3EB3           E9         0085            br 	.75
16700                       00003EB6            .73:
16701                                           ! 1819      if(mode<0x0d)
16702                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
16703 3EB6           8A46         04            mov	al,4[bp]
16704 3EB9           3C                     0D  cmp	al,*$D
16705 3EBB           73           24            jae 	.76
16706                       00003EBD            .77:
16707                                           ! 1820       {
16708                                           ! 1821        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
16709                                           ! Debug: list int = const $4000 (used reg = )
16710 3EBD           B8                   4000  mov	ax,#$4000
16711 3EC0           50                         push	ax
16712                                           ! Debug: list int = const 0 (used reg = )
16713 3EC1           31C0                       xor	ax,ax
16714 3EC3           50                         push	ax
16715                                           ! Debug: list int = const 0 (used reg = )
16716 3EC4           31C0                       xor	ax,ax
16717 3EC6           50                         push	ax
16718                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16719 3EC7           8A46         FE            mov	al,-2[bp]
16720 3ECA           30E4                       xor	ah,ah
16721 3ECC           B1                     03  mov	cl,*3
16722 3ECE           D3E0                       shl	ax,cl
16723 3ED0           89C3                       mov	bx,ax
16724 3ED2           81C3                 01B6  add	bx,#_vga_modes
16725                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16726 3ED6           FF77         04            push	4[bx]
16727                                           ! Debug: func () void = memsetw+0 (used reg = )
16728 3ED9           E8         3BBC            call	_memsetw
16729 3EDC           83C4                   08  add	sp,*8
16730                                           !BCC_EOS
16731                                           ! 1822       }
16732                                           ! 1823      else
16733                                           ! 1824       {
16734 3EDF           EB           5A            jmp .78
16735                       00003EE1            .76:
16736                                           ! 1825        outb( 0x3c4, 0x02 );
16737                                           ! Debug: list int = const 2 (used reg = )
16738 3EE1           B8                   0002  mov	ax,*2
16739 3EE4           50                         push	ax
16740                                           ! Debug: list int = const $3C4 (used reg = )
16741 3EE5           B8                   03C4  mov	ax,#$3C4
16742 3EE8           50                         push	ax
16743                                           ! Debug: func () void = outb+0 (used reg = )
16744 3EE9           E8         3C9D            call	_outb
16745 3EEC           83C4                   04  add	sp,*4
16746                                           !BCC_EOS
16747                                           ! 1826        mmask = inb( 0x3c5 );
16748                                           ! Debug: list int = const $3C5 (used reg = )
16749 3EEF           B8                   03C5  mov	ax,#$3C5
16750 3EF2           50                         push	ax
16751                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16752 3EF3           E8         3C7D            call	_inb
16753 3EF6           44                         inc	sp
16754 3EF7           44                         inc	sp
16755                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
16756 3EF8           8846         FD            mov	-3[bp],al
16757                                           !BCC_EOS
16758                                           ! 1827        outb( 0x3c5, 0x0f );
16759                                           ! Debug: list int = const $F (used reg = )
16760 3EFB           B8                   000F  mov	ax,*$F
16761 3EFE           50                         push	ax
16762                                           ! Debug: list int = const $3C5 (used reg = )
16763 3EFF           B8                   03C5  mov	ax,#$3C5
16764 3F02           50                         push	ax
16765                                           ! Debug: func () void = outb+0 (used reg = )
16766 3F03           E8         3C83            call	_outb
16767 3F06           83C4                   04  add	sp,*4
16768                                           !BCC_EOS
16769                                           ! 1828        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
16770                                           ! Debug: list unsigned int = const $8000 (used reg = )
16771 3F09           B8                   8000  mov	ax,#$8000
16772 3F0C           50                         push	ax
16773                                           ! Debug: list int = const 0 (used reg = )
16774 3F0D           31C0                       xor	ax,ax
16775 3F0F           50                         push	ax
16776                                           ! Debug: list int = const 0 (used reg = )
16777 3F10           31C0                       xor	ax,ax
16778 3F12           50                         push	ax
16779                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16780 3F13           8A46         FE            mov	al,-2[bp]
16781 3F16           30E4                       xor	ah,ah
16782 3F18           B1                     03  mov	cl,*3
16783 3F1A           D3E0                       shl	ax,cl
16784 3F1C           89C3                       mov	bx,ax
16785 3F1E           81C3                 01B6  add	bx,#_vga_modes
16786                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16787 3F22           FF77         04            push	4[bx]
16788                                           ! Debug: func () void = memsetw+0 (used reg = )
16789 3F25           E8         3B70            call	_memsetw
16790 3F28           83C4                   08  add	sp,*8
16791                                           !BCC_EOS
16792                                           ! 1829        outb( 0x3c5, mmask );
16793                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
16794 3F2B           8A46         FD            mov	al,-3[bp]
16795 3F2E           30E4                       xor	ah,ah
16796 3F30           50                         push	ax
16797                                           ! Debug: list int = const $3C5 (used reg = )
16798 3F31           B8                   03C5  mov	ax,#$3C5
16799 3F34           50                         push	ax
16800                                           ! Debug: func () void = outb+0 (used reg = )
16801 3F35           E8         3C51            call	_outb
16802 3F38           83C4                   04  add	sp,*4
16803                                           !BCC_EOS
16804                                           ! 1830       }
16805                                           ! 1831     }
16806                       00003F3B            .78:
16807                                           ! 1832   }
16808                       00003F3B            .75:
16809                                           ! 1833  write_byte(0x40,0x49,mode);
16810                       00003F3B            .71:
16811                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16812 3F3B           8A46         04            mov	al,4[bp]
16813 3F3E           30E4                       xor	ah,ah
16814 3F40           50                         push	ax
16815                                           ! Debug: list int = const $49 (used reg = )
16816 3F41           B8                   0049  mov	ax,*$49
16817 3F44           50                         push	ax
16818                                           ! Debug: list int = const $40 (used reg = )
16819 3F45           B8                   0040  mov	ax,*$40
16820 3F48           50                         push	ax
16821                                           ! Debug: func () void = write_byte+0 (used reg = )
16822 3F49           E8         3BF7            call	_write_byte
16823 3F4C           83C4                   06  add	sp,*6
16824                                           !BCC_EOS
16825                                           ! 1834  write_word(0x40,0x4A,twidth);
16826                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
16827 3F4F           FF76         F4            push	-$C[bp]
16828                                           ! Debug: list int = const $4A (used reg = )
16829 3F52           B8                   004A  mov	ax,*$4A
16830 3F55           50                         push	ax
16831                                           ! Debug: list int = const $40 (used reg = )
16832 3F56           B8                   0040  mov	ax,*$40
16833 3F59           50                         push	ax
16834                                           ! Debug: func () void = write_word+0 (used reg = )
16835 3F5A           E8         3BFE            call	_write_word
16836 3F5D           83C4                   06  add	sp,*6
16837                                           !BCC_EOS
16838                                           ! 1835  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
16839                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16840 3F60           8A46         F9            mov	al,-7[bp]
16841 3F63           30E4                       xor	ah,ah
16842 3F65           B1                     06  mov	cl,*6
16843 3F67           D3E0                       shl	ax,cl
16844 3F69           89C3                       mov	bx,ax
16845 3F6B           81C3                 024A  add	bx,#_video_param_table
16846                                           ! Debug: address unsigned char = [bx+3] (used reg = )
16847                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
16848                                           ! Debug: list unsigned short = [bx+3] (used reg = )
16849 3F6F           FF77         03            push	3[bx]
16850                                           ! Debug: list int = const $4C (used reg = )
16851 3F72           B8                   004C  mov	ax,*$4C
16852 3F75           50                         push	ax
16853                                           ! Debug: list int = const $40 (used reg = )
16854 3F76           B8                   0040  mov	ax,*$40
16855 3F79           50                         push	ax
16856                                           ! Debug: func () void = write_word+0 (used reg = )
16857 3F7A           E8         3BDE            call	_write_word
16858 3F7D           83C4                   06  add	sp,*6
16859                                           !BCC_EOS
16860                                           ! 1836  write_word(0x40,0x63,crtc_addr);
16861                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
16862 3F80           FF76         EA            push	-$16[bp]
16863                                           ! Debug: list int = const $63 (used reg = )
16864 3F83           B8                   0063  mov	ax,*$63
16865 3F86           50                         push	ax
16866                                           ! Debug: list int = const $40 (used reg = )
16867 3F87           B8                   0040  mov	ax,*$40
16868 3F8A           50                         push	ax
16869                                           ! Debug: func () void = write_word+0 (used reg = )
16870 3F8B           E8         3BCD            call	_write_word
16871 3F8E           83C4                   06  add	sp,*6
16872                                           !BCC_EOS
16873                                           ! 1837  write_byte(0x40,0x84,theightm1);
16874                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
16875 3F91           FF76         F2            push	-$E[bp]
16876                                           ! Debug: list int = const $84 (used reg = )
16877 3F94           B8                   0084  mov	ax,#$84
16878 3F97           50                         push	ax
16879                                           ! Debug: list int = const $40 (used reg = )
16880 3F98           B8                   0040  mov	ax,*$40
16881 3F9B           50                         push	ax
16882                                           ! Debug: func () void = write_byte+0 (used reg = )
16883 3F9C           E8         3BA4            call	_write_byte
16884 3F9F           83C4                   06  add	sp,*6
16885                                           !BCC_EOS
16886                                           ! 1838  write_word(0x40,0x85,cheight);
16887                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
16888 3FA2           FF76         F0            push	-$10[bp]
16889                                           ! Debug: list int = const $85 (used reg = )
16890 3FA5           B8                   0085  mov	ax,#$85
16891 3FA8           50                         push	ax
16892                                           ! Debug: list int = const $40 (used reg = )
16893 3FA9           B8                   0040  mov	ax,*$40
16894 3FAC           50                         push	ax
16895                                           ! Debug: func () void = write_word+0 (used reg = )
16896 3FAD           E8         3BAB            call	_write_word
16897 3FB0           83C4                   06  add	sp,*6
16898                                           !BCC_EOS
16899                                           ! 1839  write_byte(0x40,0x87,(0x60|noclearmem));
16900                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
16901                                           ! Debug: expression subtree swapping
16902 3FB3           8A46         FF            mov	al,-1[bp]
16903 3FB6           0C                     60  or	al,*$60
16904                                           ! Debug: list unsigned char = al+0 (used reg = )
16905 3FB8           30E4                       xor	ah,ah
16906 3FBA           50                         push	ax
16907                                           ! Debug: list int = const $87 (used reg = )
16908 3FBB           B8                   0087  mov	ax,#$87
16909 3FBE           50                         push	ax
16910                                           ! Debug: list int = const $40 (used reg = )
16911 3FBF           B8                   0040  mov	ax,*$40
16912 3FC2           50                         push	ax
16913                                           ! Debug: func () void = write_byte+0 (used reg = )
16914 3FC3           E8         3B7D            call	_write_byte
16915 3FC6           83C4                   06  add	sp,*6
16916                                           !BCC_EOS
16917                                           ! 1840  write_byte(0x40,0x88,0xF9);
16918                                           ! Debug: list int = const $F9 (used reg = )
16919 3FC9           B8                   00F9  mov	ax,#$F9
16920 3FCC           50                         push	ax
16921                                           ! Debug: list int = const $88 (used reg = )
16922 3FCD           B8                   0088  mov	ax,#$88
16923 3FD0           50                         push	ax
16924                                           ! Debug: list int = const $40 (used reg = )
16925 3FD1           B8                   0040  mov	ax,*$40
16926 3FD4           50                         push	ax
16927                                           ! Debug: func () void = write_byte+0 (used reg = )
16928 3FD5           E8         3B6B            call	_write_byte
16929 3FD8           83C4                   06  add	sp,*6
16930                                           !BCC_EOS
16931                                           ! 1841  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
16932                                           ! Debug: list int = const $89 (used reg = )
16933 3FDB           B8                   0089  mov	ax,#$89
16934 3FDE           50                         push	ax
16935                                           ! Debug: list int = const $40 (used reg = )
16936 3FDF           B8                   0040  mov	ax,*$40
16937 3FE2           50                         push	ax
16938                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16939 3FE3           E8         3B37            call	_read_byte
16940 3FE6           83C4                   04  add	sp,*4
16941                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
16942 3FE9           24                     7F  and	al,*$7F
16943                                           ! Debug: list unsigned char = al+0 (used reg = )
16944 3FEB           30E4                       xor	ah,ah
16945 3FED           50                         push	ax
16946                                           ! Debug: list int = const $89 (used reg = )
16947 3FEE           B8                   0089  mov	ax,#$89
16948 3FF1           50                         push	ax
16949                                           ! Debug: list int = const $40 (used reg = )
16950 3FF2           B8                   0040  mov	ax,*$40
16951 3FF5           50                         push	ax
16952                                           ! Debug: func () void = write_byte+0 (used reg = )
16953 3FF6           E8         3B4A            call	_write_byte
16954 3FF9           83C4                   06  add	sp,*6
16955                                           !BCC_EOS
16956                                           ! 1842  write_byte(0x40,0x8A,0x08);
16957                                           ! Debug: list int = const 8 (used reg = )
16958 3FFC           B8                   0008  mov	ax,*8
16959 3FFF           50                         push	ax
16960                                           ! Debug: list int = const $8A (used reg = )
16961 4000           B8                   008A  mov	ax,#$8A
16962 4003           50                         push	ax
16963                                           ! Debug: list int = const $40 (used reg = )
16964 4004           B8                   0040  mov	ax,*$40
16965 4007           50                         push	ax
16966                                           ! Debug: func () void = write_byte+0 (used reg = )
16967 4008           E8         3B38            call	_write_byte
16968 400B           83C4                   06  add	sp,*6
16969                                           !BCC_EOS
16970                                           ! 1843  write_word(0x40,0xA8, video_save_pointer_table);
16971                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
16972 400E           BB                   35B3  mov	bx,#_video_save_pointer_table
16973 4011           53                         push	bx
16974                                           ! Debug: list int = const $A8 (used reg = )
16975 4012           B8                   00A8  mov	ax,#$A8
16976 4015           50                         push	ax
16977                                           ! Debug: list int = const $40 (used reg = )
16978 4016           B8                   0040  mov	ax,*$40
16979 4019           50                         push	ax
16980                                           ! Debug: func () void = write_word+0 (used reg = )
16981 401A           E8         3B3E            call	_write_word
16982 401D           83C4                   06  add	sp,*6
16983                                           !BCC_EOS
16984                                           ! 1844  write_word(0x40,0xA8 +2, 0xc000);
16985                                           ! Debug: list unsigned int = const $C000 (used reg = )
16986 4020           B8                   C000  mov	ax,#$C000
16987 4023           50                         push	ax
16988                                           ! Debug: list int = const $AA (used reg = )
16989 4024           B8                   00AA  mov	ax,#$AA
16990 4027           50                         push	ax
16991                                           ! Debug: list int = const $40 (used reg = )
16992 4028           B8                   0040  mov	ax,*$40
16993 402B           50                         push	ax
16994                                           ! Debug: func () void = write_word+0 (used reg = )
16995 402C           E8         3B2C            call	_write_word
16996 402F           83C4                   06  add	sp,*6
16997                                           !BCC_EOS
16998                                           ! 1845  write_byte(0x40,0x65,0x00);
16999                                           ! Debug: list int = const 0 (used reg = )
17000 4032           31C0                       xor	ax,ax
17001 4034           50                         push	ax
17002                                           ! Debug: list int = const $65 (used reg = )
17003 4035           B8                   0065  mov	ax,*$65
17004 4038           50                         push	ax
17005                                           ! Debug: list int = const $40 (used reg = )
17006 4039           B8                   0040  mov	ax,*$40
17007 403C           50                         push	ax
17008                                           ! Debug: func () void = write_byte+0 (used reg = )
17009 403D           E8         3B03            call	_write_byte
17010 4040           83C4                   06  add	sp,*6
17011                                           !BCC_EOS
17012                                           ! 1846  write_byte(0x40,0x66,0x00);
17013                                           ! Debug: list int = const 0 (used reg = )
17014 4043           31C0                       xor	ax,ax
17015 4045           50                         push	ax
17016                                           ! Debug: list int = const $66 (used reg = )
17017 4046           B8                   0066  mov	ax,*$66
17018 4049           50                         push	ax
17019                                           ! Debug: list int = const $40 (used reg = )
17020 404A           B8                   0040  mov	ax,*$40
17021 404D           50                         push	ax
17022                                           ! Debug: func () void = write_byte+0 (used reg = )
17023 404E           E8         3AF2            call	_write_byte
17024 4051           83C4                   06  add	sp,*6
17025                                           !BCC_EOS
17026                                           ! 1847  if(vga_modes[line].class==0x00)
17027                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17028 4054           8A46         FE            mov	al,-2[bp]
17029 4057           30E4                       xor	ah,ah
17030 4059           B1                     03  mov	cl,*3
17031 405B           D3E0                       shl	ax,cl
17032 405D           89C3                       mov	bx,ax
17033 405F           81C3                 01B6  add	bx,#_vga_modes
17034                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17035 4063           8A47         01            mov	al,1[bx]
17036 4066           84C0                       test	al,al
17037 4068           75           0E            jne 	.79
17038                       0000406A            .7A:
17039                                           ! 1848   {
17040                                           ! 1849    biosfn_set_cursor_shape(0x06,0x07);
17041                                           ! Debug: list int = const 7 (used reg = )
17042 406A           B8                   0007  mov	ax,*7
17043 406D           50                         push	ax
17044                                           ! Debug: list int = const 6 (used reg = )
17045 406E           B8                   0006  mov	ax,*6
17046 4071           50                         push	ax
17047                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17048 4072           E8         00BB            call	_biosfn_set_cursor_shape
17049 4075           83C4                   04  add	sp,*4
17050                                           !BCC_EOS
17051                                           ! 1850   }
17052                                           ! 1851  for(i=0;i<8;i++)
17053                       00004078            .79:
17054                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17055 4078           31C0                       xor	ax,ax
17056 407A           8946         F6            mov	-$A[bp],ax
17057                                           !BCC_EOS
17058                                           !BCC_EOS
17059                                           ! 1852   biosfn_set_cursor_pos(i,0x0000);
17060 407D           EB           13            jmp .7D
17061                       0000407F            .7E:
17062                                           ! Debug: list int = const 0 (used reg = )
17063 407F           31C0                       xor	ax,ax
17064 4081           50                         push	ax
17065                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17066 4082           FF76         F6            push	-$A[bp]
17067                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17068 4085           E8         01C3            call	_biosfn_set_cursor_pos
17069 4088           83C4                   04  add	sp,*4
17070                                           !BCC_EOS
17071                                           ! 1853  biosfn_set_active_page(0x00);
17072                       0000408B            .7C:
17073                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17074 408B           8B46         F6            mov	ax,-$A[bp]
17075 408E           40                         inc	ax
17076 408F           8946         F6            mov	-$A[bp],ax
17077                       00004092            .7D:
17078                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17079 4092           8B46         F6            mov	ax,-$A[bp]
17080 4095           3D                   0008  cmp	ax,*8
17081 4098           72           E5            jb 	.7E
17082                       0000409A            .7F:
17083                       0000409A            .7B:
17084                                           ! Debug: list int = const 0 (used reg = )
17085 409A           31C0                       xor	ax,ax
17086 409C           50                         push	ax
17087                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17088 409D           E8         0321            call	_biosfn_set_active_page
17089 40A0           44                         inc	sp
17090 40A1           44                         inc	sp
17091                                           !BCC_EOS
17092                                           ! 1854  if(vga_modes[line].class==0x00)
17093                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17094 40A2           8A46         FE            mov	al,-2[bp]
17095 40A5           30E4                       xor	ah,ah
17096 40A7           B1                     03  mov	cl,*3
17097 40A9           D3E0                       shl	ax,cl
17098 40AB           89C3                       mov	bx,ax
17099 40AD           81C3                 01B6  add	bx,#_vga_modes
17100                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17101 40B1           8A47         01            mov	al,1[bx]
17102 40B4           84C0                       test	al,al
17103 40B6           75           0E            jne 	.80
17104                       000040B8            .81:
17105                                           ! 1855   {
17106                                           ! 1856 #asm
17107                                           !BCC_EOS
17108                                           !BCC_ASM
17109                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17110                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17111                       00000008            _biosfn_set_video_mode.theightm1	set	8
17112                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17113                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17114                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17115                       00000014            _biosfn_set_video_mode.line	set	$14
17116                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17117                       00000006            _biosfn_set_video_mode.cheight	set	6
17118                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17119                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17120                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17121                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17122                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17123                       0000000C            _biosfn_set_video_mode.i	set	$C
17124                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17125                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17126                       00000004            .biosfn_set_video_mode.mode	set	4
17127                       00000010            _biosfn_set_video_mode.palette	set	$10
17128                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17129                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17130                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17131                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17132                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17133                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17134                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17135                       00000013            _biosfn_set_video_mode.mmask	set	$13
17136                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17137                                             ;; copy and activate 8x16 font
17138 40B8           B8                   1104    mov ax, #0x1104
17139 40BB           B3                     00    mov bl, #0x00
17140 40BD           CD                     10    int #0x10
17141 40BF           B8                   1103    mov ax, #0x1103
17142 40C2           B3                     00    mov bl, #0x00
17143 40C4           CD                     10    int #0x10
17144                                           ! 1864 endasm
17145                                           !BCC_ENDASM
17146                                           !BCC_EOS
17147                                           ! 1865   }
17148                                           ! 1866 #asm
17149                       000040C6            .80:
17150                                           !BCC_EOS
17151                                           !BCC_ASM
17152                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17153                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17154                       00000008            _biosfn_set_video_mode.theightm1	set	8
17155                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17156                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17157                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17158                       00000014            _biosfn_set_video_mode.line	set	$14
17159                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17160                       00000006            _biosfn_set_video_mode.cheight	set	6
17161                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17162                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17163                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17164                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17165                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17166                       0000000C            _biosfn_set_video_mode.i	set	$C
17167                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17168                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17169                       00000004            .biosfn_set_video_mode.mode	set	4
17170                       00000010            _biosfn_set_video_mode.palette	set	$10
17171                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17172                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17173                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17174                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17175                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17176                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17177                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17178                       00000013            _biosfn_set_video_mode.mmask	set	$13
17179                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17180                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   40C6           1E                           push ds
 +a   40C7           31C0                         xor ax, ax
 +a   40C9           8ED8                         mov ds, ax
 +a   40CB           B8                   131A    mov ax,  #_vgafont8+128*8
 +a   40CE           A3         007C              mov 0x1f*4, ax
 +a   40D1           B8                   C000    mov ax,  #0xC000
 +a   40D4           A3         007E              mov 0x1f*4+2, ax
 +a   40D7           1F                           pop ds
17181                                           ! 1868 endasm
17182                                           !BCC_ENDASM
17183                                           !BCC_EOS
17184                                           ! 1869   switch(cheight)
17185 40D8           8B46         F0            mov	ax,-$10[bp]
17186                                           ! 1870    {case 8:
17187 40DB           E9         003F            br 	.84
17188                                           ! 1871 #asm
17189                       000040DE            .85:
17190                                           !BCC_EOS
17191                                           !BCC_ASM
17192                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17193                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17194                       00000008            _biosfn_set_video_mode.theightm1	set	8
17195                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17196                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17197                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17198                       00000014            _biosfn_set_video_mode.line	set	$14
17199                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17200                       00000006            _biosfn_set_video_mode.cheight	set	6
17201                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17202                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17203                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17204                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17205                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17206                       0000000C            _biosfn_set_video_mode.i	set	$C
17207                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17208                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17209                       00000004            .biosfn_set_video_mode.mode	set	4
17210                       00000010            _biosfn_set_video_mode.palette	set	$10
17211                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17212                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17213                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17214                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17215                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17216                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17217                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17218                       00000013            _biosfn_set_video_mode.mmask	set	$13
17219                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17220                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   40DE           1E                           push ds
 +a   40DF           31C0                         xor ax, ax
 +a   40E1           8ED8                         mov ds, ax
 +a   40E3           B8                   0F1A    mov ax,  #_vgafont8
 +a   40E6           A3         010C              mov 0x43*4, ax
 +a   40E9           B8                   C000    mov ax,  #0xC000
 +a   40EC           A3         010E              mov 0x43*4+2, ax
 +a   40EF           1F                           pop ds
17221                                           ! 1873 endasm
17222                                           !BCC_ENDASM
17223                                           !BCC_EOS
17224                                           ! 1874      break;
17225 40F0           E9         0039            br 	.82
17226                                           !BCC_EOS
17227                                           ! 1875 
17228                                           ! 1875     case 14:
17229                                           ! 1876 #asm
17230                       000040F3            .86:
17231                                           !BCC_EOS
17232                                           !BCC_ASM
17233                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17234                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17235                       00000008            _biosfn_set_video_mode.theightm1	set	8
17236                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17237                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17238                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17239                       00000014            _biosfn_set_video_mode.line	set	$14
17240                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17241                       00000006            _biosfn_set_video_mode.cheight	set	6
17242                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17243                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17244                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17245                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17246                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17247                       0000000C            _biosfn_set_video_mode.i	set	$C
17248                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17249                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17250                       00000004            .biosfn_set_video_mode.mode	set	4
17251                       00000010            _biosfn_set_video_mode.palette	set	$10
17252                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17253                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17254                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17255                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17256                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17257                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17258                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17259                       00000013            _biosfn_set_video_mode.mmask	set	$13
17260                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17261                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   40F3           1E                           push ds
 +a   40F4           31C0                         xor ax, ax
 +a   40F6           8ED8                         mov ds, ax
 +a   40F8           B8                   171A    mov ax,  #_vgafont14
 +a   40FB           A3         010C              mov 0x43*4, ax
 +a   40FE           B8                   C000    mov ax,  #0xC000
 +a   4101           A3         010E              mov 0x43*4+2, ax
 +a   4104           1F                           pop ds
17262                                           ! 1878 endasm
17263                                           !BCC_ENDASM
17264                                           !BCC_EOS
17265                                           ! 1879      break;
17266 4105           EB           25            jmp .82
17267                                           !BCC_EOS
17268                                           ! 1880     case 16:
17269                                           ! 1881 #asm
17270                       00004107            .87:
17271                                           !BCC_EOS
17272                                           !BCC_ASM
17273                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17274                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17275                       00000008            _biosfn_set_video_mode.theightm1	set	8
17276                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17277                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17278                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17279                       00000014            _biosfn_set_video_mode.line	set	$14
17280                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17281                       00000006            _biosfn_set_video_mode.cheight	set	6
17282                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17283                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17284                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17285                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17286                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17287                       0000000C            _biosfn_set_video_mode.i	set	$C
17288                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17289                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17290                       00000004            .biosfn_set_video_mode.mode	set	4
17291                       00000010            _biosfn_set_video_mode.palette	set	$10
17292                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17293                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17294                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17295                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17296                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17297                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17298                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17299                       00000013            _biosfn_set_video_mode.mmask	set	$13
17300                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17301                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4107           1E                           push ds
 +a   4108           31C0                         xor ax, ax
 +a   410A           8ED8                         mov ds, ax
 +a   410C           B8                   251A    mov ax,  #_vgafont16
 +a   410F           A3         010C              mov 0x43*4, ax
 +a   4112           B8                   C000    mov ax,  #0xC000
 +a   4115           A3         010E              mov 0x43*4+2, ax
 +a   4118           1F                           pop ds
17302                                           ! 1883 endasm
17303                                           !BCC_ENDASM
17304                                           !BCC_EOS
17305                                           ! 1884      break;
17306 4119           EB           11            jmp .82
17307                                           !BCC_EOS
17308                                           ! 1885    }
17309                                           ! 1886 }
17310 411B           EB           0F            jmp .82
17311                       0000411D            .84:
17312 411D           2D                   0008  sub	ax,*8
17313 4120           74           BC            je 	.85
17314 4122           2D                   0006  sub	ax,*6
17315 4125           74           CC            je 	.86
17316 4127           2D                   0002  sub	ax,*2
17317 412A           74           DB            je 	.87
17318                       0000412C            .82:
17319                       FFFFFFE8            ..FFFD	=	-$18
17320 412C           89EC                       mov	sp,bp
17321 412E           5D                         pop	bp
17322 412F           C3                         ret
17323                                           ! 1887 static void biosfn_set_cursor_shape (CH,CL)
17324                                           ! Register BX used in function biosfn_set_video_mode
17325                                           ! 1888 Bit8u CH;Bit8u CL;
17326                       00004130            _biosfn_set_cursor_shape:
17327                                           !BCC_EOS
17328                                           !BCC_EOS
17329                                           ! 1889 {Bit16u cheight,curs,crtc_addr;
17330                                           !BCC_EOS
17331                                           ! 1890  Bit8u modeset_ctl;
17332                                           !BCC_EOS
17333                                           ! 1891  CH&=0x3f;
17334 4130           55                         push	bp
17335 4131           89E5                       mov	bp,sp
17336 4133           83C4                   F8  add	sp,*-8
17337                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17338 4136           8A46         04            mov	al,4[bp]
17339 4139           24                     3F  and	al,*$3F
17340 413B           8846         04            mov	4[bp],al
17341                                           !BCC_EOS
17342                                           ! 1892  CL&=0x1f;
17343                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17344 413E           8A46         06            mov	al,6[bp]
17345 4141           24                     1F  and	al,*$1F
17346 4143           8846         06            mov	6[bp],al
17347                                           !BCC_EOS
17348                                           ! 1893  curs=(CH<<8)+CL;
17349                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17350 4146           8A46         04            mov	al,4[bp]
17351 4149           30E4                       xor	ah,ah
17352 414B           88C4                       mov	ah,al
17353 414D           30C0                       xor	al,al
17354                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17355 414F           0246         06            add	al,6[bp]
17356 4152           80D4                   00  adc	ah,*0
17357                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17358 4155           8946         FC            mov	-4[bp],ax
17359                                           !BCC_EOS
17360                                           ! 1894  write_word(0x40,0x60,curs);
17361                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17362 4158           FF76         FC            push	-4[bp]
17363                                           ! Debug: list int = const $60 (used reg = )
17364 415B           B8                   0060  mov	ax,*$60
17365 415E           50                         push	ax
17366                                           ! Debug: list int = const $40 (used reg = )
17367 415F           B8                   0040  mov	ax,*$40
17368 4162           50                         push	ax
17369                                           ! Debug: func () void = write_word+0 (used reg = )
17370 4163           E8         39F5            call	_write_word
17371 4166           83C4                   06  add	sp,*6
17372                                           !BCC_EOS
17373                                           ! 1895  modeset_ctl=read_byte(0x40,0x89);
17374                                           ! Debug: list int = const $89 (used reg = )
17375 4169           B8                   0089  mov	ax,#$89
17376 416C           50                         push	ax
17377                                           ! Debug: list int = const $40 (used reg = )
17378 416D           B8                   0040  mov	ax,*$40
17379 4170           50                         push	ax
17380                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17381 4171           E8         39A9            call	_read_byte
17382 4174           83C4                   04  add	sp,*4
17383                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17384 4177           8846         F9            mov	-7[bp],al
17385                                           !BCC_EOS
17386                                           ! 1896  cheight = read_word(0x40,0x85);
17387                                           ! Debug: list int = const $85 (used reg = )
17388 417A           B8                   0085  mov	ax,#$85
17389 417D           50                         push	ax
17390                                           ! Debug: list int = const $40 (used reg = )
17391 417E           B8                   0040  mov	ax,*$40
17392 4181           50                         push	ax
17393                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17394 4182           E8         39AB            call	_read_word
17395 4185           83C4                   04  add	sp,*4
17396                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17397 4188           8946         FE            mov	-2[bp],ax
17398                                           !BCC_EOS
17399                                           ! 1897  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17400                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17401 418B           8A46         F9            mov	al,-7[bp]
17402 418E           24                     01  and	al,*1
17403 4190           84C0                       test	al,al
17404 4192           74           66            je  	.88
17405                       00004194            .8C:
17406                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17407 4194           8B46         FE            mov	ax,-2[bp]
17408 4197           3D                   0008  cmp	ax,*8
17409 419A           76           5E            jbe 	.88
17410                       0000419C            .8B:
17411                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17412 419C           8A46         06            mov	al,6[bp]
17413 419F           3C                     08  cmp	al,*8
17414 41A1           73           57            jae 	.88
17415                       000041A3            .8A:
17416                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17417 41A3           8A46         04            mov	al,4[bp]
17418 41A6           3C                     20  cmp	al,*$20
17419 41A8           73           50            jae 	.88
17420                       000041AA            .89:
17421                                           ! 1898   {
17422                                           ! 1899    if(CL!=(CH+1))
17423                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17424 41AA           8A46         04            mov	al,4[bp]
17425 41AD           30E4                       xor	ah,ah
17426                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17427                                           ! Debug: expression subtree swapping
17428 41AF           40                         inc	ax
17429 41B0           50                         push	ax
17430 41B1           8A46         06            mov	al,6[bp]
17431 41B4           30E4                       xor	ah,ah
17432 41B6           3B46         F6            cmp	ax,-$A[bp]
17433 41B9           8D66         F8            lea	sp,-8[bp]
17434 41BC           74           15            je  	.8D
17435                       000041BE            .8E:
17436                                           ! 1900     {
17437                                           ! 1901      CH = ((CH+1) * cheight / 8) -1;
17438                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17439 41BE           8A46         04            mov	al,4[bp]
17440 41C1           30E4                       xor	ah,ah
17441                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17442 41C3           40                         inc	ax
17443 41C4           8B4E         FE            mov	cx,-2[bp]
17444 41C7           F7E9                       imul	cx
17445                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17446 41C9           B1                     03  mov	cl,*3
17447 41CB           D3E8                       shr	ax,cl
17448                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17449                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17450 41CD           48                         dec	ax
17451 41CE           8846         04            mov	4[bp],al
17452                                           !BCC_EOS
17453                                           ! 1902     }
17454                                           ! 1903    else
17455                                           ! 1904     {
17456 41D1           EB           14            jmp .8F
17457                       000041D3            .8D:
17458                                           ! 1905      CH = ((CL+1) * cheight / 8) - 2;
17459                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17460 41D3           8A46         06            mov	al,6[bp]
17461 41D6           30E4                       xor	ah,ah
17462                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17463 41D8           40                         inc	ax
17464 41D9           8B4E         FE            mov	cx,-2[bp]
17465 41DC           F7E9                       imul	cx
17466                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17467 41DE           B1                     03  mov	cl,*3
17468 41E0           D3E8                       shr	ax,cl
17469                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17470                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17471 41E2           48                         dec	ax
17472 41E3           48                         dec	ax
17473 41E4           8846         04            mov	4[bp],al
17474                                           !BCC_EOS
17475                                           ! 1906     }
17476                                           ! 1907    CL = ((CL+1) * cheight / 8) - 1;
17477                       000041E7            .8F:
17478                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17479 41E7           8A46         06            mov	al,6[bp]
17480 41EA           30E4                       xor	ah,ah
17481                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17482 41EC           40                         inc	ax
17483 41ED           8B4E         FE            mov	cx,-2[bp]
17484 41F0           F7E9                       imul	cx
17485                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17486 41F2           B1                     03  mov	cl,*3
17487 41F4           D3E8                       shr	ax,cl
17488                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17489                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17490 41F6           48                         dec	ax
17491 41F7           8846         06            mov	6[bp],al
17492                                           !BCC_EOS
17493                                           ! 1908   }
17494                                           ! 1909  crtc_addr=read_word(0x40,0x63);
17495                       000041FA            .88:
17496                                           ! Debug: list int = const $63 (used reg = )
17497 41FA           B8                   0063  mov	ax,*$63
17498 41FD           50                         push	ax
17499                                           ! Debug: list int = const $40 (used reg = )
17500 41FE           B8                   0040  mov	ax,*$40
17501 4201           50                         push	ax
17502                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17503 4202           E8         392B            call	_read_word
17504 4205           83C4                   04  add	sp,*4
17505                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17506 4208           8946         FA            mov	-6[bp],ax
17507                                           !BCC_EOS
17508                                           ! 1910  outb(crtc_addr,0x0a);
17509                                           ! Debug: list int = const $A (used reg = )
17510 420B           B8                   000A  mov	ax,*$A
17511 420E           50                         push	ax
17512                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17513 420F           FF76         FA            push	-6[bp]
17514                                           ! Debug: func () void = outb+0 (used reg = )
17515 4212           E8         3974            call	_outb
17516 4215           83C4                   04  add	sp,*4
17517                                           !BCC_EOS
17518                                           ! 1911  outb(crtc_addr+1,CH);
17519                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
17520 4218           8A46         04            mov	al,4[bp]
17521 421B           30E4                       xor	ah,ah
17522 421D           50                         push	ax
17523                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17524 421E           8B46         FA            mov	ax,-6[bp]
17525                                           ! Debug: list unsigned int = ax+1 (used reg = )
17526 4221           40                         inc	ax
17527 4222           50                         push	ax
17528                                           ! Debug: func () void = outb+0 (used reg = )
17529 4223           E8         3963            call	_outb
17530 4226           83C4                   04  add	sp,*4
17531                                           !BCC_EOS
17532                                           ! 1912  outb(crtc_addr,0x0b);
17533                                           ! Debug: list int = const $B (used reg = )
17534 4229           B8                   000B  mov	ax,*$B
17535 422C           50                         push	ax
17536                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17537 422D           FF76         FA            push	-6[bp]
17538                                           ! Debug: func () void = outb+0 (used reg = )
17539 4230           E8         3956            call	_outb
17540 4233           83C4                   04  add	sp,*4
17541                                           !BCC_EOS
17542                                           ! 1913  outb(crtc_addr+1,CL);
17543                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
17544 4236           8A46         06            mov	al,6[bp]
17545 4239           30E4                       xor	ah,ah
17546 423B           50                         push	ax
17547                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17548 423C           8B46         FA            mov	ax,-6[bp]
17549                                           ! Debug: list unsigned int = ax+1 (used reg = )
17550 423F           40                         inc	ax
17551 4240           50                         push	ax
17552                                           ! Debug: func () void = outb+0 (used reg = )
17553 4241           E8         3945            call	_outb
17554 4244           83C4                   04  add	sp,*4
17555                                           !BCC_EOS
17556                                           ! 1914 }
17557 4247           89EC                       mov	sp,bp
17558 4249           5D                         pop	bp
17559 424A           C3                         ret
17560                                           ! 1915 static void biosfn_set_cursor_pos (page, cursor)
17561                                           ! 1916 Bit8u page;Bit16u cursor;
17562                       0000424B            _biosfn_set_cursor_pos:
17563                                           !BCC_EOS
17564                                           !BCC_EOS
17565                                           ! 1917 {
17566                                           ! 1918  Bit8u xcurs,ycurs,current;
17567                                           !BCC_EOS
17568                                           ! 1919  Bit16u nbcols,nbrows,address,crtc_addr;
17569                                           !BCC_EOS
17570                                           ! 1920  if(page>7)return;
17571 424B           55                         push	bp
17572 424C           89E5                       mov	bp,sp
17573 424E           83C4                   F4  add	sp,*-$C
17574                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
17575 4251           8A46         04            mov	al,4[bp]
17576 4254           3C                     07  cmp	al,*7
17577 4256           76           04            jbe 	.90
17578                       00004258            .91:
17579 4258           89EC                       mov	sp,bp
17580 425A           5D                         pop	bp
17581 425B           C3                         ret
17582                                           !BCC_EOS
17583                                           ! 1921  write_word(0x40, 0x50 +2*page, cursor);
17584                       0000425C            .90:
17585                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
17586 425C           FF76         06            push	6[bp]
17587                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
17588                                           ! Debug: expression subtree swapping
17589 425F           8A46         04            mov	al,4[bp]
17590 4262           30E4                       xor	ah,ah
17591 4264           D1E0                       shl	ax,*1
17592                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17593                                           ! Debug: expression subtree swapping
17594                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17595 4266           05                   0050  add	ax,*$50
17596 4269           50                         push	ax
17597                                           ! Debug: list int = const $40 (used reg = )
17598 426A           B8                   0040  mov	ax,*$40
17599 426D           50                         push	ax
17600                                           ! Debug: func () void = write_word+0 (used reg = )
17601 426E           E8         38EA            call	_write_word
17602 4271           83C4                   06  add	sp,*6
17603                                           !BCC_EOS
17604                                           ! 1922  current=read_byte(0x40,0x62);
17605                                           ! Debug: list int = const $62 (used reg = )
17606 4274           B8                   0062  mov	ax,*$62
17607 4277           50                         push	ax
17608                                           ! Debug: list int = const $40 (used reg = )
17609 4278           B8                   0040  mov	ax,*$40
17610 427B           50                         push	ax
17611                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17612 427C           E8         389E            call	_read_byte
17613 427F           83C4                   04  add	sp,*4
17614                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
17615 4282           8846         FD            mov	-3[bp],al
17616                                           !BCC_EOS
17617                                           ! 1923  if(page==current)
17618                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
17619 4285           8A46         04            mov	al,4[bp]
17620 4288           3A46         FD            cmp	al,-3[bp]
17621 428B   7403    E9         00B8            bne 	.92
17622                       00004290            .93:
17623                                           ! 1924   {
17624                                           ! 1925    nbcols=read_word(0x40,0x4A);
17625                                           ! Debug: list int = const $4A (used reg = )
17626 4290           B8                   004A  mov	ax,*$4A
17627 4293           50                         push	ax
17628                                           ! Debug: list int = const $40 (used reg = )
17629 4294           B8                   0040  mov	ax,*$40
17630 4297           50                         push	ax
17631                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17632 4298           E8         3895            call	_read_word
17633 429B           83C4                   04  add	sp,*4
17634                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
17635 429E           8946         FA            mov	-6[bp],ax
17636                                           !BCC_EOS
17637                                           ! 1926    nbrows=read_byte(0x40,0x84)+1;
17638                                           ! Debug: list int = const $84 (used reg = )
17639 42A1           B8                   0084  mov	ax,#$84
17640 42A4           50                         push	ax
17641                                           ! Debug: list int = const $40 (used reg = )
17642 42A5           B8                   0040  mov	ax,*$40
17643 42A8           50                         push	ax
17644                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17645 42A9           E8         3871            call	_read_byte
17646 42AC           83C4                   04  add	sp,*4
17647                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
17648 42AF           30E4                       xor	ah,ah
17649                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
17650 42B1           40                         inc	ax
17651 42B2           8946         F8            mov	-8[bp],ax
17652                                           !BCC_EOS
17653                                           ! 1927    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
17654                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
17655 42B5           8A46         06            mov	al,6[bp]
17656                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
17657 42B8           8846         FF            mov	-1[bp],al
17658                                           !BCC_EOS
17659                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
17660 42BB           8B46         06            mov	ax,6[bp]
17661 42BE           30C0                       xor	al,al
17662                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17663 42C0           88E0                       mov	al,ah
17664 42C2           30E4                       xor	ah,ah
17665                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
17666 42C4           8846         FE            mov	-2[bp],al
17667                                           !BCC_EOS
17668                                           ! 1928    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
17669                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
17670 42C7           8A46         FE            mov	al,-2[bp]
17671 42CA           30E4                       xor	ah,ah
17672 42CC           8B4E         FA            mov	cx,-6[bp]
17673 42CF           F7E9                       imul	cx
17674 42D1           50                         push	ax
17675                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
17676 42D2           8B46         FA            mov	ax,-6[bp]
17677 42D5           8B4E         F8            mov	cx,-8[bp]
17678 42D8           F7E9                       imul	cx
17679                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
17680 42DA           0C                     FF  or	al,#$FF
17681                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
17682                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
17683 42DC           89C3                       mov	bx,ax
17684 42DE           8A46         04            mov	al,4[bp]
17685 42E1           30E4                       xor	ah,ah
17686 42E3           93                         xchg	ax,bx
17687 42E4           40                         inc	ax
17688 42E5           89D9                       mov	cx,bx
17689 42E7           F7E9                       imul	cx
17690                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
17691 42E9           0246         FF            add	al,-1[bp]
17692 42EC           80D4                   00  adc	ah,*0
17693                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
17694 42EF           0346         F2            add	ax,-$E[bp]
17695 42F2           44                         inc	sp
17696 42F3           44                         inc	sp
17697                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
17698 42F4           8946         F6            mov	-$A[bp],ax
17699                                           !BCC_EOS
17700                                           ! 1929    crtc_addr=read_word(0x40,0x63);
17701                                           ! Debug: list int = const $63 (used reg = )
17702 42F7           B8                   0063  mov	ax,*$63
17703 42FA           50                         push	ax
17704                                           ! Debug: list int = const $40 (used reg = )
17705 42FB           B8                   0040  mov	ax,*$40
17706 42FE           50                         push	ax
17707                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17708 42FF           E8         382E            call	_read_word
17709 4302           83C4                   04  add	sp,*4
17710                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
17711 4305           8946         F4            mov	-$C[bp],ax
17712                                           !BCC_EOS
17713                                           ! 1930    outb(crtc_addr,0x0e);
17714                                           ! Debug: list int = const $E (used reg = )
17715 4308           B8                   000E  mov	ax,*$E
17716 430B           50                         push	ax
17717                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17718 430C           FF76         F4            push	-$C[bp]
17719                                           ! Debug: func () void = outb+0 (used reg = )
17720 430F           E8         3877            call	_outb
17721 4312           83C4                   04  add	sp,*4
17722                                           !BCC_EOS
17723                                           ! 1931    outb(crtc_addr+1,(address&0xff00)>>8);
17724                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
17725 4315           8B46         F6            mov	ax,-$A[bp]
17726 4318           30C0                       xor	al,al
17727                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17728 431A           88E0                       mov	al,ah
17729 431C           30E4                       xor	ah,ah
17730                                           ! Debug: list unsigned int = ax+0 (used reg = )
17731 431E           50                         push	ax
17732                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17733 431F           8B46         F4            mov	ax,-$C[bp]
17734                                           ! Debug: list unsigned int = ax+1 (used reg = )
17735 4322           40                         inc	ax
17736 4323           50                         push	ax
17737                                           ! Debug: func () void = outb+0 (used reg = )
17738 4324           E8         3862            call	_outb
17739 4327           83C4                   04  add	sp,*4
17740                                           !BCC_EOS
17741                                           ! 1932    outb(crtc_addr,0x0f);
17742                                           ! Debug: list int = const $F (used reg = )
17743 432A           B8                   000F  mov	ax,*$F
17744 432D           50                         push	ax
17745                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17746 432E           FF76         F4            push	-$C[bp]
17747                                           ! Debug: func () void = outb+0 (used reg = )
17748 4331           E8         3855            call	_outb
17749 4334           83C4                   04  add	sp,*4
17750                                           !BCC_EOS
17751                                           ! 1933    outb(crtc_addr+1,address&0x00ff);
17752                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
17753 4337           8A46         F6            mov	al,-$A[bp]
17754                                           ! Debug: list unsigned char = al+0 (used reg = )
17755 433A           30E4                       xor	ah,ah
17756 433C           50                         push	ax
17757                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17758 433D           8B46         F4            mov	ax,-$C[bp]
17759                                           ! Debug: list unsigned int = ax+1 (used reg = )
17760 4340           40                         inc	ax
17761 4341           50                         push	ax
17762                                           ! Debug: func () void = outb+0 (used reg = )
17763 4342           E8         3844            call	_outb
17764 4345           83C4                   04  add	sp,*4
17765                                           !BCC_EOS
17766                                           ! 1934   }
17767                                           ! 1935 }
17768                       00004348            .92:
17769 4348           89EC                       mov	sp,bp
17770 434A           5D                         pop	bp
17771 434B           C3                         ret
17772                                           ! 1936 static void biosfn_get_cursor_pos (page,shape, pos)
17773                                           ! Register BX used in function biosfn_set_cursor_pos
17774                                           ! 1937 Bit8u page;Bit16u *shape;Bit16u *pos;
17775                       0000434C            _biosfn_get_cursor_pos:
17776                                           !BCC_EOS
17777                                           !BCC_EOS
17778                                           !BCC_EOS
17779                                           ! 1938 {
17780                                           ! 1939  Bit16u ss=get_SS();
17781 434C           55                         push	bp
17782 434D           89E5                       mov	bp,sp
17783 434F           4C                         dec	sp
17784 4350           4C                         dec	sp
17785                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
17786 4351           E8         3855            call	_get_SS
17787                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
17788 4354           8946         FE            mov	-2[bp],ax
17789                                           !BCC_EOS
17790                                           ! 1940  write_word(ss, shape, 0);
17791                                           ! Debug: list int = const 0 (used reg = )
17792 4357           31C0                       xor	ax,ax
17793 4359           50                         push	ax
17794                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17795 435A           FF76         06            push	6[bp]
17796                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17797 435D           FF76         FE            push	-2[bp]
17798                                           ! Debug: func () void = write_word+0 (used reg = )
17799 4360           E8         37F8            call	_write_word
17800 4363           83C4                   06  add	sp,*6
17801                                           !BCC_EOS
17802                                           ! 1941  write_word(ss, pos, 0);
17803                                           ! Debug: list int = const 0 (used reg = )
17804 4366           31C0                       xor	ax,ax
17805 4368           50                         push	ax
17806                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17807 4369           FF76         08            push	8[bp]
17808                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17809 436C           FF76         FE            push	-2[bp]
17810                                           ! Debug: func () void = write_word+0 (used reg = )
17811 436F           E8         37E9            call	_write_word
17812 4372           83C4                   06  add	sp,*6
17813                                           !BCC_EOS
17814                                           ! 1942  if(page>7)return;
17815                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
17816 4375           8A46         04            mov	al,4[bp]
17817 4378           3C                     07  cmp	al,*7
17818 437A           76           04            jbe 	.94
17819                       0000437C            .95:
17820 437C           89EC                       mov	sp,bp
17821 437E           5D                         pop	bp
17822 437F           C3                         ret
17823                                           !BCC_EOS
17824                                           ! 1943  write_word(ss,shape,read_word(0x40,0x60));
17825                       00004380            .94:
17826                                           ! Debug: list int = const $60 (used reg = )
17827 4380           B8                   0060  mov	ax,*$60
17828 4383           50                         push	ax
17829                                           ! Debug: list int = const $40 (used reg = )
17830 4384           B8                   0040  mov	ax,*$40
17831 4387           50                         push	ax
17832                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17833 4388           E8         37A5            call	_read_word
17834 438B           83C4                   04  add	sp,*4
17835                                           ! Debug: list unsigned short = ax+0 (used reg = )
17836 438E           50                         push	ax
17837                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17838 438F           FF76         06            push	6[bp]
17839                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17840 4392           FF76         FE            push	-2[bp]
17841                                           ! Debug: func () void = write_word+0 (used reg = )
17842 4395           E8         37C3            call	_write_word
17843 4398           83C4                   06  add	sp,*6
17844                                           !BCC_EOS
17845                                           ! 1944  write_word(ss,pos,read_word(0x40,0x50 +page*2));
17846                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
17847 439B           8A46         04            mov	al,4[bp]
17848 439E           30E4                       xor	ah,ah
17849 43A0           D1E0                       shl	ax,*1
17850                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17851                                           ! Debug: expression subtree swapping
17852                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17853 43A2           05                   0050  add	ax,*$50
17854 43A5           50                         push	ax
17855                                           ! Debug: list int = const $40 (used reg = )
17856 43A6           B8                   0040  mov	ax,*$40
17857 43A9           50                         push	ax
17858                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17859 43AA           E8         3783            call	_read_word
17860 43AD           83C4                   04  add	sp,*4
17861                                           ! Debug: list unsigned short = ax+0 (used reg = )
17862 43B0           50                         push	ax
17863                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17864 43B1           FF76         08            push	8[bp]
17865                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17866 43B4           FF76         FE            push	-2[bp]
17867                                           ! Debug: func () void = write_word+0 (used reg = )
17868 43B7           E8         37A1            call	_write_word
17869 43BA           83C4                   06  add	sp,*6
17870                                           !BCC_EOS
17871                                           ! 1945 }
17872 43BD           89EC                       mov	sp,bp
17873 43BF           5D                         pop	bp
17874 43C0           C3                         ret
17875                                           ! 1946 static void biosfn_set_active_page (page)
17876                                           ! 1947 Bit8u page;
17877                       000043C1            _biosfn_set_active_page:
17878                                           !BCC_EOS
17879                                           ! 1948 {
17880                                           ! 1949  Bit16u cursor,dummy,crtc_addr;
17881                                           !BCC_EOS
17882                                           ! 1950  Bit16u nbcols,nbrows,address;
17883                                           !BCC_EOS
17884                                           ! 1951  Bit8u mode,line;
17885                                           !BCC_EOS
17886                                           ! 1952  if(page>7)return;
17887 43C1           55                         push	bp
17888 43C2           89E5                       mov	bp,sp
17889 43C4           83C4                   F2  add	sp,*-$E
17890                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
17891 43C7           8A46         04            mov	al,4[bp]
17892 43CA           3C                     07  cmp	al,*7
17893 43CC           76           04            jbe 	.96
17894                       000043CE            .97:
17895 43CE           89EC                       mov	sp,bp
17896 43D0           5D                         pop	bp
17897 43D1           C3                         ret
17898                                           !BCC_EOS
17899                                           ! 1953  mode=read_byte(0x40,0x49);
17900                       000043D2            .96:
17901                                           ! Debug: list int = const $49 (used reg = )
17902 43D2           B8                   0049  mov	ax,*$49
17903 43D5           50                         push	ax
17904                                           ! Debug: list int = const $40 (used reg = )
17905 43D6           B8                   0040  mov	ax,*$40
17906 43D9           50                         push	ax
17907                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17908 43DA           E8         3740            call	_read_byte
17909 43DD           83C4                   04  add	sp,*4
17910                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
17911 43E0           8846         F3            mov	-$D[bp],al
17912                                           !BCC_EOS
17913                                           ! 1954  line=find_vga_entry(mode);
17914                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
17915 43E3           8A46         F3            mov	al,-$D[bp]
17916 43E6           30E4                       xor	ah,ah
17917 43E8           50                         push	ax
17918                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
17919 43E9           E8         3645            call	_find_vga_entry
17920 43EC           44                         inc	sp
17921 43ED           44                         inc	sp
17922                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
17923 43EE           8846         F2            mov	-$E[bp],al
17924                                           !BCC_EOS
17925                                           ! 1955  if(line==0xFF)return;
17926                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
17927 43F1           8A46         F2            mov	al,-$E[bp]
17928 43F4           3C                     FF  cmp	al,#$FF
17929 43F6           75           04            jne 	.98
17930                       000043F8            .99:
17931 43F8           89EC                       mov	sp,bp
17932 43FA           5D                         pop	bp
17933 43FB           C3                         ret
17934                                           !BCC_EOS
17935                                           ! 1956  biosfn_get_cursor_pos(page,&dummy,&cursor);
17936                       000043FC            .98:
17937                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
17938 43FC           8D5E         FE            lea	bx,-2[bp]
17939 43FF           53                         push	bx
17940                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
17941 4400           8D5E         FC            lea	bx,-4[bp]
17942 4403           53                         push	bx
17943                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
17944 4404           8A46         04            mov	al,4[bp]
17945 4407           30E4                       xor	ah,ah
17946 4409           50                         push	ax
17947                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
17948 440A           E8         FF3F            call	_biosfn_get_cursor_pos
17949 440D           83C4                   06  add	sp,*6
17950                                           !BCC_EOS
17951                                           ! 1957  if(vga_modes[line].class==0x00)
17952                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
17953 4410           8A46         F2            mov	al,-$E[bp]
17954 4413           30E4                       xor	ah,ah
17955 4415           B1                     03  mov	cl,*3
17956 4417           D3E0                       shl	ax,cl
17957 4419           89C3                       mov	bx,ax
17958 441B           81C3                 01B6  add	bx,#_vga_modes
17959                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17960 441F           8A47         01            mov	al,1[bx]
17961 4422           84C0                       test	al,al
17962 4424           75           6E            jne 	.9A
17963                       00004426            .9B:
17964                                           ! 1958   {
17965                                           ! 1959    nbcols=read_word(0x40,0x4A);
17966                                           ! Debug: list int = const $4A (used reg = )
17967 4426           B8                   004A  mov	ax,*$4A
17968 4429           50                         push	ax
17969                                           ! Debug: list int = const $40 (used reg = )
17970 442A           B8                   0040  mov	ax,*$40
17971 442D           50                         push	ax
17972                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17973 442E           E8         36FF            call	_read_word
17974 4431           83C4                   04  add	sp,*4
17975                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
17976 4434           8946         F8            mov	-8[bp],ax
17977                                           !BCC_EOS
17978                                           ! 1960    nbrows=read_byt
17979                                           ! 1960 e(0x40,0x84)+1;
17980                                           ! Debug: list int = const $84 (used reg = )
17981 4437           B8                   0084  mov	ax,#$84
17982 443A           50                         push	ax
17983                                           ! Debug: list int = const $40 (used reg = )
17984 443B           B8                   0040  mov	ax,*$40
17985 443E           50                         push	ax
17986                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17987 443F           E8         36DB            call	_read_byte
17988 4442           83C4                   04  add	sp,*4
17989                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
17990 4445           30E4                       xor	ah,ah
17991                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
17992 4447           40                         inc	ax
17993 4448           8946         F6            mov	-$A[bp],ax
17994                                           !BCC_EOS
17995                                           ! 1961    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
17996                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
17997 444B           8B46         F8            mov	ax,-8[bp]
17998 444E           8B4E         F6            mov	cx,-$A[bp]
17999 4451           F7E9                       imul	cx
18000                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18001 4453           D1E0                       shl	ax,*1
18002                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18003 4455           0C                     FF  or	al,#$FF
18004                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18005                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18006 4457           89C3                       mov	bx,ax
18007 4459           8A46         04            mov	al,4[bp]
18008 445C           30E4                       xor	ah,ah
18009 445E           93                         xchg	ax,bx
18010 445F           40                         inc	ax
18011 4460           89D9                       mov	cx,bx
18012 4462           F7E9                       imul	cx
18013                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18014 4464           8946         F4            mov	-$C[bp],ax
18015                                           !BCC_EOS
18016                                           ! 1962    write_word(0x40,0x4E,address);
18017                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18018 4467           FF76         F4            push	-$C[bp]
18019                                           ! Debug: list int = const $4E (used reg = )
18020 446A           B8                   004E  mov	ax,*$4E
18021 446D           50                         push	ax
18022                                           ! Debug: list int = const $40 (used reg = )
18023 446E           B8                   0040  mov	ax,*$40
18024 4471           50                         push	ax
18025                                           ! Debug: func () void = write_word+0 (used reg = )
18026 4472           E8         36E6            call	_write_word
18027 4475           83C4                   06  add	sp,*6
18028                                           !BCC_EOS
18029                                           ! 1963    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18030                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18031 4478           8B46         F8            mov	ax,-8[bp]
18032 447B           8B4E         F6            mov	cx,-$A[bp]
18033 447E           F7E9                       imul	cx
18034                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18035 4480           0C                     FF  or	al,#$FF
18036                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18037                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18038 4482           89C3                       mov	bx,ax
18039 4484           8A46         04            mov	al,4[bp]
18040 4487           30E4                       xor	ah,ah
18041 4489           93                         xchg	ax,bx
18042 448A           40                         inc	ax
18043 448B           89D9                       mov	cx,bx
18044 448D           F7E9                       imul	cx
18045                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18046 448F           8946         F4            mov	-$C[bp],ax
18047                                           !BCC_EOS
18048                                           ! 1964   }
18049                                           ! 1965  else
18050                                           ! 1966   {
18051 4492           EB           24            jmp .9C
18052                       00004494            .9A:
18053                                           ! 1967    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18054                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18055 4494           8A46         F2            mov	al,-$E[bp]
18056 4497           30E4                       xor	ah,ah
18057 4499           89C3                       mov	bx,ax
18058                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18059 449B           8A87       0236            mov	al,_line_to_vpti[bx]
18060 449F           30E4                       xor	ah,ah
18061 44A1           B1                     06  mov	cl,*6
18062 44A3           D3E0                       shl	ax,cl
18063 44A5           89C3                       mov	bx,ax
18064 44A7           81C3                 024A  add	bx,#_video_param_table
18065                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18066                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18067                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18068 44AB           8A46         04            mov	al,4[bp]
18069 44AE           30E4                       xor	ah,ah
18070 44B0           8B4F         03            mov	cx,3[bx]
18071 44B3           F7E9                       imul	cx
18072                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18073 44B5           8946         F4            mov	-$C[bp],ax
18074                                           !BCC_EOS
18075                                           ! 1968   }
18076                                           ! 1969  crtc_addr=read_word(0x40,0x63);
18077                       000044B8            .9C:
18078                                           ! Debug: list int = const $63 (used reg = )
18079 44B8           B8                   0063  mov	ax,*$63
18080 44BB           50                         push	ax
18081                                           ! Debug: list int = const $40 (used reg = )
18082 44BC           B8                   0040  mov	ax,*$40
18083 44BF           50                         push	ax
18084                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18085 44C0           E8         366D            call	_read_word
18086 44C3           83C4                   04  add	sp,*4
18087                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18088 44C6           8946         FA            mov	-6[bp],ax
18089                                           !BCC_EOS
18090                                           ! 1970  outb(crtc_addr,0x0c);
18091                                           ! Debug: list int = const $C (used reg = )
18092 44C9           B8                   000C  mov	ax,*$C
18093 44CC           50                         push	ax
18094                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18095 44CD           FF76         FA            push	-6[bp]
18096                                           ! Debug: func () void = outb+0 (used reg = )
18097 44D0           E8         36B6            call	_outb
18098 44D3           83C4                   04  add	sp,*4
18099                                           !BCC_EOS
18100                                           ! 1971  outb(crtc_addr+1,(address&0xff00)>>8);
18101                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18102 44D6           8B46         F4            mov	ax,-$C[bp]
18103 44D9           30C0                       xor	al,al
18104                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18105 44DB           88E0                       mov	al,ah
18106 44DD           30E4                       xor	ah,ah
18107                                           ! Debug: list unsigned int = ax+0 (used reg = )
18108 44DF           50                         push	ax
18109                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18110 44E0           8B46         FA            mov	ax,-6[bp]
18111                                           ! Debug: list unsigned int = ax+1 (used reg = )
18112 44E3           40                         inc	ax
18113 44E4           50                         push	ax
18114                                           ! Debug: func () void = outb+0 (used reg = )
18115 44E5           E8         36A1            call	_outb
18116 44E8           83C4                   04  add	sp,*4
18117                                           !BCC_EOS
18118                                           ! 1972  outb(crtc_addr,0x0d);
18119                                           ! Debug: list int = const $D (used reg = )
18120 44EB           B8                   000D  mov	ax,*$D
18121 44EE           50                         push	ax
18122                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18123 44EF           FF76         FA            push	-6[bp]
18124                                           ! Debug: func () void = outb+0 (used reg = )
18125 44F2           E8         3694            call	_outb
18126 44F5           83C4                   04  add	sp,*4
18127                                           !BCC_EOS
18128                                           ! 1973  outb(crtc_addr+1,address&0x00ff);
18129                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18130 44F8           8A46         F4            mov	al,-$C[bp]
18131                                           ! Debug: list unsigned char = al+0 (used reg = )
18132 44FB           30E4                       xor	ah,ah
18133 44FD           50                         push	ax
18134                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18135 44FE           8B46         FA            mov	ax,-6[bp]
18136                                           ! Debug: list unsigned int = ax+1 (used reg = )
18137 4501           40                         inc	ax
18138 4502           50                         push	ax
18139                                           ! Debug: func () void = outb+0 (used reg = )
18140 4503           E8         3683            call	_outb
18141 4506           83C4                   04  add	sp,*4
18142                                           !BCC_EOS
18143                                           ! 1974  write_byte(0x40,0x62,page);
18144                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18145 4509           8A46         04            mov	al,4[bp]
18146 450C           30E4                       xor	ah,ah
18147 450E           50                         push	ax
18148                                           ! Debug: list int = const $62 (used reg = )
18149 450F           B8                   0062  mov	ax,*$62
18150 4512           50                         push	ax
18151                                           ! Debug: list int = const $40 (used reg = )
18152 4513           B8                   0040  mov	ax,*$40
18153 4516           50                         push	ax
18154                                           ! Debug: func () void = write_byte+0 (used reg = )
18155 4517           E8         3629            call	_write_byte
18156 451A           83C4                   06  add	sp,*6
18157                                           !BCC_EOS
18158                                           ! 1975  biosfn_set_cursor_pos(page,cursor);
18159                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18160 451D           FF76         FE            push	-2[bp]
18161                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18162 4520           8A46         04            mov	al,4[bp]
18163 4523           30E4                       xor	ah,ah
18164 4525           50                         push	ax
18165                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18166 4526           E8         FD22            call	_biosfn_set_cursor_pos
18167 4529           83C4                   04  add	sp,*4
18168                                           !BCC_EOS
18169                                           ! 1976 }
18170 452C           89EC                       mov	sp,bp
18171 452E           5D                         pop	bp
18172 452F           C3                         ret
18173                                           ! 1977 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18174                                           ! Register BX used in function biosfn_set_active_page
18175                                           ! 1978 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18176                       00004530            _vgamem_copy_pl4:
18177                                           !BCC_EOS
18178                                           !BCC_EOS
18179                                           !BCC_EOS
18180                                           !BCC_EOS
18181                                           !BCC_EOS
18182                                           !BCC_EOS
18183                                           ! 1979 {
18184                                           ! 1980  Bit16u src,dest;
18185                                           !BCC_EOS
18186                                           ! 1981  Bit8u i;
18187                                           !BCC_EOS
18188                                           ! 1982  src=ysrc*cheight*nbcols+xstart;
18189 4530           55                         push	bp
18190 4531           89E5                       mov	bp,sp
18191 4533           83C4                   FA  add	sp,*-6
18192                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18193 4536           8A46         0E            mov	al,$E[bp]
18194 4539           30E4                       xor	ah,ah
18195 453B           89C3                       mov	bx,ax
18196 453D           8A46         06            mov	al,6[bp]
18197 4540           30E4                       xor	ah,ah
18198 4542           89D9                       mov	cx,bx
18199 4544           F7E9                       imul	cx
18200                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18201 4546           89C3                       mov	bx,ax
18202 4548           8A46         0C            mov	al,$C[bp]
18203 454B           30E4                       xor	ah,ah
18204 454D           93                         xchg	ax,bx
18205 454E           89D9                       mov	cx,bx
18206 4550           F7E9                       imul	cx
18207                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18208 4552           0246         04            add	al,4[bp]
18209 4555           80D4                   00  adc	ah,*0
18210                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18211 4558           8946         FE            mov	-2[bp],ax
18212                                           !BCC_EOS
18213                                           ! 1983  dest=ydest*cheight*nbcols+xstart;
18214                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18215 455B           8A46         0E            mov	al,$E[bp]
18216 455E           30E4                       xor	ah,ah
18217 4560           89C3                       mov	bx,ax
18218 4562           8A46         08            mov	al,8[bp]
18219 4565           30E4                       xor	ah,ah
18220 4567           89D9                       mov	cx,bx
18221 4569           F7E9                       imul	cx
18222                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18223 456B           89C3                       mov	bx,ax
18224 456D           8A46         0C            mov	al,$C[bp]
18225 4570           30E4                       xor	ah,ah
18226 4572           93                         xchg	ax,bx
18227 4573           89D9                       mov	cx,bx
18228 4575           F7E9                       imul	cx
18229                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18230 4577           0246         04            add	al,4[bp]
18231 457A           80D4                   00  adc	ah,*0
18232                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18233 457D           8946         FC            mov	-4[bp],ax
18234                                           !BCC_EOS
18235                                           ! 1984  outw(0x3ce, 0x0105);
18236                                           ! Debug: list int = const $105 (used reg = )
18237 4580           B8                   0105  mov	ax,#$105
18238 4583           50                         push	ax
18239                                           ! Debug: list int = const $3CE (used reg = )
18240 4584           B8                   03CE  mov	ax,#$3CE
18241 4587           50                         push	ax
18242                                           ! Debug: func () void = outw+0 (used reg = )
18243 4588           E8         360E            call	_outw
18244 458B           83C4                   04  add	sp,*4
18245                                           !BCC_EOS
18246                                           ! 1985  for(i=0;i<cheight;i++)
18247                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18248 458E           30C0                       xor	al,al
18249 4590           8846         FB            mov	-5[bp],al
18250                                           !BCC_EOS
18251                                           !BCC_EOS
18252                                           ! 1986   {
18253 4593           EB           43            jmp .9F
18254                       00004595            .A0:
18255                                           ! 1987    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18256                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18257 4595           8A46         0A            mov	al,$A[bp]
18258 4598           30E4                       xor	ah,ah
18259 459A           50                         push	ax
18260                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18261 459B           8A46         0C            mov	al,$C[bp]
18262 459E           30E4                       xor	ah,ah
18263 45A0           89C3                       mov	bx,ax
18264 45A2           8A46         FB            mov	al,-5[bp]
18265 45A5           30E4                       xor	ah,ah
18266 45A7           89D9                       mov	cx,bx
18267 45A9           F7E9                       imul	cx
18268                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18269                                           ! Debug: expression subtree swapping
18270 45AB           0346         FE            add	ax,-2[bp]
18271                                           ! Debug: list unsigned int = ax+0 (used reg = )
18272 45AE           50                         push	ax
18273                                           ! Debug: list unsigned int = const $A000 (used reg = )
18274 45AF           B8                   A000  mov	ax,#$A000
18275 45B2           50                         push	ax
18276                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18277 45B3           8A46         0C            mov	al,$C[bp]
18278 45B6           30E4                       xor	ah,ah
18279 45B8           89C3                       mov	bx,ax
18280 45BA           8A46         FB            mov	al,-5[bp]
18281 45BD           30E4                       xor	ah,ah
18282 45BF           89D9                       mov	cx,bx
18283 45C1           F7E9                       imul	cx
18284                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18285                                           ! Debug: expression subtree swapping
18286 45C3           0346         FC            add	ax,-4[bp]
18287                                           ! Debug: list unsigned int = ax+0 (used reg = )
18288 45C6           50                         push	ax
18289                                           ! Debug: list unsigned int = const $A000 (used reg = )
18290 45C7           B8                   A000  mov	ax,#$A000
18291 45CA           50                         push	ax
18292                                           ! Debug: func () void = memcpyb+0 (used reg = )
18293 45CB           E8         34EF            call	_memcpyb
18294 45CE           83C4                   0A  add	sp,*$A
18295                                           !BCC_EOS
18296                                           ! 1988   }
18297                                           ! 1989  outw(0x3ce, 0x0005);
18298                       000045D1            .9E:
18299                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18300 45D1           8A46         FB            mov	al,-5[bp]
18301 45D4           40                         inc	ax
18302 45D5           8846         FB            mov	-5[bp],al
18303                       000045D8            .9F:
18304                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18305 45D8           8A46         FB            mov	al,-5[bp]
18306 45DB           3A46         0E            cmp	al,$E[bp]
18307 45DE           72           B5            jb 	.A0
18308                       000045E0            .A1:
18309                       000045E0            .9D:
18310                                           ! Debug: list int = const 5 (used reg = )
18311 45E0           B8                   0005  mov	ax,*5
18312 45E3           50                         push	ax
18313                                           ! Debug: list int = const $3CE (used reg = )
18314 45E4           B8                   03CE  mov	ax,#$3CE
18315 45E7           50                         push	ax
18316                                           ! Debug: func () void = outw+0 (used reg = )
18317 45E8           E8         35AE            call	_outw
18318 45EB           83C4                   04  add	sp,*4
18319                                           !BCC_EOS
18320                                           ! 1990 }
18321 45EE           89EC                       mov	sp,bp
18322 45F0           5D                         pop	bp
18323 45F1           C3                         ret
18324                                           ! 1991 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18325                                           ! Register BX used in function vgamem_copy_pl4
18326                                           ! 1992 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18327                       000045F2            _vgamem_fill_pl4:
18328                                           !BCC_EOS
18329                                           !BCC_EOS
18330                                           !BCC_EOS
18331                                           !BCC_EOS
18332                                           !BCC_EOS
18333                                           !BCC_EOS
18334                                           ! 1993 {
18335                                           ! 1994  Bit16u dest;
18336                                           !BCC_EOS
18337                                           ! 1995  Bit8u i;
18338                                           !BCC_EOS
18339                                           ! 1996  dest=ystart*cheight*nbcols+xstart;
18340 45F2           55                         push	bp
18341 45F3           89E5                       mov	bp,sp
18342 45F5           83C4                   FC  add	sp,*-4
18343                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18344 45F8           8A46         0C            mov	al,$C[bp]
18345 45FB           30E4                       xor	ah,ah
18346 45FD           89C3                       mov	bx,ax
18347 45FF           8A46         06            mov	al,6[bp]
18348 4602           30E4                       xor	ah,ah
18349 4604           89D9                       mov	cx,bx
18350 4606           F7E9                       imul	cx
18351                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18352 4608           89C3                       mov	bx,ax
18353 460A           8A46         0A            mov	al,$A[bp]
18354 460D           30E4                       xor	ah,ah
18355 460F           93                         xchg	ax,bx
18356 4610           89D9                       mov	cx,bx
18357 4612           F7E9                       imul	cx
18358                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18359 4614           0246         04            add	al,4[bp]
18360 4617           80D4                   00  adc	ah,*0
18361                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18362 461A           8946         FE            mov	-2[bp],ax
18363                                           !BCC_EOS
18364                                           ! 1997  outw(0x3ce, 0x0205);
18365                                           ! Debug: list int = const $205 (used reg = )
18366 461D           B8                   0205  mov	ax,#$205
18367 4620           50                         push	ax
18368                                           ! Debug: list int = const $3CE (used reg = )
18369 4621           B8                   03CE  mov	ax,#$3CE
18370 4624           50                         push	ax
18371                                           ! Debug: func () void = outw+0 (used reg = )
18372 4625           E8         3571            call	_outw
18373 4628           83C4                   04  add	sp,*4
18374                                           !BCC_EOS
18375                                           ! 1998  for(i=0;i<cheight;i++)
18376                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18377 462B           30C0                       xor	al,al
18378 462D           8846         FD            mov	-3[bp],al
18379                                           !BCC_EOS
18380                                           !BCC_EOS
18381                                           ! 1999   {
18382 4630           EB           31            jmp .A4
18383                       00004632            .A5:
18384                                           ! 2000    memsetb(0xa000,dest+i*nbcols,attr,cols);
18385                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18386 4632           8A46         08            mov	al,8[bp]
18387 4635           30E4                       xor	ah,ah
18388 4637           50                         push	ax
18389                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18390 4638           8A46         0E            mov	al,$E[bp]
18391 463B           30E4                       xor	ah,ah
18392 463D           50                         push	ax
18393                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18394 463E           8A46         0A            mov	al,$A[bp]
18395 4641           30E4                       xor	ah,ah
18396 4643           89C3                       mov	bx,ax
18397 4645           8A46         FD            mov	al,-3[bp]
18398 4648           30E4                       xor	ah,ah
18399 464A           89D9                       mov	cx,bx
18400 464C           F7E9                       imul	cx
18401                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18402                                           ! Debug: expression subtree swapping
18403 464E           0346         FE            add	ax,-2[bp]
18404                                           ! Debug: list unsigned int = ax+0 (used reg = )
18405 4651           50                         push	ax
18406                                           ! Debug: list unsigned int = const $A000 (used reg = )
18407 4652           B8                   A000  mov	ax,#$A000
18408 4655           50                         push	ax
18409                                           ! Debug: func () void = memsetb+0 (used reg = )
18410 4656           E8         341A            call	_memsetb
18411 4659           83C4                   08  add	sp,*8
18412                                           !BCC_EOS
18413                                           ! 2001   }
18414                                           ! 2002  outw(0x3ce, 0x0005);
18415                       0000465C            .A3:
18416                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18417 465C           8A46         FD            mov	al,-3[bp]
18418 465F           40                         inc	ax
18419 4660           8846         FD            mov	-3[bp],al
18420                       00004663            .A4:
18421                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18422 4663           8A46         FD            mov	al,-3[bp]
18423 4666           3A46         0C            cmp	al,$C[bp]
18424 4669           72           C7            jb 	.A5
18425                       0000466B            .A6:
18426                       0000466B            .A2:
18427                                           ! Debug: list int = const 5 (used reg = )
18428 466B           B8                   0005  mov	ax,*5
18429 466E           50                         push	ax
18430                                           ! Debug: list int = const $3CE (used reg = )
18431 466F           B8                   03CE  mov	ax,#$3CE
18432 4672           50                         push	ax
18433                                           ! Debug: func () void = outw+0 (used reg = )
18434 4673           E8         3523            call	_outw
18435 4676           83C4                   04  add	sp,*4
18436                                           !BCC_EOS
18437                                           ! 2003 }
18438 4679           89EC                       mov	sp,bp
18439 467B           5D                         pop	bp
18440 467C           C3                         ret
18441                                           ! 2004 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18442                                           ! Register BX used in function vgamem_fill_pl4
18443                                           ! 2005 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18444                       0000467D            _vgamem_copy_cga:
18445                                           !BCC_EOS
18446                                           !BCC_EOS
18447                                           !BCC_EOS
18448                                           !BCC_EOS
18449                                           !BCC_EOS
18450                                           !BCC_EOS
18451                                           ! 2006 {
18452                                           ! 2007  Bit16u src,dest;
18453                                           !BCC_EOS
18454                                           ! 2008  Bit8u i;
18455                                           !BCC_EOS
18456                                           ! 2009  src=((ysrc*cheight*nbcols)>>1)+xstart;
18457 467D           55                         push	bp
18458 467E           89E5                       mov	bp,sp
18459 4680           83C4                   FA  add	sp,*-6
18460                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18461 4683           8A46         0E            mov	al,$E[bp]
18462 4686           30E4                       xor	ah,ah
18463 4688           89C3                       mov	bx,ax
18464 468A           8A46         06            mov	al,6[bp]
18465 468D           30E4                       xor	ah,ah
18466 468F           89D9                       mov	cx,bx
18467 4691           F7E9                       imul	cx
18468                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18469 4693           89C3                       mov	bx,ax
18470 4695           8A46         0C            mov	al,$C[bp]
18471 4698           30E4                       xor	ah,ah
18472 469A           93                         xchg	ax,bx
18473 469B           89D9                       mov	cx,bx
18474 469D           F7E9                       imul	cx
18475                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18476 469F           D1E8                       shr	ax,*1
18477                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18478 46A1           0246         04            add	al,4[bp]
18479 46A4           80D4                   00  adc	ah,*0
18480                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18481 46A7           8946         FE            mov	-2[bp],ax
18482                                           !BCC_EOS
18483                                           ! 2010  dest=((ydest*cheight*nbcols)>>1)+xstart;
18484                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18485 46AA           8A46         0E            mov	al,$E[bp]
18486 46AD           30E4                       xor	ah,ah
18487 46AF           89C3                       mov	bx,ax
18488 46B1           8A46         08            mov	al,8[bp]
18489 46B4           30E4                       xor	ah,ah
18490 46B6           89D9                       mov	cx,bx
18491 46B8           F7E9                       imul	cx
18492                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18493 46BA           89C3                       mov	bx,ax
18494 46BC           8A46         0C            mov	al,$C[bp]
18495 46BF           30E4                       xor	ah,ah
18496 46C1           93                         xchg	ax,bx
18497 46C2           89D9                       mov	cx,bx
18498 46C4           F7E9                       imul	cx
18499                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18500 46C6           D1E8                       shr	ax,*1
18501                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18502 46C8           0246         04            add	al,4[bp]
18503 46CB           80D4                   00  adc	ah,*0
18504                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18505 46CE           8946         FC            mov	-4[bp],ax
18506                                           !BCC_EOS
18507                                           ! 2011  for(i=0;i<cheight;i++)
18508                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18509 46D1           30C0                       xor	al,al
18510 46D3           8846         FB            mov	-5[bp],al
18511                                           !BCC_EOS
18512                                           !BCC_EOS
18513                                           ! 2012   {
18514 46D6           E9         00A8            br 	.A9
18515                       000046D9            .AA:
18516                                           ! 2013    if (i & 1)
18517                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
18518 46D9           8A46         FB            mov	al,-5[bp]
18519 46DC           24                     01  and	al,*1
18520 46DE           84C0                       test	al,al
18521 46E0           74           56            je  	.AB
18522                       000046E2            .AC:
18523                                           ! 2014      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
18524                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18525 46E2           8A46         0A            mov	al,$A[bp]
18526 46E5           30E4                       xor	ah,ah
18527 46E7           50                         push	ax
18528                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18529 46E8           8A46         FB            mov	al,-5[bp]
18530 46EB           30E4                       xor	ah,ah
18531 46ED           D1E8                       shr	ax,*1
18532                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18533 46EF           89C3                       mov	bx,ax
18534 46F1           8A46         0C            mov	al,$C[bp]
18535 46F4           30E4                       xor	ah,ah
18536 46F6           93                         xchg	ax,bx
18537 46F7           89D9                       mov	cx,bx
18538 46F9           F7E9                       imul	cx
18539 46FB           50                         push	ax
18540                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
18541                                           ! Debug: expression subtree swapping
18542 46FC           8B46         FE            mov	ax,-2[bp]
18543                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18544 46FF           05                   2000  add	ax,#$2000
18545 4702           0346         F6            add	ax,-$A[bp]
18546 4705           44                         inc	sp
18547 4706           44                         inc	sp
18548                                           ! Debug: list unsigned int = ax+0 (used reg = )
18549 4707           50                         push	ax
18550                                           ! Debug: list unsigned int = const $B800 (used reg = )
18551 4708           B8                   B800  mov	ax,#$B800
18552 470B           50                         push	ax
18553                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18554 470C           8A46         FB            mov	al,-5[bp]
18555 470F           30E4                       xor	ah,ah
18556 4711           D1E8                       shr	ax,*1
18557                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18558 4713           89C3                       mov	bx,ax
18559 4715           8A46         0C            mov	al,$C[bp]
18560 4718           30E4                       xor	ah,ah
18561 471A           93                         xchg	ax,bx
18562 471B           89D9                       mov	cx,bx
18563 471D           F7E9                       imul	cx
18564 471F           50                         push	ax
18565                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
18566                                           ! Debug: expression subtree swapping
18567 4720           8B46         FC            mov	ax,-4[bp]
18568                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
18569 4723           05                   2000  add	ax,#$2000
18570 4726           0346         F2            add	ax,-$E[bp]
18571 4729           44                         inc	sp
18572 472A           44                         inc	sp
18573                                           ! Debug: list unsigned int = ax+0 (used reg = )
18574 472B           50                         push	ax
18575                                           ! Debug: list unsigned int = const $B800 (used reg = )
18576 472C           B8                   B800  mov	ax,#$B800
18577 472F           50                         push	ax
18578                                           ! Debug: func () void = memcpyb+0 (used reg = )
18579 4730           E8         338A            call	_memcpyb
18580 4733           83C4                   0A  add	sp,*$A
18581                                           !BCC_EOS
18582                                           ! 2015    else
18583                                           ! 2016      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
18584 4736           EB           42            jmp .AD
18585                       00004738            .AB:
18586                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18587 4738           8A46         0A            mov	al,$A[bp]
18588 473B           30E4                       xor	ah,ah
18589 473D           50                         push	ax
18590                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18591 473E           8A46         FB            mov	al,-5[bp]
18592 4741           30E4                       xor	ah,ah
18593 4743           D1E8                       shr	ax,*1
18594                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18595 4745           89C3                       mov	bx,ax
18596 4747           8A46         0C            mov	al,$C[bp]
18597 474A           30E4                       xor	ah,ah
18598 474C           93                         xchg	ax,bx
18599 474D           89D9                       mov	cx,bx
18600 474F           F7E9                       imul	cx
18601                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18602                                           ! Debug: expression subtree swapping
18603 4751           0346         FE            add	ax,-2[bp]
18604                                           ! Debug: list unsigned int = ax+0 (used reg = )
18605 4754           50                         push	ax
18606                                           ! Debug: list unsigned int = const $B800 (used reg = )
18607 4755           B8                   B800  mov	ax,#$B800
18608 4758           50                         push	ax
18609                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18610 4759           8A46         FB            mov	al,-5[bp]
18611 475C           30E4                       xor	ah,ah
18612 475E           D1E8                       shr	ax,*1
18613                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18614 4760           89C3                       mov	bx,ax
18615 4762           8A46         0C            mov	al,$C[bp]
18616 4765           30E4                       xor	ah,ah
18617 4767           93                         xchg	ax,bx
18618 4768           89D9                       mov	cx,bx
18619 476A           F7E9                       imul	cx
18620                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18621                                           ! Debug: expression subtree swapping
18622 476C           0346         FC            add	ax,-4[bp]
18623                                           ! Debug: list unsigned int = ax+0 (used reg = )
18624 476F           50                         push	ax
18625                                           ! Debug: list unsigned int = const $B800 (used reg = )
18626 4770           B8                   B800  mov	ax,#$B800
18627 4773           50                         push	ax
18628                                           ! Debug: func () void = memcpyb+0 (used reg = )
18629 4774           E8         3346            call	_memcpyb
18630 4777           83C4                   0A  add	sp,*$A
18631                                           !BCC_EOS
18632                                           ! 2017   }
18633                       0000477A            .AD:
18634                                           ! 2018 }
18635                       0000477A            .A8:
18636                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18637 477A           8A46         FB            mov	al,-5[bp]
18638 477D           40                         inc	ax
18639 477E           8846         FB            mov	-5[bp],al
18640                       00004781            .A9:
18641                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18642 4781           8A46         FB            mov	al,-5[bp]
18643 4784           3A46         0E            cmp	al,$E[bp]
18644 4787   7303    E9         FF4D            blo 	.AA
18645                       0000478C            .AE:
18646                       0000478C            .A7:
18647 478C           89EC                       mov	sp,bp
18648 478E           5D                         pop	bp
18649 478F           C3                         ret
18650                                           ! 2019 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
18651                                           ! Register BX used in function vgamem_copy_cga
18652                                           ! 2020 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18653                       00004790            _vgamem_fill_cga:
18654                                           !BCC_EOS
18655                                           !BCC_EOS
18656                                           !BCC_EOS
18657                                           !BCC_EOS
18658                                           !BCC_EOS
18659                                           !BCC_EOS
18660                                           ! 2021 {
18661                                           ! 2022  Bit16u dest;
18662                                           !BCC_EOS
18663                                           ! 2023  Bit8u i;
18664                                           !BCC_EOS
18665                                           ! 2024  dest=((ystart*cheight*nbcols)>>1)+xstart;
18666 4790           55                         push	bp
18667 4791           89E5                       mov	bp,sp
18668 4793           83C4                   FC  add	sp,*-4
18669                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18670 4796           8A46         0C            mov	al,$C[bp]
18671 4799           30E4                       xor	ah,ah
18672 479B           89C3                       mov	bx,ax
18673 479D           8A46         06            mov	al,6[bp]
18674 47A0           30E4                       xor	ah,ah
18675 47A2           89D9                       mov	cx,bx
18676 47A4           F7E9                       imul	cx
18677                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18678 47A6           89C3                       mov	bx,ax
18679 47A8           8A46         0A            mov	al,$A[bp]
18680 47AB           30E4                       xor	ah,ah
18681 47AD           93                         xchg	ax,bx
18682 47AE           89D9                       mov	cx,bx
18683 47B0           F7E9                       imul	cx
18684                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18685 47B2           D1E8                       shr	ax,*1
18686                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18687 47B4           0246         04            add	al,4[bp]
18688 47B7           80D4                   00  adc	ah,*0
18689                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18690 47BA           8946         FE            mov	-2[bp],ax
18691                                           !BCC_EOS
18692                                           ! 2025  for(i=0;i<cheight;i++)
18693                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18694 47BD           30C0                       xor	al,al
18695 47BF           8846         FD            mov	-3[bp],al
18696                                           !BCC_EOS
18697                                           !BCC_EOS
18698                                           ! 2026   {
18699 47C2           EB           75            jmp .B1
18700                       000047C4            .B2:
18701                                           ! 2027    if (i & 1)
18702                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
18703 47C4           8A46         FD            mov	al,-3[bp]
18704 47C7           24                     01  and	al,*1
18705 47C9           84C0                       test	al,al
18706 47CB           74           38            je  	.B3
18707                       000047CD            .B4:
18708                                           ! 2028      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
18709                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18710 47CD           8A46         08            mov	al,8[bp]
18711 47D0           30E4                       xor	ah,ah
18712 47D2           50                         push	ax
18713                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18714 47D3           8A46         0E            mov	al,$E[bp]
18715 47D6           30E4                       xor	ah,ah
18716 47D8           50                         push	ax
18717                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18718 47D9           8A46         FD            mov	al,-3[bp]
18719 47DC           30E4                       xor	ah,ah
18720 47DE           D1E8                       shr	ax,*1
18721                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18722 47E0           89C3                       mov	bx,ax
18723 47E2           8A46         0A            mov	al,$A[bp]
18724 47E5           30E4                       xor	ah,ah
18725 47E7           93                         xchg	ax,bx
18726 47E8           89D9                       mov	cx,bx
18727 47EA           F7E9                       imul	cx
18728 47EC           50                         push	ax
18729                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
18730                                           ! Debug: expression subtree swapping
18731 47ED           8B46         FE            mov	ax,-2[bp]
18732                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18733 47F0           05                   2000  add	ax,#$2000
18734 47F3           0346         F6            add	ax,-$A[bp]
18735 47F6           44                         inc	sp
18736 47F7           44                         inc	sp
18737                                           ! Debug: list unsigned int = ax+0 (used reg = )
18738 47F8           50                         push	ax
18739                                           ! Debug: list unsigned int = const $B800 (used reg = )
18740 47F9           B8                   B800  mov	ax,#$B800
18741 47FC           50                         push	ax
18742                                           ! Debug: func () void = memsetb+0 (used reg = )
18743 47FD           E8         3273            call	_memsetb
18744 4800           83C4                   08  add	sp,*8
18745                                           !BCC_EOS
18746                                           ! 2029    else
18747                                           ! 2030      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
18748 4803           EB           2D            jmp .B5
18749                       00004805            .B3:
18750                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18751 4805           8A46         08            mov	al,8[bp]
18752 4808           30E4                       xor	ah,ah
18753 480A           50                         push	ax
18754                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18755 480B           8A46         0E            mov	al,$E[bp]
18756 480E           30E4                       xor	ah,ah
18757 4810           50                         push	ax
18758                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18759 4811           8A46         FD            mov	al,-3[bp]
18760 4814           30E4                       xor	ah,ah
18761 4816           D1E8                       shr	ax,*1
18762                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18763 4818           89C3                       mov	bx,ax
18764 481A           8A46         0A            mov	al,$A[bp]
18765 481D           30E4                       xor	ah,ah
18766 481F           93                         xchg	ax,bx
18767 4820           89D9                       mov	cx,bx
18768 4822           F7E9                       imul	cx
18769                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18770                                           ! Debug: expression subtree swapping
18771 4824           0346         FE            add	ax,-2[bp]
18772                                           ! Debug: list unsigned int = ax+0 (used reg = )
18773 4827           50                         push	ax
18774                                           ! Debug: list unsigned int = const $B800 (used reg = )
18775 4828           B8                   B800  mov	ax,#$B800
18776 482B           50                         push	ax
18777                                           ! Debug: func () void = memsetb+0 (used reg = )
18778 482C           E8         3244            call	_memsetb
18779 482F           83C4                   08  add	sp,*8
18780                                           !BCC_EOS
18781                                           ! 2031   }
18782                       00004832            .B5:
18783                                           ! 2032 }
18784                       00004832            .B0:
18785                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18786 4832           8A46         FD            mov	al,-3[bp]
18787 4835           40                         inc	ax
18788 4836           8846         FD            mov	-3[bp],al
18789                       00004839            .B1:
18790                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18791 4839           8A46         FD            mov	al,-3[bp]
18792 483C           3A46         0C            cmp	al,$C[bp]
18793 483F           72           83            jb 	.B2
18794                       00004841            .B6:
18795                       00004841            .AF:
18796 4841           89EC                       mov	sp,bp
18797 4843           5D                         pop	bp
18798 4844           C3                         ret
18799                                           ! 2033 static void biosfn_scroll (n
18800                                           ! Register BX used in function vgamem_fill_cga
18801                                           ! 2033 blines,attr,rul,cul,rlr,clr,page,dir)
18802                                           ! 2034 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
18803                       00004845            _biosfn_scroll:
18804                                           !BCC_EOS
18805                                           !BCC_EOS
18806                                           !BCC_EOS
18807                                           !BCC_EOS
18808                                           !BCC_EOS
18809                                           !BCC_EOS
18810                                           !BCC_EOS
18811                                           !BCC_EOS
18812                                           ! 2035 {
18813                                           ! 2036  Bit8u mode,line,cheight,bpp,cols;
18814                                           !BCC_EOS
18815                                           ! 2037  Bit16u nbcols,nbrows,i;
18816                                           !BCC_EOS
18817                                           ! 2038  Bit16u address;
18818                                           !BCC_EOS
18819                                           ! 2039  if(rul>rlr)return;
18820 4845           55                         push	bp
18821 4846           89E5                       mov	bp,sp
18822 4848           83C4                   F2  add	sp,*-$E
18823                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
18824 484B           8A46         08            mov	al,8[bp]
18825 484E           3A46         0C            cmp	al,$C[bp]
18826 4851           76           04            jbe 	.B7
18827                       00004853            .B8:
18828 4853           89EC                       mov	sp,bp
18829 4855           5D                         pop	bp
18830 4856           C3                         ret
18831                                           !BCC_EOS
18832                                           ! 2040  if(cul>clr)return;
18833                       00004857            .B7:
18834                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
18835 4857           8A46         0A            mov	al,$A[bp]
18836 485A           3A46         0E            cmp	al,$E[bp]
18837 485D           76           04            jbe 	.B9
18838                       0000485F            .BA:
18839 485F           89EC                       mov	sp,bp
18840 4861           5D                         pop	bp
18841 4862           C3                         ret
18842                                           !BCC_EOS
18843                                           ! 2041  mode=read_byte(0x40,0x49);
18844                       00004863            .B9:
18845                                           ! Debug: list int = const $49 (used reg = )
18846 4863           B8                   0049  mov	ax,*$49
18847 4866           50                         push	ax
18848                                           ! Debug: list int = const $40 (used reg = )
18849 4867           B8                   0040  mov	ax,*$40
18850 486A           50                         push	ax
18851                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18852 486B           E8         32AF            call	_read_byte
18853 486E           83C4                   04  add	sp,*4
18854                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
18855 4871           8846         FF            mov	-1[bp],al
18856                                           !BCC_EOS
18857                                           ! 2042  line=find_vga_entry(mode);
18858                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
18859 4874           8A46         FF            mov	al,-1[bp]
18860 4877           30E4                       xor	ah,ah
18861 4879           50                         push	ax
18862                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18863 487A           E8         31B4            call	_find_vga_entry
18864 487D           44                         inc	sp
18865 487E           44                         inc	sp
18866                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
18867 487F           8846         FE            mov	-2[bp],al
18868                                           !BCC_EOS
18869                                           ! 2043  if(line==0xFF)return;
18870                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
18871 4882           8A46         FE            mov	al,-2[bp]
18872 4885           3C                     FF  cmp	al,#$FF
18873 4887           75           04            jne 	.BB
18874                       00004889            .BC:
18875 4889           89EC                       mov	sp,bp
18876 488B           5D                         pop	bp
18877 488C           C3                         ret
18878                                           !BCC_EOS
18879                                           ! 2044  nbrows=read_byte(0x40,0x84)+1;
18880                       0000488D            .BB:
18881                                           ! Debug: list int = const $84 (used reg = )
18882 488D           B8                   0084  mov	ax,#$84
18883 4890           50                         push	ax
18884                                           ! Debug: list int = const $40 (used reg = )
18885 4891           B8                   0040  mov	ax,*$40
18886 4894           50                         push	ax
18887                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18888 4895           E8         3285            call	_read_byte
18889 4898           83C4                   04  add	sp,*4
18890                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18891 489B           30E4                       xor	ah,ah
18892                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18893 489D           40                         inc	ax
18894 489E           8946         F6            mov	-$A[bp],ax
18895                                           !BCC_EOS
18896                                           ! 2045  nbcols=read_word(0x40,0x4A);
18897                                           ! Debug: list int = const $4A (used reg = )
18898 48A1           B8                   004A  mov	ax,*$4A
18899 48A4           50                         push	ax
18900                                           ! Debug: list int = const $40 (used reg = )
18901 48A5           B8                   0040  mov	ax,*$40
18902 48A8           50                         push	ax
18903                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18904 48A9           E8         3284            call	_read_word
18905 48AC           83C4                   04  add	sp,*4
18906                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18907 48AF           8946         F8            mov	-8[bp],ax
18908                                           !BCC_EOS
18909                                           ! 2046  if(page==0xFF)
18910                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
18911 48B2           8A46         10            mov	al,$10[bp]
18912 48B5           3C                     FF  cmp	al,#$FF
18913 48B7           75           11            jne 	.BD
18914                       000048B9            .BE:
18915                                           ! 2047   page=read_byte(0x40,0x62);
18916                                           ! Debug: list int = const $62 (used reg = )
18917 48B9           B8                   0062  mov	ax,*$62
18918 48BC           50                         push	ax
18919                                           ! Debug: list int = const $40 (used reg = )
18920 48BD           B8                   0040  mov	ax,*$40
18921 48C0           50                         push	ax
18922                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18923 48C1           E8         3259            call	_read_byte
18924 48C4           83C4                   04  add	sp,*4
18925                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
18926 48C7           8846         10            mov	$10[bp],al
18927                                           !BCC_EOS
18928                                           ! 2048  if(rlr>=nbrows)rlr=nbrows-1;
18929                       000048CA            .BD:
18930                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
18931 48CA           8A46         0C            mov	al,$C[bp]
18932 48CD           30E4                       xor	ah,ah
18933 48CF           3B46         F6            cmp	ax,-$A[bp]
18934 48D2           72           07            jb  	.BF
18935                       000048D4            .C0:
18936                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18937 48D4           8B46         F6            mov	ax,-$A[bp]
18938                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
18939 48D7           48                         dec	ax
18940 48D8           8846         0C            mov	$C[bp],al
18941                                           !BCC_EOS
18942                                           ! 2049  if(clr>=nbcols)clr=nbcols-1;
18943                       000048DB            .BF:
18944                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
18945 48DB           8A46         0E            mov	al,$E[bp]
18946 48DE           30E4                       xor	ah,ah
18947 48E0           3B46         F8            cmp	ax,-8[bp]
18948 48E3           72           07            jb  	.C1
18949                       000048E5            .C2:
18950                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
18951 48E5           8B46         F8            mov	ax,-8[bp]
18952                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
18953 48E8           48                         dec	ax
18954 48E9           8846         0E            mov	$E[bp],al
18955                                           !BCC_EOS
18956                                           ! 2050  if(nblines>nbrows)nblines=0;
18957                       000048EC            .C1:
18958                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
18959 48EC           8A46         04            mov	al,4[bp]
18960 48EF           30E4                       xor	ah,ah
18961 48F1           3B46         F6            cmp	ax,-$A[bp]
18962 48F4           76           05            jbe 	.C3
18963                       000048F6            .C4:
18964                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
18965 48F6           30C0                       xor	al,al
18966 48F8           8846         04            mov	4[bp],al
18967                                           !BCC_EOS
18968                                           ! 2051  cols=clr-cul+1;
18969                       000048FB            .C3:
18970                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
18971 48FB           8A46         0E            mov	al,$E[bp]
18972 48FE           30E4                       xor	ah,ah
18973 4900           2A46         0A            sub	al,$A[bp]
18974 4903           80DC                   00  sbb	ah,*0
18975                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18976                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
18977 4906           40                         inc	ax
18978 4907           8846         FB            mov	-5[bp],al
18979                                           !BCC_EOS
18980                                           ! 2052  if(vga_modes[line].class==0x00)
18981                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
18982 490A           8A46         FE            mov	al,-2[bp]
18983 490D           30E4                       xor	ah,ah
18984 490F           B1                     03  mov	cl,*3
18985 4911           D3E0                       shl	ax,cl
18986 4913           89C3                       mov	bx,ax
18987 4915           81C3                 01B6  add	bx,#_vga_modes
18988                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18989 4919           8A47         01            mov	al,1[bx]
18990 491C           84C0                       test	al,al
18991 491E   7403    E9         0253            bne 	.C5
18992                       00004923            .C6:
18993                                           ! 2053   {
18994                                           ! 2054    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18995                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18996 4923           8B46         F8            mov	ax,-8[bp]
18997 4926           8B4E         F6            mov	cx,-$A[bp]
18998 4929           F7E9                       imul	cx
18999                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19000 492B           D1E0                       shl	ax,*1
19001                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19002 492D           0C                     FF  or	al,#$FF
19003                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19004                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19005 492F           89C3                       mov	bx,ax
19006 4931           8A46         10            mov	al,$10[bp]
19007 4934           30E4                       xor	ah,ah
19008 4936           93                         xchg	ax,bx
19009 4937           40                         inc	ax
19010 4938           89D9                       mov	cx,bx
19011 493A           F7E9                       imul	cx
19012                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19013 493C           8946         F2            mov	-$E[bp],ax
19014                                           !BCC_EOS
19015                                           ! 2055    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19016                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19017 493F           8A46         04            mov	al,4[bp]
19018 4942           84C0                       test	al,al
19019 4944           75           67            jne 	.C7
19020                       00004946            .CC:
19021                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19022 4946           8A46         08            mov	al,8[bp]
19023 4949           84C0                       test	al,al
19024 494B           75           60            jne 	.C7
19025                       0000494D            .CB:
19026                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19027 494D           8A46         0A            mov	al,$A[bp]
19028 4950           84C0                       test	al,al
19029 4952           75           59            jne 	.C7
19030                       00004954            .CA:
19031                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19032 4954           8B46         F6            mov	ax,-$A[bp]
19033                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19034                                           ! Debug: expression subtree swapping
19035 4957           48                         dec	ax
19036 4958           50                         push	ax
19037 4959           8A46         0C            mov	al,$C[bp]
19038 495C           30E4                       xor	ah,ah
19039 495E           3B46         F0            cmp	ax,-$10[bp]
19040 4961           8D66         F2            lea	sp,-$E[bp]
19041 4964           75           47            jne 	.C7
19042                       00004966            .C9:
19043                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19044 4966           8B46         F8            mov	ax,-8[bp]
19045                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19046                                           ! Debug: expression subtree swapping
19047 4969           48                         dec	ax
19048 496A           50                         push	ax
19049 496B           8A46         0E            mov	al,$E[bp]
19050 496E           30E4                       xor	ah,ah
19051 4970           3B46         F0            cmp	ax,-$10[bp]
19052 4973           8D66         F2            lea	sp,-$E[bp]
19053 4976           75           35            jne 	.C7
19054                       00004978            .C8:
19055                                           ! 2056     {
19056                                           ! 2057      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19057                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19058 4978           8B46         F6            mov	ax,-$A[bp]
19059 497B           8B4E         F8            mov	cx,-8[bp]
19060 497E           F7E9                       imul	cx
19061                                           ! Debug: list unsigned int = ax+0 (used reg = )
19062 4980           50                         push	ax
19063                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19064 4981           8A46         06            mov	al,6[bp]
19065 4984           30E4                       xor	ah,ah
19066                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19067 4986           B9                   0100  mov	cx,#$100
19068 4989           F7E9                       imul	cx
19069                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19070                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19071 498B           05                   0020  add	ax,*$20
19072 498E           50                         push	ax
19073                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19074 498F           FF76         F2            push	-$E[bp]
19075                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19076 4992           8A46         FE            mov	al,-2[bp]
19077 4995           30E4                       xor	ah,ah
19078 4997           B1                     03  mov	cl,*3
19079 4999           D3E0                       shl	ax,cl
19080 499B           89C3                       mov	bx,ax
19081 499D           81C3                 01B6  add	bx,#_vga_modes
19082                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19083 49A1           FF77         04            push	4[bx]
19084                                           ! Debug: func () void = memsetw+0 (used reg = )
19085 49A4           E8         30F1            call	_memsetw
19086 49A7           83C4                   08  add	sp,*8
19087                                           !BCC_EOS
19088                                           ! 2058     }
19089                                           ! 2059    else
19090                                           ! 2060     {
19091 49AA           E9         01C6            br 	.CD
19092                       000049AD            .C7:
19093                                           ! 2061      if(dir==1)
19094                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19095 49AD           8A46         12            mov	al,$12[bp]
19096 49B0           3C                     01  cmp	al,*1
19097 49B2   7403    E9         00DD            bne 	.CE
19098                       000049B7            .CF:
19099                                           ! 2062       {for(i=rul;i<=rlr;i++)
19100                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19101 49B7           8A46         08            mov	al,8[bp]
19102 49BA           30E4                       xor	ah,ah
19103 49BC           8946         F4            mov	-$C[bp],ax
19104                                           !BCC_EOS
19105                                           !BCC_EOS
19106                                           ! 2063         {
19107 49BF           E9         00C2            br 	.D2
19108                       000049C2            .D3:
19109                                           ! 2064          if((i+nblines>rlr)||(nblines==0))
19110                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19111 49C2           8B46         F4            mov	ax,-$C[bp]
19112 49C5           0246         04            add	al,4[bp]
19113 49C8           80D4                   00  adc	ah,*0
19114                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19115 49CB           50                         push	ax
19116 49CC           8A46         0C            mov	al,$C[bp]
19117 49CF           30E4                       xor	ah,ah
19118 49D1           3B46         F0            cmp	ax,-$10[bp]
19119 49D4           8D66         F2            lea	sp,-$E[bp]
19120 49D7           72           07            jb  	.D5
19121                       000049D9            .D6:
19122                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19123 49D9           8A46         04            mov	al,4[bp]
19124 49DC           84C0                       test	al,al
19125 49DE           75           42            jne 	.D4
19126                       000049E0            .D5:
19127                                           ! 2065           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19128                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19129 49E0           8A46         FB            mov	al,-5[bp]
19130 49E3           30E4                       xor	ah,ah
19131 49E5           50                         push	ax
19132                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19133 49E6           8A46         06            mov	al,6[bp]
19134 49E9           30E4                       xor	ah,ah
19135                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19136 49EB           B9                   0100  mov	cx,#$100
19137 49EE           F7E9                       imul	cx
19138                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19139                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19140 49F0           05                   0020  add	ax,*$20
19141 49F3           50                         push	ax
19142                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19143 49F4           8B46         F4            mov	ax,-$C[bp]
19144 49F7           8B4E         F8            mov	cx,-8[bp]
19145 49FA           F7E9                       imul	cx
19146                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19147 49FC           0246         0A            add	al,$A[bp]
19148 49FF           80D4                   00  adc	ah,*0
19149                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19150 4A02           D1E0                       shl	ax,*1
19151                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19152                                           ! Debug: expression subtree swapping
19153 4A04           0346         F2            add	ax,-$E[bp]
19154                                           ! Debug: list unsigned int = ax+0 (used reg = )
19155 4A07           50                         push	ax
19156                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19157 4A08           8A46         FE            mov	al,-2[bp]
19158 4A0B           30E4                       xor	ah,ah
19159 4A0D           B1                     03  mov	cl,*3
19160 4A0F           D3E0                       shl	ax,cl
19161 4A11           89C3                       mov	bx,ax
19162 4A13           81C3                 01B6  add	bx,#_vga_modes
19163                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19164 4A17           FF77         04            push	4[bx]
19165                                           ! Debug: func () void = memsetw+0 (used reg = )
19166 4A1A           E8         307B            call	_memsetw
19167 4A1D           83C4                   08  add	sp,*8
19168                                           !BCC_EOS
19169                                           ! 2066          else
19170                                           ! 2067           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19171 4A20           EB           5B            jmp .D7
19172                       00004A22            .D4:
19173                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19174 4A22           8A46         FB            mov	al,-5[bp]
19175 4A25           30E4                       xor	ah,ah
19176 4A27           50                         push	ax
19177                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19178 4A28           8B46         F4            mov	ax,-$C[bp]
19179 4A2B           0246         04            add	al,4[bp]
19180 4A2E           80D4                   00  adc	ah,*0
19181                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19182 4A31           8B4E         F8            mov	cx,-8[bp]
19183 4A34           F7E9                       imul	cx
19184                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19185 4A36           0246         0A            add	al,$A[bp]
19186 4A39           80D4                   00  adc	ah,*0
19187                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19188 4A3C           D1E0                       shl	ax,*1
19189                                           ! Debug: list unsigned int = ax+0 (used reg = )
19190 4A3E           50                         push	ax
19191                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19192 4A3F           8A46         FE            mov	al,-2[bp]
19193 4A42           30E4                       xor	ah,ah
19194 4A44           B1                     03  mov	cl,*3
19195 4A46           D3E0                       shl	ax,cl
19196 4A48           89C3                       mov	bx,ax
19197 4A4A           81C3                 01B6  add	bx,#_vga_modes
19198                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19199 4A4E           FF77         04            push	4[bx]
19200                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19201 4A51           8B46         F4            mov	ax,-$C[bp]
19202 4A54           8B4E         F8            mov	cx,-8[bp]
19203 4A57           F7E9                       imul	cx
19204                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19205 4A59           0246         0A            add	al,$A[bp]
19206 4A5C           80D4                   00  adc	ah,*0
19207                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19208 4A5F           D1E0                       shl	ax,*1
19209                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19210                                           ! Debug: expression subtree swapping
19211 4A61           0346         F2            add	ax,-$E[bp]
19212                                           ! Debug: list unsigned int = ax+0 (used reg = )
19213 4A64           50                         push	ax
19214                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19215 4A65           8A46         FE            mov	al,-2[bp]
19216 4A68           30E4                       xor	ah,ah
19217 4A6A           B1                     03  mov	cl,*3
19218 4A6C           D3E0                       shl	ax,cl
19219 4A6E           89C3                       mov	bx,ax
19220 4A70           81C3                 01B6  add	bx,#_vga_modes
19221                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19222 4A74           FF77         04            push	4[bx]
19223                                           ! Debug: func () void = memcpyw+0 (used reg = )
19224 4A77           E8         3073            call	_memcpyw
19225 4A7A           83C4                   0A  add	sp,*$A
19226                                           !BCC_EOS
19227                                           ! 2068         }
19228                       00004A7D            .D7:
19229                                           ! 2069       }
19230                       00004A7D            .D1:
19231                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19232 4A7D           8B46         F4            mov	ax,-$C[bp]
19233 4A80           40                         inc	ax
19234 4A81           8946         F4            mov	-$C[bp],ax
19235                       00004A84            .D2:
19236                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19237 4A84           8A46         0C            mov	al,$C[bp]
19238 4A87           30E4                       xor	ah,ah
19239 4A89           3B46         F4            cmp	ax,-$C[bp]
19240 4A8C   7203    E9         FF31            bhis	.D3
19241                       00004A91            .D8:
19242                       00004A91            .D0:
19243                                           ! 2070      else
19244                                           ! 2071       {for(i=rlr;i>=rul;i--)
19245 4A91           E9         00DF            br 	.D9
19246                       00004A94            .CE:
19247                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19248 4A94           8A46         0C            mov	al,$C[bp]
19249 4A97           30E4                       xor	ah,ah
19250 4A99           8946         F4            mov	-$C[bp],ax
19251                                           !BCC_EOS
19252                                           !BCC_EOS
19253                                           ! 2072         {
19254 4A9C           E9         00C7            br 	.DC
19255                       00004A9F            .DD:
19256                                           ! 2073          if((i<rul+nblines)||(nblines==0))
19257                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19258 4A9F           8A46         08            mov	al,8[bp]
19259 4AA2           30E4                       xor	ah,ah
19260 4AA4           0246         04            add	al,4[bp]
19261 4AA7           80D4                   00  adc	ah,*0
19262                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19263 4AAA           3B46         F4            cmp	ax,-$C[bp]
19264 4AAD           77           07            ja  	.DF
19265                       00004AAF            .E0:
19266                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19267 4AAF           8A46         04            mov	al,4[bp]
19268 4AB2           84C0                       test	al,al
19269 4AB4           75           42            jne 	.DE
19270                       00004AB6            .DF:
19271                                           ! 2074           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19272                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19273 4AB6           8A46         FB            mov	al,-5[bp]
19274 4AB9           30E4                       xor	ah,ah
19275 4ABB           50                         push	ax
19276                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19277 4ABC           8A46         06            mov	al,6[bp]
19278 4ABF           30E4                       xor	ah,ah
19279                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19280 4AC1           B9                   0100  mov	cx,#$100
19281 4AC4           F7E9                       imul	cx
19282                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19283                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19284 4AC6           05                   0020  add	ax,*$20
19285 4AC9           50                         push	ax
19286                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19287 4ACA           8B46         F4            mov	ax,-$C[bp]
19288 4ACD           8B4E         F8            mov	cx,-8[bp]
19289 4AD0           F7E9                       imul	cx
19290                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19291 4AD2           0246         0A            add	al,$A[bp]
19292 4AD5           80D4                   00  adc	ah,*0
19293                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19294 4AD8           D1E0                       shl	ax,*1
19295                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19296                                           ! Debug: expression subtree swapping
19297 4ADA           0346         F2            add	ax,-$E[bp]
19298                                           ! Debug: list unsigned int = ax+0 (used reg = )
19299 4ADD           50                         push	ax
19300                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19301 4ADE           8A46         FE            mov	al,-2[bp]
19302 4AE1           30E4                       xor	ah,ah
19303 4AE3           B1                     03  mov	cl,*3
19304 4AE5           D3E0                       shl	ax,cl
19305 4AE7           89C3                       mov	bx,ax
19306 4AE9           81C3                 01B6  add	bx,#_vga_modes
19307                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19308 4AED           FF77         04            push	4[bx]
19309                                           ! Debug: func () void = memsetw+0 (used reg = )
19310 4AF0           E8         2FA5            call	_memsetw
19311 4AF3           83C4                   08  add	sp,*8
19312                                           !BCC_EOS
19313                                           ! 2075          else
19314                                           ! 2076           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19315 4AF6           EB           5B            jmp .E1
19316                       00004AF8            .DE:
19317                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19318 4AF8           8A46         FB            mov	al,-5[bp]
19319 4AFB           30E4                       xor	ah,ah
19320 4AFD           50                         push	ax
19321                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19322 4AFE           8B46         F4            mov	ax,-$C[bp]
19323 4B01           2A46         04            sub	al,4[bp]
19324 4B04           80DC                   00  sbb	ah,*0
19325                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19326 4B07           8B4E         F8            mov	cx,-8[bp]
19327 4B0A           F7E9                       imul	cx
19328                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19329 4B0C           0246         0A            add	al,$A[bp]
19330 4B0F           80D4                   00  adc	ah,*0
19331                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19332 4B12           D1E0                       shl	ax,*1
19333                                           ! Debug: list unsigned int = ax+0 (used reg = )
19334 4B14           50                         push	ax
19335                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19336 4B15           8A46         FE            mov	al,-2[bp]
19337 4B18           30E4                       xor	ah,ah
19338 4B1A           B1                     03  mov	cl,*3
19339 4B1C           D3E0                       shl	ax,cl
19340 4B1E           89C3                       mov	bx,ax
19341 4B20           81C3                 01B6  add	bx,#_vga_modes
19342                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19343 4B24           FF77         04            push	4[bx]
19344                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19345 4B27           8B46         F4            mov	ax,-$C[bp]
19346 4B2A           8B4E         F8            mov	cx,-8[bp]
19347 4B2D           F7E9                       imul	cx
19348                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19349 4B2F           0246         0A            add	al,$A[bp]
19350 4B32           80D4                   00  adc	ah,*0
19351                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19352 4B35           D1E0                       shl	ax,*1
19353                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19354                                           ! Debug: expression subtree swapping
19355 4B37           0346         F2            add	ax,-$E[bp]
19356                                           ! Debug: list unsigned int = ax+0 (used reg = )
19357 4B3A           50                         push	ax
19358                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19359 4B3B           8A46         FE            mov	al,-2[bp]
19360 4B3E           30E4                       xor	ah,ah
19361 4B40           B1                     03  mov	cl,*3
19362 4B42           D3E0                       shl	ax,cl
19363 4B44           89C3                       mov	bx,ax
19364 4B46           81C3                 01B6  add	bx,#_vga_modes
19365                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19366 4B4A           FF77         04            push	4[bx]
19367                                           ! Debug: func () void = memcpyw+0 (used reg = )
19368 4B4D           E8         2F9D            call	_memcpyw
19369 4B50           83C4                   0A  add	sp,*$A
19370                                           !BCC_EOS
19371                                           ! 2077          if (i>rlr) break;
19372                       00004B53            .E1:
19373                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19374 4B53           8A46         0C            mov	al,$C[bp]
19375 4B56           30E4                       xor	ah,ah
19376 4B58           3B46         F4            cmp	ax,-$C[bp]
19377 4B5B           73           02            jae 	.E2
19378                       00004B5D            .E3:
19379 4B5D           EB           14            jmp .DA
19380                                           !BCC_EOS
19381                                           ! 2078         }
19382                       00004B5F            .E2:
19383                                           ! 2079       }
19384                       00004B5F            .DB:
19385                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19386 4B5F           8B46         F4            mov	ax,-$C[bp]
19387 4B62           48                         dec	ax
19388 4B63           8946         F4            mov	-$C[bp],ax
19389                       00004B66            .DC:
19390                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19391 4B66           8A46         08            mov	al,8[bp]
19392 4B69           30E4                       xor	ah,ah
19393 4B6B           3B46         F4            cmp	ax,-$C[bp]
19394 4B6E   7703    E9         FF2C            blos	.DD
19395                       00004B73            .E4:
19396                       00004B73            .DA:
19397                                           ! 2080     }
19398                       00004B73            .D9:
19399                                           ! 2081   }
19400                       00004B73            .CD:
19401                                           ! 2082  else
19402                                           ! 2083   {
19403 4B73           E9         03DF            br 	.E5
19404                       00004B76            .C5:
19405                                           ! 2084    cheight=video_param_table[line_to_vpti[line]].cheight;
19406                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19407 4B76           8A46         FE            mov	al,-2[bp]
19408 4B79           30E4                       xor	ah,ah
19409 4B7B           89C3                       mov	bx,ax
19410                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19411 4B7D           8A87       0236            mov	al,_line_to_vpti[bx]
19412 4B81           30E4                       xor	ah,ah
19413 4B83           B1                     06  mov	cl,*6
19414 4B85           D3E0                       shl	ax,cl
19415 4B87           89C3                       mov	bx,ax
19416 4B89           81C3                 024A  add	bx,#_video_param_table
19417                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19418 4B8D           8A47         02            mov	al,2[bx]
19419 4B90           8846         FD            mov	-3[bp],al
19420                                           !BCC_EOS
19421                                           ! 2085    switch(vga_modes[line].memmodel)
19422                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19423 4B93           8A46         FE            mov	al,-2[bp]
19424 4B96           30E4                       xor	ah,ah
19425 4B98           B1                     03  mov	cl,*3
19426 4B9A           D3E0                       shl	ax,cl
19427 4B9C           89C3                       mov	bx,ax
19428 4B9E           81C3                 01B6  add	bx,#_vga_modes
19429 4BA2           8A47         02            mov	al,2[bx]
19430                                           ! 2086     {
19431 4BA5           E9         0398            br 	.E8
19432                                           ! 2087      case 0x04:
19433                                           ! 2088      case 0x03:
19434                       00004BA8            .E9:
19435                                           ! 2089        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19436                       00004BA8            .EA:
19437                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19438 4BA8           8A46         04            mov	al,4[bp]
19439 4BAB           84C0                       test	al,al
19440 4BAD   7403    E9         008A            bne 	.EB
19441                       00004BB2            .F0:
19442                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19443 4BB2           8A46         08            mov	al,8[bp]
19444 4BB5           84C0                       test	al,al
19445 4BB7   7403    E9         0080            bne 	.EB
19446                       00004BBC            .EF:
19447                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19448 4BBC           8A46         0A            mov	al,$A[bp]
19449 4BBF           84C0                       test	al,al
19450 4BC1           75           79            jne 	.EB
19451                       00004BC3            .EE:
19452                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19453 4BC3           8B46         F6            mov	ax,-$A[bp]
19454                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19455                                           ! Debug: expression subtree swapping
19456 4BC6           48                         dec	ax
19457 4BC7           50                         push	ax
19458 4BC8           8A46         0C            mov	al,$C[bp]
19459 4BCB           30E4                       xor	ah,ah
19460 4BCD           3B46         F0            cmp	ax,0+..FFFC[bp]
19461 4BD0           8D66         F2            lea	sp,2+..FFFC[bp]
19462 4BD3           75           67            jne 	.EB
19463                       00004BD5            .ED:
19464                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19465 4BD5           8B46         F8            mov	ax,-8[bp]
19466                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19467                                           ! Debug: expression subtree swapping
19468 4BD8           48                         dec	ax
19469 4BD9           50                         push	ax
19470 4BDA           8A46         0E            mov	al,$E[bp]
19471 4BDD           30E4                       xor	ah,ah
19472 4BDF           3B46         F0            cmp	ax,0+..FFFC[bp]
19473 4BE2           8D66         F2            lea	sp,2+..FFFC[bp]
19474 4BE5           75           55            jne 	.EB
19475                       00004BE7            .EC:
19476                                           ! 2090         {
19477                                           ! 2091          outw(0x3ce, 0x0205);
19478                                           ! Debug: list int = const $205 (used reg = )
19479 4BE7           B8                   0205  mov	ax,#$205
19480 4BEA           50                         push	ax
19481                                           ! Debug: list int = const $3CE (used reg = )
19482 4BEB           B8                   03CE  mov	ax,#$3CE
19483 4BEE           50                         push	ax
19484                                           ! Debug: func () void = outw+0 (used reg = )
19485 4BEF           E8         2FA7            call	_outw
19486 4BF2           83C4                   04  add	sp,*4
19487                                           !BCC_EOS
19488                                           ! 2092          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
19489                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19490 4BF5           8B46         F6            mov	ax,-$A[bp]
19491 4BF8           8B4E         F8            mov	cx,-8[bp]
19492 4BFB           F7E9                       imul	cx
19493                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19494 4BFD           89C3                       mov	bx,ax
19495 4BFF           8A46         FD            mov	al,-3[bp]
19496 4C02           30E4                       xor	ah,ah
19497 4C04           93                         xchg	ax,bx
19498 4C05           89D9                       mov	cx,bx
19499 4C07           F7E9                       imul	cx
19500                                           ! Debug: list unsigned int = ax+0 (used reg = )
19501 4C09           50                         push	ax
19502                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19503 4C0A           8A46         06            mov	al,6[bp]
19504 4C0D           30E4                       xor	ah,ah
19505 4C0F           50                         push	ax
19506                                           ! Debug: list int = const 0 (used reg = )
19507 4C10           31C0                       xor	ax,ax
19508 4C12           50                         push	ax
19509                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19510 4C13           8A46         FE            mov	al,-2[bp]
19511 4C16           30E4                       xor	ah,ah
19512 4C18           B1                     03  mov	cl,*3
19513 4C1A           D3E0                       shl	ax,cl
19514 4C1C           89C3                       mov	bx,ax
19515 4C1E           81C3                 01B6  add	bx,#_vga_modes
19516                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19517 4C22           FF77         04            push	4[bx]
19518                                           ! Debug: func () void = memsetb+0 (used reg = )
19519 4C25           E8         2E4B            call	_memsetb
19520 4C28           83C4                   08  add	sp,*8
19521                                           !BCC_EOS
19522                                           ! 2093          outw(0x3ce, 0x0005);
19523                                           ! Debug: list int = const 5 (used reg = )
19524 4C2B           B8                   0005  mov	ax,*5
19525 4C2E           50                         push	ax
19526                                           ! Debug: list int = const $3CE (used reg = )
19527 4C2F           B8                   03CE  mov	ax,#$3CE
19528 4C32           50                         push	ax
19529                                           ! Debug: func () void = outw+0 (used reg = )
19530 4C33           E8         2F63            call	_outw
19531 4C36           83C4                   04  add	sp,*4
19532                                           !BCC_EOS
19533                                           ! 2094         }
19534                                           ! 2095        else
19535                                           ! 2096         {
19536 4C39           E9         0123            br 	.F1
19537                       00004C3C            .EB:
19538                                           ! 2097          if(dir==1)
19539                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19540 4C3C           8A46         12            mov	al,$12[bp]
19541 4C3F           3C                     01  cmp	al,*1
19542 4C41   7403    E9         008A            bne 	.F2
19543                       00004C46            .F3:
19544                                           ! 2098           {for(i=rul;i<=rlr;i++)
19545                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19546 4C46           8A46         08            mov	al,8[bp]
19547 4C49           30E4                       xor	ah,ah
19548 4C4B           8946         F4            mov	-$C[bp],ax
19549                                           !BCC_EOS
19550                                           !BCC_EOS
19551                                           ! 2099             {
19552 4C4E           EB           73            jmp .F6
19553                       00004C50            .F7:
19554                                           ! 2100              if((i+nblines>rlr)||(nblines==0))
19555                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19556 4C50           8B46         F4            mov	ax,-$C[bp]
19557 4C53           0246         04            add	al,4[bp]
19558 4C56           80D4                   00  adc	ah,*0
19559                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19560 4C59           50                         push	ax
19561 4C5A           8A46         0C            mov	al,$C[bp]
19562 4C5D           30E4                       xor	ah,ah
19563 4C5F           3B46         F0            cmp	ax,0+..FFFC[bp]
19564 4C62           8D66         F2            lea	sp,2+..FFFC[bp]
19565 4C65           72           07            jb  	.F9
19566                       00004C67            .FA:
19567                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19568 4C67           8A46         04            mov	al,4[bp]
19569 4C6A           84C0                       test	al,al
19570 4C6C           75           26            jne 	.F8
19571                       00004C6E            .F9:
19572                                           ! 2101               vgamem_fill
19573                                           ! 2101 _pl4(cul,i,cols,nbcols,cheight,attr);
19574                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19575 4C6E           8A46         06            mov	al,6[bp]
19576 4C71           30E4                       xor	ah,ah
19577 4C73           50                         push	ax
19578                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19579 4C74           8A46         FD            mov	al,-3[bp]
19580 4C77           30E4                       xor	ah,ah
19581 4C79           50                         push	ax
19582                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19583 4C7A           FF76         F8            push	-8[bp]
19584                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19585 4C7D           8A46         FB            mov	al,-5[bp]
19586 4C80           30E4                       xor	ah,ah
19587 4C82           50                         push	ax
19588                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19589 4C83           FF76         F4            push	-$C[bp]
19590                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19591 4C86           8A46         0A            mov	al,$A[bp]
19592 4C89           30E4                       xor	ah,ah
19593 4C8B           50                         push	ax
19594                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19595 4C8C           E8         F963            call	_vgamem_fill_pl4
19596 4C8F           83C4                   0C  add	sp,*$C
19597                                           !BCC_EOS
19598                                           ! 2102              else
19599                                           ! 2103               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
19600 4C92           EB           28            jmp .FB
19601                       00004C94            .F8:
19602                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19603 4C94           8A46         FD            mov	al,-3[bp]
19604 4C97           30E4                       xor	ah,ah
19605 4C99           50                         push	ax
19606                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19607 4C9A           FF76         F8            push	-8[bp]
19608                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19609 4C9D           8A46         FB            mov	al,-5[bp]
19610 4CA0           30E4                       xor	ah,ah
19611 4CA2           50                         push	ax
19612                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19613 4CA3           FF76         F4            push	-$C[bp]
19614                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19615 4CA6           8B46         F4            mov	ax,-$C[bp]
19616 4CA9           0246         04            add	al,4[bp]
19617 4CAC           80D4                   00  adc	ah,*0
19618                                           ! Debug: list unsigned int = ax+0 (used reg = )
19619 4CAF           50                         push	ax
19620                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19621 4CB0           8A46         0A            mov	al,$A[bp]
19622 4CB3           30E4                       xor	ah,ah
19623 4CB5           50                         push	ax
19624                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19625 4CB6           E8         F877            call	_vgamem_copy_pl4
19626 4CB9           83C4                   0C  add	sp,*$C
19627                                           !BCC_EOS
19628                                           ! 2104             }
19629                       00004CBC            .FB:
19630                                           ! 2105           }
19631                       00004CBC            .F5:
19632                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19633 4CBC           8B46         F4            mov	ax,-$C[bp]
19634 4CBF           40                         inc	ax
19635 4CC0           8946         F4            mov	-$C[bp],ax
19636                       00004CC3            .F6:
19637                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19638 4CC3           8A46         0C            mov	al,$C[bp]
19639 4CC6           30E4                       xor	ah,ah
19640 4CC8           3B46         F4            cmp	ax,-$C[bp]
19641 4CCB           73           83            jae	.F7
19642                       00004CCD            .FC:
19643                       00004CCD            .F4:
19644                                           ! 2106          else
19645                                           ! 2107           {for(i=rlr;i>=rul;i--)
19646 4CCD           E9         008F            br 	.FD
19647                       00004CD0            .F2:
19648                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19649 4CD0           8A46         0C            mov	al,$C[bp]
19650 4CD3           30E4                       xor	ah,ah
19651 4CD5           8946         F4            mov	-$C[bp],ax
19652                                           !BCC_EOS
19653                                           !BCC_EOS
19654                                           ! 2108             {
19655 4CD8           EB           78            jmp .100
19656                       00004CDA            .101:
19657                                           ! 2109              if((i<rul+nblines)||(nblines==0))
19658                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19659 4CDA           8A46         08            mov	al,8[bp]
19660 4CDD           30E4                       xor	ah,ah
19661 4CDF           0246         04            add	al,4[bp]
19662 4CE2           80D4                   00  adc	ah,*0
19663                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19664 4CE5           3B46         F4            cmp	ax,-$C[bp]
19665 4CE8           77           07            ja  	.103
19666                       00004CEA            .104:
19667                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19668 4CEA           8A46         04            mov	al,4[bp]
19669 4CED           84C0                       test	al,al
19670 4CEF           75           26            jne 	.102
19671                       00004CF1            .103:
19672                                           ! 2110               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19673                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19674 4CF1           8A46         06            mov	al,6[bp]
19675 4CF4           30E4                       xor	ah,ah
19676 4CF6           50                         push	ax
19677                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19678 4CF7           8A46         FD            mov	al,-3[bp]
19679 4CFA           30E4                       xor	ah,ah
19680 4CFC           50                         push	ax
19681                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19682 4CFD           FF76         F8            push	-8[bp]
19683                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19684 4D00           8A46         FB            mov	al,-5[bp]
19685 4D03           30E4                       xor	ah,ah
19686 4D05           50                         push	ax
19687                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19688 4D06           FF76         F4            push	-$C[bp]
19689                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19690 4D09           8A46         0A            mov	al,$A[bp]
19691 4D0C           30E4                       xor	ah,ah
19692 4D0E           50                         push	ax
19693                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19694 4D0F           E8         F8E0            call	_vgamem_fill_pl4
19695 4D12           83C4                   0C  add	sp,*$C
19696                                           !BCC_EOS
19697                                           ! 2111              else
19698                                           ! 2112               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
19699 4D15           EB           28            jmp .105
19700                       00004D17            .102:
19701                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19702 4D17           8A46         FD            mov	al,-3[bp]
19703 4D1A           30E4                       xor	ah,ah
19704 4D1C           50                         push	ax
19705                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19706 4D1D           FF76         F8            push	-8[bp]
19707                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19708 4D20           8A46         FB            mov	al,-5[bp]
19709 4D23           30E4                       xor	ah,ah
19710 4D25           50                         push	ax
19711                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
19712 4D26           8B46         F4            mov	ax,-$C[bp]
19713 4D29           2A46         04            sub	al,4[bp]
19714 4D2C           80DC                   00  sbb	ah,*0
19715                                           ! Debug: list unsigned int = ax+0 (used reg = )
19716 4D2F           50                         push	ax
19717                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19718 4D30           FF76         F4            push	-$C[bp]
19719                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19720 4D33           8A46         0A            mov	al,$A[bp]
19721 4D36           30E4                       xor	ah,ah
19722 4D38           50                         push	ax
19723                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19724 4D39           E8         F7F4            call	_vgamem_copy_pl4
19725 4D3C           83C4                   0C  add	sp,*$C
19726                                           !BCC_EOS
19727                                           ! 2113              if (i>rlr) break;
19728                       00004D3F            .105:
19729                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19730 4D3F           8A46         0C            mov	al,$C[bp]
19731 4D42           30E4                       xor	ah,ah
19732 4D44           3B46         F4            cmp	ax,-$C[bp]
19733 4D47           73           02            jae 	.106
19734                       00004D49            .107:
19735 4D49           EB           14            jmp .FE
19736                                           !BCC_EOS
19737                                           ! 2114             }
19738                       00004D4B            .106:
19739                                           ! 2115           }
19740                       00004D4B            .FF:
19741                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19742 4D4B           8B46         F4            mov	ax,-$C[bp]
19743 4D4E           48                         dec	ax
19744 4D4F           8946         F4            mov	-$C[bp],ax
19745                       00004D52            .100:
19746                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19747 4D52           8A46         08            mov	al,8[bp]
19748 4D55           30E4                       xor	ah,ah
19749 4D57           3B46         F4            cmp	ax,-$C[bp]
19750 4D5A   7703    E9         FF7B            blos	.101
19751                       00004D5F            .108:
19752                       00004D5F            .FE:
19753                                           ! 2116         }
19754                       00004D5F            .FD:
19755                                           ! 2117        break;
19756                       00004D5F            .F1:
19757 4D5F           E9         01F3            br 	.E6
19758                                           !BCC_EOS
19759                                           ! 2118      case 0x02:
19760                                           ! 2119        bpp=vga_modes[line].pixbits;
19761                       00004D62            .109:
19762                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19763 4D62           8A46         FE            mov	al,-2[bp]
19764 4D65           30E4                       xor	ah,ah
19765 4D67           B1                     03  mov	cl,*3
19766 4D69           D3E0                       shl	ax,cl
19767 4D6B           89C3                       mov	bx,ax
19768 4D6D           81C3                 01B6  add	bx,#_vga_modes
19769                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
19770 4D71           8A47         03            mov	al,3[bx]
19771 4D74           8846         FC            mov	-4[bp],al
19772                                           !BCC_EOS
19773                                           ! 2120        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19774                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19775 4D77           8A46         04            mov	al,4[bp]
19776 4D7A           84C0                       test	al,al
19777 4D7C           75           77            jne 	.10A
19778                       00004D7E            .10F:
19779                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19780 4D7E           8A46         08            mov	al,8[bp]
19781 4D81           84C0                       test	al,al
19782 4D83           75           70            jne 	.10A
19783                       00004D85            .10E:
19784                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19785 4D85           8A46         0A            mov	al,$A[bp]
19786 4D88           84C0                       test	al,al
19787 4D8A           75           69            jne 	.10A
19788                       00004D8C            .10D:
19789                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19790 4D8C           8B46         F6            mov	ax,-$A[bp]
19791                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19792                                           ! Debug: expression subtree swapping
19793 4D8F           48                         dec	ax
19794 4D90           50                         push	ax
19795 4D91           8A46         0C            mov	al,$C[bp]
19796 4D94           30E4                       xor	ah,ah
19797 4D96           3B46         F0            cmp	ax,0+..FFFC[bp]
19798 4D99           8D66         F2            lea	sp,2+..FFFC[bp]
19799 4D9C           75           57            jne 	.10A
19800                       00004D9E            .10C:
19801                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19802 4D9E           8B46         F8            mov	ax,-8[bp]
19803                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19804                                           ! Debug: expression subtree swapping
19805 4DA1           48                         dec	ax
19806 4DA2           50                         push	ax
19807 4DA3           8A46         0E            mov	al,$E[bp]
19808 4DA6           30E4                       xor	ah,ah
19809 4DA8           3B46         F0            cmp	ax,0+..FFFC[bp]
19810 4DAB           8D66         F2            lea	sp,2+..FFFC[bp]
19811 4DAE           75           45            jne 	.10A
19812                       00004DB0            .10B:
19813                                           ! 2121         {
19814                                           ! 2122          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
19815                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19816 4DB0           8B46         F6            mov	ax,-$A[bp]
19817 4DB3           8B4E         F8            mov	cx,-8[bp]
19818 4DB6           F7E9                       imul	cx
19819                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19820 4DB8           89C3                       mov	bx,ax
19821 4DBA           8A46         FD            mov	al,-3[bp]
19822 4DBD           30E4                       xor	ah,ah
19823 4DBF           93                         xchg	ax,bx
19824 4DC0           89D9                       mov	cx,bx
19825 4DC2           F7E9                       imul	cx
19826                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
19827 4DC4           89C3                       mov	bx,ax
19828 4DC6           8A46         FC            mov	al,-4[bp]
19829 4DC9           30E4                       xor	ah,ah
19830 4DCB           93                         xchg	ax,bx
19831 4DCC           89D9                       mov	cx,bx
19832 4DCE           F7E9                       imul	cx
19833                                           ! Debug: list unsigned int = ax+0 (used reg = )
19834 4DD0           50                         push	ax
19835                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19836 4DD1           8A46         06            mov	al,6[bp]
19837 4DD4           30E4                       xor	ah,ah
19838 4DD6           50                         push	ax
19839                                           ! Debug: list int = const 0 (used reg = )
19840 4DD7           31C0                       xor	ax,ax
19841 4DD9           50                         push	ax
19842                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19843 4DDA           8A46         FE            mov	al,-2[bp]
19844 4DDD           30E4                       xor	ah,ah
19845 4DDF           B1                     03  mov	cl,*3
19846 4DE1           D3E0                       shl	ax,cl
19847 4DE3           89C3                       mov	bx,ax
19848 4DE5           81C3                 01B6  add	bx,#_vga_modes
19849                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19850 4DE9           FF77         04            push	4[bx]
19851                                           ! Debug: func () void = memsetb+0 (used reg = )
19852 4DEC           E8         2C84            call	_memsetb
19853 4DEF           83C4                   08  add	sp,*8
19854                                           !BCC_EOS
19855                                           ! 2123         }
19856                                           ! 2124        else
19857                                           ! 2125         {
19858 4DF2           E9         0147            br 	.110
19859                       00004DF5            .10A:
19860                                           ! 2126          if(bpp==2)
19861                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
19862 4DF5           8A46         FC            mov	al,-4[bp]
19863 4DF8           3C                     02  cmp	al,*2
19864 4DFA           75           1C            jne 	.111
19865                       00004DFC            .112:
19866                                           ! 2127           {
19867                                           ! 2128            cul<<=1;
19868                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
19869 4DFC           8A46         0A            mov	al,$A[bp]
19870 4DFF           30E4                       xor	ah,ah
19871 4E01           D1E0                       shl	ax,*1
19872 4E03           8846         0A            mov	$A[bp],al
19873                                           !BCC_EOS
19874                                           ! 2129            cols<<=1;
19875                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
19876 4E06           8A46         FB            mov	al,-5[bp]
19877 4E09           30E4                       xor	ah,ah
19878 4E0B           D1E0                       shl	ax,*1
19879 4E0D           8846         FB            mov	-5[bp],al
19880                                           !BCC_EOS
19881                                           ! 2130            nbcols<<=1;
19882                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19883 4E10           8B46         F8            mov	ax,-8[bp]
19884 4E13           D1E0                       shl	ax,*1
19885 4E15           8946         F8            mov	-8[bp],ax
19886                                           !BCC_EOS
19887                                           ! 2131           }
19888                                           ! 2132          if(dir==1)
19889                       00004E18            .111:
19890                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19891 4E18           8A46         12            mov	al,$12[bp]
19892 4E1B           3C                     01  cmp	al,*1
19893 4E1D   7403    E9         008B            bne 	.113
19894                       00004E22            .114:
19895                                           ! 2133           {for(i=rul;i<=rlr;i++)
19896                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19897 4E22           8A46         08            mov	al,8[bp]
19898 4E25           30E4                       xor	ah,ah
19899 4E27           8946         F4            mov	-$C[bp],ax
19900                                           !BCC_EOS
19901                                           !BCC_EOS
19902                                           ! 2134             {
19903 4E2A           E9         0073            br 	.117
19904                       00004E2D            .118:
19905                                           ! 2135              if((i+nblines>rlr)||(nblines==0))
19906                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19907 4E2D           8B46         F4            mov	ax,-$C[bp]
19908 4E30           0246         04            add	al,4[bp]
19909 4E33           80D4                   00  adc	ah,*0
19910                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19911 4E36           50                         push	ax
19912 4E37           8A46         0C            mov	al,$C[bp]
19913 4E3A           30E4                       xor	ah,ah
19914 4E3C           3B46         F0            cmp	ax,0+..FFFC[bp]
19915 4E3F           8D66         F2            lea	sp,2+..FFFC[bp]
19916 4E42           72           07            jb  	.11A
19917                       00004E44            .11B:
19918                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19919 4E44           8A46         04            mov	al,4[bp]
19920 4E47           84C0                       test	al,al
19921 4E49           75           26            jne 	.119
19922                       00004E4B            .11A:
19923                                           ! 2136               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
19924                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19925 4E4B           8A46         06            mov	al,6[bp]
19926 4E4E           30E4                       xor	ah,ah
19927 4E50           50                         push	ax
19928                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19929 4E51           8A46         FD            mov	al,-3[bp]
19930 4E54           30E4                       xor	ah,ah
19931 4E56           50                         push	ax
19932                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19933 4E57           FF76         F8            push	-8[bp]
19934                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19935 4E5A           8A46         FB            mov	al,-5[bp]
19936 4E5D           30E4                       xor	ah,ah
19937 4E5F           50                         push	ax
19938                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19939 4E60           FF76         F4            push	-$C[bp]
19940                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19941 4E63           8A46         0A            mov	al,$A[bp]
19942 4E66           30E4                       xor	ah,ah
19943 4E68           50                         push	ax
19944                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
19945 4E69           E8         F924            call	_vgamem_fill_cga
19946 4E6C           83C4                   0C  add	sp,*$C
19947                                           !BCC_EOS
19948                                           ! 2137              else
19949                                           ! 2138               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
19950 4E6F           EB           28            jmp .11C
19951                       00004E71            .119:
19952                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19953 4E71           8A46         FD            mov	al,-3[bp]
19954 4E74           30E4                       xor	ah,ah
19955 4E76           50                         push	ax
19956                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19957 4E77           FF76         F8            push	-8[bp]
19958                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19959 4E7A           8A46         FB            mov	al,-5[bp]
19960 4E7D           30E4                       xor	ah,ah
19961 4E7F           50                         push	ax
19962                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19963 4E80           FF76         F4            push	-$C[bp]
19964                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19965 4E83           8B46         F4            mov	ax,-$C[bp]
19966 4E86           0246         04            add	al,4[bp]
19967 4E89           80D4                   00  adc	ah,*0
19968                                           ! Debug: list unsigned int = ax+0 (used reg = )
19969 4E8C           50                         push	ax
19970                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19971 4E8D           8A46         0A            mov	al,$A[bp]
19972 4E90           30E4                       xor	ah,ah
19973 4E92           50                         push	ax
19974                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
19975 4E93           E8         F7E7            call	_vgamem_copy_cga
19976 4E96           83C4                   0C  add	sp,*$C
19977                                           !BCC_EOS
19978                                           ! 2139             }
19979                       00004E99            .11C:
19980                                           ! 2140           }
19981                       00004E99            .116:
19982                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19983 4E99           8B46         F4            mov	ax,-$C[bp]
19984 4E9C           40                         inc	ax
19985 4E9D           8946         F4            mov	-$C[bp],ax
19986                       00004EA0            .117:
19987                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19988 4EA0           8A46         0C            mov	al,$C[bp]
19989 4EA3           30E4                       xor	ah,ah
19990 4EA5           3B46         F4            cmp	ax,-$C[bp]
19991 4EA8           73           83            jae	.118
19992                       00004EAA            .11D:
19993                       00004EAA            .115:
19994                                           ! 2141          else
19995                                           ! 2142           {for(i=rlr;i>=rul;i--)
19996 4EAA           E9         008F            br 	.11E
19997                       00004EAD            .113:
19998                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19999 4EAD           8A46         0C            mov	al,$C[bp]
20000 4EB0           30E4                       xor	ah,ah
20001 4EB2           8946         F4            mov	-$C[bp],ax
20002                                           !BCC_EOS
20003                                           !BCC_EOS
20004                                           ! 2143             {
20005 4EB5           EB           78            jmp .121
20006                       00004EB7            .122:
20007                                           ! 2144              if((i<rul+nblines)||(nblines==0))
20008                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20009 4EB7           8A46         08            mov	al,8[bp]
20010 4EBA           30E4                       xor	ah,ah
20011 4EBC           0246         04            add	al,4[bp]
20012 4EBF           80D4                   00  adc	ah,*0
20013                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20014 4EC2           3B46         F4            cmp	ax,-$C[bp]
20015 4EC5           77           07            ja  	.124
20016                       00004EC7            .125:
20017                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20018 4EC7           8A46         04            mov	al,4[bp]
20019 4ECA           84C0                       test	al,al
20020 4ECC           75           26            jne 	.123
20021                       00004ECE            .124:
20022                                           ! 2145               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20023                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20024 4ECE           8A46         06            mov	al,6[bp]
20025 4ED1           30E4                       xor	ah,ah
20026 4ED3           50                         push	ax
20027                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20028 4ED4           8A46         FD            mov	al,-3[bp]
20029 4ED7           30E4                       xor	ah,ah
20030 4ED9           50                         push	ax
20031                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20032 4EDA           FF76         F8            push	-8[bp]
20033                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20034 4EDD           8A46         FB            mov	al,-5[bp]
20035 4EE0           30E4                       xor	ah,ah
20036 4EE2           50                         push	ax
20037                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20038 4EE3           FF76         F4            push	-$C[bp]
20039                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20040 4EE6           8A46         0A            mov	al,$A[bp]
20041 4EE9           30E4                       xor	ah,ah
20042 4EEB           50                         push	ax
20043                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20044 4EEC           E8         F8A1            call	_vgamem_fill_cga
20045 4EEF           83C4                   0C  add	sp,*$C
20046                                           !BCC_EOS
20047                                           ! 2146              else
20048                                           ! 2147               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20049 4EF2           EB           28            jmp .126
20050                       00004EF4            .123:
20051                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20052 4EF4           8A46         FD            mov	al,-3[bp]
20053 4EF7           30E4                       xor	ah,ah
20054 4EF9           50                         push	ax
20055                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20056 4EFA           FF76         F8            push	-8[bp]
20057                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20058 4EFD           8A46         FB            mov	al,-5[bp]
20059 4F00           30E4                       xor	ah,ah
20060 4F02           50                         push	ax
20061                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20062 4F03           8B46         F4            mov	ax,-$C[bp]
20063 4F06           2A46         04            sub	al,4[bp]
20064 4F09           80DC                   00  sbb	ah,*0
20065                                           ! Debug: list unsigned int = ax+0 (used reg = )
20066 4F0C           50                         push	ax
20067                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20068 4F0D           FF76         F4            push	-$C[bp]
20069                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20070 4F10           8A46         0A            mov	al,$A[bp]
20071 4F13           30E4                       xor	ah,ah
20072 4F15           50                         push	ax
20073                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20074 4F16           E8         F764            call	_vgamem_copy_cga
20075 4F19           83C4                   0C  add	sp,*$C
20076                                           !BCC_EOS
20077                                           ! 2148              if (i>rlr) break;
20078                       00004F1C            .126:
20079                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20080 4F1C           8A46         0C            mov	al,$C[bp]
20081 4F1F           30E4                       xor	ah,ah
20082 4F21           3B46         F4            cmp	ax,-$C[bp]
20083 4F24           73           02            jae 	.127
20084                       00004F26            .128:
20085 4F26           EB           14            jmp .11F
20086                                           !BCC_EOS
20087                                           ! 2149             }
20088                       00004F28            .127:
20089                                           ! 2150           }
20090                       00004F28            .120:
20091                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20092 4F28           8B46         F4            mov	ax,-$C[bp]
20093 4F2B           48                         dec	ax
20094 4F2C           8946         F4            mov	-$C[bp],ax
20095                       00004F2F            .121:
20096                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20097 4F2F           8A46         08            mov	al,8[bp]
20098 4F32           30E4                       xor	ah,ah
20099 4F34           3B46         F4            cmp	ax,-$C[bp]
20100 4F37   7703    E9         FF7B            blos	.122
20101                       00004F3C            .129:
20102                       00004F3C            .11F:
20103                                           ! 2151         }
20104                       00004F3C            .11E:
20105                                           ! 2152        break;
20106                       00004F3C            .110:
20107 4F3C           EB           17            jmp .E6
20108                                           !BCC_EOS
20109                                           ! 2153     }
20110                                           ! 2154   }
20111 4F3E           EB           15            jmp .E6
20112                       00004F40            .E8:
20113 4F40           2C                     02  sub	al,*2
20114 4F42   7503    E9         FE1B            beq 	.109
20115 4F47           2C                     01  sub	al,*1
20116 4F49   7503    E9         FC5A            beq 	.EA
20117 4F4E           2C                     01  sub	al,*1
20118 4F50   7503    E9         FC53            beq 	.E9
20119                       00004F55            .E6:
20120                       FFFFFFF0            ..FFFC	=	-$10
20121                                           ! 2155 }
20122                       00004F55            .E5:
20123 4F55           89EC                       mov	sp,bp
20124 4F57           5D                         pop	bp
20125 4F58           C3                         ret
20126                                           ! 2156 static void biosfn_read_char_attr (page,car)
20127                                           ! Register BX used in function biosfn_scroll
20128                                           ! 2157 Bit8u page;Bit16u *car;
20129                       00004F59            _biosfn_read_char_attr:
20130                                           !BCC_EOS
20131                                           !BCC_EOS
20132                                           ! 2158 {Bit16u ss=get_SS();
20133 4F59           55                         push	bp
20134 4F5A           89E5                       mov	bp,sp
20135 4F5C           4C                         dec	sp
20136 4F5D           4C                         dec	sp
20137                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20138 4F5E           E8         2C48            call	_get_SS
20139                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20140 4F61           8946         FE            mov	-2[bp],ax
20141                                           !BCC_EOS
20142                                           ! 2159  Bit8u xcurs,ycurs,mode,line;
20143                                           !BCC_EOS
20144                                           ! 2160  Bit16u nbcols,nbrows,address;
20145                                           !BCC_EOS
20146                                           ! 2161  Bit16u cursor,dummy;
20147                                           !BCC_EOS
20148                                           ! 2162  mode=read_byte(0x40,0x49);
20149 4F64           83C4                   F2  add	sp,*-$E
20150                                           ! Debug: list int = const $49 (used reg = )
20151 4F67           B8                   0049  mov	ax,*$49
20152 4F6A           50                         push	ax
20153                                           ! Debug: list int = const $40 (used reg = )
20154 4F6B           B8                   0040  mov	ax,*$40
20155 4F6E           50                         push	ax
20156                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20157 4F6F           E8         2BAB            call	_read_byte
20158 4F72           83C4                   04  add	sp,*4
20159                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20160 4F75           8846         FB            mov	-5[bp],al
20161                                           !BCC_EOS
20162                                           ! 2163  line=find_vga_entry(mode);
20163                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20164 4F78           8A46         FB            mov	al,-5[bp]
20165 4F7B           30E4                       xor	ah,ah
20166 4F7D           50                         push	ax
20167                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20168 4F7E           E8         2AB0            call	_find_vga_entry
20169 4F81           44                         inc	sp
20170 4F82           44                         inc	sp
20171                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20172 4F83           8846         FA            mov	-6[bp],al
20173                                           !BCC_EOS
20174                                           ! 2164  if(line==0xFF)return;
20175                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20176 4F86           8A46         FA            mov	al,-6[bp]
20177 4F89           3C                     FF  cmp	al,#$FF
20178 4F8B           75           04            jne 	.12A
20179                       00004F8D            .12B:
20180 4F8D           89EC                       mov	sp,bp
20181 4F8F           5D                         pop	bp
20182 4F90           C3                         ret
20183                                           !BCC_EOS
20184                                           ! 2165  biosfn_get_cursor_pos(page,&dummy,&cursor);
20185                       00004F91            .12A:
20186                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20187 4F91           8D5E         F2            lea	bx,-$E[bp]
20188 4F94           53                         push	bx
20189                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20190 4F95           8D5E         F0            lea	bx,-$10[bp]
20191 4F98           53                         push	bx
20192                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20193 4F99           8A46         04            mov	al,4[bp]
20194 4F9C           30E4                       xor	ah,ah
20195 4F9E           50                         push	ax
20196                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20197 4F9F           E8         F3AA            call	_biosfn_get_cursor_pos
20198 4FA2           83C4                   06  add	sp,*6
20199                                           !BCC_EOS
20200                                           ! 2166  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20201                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20202 4FA5           8A46         F2            mov	al,-$E[bp]
20203                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20204 4FA8           8846         FD            mov	-3[bp],al
20205                                           !BCC_EOS
20206                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20207 4FAB           8B46         F2            mov	ax,-$E[bp]
20208 4FAE           30C0                       xor	al,al
20209                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20210 4FB0           88E0                       mov	al,ah
20211 4FB2           30E4                       xor	ah,ah
20212                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20213 4FB4           8846         FC            mov	-4[bp],al
20214                                           !BCC_EOS
20215                                           ! 2167  nbrows=read_byte(0x40,0x84)+1;
20216                                           ! Debug: list int = const $84 (used reg = )
20217 4FB7           B8                   0084  mov	ax,#$84
20218 4FBA           50                         push	ax
20219                                           ! Debug: list int = const $40 (used reg = )
20220 4FBB           B8                   0040  mov	ax,*$40
20221 4FBE           50                         push	ax
20222                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20223 4FBF           E8         2B5B            call	_read_byte
20224 4FC2           83C4                   04  add	sp,*4
20225                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20226 4FC5           30E4                       xor	ah,ah
20227                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20228 4FC7           40                         inc	ax
20229 4FC8           8946         F6            mov	-$A[bp],ax
20230                                           !BCC_EOS
20231                                           ! 2168  nbcols=read_word(0x40,0x4A);
20232                                           ! Debug: list int = const $4A (used reg = )
20233 4FCB           B8                   004A  mov	ax,*$4A
20234 4FCE           50                         push	ax
20235                                           ! Debug: list int = const $40 (used reg = )
20236 4FCF           B8                   0040  mov	ax,*$40
20237 4FD2           50                         push	ax
20238                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20239 4FD3           E8         2B5A            call	_read_word
20240 4FD6           83C4                   04  add	sp,*4
20241                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20242 4FD9           8946         F8            mov	-8[bp],ax
20243                                           !BCC_EOS
20244                                           ! 2169  if(vga_modes[line].class==0x00)
20245                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20246 4FDC           8A46         FA            mov	al,-6[bp]
20247 4FDF           30E4                       xor	ah,ah
20248 4FE1           B1                     03  mov	cl,*3
20249 4FE3           D3E0                       shl	ax,cl
20250 4FE5           89C3                       mov	bx,ax
20251 4FE7           81C3                 01B6  add	bx,#_vga_modes
20252                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20253 4FEB           8A47         01            mov	al,1[bx]
20254 4FEE           84C0                       test	al,al
20255 4FF0           75           5E            jne 	.12C
20256                       00004FF2            .12D:
20257                                           ! 2170   {
20258                                           ! 2171    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20259                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20260 4FF2           8A46         FC            mov	al,-4[bp]
20261 4FF5           30E4                       xor	ah,ah
20262 4FF7           8B4E         F8            mov	cx,-8[bp]
20263 4FFA           F7E9                       imul	cx
20264                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20265                                           ! Debug: expression subtree swapping
20266 4FFC           0246         FD            add	al,-3[bp]
20267 4FFF           80D4                   00  adc	ah,*0
20268                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20269 5002           D1E0                       shl	ax,*1
20270 5004           50                         push	ax
20271                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20272 5005           8B46         F8            mov	ax,-8[bp]
20273 5008           8B4E         F6            mov	cx,-$A[bp]
20274 500B           F7E9                       imul	cx
20275                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20276 500D           D1E0                       shl	ax,*1
20277                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20278 500F           0C                     FF  or	al,#$FF
20279                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20280                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20281 5011           89C3                       mov	bx,ax
20282 5013           8A46         04            mov	al,4[bp]
20283 5016           30E4                       xor	ah,ah
20284 5018           93                         xchg	ax,bx
20285 5019           40                         inc	ax
20286 501A           89D9                       mov	cx,bx
20287 501C           F7E9                       imul	cx
20288                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20289 501E           0346         EE            add	ax,-$12[bp]
20290 5021           44                         inc	sp
20291 5022           44                         inc	sp
20292                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20293 5023           8946         F4            mov	-$C[bp],ax
20294                                           !BCC_EOS
20295                                           ! 2172    write_word(ss,car,read_word(vga_modes[line].sstart,addres
20296                                           ! 2172 s));
20297                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20298 5026           FF76         F4            push	-$C[bp]
20299                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20300 5029           8A46         FA            mov	al,-6[bp]
20301 502C           30E4                       xor	ah,ah
20302 502E           B1                     03  mov	cl,*3
20303 5030           D3E0                       shl	ax,cl
20304 5032           89C3                       mov	bx,ax
20305 5034           81C3                 01B6  add	bx,#_vga_modes
20306                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20307 5038           FF77         04            push	4[bx]
20308                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20309 503B           E8         2AF2            call	_read_word
20310 503E           83C4                   04  add	sp,*4
20311                                           ! Debug: list unsigned short = ax+0 (used reg = )
20312 5041           50                         push	ax
20313                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20314 5042           FF76         06            push	6[bp]
20315                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20316 5045           FF76         FE            push	-2[bp]
20317                                           ! Debug: func () void = write_word+0 (used reg = )
20318 5048           E8         2B10            call	_write_word
20319 504B           83C4                   06  add	sp,*6
20320                                           !BCC_EOS
20321                                           ! 2173   }
20322                                           ! 2174  else
20323                                           ! 2175   {
20324 504E           EB           00            jmp .12E
20325                       00005050            .12C:
20326                                           ! 2176   }
20327                                           ! 2177 }
20328                       00005050            .12E:
20329 5050           89EC                       mov	sp,bp
20330 5052           5D                         pop	bp
20331 5053           C3                         ret
20332                                           ! 2178 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20333                                           ! Register BX used in function biosfn_read_char_attr
20334                                           ! 2179 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20335                       00005054            _write_gfx_char_pl4:
20336                                           !BCC_EOS
20337                                           !BCC_EOS
20338                                           !BCC_EOS
20339                                           !BCC_EOS
20340                                           !BCC_EOS
20341                                           !BCC_EOS
20342                                           ! 2180 {
20343                                           ! 2181  Bit8u i,j,mask;
20344                                           !BCC_EOS
20345                                           ! 2182  Bit8u *fdata;
20346                                           !BCC_EOS
20347                                           ! 2183  Bit16u addr,dest,src;
20348                                           !BCC_EOS
20349                                           ! 2184  switch(cheight)
20350 5054           55                         push	bp
20351 5055           89E5                       mov	bp,sp
20352 5057           83C4                   F4  add	sp,*-$C
20353 505A           8A46         0E            mov	al,$E[bp]
20354                                           ! 2185   {case 14:
20355 505D           EB           18            jmp .131
20356                                           ! 2186     fdata = &vgafont14;
20357                       0000505F            .132:
20358                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20359 505F           BB                   171A  mov	bx,#_vgafont14
20360 5062           895E         FA            mov	-6[bp],bx
20361                                           !BCC_EOS
20362                                           ! 2187     break;
20363 5065           EB           1A            jmp .12F
20364                                           !BCC_EOS
20365                                           ! 2188    case 16:
20366                                           ! 2189     fdata = &vgafont16;
20367                       00005067            .133:
20368                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20369 5067           BB                   251A  mov	bx,#_vgafont16
20370 506A           895E         FA            mov	-6[bp],bx
20371                                           !BCC_EOS
20372                                           ! 2190     break;
20373 506D           EB           12            jmp .12F
20374                                           !BCC_EOS
20375                                           ! 2191    default:
20376                                           ! 2192     fdata = &vgafont8;
20377                       0000506F            .134:
20378                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20379 506F           BB                   0F1A  mov	bx,#_vgafont8
20380 5072           895E         FA            mov	-6[bp],bx
20381                                           !BCC_EOS
20382                                           ! 2193   }
20383                                           ! 2194  addr=xcurs+ycurs*cheight*nbcols;
20384 5075           EB           0A            jmp .12F
20385                       00005077            .131:
20386 5077           2C                     0E  sub	al,*$E
20387 5079           74           E4            je 	.132
20388 507B           2C                     02  sub	al,*2
20389 507D           74           E8            je 	.133
20390 507F           EB           EE            jmp	.134
20391                       00005081            .12F:
20392                       FFFFFFF2            ..FFFB	=	-$E
20393                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20394 5081           8A46         0E            mov	al,$E[bp]
20395 5084           30E4                       xor	ah,ah
20396 5086           89C3                       mov	bx,ax
20397 5088           8A46         0A            mov	al,$A[bp]
20398 508B           30E4                       xor	ah,ah
20399 508D           89D9                       mov	cx,bx
20400 508F           F7E9                       imul	cx
20401                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20402 5091           89C3                       mov	bx,ax
20403 5093           8A46         0C            mov	al,$C[bp]
20404 5096           30E4                       xor	ah,ah
20405 5098           93                         xchg	ax,bx
20406 5099           89D9                       mov	cx,bx
20407 509B           F7E9                       imul	cx
20408                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20409                                           ! Debug: expression subtree swapping
20410 509D           0246         08            add	al,8[bp]
20411 50A0           80D4                   00  adc	ah,*0
20412                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20413 50A3           8946         F8            mov	-8[bp],ax
20414                                           !BCC_EOS
20415                                           ! 2195  src = car * cheight;
20416                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20417 50A6           8A46         0E            mov	al,$E[bp]
20418 50A9           30E4                       xor	ah,ah
20419 50AB           89C3                       mov	bx,ax
20420 50AD           8A46         04            mov	al,4[bp]
20421 50B0           30E4                       xor	ah,ah
20422 50B2           89D9                       mov	cx,bx
20423 50B4           F7E9                       imul	cx
20424                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20425 50B6           8946         F4            mov	-$C[bp],ax
20426                                           !BCC_EOS
20427                                           ! 2196  outw(0x3c4, 0x0f02);
20428                                           ! Debug: list int = const $F02 (used reg = )
20429 50B9           B8                   0F02  mov	ax,#$F02
20430 50BC           50                         push	ax
20431                                           ! Debug: list int = const $3C4 (used reg = )
20432 50BD           B8                   03C4  mov	ax,#$3C4
20433 50C0           50                         push	ax
20434                                           ! Debug: func () void = outw+0 (used reg = )
20435 50C1           E8         2AD5            call	_outw
20436 50C4           83C4                   04  add	sp,*4
20437                                           !BCC_EOS
20438                                           ! 2197  outw(0x3ce, 0x0205);
20439                                           ! Debug: list int = const $205 (used reg = )
20440 50C7           B8                   0205  mov	ax,#$205
20441 50CA           50                         push	ax
20442                                           ! Debug: list int = const $3CE (used reg = )
20443 50CB           B8                   03CE  mov	ax,#$3CE
20444 50CE           50                         push	ax
20445                                           ! Debug: func () void = outw+0 (used reg = )
20446 50CF           E8         2AC7            call	_outw
20447 50D2           83C4                   04  add	sp,*4
20448                                           !BCC_EOS
20449                                           ! 2198  if(attr&0x80)
20450                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20451 50D5           8A46         06            mov	al,6[bp]
20452 50D8           24                     80  and	al,#$80
20453 50DA           84C0                       test	al,al
20454 50DC           74           10            je  	.135
20455                       000050DE            .136:
20456                                           ! 2199   {
20457                                           ! 2200    outw(0x3ce, 0x1803);
20458                                           ! Debug: list int = const $1803 (used reg = )
20459 50DE           B8                   1803  mov	ax,#$1803
20460 50E1           50                         push	ax
20461                                           ! Debug: list int = const $3CE (used reg = )
20462 50E2           B8                   03CE  mov	ax,#$3CE
20463 50E5           50                         push	ax
20464                                           ! Debug: func () void = outw+0 (used reg = )
20465 50E6           E8         2AB0            call	_outw
20466 50E9           83C4                   04  add	sp,*4
20467                                           !BCC_EOS
20468                                           ! 2201   }
20469                                           ! 2202  else
20470                                           ! 2203   {
20471 50EC           EB           0E            jmp .137
20472                       000050EE            .135:
20473                                           ! 2204    outw(0x3ce, 0x0003);
20474                                           ! Debug: list int = const 3 (used reg = )
20475 50EE           B8                   0003  mov	ax,*3
20476 50F1           50                         push	ax
20477                                           ! Debug: list int = const $3CE (used reg = )
20478 50F2           B8                   03CE  mov	ax,#$3CE
20479 50F5           50                         push	ax
20480                                           ! Debug: func () void = outw+0 (used reg = )
20481 50F6           E8         2AA0            call	_outw
20482 50F9           83C4                   04  add	sp,*4
20483                                           !BCC_EOS
20484                                           ! 2205   }
20485                                           ! 2206  for(i=0;i<cheight;i++)
20486                       000050FC            .137:
20487                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20488 50FC           30C0                       xor	al,al
20489 50FE           8846         FF            mov	-1[bp],al
20490                                           !BCC_EOS
20491                                           !BCC_EOS
20492                                           ! 2207   {
20493 5101           E9         00A7            br 	.13A
20494                       00005104            .13B:
20495                                           ! 2208    dest=addr+i*nbcols;
20496                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20497 5104           8A46         0C            mov	al,$C[bp]
20498 5107           30E4                       xor	ah,ah
20499 5109           89C3                       mov	bx,ax
20500 510B           8A46         FF            mov	al,-1[bp]
20501 510E           30E4                       xor	ah,ah
20502 5110           89D9                       mov	cx,bx
20503 5112           F7E9                       imul	cx
20504                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20505                                           ! Debug: expression subtree swapping
20506 5114           0346         F8            add	ax,-8[bp]
20507                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20508 5117           8946         F6            mov	-$A[bp],ax
20509                                           !BCC_EOS
20510                                           ! 2209    for(j=0;j<8;j++)
20511                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20512 511A           30C0                       xor	al,al
20513 511C           8846         FE            mov	-2[bp],al
20514                                           !BCC_EOS
20515                                           !BCC_EOS
20516                                           ! 2210     {
20517 511F           EB           79            jmp .13E
20518                       00005121            .13F:
20519                                           ! 2211      mask=0x80>>j;
20520                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
20521 5121           8A46         FE            mov	al,-2[bp]
20522 5124           30E4                       xor	ah,ah
20523 5126           89C3                       mov	bx,ax
20524 5128           B8                   0080  mov	ax,#$80
20525 512B           89D9                       mov	cx,bx
20526 512D           D3F8                       sar	ax,cl
20527                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
20528 512F           8846         FD            mov	-3[bp],al
20529                                           !BCC_EOS
20530                                           ! 2212      outw(0x3ce, (mask << 8) | 0x08);
20531                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
20532 5132           8A46         FD            mov	al,-3[bp]
20533 5135           30E4                       xor	ah,ah
20534 5137           88C4                       mov	ah,al
20535 5139           30C0                       xor	al,al
20536                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
20537 513B           0C                     08  or	al,*8
20538                                           ! Debug: list unsigned int = ax+0 (used reg = )
20539 513D           50                         push	ax
20540                                           ! Debug: list int = const $3CE (used reg = )
20541 513E           B8                   03CE  mov	ax,#$3CE
20542 5141           50                         push	ax
20543                                           ! Debug: func () void = outw+0 (used reg = )
20544 5142           E8         2A54            call	_outw
20545 5145           83C4                   04  add	sp,*4
20546                                           !BCC_EOS
20547                                           ! 2213      read_byte(0xa000,dest);
20548                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20549 5148           FF76         F6            push	-$A[bp]
20550                                           ! Debug: list unsigned int = const $A000 (used reg = )
20551 514B           B8                   A000  mov	ax,#$A000
20552 514E           50                         push	ax
20553                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20554 514F           E8         29CB            call	_read_byte
20555 5152           83C4                   04  add	sp,*4
20556                                           !BCC_EOS
20557                                           ! 2214      if(fdata[src+i]&mask)
20558                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20559 5155           8B46         F4            mov	ax,-$C[bp]
20560 5158           0246         FF            add	al,-1[bp]
20561 515B           80D4                   00  adc	ah,*0
20562                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20563 515E           0346         FA            add	ax,-6[bp]
20564 5161           89C3                       mov	bx,ax
20565                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20566 5163           8A07                       mov	al,[bx]
20567 5165           2246         FD            and	al,-3[bp]
20568 5168           84C0                       test	al,al
20569 516A           74           17            je  	.140
20570                       0000516C            .141:
20571                                           ! 2215       {
20572                                           ! 2216        write_byte(0xa000,dest,attr&0x0f);
20573                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
20574 516C           8A46         06            mov	al,6[bp]
20575 516F           24                     0F  and	al,*$F
20576                                           ! Debug: list unsigned char = al+0 (used reg = )
20577 5171           30E4                       xor	ah,ah
20578 5173           50                         push	ax
20579                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20580 5174           FF76         F6            push	-$A[bp]
20581                                           ! Debug: list unsigned int = const $A000 (used reg = )
20582 5177           B8                   A000  mov	ax,#$A000
20583 517A           50                         push	ax
20584                                           ! Debug: func () void = write_byte+0 (used reg = )
20585 517B           E8         29C5            call	_write_byte
20586 517E           83C4                   06  add	sp,*6
20587                                           !BCC_EOS
20588                                           ! 2217       }
20589                                           ! 2218      else
20590                                           ! 2219       {
20591 5181           EB           10            jmp .142
20592                       00005183            .140:
20593                                           ! 2220        write_byte(0xa000,dest,0x00);
20594                                           ! Debug: list int = const 0 (used reg = )
20595 5183           31C0                       xor	ax,ax
20596 5185           50                         push	ax
20597                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20598 5186           FF76         F6            push	-$A[bp]
20599                                           ! Debug: list unsigned int = const $A000 (used reg = )
20600 5189           B8                   A000  mov	ax,#$A000
20601 518C           50                         push	ax
20602                                           ! Debug: func () void = write_byte+0 (used reg = )
20603 518D           E8         29B3            call	_write_byte
20604 5190           83C4                   06  add	sp,*6
20605                                           !BCC_EOS
20606                                           ! 2221       }
20607                                           ! 2222     }
20608                       00005193            .142:
20609                                           ! 2223   }
20610                       00005193            .13D:
20611                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20612 5193           8A46         FE            mov	al,-2[bp]
20613 5196           40                         inc	ax
20614 5197           8846         FE            mov	-2[bp],al
20615                       0000519A            .13E:
20616                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20617 519A           8A46         FE            mov	al,-2[bp]
20618 519D           3C                     08  cmp	al,*8
20619 519F   7303    E9         FF7D            blo 	.13F
20620                       000051A4            .143:
20621                       000051A4            .13C:
20622                                           ! 2224 #asm
20623                       000051A4            .139:
20624                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
20625 51A4           8A46         FF            mov	al,-1[bp]
20626 51A7           40                         inc	ax
20627 51A8           8846         FF            mov	-1[bp],al
20628                       000051AB            .13A:
20629                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
20630 51AB           8A46         FF            mov	al,-1[bp]
20631 51AE           3A46         0E            cmp	al,$E[bp]
20632 51B1   7303    E9         FF4E            blo 	.13B
20633                       000051B6            .144:
20634                       000051B6            .138:
20635                                           !BCC_EOS
20636                                           !BCC_ASM
20637                       0000000A            _write_gfx_char_pl4.j	set	$A
20638                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
20639                       00000006            _write_gfx_char_pl4.fdata	set	6
20640                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
20641                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
20642                       0000000E            .write_gfx_char_pl4.cheight	set	$E
20643                       00000018            _write_gfx_char_pl4.nbcols	set	$18
20644                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
20645                       0000000B            _write_gfx_char_pl4.i	set	$B
20646                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
20647                       00000016            _write_gfx_char_pl4.ycurs	set	$16
20648                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
20649                       00000009            _write_gfx_char_pl4.mask	set	9
20650                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
20651                       00000002            _write_gfx_char_pl4.dest	set	2
20652                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
20653                       00000014            _write_gfx_char_pl4.xcurs	set	$14
20654                       00000008            .write_gfx_char_pl4.xcurs	set	8
20655                       00000000            _write_gfx_char_pl4.src	set	0
20656                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
20657                       00000012            _write_gfx_char_pl4.attr	set	$12
20658                       00000006            .write_gfx_char_pl4.attr	set	6
20659                       00000010            _write_gfx_char_pl4.car	set	$10
20660                       00000004            .write_gfx_char_pl4.car	set	4
20661                       00000004            _write_gfx_char_pl4.addr	set	4
20662                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
20663 51B6           BA                   03CE    mov dx, # 0x3ce
20664 51B9           B8                   FF08    mov ax, #0xff08
20665 51BC           EF                           out dx, ax
20666 51BD           B8                   0005    mov ax, #0x0005
20667 51C0           EF                           out dx, ax
20668 51C1           B8                   0003    mov ax, #0x0003
20669 51C4           EF                           out dx, ax
20670                                           ! 2232 endasm
20671                                           !BCC_ENDASM
20672                                           !BCC_EOS
20673                                           ! 2233 }
20674 51C5           89EC                       mov	sp,bp
20675 51C7           5D                         pop	bp
20676 51C8           C3                         ret
20677                                           ! 2234 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
20678                                           ! Register BX used in function write_gfx_char_pl4
20679                                           ! 2235 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
20680                       000051C9            _write_gfx_char_cga:
20681                                           !BCC_EOS
20682                                           !BCC_EOS
20683                                           !BCC_EOS
20684                                           !BCC_EOS
20685                                           !BCC_EOS
20686                                           !BCC_EOS
20687                                           ! 2236 {
20688                                           ! 2237  Bit8u i,j,mask,data;
20689                                           !BCC_EOS
20690                                           ! 2238  Bit8u *fdata;
20691                                           !BCC_EOS
20692                                           ! 2239  Bit16u addr,dest,src;
20693                                           !BCC_EOS
20694                                           ! 2240  fdata = &vgafont8;
20695 51C9           55                         push	bp
20696 51CA           89E5                       mov	bp,sp
20697 51CC           83C4                   F4  add	sp,*-$C
20698                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20699 51CF           BB                   0F1A  mov	bx,#_vgafont8
20700 51D2           895E         FA            mov	-6[bp],bx
20701                                           !BCC_EOS
20702                                           ! 2241  addr=(xcurs*bpp)+ycurs*320;
20703                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
20704 51D5           8A46         0A            mov	al,$A[bp]
20705 51D8           30E4                       xor	ah,ah
20706 51DA           B9                   0140  mov	cx,#$140
20707 51DD           F7E9                       imul	cx
20708 51DF           50                         push	ax
20709                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
20710 51E0           8A46         0E            mov	al,$E[bp]
20711 51E3           30E4                       xor	ah,ah
20712 51E5           89C3                       mov	bx,ax
20713 51E7           8A46         08            mov	al,8[bp]
20714 51EA           30E4                       xor	ah,ah
20715 51EC           89D9                       mov	cx,bx
20716 51EE           F7E9                       imul	cx
20717                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
20718 51F0           0346         F2            add	ax,-$E[bp]
20719 51F3           44                         inc	sp
20720 51F4           44                         inc	sp
20721                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20722 51F5           8946         F8            mov	-8[bp],ax
20723                                           !BCC_EOS
20724                                           ! 2242  src = car * 8;
20725                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
20726 51F8           8A46         04            mov	al,4[bp]
20727 51FB           30E4                       xor	ah,ah
20728 51FD           B1                     03  mov	cl,*3
20729 51FF           D3E0                       shl	ax,cl
20730                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20731 5201           8946         F4            mov	-$C[bp],ax
20732                                           !BCC_EOS
20733                                           ! 2243  for(i=0;i<8;i++)
20734                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20735 5204           30C0                       xor	al,al
20736 5206           8846         FF            mov	-1[bp],al
20737                                           !BCC_EOS
20738                                           !BCC_EOS
20739                                           ! 2244   {
20740 5209           E9         01B5            br 	.147
20741                       0000520C            .148:
20742                                           ! 2245    dest=addr+(i>>1)*80;
20743                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20744 520C           8A46         FF            mov	al,-1[bp]
20745 520F           30E4                       xor	ah,ah
20746 5211           D1E8                       shr	ax,*1
20747                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
20748 5213           B9                   0050  mov	cx,*$50
20749 5216           F7E9                       imul	cx
20750                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20751                                           ! Debug: expression subtree swapping
20752 5218           0346         F8            add	ax,-8[bp]
20753                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20754 521B           8946         F6            mov	-$A[bp],ax
20755                                           !BCC_EOS
20756                                           ! 2246    if (i & 1) dest += 0x2000;
20757                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20758 521E           8A46         FF            mov	al,-1[bp]
20759 5221           24                     01  and	al,*1
20760 5223           84C0                       test	al,al
20761 5225           74           09            je  	.149
20762                       00005227            .14A:
20763                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
20764 5227           8B46         F6            mov	ax,-$A[bp]
20765 522A           05                   2000  add	ax,#$2000
20766 522D           8946         F6            mov	-$A[bp],ax
20767                                           !BCC_EOS
20768                                           ! 2247    mask = 0x80;
20769                       00005230            .149:
20770                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
20771 5230           B0                     80  mov	al,#$80
20772 5232           8846         FD            mov	-3[bp],al
20773                                           !BCC_EOS
20774                                           ! 2248    if (bpp == 1)
20775                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
20776 5235           8A46         0E            mov	al,$E[bp]
20777 5238           3C                     01  cmp	al,*1
20778 523A   7403    E9         00B3            bne 	.14B
20779                       0000523F            .14C:
20780                                           ! 2249     {
20781                                           ! 2250      if (attr & 0x80)
20782                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20783 523F           8A46         06            mov	al,6[bp]
20784 5242           24                     80  and	al,#$80
20785 5244           84C0                       test	al,al
20786 5246           74           12            je  	.14D
20787                       00005248            .14E:
20788                                           ! 2251       {
20789                                           ! 2252        data = read_byte(0xb800,dest);
20790                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20791 5248           FF76         F6            push	-$A[bp]
20792                                           ! Debug: list unsigned int = const $B800 (used reg = )
20793 524B           B8                   B800  mov	ax,#$B800
20794 524E           50                         push	ax
20795                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20796 524F           E8         28CB            call	_read_byte
20797 5252           83C4                   04  add	sp,*4
20798                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20799 5255           8846         FC            mov	-4[bp],al
20800                                           !BCC_EOS
20801                                           ! 2253       }
20802                                           ! 2254      else
20803                                           ! 2255       {
20804 5258           EB           05            jmp .14F
20805                       0000525A            .14D:
20806                                           ! 2256        data = 0x00;
20807                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20808 525A           30C0                       xor	al,al
20809 525C           8846         FC            mov	-4[bp],al
20810                                           !BCC_EOS
20811                                           ! 2257       }
20812                                           ! 2258      for(j=0;j<8;j++)
20813                       0000525F            .14F:
20814                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20815 525F           30C0                       xor	al,al
20816 5261           8846         FE            mov	-2[bp],al
20817                                           !BCC_EOS
20818                                           !BCC_EOS
20819                                           ! 2259       {
20820 5264           EB           6F            jmp .152
20821                       00005266            .153:
20822                                           ! 2260        if (fdata[src+i] & mask)
20823                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20824 5266           8B46         F4            mov	ax,-$C[bp]
20825 5269           0246         FF            add	al,-1[bp]
20826 526C           80D4                   00  adc	ah,*0
20827                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20828 526F           0346         FA            add	ax,-6[bp]
20829 5272           89C3                       mov	bx,ax
20830                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20831 5274           8A07                       mov	al,[bx]
20832 5276           2246         FD            and	al,-3[bp]
20833 5279           84C0                       test	al,al
20834 527B           74           47            je  	.154
20835                       0000527D            .155:
20836                                           ! 2261         {
20837                                           ! 2262          if (attr & 0x80)
20838                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20839 527D           8A46         06            mov	al,6[bp]
20840 5280           24                     80  and	al,#$80
20841 5282           84C0                       test	al,al
20842 5284           74           20            je  	.156
20843                       00005286            .157:
20844                                           ! 2263           {
20845                                           ! 2264            data ^= (attr & 0x01) << (7-j);
20846                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
20847 5286           B8                   0007  mov	ax,*7
20848 5289           2A46         FE            sub	al,-2[bp]
20849 528C           80DC                   00  sbb	ah,*0
20850 528F           50                         push	ax
20851                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
20852 5290           8A46         06            mov	al,6[bp]
20853 5293           24                     01  and	al,*1
20854                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
20855 5295           30E4                       xor	ah,ah
20856 5297           8B4E         F2            mov	cx,-$E[bp]
20857 529A           D3E0                       shl	ax,cl
20858 529C           44                         inc	sp
20859 529D           44                         inc	sp
20860                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
20861 529E           3246         FC            xor	al,-4[bp]
20862 52A1           8846         FC            mov	-4[bp],al
20863                                           !BCC_EOS
20864                                           ! 2265           }
20865                                           ! 2266          else
20866                                           ! 2267           {
20867 52A4           EB           1E            jmp .158
20868                       000052A6            .156:
20869                                           ! 2268            data |= (attr & 0x01) << (7-j);
20870                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
20871 52A6           B8                   0007  mov	ax,*7
20872 52A9           2A46         FE            sub	al,-2[bp]
20873 52AC           80DC                   00  sbb	ah,*0
20874 52AF           50                         push	ax
20875                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
20876 52B0           8A46         06            mov	al,6[bp]
20877 52B3           24                     01  and	al,*1
20878                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
20879 52B5           30E4                       xor	ah,ah
20880 52B7           8B4E         F2            mov	cx,-$E[bp]
20881 52BA           D3E0                       shl	ax,cl
20882 52BC           44                         inc	sp
20883 52BD           44                         inc	sp
20884                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
20885 52BE           0A46         FC            or	al,-4[bp]
20886 52C1           8846         FC            mov	-4[bp],al
20887                                           !BCC_EOS
20888                                           ! 2269           }
20889                                           ! 2270         }
20890                       000052C4            .158:
20891                                           ! 2271        mask >>= 1;
20892                       000052C4            .154:
20893                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
20894 52C4           8A46         FD            mov	al,-3[bp]
20895 52C7           30E4                       xor	ah,ah
20896 52C9           D1E8                       shr	ax,*1
20897 52CB           8846         FD            mov	-3[bp],al
20898                                           !BCC_EOS
20899                                           ! 2272       }
20900                                           ! 2273      write_byte(0xb800,dest,data);
20901                       000052CE            .151:
20902                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20903 52CE           8A46         FE            mov	al,-2[bp]
20904 52D1           40                         inc	ax
20905 52D2           8846         FE            mov	-2[bp],al
20906                       000052D5            .152:
20907                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20908 52D5           8A46         FE            mov	al,-2[bp]
20909 52D8           3C                     08  cmp	al,*8
20910 52DA           72           8A            jb 	.153
20911                       000052DC            .159:
20912                       000052DC            .150:
20913                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
20914 52DC           8A46         FC            mov	al,-4[bp]
20915 52DF           30E4                       xor	ah,ah
20916 52E1           50                         push	ax
20917                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20918 52E2           FF76         F6            push	-$A[bp]
20919                                           ! Debug: list unsigned int = const $B800 (used reg = )
20920 52E5           B8                   B800  mov	ax,#$B800
20921 52E8           50                         push	ax
20922                                           ! Debug: func () void = write_byte+0 (used reg = )
20923 52E9           E8         2857            call	_write_byte
20924 52EC           83C4                   06  add	sp,*6
20925                                           !BCC_EOS
20926                                           ! 2274     }
20927                                           ! 2275    else
20928                                           ! 2276     {
20929 52EF           E9         00C8            br 	.15A
20930                       000052F2            .14B:
20931                                           ! 2277      while (mask > 0)
20932                                           ! 2278       {
20933 52F2           E9         00BB            br 	.15C
20934                       000052F5            .15D:
20935                                           ! 2279        if (attr & 0x80)
20936                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20937 52F5           8A46         06            mov	al,6[bp]
20938 52F8           24                     80  and	al,#$80
20939 52FA           84C0                       test	al,al
20940 52FC           74           12            je  	.15E
20941                       000052FE            .15F:
20942                                           ! 2280         {
20943                                           ! 2281          data = read_byte(0xb800,dest);
20944                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20945 52FE           FF76         F6            push	-$A[bp]
20946                                           ! Debug: list unsigned int = const $B800 (used reg = )
20947 5301           B8                   B800  mov	ax,#$B800
20948 5304           50                         push	ax
20949                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20950 5305           E8         2815            call	_read_byte
20951 5308           83C4                   04  add	sp,*4
20952                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20953 530B           8846         FC            mov	-4[bp],al
20954                                           !BCC_EOS
20955                                           ! 2282         }
20956                                           ! 2283        else
20957                                           ! 2284         {
20958 530E           EB           05            jmp .160
20959                       00005310            .15E:
20960                                           ! 2285          data = 0x00;
20961                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20962 5310           30C0                       xor	al,al
20963 5312           8846         FC            mov	-4[bp],al
20964                                           !BCC_EOS
20965                                           ! 2286         }
20966                                           ! 2287        for(j=0;j<4;j++)
20967                       00005315            .160:
20968                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20969 5315           30C0                       xor	al,al
20970 5317           8846         FE            mov	-2[bp],al
20971                                           !BCC_EOS
20972                                           !BCC_EOS
20973                                           ! 2288         {
20974 531A           EB           73            jmp .163
20975                       0000531C            .164:
20976                                           ! 2289       
20977                                           ! 2289    if (fdata[src+i] & mask)
20978                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20979 531C           8B46         F4            mov	ax,-$C[bp]
20980 531F           0246         FF            add	al,-1[bp]
20981 5322           80D4                   00  adc	ah,*0
20982                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20983 5325           0346         FA            add	ax,-6[bp]
20984 5328           89C3                       mov	bx,ax
20985                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20986 532A           8A07                       mov	al,[bx]
20987 532C           2246         FD            and	al,-3[bp]
20988 532F           84C0                       test	al,al
20989 5331           74           4B            je  	.165
20990                       00005333            .166:
20991                                           ! 2290           {
20992                                           ! 2291            if (attr & 0x80)
20993                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20994 5333           8A46         06            mov	al,6[bp]
20995 5336           24                     80  and	al,#$80
20996 5338           84C0                       test	al,al
20997 533A           74           22            je  	.167
20998                       0000533C            .168:
20999                                           ! 2292             {
21000                                           ! 2293              data ^= (attr & 0x03) << ((3-j)*2);
21001                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21002 533C           B8                   0003  mov	ax,*3
21003 533F           2A46         FE            sub	al,-2[bp]
21004 5342           80DC                   00  sbb	ah,*0
21005                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21006 5345           D1E0                       shl	ax,*1
21007 5347           50                         push	ax
21008                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21009 5348           8A46         06            mov	al,6[bp]
21010 534B           24                     03  and	al,*3
21011                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21012 534D           30E4                       xor	ah,ah
21013 534F           8B4E         F2            mov	cx,-$E[bp]
21014 5352           D3E0                       shl	ax,cl
21015 5354           44                         inc	sp
21016 5355           44                         inc	sp
21017                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21018 5356           3246         FC            xor	al,-4[bp]
21019 5359           8846         FC            mov	-4[bp],al
21020                                           !BCC_EOS
21021                                           ! 2294             }
21022                                           ! 2295            else
21023                                           ! 2296             {
21024 535C           EB           20            jmp .169
21025                       0000535E            .167:
21026                                           ! 2297              data |= (attr & 0x03) << ((3-j)*2);
21027                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21028 535E           B8                   0003  mov	ax,*3
21029 5361           2A46         FE            sub	al,-2[bp]
21030 5364           80DC                   00  sbb	ah,*0
21031                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21032 5367           D1E0                       shl	ax,*1
21033 5369           50                         push	ax
21034                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21035 536A           8A46         06            mov	al,6[bp]
21036 536D           24                     03  and	al,*3
21037                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21038 536F           30E4                       xor	ah,ah
21039 5371           8B4E         F2            mov	cx,-$E[bp]
21040 5374           D3E0                       shl	ax,cl
21041 5376           44                         inc	sp
21042 5377           44                         inc	sp
21043                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21044 5378           0A46         FC            or	al,-4[bp]
21045 537B           8846         FC            mov	-4[bp],al
21046                                           !BCC_EOS
21047                                           ! 2298             }
21048                                           ! 2299           }
21049                       0000537E            .169:
21050                                           ! 2300          mask >>= 1;
21051                       0000537E            .165:
21052                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21053 537E           8A46         FD            mov	al,-3[bp]
21054 5381           30E4                       xor	ah,ah
21055 5383           D1E8                       shr	ax,*1
21056 5385           8846         FD            mov	-3[bp],al
21057                                           !BCC_EOS
21058                                           ! 2301         }
21059                                           ! 2302        write_byte(0xb800,dest,data);
21060                       00005388            .162:
21061                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21062 5388           8A46         FE            mov	al,-2[bp]
21063 538B           40                         inc	ax
21064 538C           8846         FE            mov	-2[bp],al
21065                       0000538F            .163:
21066                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21067 538F           8A46         FE            mov	al,-2[bp]
21068 5392           3C                     04  cmp	al,*4
21069 5394           72           86            jb 	.164
21070                       00005396            .16A:
21071                       00005396            .161:
21072                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21073 5396           8A46         FC            mov	al,-4[bp]
21074 5399           30E4                       xor	ah,ah
21075 539B           50                         push	ax
21076                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21077 539C           FF76         F6            push	-$A[bp]
21078                                           ! Debug: list unsigned int = const $B800 (used reg = )
21079 539F           B8                   B800  mov	ax,#$B800
21080 53A2           50                         push	ax
21081                                           ! Debug: func () void = write_byte+0 (used reg = )
21082 53A3           E8         279D            call	_write_byte
21083 53A6           83C4                   06  add	sp,*6
21084                                           !BCC_EOS
21085                                           ! 2303        dest += 1;
21086                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21087 53A9           8B46         F6            mov	ax,-$A[bp]
21088 53AC           40                         inc	ax
21089 53AD           8946         F6            mov	-$A[bp],ax
21090                                           !BCC_EOS
21091                                           ! 2304       }
21092                                           ! 2305     }
21093                       000053B0            .15C:
21094                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21095 53B0           8A46         FD            mov	al,-3[bp]
21096 53B3           84C0                       test	al,al
21097 53B5   7403    E9         FF3B            bne 	.15D
21098                       000053BA            .16B:
21099                       000053BA            .15B:
21100                                           ! 2306   }
21101                       000053BA            .15A:
21102                                           ! 2307 }
21103                       000053BA            .146:
21104                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21105 53BA           8A46         FF            mov	al,-1[bp]
21106 53BD           40                         inc	ax
21107 53BE           8846         FF            mov	-1[bp],al
21108                       000053C1            .147:
21109                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21110 53C1           8A46         FF            mov	al,-1[bp]
21111 53C4           3C                     08  cmp	al,*8
21112 53C6   7303    E9         FE41            blo 	.148
21113                       000053CB            .16C:
21114                       000053CB            .145:
21115 53CB           89EC                       mov	sp,bp
21116 53CD           5D                         pop	bp
21117 53CE           C3                         ret
21118                                           ! 2308 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21119                                           ! Register BX used in function write_gfx_char_cga
21120                                           ! 2309 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21121                       000053CF            _write_gfx_char_lin:
21122                                           !BCC_EOS
21123                                           !BCC_EOS
21124                                           !BCC_EOS
21125                                           !BCC_EOS
21126                                           !BCC_EOS
21127                                           ! 2310 {
21128                                           ! 2311  Bit8u i,j,mask,data;
21129                                           !BCC_EOS
21130                                           ! 2312  Bit8u *fdata;
21131                                           !BCC_EOS
21132                                           ! 2313  Bit16u addr,dest,src;
21133                                           !BCC_EOS
21134                                           ! 2314  fdata = &vgafont8;
21135 53CF           55                         push	bp
21136 53D0           89E5                       mov	bp,sp
21137 53D2           83C4                   F4  add	sp,*-$C
21138                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21139 53D5           BB                   0F1A  mov	bx,#_vgafont8
21140 53D8           895E         FA            mov	-6[bp],bx
21141                                           !BCC_EOS
21142                                           ! 2315  addr=xcurs*8+ycurs*nbcols*64;
21143                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21144 53DB           8A46         0C            mov	al,$C[bp]
21145 53DE           30E4                       xor	ah,ah
21146 53E0           89C3                       mov	bx,ax
21147 53E2           8A46         0A            mov	al,$A[bp]
21148 53E5           30E4                       xor	ah,ah
21149 53E7           89D9                       mov	cx,bx
21150 53E9           F7E9                       imul	cx
21151                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21152 53EB           B1                     06  mov	cl,*6
21153 53ED           D3E0                       shl	ax,cl
21154 53EF           50                         push	ax
21155                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21156 53F0           8A46         08            mov	al,8[bp]
21157 53F3           30E4                       xor	ah,ah
21158 53F5           B1                     03  mov	cl,*3
21159 53F7           D3E0                       shl	ax,cl
21160                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21161 53F9           0346         F2            add	ax,-$E[bp]
21162 53FC           44                         inc	sp
21163 53FD           44                         inc	sp
21164                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21165 53FE           8946         F8            mov	-8[bp],ax
21166                                           !BCC_EOS
21167                                           ! 2316  src = car * 8;
21168                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21169 5401           8A46         04            mov	al,4[bp]
21170 5404           30E4                       xor	ah,ah
21171 5406           B1                     03  mov	cl,*3
21172 5408           D3E0                       shl	ax,cl
21173                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21174 540A           8946         F4            mov	-$C[bp],ax
21175                                           !BCC_EOS
21176                                           ! 2317  for(i=0;i<8;i++)
21177                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21178 540D           30C0                       xor	al,al
21179 540F           8846         FF            mov	-1[bp],al
21180                                           !BCC_EOS
21181                                           !BCC_EOS
21182                                           ! 2318   {
21183 5412           E9         0081            br 	.16F
21184                       00005415            .170:
21185                                           ! 2319    dest=addr+i*nbcols*8;
21186                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21187 5415           8A46         0C            mov	al,$C[bp]
21188 5418           30E4                       xor	ah,ah
21189 541A           89C3                       mov	bx,ax
21190 541C           8A46         FF            mov	al,-1[bp]
21191 541F           30E4                       xor	ah,ah
21192 5421           89D9                       mov	cx,bx
21193 5423           F7E9                       imul	cx
21194                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21195 5425           B1                     03  mov	cl,*3
21196 5427           D3E0                       shl	ax,cl
21197                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21198                                           ! Debug: expression subtree swapping
21199 5429           0346         F8            add	ax,-8[bp]
21200                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21201 542C           8946         F6            mov	-$A[bp],ax
21202                                           !BCC_EOS
21203                                           ! 2320    mask = 0x80;
21204                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21205 542F           B0                     80  mov	al,#$80
21206 5431           8846         FD            mov	-3[bp],al
21207                                           !BCC_EOS
21208                                           ! 2321    for(j=0;j<8;j++)
21209                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21210 5434           30C0                       xor	al,al
21211 5436           8846         FE            mov	-2[bp],al
21212                                           !BCC_EOS
21213                                           !BCC_EOS
21214                                           ! 2322     {
21215 5439           EB           4D            jmp .173
21216                       0000543B            .174:
21217                                           ! 2323      data = 0x00;
21218                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21219 543B           30C0                       xor	al,al
21220 543D           8846         FC            mov	-4[bp],al
21221                                           !BCC_EOS
21222                                           ! 2324      if (fdata[src+i] & mask)
21223                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21224 5440           8B46         F4            mov	ax,-$C[bp]
21225 5443           0246         FF            add	al,-1[bp]
21226 5446           80D4                   00  adc	ah,*0
21227                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21228 5449           0346         FA            add	ax,-6[bp]
21229 544C           89C3                       mov	bx,ax
21230                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21231 544E           8A07                       mov	al,[bx]
21232 5450           2246         FD            and	al,-3[bp]
21233 5453           84C0                       test	al,al
21234 5455           74           06            je  	.175
21235                       00005457            .176:
21236                                           ! 2325       {
21237                                           ! 2326        data = attr;
21238                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21239 5457           8A46         06            mov	al,6[bp]
21240 545A           8846         FC            mov	-4[bp],al
21241                                           !BCC_EOS
21242                                           ! 2327       }
21243                                           ! 2328      write_byte(0xa000,dest+j,data);
21244                       0000545D            .175:
21245                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21246 545D           8A46         FC            mov	al,-4[bp]
21247 5460           30E4                       xor	ah,ah
21248 5462           50                         push	ax
21249                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21250 5463           8B46         F6            mov	ax,-$A[bp]
21251 5466           0246         FE            add	al,-2[bp]
21252 5469           80D4                   00  adc	ah,*0
21253                                           ! Debug: list unsigned int = ax+0 (used reg = )
21254 546C           50                         push	ax
21255                                           ! Debug: list unsigned int = const $A000 (used reg = )
21256 546D           B8                   A000  mov	ax,#$A000
21257 5470           50                         push	ax
21258                                           ! Debug: func () void = write_byte+0 (used reg = )
21259 5471           E8         26CF            call	_write_byte
21260 5474           83C4                   06  add	sp,*6
21261                                           !BCC_EOS
21262                                           ! 2329      mask >>= 1;
21263                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21264 5477           8A46         FD            mov	al,-3[bp]
21265 547A           30E4                       xor	ah,ah
21266 547C           D1E8                       shr	ax,*1
21267 547E           8846         FD            mov	-3[bp],al
21268                                           !BCC_EOS
21269                                           ! 2330     }
21270                                           ! 2331   }
21271                       00005481            .172:
21272                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21273 5481           8A46         FE            mov	al,-2[bp]
21274 5484           40                         inc	ax
21275 5485           8846         FE            mov	-2[bp],al
21276                       00005488            .173:
21277                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21278 5488           8A46         FE            mov	al,-2[bp]
21279 548B           3C                     08  cmp	al,*8
21280 548D           72           AC            jb 	.174
21281                       0000548F            .177:
21282                       0000548F            .171:
21283                                           ! 2332 }
21284                       0000548F            .16E:
21285                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21286 548F           8A46         FF            mov	al,-1[bp]
21287 5492           40                         inc	ax
21288 5493           8846         FF            mov	-1[bp],al
21289                       00005496            .16F:
21290                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21291 5496           8A46         FF            mov	al,-1[bp]
21292 5499           3C                     08  cmp	al,*8
21293 549B   7303    E9         FF75            blo 	.170
21294                       000054A0            .178:
21295                       000054A0            .16D:
21296 54A0           89EC                       mov	sp,bp
21297 54A2           5D                         pop	bp
21298 54A3           C3                         ret
21299                                           ! 2333 static void biosfn_write_char_attr (car,page,attr,count)
21300                                           ! Register BX used in function write_gfx_char_lin
21301                                           ! 2334 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21302                       000054A4            _biosfn_write_char_attr:
21303                                           !BCC_EOS
21304                                           !BCC_EOS
21305                                           !BCC_EOS
21306                                           !BCC_EOS
21307                                           ! 2335 {
21308                                           ! 2336  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21309                                           !BCC_EOS
21310                                           ! 2337  Bit16u nbcols,nbrows,address;
21311                                           !BCC_EOS
21312                                           ! 2338  Bit16u cursor,dummy;
21313                                           !BCC_EOS
21314                                           ! 2339  mode=read_byte(0x40,0x49);
21315 54A4           55                         push	bp
21316 54A5           89E5                       mov	bp,sp
21317 54A7           83C4                   F0  add	sp,*-$10
21318                                           ! Debug: list int = const $49 (used reg = )
21319 54AA           B8                   0049  mov	ax,*$49
21320 54AD           50                         push	ax
21321                                           ! Debug: list int = const $40 (used reg = )
21322 54AE           B8                   0040  mov	ax,*$40
21323 54B1           50                         push	ax
21324                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21325 54B2           E8         2668            call	_read_byte
21326 54B5           83C4                   04  add	sp,*4
21327                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21328 54B8           8846         FC            mov	-4[bp],al
21329                                           !BCC_EOS
21330                                           ! 2340  line=find_vga_entry(mode);
21331                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21332 54BB           8A46         FC            mov	al,-4[bp]
21333 54BE           30E4                       xor	ah,ah
21334 54C0           50                         push	ax
21335                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21336 54C1           E8         256D            call	_find_vga_entry
21337 54C4           44                         inc	sp
21338 54C5           44                         inc	sp
21339                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21340 54C6           8846         FB            mov	-5[bp],al
21341                                           !BCC_EOS
21342                                           ! 2341  if(line==0xFF)return;
21343                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21344 54C9           8A46         FB            mov	al,-5[bp]
21345 54CC           3C                     FF  cmp	al,#$FF
21346 54CE           75           04            jne 	.179
21347                       000054D0            .17A:
21348 54D0           89EC                       mov	sp,bp
21349 54D2           5D                         pop	bp
21350 54D3           C3                         ret
21351                                           !BCC_EOS
21352                                           ! 2342  biosfn_get_cursor_pos(page,&dummy,&cursor);
21353                       000054D4            .179:
21354                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21355 54D4           8D5E         F2            lea	bx,-$E[bp]
21356 54D7           53                         push	bx
21357                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21358 54D8           8D5E         F0            lea	bx,-$10[bp]
21359 54DB           53                         push	bx
21360                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21361 54DC           8A46         06            mov	al,6[bp]
21362 54DF           30E4                       xor	ah,ah
21363 54E1           50                         push	ax
21364                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21365 54E2           E8         EE67            call	_biosfn_get_cursor_pos
21366 54E5           83C4                   06  add	sp,*6
21367                                           !BCC_EOS
21368                                           ! 2343  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21369                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21370 54E8           8A46         F2            mov	al,-$E[bp]
21371                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21372 54EB           8846         FE            mov	-2[bp],al
21373                                           !BCC_EOS
21374                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21375 54EE           8B46         F2            mov	ax,-$E[bp]
21376 54F1           30C0                       xor	al,al
21377                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21378 54F3           88E0                       mov	al,ah
21379 54F5           30E4                       xor	ah,ah
21380                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21381 54F7           8846         FD            mov	-3[bp],al
21382                                           !BCC_EOS
21383                                           ! 2344  nbrows=read_byte(0x40,0x84)+1;
21384                                           ! Debug: list int = const $84 (used reg = )
21385 54FA           B8                   0084  mov	ax,#$84
21386 54FD           50                         push	ax
21387                                           ! Debug: list int = const $40 (used reg = )
21388 54FE           B8                   0040  mov	ax,*$40
21389 5501           50                         push	ax
21390                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21391 5502           E8         2618            call	_read_byte
21392 5505           83C4                   04  add	sp,*4
21393                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21394 5508           30E4                       xor	ah,ah
21395                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21396 550A           40                         inc	ax
21397 550B           8946         F6            mov	-$A[bp],ax
21398                                           !BCC_EOS
21399                                           ! 2345  nbcols=read_word(0x40,0x4A);
21400                                           ! Debug: list int = const $4A (used reg = )
21401 550E           B8                   004A  mov	ax,*$4A
21402 5511           50                         push	ax
21403                                           ! Debug: list int = const $40 (used reg = )
21404 5512           B8                   0040  mov	ax,*$40
21405 5515           50                         push	ax
21406                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21407 5516           E8         2617            call	_read_word
21408 5519           83C4                   04  add	sp,*4
21409                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21410 551C           8946         F8            mov	-8[bp],ax
21411                                           !BCC_EOS
21412                                           ! 2346  if(vga_modes[line].class==0x00)
21413                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21414 551F           8A46         FB            mov	al,-5[bp]
21415 5522           30E4                       xor	ah,ah
21416 5524           B1                     03  mov	cl,*3
21417 5526           D3E0                       shl	ax,cl
21418 5528           89C3                       mov	bx,ax
21419 552A           81C3                 01B6  add	bx,#_vga_modes
21420                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21421 552E           8A47         01            mov	al,1[bx]
21422 5531           84C0                       test	al,al
21423 5533   7403    E9         006A            bne 	.17B
21424                       00005538            .17C:
21425                                           ! 2347   {
21426                                           ! 2348    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21427                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21428 5538           8A46         FD            mov	al,-3[bp]
21429 553B           30E4                       xor	ah,ah
21430 553D           8B4E         F8            mov	cx,-8[bp]
21431 5540           F7E9                       imul	cx
21432                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21433                                           ! Debug: expression subtree swapping
21434 5542           0246         FE            add	al,-2[bp]
21435 5545           80D4                   00  adc	ah,*0
21436                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21437 5548           D1E0                       shl	ax,*1
21438 554A           50                         push	ax
21439                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21440 554B           8B46         F8            mov	ax,-8[bp]
21441 554E           8B4E         F6            mov	cx,-$A[bp]
21442 5551           F7E9                       imul	cx
21443                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21444 5553           D1E0                       shl	ax,*1
21445                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21446 5555           0C                     FF  or	al,#$FF
21447                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21448                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21449 5557           89C3                       mov	bx,ax
21450 5559           8A46         06            mov	al,6[bp]
21451 555C           30E4                       xor	ah,ah
21452 555E           93                         xchg	ax,bx
21453 555F           40                         inc	ax
21454 5560           89D9                       mov	cx,bx
21455 5562           F7E9                       imul	cx
21456                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21457 5564           0346         EE            add	ax,-$12[bp]
21458 5567           44                         inc	sp
21459 5568           44                         inc	sp
21460                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21461 5569           8946         F4            mov	-$C[bp],ax
21462                                           !BCC_EOS
21463                                           ! 2349    dummy=((Bit16u)attr<<8)+car;
21464                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21465 556C           8A46         08            mov	al,8[bp]
21466 556F           30E4                       xor	ah,ah
21467                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21468 5571           88C4                       mov	ah,al
21469 5573           30C0                       xor	al,al
21470                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21471 5575           0246         04            add	al,4[bp]
21472 5578           80D4                   00  adc	ah,*0
21473                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21474 557B           8946         F0            mov	-$10[bp],ax
21475                                           !BCC_EOS
21476                                           ! 2350    memsetw(vga_modes[line].sstart,address,dummy,count);
21477                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21478 557E           FF76         0A            push	$A[bp]
21479                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21480 5581           FF76         F0            push	-$10[bp]
21481                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21482 5584           FF76         F4            push	-$C[bp]
21483                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21484 5587           8A46         FB            mov	al,-5[bp]
21485 558A           30E4                       xor	ah,ah
21486 558C           B1                     03  mov	cl,*3
21487 558E           D3E0                       shl	ax,cl
21488 5590           89C3                       mov	bx,ax
21489 5592           81C3                 01B6  add	bx,#_vga_modes
21490                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21491 5596           FF77         04            push	4[bx]
21492                                           ! Debug: func () void = memsetw+0 (used reg = )
21493 5599           E8         24FC            call	_memsetw
21494 559C           83C4                   08  add	sp,*8
21495                                           !BCC_EOS
21496                                           ! 2351   }
21497                                           ! 2352  else
21498                                           ! 2353   {
21499 559F           E9         00F6            br 	.17D
21500                       000055A2            .17B:
21501                                           ! 2354    cheight=video_param_table[line_to_vpti[line]].cheight;
21502                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21503 55A2           8A46         FB            mov	al,-5[bp]
21504 55A5           30E4                       xor	ah,ah
21505 55A7           89C3                       mov	bx,ax
21506                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21507 55A9           8A87       0236            mov	al,_line_to_vpti[bx]
21508 55AD           30E4                       xor	ah,ah
21509 55AF           B1                     06  mov	cl,*6
21510 55B1           D3E0                       shl	ax,cl
21511 55B3           89C3                       mov	bx,ax
21512 55B5           81C3                 024A  add	bx,#_video_param_table
21513                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21514 55B9           8A47         02            mov	al,2[bx]
21515 55BC           8846         FF            mov	-1[bp],al
21516                                           !BCC_EOS
21517                                           ! 2355    bpp=vga_modes[line].pixbits;
21518                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21519 55BF           8A46         FB            mov	al,-5[bp]
21520 55C2           30E4                       xor	ah,ah
21521 55C4           B1                     03  mov	cl,*3
21522 55C6           D3E0                       shl	ax,cl
21523 55C8           89C3                       mov	bx,ax
21524 55CA           81C3                 01B6  add	bx,#_vga_modes
21525                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21526 55CE           8A47         03            mov	al,3[bx]
21527 55D1           8846         FA            mov	-6[bp],al
21528                                           !BCC_EOS
21529                                           ! 2356    while((count-->0) && (xcurs<nbcols))
21530                                           ! 2357     {
21531 55D4           E9         00A8            br 	.17F
21532                       000055D7            .180:
21533                                           ! 2358      switch(vga_modes[line].memmodel)
21534                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21535 55D7           8A46         FB            mov	al,-5[bp]
21536 55DA           30E4                       xor	ah,ah
21537 55DC           B1                     03  mov	cl,*3
21538 55DE           D3E0                       shl	ax,cl
21539 55E0           89C3                       mov	bx,ax
21540 55E2           81C3                 01B6  add	bx,#_vga_modes
21541 55E6           8A47         02            mov	al,2[bx]
21542                                           ! 2359       {
21543 55E9           EB           77            jmp .183
21544                                           ! 2360        case 0x04:
21545                                           ! 2361        case 0x03:
21546                       000055EB            .184:
21547                                           ! 2362          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
21548                       000055EB            .185:
21549                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21550 55EB           8A46         FF            mov	al,-1[bp]
21551 55EE           30E4                       xor	ah,ah
21552 55F0           50                         push	ax
21553                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21554 55F1           FF76         F8            push	-8[bp]
21555                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21556 55F4           8A46         FD            mov	al,-3[bp]
21557 55F7           30E4                       xor	ah,ah
21558 55F9           50                         push	ax
21559                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21560 55FA           8A46         FE            mov	al,-2[bp]
21561 55FD           30E4                       xor	ah,ah
21562 55FF           50                         push	ax
21563                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21564 5600           8A46         08            mov	al,8[bp]
21565 5603           30E4                       xor	ah,ah
21566 5605           50                         push	ax
21567                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21568 5606           8A46         04            mov	al,4[bp]
21569 5609           30E4                       xor	ah,ah
21570 560B           50                         push	ax
21571                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21572 560C           E8         FA45            call	_write_gfx_char_pl4
21573 560F           83C4                   0C  add	sp,*$C
21574                                           !BCC_EOS
21575                                           ! 2363          break;
21576 5612           EB           64            jmp .181
21577                                           !BCC_EOS
21578                                           ! 2364        case 0x02:
21579                                           ! 2365          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21580                       00005614            .186:
21581                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21582 5614           8A46         FA            mov	al,-6[bp]
21583 5617           30E4                       xor	ah,ah
21584 5619           50                         push	ax
21585                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21586 561A           FF76         F8            push	-8[bp]
21587                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21588 561D           8A46         FD            mov	al,-3[bp]
21589 5620           30E4                       xor	ah,ah
21590 5622           50                         push	ax
21591                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21592 5623           8A46         FE            mov	al,-2[bp]
21593 5626           30E4                       xor	ah,ah
21594 5628           50                         push	ax
21595                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21596 5629           8A46         08            mov	al,8[bp]
21597 562C           30E4                       xor	ah,ah
21598 562E           50                         push	ax
21599                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21600 562F           8A46         04            mov	al,4[bp]
21601 5632           30E4                       xor	ah,ah
21602 5634           50                         push	ax
21603                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
21604 5635           E8         FB91            call	_write_gfx_char_cga
21605 5638           83C4                   0C  add	sp,*$C
21606                                           !BCC_EOS
21607                                           ! 2366          break;
21608 563B           EB           3B            jmp .181
21609                                           !BCC_EOS
21610                                           ! 2367        case 0x05:
21611                                           ! 2368          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
21612                       0000563D            .187:
21613                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
21614 563D           FF76         F8            push	-8[bp]
21615                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
21616 5640           8A46         FD            mov	al,-3[bp]
21617 5643           30E4                       xor	ah,ah
21618 5645           50                         push	ax
21619                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
21620 5646           8A46         FE            mov	al,-2[bp]
21621 5649           30E4                       xor	ah,ah
21622 564B           50                         push	ax
21623                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
21624 564C           8A46         08            mov	al,8[bp]
21625 564F           30E4                       xor	ah,ah
21626 5651           50                         push	ax
21627                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
21628 5652           8A46         04            mov	al,4[bp]
21629 5655           30E4                       xor	ah,ah
21630 5657           50                         push	ax
21631                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
21632 5658           E8         FD74            call	_write_gfx_char_lin
21633 565B           83C4                   0A  add	sp,*$A
21634                                           !BCC_EOS
21635                                           ! 2369          break;
21636 565E           EB           18            jmp .181
21637                                           !BCC_EOS
21638                                           ! 2370       }
21639                                           ! 2371      xcurs++;
21640 5660           EB           16            jmp .181
21641                       00005662            .183:
21642 5662           2C                     02  sub	al,*2
21643 5664           74           AE            je 	.186
21644 5666           2C                     01  sub	al,*1
21645 5668   7503    E9         FF7E            beq 	.185
21646 566D           2C                     01  sub	al,*1
21647 566F   7503    E9         FF77            beq 	.184
21648 5674           2C                     01  sub	al,*1
21649 5676           74           C5            je 	.187
21650                       00005678            .181:
21651                       FFFFFFEE            ..FFFA	=	-$12
21652                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
21653 5678           8A46         FE            mov	al,-2[bp]
21654 567B           40                         inc	ax
21655 567C           8846         FE            mov	-2[bp],al
21656                                           !BCC_EOS
21657                                           ! 2372     }
21658                                           ! 2373   }
21659                       0000567F            .17F:
21660                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21661 567F           8B46         0A            mov	ax,$A[bp]
21662 5682           48                         dec	ax
21663 5683           8946         0A            mov	$A[bp],ax
21664                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21665 5686           3D                   FFFF  cmp	ax,*-1
21666 5689           74           0D            je  	.188
21667                       0000568B            .189:
21668                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
21669 568B           8A46         FE            mov	al,-2[bp]
21670 568E           30E4                       xor	ah,ah
21671 5690           3B46         F8            cmp	ax,-8[bp]
21672 5693   7303    E9         FF3F            blo 	.180
21673                       00005698            .188:
21674                       00005698            .17E:
21675                                           ! 2374 }
21676                       00005698            .17D:
21677 5698           89EC                       mov	sp,bp
21678 569A           5D                         pop	bp
21679 569B           C3                         ret
21680                                           ! 2375 static void biosfn_write_char_only (ca
21681                                           ! Register BX used in function biosfn_write_char_attr
21682                                           ! 2375 r,page,attr,count)
21683                                           ! 2376 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21684                       0000569C            _biosfn_write_char_only:
21685                                           !BCC_EOS
21686                                           !BCC_EOS
21687                                           !BCC_EOS
21688                                           !BCC_EOS
21689                                           ! 2377 {
21690                                           ! 2378  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21691                                           !BCC_EOS
21692                                           ! 2379  Bit16u nbcols,nbrows,address;
21693                                           !BCC_EOS
21694                                           ! 2380  Bit16u cursor,dummy;
21695                                           !BCC_EOS
21696                                           ! 2381  mode=read_byte(0x40,0x49);
21697 569C           55                         push	bp
21698 569D           89E5                       mov	bp,sp
21699 569F           83C4                   F0  add	sp,*-$10
21700                                           ! Debug: list int = const $49 (used reg = )
21701 56A2           B8                   0049  mov	ax,*$49
21702 56A5           50                         push	ax
21703                                           ! Debug: list int = const $40 (used reg = )
21704 56A6           B8                   0040  mov	ax,*$40
21705 56A9           50                         push	ax
21706                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21707 56AA           E8         2470            call	_read_byte
21708 56AD           83C4                   04  add	sp,*4
21709                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21710 56B0           8846         FC            mov	-4[bp],al
21711                                           !BCC_EOS
21712                                           ! 2382  line=find_vga_entry(mode);
21713                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21714 56B3           8A46         FC            mov	al,-4[bp]
21715 56B6           30E4                       xor	ah,ah
21716 56B8           50                         push	ax
21717                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21718 56B9           E8         2375            call	_find_vga_entry
21719 56BC           44                         inc	sp
21720 56BD           44                         inc	sp
21721                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21722 56BE           8846         FB            mov	-5[bp],al
21723                                           !BCC_EOS
21724                                           ! 2383  if(line==0xFF)return;
21725                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21726 56C1           8A46         FB            mov	al,-5[bp]
21727 56C4           3C                     FF  cmp	al,#$FF
21728 56C6           75           04            jne 	.18A
21729                       000056C8            .18B:
21730 56C8           89EC                       mov	sp,bp
21731 56CA           5D                         pop	bp
21732 56CB           C3                         ret
21733                                           !BCC_EOS
21734                                           ! 2384  biosfn_get_cursor_pos(page,&dummy,&cursor);
21735                       000056CC            .18A:
21736                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21737 56CC           8D5E         F2            lea	bx,-$E[bp]
21738 56CF           53                         push	bx
21739                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21740 56D0           8D5E         F0            lea	bx,-$10[bp]
21741 56D3           53                         push	bx
21742                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21743 56D4           8A46         06            mov	al,6[bp]
21744 56D7           30E4                       xor	ah,ah
21745 56D9           50                         push	ax
21746                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21747 56DA           E8         EC6F            call	_biosfn_get_cursor_pos
21748 56DD           83C4                   06  add	sp,*6
21749                                           !BCC_EOS
21750                                           ! 2385  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21751                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21752 56E0           8A46         F2            mov	al,-$E[bp]
21753                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21754 56E3           8846         FE            mov	-2[bp],al
21755                                           !BCC_EOS
21756                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21757 56E6           8B46         F2            mov	ax,-$E[bp]
21758 56E9           30C0                       xor	al,al
21759                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21760 56EB           88E0                       mov	al,ah
21761 56ED           30E4                       xor	ah,ah
21762                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21763 56EF           8846         FD            mov	-3[bp],al
21764                                           !BCC_EOS
21765                                           ! 2386  nbrows=read_byte(0x40,0x84)+1;
21766                                           ! Debug: list int = const $84 (used reg = )
21767 56F2           B8                   0084  mov	ax,#$84
21768 56F5           50                         push	ax
21769                                           ! Debug: list int = const $40 (used reg = )
21770 56F6           B8                   0040  mov	ax,*$40
21771 56F9           50                         push	ax
21772                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21773 56FA           E8         2420            call	_read_byte
21774 56FD           83C4                   04  add	sp,*4
21775                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21776 5700           30E4                       xor	ah,ah
21777                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21778 5702           40                         inc	ax
21779 5703           8946         F6            mov	-$A[bp],ax
21780                                           !BCC_EOS
21781                                           ! 2387  nbcols=read_word(0x40,0x4A);
21782                                           ! Debug: list int = const $4A (used reg = )
21783 5706           B8                   004A  mov	ax,*$4A
21784 5709           50                         push	ax
21785                                           ! Debug: list int = const $40 (used reg = )
21786 570A           B8                   0040  mov	ax,*$40
21787 570D           50                         push	ax
21788                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21789 570E           E8         241F            call	_read_word
21790 5711           83C4                   04  add	sp,*4
21791                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21792 5714           8946         F8            mov	-8[bp],ax
21793                                           !BCC_EOS
21794                                           ! 2388  if(vga_modes[line].class==0x00)
21795                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21796 5717           8A46         FB            mov	al,-5[bp]
21797 571A           30E4                       xor	ah,ah
21798 571C           B1                     03  mov	cl,*3
21799 571E           D3E0                       shl	ax,cl
21800 5720           89C3                       mov	bx,ax
21801 5722           81C3                 01B6  add	bx,#_vga_modes
21802                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21803 5726           8A47         01            mov	al,1[bx]
21804 5729           84C0                       test	al,al
21805 572B           75           6E            jne 	.18C
21806                       0000572D            .18D:
21807                                           ! 2389   {
21808                                           ! 2390    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21809                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21810 572D           8A46         FD            mov	al,-3[bp]
21811 5730           30E4                       xor	ah,ah
21812 5732           8B4E         F8            mov	cx,-8[bp]
21813 5735           F7E9                       imul	cx
21814                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21815                                           ! Debug: expression subtree swapping
21816 5737           0246         FE            add	al,-2[bp]
21817 573A           80D4                   00  adc	ah,*0
21818                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21819 573D           D1E0                       shl	ax,*1
21820 573F           50                         push	ax
21821                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21822 5740           8B46         F8            mov	ax,-8[bp]
21823 5743           8B4E         F6            mov	cx,-$A[bp]
21824 5746           F7E9                       imul	cx
21825                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21826 5748           D1E0                       shl	ax,*1
21827                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21828 574A           0C                     FF  or	al,#$FF
21829                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21830                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21831 574C           89C3                       mov	bx,ax
21832 574E           8A46         06            mov	al,6[bp]
21833 5751           30E4                       xor	ah,ah
21834 5753           93                         xchg	ax,bx
21835 5754           40                         inc	ax
21836 5755           89D9                       mov	cx,bx
21837 5757           F7E9                       imul	cx
21838                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21839 5759           0346         EE            add	ax,-$12[bp]
21840 575C           44                         inc	sp
21841 575D           44                         inc	sp
21842                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21843 575E           8946         F4            mov	-$C[bp],ax
21844                                           !BCC_EOS
21845                                           ! 2391    while(count-->0)
21846                                           ! 2392     {write_byte(vga_modes[line].sstart,address,car);
21847 5761           EB           29            jmp .18F
21848                       00005763            .190:
21849                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
21850 5763           8A46         04            mov	al,4[bp]
21851 5766           30E4                       xor	ah,ah
21852 5768           50                         push	ax
21853                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
21854 5769           FF76         F4            push	-$C[bp]
21855                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
21856 576C           8A46         FB            mov	al,-5[bp]
21857 576F           30E4                       xor	ah,ah
21858 5771           B1                     03  mov	cl,*3
21859 5773           D3E0                       shl	ax,cl
21860 5775           89C3                       mov	bx,ax
21861 5777           81C3                 01B6  add	bx,#_vga_modes
21862                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21863 577B           FF77         04            push	4[bx]
21864                                           ! Debug: func () void = write_byte+0 (used reg = )
21865 577E           E8         23C2            call	_write_byte
21866 5781           83C4                   06  add	sp,*6
21867                                           !BCC_EOS
21868                                           ! 2393      address+=2;
21869                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
21870 5784           8B46         F4            mov	ax,-$C[bp]
21871 5787           40                         inc	ax
21872 5788           40                         inc	ax
21873 5789           8946         F4            mov	-$C[bp],ax
21874                                           !BCC_EOS
21875                                           ! 2394     }
21876                                           ! 2395   }
21877                       0000578C            .18F:
21878                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21879 578C           8B46         0A            mov	ax,$A[bp]
21880 578F           48                         dec	ax
21881 5790           8946         0A            mov	$A[bp],ax
21882                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21883 5793           3D                   FFFF  cmp	ax,*-1
21884 5796           75           CB            jne	.190
21885                       00005798            .191:
21886                       00005798            .18E:
21887                                           ! 2396  else
21888                                           ! 2397   {
21889 5798           E9         00F6            br 	.192
21890                       0000579B            .18C:
21891                                           ! 2398    cheight=video_param_table[line_to_vpti[line]].cheight;
21892                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21893 579B           8A46         FB            mov	al,-5[bp]
21894 579E           30E4                       xor	ah,ah
21895 57A0           89C3                       mov	bx,ax
21896                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21897 57A2           8A87       0236            mov	al,_line_to_vpti[bx]
21898 57A6           30E4                       xor	ah,ah
21899 57A8           B1                     06  mov	cl,*6
21900 57AA           D3E0                       shl	ax,cl
21901 57AC           89C3                       mov	bx,ax
21902 57AE           81C3                 024A  add	bx,#_video_param_table
21903                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21904 57B2           8A47         02            mov	al,2[bx]
21905 57B5           8846         FF            mov	-1[bp],al
21906                                           !BCC_EOS
21907                                           ! 2399    bpp=vga_modes[line].pixbits;
21908                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21909 57B8           8A46         FB            mov	al,-5[bp]
21910 57BB           30E4                       xor	ah,ah
21911 57BD           B1                     03  mov	cl,*3
21912 57BF           D3E0                       shl	ax,cl
21913 57C1           89C3                       mov	bx,ax
21914 57C3           81C3                 01B6  add	bx,#_vga_modes
21915                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21916 57C7           8A47         03            mov	al,3[bx]
21917 57CA           8846         FA            mov	-6[bp],al
21918                                           !BCC_EOS
21919                                           ! 2400    while((count-->0) && (xcurs<nbcols))
21920                                           ! 2401     {
21921 57CD           E9         00A8            br 	.194
21922                       000057D0            .195:
21923                                           ! 2402      switch(vga_modes[line].memmodel)
21924                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21925 57D0           8A46         FB            mov	al,-5[bp]
21926 57D3           30E4                       xor	ah,ah
21927 57D5           B1                     03  mov	cl,*3
21928 57D7           D3E0                       shl	ax,cl
21929 57D9           89C3                       mov	bx,ax
21930 57DB           81C3                 01B6  add	bx,#_vga_modes
21931 57DF           8A47         02            mov	al,2[bx]
21932                                           ! 2403       {
21933 57E2           EB           77            jmp .198
21934                                           ! 2404        case 0x04:
21935                                           ! 2405        case 0x03:
21936                       000057E4            .199:
21937                                           ! 2406          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
21938                       000057E4            .19A:
21939                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21940 57E4           8A46         FF            mov	al,-1[bp]
21941 57E7           30E4                       xor	ah,ah
21942 57E9           50                         push	ax
21943                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21944 57EA           FF76         F8            push	-8[bp]
21945                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21946 57ED           8A46         FD            mov	al,-3[bp]
21947 57F0           30E4                       xor	ah,ah
21948 57F2           50                         push	ax
21949                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21950 57F3           8A46         FE            mov	al,-2[bp]
21951 57F6           30E4                       xor	ah,ah
21952 57F8           50                         push	ax
21953                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21954 57F9           8A46         08            mov	al,8[bp]
21955 57FC           30E4                       xor	ah,ah
21956 57FE           50                         push	ax
21957                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21958 57FF           8A46         04            mov	al,4[bp]
21959 5802           30E4                       xor	ah,ah
21960 5804           50                         push	ax
21961                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21962 5805           E8         F84C            call	_write_gfx_char_pl4
21963 5808           83C4                   0C  add	sp,*$C
21964                                           !BCC_EOS
21965                                           ! 2407          break;
21966 580B           EB           64            jmp .196
21967                                           !BCC_EOS
21968                                           ! 2408        case 0x02:
21969                                           ! 2409          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21970                       0000580D            .19B:
21971                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21972 580D           8A46         FA            mov	al,-6[bp]
21973 5810           30E4                       xor	ah,ah
21974 5812           50                         push	ax
21975                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21976 5813           FF76         F8            push	-8[bp]
21977                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21978 5816           8A46         FD            mov	al,-3[bp]
21979 5819           30E4                       xor	ah,ah
21980 581B           50                         push	ax
21981                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21982 581C           8A46         FE            mov	al,-2[bp]
21983 581F           30E4                       xor	ah,ah
21984 5821           50                         push	ax
21985                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21986 5822           8A46         08            mov	al,8[bp]
21987 5825           30E4                       xor	ah,ah
21988 5827           50                         push	ax
21989                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21990 5828           8A46         04            mov	al,4[bp]
21991 582B           30E4                       xor	ah,ah
21992 582D           50                         push	ax
21993                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
21994 582E           E8         F998            call	_write_gfx_char_cga
21995 5831           83C4                   0C  add	sp,*$C
21996                                           !BCC_EOS
21997                                           ! 2410          break;
21998 5834           EB           3B            jmp .196
21999                                           !BCC_EOS
22000                                           ! 2411        case 0x05:
22001                                           ! 2412          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22002                       00005836            .19C:
22003                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22004 5836           FF76         F8            push	-8[bp]
22005                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22006 5839           8A46         FD            mov	al,-3[bp]
22007 583C           30E4                       xor	ah,ah
22008 583E           50                         push	ax
22009                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22010 583F           8A46         FE            mov	al,-2[bp]
22011 5842           30E4                       xor	ah,ah
22012 5844           50                         push	ax
22013                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22014 5845           8A46         08            mov	al,8[bp]
22015 5848           30E4                       xor	ah,ah
22016 584A           50                         push	ax
22017                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22018 584B           8A46         04            mov	al,4[bp]
22019 584E           30E4                       xor	ah,ah
22020 5850           50                         push	ax
22021                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22022 5851           E8         FB7B            call	_write_gfx_char_lin
22023 5854           83C4                   0A  add	sp,*$A
22024                                           !BCC_EOS
22025                                           ! 2413          break;
22026 5857           EB           18            jmp .196
22027                                           !BCC_EOS
22028                                           ! 2414       }
22029                                           ! 2415      xcurs++;
22030 5859           EB           16            jmp .196
22031                       0000585B            .198:
22032 585B           2C                     02  sub	al,*2
22033 585D           74           AE            je 	.19B
22034 585F           2C                     01  sub	al,*1
22035 5861   7503    E9         FF7E            beq 	.19A
22036 5866           2C                     01  sub	al,*1
22037 5868   7503    E9         FF77            beq 	.199
22038 586D           2C                     01  sub	al,*1
22039 586F           74           C5            je 	.19C
22040                       00005871            .196:
22041                       FFFFFFEE            ..FFF9	=	-$12
22042                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22043 5871           8A46         FE            mov	al,-2[bp]
22044 5874           40                         inc	ax
22045 5875           8846         FE            mov	-2[bp],al
22046                                           !BCC_EOS
22047                                           ! 2416     }
22048                                           ! 2417   }
22049                       00005878            .194:
22050                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22051 5878           8B46         0A            mov	ax,$A[bp]
22052 587B           48                         dec	ax
22053 587C           8946         0A            mov	$A[bp],ax
22054                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22055 587F           3D                   FFFF  cmp	ax,*-1
22056 5882           74           0D            je  	.19D
22057                       00005884            .19E:
22058                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22059 5884           8A46         FE            mov	al,-2[bp]
22060 5887           30E4                       xor	ah,ah
22061 5889           3B46         F8            cmp	ax,-8[bp]
22062 588C   7303    E9         FF3F            blo 	.195
22063                       00005891            .19D:
22064                       00005891            .193:
22065                                           ! 2418 }
22066                       00005891            .192:
22067 5891           89EC                       mov	sp,bp
22068 5893           5D                         pop	bp
22069 5894           C3                         ret
22070                                           ! 2419 #asm
22071                                           !BCC_ASM
22072                       00000008            _biosfn_write_char_only.count	set	8
22073                       00000006            _biosfn_write_char_only.attr	set	6
22074                       00000004            _biosfn_write_char_only.page	set	4
22075                       00000002            _biosfn_write_char_only.car	set	2
22076                       00005895            biosfn_group_0B:
22077 5895           80FF                   00    cmp bh, #0x00
22078 5898           74           06              je biosfn_set_border_color
22079 589A           80FF                   01    cmp bh, #0x01
22080 589D           74           40              je biosfn_set_palette
22081 589F           C3                           ret
22082                       000058A0            biosfn_set_border_color:
22083 58A0           50                           push ax
22084 58A1           53                           push bx
22085 58A2           51                           push cx
22086 58A3           52                           push dx
22087 58A4           BA                   03DA    mov dx, # 0x3da
22088 58A7           EC                           in al, dx
22089 58A8           BA                   03C0    mov dx, # 0x3c0
22090 58AB           B0                     00    mov al, #0x00
22091 58AD           EE                           out dx, al
22092 58AE           88D8                         mov al, bl
22093 58B0           24                     0F    and al, #0x0f
22094 58B2           A8                     08    test al, #0x08
22095 58B4           74           02              jz set_low_border
22096 58B6           04                     08    add al, #0x08
22097                       000058B8            set_low_border:
22098 58B8           EE                           out dx, al
22099 58B9           B1                     01    mov cl, #0x01
22100 58BB           80E3                   10    and bl, #0x10
22101                       000058BE            set_intensity_loop:
22102 58BE           BA                   03C0    mov dx, # 0x3c0
22103 58C1           88C8                         mov al, cl
22104 58C3           EE                           out dx, al
22105 58C4           BA                   03C1    mov dx, # 0x3c1
22106 58C7           EC                           in al, dx
22107 58C8           24                     EF    and al, #0xef
22108 58CA           08D8                         or al, bl
22109 58CC           BA                   03C0    mov dx, # 0x3c0
22110 58CF           EE                           out dx, al
22111 58D0           FEC1                         inc cl
22112 58D2           80F9                   04    cmp cl, #0x04
22113 58D5           75           E7              jne set_intensity_loop
22114 58D7           B0                     20    mov al, #0x20
22115 58D9           EE                           out dx, al
22116 58DA           5A                           pop dx
22117 58DB           59                           pop cx
22118 58DC           5B                           pop bx
22119 58DD           58                           pop ax
22120 58DE           C3                           ret
22121                       000058DF            biosfn_set_palette:
22122 58DF           50                           push ax
22123 58E0           53                           push bx
22124 58E1           51                           push cx
22125 58E2           52                           push dx
22126 58E3           BA                   03DA    mov dx, # 0x3da
22127 58E6           EC                           in al, dx
22128 58E7           B1                     01    mov cl, #0x01
22129 58E9           80E3                   01    and bl, #0x01
22130                       000058EC            set_cga_palette_loop:
22131 58EC           BA                   03C0    mov dx, # 0x3c0
22132 58EF           88C8                         mov al, cl
22133 58F1           EE                           out dx, al
22134 58F2           BA                   03C1    mov dx, # 0x3c1
22135 58F5           EC                           in al, dx
22136 58F6           24                     FE    and al, #0xfe
22137 58F8           08D8                         or al, bl
22138 58FA           BA                   03C0    mov dx, # 0x3c0
22139 58FD           EE                           out dx, al
22140 58FE           FEC1                         inc cl
22141 5900           80F9                   04    cmp cl, #0x04
22142 5903           75           E7              jne set_cga_palette_loop
22143 5905           B0                     20    mov al, #0x20
22144 5907           EE                           out dx, al
22145 5908           5A                           pop dx
22146 5909           59                           pop cx
22147 590A           5B                           pop bx
22148 590B           58                           pop ax
22149 590C           C3                           ret
22150                                           ! 2494 endasm
22151                                           !BCC_ENDASM
22152                                           ! 2495 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22153                                           ! Register BX used in function biosfn_write_char_only
22154                       0000590D            _biosfn_write_pixel:
22155                                           !BCC_EOS
22156                                           !BCC_EOS
22157                                           !BCC_EOS
22158                                           !BCC_EOS
22159                                           ! 2496 {
22160                                           ! 2497  Bit8u mode,line,mask,attr,data;
22161                                           !BCC_EOS
22162                                           ! 2498  Bit16u addr;
22163                                           !BCC_EOS
22164                                           ! 2499  mode=read_byte(0x40,0x49);
22165 590D           55                         push	bp
22166 590E           89E5                       mov	bp,sp
22167 5910           83C4                   F8  add	sp,*-8
22168                                           ! Debug: list int = const $49 (used reg = )
22169 5913           B8                   0049  mov	ax,*$49
22170 5916           50                         push	ax
22171                                           ! Debug: list int = const $40 (used reg = )
22172 5917           B8                   0040  mov	ax,*$40
22173 591A           50                         push	ax
22174                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22175 591B           E8         21FF            call	_read_byte
22176 591E           83C4                   04  add	sp,*4
22177                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22178 5921           8846         FF            mov	-1[bp],al
22179                                           !BCC_EOS
22180                                           ! 2500  line=find_vga_entry(mode);
22181                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22182 5924           8A46         FF            mov	al,-1[bp]
22183 5927           30E4                       xor	ah,ah
22184 5929           50                         push	ax
22185                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22186 592A           E8         2104            call	_find_vga_entry
22187 592D           44                         inc	sp
22188 592E           44                         inc	sp
22189                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22190 592F           8846         FE            mov	-2[bp],al
22191                                           !BCC_EOS
22192                                           ! 2501  if(line==0xFF)return;
22193                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22194 5932           8A46         FE            mov	al,-2[bp]
22195 5935           3C                     FF  cmp	al,#$FF
22196 5937           75           04            jne 	.19F
22197                       00005939            .1A0:
22198 5939           89EC                       mov	sp,bp
22199 593B           5D                         pop	bp
22200 593C           C3                         ret
22201                                           !BCC_EOS
22202                                           ! 2502  if(vga_modes[line].class==0x00)return;
22203                       0000593D            .19F:
22204                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22205 593D           8A46         FE            mov	al,-2[bp]
22206 5940           30E4                       xor	ah,ah
22207 5942           B1                     03  mov	cl,*3
22208 5944           D3E0                       shl	ax,cl
22209 5946           89C3                       mov	bx,ax
22210 5948           81C3                 01B6  add	bx,#_vga_modes
22211                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22212 594C           8A47         01            mov	al,1[bx]
22213 594F           84C0                       test	al,al
22214 5951           75           04            jne 	.1A1
22215                       00005953            .1A2:
22216 5953           89EC                       mov	sp,bp
22217 5955           5D                         pop	bp
22218 5956           C3                         ret
22219                                           !BCC_EOS
22220                                           ! 2503  switch(vga_modes[line].memmodel)
22221                       00005957            .1A1:
22222                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22223 5957           8A46         FE            mov	al,-2[bp]
22224 595A           30E4                       xor	ah,ah
22225 595C           B1                     03  mov	cl,*3
22226 595E           D3E0                       shl	ax,cl
22227 5960           89C3                       mov	bx,ax
22228 5962           81C3                 01B6  add	bx,#_vga_modes
22229 5966           8A47         02            mov	al,2[bx]
22230                                           ! 2504   {
22231 5969           E9         0223            br 	.1A5
22232                                           ! 2505    case 0x04:
22233                                           ! 2506    case 0x03:
22234                       0000596C            .1A6:
22235                                           ! 2507      addr = CX/8+DX*read_word(0x40,0x4A);
22236                       0000596C            .1A7:
22237                                           ! Debug: list int = const $4A (used reg = )
22238 596C           B8                   004A  mov	ax,*$4A
22239 596F           50                         push	ax
22240                                           ! Debug: list int = const $40 (used reg = )
22241 5970           B8                   0040  mov	ax,*$40
22242 5973           50                         push	ax
22243                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22244 5974           E8         21B9            call	_read_word
22245 5977           83C4                   04  add	sp,*4
22246                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22247                                           ! Debug: expression subtree swapping
22248 597A           8B4E         0A            mov	cx,$A[bp]
22249 597D           F7E9                       imul	cx
22250 597F           50                         push	ax
22251                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22252 5980           8B46         08            mov	ax,8[bp]
22253 5983           B1                     03  mov	cl,*3
22254 5985           D3E8                       shr	ax,cl
22255                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22256 5987           0346         F6            add	ax,0+..FFF8[bp]
22257 598A           44                         inc	sp
22258 598B           44                         inc	sp
22259                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22260 598C           8946         F8            mov	-8[bp],ax
22261                                           !BCC_EOS
22262                                           ! 2508      mask = 0x80 >> (CX & 0x07);
22263                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22264 598F           8A46         08            mov	al,8[bp]
22265 5992           24                     07  and	al,*7
22266                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22267 5994           30E4                       xor	ah,ah
22268 5996           89C3                       mov	bx,ax
22269 5998           B8                   0080  mov	ax,#$80
22270 599B           89D9                       mov	cx,bx
22271 599D           D3F8                       sar	ax,cl
22272                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22273 599F           8846         FD            mov	-3[bp],al
22274                                           !BCC_EOS
22275                                           ! 2509      outw(0x3ce, (mask << 8) | 0x08);
22276                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22277 59A2           8A46         FD            mov	al,-3[bp]
22278 59A5           30E4                       xor	ah,ah
22279 59A7           88C4                       mov	ah,al
22280 59A9           30C0                       xor	al,al
22281                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22282 59AB           0C                     08  or	al,*8
22283                                           ! Debug: list unsigned int = ax+0 (used reg = )
22284 59AD           50                         push	ax
22285                                           ! Debug: list int = const $3CE (used reg = )
22286 59AE           B8                   03CE  mov	ax,#$3CE
22287 59B1           50                         push	ax
22288                                           ! Debug: func () void = outw+0 (used reg = )
22289 59B2           E8         21E4            call	_outw
22290 59B5           83C4                   04  add	sp,*4
22291                                           !BCC_EOS
22292                                           ! 2510      outw(0x3ce, 0x0205);
22293                                           ! Debug: list int = const $205 (used reg = )
22294 59B8           B8                   0205  mov	ax,#$205
22295 59BB           50                         push	ax
22296                                           ! Debug: list int = const $3CE (used reg = )
22297 59BC           B8                   03CE  mov	ax,#$3CE
22298 59BF           50                         push	ax
22299                                           ! Debug: func () void = outw+0 (used reg = )
22300 59C0           E8         21D6            call	_outw
22301 59C3           83C4                   04  add	sp,*4
22302                                           !BCC_EOS
22303                                           ! 2511      data = read_byte(0xa000,addr);
22304                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22305 59C6           FF76         F8            push	-8[bp]
22306                                           ! Debug: list unsigned int = const $A000 (used reg = )
22307 59C9           B8                   A000  mov	ax,#$A000
22308 59CC           50                         push	ax
22309                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22310 59CD           E8         214D            call	_read_byte
22311 59D0           83C4                   04  add	sp,*4
22312                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22313 59D3           8846         FB            mov	-5[bp],al
22314                                           !BCC_EOS
22315                                           ! 2512      if (AL & 0x80)
22316                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22317 59D6           8A46         06            mov	al,6[bp]
22318 59D9           24                     80  and	al,#$80
22319 59DB           84C0                       test	al,al
22320 59DD           74           0E            je  	.1A8
22321                       000059DF            .1A9:
22322                                           ! 2513       {
22323                                           ! 2514        outw(0x3ce, 0x1803);
22324                                           ! Debug: list int = const $1803 (used reg = )
22325 59DF           B8                   1803  mov	ax,#$1803
22326 59E2           50                         push	ax
22327                                           ! Debug: list int = const $3CE (used reg = )
22328 59E3           B8                   03CE  mov	ax,#$3CE
22329 59E6           50                         push	ax
22330                                           ! Debug: func () void = outw+0 (used reg = )
22331 59E7           E8         21AF            call	_outw
22332 59EA           83C4                   04  add	sp,*4
22333                                           !BCC_EOS
22334                                           ! 2515       }
22335                                           ! 2516      write_byte(0xa000,addr,AL);
22336                       000059ED            .1A8:
22337                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22338 59ED           8A46         06            mov	al,6[bp]
22339 59F0           30E4                       xor	ah,ah
22340 59F2           50                         push	ax
22341                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22342 59F3           FF76         F8            push	-8[bp]
22343                                           ! Debug: list unsigned int = const $A000 (used reg = )
22344 59F6           B8                   A000  mov	ax,#$A000
22345 59F9           50                         push	ax
22346                                           ! Debug: func () void = write_byte+0 (used reg = )
22347 59FA           E8         2146            call	_write_byte
22348 59FD           83C4                   06  add	sp,*6
22349                                           !BCC_EOS
22350                                           ! 2517 #asm
22351                                           !BCC_EOS
22352                                           !BCC_ASM
22353                       0000000C            _biosfn_write_pixel.BH	set	$C
22354                       00000004            .biosfn_write_pixel.BH	set	4
22355                       00000010            _biosfn_write_pixel.CX	set	$10
22356                       00000008            .biosfn_write_pixel.CX	set	8
22357                       00000006            _biosfn_write_pixel.line	set	6
22358                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22359                       0000000E            _biosfn_write_pixel.AL	set	$E
22360                       00000006            .biosfn_write_pixel.AL	set	6
22361                       00000003            _biosfn_write_pixel.data	set	3
22362                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22363                       00000012            _biosfn_write_pixel.DX	set	$12
22364                       0000000A            .biosfn_write_pixel.DX	set	$A
22365                       00000005            _biosfn_write_pixel.mask	set	5
22366                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22367                       00000004            _biosfn_write_pixel.attr	set	4
22368                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22369                       00000007            _biosfn_write_pixel.mode	set	7
22370                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22371                       00000000            _biosfn_write_pixel.addr	set	0
22372                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22373 5A00           BA                   03CE       mov dx, # 0x3ce
22374 5A03           B8                   FF08       mov ax, #0xff08
22375 5A06           EF                              out dx, ax
22376 5A07           B8                   0005       mov ax, #0x0005
22377 5A0A           EF                              out dx, ax
22378 5A0B           B8                   0003       mov ax, #0x0003
22379 5A0E           EF                              out dx, ax
22380                                           ! 2525 endasm
22381                                           !BCC_ENDASM
22382                                           !BCC_EOS
22383                                           ! 2526      break;
22384 5A0F           E9         0196            br 	.1A3
22385                                           !BCC_EOS
22386                                           ! 2527    case 0x02:
22387                                           ! 2528      if(vga_modes[line].pixbits==2)
22388                       00005A12            .1AA:
22389                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22390 5A12           8A46         FE            mov	al,-2[bp]
22391 5A15           30E4                       xor	ah,ah
22392 5A17           B1                     03  mov	cl,*3
22393 5A19           D3E0                       shl	ax,cl
22394 5A1B           89C3                       mov	bx,ax
22395 5A1D           81C3                 01B6  add	bx,#_vga_modes
22396                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22397 5A21           8A47         03            mov	al,3[bx]
22398 5A24           3C                     02  cmp	al,*2
22399 5A26           75           1C            jne 	.1AB
22400                       00005A28            .1AC:
22401                                           ! 2529       {
22402                                           ! 2530        addr=(CX>>2)+(DX>>1)*80;
22403                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22404 5A28           8B46         0A            mov	ax,$A[bp]
22405 5A2B           D1E8                       shr	ax,*1
22406                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22407 5A2D           B9                   0050  mov	cx,*$50
22408 5A30           F7E9                       imul	cx
22409 5A32           50                         push	ax
22410                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22411 5A33           8B46         08            mov	ax,8[bp]
22412 5A36           D1E8                       shr	ax,*1
22413 5A38           D1E8                       shr	ax,*1
22414                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22415 5A3A           0346         F6            add	ax,0+..FFF8[bp]
22416 5A3D           44                         inc	sp
22417 5A3E           44                         inc	sp
22418                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22419 5A3F           8946         F8            mov	-8[bp],ax
22420                                           !BCC_EOS
22421                                           ! 2531       }
22422                                           ! 2532      else
22423                                           ! 2533       {
22424 5A42           EB           1A            jmp .1AD
22425                       00005A44            .1AB:
22426                                           ! 2534        addr=(CX>>3)+(DX>>1)*80;
22427                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22428 5A44           8B46         0A            mov	ax,$A[bp]
22429 5A47           D1E8                       shr	ax,*1
22430                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22431 5A49           B9                   0050  mov	cx,*$50
22432 5A4C           F7E9                       imul	cx
22433 5A4E           50                         push	ax
22434                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22435 5A4F           8B46         08            mov	ax,8[bp]
22436 5A52           B1                     03  mov	cl,*3
22437 5A54           D3E8                       shr	ax,cl
22438                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22439 5A56           0346         F6            add	ax,0+..FFF8[bp]
22440 5A59           44                         inc	sp
22441 5A5A           44                         inc	sp
22442                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22443 5A5B           8946         F8            mov	-8[bp],ax
22444                                           !BCC_EOS
22445                                           ! 2535       }
22446                                           ! 2536      if (DX & 1) addr += 0x2000;
22447                       00005A5E            .1AD:
22448                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22449 5A5E           8A46         0A            mov	al,$A[bp]
22450 5A61           24                     01  and	al,*1
22451 5A63           84C0                       test	al,al
22452 5A65           74           09            je  	.1AE
22453                       00005A67            .1AF:
22454                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22455 5A67           8B46         F8            mov	ax,-8[bp]
22456 5A6A           05                   2000  add	ax,#$2000
22457 5A6D           8946         F8            mov	-8[bp],ax
22458                                           !BCC_EOS
22459                                           ! 2537      data = read_byte(0xb800,addr);
22460                       00005A70            .1AE:
22461                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22462 5A70           FF76         F8            push	-8[bp]
22463                                           ! Debug: list unsigned int = const $B800 (used reg = )
22464 5A73           B8                   B800  mov	ax,#$B800
22465 5A76           50                         push	ax
22466                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22467 5A77           E8         20A3            call	_read_byte
22468 5A7A           83C4                   04  add	sp,*4
22469                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22470 5A7D           8846         FB            mov	-5[bp],al
22471                                           !BCC_EOS
22472                                           ! 2538      if(vga_modes[line].pixbits==2)
22473                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22474 5A80           8A46         FE            mov	al,-2[bp]
22475 5A83           30E4                       xor	ah,ah
22476 5A85           B1                     03  mov	cl,*3
22477 5A87           D3E0                       shl	ax,cl
22478 5A89           89C3                       mov	bx,ax
22479 5A8B           81C3                 01B6  add	bx,#_vga_modes
22480                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22481 5A8F           8A47         03            mov	al,3[bx]
22482 5A92           3C                     02  cmp	al,*2
22483 5A94           75           46            jne 	.1B0
22484                       00005A96            .1B1:
22485                                           ! 2539       {
22486                                           ! 2540        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22487                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22488 5A96           8A46         08            mov	al,8[bp]
22489 5A99           24                     03  and	al,*3
22490                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22491 5A9B           50                         push	ax
22492 5A9C           B8                   0003  mov	ax,*3
22493 5A9F           2A46         F6            sub	al,0+..FFF8[bp]
22494 5AA2           80DC                   00  sbb	ah,*0
22495 5AA5           44                         inc	sp
22496 5AA6           44                         inc	sp
22497                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22498 5AA7           D1E0                       shl	ax,*1
22499 5AA9           50                         push	ax
22500                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22501 5AAA           8A46         06            mov	al,6[bp]
22502 5AAD           24                     03  and	al,*3
22503                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22504 5AAF           30E4                       xor	ah,ah
22505 5AB1           8B4E         F6            mov	cx,0+..FFF8[bp]
22506 5AB4           D3E0                       shl	ax,cl
22507 5AB6           44                         inc	sp
22508 5AB7           44                         inc	sp
22509                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22510 5AB8           8846         FC            mov	-4[bp],al
22511                                           !BCC_EOS
22512                                           ! 2541        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
22513                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22514 5ABB           8A46         08            mov	al,8[bp]
22515 5ABE           24                     03  and	al,*3
22516                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22517 5AC0           50                         push	ax
22518 5AC1           B8                   0003  mov	ax,*3
22519 5AC4           2A46         F6            sub	al,0+..FFF8[bp]
22520 5AC7           80DC                   00  sbb	ah,*0
22521 5ACA           44                         inc	sp
22522 5ACB           44                         inc	sp
22523                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22524 5ACC           D1E0                       shl	ax,*1
22525                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
22526 5ACE           89C3                       mov	bx,ax
22527 5AD0           B8                   0003  mov	ax,*3
22528 5AD3           89D9                       mov	cx,bx
22529 5AD5           D3E0                       shl	ax,cl
22530                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22531 5AD7           8846         FD            mov	-3[bp],al
22532                                           !BCC_EOS
22533                                           ! 2542       }
22534                                           ! 2543      else
22535                                           ! 2544       {
22536 5ADA           EB           40            jmp .1B2
22537                       00005ADC            .1B0:
22538                                           ! 2545        attr = (AL & 0x01) << (7 - (CX & 0x07));
22539                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22540 5ADC           8A46         08            mov	al,8[bp]
22541 5ADF           24                     07  and	al,*7
22542                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22543 5AE1           50                         push	ax
22544 5AE2           B8                   0007  mov	ax,*7
22545 5AE5           2A46         F6            sub	al,0+..FFF8[bp]
22546 5AE8           80DC                   00  sbb	ah,*0
22547 5AEB           44                         inc	sp
22548 5AEC           44                         inc	sp
22549 5AED           50                         push	ax
22550                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
22551 5AEE           8A46         06            mov	al,6[bp]
22552 5AF1           24                     01  and	al,*1
22553                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22554 5AF3           30E4                       xor	ah,ah
22555 5AF5           8B4E         F6            mov	cx,0+..FFF8[bp]
22556 5AF8           D3E0                       shl	ax,cl
22557 5AFA           44                         inc	sp
22558 5AFB           44                         inc	sp
22559                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22560 5AFC           8846         FC            mov	-4[bp],al
22561                                           !BCC_EOS
22562                                           ! 2546        mask = 0x01 << (7 - (CX & 0x07));
22563                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22564 5AFF           8A46         08            mov	al,8[bp]
22565 5B02           24                     07  and	al,*7
22566                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22567 5B04           50                         push	ax
22568 5B05           B8                   0007  mov	ax,*7
22569 5B08           2A46         F6            sub	al,0+..FFF8[bp]
22570 5B0B           80DC                   00  sbb	ah,*0
22571 5B0E           44                         inc	sp
22572 5B0F           44                         inc	sp
22573                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
22574 5B10           89C3                       mov	bx,ax
22575 5B12           B8                   0001  mov	ax,*1
22576 5B15           89D9                       mov	cx,bx
22577 5B17           D3E0                       shl	ax,cl
22578                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22579 5B19           8846         FD            mov	-3[bp],al
22580                                           !BCC_EOS
22581                                           ! 2547       }
22582                                           ! 2548      if (AL & 0x80)
22583                       00005B1C            .1B2:
22584                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22585 5B1C           8A46         06            mov	al,6[bp]
22586 5B1F           24                     80  and	al,#$80
22587 5B21           84C0                       test	al,al
22588 5B23           74           0B            je  	.1B3
22589                       00005B25            .1B4:
22590                                           ! 2549       {
22591                                           ! 2550        data ^= attr;
22592                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22593 5B25           8A46         FB            mov	al,-5[bp]
22594 5B28           3246         FC            xor	al,-4[bp]
22595 5B2B           8846         FB            mov	-5[bp],al
22596                                           !BCC_EOS
22597                                           ! 2551       }
22598                                           ! 2552      else
22599                                           ! 2553       {
22600 5B2E           EB           16            jmp .1B5
22601                       00005B30            .1B3:
22602                                           ! 2554        data &= ~mask;
22603                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
22604 5B30           8A46         FD            mov	al,-3[bp]
22605 5B33           30E4                       xor	ah,ah
22606 5B35           F7D0                       not	ax
22607                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
22608 5B37           2246         FB            and	al,-5[bp]
22609 5B3A           8846         FB            mov	-5[bp],al
22610                                           !BCC_EOS
22611                                           ! 2555        data |= attr;
22612                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22613 5B3D           8A46         FB            mov	al,-5[bp]
22614 5B40           0A46         FC            or	al,-4[bp]
22615 5B43           8846         FB            mov	-5[bp],al
22616                                           !BCC_EOS
22617                                           ! 2556       }
22618                                           ! 2557      write_byte(0xb800,addr,data);
22619                       00005B46            .1B5:
22620                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
22621 5B46           8A46         FB            mov	al,-5[bp]
22622 5B49           30E4                       xor	ah,ah
22623 5B4B           50                         push	ax
22624                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22625 5B4C           FF76         F8            push	-8[bp]
22626                                           ! Debug: list unsigned int = const $B800 (used reg = )
22627 5B4F           B8                   B800  mov	ax,#$B800
22628 5B52           50                         push	ax
22629                                           ! Debug: func () void = write_byte+0 (used reg = )
22630 5B53           E8         1FED            call	_write_byte
22631 5B56           83C4                   06  add	sp,*6
22632                                           !BCC_EOS
22633                                           ! 2558      break;
22634 5B59           EB           4D            jmp .1A3
22635                                           !BCC_EOS
22636                                           ! 2559    case 0x05:
22637                                           ! 2560      addr=CX+DX*(read_word(0x40,0x4A)*8);
22638                       00005B5B            .1B6:
22639                                           ! Debug: list int = const $4A (used reg = )
22640 5B5B           B8                   004A  mov	ax,*$4A
22641 5B5E           50                         push	ax
22642                                           ! Debug: list int = const $40 (used reg = )
22643 5B5F           B8                   0040  mov	ax,*$40
22644 5B62           50                         push	ax
22645                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22646 5B63           E8         1FCA            call	_read_word
22647 5B66           83C4                   04  add	sp,*4
22648                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
22649 5B69           B1                     03  mov	cl,*3
22650 5B6B           D3E0                       shl	ax,cl
22651                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22652                                           ! Debug: expression subtree swapping
22653 5B6D           8B4E         0A            mov	cx,$A[bp]
22654 5B70           F7E9                       imul	cx
22655                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
22656                                           ! Debug: expression subtree swapping
22657 5B72           0346         08            add	ax,8[bp]
22658                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22659 5B75           8946         F8            mov	-8[bp],ax
22660                                           !BCC_EOS
22661                                           ! 2561      write_byte(0xa000,addr,AL);
22662                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22663 5B78           8A46         06            mov	al,6[bp]
22664 5B7B           30E4                       xor	ah,ah
22665 5B7D           50                         push	ax
22666                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22667 5B7E           FF76         F8            push	-8[bp]
22668                                           ! Debug: list unsigned int = const $A000 (used reg = )
22669 5B81           B8                   A000  mov	ax,#$A000
22670 5B84           50                         push	ax
22671                                           ! Debug: func () void = write_byte+0 (used reg = )
22672 5B85           E8         1FBB            call	_write_byte
22673 5B88           83C4                   06  add	sp,*6
22674                                           !BCC_EOS
22675                                           ! 2562      break;
22676 5B8B           EB           1B            jmp .1A3
22677                                           !BCC_EOS
22678                                           ! 2563   }
22679                                           ! 2564 }
22680 5B8D           EB           19            jmp .1A3
22681                       00005B8F            .1A5:
22682 5B8F           2C                     02  sub	al,*2
22683 5B91   7503    E9         FE7C            beq 	.1AA
22684 5B96           2C                     01  sub	al,*1
22685 5B98   7503    E9         FDCF            beq 	.1A7
22686 5B9D           2C                     01  sub	al,*1
22687 5B9F   7503    E9         FDC8            beq 	.1A6
22688 5BA4           2C                     01  sub	al,*1
22689 5BA6           74           B3            je 	.1B6
22690                       00005BA8            .1A3:
22691                       FFFFFFF6            ..FFF8	=	-$A
22692 5BA8           89EC                       mov	sp,bp
22693 5BAA           5D                         pop	bp
22694 5BAB           C3                         ret
22695                                           ! 2565 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
22696                                           ! Register BX used in function biosfn_write_pixel
22697                       00005BAC            _biosfn_read_pixel:
22698                                           !BCC_EOS
22699                                           !BCC_EOS
22700                                           !BCC_EOS
22701                                           !BCC_EOS
22702                                           ! 2566 {
22703                                           ! 2567  Bit8u mode,line,mask,attr,data,i;
22704                                           !BCC_EOS
22705                                           ! 2568  Bit16u addr;
22706                                           !BCC_EOS
22707                                           ! 2569  Bit16u ss=get_SS();
22708 5BAC           55                         push	bp
22709 5BAD           89E5                       mov	bp,sp
22710 5BAF           83C4                   F6  add	sp,*-$A
22711                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
22712 5BB2           E8         1FF4            call	_get_SS
22713                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
22714 5BB5           8946         F6            mov	-$A[bp],ax
22715                                           !BCC_EOS
22716                                           ! 2570  mode=read_byte(0x40,0x49);
22717                                           ! Debug: list int = const $49 (used reg = )
22718 5BB8           B8                   0049  mov	ax,*$49
22719 5BBB           50                         push	ax
22720                                           ! Debug: list int = const $40 (used reg = )
22721 5BBC           B8                   0040  mov	ax,*$40
22722 5BBF           50                         push	ax
22723                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22724 5BC0           E8         1F5A            call	_read_byte
22725 5BC3           83C4                   04  add	sp,*4
22726                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
22727 5BC6           8846         FF            mov	-1[bp],al
22728                                           !BCC_EOS
22729                                           ! 2571  line=find_vga_entry(mode);
22730                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
22731 5BC9           8A46         FF            mov	al,-1[bp]
22732 5BCC           30E4                       xor	ah,ah
22733 5BCE           50                         push	ax
22734                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22735 5BCF           E8         1E5F            call	_find_vga_entry
22736 5BD2           44                         inc	sp
22737 5BD3           44                         inc	sp
22738                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
22739 5BD4           8846         FE            mov	-2[bp],al
22740                                           !BCC_EOS
22741                                           ! 2572  if(line==0xFF)return;
22742                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
22743 5BD7           8A46         FE            mov	al,-2[bp]
22744 5BDA           3C                     FF  cmp	al,#$FF
22745 5BDC           75           04            jne 	.1B7
22746                       00005BDE            .1B8:
22747 5BDE           89EC                       mov	sp,bp
22748 5BE0           5D                         pop	bp
22749 5BE1           C3                         ret
22750                                           !BCC_EOS
22751                                           ! 2573  if(vga_modes[line].class==0x00)return;
22752                       00005BE2            .1B7:
22753                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22754 5BE2           8A46         FE            mov	al,-2[bp]
22755 5BE5           30E4                       xor	ah,ah
22756 5BE7           B1                     03  mov	cl,*3
22757 5BE9           D3E0                       shl	ax,cl
22758 5BEB           89C3                       mov	bx,ax
22759 5BED           81C3                 01B6  add	bx,#_vga_modes
22760                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22761 5BF1           8A47         01            mov	al,1[bx]
22762 5BF4           84C0                       test	al,al
22763 5BF6           75           04            jne 	.1B9
22764                       00005BF8            .1BA:
22765 5BF8           89EC                       mov	sp,bp
22766 5BFA           5D                         pop	bp
22767 5BFB           C3                         ret
22768                                           !BCC_EOS
22769                                           ! 2574  switch(vga_modes[line].memmodel)
22770                       00005BFC            .1B9:
22771                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22772 5BFC           8A46         FE            mov	al,-2[bp]
22773 5BFF           30E4                       xor	ah,ah
22774 5C01           B1                     03  mov	cl,*3
22775 5C03           D3E0                       shl	ax,cl
22776 5C05           89C3                       mov	bx,ax
22777 5C07           81C3                 01B6  add	bx,#_vga_modes
22778 5C0B           8A47         02            mov	al,2[bx]
22779                                           ! 2575   {
22780 5C0E           E9         0167            br 	.1BD
22781                                           ! 2576    case 0x04:
22782                                           ! 2577    case 0x03:
22783                       00005C11            .1BE:
22784                                           ! 2578      addr = CX/8+
22785                       00005C11            .1BF:
22786                                           ! 2578 DX*read_word(0x40,0x4A);
22787                                           ! Debug: list int = const $4A (used reg = )
22788 5C11           B8                   004A  mov	ax,*$4A
22789 5C14           50                         push	ax
22790                                           ! Debug: list int = const $40 (used reg = )
22791 5C15           B8                   0040  mov	ax,*$40
22792 5C18           50                         push	ax
22793                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22794 5C19           E8         1F14            call	_read_word
22795 5C1C           83C4                   04  add	sp,*4
22796                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
22797                                           ! Debug: expression subtree swapping
22798 5C1F           8B4E         08            mov	cx,8[bp]
22799 5C22           F7E9                       imul	cx
22800 5C24           50                         push	ax
22801                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
22802 5C25           8B46         06            mov	ax,6[bp]
22803 5C28           B1                     03  mov	cl,*3
22804 5C2A           D3E8                       shr	ax,cl
22805                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22806 5C2C           0346         F4            add	ax,0+..FFF7[bp]
22807 5C2F           44                         inc	sp
22808 5C30           44                         inc	sp
22809                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22810 5C31           8946         F8            mov	-8[bp],ax
22811                                           !BCC_EOS
22812                                           ! 2579      mask = 0x80 >> (CX & 0x07);
22813                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
22814 5C34           8A46         06            mov	al,6[bp]
22815 5C37           24                     07  and	al,*7
22816                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22817 5C39           30E4                       xor	ah,ah
22818 5C3B           89C3                       mov	bx,ax
22819 5C3D           B8                   0080  mov	ax,#$80
22820 5C40           89D9                       mov	cx,bx
22821 5C42           D3F8                       sar	ax,cl
22822                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
22823 5C44           8846         FD            mov	-3[bp],al
22824                                           !BCC_EOS
22825                                           ! 2580      attr = 0x00;
22826                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
22827 5C47           30C0                       xor	al,al
22828 5C49           8846         FC            mov	-4[bp],al
22829                                           !BCC_EOS
22830                                           ! 2581      for(i=0;i<4;i++)
22831                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
22832 5C4C           30C0                       xor	al,al
22833 5C4E           8846         FA            mov	-6[bp],al
22834                                           !BCC_EOS
22835                                           !BCC_EOS
22836                                           ! 2582       {
22837 5C51           EB           4B            jmp .1C2
22838                       00005C53            .1C3:
22839                                           ! 2583        outw(0x3ce, (i << 8) | 0x04);
22840                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
22841 5C53           8A46         FA            mov	al,-6[bp]
22842 5C56           30E4                       xor	ah,ah
22843 5C58           88C4                       mov	ah,al
22844 5C5A           30C0                       xor	al,al
22845                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
22846 5C5C           0C                     04  or	al,*4
22847                                           ! Debug: list unsigned int = ax+0 (used reg = )
22848 5C5E           50                         push	ax
22849                                           ! Debug: list int = const $3CE (used reg = )
22850 5C5F           B8                   03CE  mov	ax,#$3CE
22851 5C62           50                         push	ax
22852                                           ! Debug: func () void = outw+0 (used reg = )
22853 5C63           E8         1F33            call	_outw
22854 5C66           83C4                   04  add	sp,*4
22855                                           !BCC_EOS
22856                                           ! 2584        data = read_byte(0xa000,addr) & mask;
22857                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22858 5C69           FF76         F8            push	-8[bp]
22859                                           ! Debug: list unsigned int = const $A000 (used reg = )
22860 5C6C           B8                   A000  mov	ax,#$A000
22861 5C6F           50                         push	ax
22862                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22863 5C70           E8         1EAA            call	_read_byte
22864 5C73           83C4                   04  add	sp,*4
22865                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
22866 5C76           2246         FD            and	al,-3[bp]
22867                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
22868 5C79           8846         FB            mov	-5[bp],al
22869                                           !BCC_EOS
22870                                           ! 2585        if (data > 0) attr |= (0x01 << i);
22871                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
22872 5C7C           8A46         FB            mov	al,-5[bp]
22873 5C7F           84C0                       test	al,al
22874 5C81           74           14            je  	.1C4
22875                       00005C83            .1C5:
22876                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
22877 5C83           8A46         FA            mov	al,-6[bp]
22878 5C86           30E4                       xor	ah,ah
22879 5C88           89C3                       mov	bx,ax
22880 5C8A           B8                   0001  mov	ax,*1
22881 5C8D           89D9                       mov	cx,bx
22882 5C8F           D3E0                       shl	ax,cl
22883                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
22884 5C91           0A46         FC            or	al,-4[bp]
22885 5C94           8846         FC            mov	-4[bp],al
22886                                           !BCC_EOS
22887                                           ! 2586       }
22888                       00005C97            .1C4:
22889                                           ! 2587      break;
22890                       00005C97            .1C1:
22891                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
22892 5C97           8A46         FA            mov	al,-6[bp]
22893 5C9A           40                         inc	ax
22894 5C9B           8846         FA            mov	-6[bp],al
22895                       00005C9E            .1C2:
22896                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
22897 5C9E           8A46         FA            mov	al,-6[bp]
22898 5CA1           3C                     04  cmp	al,*4
22899 5CA3           72           AE            jb 	.1C3
22900                       00005CA5            .1C6:
22901                       00005CA5            .1C0:
22902 5CA5           E9         00EB            br 	.1BB
22903                                           !BCC_EOS
22904                                           ! 2588    case 0x02:
22905                                           ! 2589      addr=(CX>>2)+(DX>>1)*80;
22906                       00005CA8            .1C7:
22907                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
22908 5CA8           8B46         08            mov	ax,8[bp]
22909 5CAB           D1E8                       shr	ax,*1
22910                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22911 5CAD           B9                   0050  mov	cx,*$50
22912 5CB0           F7E9                       imul	cx
22913 5CB2           50                         push	ax
22914                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
22915 5CB3           8B46         06            mov	ax,6[bp]
22916 5CB6           D1E8                       shr	ax,*1
22917 5CB8           D1E8                       shr	ax,*1
22918                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22919 5CBA           0346         F4            add	ax,0+..FFF7[bp]
22920 5CBD           44                         inc	sp
22921 5CBE           44                         inc	sp
22922                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22923 5CBF           8946         F8            mov	-8[bp],ax
22924                                           !BCC_EOS
22925                                           ! 2590      if (DX & 1) addr += 0x2000;
22926                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
22927 5CC2           8A46         08            mov	al,8[bp]
22928 5CC5           24                     01  and	al,*1
22929 5CC7           84C0                       test	al,al
22930 5CC9           74           09            je  	.1C8
22931                       00005CCB            .1C9:
22932                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
22933 5CCB           8B46         F8            mov	ax,-8[bp]
22934 5CCE           05                   2000  add	ax,#$2000
22935 5CD1           8946         F8            mov	-8[bp],ax
22936                                           !BCC_EOS
22937                                           ! 2591      data = read_byte(0xb800,addr);
22938                       00005CD4            .1C8:
22939                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22940 5CD4           FF76         F8            push	-8[bp]
22941                                           ! Debug: list unsigned int = const $B800 (used reg = )
22942 5CD7           B8                   B800  mov	ax,#$B800
22943 5CDA           50                         push	ax
22944                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22945 5CDB           E8         1E3F            call	_read_byte
22946 5CDE           83C4                   04  add	sp,*4
22947                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
22948 5CE1           8846         FB            mov	-5[bp],al
22949                                           !BCC_EOS
22950                                           ! 2592      if(vga_modes[line].pixbits==2)
22951                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22952 5CE4           8A46         FE            mov	al,-2[bp]
22953 5CE7           30E4                       xor	ah,ah
22954 5CE9           B1                     03  mov	cl,*3
22955 5CEB           D3E0                       shl	ax,cl
22956 5CED           89C3                       mov	bx,ax
22957 5CEF           81C3                 01B6  add	bx,#_vga_modes
22958                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22959 5CF3           8A47         03            mov	al,3[bx]
22960 5CF6           3C                     02  cmp	al,*2
22961 5CF8           75           25            jne 	.1CA
22962                       00005CFA            .1CB:
22963                                           ! 2593       {
22964                                           ! 2594        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
22965                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
22966 5CFA           8A46         06            mov	al,6[bp]
22967 5CFD           24                     03  and	al,*3
22968                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22969 5CFF           50                         push	ax
22970 5D00           B8                   0003  mov	ax,*3
22971 5D03           2A46         F4            sub	al,0+..FFF7[bp]
22972 5D06           80DC                   00  sbb	ah,*0
22973 5D09           44                         inc	sp
22974 5D0A           44                         inc	sp
22975                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22976 5D0B           D1E0                       shl	ax,*1
22977                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
22978 5D0D           89C3                       mov	bx,ax
22979 5D0F           8A46         FB            mov	al,-5[bp]
22980 5D12           30E4                       xor	ah,ah
22981 5D14           89D9                       mov	cx,bx
22982 5D16           D3E8                       shr	ax,cl
22983                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
22984 5D18           24                     03  and	al,*3
22985                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
22986 5D1A           8846         FC            mov	-4[bp],al
22987                                           !BCC_EOS
22988                                           ! 2595       }
22989                                           ! 2596      else
22990                                           ! 2597       {
22991 5D1D           EB           21            jmp .1CC
22992                       00005D1F            .1CA:
22993                                           ! 2598        attr = (data >> (7 - (CX & 0x07))) & 0x01;
22994                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
22995 5D1F           8A46         06            mov	al,6[bp]
22996 5D22           24                     07  and	al,*7
22997                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22998 5D24           50                         push	ax
22999 5D25           B8                   0007  mov	ax,*7
23000 5D28           2A46         F4            sub	al,0+..FFF7[bp]
23001 5D2B           80DC                   00  sbb	ah,*0
23002 5D2E           44                         inc	sp
23003 5D2F           44                         inc	sp
23004                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23005 5D30           89C3                       mov	bx,ax
23006 5D32           8A46         FB            mov	al,-5[bp]
23007 5D35           30E4                       xor	ah,ah
23008 5D37           89D9                       mov	cx,bx
23009 5D39           D3E8                       shr	ax,cl
23010                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23011 5D3B           24                     01  and	al,*1
23012                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23013 5D3D           8846         FC            mov	-4[bp],al
23014                                           !BCC_EOS
23015                                           ! 2599       }
23016                                           ! 2600      break;
23017                       00005D40            .1CC:
23018 5D40           EB           51            jmp .1BB
23019                                           !BCC_EOS
23020                                           ! 2601    case 0x05:
23021                                           ! 2602      addr=CX+DX*(read_word(0x40,0x4A)*8);
23022                       00005D42            .1CD:
23023                                           ! Debug: list int = const $4A (used reg = )
23024 5D42           B8                   004A  mov	ax,*$4A
23025 5D45           50                         push	ax
23026                                           ! Debug: list int = const $40 (used reg = )
23027 5D46           B8                   0040  mov	ax,*$40
23028 5D49           50                         push	ax
23029                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23030 5D4A           E8         1DE3            call	_read_word
23031 5D4D           83C4                   04  add	sp,*4
23032                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23033 5D50           B1                     03  mov	cl,*3
23034 5D52           D3E0                       shl	ax,cl
23035                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23036                                           ! Debug: expression subtree swapping
23037 5D54           8B4E         08            mov	cx,8[bp]
23038 5D57           F7E9                       imul	cx
23039                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23040                                           ! Debug: expression subtree swapping
23041 5D59           0346         06            add	ax,6[bp]
23042                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23043 5D5C           8946         F8            mov	-8[bp],ax
23044                                           !BCC_EOS
23045                                           ! 2603      attr=read_byte(0xa000,addr);
23046                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23047 5D5F           FF76         F8            push	-8[bp]
23048                                           ! Debug: list unsigned int = const $A000 (used reg = )
23049 5D62           B8                   A000  mov	ax,#$A000
23050 5D65           50                         push	ax
23051                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23052 5D66           E8         1DB4            call	_read_byte
23053 5D69           83C4                   04  add	sp,*4
23054                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23055 5D6C           8846         FC            mov	-4[bp],al
23056                                           !BCC_EOS
23057                                           ! 2604      break;
23058 5D6F           EB           22            jmp .1BB
23059                                           !BCC_EOS
23060                                           ! 2605    default:
23061                                           ! 2606      attr = 0;
23062                       00005D71            .1CE:
23063                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23064 5D71           30C0                       xor	al,al
23065 5D73           8846         FC            mov	-4[bp],al
23066                                           !BCC_EOS
23067                                           ! 2607   }
23068                                           ! 2608  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23069 5D76           EB           1B            jmp .1BB
23070                       00005D78            .1BD:
23071 5D78           2C                     02  sub	al,*2
23072 5D7A   7503    E9         FF29            beq 	.1C7
23073 5D7F           2C                     01  sub	al,*1
23074 5D81   7503    E9         FE8B            beq 	.1BF
23075 5D86           2C                     01  sub	al,*1
23076 5D88   7503    E9         FE84            beq 	.1BE
23077 5D8D           2C                     01  sub	al,*1
23078 5D8F           74           B1            je 	.1CD
23079 5D91           EB           DE            jmp	.1CE
23080                       00005D93            .1BB:
23081                       FFFFFFF4            ..FFF7	=	-$C
23082                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23083 5D93           FF76         0A            push	$A[bp]
23084                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23085 5D96           FF76         F6            push	-$A[bp]
23086                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23087 5D99           E8         1D94            call	_read_word
23088 5D9C           83C4                   04  add	sp,*4
23089                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23090 5D9F           30C0                       xor	al,al
23091                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23092 5DA1           0A46         FC            or	al,-4[bp]
23093                                           ! Debug: list unsigned int = ax+0 (used reg = )
23094 5DA4           50                         push	ax
23095                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23096 5DA5           FF76         0A            push	$A[bp]
23097                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23098 5DA8           FF76         F6            push	-$A[bp]
23099                                           ! Debug: func () void = write_word+0 (used reg = )
23100 5DAB           E8         1DAD            call	_write_word
23101 5DAE           83C4                   06  add	sp,*6
23102                                           !BCC_EOS
23103                                           ! 2609 }
23104 5DB1           89EC                       mov	sp,bp
23105 5DB3           5D                         pop	bp
23106 5DB4           C3                         ret
23107                                           ! 2610 static void biosfn_write_teletype (car, page, attr, flag)
23108                                           ! Register BX used in function biosfn_read_pixel
23109                                           ! 2611 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23110                       00005DB5            _biosfn_write_teletype:
23111                                           !BCC_EOS
23112                                           !BCC_EOS
23113                                           !BCC_EOS
23114                                           !BCC_EOS
23115                                           ! 2612 {
23116                                           ! 2613  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23117                                           !BCC_EOS
23118                                           ! 2614  Bit16u nbcols,nbrows,address;
23119                                           !BCC_EOS
23120                                           ! 2615  Bit16u cursor,dummy;
23121                                           !BCC_EOS
23122                                           ! 2616  if(page==0xff)
23123 5DB5           55                         push	bp
23124 5DB6           89E5                       mov	bp,sp
23125 5DB8           83C4                   F0  add	sp,*-$10
23126                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23127 5DBB           8A46         06            mov	al,6[bp]
23128 5DBE           3C                     FF  cmp	al,#$FF
23129 5DC0           75           11            jne 	.1CF
23130                       00005DC2            .1D0:
23131                                           ! 2617   page=read_byte(0x40,0x62);
23132                                           ! Debug: list int = const $62 (used reg = )
23133 5DC2           B8                   0062  mov	ax,*$62
23134 5DC5           50                         push	ax
23135                                           ! Debug: list int = const $40 (used reg = )
23136 5DC6           B8                   0040  mov	ax,*$40
23137 5DC9           50                         push	ax
23138                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23139 5DCA           E8         1D50            call	_read_byte
23140 5DCD           83C4                   04  add	sp,*4
23141                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23142 5DD0           8846         06            mov	6[bp],al
23143                                           !BCC_EOS
23144                                           ! 2618  mode=read_byte(0x40,0x49);
23145                       00005DD3            .1CF:
23146                                           ! Debug: list int = const $49 (used reg = )
23147 5DD3           B8                   0049  mov	ax,*$49
23148 5DD6           50                         push	ax
23149                                           ! Debug: list int = const $40 (used reg = )
23150 5DD7           B8                   0040  mov	ax,*$40
23151 5DDA           50                         push	ax
23152                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23153 5DDB           E8         1D3F            call	_read_byte
23154 5DDE           83C4                   04  add	sp,*4
23155                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23156 5DE1           8846         FC            mov	-4[bp],al
23157                                           !BCC_EOS
23158                                           ! 2619  line=find_vga_entry(mode);
23159                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23160 5DE4           8A46         FC            mov	al,-4[bp]
23161 5DE7           30E4                       xor	ah,ah
23162 5DE9           50                         push	ax
23163                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23164 5DEA           E8         1C44            call	_find_vga_entry
23165 5DED           44                         inc	sp
23166 5DEE           44                         inc	sp
23167                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23168 5DEF           8846         FB            mov	-5[bp],al
23169                                           !BCC_EOS
23170                                           ! 2620  if(line==0xFF)return;
23171                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23172 5DF2           8A46         FB            mov	al,-5[bp]
23173 5DF5           3C                     FF  cmp	al,#$FF
23174 5DF7           75           04            jne 	.1D1
23175                       00005DF9            .1D2:
23176 5DF9           89EC                       mov	sp,bp
23177 5DFB           5D                         pop	bp
23178 5DFC           C3                         ret
23179                                           !BCC_EOS
23180                                           ! 2621  biosfn_get_cursor_pos(page,&dummy,&cursor);
23181                       00005DFD            .1D1:
23182                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23183 5DFD           8D5E         F2            lea	bx,-$E[bp]
23184 5E00           53                         push	bx
23185                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23186 5E01           8D5E         F0            lea	bx,-$10[bp]
23187 5E04           53                         push	bx
23188                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23189 5E05           8A46         06            mov	al,6[bp]
23190 5E08           30E4                       xor	ah,ah
23191 5E0A           50                         push	ax
23192                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23193 5E0B           E8         E53E            call	_biosfn_get_cursor_pos
23194 5E0E           83C4                   06  add	sp,*6
23195                                           !BCC_EOS
23196                                           ! 2622  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23197                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23198 5E11           8A46         F2            mov	al,-$E[bp]
23199                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23200 5E14           8846         FE            mov	-2[bp],al
23201                                           !BCC_EOS
23202                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23203 5E17           8B46         F2            mov	ax,-$E[bp]
23204 5E1A           30C0                       xor	al,al
23205                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23206 5E1C           88E0                       mov	al,ah
23207 5E1E           30E4                       xor	ah,ah
23208                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23209 5E20           8846         FD            mov	-3[bp],al
23210                                           !BCC_EOS
23211                                           ! 2623  nbrows=read_byte(0x40,0x84)+1;
23212                                           ! Debug: list int = const $84 (used reg = )
23213 5E23           B8                   0084  mov	ax,#$84
23214 5E26           50                         push	ax
23215                                           ! Debug: list int = const $40 (used reg = )
23216 5E27           B8                   0040  mov	ax,*$40
23217 5E2A           50                         push	ax
23218                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23219 5E2B           E8         1CEF            call	_read_byte
23220 5E2E           83C4                   04  add	sp,*4
23221                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23222 5E31           30E4                       xor	ah,ah
23223                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23224 5E33           40                         inc	ax
23225 5E34           8946         F6            mov	-$A[bp],ax
23226                                           !BCC_EOS
23227                                           ! 2624  nbcols=read_word(0x40,0x4A);
23228                                           ! Debug: list int = const $4A (used reg = )
23229 5E37           B8                   004A  mov	ax,*$4A
23230 5E3A           50                         push	ax
23231                                           ! Debug: list int = const $40 (used reg = )
23232 5E3B           B8                   0040  mov	ax,*$40
23233 5E3E           50                         push	ax
23234                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23235 5E3F           E8         1CEE            call	_read_word
23236 5E42           83C4                   04  add	sp,*4
23237                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23238 5E45           8946         F8            mov	-8[bp],ax
23239                                           !BCC_EOS
23240                                           ! 2625  switch(car)
23241 5E48           8A46         04            mov	al,4[bp]
23242                                           ! 2626   {
23243 5E4B           E9         01ED            br 	.1D5
23244                                           ! 2627    case 7:
23245                                           ! 2628     break;
23246                       00005E4E            .1D6:
23247 5E4E           E9         0210            br 	.1D3
23248                                           !BCC_EOS
23249                                           ! 2629    case 8:
23250                                           ! 2630     if(xcurs>0)xcurs--;
23251                       00005E51            .1D7:
23252                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23253 5E51           8A46         FE            mov	al,-2[bp]
23254 5E54           84C0                       test	al,al
23255 5E56           74           07            je  	.1D8
23256                       00005E58            .1D9:
23257                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23258 5E58           8A46         FE            mov	al,-2[bp]
23259 5E5B           48                         dec	ax
23260 5E5C           8846         FE            mov	-2[bp],al
23261                                           !BCC_EOS
23262                                           ! 2631     break;
23263                       00005E5F            .1D8:
23264 5E5F           E9         01FF            br 	.1D3
23265                                           !BCC_EOS
23266                                           ! 2632    case '\r':
23267                                           ! 2633     xcurs=0;
23268                       00005E62            .1DA:
23269                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23270 5E62           30C0                       xor	al,al
23271 5E64           8846         FE            mov	-2[bp],al
23272                                           !BCC_EOS
23273                                           ! 2634     break;
23274 5E67           E9         01F7            br 	.1D3
23275                                           !BCC_EOS
23276                                           ! 2635    case '\n':
23277                                           ! 2636     ycurs++;
23278                       00005E6A            .1DB:
23279                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23280 5E6A           8A46         FD            mov	al,-3[bp]
23281 5E6D           40                         inc	ax
23282 5E6E           8846         FD            mov	-3[bp],al
23283                                           !BCC_EOS
23284                                           ! 2637     break;
23285 5E71           E9         01ED            br 	.1D3
23286                                           !BCC_EOS
23287                                           ! 2638    case '\t':
23288                                           ! 2639     do
23289                       00005E74            .1DC:
23290                                           ! 2640      {
23291                       00005E74            .1DF:
23292                                           ! 2641       biosfn_write_teletype(' ',page,attr,flag);
23293                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23294 5E74           8A46         0A            mov	al,$A[bp]
23295 5E77           30E4                       xor	ah,ah
23296 5E79           50                         push	ax
23297                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23298 5E7A           8A46         08            mov	al,8[bp]
23299 5E7D           30E4                       xor	ah,ah
23300 5E7F           50                         push	ax
23301                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23302 5E80           8A46         06            mov	al,6[bp]
23303 5E83           30E4                       xor	ah,ah
23304 5E85           50                         push	ax
23305                                           ! Debug: list int = const $20 (used reg = )
23306 5E86           B8                   0020  mov	ax,*$20
23307 5E89           50                         push	ax
23308                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23309 5E8A           E8         FF28            call	_biosfn_write_teletype
23310 5E8D           83C4                   08  add	sp,*8
23311                                           !BCC_EOS
23312                                           ! 2642       biosfn_get_cursor_pos(page,&dummy,&cursor);
23313                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23314 5E90           8D5E         F2            lea	bx,-$E[bp]
23315 5E93           53                         push	bx
23316                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23317 5E94           8D5E         F0            lea	bx,-$10[bp]
23318 5E97           53                         push	bx
23319                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23320 5E98           8A46         06            mov	al,6[bp]
23321 5E9B           30E4                       xor	ah,ah
23322 5E9D           50                         push	ax
23323                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23324 5E9E           E8         E4AB            call	_biosfn_get_cursor_pos
23325 5EA1           83C4                   06  add	sp,*6
23326                                           !BCC_EOS
23327                                           ! 2643       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23328                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23329 5EA4           8A46         F2            mov	al,-$E[bp]
23330                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23331 5EA7           8846         FE            mov	-2[bp],al
23332                                           !BCC_EOS
23333                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23334 5EAA           8B46         F2            mov	ax,-$E[bp]
23335 5EAD           30C0                       xor	al,al
23336                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23337 5EAF           88E0                       mov	al,ah
23338 5EB1           30E4                       xor	ah,ah
23339                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23340 5EB3           8846         FD            mov	-3[bp],al
23341                                           !BCC_EOS
23342                                           ! 2644      }while(xcurs%8==0);
23343                       00005EB6            .1DE:
23344                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23345 5EB6           8A46         FE            mov	al,-2[bp]
23346 5EB9           30E4                       xor	ah,ah
23347 5EBB           24                     07  and	al,*7
23348                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23349 5EBD           84C0                       test	al,al
23350 5EBF           74           B3            je 	.1DF
23351                       00005EC1            .1E0:
23352                                           !BCC_EOS
23353                                           ! 2645     break;
23354                       00005EC1            .1DD:
23355 5EC1           E9         019D            br 	.1D3
23356                                           !BCC_EOS
23357                                           ! 2646    default:
23358                                           ! 2647     if(vga_modes[line].class==0x00)
23359                       00005EC4            .1E1:
23360                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23361 5EC4           8A46         FB            mov	al,-5[bp]
23362 5EC7           30E4                       xor	ah,ah
23363 5EC9           B1                     03  mov	cl,*3
23364 5ECB           D3E0                       shl	ax,cl
23365 5ECD           89C3                       mov	bx,ax
23366 5ECF           81C3                 01B6  add	bx,#_vga_modes
23367                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23368 5ED3           8A47         01            mov	al,1[bx]
23369 5ED6           84C0                       test	al,al
23370 5ED8   7403    E9         0082            bne 	.1E2
23371                       00005EDD            .1E3:
23372                                           ! 2648      {
23373                                           ! 2649       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23374                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23375 5EDD           8A46         FD            mov	al,-3[bp]
23376 5EE0           30E4                       xor	ah,ah
23377 5EE2           8B4E         F8            mov	cx,-8[bp]
23378 5EE5           F7E9                       imul	cx
23379                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23380                                           ! Debug: expression subtree swapping
23381 5EE7           0246         FE            add	al,-2[bp]
23382 5EEA           80D4                   00  adc	ah,*0
23383                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23384 5EED           D1E0                       shl	ax,*1
23385 5EEF           50                         push	ax
23386                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23387 5EF0           8B46         F8            mov	ax,-8[bp]
23388 5EF3           8B4E         F6            mov	cx,-$A[bp]
23389 5EF6           F7E9                       imul	cx
23390                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23391 5EF8           D1E0                       shl	ax,*1
23392                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23393 5EFA           0C                     FF  or	al,#$FF
23394                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23395                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23396 5EFC           89C3                       mov	bx,ax
23397 5EFE           8A46         06            mov	al,6[bp]
23398 5F01           30E4                       xor	ah,ah
23399 5F03           93                         xchg	ax,bx
23400 5F04           40                         inc	ax
23401 5F05           89D9                       mov	cx,bx
23402 5F07           F7E9                       imul	cx
23403                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23404 5F09           0346         EE            add	ax,0+..FFF6[bp]
23405 5F0C           44                         inc	sp
23406 5F0D           44                         inc	sp
23407                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23408 5F0E           8946         F4            mov	-$C[bp],ax
23409                                           !BCC_EOS
23410                                           ! 2650       write_byte(vga_modes[line].sstart,address,car);
23411                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23412 5F11           8A46         04            mov	al,4[bp]
23413 5F14           30E4                       xor	ah,ah
23414 5F16           50                         push	ax
23415                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23416 5F17           FF76         F4            push	-$C[bp]
23417                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23418 5F1A           8A46         FB            mov	al,-5[bp]
23419 5F1D           30E4                       xor	ah,ah
23420 5F1F           B1                     03  mov	cl,*3
23421 5F21           D3E0                       shl	ax,cl
23422 5F23           89C3                       mov	bx,ax
23423 5F25           81C3                 01B6  add	bx,#_vga_modes
23424                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23425 5F29           FF77         04            push	4[bx]
23426                                           ! Debug: func () void = write_byte+0 (used reg = )
23427 5F2C           E8         1C14            call	_write_byte
23428 5F2F           83C4                   06  add	sp,*6
23429                                           !BCC_EOS
23430                                           ! 2651       if(flag==3)
23431                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23432 5F32           8A46         0A            mov	al,$A[bp]
23433 5F35           3C                     03  cmp	al,*3
23434 5F37           75           23            jne 	.1E4
23435                       00005F39            .1E5:
23436                                           ! 2652        write_byte(vga_modes[line].sstart,address+1,attr);
23437                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23438 5F39           8A46         08            mov	al,8[bp]
23439 5F3C           30E4                       xor	ah,ah
23440 5F3E           50                         push	ax
23441                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23442 5F3F           8B46         F4            mov	ax,-$C[bp]
23443                                           ! Debug: list unsigned int = ax+1 (used reg = )
23444 5F42           40                         inc	ax
23445 5F43           50                         push	ax
23446                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23447 5F44           8A46         FB            mov	al,-5[bp]
23448 5F47           30E4                       xor	ah,ah
23449 5F49           B1                     03  mov	cl,*3
23450 5F4B           D3E0                       shl	ax,cl
23451 5F4D           89C3                       mov	bx,ax
23452 5F4F           81C3                 01B6  add	bx,#_vga_modes
23453                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23454 5F53           FF77         04            push	4[bx]
23455                                           ! Debug: func () void = write_byte+0 (used reg = )
23456 5F56           E8         1BEA            call	_write_byte
23457 5F59           83C4                   06  add	sp,*6
23458                                           !BCC_EOS
23459                                           ! 2653      }
23460                       00005F5C            .1E4:
23461                                           ! 2654     else
23462                                           ! 2655      {
23463 5F5C           E9         00D3            br 	.1E6
23464                       00005F5F            .1E2:
23465                                           ! 2656       cheight=video_param_table[line_to_vpti[line]].cheight;
23466                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23467 5F5F           8A46         FB            mov	al,-5[bp]
23468 5F62           30E4                       xor	ah,ah
23469 5F64           89C3                       mov	bx,ax
23470                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23471 5F66           8A87       0236            mov	al,_line_to_vpti[bx]
23472 5F6A           30E4                       xor	ah,ah
23473 5F6C           B1                     06  mov	cl,*6
23474 5F6E           D3E0                       shl	ax,cl
23475 5F70           89C3                       mov	bx,ax
23476 5F72           81C3                 024A  add	bx,#_video_param_table
23477                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23478 5F76           8A47         02            mov	al,2[bx]
23479 5F79           8846         FF            mov	-1[bp],al
23480                                           !BCC_EOS
23481                                           ! 2657       bpp=vga_modes[line].pixbits;
23482                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23483 5F7C           8A46         FB            mov	al,-5[bp]
23484 5F7F           30E4                       xor	ah,ah
23485 5F81           B1                     03  mov	cl,*3
23486 5F83           D3E0                       shl	ax,cl
23487 5F85           89C3                       mov	bx,ax
23488 5F87           81C3                 01B6  add	bx,#_vga_modes
23489                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23490 5F8B           8A47         03            mov	al,3[bx]
23491 5F8E           8846         FA            mov	-6[bp],al
23492                                           !BCC_EOS
23493                                           ! 2658       switch(vga_modes[line].memmodel)
23494                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23495 5F91           8A46         FB            mov	al,-5[bp]
23496 5F94           30E4                       xor	ah,ah
23497 5F96           B1                     03  mov	cl,*3
23498 5F98           D3E0                       shl	ax,cl
23499 5F9A           89C3                       mov	bx,ax
23500 5F9C           81C3                 01B6  add	bx,#_vga_modes
23501 5FA0           8A47         02            mov	al,2[bx]
23502                                           ! 2659        {
23503 5FA3           EB           77            jmp .1E9
23504                                           ! 2660         case 0x04:
23505                                           ! 2660 
23506                                           ! 2661         case 0x03:
23507                       00005FA5            .1EA:
23508                                           ! 2662           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
23509                       00005FA5            .1EB:
23510                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
23511 5FA5           8A46         FF            mov	al,-1[bp]
23512 5FA8           30E4                       xor	ah,ah
23513 5FAA           50                         push	ax
23514                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23515 5FAB           FF76         F8            push	-8[bp]
23516                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23517 5FAE           8A46         FD            mov	al,-3[bp]
23518 5FB1           30E4                       xor	ah,ah
23519 5FB3           50                         push	ax
23520                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23521 5FB4           8A46         FE            mov	al,-2[bp]
23522 5FB7           30E4                       xor	ah,ah
23523 5FB9           50                         push	ax
23524                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23525 5FBA           8A46         08            mov	al,8[bp]
23526 5FBD           30E4                       xor	ah,ah
23527 5FBF           50                         push	ax
23528                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23529 5FC0           8A46         04            mov	al,4[bp]
23530 5FC3           30E4                       xor	ah,ah
23531 5FC5           50                         push	ax
23532                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
23533 5FC6           E8         F08B            call	_write_gfx_char_pl4
23534 5FC9           83C4                   0C  add	sp,*$C
23535                                           !BCC_EOS
23536                                           ! 2663           break;
23537 5FCC           EB           64            jmp .1E7
23538                                           !BCC_EOS
23539                                           ! 2664         case 0x02:
23540                                           ! 2665           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
23541                       00005FCE            .1EC:
23542                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
23543 5FCE           8A46         FA            mov	al,-6[bp]
23544 5FD1           30E4                       xor	ah,ah
23545 5FD3           50                         push	ax
23546                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23547 5FD4           FF76         F8            push	-8[bp]
23548                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23549 5FD7           8A46         FD            mov	al,-3[bp]
23550 5FDA           30E4                       xor	ah,ah
23551 5FDC           50                         push	ax
23552                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23553 5FDD           8A46         FE            mov	al,-2[bp]
23554 5FE0           30E4                       xor	ah,ah
23555 5FE2           50                         push	ax
23556                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23557 5FE3           8A46         08            mov	al,8[bp]
23558 5FE6           30E4                       xor	ah,ah
23559 5FE8           50                         push	ax
23560                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23561 5FE9           8A46         04            mov	al,4[bp]
23562 5FEC           30E4                       xor	ah,ah
23563 5FEE           50                         push	ax
23564                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
23565 5FEF           E8         F1D7            call	_write_gfx_char_cga
23566 5FF2           83C4                   0C  add	sp,*$C
23567                                           !BCC_EOS
23568                                           ! 2666           break;
23569 5FF5           EB           3B            jmp .1E7
23570                                           !BCC_EOS
23571                                           ! 2667         case 0x05:
23572                                           ! 2668           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
23573                       00005FF7            .1ED:
23574                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
23575 5FF7           FF76         F8            push	-8[bp]
23576                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
23577 5FFA           8A46         FD            mov	al,-3[bp]
23578 5FFD           30E4                       xor	ah,ah
23579 5FFF           50                         push	ax
23580                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
23581 6000           8A46         FE            mov	al,-2[bp]
23582 6003           30E4                       xor	ah,ah
23583 6005           50                         push	ax
23584                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
23585 6006           8A46         08            mov	al,8[bp]
23586 6009           30E4                       xor	ah,ah
23587 600B           50                         push	ax
23588                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
23589 600C           8A46         04            mov	al,4[bp]
23590 600F           30E4                       xor	ah,ah
23591 6011           50                         push	ax
23592                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
23593 6012           E8         F3BA            call	_write_gfx_char_lin
23594 6015           83C4                   0A  add	sp,*$A
23595                                           !BCC_EOS
23596                                           ! 2669           break;
23597 6018           EB           18            jmp .1E7
23598                                           !BCC_EOS
23599                                           ! 2670        }
23600                                           ! 2671      }
23601 601A           EB           16            jmp .1E7
23602                       0000601C            .1E9:
23603 601C           2C                     02  sub	al,*2
23604 601E           74           AE            je 	.1EC
23605 6020           2C                     01  sub	al,*1
23606 6022   7503    E9         FF7E            beq 	.1EB
23607 6027           2C                     01  sub	al,*1
23608 6029   7503    E9         FF77            beq 	.1EA
23609 602E           2C                     01  sub	al,*1
23610 6030           74           C5            je 	.1ED
23611                       00006032            .1E7:
23612                                           ! 2672     xcurs++;
23613                       00006032            .1E6:
23614                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
23615 6032           8A46         FE            mov	al,-2[bp]
23616 6035           40                         inc	ax
23617 6036           8846         FE            mov	-2[bp],al
23618                                           !BCC_EOS
23619                                           ! 2673   }
23620                                           ! 2674  if(xcurs==nbcols)
23621 6039           EB           26            jmp .1D3
23622                       0000603B            .1D5:
23623 603B           2C                     07  sub	al,*7
23624 603D   7503    E9         FE0C            beq 	.1D6
23625 6042           2C                     01  sub	al,*1
23626 6044   7503    E9         FE08            beq 	.1D7
23627 6049           2C                     01  sub	al,*1
23628 604B   7503    E9         FE24            beq 	.1DC
23629 6050           2C                     01  sub	al,*1
23630 6052   7503    E9         FE13            beq 	.1DB
23631 6057           2C                     03  sub	al,*3
23632 6059   7503    E9         FE04            beq 	.1DA
23633 605E           E9         FE63            br 	.1E1
23634                       00006061            .1D3:
23635                       FFFFFFEE            ..FFF6	=	-$12
23636                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
23637 6061           8A46         FE            mov	al,-2[bp]
23638 6064           30E4                       xor	ah,ah
23639 6066           3B46         F8            cmp	ax,-8[bp]
23640 6069           75           0C            jne 	.1EE
23641                       0000606B            .1EF:
23642                                           ! 2675   {xcurs=0;
23643                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23644 606B           30C0                       xor	al,al
23645 606D           8846         FE            mov	-2[bp],al
23646                                           !BCC_EOS
23647                                           ! 2676    ycurs++;
23648                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23649 6070           8A46         FD            mov	al,-3[bp]
23650 6073           40                         inc	ax
23651 6074           8846         FD            mov	-3[bp],al
23652                                           !BCC_EOS
23653                                           ! 2677   }
23654                                           ! 2678  if(ycurs==nbrows)
23655                       00006077            .1EE:
23656                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
23657 6077           8A46         FD            mov	al,-3[bp]
23658 607A           30E4                       xor	ah,ah
23659 607C           3B46         F6            cmp	ax,-$A[bp]
23660 607F   7403    E9         00CA            bne 	.1F0
23661                       00006084            .1F1:
23662                                           ! 2679   {
23663                                           ! 2680    if(vga_modes[line].class==0x00)
23664                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23665 6084           8A46         FB            mov	al,-5[bp]
23666 6087           30E4                       xor	ah,ah
23667 6089           B1                     03  mov	cl,*3
23668 608B           D3E0                       shl	ax,cl
23669 608D           89C3                       mov	bx,ax
23670 608F           81C3                 01B6  add	bx,#_vga_modes
23671                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23672 6093           8A47         01            mov	al,1[bx]
23673 6096           84C0                       test	al,al
23674 6098   7403    E9         0081            bne 	.1F2
23675                       0000609D            .1F3:
23676                                           ! 2681     {
23677                                           ! 2682      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
23678                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
23679 609D           8A46         FD            mov	al,-3[bp]
23680 60A0           30E4                       xor	ah,ah
23681                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
23682 60A2           48                         dec	ax
23683 60A3           8B4E         F8            mov	cx,-8[bp]
23684 60A6           F7E9                       imul	cx
23685                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23686                                           ! Debug: expression subtree swapping
23687 60A8           0246         FE            add	al,-2[bp]
23688 60AB           80D4                   00  adc	ah,*0
23689                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23690 60AE           D1E0                       shl	ax,*1
23691 60B0           50                         push	ax
23692                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23693 60B1           8B46         F8            mov	ax,-8[bp]
23694 60B4           8B4E         F6            mov	cx,-$A[bp]
23695 60B7           F7E9                       imul	cx
23696                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23697 60B9           D1E0                       shl	ax,*1
23698                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23699 60BB           0C                     FF  or	al,#$FF
23700                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23701                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23702 60BD           89C3                       mov	bx,ax
23703 60BF           8A46         06            mov	al,6[bp]
23704 60C2           30E4                       xor	ah,ah
23705 60C4           93                         xchg	ax,bx
23706 60C5           40                         inc	ax
23707 60C6           89D9                       mov	cx,bx
23708 60C8           F7E9                       imul	cx
23709                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23710 60CA           0346         EE            add	ax,-$12[bp]
23711 60CD           44                         inc	sp
23712 60CE           44                         inc	sp
23713                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23714 60CF           8946         F4            mov	-$C[bp],ax
23715                                           !BCC_EOS
23716                                           ! 2683      attr=read_byte(vga_modes[line].sstart,address+1);
23717                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
23718 60D2           8B46         F4            mov	ax,-$C[bp]
23719                                           ! Debug: list unsigned int = ax+1 (used reg = )
23720 60D5           40                         inc	ax
23721 60D6           50                         push	ax
23722                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$10] struct  = vga_modes+0 (used reg = )
23723 60D7           8A46         FB            mov	al,-5[bp]
23724 60DA           30E4                       xor	ah,ah
23725 60DC           B1                     03  mov	cl,*3
23726 60DE           D3E0                       shl	ax,cl
23727 60E0           89C3                       mov	bx,ax
23728 60E2           81C3                 01B6  add	bx,#_vga_modes
23729                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23730 60E6           FF77         04            push	4[bx]
23731                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23732 60E9           E8         1A31            call	_read_byte
23733 60EC           83C4                   04  add	sp,*4
23734                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
23735 60EF           8846         08            mov	8[bp],al
23736                                           !BCC_EOS
23737                                           ! 2684      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
23738                                           ! Debug: list int = const 1 (used reg = )
23739 60F2           B8                   0001  mov	ax,*1
23740 60F5           50                         push	ax
23741                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23742 60F6           8A46         06            mov	al,6[bp]
23743 60F9           30E4                       xor	ah,ah
23744 60FB           50                         push	ax
23745                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23746 60FC           8B46         F8            mov	ax,-8[bp]
23747                                           ! Debug: list unsigned int = ax-1 (used reg = )
23748 60FF           48                         dec	ax
23749 6100           50                         push	ax
23750                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23751 6101           8B46         F6            mov	ax,-$A[bp]
23752                                           ! Debug: list unsigned int = ax-1 (used reg = )
23753 6104           48                         dec	ax
23754 6105           50                         push	ax
23755                                           ! Debug: list int = const 0 (used reg = )
23756 6106           31C0                       xor	ax,ax
23757 6108           50                         push	ax
23758                                           ! Debug: list int = const 0 (used reg = )
23759 6109           31C0                       xor	ax,ax
23760 610B           50                         push	ax
23761                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
23762 610C           8A46         08            mov	al,8[bp]
23763 610F           30E4                       xor	ah,ah
23764 6111           50                         push	ax
23765                                           ! Debug: list int = const 1 (used reg = )
23766 6112           B8                   0001  mov	ax,*1
23767 6115           50                         push	ax
23768                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23769 6116           E8         E72C            call	_biosfn_scroll
23770 6119           83C4                   10  add	sp,*$10
23771                                           !BCC_EOS
23772                                           ! 2685     }
23773                                           ! 2686    else
23774                                           ! 2687     {
23775 611C           EB           27            jmp .1F4
23776                       0000611E            .1F2:
23777                                           ! 2688      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
23778                                           ! Debug: list int = const 1 (used reg = )
23779 611E           B8                   0001  mov	ax,*1
23780 6121           50                         push	ax
23781                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23782 6122           8A46         06            mov	al,6[bp]
23783 6125           30E4                       xor	ah,ah
23784 6127           50                         push	ax
23785                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23786 6128           8B46         F8            mov	ax,-8[bp]
23787                                           ! Debug: list unsigned int = ax-1 (used reg = )
23788 612B           48                         dec	ax
23789 612C           50                         push	ax
23790                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23791 612D           8B46         F6            mov	ax,-$A[bp]
23792                                           ! Debug: list unsigned int = ax-1 (used reg = )
23793 6130           48                         dec	ax
23794 6131           50                         push	ax
23795                                           ! Debug: list int = const 0 (used reg = )
23796 6132           31C0                       xor	ax,ax
23797 6134           50                         push	ax
23798                                           ! Debug: list int = const 0 (used reg = )
23799 6135           31C0                       xor	ax,ax
23800 6137           50                         push	ax
23801                                           ! Debug: list int = const 0 (used reg = )
23802 6138           31C0                       xor	ax,ax
23803 613A           50                         push	ax
23804                                           ! Debug: list int = const 1 (used reg = )
23805 613B           B8                   0001  mov	ax,*1
23806 613E           50                         push	ax
23807                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23808 613F           E8         E703            call	_biosfn_scroll
23809 6142           83C4                   10  add	sp,*$10
23810                                           !BCC_EOS
23811                                           ! 2689     }
23812                                           ! 2690    ycurs-=1;
23813                       00006145            .1F4:
23814                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
23815 6145           8A46         FD            mov	al,-3[bp]
23816 6148           30E4                       xor	ah,ah
23817 614A           48                         dec	ax
23818 614B           8846         FD            mov	-3[bp],al
23819                                           !BCC_EOS
23820                                           ! 2691   }
23821                                           ! 2692  cursor=ycurs; cursor<<=8; cursor+=xcurs;
23822                       0000614E            .1F0:
23823                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
23824 614E           8A46         FD            mov	al,-3[bp]
23825 6151           30E4                       xor	ah,ah
23826 6153           8946         F2            mov	-$E[bp],ax
23827                                           !BCC_EOS
23828                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
23829 6156           8B46         F2            mov	ax,-$E[bp]
23830 6159           88C4                       mov	ah,al
23831 615B           30C0                       xor	al,al
23832 615D           8946         F2            mov	-$E[bp],ax
23833                                           !BCC_EOS
23834                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
23835 6160           8B46         F2            mov	ax,-$E[bp]
23836 6163           0246         FE            add	al,-2[bp]
23837 6166           80D4                   00  adc	ah,*0
23838 6169           8946         F2            mov	-$E[bp],ax
23839                                           !BCC_EOS
23840                                           ! 2693  biosfn_set_cursor_pos(page,cursor);
23841                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
23842 616C           FF76         F2            push	-$E[bp]
23843                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23844 616F           8A46         06            mov	al,6[bp]
23845 6172           30E4                       xor	ah,ah
23846 6174           50                         push	ax
23847                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
23848 6175           E8         E0D3            call	_biosfn_set_cursor_pos
23849 6178           83C4                   04  add	sp,*4
23850                                           !BCC_EOS
23851                                           ! 2694 }
23852 617B           89EC                       mov	sp,bp
23853 617D           5D                         pop	bp
23854 617E           C3                         ret
23855                                           ! 2695 #asm
23856                                           !BCC_ASM
23857                       00000008            _biosfn_write_teletype.flag	set	8
23858                       00000006            _biosfn_write_teletype.attr	set	6
23859                       00000004            _biosfn_write_teletype.page	set	4
23860                       00000002            _biosfn_write_teletype.car	set	2
23861                       0000617F            biosfn_get_video_mode:
23862 617F           1E                           push ds
23863 6180           B8                   0040    mov ax, # 0x40
23864 6183           8ED8                         mov ds, ax
23865 6185           53                           push bx
23866 6186           BB                   0062    mov bx, # 0x62
23867 6189           8A07                         mov al, [bx]
23868 618B           5B                           pop bx
23869 618C           88C7                         mov bh, al
23870 618E           53                           push bx
23871 618F           BB                   0087    mov bx, # 0x87
23872 6192           8A27                         mov ah, [bx]
23873 6194           80E4                   80    and ah, #0x80
23874 6197           BB                   0049    mov bx, # 0x49
23875 619A           8A07                         mov al, [bx]
23876 619C           08E0                         or al, ah
23877 619E           BB                   004A    mov bx, # 0x4A
23878 61A1           8A27                         mov ah, [bx]
23879 61A3           5B                           pop bx
23880 61A4           1F                           pop ds
23881 61A5           C3                           ret
23882                                           ! 2717 endasm
23883                                           !BCC_ENDASM
23884                                           ! 2718 #asm
23885                                           !BCC_ASM
23886                       00000008            _biosfn_write_teletype.flag	set	8
23887                       00000006            _biosfn_write_teletype.attr	set	6
23888                       00000004            _biosfn_write_teletype.page	set	4
23889                       00000002            _biosfn_write_teletype.car	set	2
23890                       000061A6            biosfn_group_10:
23891 61A6           3C                     00    cmp al, #0x00
23892 61A8           75           02              jne int10_test_1001
23893 61AA           EB           61              jmp biosfn_set_single_palette_reg
23894                       000061AC            int10_test_1001:
23895 61AC           3C                     01    cmp al, #0x01
23896 61AE           75           02              jne int10_test_1002
23897 61B0           EB           75              jmp biosfn_set_overscan_border_color
23898                       000061B2            int10_test_1002:
23899 61B2           3C                     02    cmp al, #0x02
23900 61B4           75           02              jne int10_test_1003
23901 61B6           EB           77              jmp biosfn_set_all_palette_reg
23902                       000061B8            int10_test_1003:
23903 61B8           3C                     03    cmp al, #0x03
23904 61BA           75           03              jne int10_test_1007
23905 61BC           E9         009D              jmp biosfn_toggle_intensity
23906                       000061BF            int10_test_1007:
23907 61BF           3C                     07    cmp al, #0x07
23908 61C1           75           03              jne int10_test_1008
23909 61C3           E9         00BC              jmp biosfn_get_single_palette_reg
23910                       000061C6            int10_test_1008:
23911 61C6           3C                     08    cmp al, #0x08
23912 61C8           75           03              jne int10_test_1009
23913 61CA           E9         00D9              jmp biosfn_read_overscan_border_color
23914                       000061CD            int10_test_1009:
23915 61CD           3C                     09    cmp al, #0x09
23916 61CF           75           03              jne int10_test_1010
23917 61D1           E9         00E0              jmp biosfn_get_all_palette_reg
23918                       000061D4            int10_test_1010:
23919 61D4           3C                     10    cmp al, #0x10
23920 61D6           75           03              jne int10_test_1012
23921 61D8           E9         011A              jmp biosfn_set_single_dac_reg
23922                       000061DB            int10_test_1012:
23923 61DB           3C                     12    cmp al, #0x12
23924 61DD           75           03              jne int10_test_1013
23925 61DF           E9         012C              jmp biosfn_set_all_dac_reg
23926                       000061E2            int10_test_1013:
23927 61E2           3C                     13    cmp al, #0x13
23928 61E4           75           03              jne int10_test_1015
23929 61E6           E9         014D              jmp biosfn_select_video_dac_color_page
23930                       000061E9            int10_test_1015:
23931 61E9           3C                     15    cmp al, #0x15
23932 61EB           75           03              jne int10_test_1017
23933 61ED           E9         0189              jmp biosfn_read_single_dac_reg
23934                       000061F0            int10_test_1017:
23935 61F0           3C                     17    cmp al, #0x17
23936 61F2           75           03              jne int10_test_1018
23937 61F4           E9         019D              jmp biosfn_read_all_dac_reg
23938                       000061F7            int10_test_1018:
23939 61F7           3C                     18    cmp al, #0x18
23940 61F9           75           03              jne int10_test_1019
23941 61FB           E9         01BE              jmp biosfn_set_pel_mask
23942                       000061FE            int10_test_1019:
23943 61FE           3C                     19    cmp al, #0x19
23944 6200           75           03              jne int10_test_101A
23945 6202           E9         01C2              jmp biosfn_read_pel_mask
23946                       00006205            int10_test_101A:
23947 6205           3C                     1A    cmp al, #0x1a
23948 6207           75           03              jne int10_group_10_unknown
23949 6209           E9         01C6              jmp biosfn_read_video_dac_state
23950                       0000620C            int10_group_10_unknown:
23951 620C           C3                           ret
23952                       0000620D            biosfn_set_single_palette_reg:
23953 620D           80FB                   14    cmp bl, #0x14
23954 6210           77           14              ja no_actl_reg1
23955 6212           50                           push ax
23956 6213           52                           push dx
23957 6214           BA                   03DA    mov dx, # 0x3da
23958 6217           EC                           in al, dx
23959 6218           BA                   03C0    mov dx, # 0x3c0
23960 621B           88D8                         mov al, bl
23961 621D           EE                           out dx, al
23962 621E           88F8                         mov al, bh
23963 6220           EE                           out dx, al
23964 6221           B0                     20    mov al, #0x20
23965 6223           EE                           out dx, al
23966 6224           5A                           pop dx
23967 6225           58                           pop ax
23968                       00006226            no_actl_reg1:
23969 6226           C3                           ret
23970                                           ! 2799 endasm
23971                                           !BCC_ENDASM
23972                                           ! 2800 #asm
23973                                           !BCC_ASM
23974                       00000008            _biosfn_write_teletype.flag	set	8
23975                       00000006            _biosfn_write_teletype.attr	set	6
23976                       00000004            _biosfn_write_teletype.page	set	4
23977                       00000002            _biosfn_write_teletype.car	set	2
23978                       00006227            biosfn_set_overscan_border_color:
23979 6227           53                           push bx
23980 6228           B3                     11    mov bl, #0x11
23981 622A           E8         FFE0              call biosfn_set_single_palette_reg
23982 622D           5B                           pop bx
23983 622E           C3                           ret
23984                                           ! 2807 endasm
23985                                           !BCC_ENDASM
23986                                           ! 2808 #asm
23987                                           !BCC_ASM
23988                       00000008            _biosfn_write_teletype.flag	set	8
23989                       00000006            _biosfn_write_teletype.attr	set	6
23990                       00000004            _biosfn_write_teletype.page	set	4
23991                       00000002            _biosfn_write_teletype.car	set	2
23992                       0000622F            biosfn_set_all_palette_reg:
23993 622F           50                           push ax
23994 6230           53                           push bx
23995 6231           51                           push cx
23996 6232           52                           push dx
23997 6233           89D3                         mov bx, dx
23998 6235           BA                   03DA    mov dx, # 0x3da
23999 6238           EC                           in al, dx
24000 6239           B1                     00    mov cl, #0x00
24001 623B           BA                   03C0    mov dx, # 0x3c0
24002                       0000623E            set_palette_loop:
24003 623E           88C8                         mov al, cl
24004 6240           EE                           out dx, al
24005 6241           26                           seg es
24006 6242           8A07                         mov al, [bx]
24007 6244           EE                           out dx, al
24008 6245           43                           inc bx
24009 6246           FEC1                         inc cl
24010 6248           80F9                   10    cmp cl, #0x10
24011 624B           75           F1              jne set_palette_loop
24012 624D           B0                     11    mov al, #0x11
24013 624F           EE                           out dx, al
24014 6250           26                           seg es
24015 6251           8A07                         mov al, [bx]
24016 6253           EE                           out dx, al
24017 6254           B0                     20    mov al, #0x20
24018 6256           EE                           out dx, al
24019 6257           5A                           pop dx
24020 6258           59                           pop cx
24021 6259           5B                           pop bx
24022 625A           58                           pop ax
24023 625B           C3                           ret
24024                                           ! 2841 endasm
24025                                           !BCC_ENDASM
24026                                           ! 2842 #asm
24027                                           !BCC_ASM
24028                       00000008            _biosfn_write_teletype.flag	set	8
24029                       00000006            _biosfn_write_teletype.attr	set	6
24030                       00000004            _biosfn_write_teletype.page	set	4
24031                       00000002            _biosfn_write_teletype.car	set	2
24032                       0000625C            biosfn_toggle_intensity:
24033 625C           50                           push ax
24034 625D           53                           push bx
24035 625E           52                           push dx
24036 625F           BA                   03DA    mov dx, # 0x3da
24037 6262           EC                           in al, dx
24038 6263           BA                   03C0    mov dx, # 0x3c0
24039 6266           B0                     10    mov al, #0x10
24040 6268           EE                           out dx, al
24041 6269           BA                   03C1    mov dx, # 0x3c1
24042 626C           EC                           in al, dx
24043 626D           24                     F7    and al, #0xf7
24044 626F           80E3                   01    and bl, #0x01
24045 6272           C0E3                   03    shl bl, 3
24046 6275           08D8                         or al, bl
24047 6277           BA                   03C0    mov dx, # 0x3c0
24048 627A           EE                           out dx, al
24049 627B           B0                     20    mov al, #0x20
24050 627D           EE                           out dx, al
24051 627E           5A                           pop dx
24052 627F           5B                           pop bx
24053 6280           58                           pop ax
24054 6281           C3                           ret
24055                                           ! 2866 endasm
24056                                           !BCC_ENDASM
24057                                           ! 2867 #asm
24058                                           !BCC_ASM
24059                       00000008            _biosfn_write_teletype.flag	set	8
24060                       00000006            _biosfn_write_teletype.attr	set	6
24061                       00000004            _biosfn_write_teletype.page	set	4
24062                       00000002            _biosfn_write_teletype.car	set	2
24063                       00006282            biosfn_get_single_palette_reg:
24064 6282           80FB                   14    cmp bl, #0x14
24065 6285           77           1E              ja no_actl_reg2
24066 6287           50                           push ax
24067 6288           52                           push dx
24068 6289           BA                   03DA    mov dx, # 0x3da
24069 628C           EC                           in al, dx
24070 628D           BA                   03C0    mov dx, # 0x3c0
24071 6290           88D8                         mov al, bl
24072 6292           EE                           out dx, al
24073 6293           BA                   03C1    mov dx, # 0x3c1
24074 6296           EC                           in al, dx
24075 6297           88C7                         mov bh, al
24076 6299           BA                   03DA    mov dx, # 0x3da
24077 629C           EC                           in al, dx
24078 629D           BA                   03C0    mov dx, # 0x3c0
24079 62A0           B0                     20    mov al, #0x20
24080 62A2           EE                           out dx, al
24081 62A3           5A                           pop dx
24082 62A4           58                           pop ax
24083                       000062A5            no_actl_reg2:
24084 62A5           C3                           ret
24085                                           ! 2890 endasm
24086                                           !BCC_ENDASM
24087                                           ! 2891 #asm
24088                                           !BCC_ASM
24089                       00000008            _biosfn_write_teletype.flag	set	8
24090                       00000006            _biosfn_write_teletype.attr	set	6
24091                       00000004            _biosfn_write_teletype.page	set	4
24092                       00000002            _biosfn_write_teletype.car	set	2
24093                       000062A6            biosfn_read_overscan_border_color:
24094 62A6           50                           push ax
24095 62A7           53                           push bx
24096 62A8           B3                     11    mov bl, #0x11
24097 62AA           E8         FFD5              call biosfn_get_single_palette_reg
24098 62AD           88F8                         mov al, bh
24099 62AF           5B                           pop bx
24100 62B0           88C7                         mov bh, al
24101 62B2           58                           pop ax
24102 62B3           C3                           ret
24103                                           ! 2902 endasm
24104                                           !BCC_ENDASM
24105                                           ! 2903 #asm
24106                                           !BCC_ASM
24107                       00000008            _biosfn_write_teletype.flag	set	8
24108                       00000006            _biosfn_write_teletype.attr	set	6
24109                       00000004            _biosfn_write_teletype.page	set	4
24110                       00000002            _biosfn_write_teletype.car	set	2
24111                       000062B4            biosfn_get_all_palette_reg:
24112 62B4           50                           push ax
24113 62B5           53                           push bx
24114 62B6           51                           push cx
24115 62B7           52                           push dx
24116 62B8           89D3                         mov bx, dx
24117 62BA           B1                     00    mov cl, #0x00
24118                       000062BC            get_palette_loop:
24119 62BC           BA                   03DA    mov dx, # 0x3da
24120 62BF           EC                           in al, dx
24121 62C0           BA                   03C0    mov dx, # 0x3c0
24122 62C3           88C8                         mov al, cl
24123 62C5           EE                           out dx, al
24124 62C6           BA                   03C1    mov dx, # 0x3c1
24125 62C9           EC                           in al, dx
24126 62CA           26                           seg es
24127 62CB           8807                         mov [bx], al
24128 62CD           43                           inc bx
24129 62CE           FEC1                         inc cl
24130 62D0           80F9                   10    cmp cl, #0x10
24131 62D3           75           E7              jne get_palette_loop
24132 62D5           BA                   03DA    mov dx, # 0x3da
24133 62D8           EC                           in al, dx
24134 62D9           BA                   03C0    mov dx, # 0x3c0
24135 62DC           B0                     11    mov al, #0x11
24136 62DE           EE                           out dx, al
24137 62DF           BA                   03C1    mov dx, # 0x3c1
24138 62E2           EC                           in al, dx
24139 62E3           26                           seg es
24140 62E4           8807                         mov [bx], al
24141 62E6           BA                   03DA    mov dx, # 0x3da
24142 62E9           EC                           in al, dx
24143 62EA           BA                   03C0    mov dx, # 0x3c0
24144 62ED           B0                     20    mov al, #0x20
24145 62EF           EE                           out dx, al
24146 62F0           5A                           pop dx
24147 62F1           59                           pop cx
24148 62F2           5B                           pop bx
24149 62F3           58                           pop ax
24150 62F4           C3                           ret
24151                                           ! 2944 endasm
24152                                           !BCC_ENDASM
24153                                           ! 2945 #asm
24154                                           !BCC_ASM
24155                       00000008            _biosfn_write_teletype.flag	set	8
24156                       00000006            _biosfn_write_teletype.attr	set	6
24157                       00000004            _biosfn_write_teletype.page	set	4
24158                       00000002            _biosfn_write_teletype.car	set	2
24159                       000062F5            biosfn_set_single_dac_reg:
24160 62F5           50                           push ax
24161 62F6           52                           push dx
24162 62F7           BA                   03C8    mov dx, # 0x3c8
24163 62FA           88D8                         mov al, bl
24164 62FC           EE                           out dx, al
24165 62FD           BA                   03C9    mov dx, # 0x3c9
24166 6300           58                           pop ax
24167 6301           50                           push ax
24168 6302           88E0                         mov al, ah
24169 6304           EE                           out dx, al
24170 6305           88E8                         mov al, ch
24171 6307           EE                           out dx, al
24172 6308           88C8                         mov al, cl
24173 630A           EE                           out dx, al
24174 630B           5A                           pop dx
24175 630C           58                           pop ax
24176 630D           C3                           ret
24177                                           ! 2964 endasm
24178                                           !BCC_ENDASM
24179                                           ! 2965 #asm
24180                                           !BCC_ASM
24181                       00000008            _biosfn_write_teletype.flag	set	8
24182                       00000006            _biosfn_write_teletype.attr	set	6
24183                       00000004            _biosfn_write_teletype.page	set	4
24184                       00000002            _biosfn_write_teletype.car	set	2
24185                       0000630E            biosfn_set_all_dac_reg:
24186 630E           50                           push ax
24187 630F           53                           push bx
24188 6310           51                           push cx
24189 6311           52                           push dx
24190 6312           BA                   03C8    mov dx, # 0x3c8
24191 6315           88D8                         mov al, bl
24192 6317           EE                           out dx, al
24193 6318           5A                           pop dx
24194 6319           52                           push dx
24195 631A           89D3                         mov bx, dx
24196 631C           BA                   03C9    mov dx, # 0x3c9
24197                       0000631F            set_dac_loop:
24198 631F           26                           seg es
24199 6320           8A07                         mov al, [bx]
24200 6322           EE                           out dx, al
24201 6323           43                           inc bx
24202 6324           26                           seg es
24203 6325           8A07                         mov al, [bx]
24204 6327           EE                           out dx, al
24205 6328           43                           inc bx
24206 6329           26                           seg es
24207 632A           8A07                         mov al, [bx]
24208 632C           EE                           out dx, al
24209 632D           43                           inc bx
24210 632E           49                           dec cx
24211 632F           75           EE              jnz set_dac_loop
24212 6331           5A                           pop dx
24213 6332           59                           pop cx
24214 6333           5B                           pop bx
24215 6334           58                           pop ax
24216 6335           C3                           ret
24217                                           ! 2998 endasm
24218                                           !BCC_ENDASM
24219                                           ! 2999 #asm
24220                                           !BCC_ASM
24221                       00000008            _biosfn_write_teletype.flag	set	8
24222                       00000006            _biosfn_write_teletype.attr	set	6
24223                       00000004            _biosfn_write_teletype.page	set	4
24224                       00000002            _biosfn_write_teletype.car	set	2
24225                       00006336            biosfn_select_video_dac_color_page:
24226 6336           50                           push ax
24227 6337           53                           push bx
24228 6338           52                           push dx
24229 6339           BA                   03DA    mov dx, # 0x3da
24230 633C           EC                           in al, dx
24231 633D           BA                   03C0    mov dx, # 0x3c0
24232 6340           B0                     10    mov al, #0x10
24233 6342           EE                           out dx, al
24234 6343           BA                   03C1    mov dx, # 0x3c1
24235 6346           EC                           in al, dx
24236 6347           80E3                   01    and bl, #0x01
24237 634A           75           0D              jnz set_dac_page
24238 634C           24                     7F    and al, #0x7f
24239 634E           C0E7                   07    shl bh, 7
24240 6351           08F8                         or al, bh
24241 6353           BA                   03C0    mov dx, # 0x3c0
24242 6356           EE                           out dx, al
24243 6357           EB           19              jmp set_actl_normal
24244                       00006359            set_dac_page:
24245 6359           50                           push ax
24246 635A           BA                   03DA    mov dx, # 0x3da
24247 635D           EC                           in al, dx
24248 635E           BA                   03C0    mov dx, # 0x3c0
24249 6361           B0                     14    mov al, #0x14
24250 6363           EE                           out dx, al
24251 6364           58                           pop ax
24252 6365           24                     80    and al, #0x80
24253 6367           75           03              jnz set_dac_16_page
24254 6369           C0E7                   02    shl bh, 2
24255                       0000636C            set_dac_16_page:
24256 636C           80E7                   0F    and bh, #0x0f
24257 636F           88F8                         mov al, bh
24258 6371           EE                           out dx, al
24259                       00006372            set_actl_normal:
24260 6372           B0                     20    mov al, #0x20
24261 6374           EE                           out dx, al
24262 6375           5A                           pop dx
24263 6376           5B                           pop bx
24264 6377           58                           pop ax
24265 6378           C3                           ret
24266                                           ! 3041 endasm
24267                                           !BCC_ENDASM
24268                                           ! 3042 #asm
24269                                           !BCC_ASM
24270                       00000008            _biosfn_write_teletype.flag	set	8
24271                       00000006            _biosfn_write_teletype.attr	set	6
24272                       00000004            _biosfn_write_teletype.page	set	4
24273                       00000002            _biosfn_write_teletype.car	set	2
24274                       00006379            biosfn_read_single_dac_reg:
24275 6379           50                           push ax
24276 637A           52                           push dx
24277 637B           BA                   03C7    mov dx, # 0x3c7
24278 637E           88D8                         mov al, bl
24279 6380           EE                           out dx, al
24280 6381           58                           pop ax
24281 6382           88C4                         mov ah, al
24282 6384           BA                   03C9    mov dx, # 0x3c9
24283 6387           EC                           in al, dx
24284 6388           86E0                         xchg al, ah
24285 638A           50                           push ax
24286 638B           EC                           in al, dx
24287 638C           88C5                         mov ch, al
24288 638E           EC                           in al, dx
24289 638F           88C1                         mov cl, al
24290 6391           5A                           pop dx
24291 6392           58                           pop ax
24292 6393           C3                           ret
24293                                           ! 3062 endasm
24294                                           !BCC_ENDASM
24295                                           ! 3063 #asm
24296                                           !BCC_ASM
24297                       00000008            _biosfn_write_teletype.flag	set	8
24298                       00000006            _biosfn_write_teletype.attr	set	6
24299                       00000004            _biosfn_write_teletype.page	set	4
24300                       00000002            _biosfn_write_teletype.car	set	2
24301                       00006394            biosfn_read_all_dac_reg:
24302 6394           50                           push ax
24303 6395           53                           push bx
24304 6396           51                           push cx
24305 6397           52                           push dx
24306 6398           BA                   03C7    mov dx, # 0x3c7
24307 639B           88D8                         mov al, bl
24308 639D           EE                           out dx, al
24309 639E           5A                           pop dx
24310 639F           52                           push dx
24311 63A0           89D3                         mov bx, dx
24312 63A2           BA                   03C9    mov dx, # 0x3c9
24313                       000063A5            read_dac_loop:
24314 63A5           EC                           in al, dx
24315 63A6           26                           seg es
24316 63A7           8807                         mov [bx], al
24317 63A9           43                           inc bx
24318 63AA           EC                           in al, dx
24319 63AB           26                           seg es
24320 63AC           8807                         mov [bx], al
24321 63AE           43                           inc bx
24322 63AF           EC                           in al, dx
24323 63B0           26                           seg es
24324 63B1           8807                         mov [bx], al
24325 63B3           43                           inc bx
24326 63B4           49                           dec cx
24327 63B5           75           EE              jnz read_dac_loop
24328 63B7           5A                           pop dx
24329 63B8           59                           pop cx
24330 63B9           5B                           pop bx
24331 63BA           58                           pop ax
24332 63BB           C3                           ret
24333                                           ! 3096 endasm
24334                                           !BCC_ENDASM
24335                                           ! 3097 #asm
24336                                           !BCC_ASM
24337                       00000008            _biosfn_write_teletype.flag	set	8
24338                       00000006            _biosfn_write_teletype.attr	set	6
24339                       00000004            _biosfn_write_teletype.page	set	4
24340                       00000002            _biosfn_write_teletype.car	set	2
24341                       000063BC            biosfn_set_pel_mask:
24342 63BC           50                           push ax
24343 63BD           52                           push dx
24344 63BE           BA                   03C6    mov dx, # 0x3c6
24345 63C1           88D8                         mov al, bl
24346 63C3           EE                           out dx, al
24347 63C4           5A                           pop dx
24348 63C5           58                           pop ax
24349 63C6           C3                           ret
24350                                           ! 3107 endasm
24351                                           !BCC_ENDASM
24352                                           ! 3108 #asm
24353                                           !BCC_ASM
24354                       00000008            _biosfn_write_teletype.flag	set	8
24355                       00000006            _biosfn_write_teletype.attr	set	6
24356                       00000004            _biosfn_write_teletype.page	set	4
24357                       00000002            _biosfn_write_teletype.car	set	2
24358                       000063C7            biosfn_read_pel_mask:
24359 63C7           50                           push ax
24360 63C8           52                           push dx
24361 63C9           BA                   03C6    mov dx, # 0x3c6
24362 63CC           EC                           in al, dx
24363 63CD           88C3                         mov bl, al
24364 63CF           5A                           pop dx
24365 63D0           58                           pop ax
24366 63D1           C3                           ret
24367                                           ! 3118 endasm
24368                                           !BCC_ENDASM
24369                                           ! 3119 #asm
24370                                           !BCC_ASM
24371                       00000008            _biosfn_write_teletype.flag	set	8
24372                       00000006            _biosfn_write_teletype.attr	set	6
24373                       00000004            _biosfn_write_teletype.page	set	4
24374                       00000002            _biosfn_write_teletype.car	set	2
24375                       000063D2            biosfn_read_video_dac_state:
24376 63D2           50                           push ax
24377 63D3           52                           push dx
24378 63D4           BA                   03DA    mov dx, # 0x3da
24379 63D7           EC                           in al, dx
24380 63D8           BA                   03C0    mov dx, # 0x3c0
24381 63DB           B0                     10    mov al, #0x10
24382 63DD           EE                           out dx, al
24383 63DE           BA                   03C1    mov dx, # 0x3c1
24384 63E1           EC                           in al, dx
24385 63E2           88C3                         mov bl, al
24386 63E4           C0EB                   07    shr bl, 7
24387 63E7           BA                   03DA    mov dx, # 0x3da
24388 63EA           EC                           in al, dx
24389 63EB           BA                   03C0    mov dx, # 0x3c0
24390 63EE           B0                     14    mov al, #0x14
24391 63F0           EE                           out dx, al
24392 63F1           BA                   03C1    mov dx, # 0x3c1
24393 63F4           EC                           in al, dx
24394 63F5           88C7                         mov bh, al
24395 63F7           80E7                   0F    and bh, #0x0f
24396 63FA           F6C3                   01    test bl, #0x01
24397 63FD           75           03              jnz get_dac_16_page
24398 63FF           C0EF                   02    shr bh, 2
24399                       00006402            get_dac_16_page:
24400 6402           BA                   03DA    mov dx, # 0x3da
24401 6405           EC                           in al, dx
24402 6406           BA                   03C0    mov dx, # 0x3c0
24403 6409           B0                     20    mov al, #0x20
24404 640B           EE                           out dx, al
24405 640C           5A                           pop dx
24406 640D           58                           pop ax
24407 640E           C3                           ret
24408                                           ! 3153 endasm
24409                                           !BCC_ENDASM
24410                                           ! 3154 static void biosfn_perform_gray_scale_summing (start,count)
24411                                           ! Register BX used in function biosfn_write_teletype
24412                                           ! 3155 Bit16u start;Bit16u count;
24413                       0000640F            _biosfn_perform_gray_scale_summing:
24414                                           !BCC_EOS
24415                                           !BCC_EOS
24416                                           ! 3156 {Bit8u r,g,b;
24417                                           !BCC_EOS
24418                                           ! 3157  Bit16u i;
24419                                           !BCC_EOS
24420                                           ! 3158  Bit16u index;
24421                                           !BCC_EOS
24422                                           ! 3159  inb(0x3da);
24423 640F           55                         push	bp
24424 6410           89E5                       mov	bp,sp
24425 6412           83C4                   F8  add	sp,*-8
24426                                           ! Debug: list int = const $3DA (used reg = )
24427 6415           B8                   03DA  mov	ax,#$3DA
24428 6418           50                         push	ax
24429                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24430 6419           E8         1757            call	_inb
24431 641C           44                         inc	sp
24432 641D           44                         inc	sp
24433                                           !BCC_EOS
24434                                           ! 3160  outb(0x3c0,0x00);
24435                                           ! Debug: list int = const 0 (used reg = )
24436 641E           31C0                       xor	ax,ax
24437 6420           50                         push	ax
24438                                           ! Debug: list int = const $3C0 (used reg = )
24439 6421           B8                   03C0  mov	ax,#$3C0
24440 6424           50                         push	ax
24441                                           ! Debug: func () void = outb+0 (used reg = )
24442 6425           E8         1761            call	_outb
24443 6428           83C4                   04  add	sp,*4
24444                                           !BCC_EOS
24445                                           ! 3161  for( index = 0; index < count; index++ )
24446                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24447 642B           31C0                       xor	ax,ax
24448 642D           8946         F8            mov	-8[bp],ax
24449                                           !BCC_EOS
24450                                           !BCC_EOS
24451                                           ! 3162   {
24452 6430           E9         00BE            br 	.1F7
24453                       00006433            .1F8:
24454                                           ! 3163    outb(0x3c7,start);
24455                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24456 6433           FF76         04            push	4[bp]
24457                                           ! Debug: list int = const $3C7 (used reg = )
24458 6436           B8                   03C7  mov	ax,#$3C7
24459 6439           50                         push	ax
24460                                           ! Debug: func () void = outb+0 (used reg = )
24461 643A           E8         174C            call	_outb
24462 643D           83C4                   04  add	sp,*4
24463                                           !BCC_EOS
24464                                           ! 3164    r=inb( 0x3c9 );
24465                                           ! Debug: list int = const $3C9 (used reg = )
24466 6440           B8                   03C9  mov	ax,#$3C9
24467 6443           50                         push	ax
24468                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24469 6444           E8         172C            call	_inb
24470 6447           44                         inc	sp
24471 6448           44                         inc	sp
24472                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24473 6449           8846         FF            mov	-1[bp],al
24474                                           !BCC_EOS
24475                                           ! 3165    g=inb( 0x3c9 );
24476                                           ! Debug: list int = const $3C9 (used reg = )
24477 644C           B8                   03C9  mov	ax,#$3C9
24478 644F           50                         push	ax
24479                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24480 6450           E8         1720            call	_inb
24481 6453           44                         inc	sp
24482 6454           44                         inc	sp
24483                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24484 6455           8846         FE            mov	-2[bp],al
24485                                           !BCC_EOS
24486                                           ! 3166    b=inb( 0x3c9 );
24487                                           ! Debug: list int = const $3C9 (used reg = )
24488 6458           B8                   03C9  mov	ax,#$3C9
24489 645B           50                         push	ax
24490                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24491 645C           E8         1714            call	_inb
24492 645F           44                         inc	sp
24493 6460           44                         inc	sp
24494                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24495 6461           8846         FD            mov	-3[bp],al
24496                                           !BCC_EOS
24497                                           ! 3167    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24498                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24499                                           ! Debug: expression subtree swapping
24500 6464           8A46         FD            mov	al,-3[bp]
24501 6467           30E4                       xor	ah,ah
24502 6469           B9                   001C  mov	cx,*$1C
24503 646C           F7E9                       imul	cx
24504 646E           50                         push	ax
24505                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
24506                                           ! Debug: expression subtree swapping
24507 646F           8A46         FE            mov	al,-2[bp]
24508 6472           30E4                       xor	ah,ah
24509 6474           B9                   0097  mov	cx,#$97
24510 6477           F7E9                       imul	cx
24511 6479           50                         push	ax
24512                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
24513                                           ! Debug: expression subtree swapping
24514 647A           8A46         FF            mov	al,-1[bp]
24515 647D           30E4                       xor	ah,ah
24516 647F           B9                   004D  mov	cx,*$4D
24517 6482           F7E9                       imul	cx
24518                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
24519 6484           0346         F4            add	ax,-$C[bp]
24520 6487           44                         inc	sp
24521 6488           44                         inc	sp
24522                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24523 6489           0346         F6            add	ax,-$A[bp]
24524 648C           44                         inc	sp
24525 648D           44                         inc	sp
24526                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
24527                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
24528 648E           05                   0080  add	ax,#$80
24529 6491           88E0                       mov	al,ah
24530 6493           30E4                       xor	ah,ah
24531                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
24532 6495           8946         FA            mov	-6[bp],ax
24533                                           !BCC_EOS
24534                                           ! 3168    if(i>0x3f)i=0x3f;
24535                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24536 6498           8B46         FA            mov	ax,-6[bp]
24537 649B           3D                   003F  cmp	ax,*$3F
24538 649E           76           06            jbe 	.1F9
24539                       000064A0            .1FA:
24540                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24541 64A0           B8                   003F  mov	ax,*$3F
24542 64A3           8946         FA            mov	-6[bp],ax
24543                                           !BCC_EOS
24544                                           ! 3169    outb(0x3c8,start);
24545                       000064A6            .1F9:
24546                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24547 64A6           FF76         04            push	4[bp]
24548                                           ! Debug: list int = const $3C8 (used reg = )
24549 64A9           B8                   03C8  mov	ax,#$3C8
24550 64AC           50                         push	ax
24551                                           ! Debug: func () void = outb+0 (used reg = )
24552 64AD           E8         16D9            call	_outb
24553 64B0           83C4                   04  add	sp,*4
24554                                           !BCC_EOS
24555                                           ! 3170    outb( 0x3c9, i&0xff );
24556                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24557 64B3           8A46         FA            mov	al,-6[bp]
24558                                           ! Debug: list unsigned char = al+0 (used reg = )
24559 64B6           30E4                       xor	ah,ah
24560 64B8           50                         push	ax
24561                                           ! Debug: list int = const $3C9 (used reg = )
24562 64B9           B8                   03C9  mov	ax,#$3C9
24563 64BC           50                         push	ax
24564                                           ! Debug: func () void = outb+0 (used reg = )
24565 64BD           E8         16C9            call	_outb
24566 64C0           83C4                   04  add	sp,*4
24567                                           !BCC_EOS
24568                                           ! 3171    outb( 0x3c9, i&0xff );
24569                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24570 64C3           8A46         FA            mov	al,-6[bp]
24571                                           ! Debug: list unsigned char = al+0 (used reg = )
24572 64C6           30E4                       xor	ah,ah
24573 64C8           50                         push	ax
24574                                           ! Debug: list int = const $3C9 (used reg = )
24575 64C9           B8                   03C9  mov	ax,#$3C9
24576 64CC           50                         push	ax
24577                                           ! Debug: func () void = outb+0 (used reg = )
24578 64CD           E8         16B9            call	_outb
24579 64D0           83C4                   04  add	sp,*4
24580                                           !BCC_EOS
24581                                           ! 3172    outb( 0x3c9, i&0xff );
24582                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24583 64D3           8A46         FA            mov	al,-6[bp]
24584                                           ! Debug: list unsigned char = al+0 (used reg = )
24585 64D6           30E4                       xor	ah,ah
24586 64D8           50                         push	ax
24587                                           ! Debug: list int = const $3C9 (used reg = )
24588 64D9           B8                   03C9  mov	ax,#$3C9
24589 64DC           50                         push	ax
24590                                           ! Debug: func () void = outb+0 (used reg = )
24591 64DD           E8         16A9            call	_outb
24592 64E0           83C4                   04  add	sp,*4
24593                                           !BCC_EOS
24594                                           ! 3173    start++;
24595                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
24596 64E3           8B46         04            mov	ax,4[bp]
24597 64E6           40                         inc	ax
24598 64E7           8946         04            mov	4[bp],ax
24599                                           !BCC_EOS
24600                                           ! 3174   }
24601                                           ! 3175  inb(0x3da);
24602                       000064EA            .1F6:
24603                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
24604 64EA           8B46         F8            mov	ax,-8[bp]
24605 64ED           40                         inc	ax
24606 64EE           8946         F8            mov	-8[bp],ax
24607                       000064F1            .1F7:
24608                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
24609 64F1           8B46         F8            mov	ax,-8[bp]
24610 64F4           3B46         06            cmp	ax,6[bp]
24611 64F7   7303    E9         FF37            blo 	.1F8
24612                       000064FC            .1FB:
24613                       000064FC            .1F5:
24614                                           ! Debug: list int = const $3DA (used reg = )
24615 64FC           B8                   03DA  mov	ax,#$3DA
24616 64FF           50                         push	ax
24617                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24618 6500           E8         1670            call	_inb
24619 6503           44                         inc	sp
24620 6504           44                         inc	sp
24621                                           !BCC_EOS
24622                                           ! 3176  outb(0x3c0,0x20);
24623                                           ! Debug: list int = const $20 (used reg = )
24624 6505           B8                   0020  mov	ax,*$20
24625 6508           50                         push	ax
24626                                           ! Debug: list int = const $3C0 (used reg = )
24627 6509           B8                   03C0  mov	ax,#$3C0
24628 650C           50                         push	ax
24629                                           ! Debug: func () void = outb+0 (used reg = )
24630 650D           E8         1679            call	_outb
24631 6510           83C4                   04  add	sp,*4
24632                                           !BCC_EOS
24633                                           ! 3177 }
24634 6513           89EC                       mov	sp,bp
24635 6515           5D                         pop	bp
24636 6516           C3                         ret
24637                                           ! 3178 static void get_font_access()
24638                                           ! 3179 {
24639                       00006517            _get_font_access:
24640                                           ! 3180 #asm
24641                                           !BCC_ASM
24642 6517           BA                   03C4   mov dx, # 0x3c4
24643 651A           B8                   0100   mov ax, #0x0100
24644 651D           EF                          out dx, ax
24645 651E           B8                   0402   mov ax, #0x0402
24646 6521           EF                          out dx, ax
24647 6522           B8                   0704   mov ax, #0x0704
24648 6525           EF                          out dx, ax
24649 6526           B8                   0300   mov ax, #0x0300
24650 6529           EF                          out dx, ax
24651 652A           BA                   03CE   mov dx, # 0x3ce
24652 652D           B8                   0204   mov ax, #0x0204
24653 6530           EF                          out dx, ax
24654 6531           B8                   0005   mov ax, #0x0005
24655 6534           EF                          out dx, ax
24656 6535           B8                   0406   mov ax, #0x0406
24657 6538           EF                          out dx, ax
24658                                           ! 3197 endasm
24659                                           !BCC_ENDASM
24660                                           ! 3198 }
24661 6539           C3                         ret
24662                                           ! 3199 static void release_font_access()
24663                                           ! 3200 {
24664                       0000653A            _release_font_access:
24665                                           ! 3201 #asm
24666                                           !BCC_ASM
24667 653A           BA                   03C4   mov dx, # 0x3c4
24668 653D           B8                   0100   mov ax, #0x0100
24669 6540           EF                          out dx, ax
24670 6541           B8                   0302   mov ax, #0x0302
24671 6544           EF                          out dx, ax
24672 6545           B8                   0304   mov ax, #0x0304
24673 6548           EF                          out dx, ax
24674 6549           B8                   0300   mov ax, #0x0300
24675 654C           EF                          out dx, ax
24676 654D           BA                   03CC   mov dx, # 0x3cc
24677 6550           EC                          in al, dx
24678 6551           24                     01   and al, #0x01
24679 6553           C0E0                   02   shl al, 2
24680 6556           0C                     0A   or al, #0x0a
24681 6558           88C4                        mov ah, al
24682 655A           B0                     06   mov al, #0x06
24683 655C           BA                   03CE   mov dx, # 0x3ce
24684 655F           EF                          out dx, ax
24685 6560           B8                   0004   mov ax, #0x0004
24686 6563           EF                          out dx, ax
24687 6564           B8                   1005   mov ax, #0x1005
24688 6567           EF                          out dx, ax
24689                                           ! 3224 endasm
24690                                           !BCC_ENDASM
24691                                           ! 3225 }
24692 6568           C3                         ret
24693                                           ! 3226 #asm
24694                                           !BCC_ASM
24695                       00006569            idiv_u:
24696 6569           31D2                         xor dx,dx
24697 656B           F7F3                         div bx
24698 656D           C3                           ret
24699                                           ! 3231 endasm
24700                                           !BCC_ENDASM
24701                                           ! 3232 static void set_scan_lines(lines) Bit8u lines;
24702                       0000656E            _set_scan_lines:
24703                                           !BCC_EOS
24704                                           ! 3233 {
24705                                           ! 3234  Bit16u crtc_addr,cols,page,vde;
24706                                           !BCC_EOS
24707                                           ! 3235  Bit8u crtc_r9,ovl,rows;
24708                                           !BCC_EOS
24709                                           ! 3236  crtc_addr = read_word(0x40,0x63);
24710 656E           55                         push	bp
24711 656F           89E5                       mov	bp,sp
24712 6571           83C4                   F4  add	sp,*-$C
24713                                           ! Debug: list int = const $63 (used reg = )
24714 6574           B8                   0063  mov	ax,*$63
24715 6577           50                         push	ax
24716                                           ! Debug: list int = const $40 (used reg = )
24717 6578           B8                   0040  mov	ax,*$40
24718 657B           50                         push	ax
24719                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24720 657C           E8         15B1            call	_read_word
24721 657F           83C4                   04  add	sp,*4
24722                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24723 6582           8946         FE            mov	-2[bp],ax
24724                                           !BCC_EOS
24725                                           ! 3237  outb(crtc_addr, 0x09);
24726                                           ! Debug: list int = const 9 (used reg = )
24727 6585           B8                   0009  mov	ax,*9
24728 6588           50                         push	ax
24729                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24730 6589           FF76         FE            push	-2[bp]
24731                                           ! Debug: func () void = outb+0 (used reg = )
24732 658C           E8         15FA            call	_outb
24733 658F           83C4                   04  add	sp,*4
24734                                           !BCC_EOS
24735                                           ! 3238  crtc_r9 = inb(crtc_addr+1);
24736                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24737 6592           8B46         FE            mov	ax,-2[bp]
24738                                           ! Debug: list unsigned int = ax+1 (used reg = )
24739 6595           40                         inc	ax
24740 6596           50                         push	ax
24741                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24742 6597           E8         15D9            call	_inb
24743 659A           44                         inc	sp
24744 659B           44                         inc	sp
24745                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24746 659C           8846         F7            mov	-9[bp],al
24747                                           !BCC_EOS
24748                                           ! 3239  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
24749                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
24750 659F           8A46         04            mov	al,4[bp]
24751 65A2           30E4                       xor	ah,ah
24752 65A4           48                         dec	ax
24753 65A5           50                         push	ax
24754                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
24755 65A6           8A46         F7            mov	al,-9[bp]
24756 65A9           24                     E0  and	al,#$E0
24757                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
24758 65AB           30E4                       xor	ah,ah
24759 65AD           0B46         F2            or	ax,-$E[bp]
24760 65B0           44                         inc	sp
24761 65B1           44                         inc	sp
24762                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24763 65B2           8846         F7            mov	-9[bp],al
24764                                           !BCC_EOS
24765                                           ! 3240  outb(crtc_addr+1, crtc_r9);
24766                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24767 65B5           8A46         F7            mov	al,-9[bp]
24768 65B8           30E4                       xor	ah,ah
24769 65BA           50                         push	ax
24770                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
24771 65BB           8B46         FE            mov	ax,-2[bp]
24772                                           ! Debug: list unsigned int = ax+1 (used reg = )
24773 65BE           40                         inc	ax
24774 65BF           50                         push	ax
24775                                           ! Debug: func () void = outb+0 (used reg = )
24776 65C0           E8         15C6            call	_outb
24777 65C3           83C4                   04  add	sp,*4
24778                                           !BCC_EOS
24779                                           ! 3241  if(lines==8)
24780                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
24781 65C6           8A46         04            mov	al,4[bp]
24782 65C9           3C                     08  cmp	al,*8
24783 65CB           75           10            jne 	.1FC
24784                       000065CD            .1FD:
24785                                           ! 3242   {
24786                                           ! 3243    biosfn_set_cursor_shape(0x06,0x07);
24787                                           ! Debug: list int = const 7 (used reg = )
24788 65CD           B8                   0007  mov	ax,*7
24789 65D0           50                         push	ax
24790                                           ! Debug: list int = const 6 (used reg = )
24791 65D1           B8                   0006  mov	ax,*6
24792 65D4           50                         push	ax
24793                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24794 65D5           E8         DB58            call	_biosfn_set_cursor_shape
24795 65D8           83C4                   04  add	sp,*4
24796                                           !BCC_EOS
24797                                           ! 3244   }
24798                                           ! 3245  else
24799                                           ! 3246   {
24800 65DB           EB           18            jmp .1FE
24801                       000065DD            .1FC:
24802                                           ! 3247    biosfn_set_cursor_shape(lines-4,lines-3);
24803                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
24804 65DD           8A46         04            mov	al,4[bp]
24805 65E0           30E4                       xor	ah,ah
24806                                           ! Debug: list unsigned int = ax-3 (used reg = )
24807 65E2           05                   FFFD  add	ax,*-3
24808 65E5           50                         push	ax
24809                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
24810 65E6           8A46         04            mov	al,4[bp]
24811 65E9           30E4                       xor	ah,ah
24812                                           ! Debug: list unsigned int = ax-4 (used reg = )
24813 65EB           05                   FFFC  add	ax,*-4
24814 65EE           50                         push	ax
24815                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24816 65EF           E8         DB3E            call	_biosfn_set_cursor_shape
24817 65F2           83C4                   04  add	sp,*4
24818                                           !BCC_EOS
24819                                           ! 3248   }
24820                                           ! 3249  write_word(0x40,0x85, lines);
24821                       000065F5            .1FE:
24822                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
24823 65F5           8A46         04            mov	al,4[bp]
24824 65F8           30E4                       xor	ah,ah
24825 65FA           50                         push	ax
24826                                           ! Debug: list int = const $85 (used reg = )
24827 65FB           B8                   0085  mov	ax,#$85
24828 65FE           50                         push	ax
24829                                           ! Debug: list int = const $40 (used reg = )
24830 65FF           B8                   0040  mov	ax,*$40
24831 6602           50                         push	ax
24832                                           ! Debug: func () void = write_word+0 (used reg = )
24833 6603           E8         1555            call	_write_word
24834 6606           83C4                   06  add	sp,*6
24835                                           !BCC_EOS
24836                                           ! 3250  outb(crtc_addr, 0x12);
24837                                           ! Debug: list int = const $12 (used reg = )
24838 6609           B8                   0012  mov	ax,*$12
24839 660C           50                         push	ax
24840                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24841 660D           FF76         FE            push	-2[bp]
24842                                           ! Debug: func () void = outb+0 (used reg = )
24843 6610           E8         1576            call	_outb
24844 6613           83C4                   04  add	sp,*4
24845                                           !BCC_EOS
24846                                           ! 3251  vde = inb(crtc_addr+1);
24847                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24848 6616           8B46         FE            mov	ax,-2[bp]
24849                                           ! Debug: list unsigned int = ax+1 (used reg = )
24850 6619           40                         inc	ax
24851 661A           50                         push	ax
24852                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24853 661B           E8         1555            call	_inb
24854 661E           44                         inc	sp
24855 661F           44                         inc	sp
24856                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
24857 6620           30E4                       xor	ah,ah
24858 6622           8946         F8            mov	-8[bp],ax
24859                                           !BCC_EOS
24860                                           ! 3252  outb(crtc_addr, 0x07);
24861                                           ! Debug: list int = const 7 (used reg = )
24862 6625           B8                   0007  mov	ax,*7
24863 6628           50                         push	ax
24864                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24865 6629           FF76         FE            push	-2[bp]
24866                                           ! Debug: func () void = outb+0 (used reg = )
24867 662C           E8         155A            call	_outb
24868 662F           83C4                   04  add	sp,*4
24869                                           !BCC_EOS
24870                                           ! 3253  ovl = inb(crtc_addr+1);
24871                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24872 6632           8B46         FE            mov	ax,-2[bp]
24873                                           ! Debug: list unsigned int = ax+1 (used reg = )
24874 6635           40                         inc	ax
24875 6636           50                         push	ax
24876                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24877 6637           E8         1539            call	_inb
24878 663A           44                         inc	sp
24879 663B           44                         inc	sp
24880                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
24881 663C           8846         F6            mov	-$A[bp],al
24882                                           !BCC_EOS
24883                                           ! 3254  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
24884                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
24885 663F           8A46         F6            mov	al,-$A[bp]
24886 6642           24                     40  and	al,*$40
24887                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
24888 6644           30E4                       xor	ah,ah
24889 6646           B1                     03  mov	cl,*3
24890 6648           D3E0                       shl	ax,cl
24891 664A           50                         push	ax
24892                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
24893 664B           8A46         F6            mov	al,-$A[bp]
24894 664E           24                     02  and	al,*2
24895                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
24896 6650           30E4                       xor	ah,ah
24897 6652           B1                     07  mov	cl,*7
24898 6654           D3E0                       shl	ax,cl
24899                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
24900 6656           0346         F2            add	ax,-$E[bp]
24901 6659           44                         inc	sp
24902 665A           44                         inc	sp
24903                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24904                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
24905 665B           40                         inc	ax
24906 665C           0346         F8            add	ax,-8[bp]
24907 665F           8946         F8            mov	-8[bp],ax
24908                                           !BCC_EOS
24909                                           ! 3255  rows = vde / lines;
24910                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
24911 6662           8A46         04            mov	al,4[bp]
24912 6665           30E4                       xor	ah,ah
24913 6667           89C3                       mov	bx,ax
24914 6669           8B46         F8            mov	ax,-8[bp]
24915 666C           E8         FEFA            call	idiv_u
24916                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
24917 666F           8846         F5            mov	-$B[bp],al
24918                                           !BCC_EOS
24919                                           ! 3256  write_byte(0x40,0x84, rows-1);
24920                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
24921 6672           8A46         F5            mov	al,-$B[bp]
24922 6675           30E4                       xor	ah,ah
24923                                           ! Debug: list unsigned int = ax-1 (used reg = )
24924 6677           48                         dec	ax
24925 6678           50                         push	ax
24926                                           ! Debug: list int = const $84 (used reg = )
24927 6679           B8                   0084  mov	ax,#$84
24928 667C           50                         push	ax
24929                                           ! Debug: list int = const $40 (used reg = )
24930 667D           B8                   0040  mov	ax,*$40
24931 6680           50                         push	ax
24932                                           ! Debug: func () void = write_byte+0 (used reg = )
24933 6681           E8         14BF            call	_write_byte
24934 6684           83C4                   06  add	sp,*6
24935                                           !BCC_EOS
24936                                           ! 3257  cols = read_word(0x40,0x4A);
24937                                           ! Debug: list int = const $4A (used reg = )
24938 6687           B8                   004A  mov	ax,*$4A
24939 668A           50                         push	ax
24940                                           ! Debug: list int = const $40 (used reg = )
24941 668B           B8                   0040  mov	ax,*$40
24942 668E           50                         push	ax
24943                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24944 668F           E8         149E            call	_read_word
24945 6692           83C4                   04  add	sp,*4
24946                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
24947 6695           8946         FC            mov	-4[bp],ax
24948                                           !BCC_EOS
24949                                           ! 3258  write_word(0x40,0x4C, rows * cols * 2);
24950                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
24951 6698           8A46         F5            mov	al,-$B[bp]
24952 669B           30E4                       xor	ah,ah
24953 669D           8B4E         FC            mov	cx,-4[bp]
24954 66A0           F7E9                       imul	cx
24955                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24956 66A2           D1E0                       shl	ax,*1
24957                                           ! Debug: list unsigned int = ax+0 (used reg = )
24958 66A4           50                         push	ax
24959                                           ! Debug: list int = const $4C (used reg = )
24960 66A5           B8                   004C  mov	ax,*$4C
24961 66A8           50                         push	ax
24962                                           ! Debug: list int = const $40 (used reg = )
24963 66A9           B8                   0040  mov	ax,*$40
24964 66AC           50                         push	ax
24965                                           ! Debug: func () void = write_word+0 (used reg = )
24966 66AD           E8         14AB            call	_write_word
24967 66B0           83C4                   06  add	sp,*6
24968                                           !BCC_EOS
24969                                           ! 3259 }
24970 66B3           89EC                       mov	sp,bp
24971 66B5           5D                         pop	bp
24972 66B6           C3                         ret
24973                                           ! 3260 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
24974                                           ! Register BX used in function set_scan_lines
24975                       000066B7            _biosfn_load_text_user_pat:
24976                                           !BCC_EOS
24977                                           !BCC_EOS
24978                                           !BCC_EOS
24979                                           !BCC_EOS
24980                                           !BCC_EOS
24981                                           !BCC_EOS
24982                                           !BCC_EOS
24983                                           ! 3261 {
24984                                           ! 3262  Bit16u blockaddr,dest,i,src;
24985                                           !BCC_EOS
24986                                           ! 3263  get_font_access();
24987 66B7           55                         push	bp
24988 66B8           89E5                       mov	bp,sp
24989 66BA           83C4                   F8  add	sp,*-8
24990                                           ! Debug: func () void = get_font_access+0 (used reg = )
24991 66BD           E8         FE57            call	_get_font_access
24992                                           !BCC_EOS
24993                                           ! 3264  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
24994                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
24995 66C0           8A46         0E            mov	al,$E[bp]
24996 66C3           24                     04  and	al,*4
24997                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
24998 66C5           30E4                       xor	ah,ah
24999 66C7           88C4                       mov	ah,al
25000 66C9           30C0                       xor	al,al
25001 66CB           B1                     03  mov	cl,*3
25002 66CD           D3E0                       shl	ax,cl
25003 66CF           50                         push	ax
25004                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25005 66D0           8A46         0E            mov	al,$E[bp]
25006 66D3           24                     03  and	al,*3
25007                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25008 66D5           30E4                       xor	ah,ah
25009 66D7           88C4                       mov	ah,al
25010 66D9           30C0                       xor	al,al
25011 66DB           B1                     06  mov	cl,*6
25012 66DD           D3E0                       shl	ax,cl
25013                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25014 66DF           0346         F6            add	ax,-$A[bp]
25015 66E2           44                         inc	sp
25016 66E3           44                         inc	sp
25017                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25018 66E4           8946         FE            mov	-2[bp],ax
25019                                           !BCC_EOS
25020                                           ! 3265  for(i=0;i<CX;i++)
25021                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25022 66E7           31C0                       xor	ax,ax
25023 66E9           8946         FA            mov	-6[bp],ax
25024                                           !BCC_EOS
25025                                           !BCC_EOS
25026                                           ! 3266   {
25027 66EC           EB           44            jmp .201
25028                       000066EE            .202:
25029                                           ! 3267    src = BP + i * BH;
25030                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25031 66EE           8A46         10            mov	al,$10[bp]
25032 66F1           30E4                       xor	ah,ah
25033 66F3           89C3                       mov	bx,ax
25034 66F5           8B46         FA            mov	ax,-6[bp]
25035 66F8           89D9                       mov	cx,bx
25036 66FA           F7E9                       imul	cx
25037                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25038                                           ! Debug: expression subtree swapping
25039 66FC           0346         08            add	ax,8[bp]
25040                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25041 66FF           8946         F8            mov	-8[bp],ax
25042                                           !BCC_EOS
25043                                           ! 3268    dest = blockaddr + (DX + i) * 32;
25044                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25045 6702           8B46         0C            mov	ax,$C[bp]
25046 6705           0346         FA            add	ax,-6[bp]
25047                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25048 6708           B1                     05  mov	cl,*5
25049 670A           D3E0                       shl	ax,cl
25050                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25051                                           ! Debug: expression subtree swapping
25052 670C           0346         FE            add	ax,-2[bp]
25053                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25054 670F           8946         FC            mov	-4[bp],ax
25055                                           !BCC_EOS
25056                                           ! 3269    memcpyb(0xA000, dest, ES, src, BH);
25057                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25058 6712           8A46         10            mov	al,$10[bp]
25059 6715           30E4                       xor	ah,ah
25060 6717           50                         push	ax
25061                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25062 6718           FF76         F8            push	-8[bp]
25063                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25064 671B           FF76         06            push	6[bp]
25065                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25066 671E           FF76         FC            push	-4[bp]
25067                                           ! Debug: list unsigned int = const $A000 (used reg = )
25068 6721           B8                   A000  mov	ax,#$A000
25069 6724           50                         push	ax
25070                                           ! Debug: func () void = memcpyb+0 (used reg = )
25071 6725           E8         1395            call	_memcpyb
25072 6728           83C4                   0A  add	sp,*$A
25073                                           !BCC_EOS
25074                                           ! 3270   }
25075                                           ! 3271  release_font_access();
25076                       0000672B            .200:
25077                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25078 672B           8B46         FA            mov	ax,-6[bp]
25079 672E           40                         inc	ax
25080 672F           8946         FA            mov	-6[bp],ax
25081                       00006732            .201:
25082                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25083 6732           8B46         FA            mov	ax,-6[bp]
25084 6735           3B46         0A            cmp	ax,$A[bp]
25085 6738           72           B4            jb 	.202
25086                       0000673A            .203:
25087                       0000673A            .1FF:
25088                                           ! Debug: func () void = release_font_access+0 (used reg = )
25089 673A           E8         FDFD            call	_release_font_access
25090                                           !BCC_EOS
25091                                           ! 3272  if(AL>=0x10)
25092                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25093 673D           8A46         04            mov	al,4[bp]
25094 6740           3C                     10  cmp	al,*$10
25095 6742           72           0B            jb  	.204
25096                       00006744            .205:
25097                                           ! 3273   {
25098                                           ! 3274    set_scan_lines(BH);
25099                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25100 6744           8A46         10            mov	al,$10[bp]
25101 6747           30E4                       xor	ah,ah
25102 6749           50                         push	ax
25103                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25104 674A           E8         FE21            call	_set_scan_lines
25105 674D           44                         inc	sp
25106 674E           44                         inc	sp
25107                                           !BCC_EOS
25108                                           ! 3275   }
25109                                           ! 3276 }
25110                       0000674F            .204:
25111 674F           89EC                       mov	sp,bp
25112 6751           5D                         pop	bp
25113 6752           C3                         ret
25114                                           ! 3277 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25115                                           ! Register BX used in function biosfn_load_text_user_pat
25116                       00006753            _biosfn_load_text_8_14_pat:
25117                                           !BCC_EOS
25118                                           !BCC_EOS
25119                                           ! 3278 {
25120                                           ! 3279  Bit16u blockaddr,dest,i,src;
25121                                           !BCC_EOS
25122                                           ! 3280  get_font_access();
25123 6753           55                         push	bp
25124 6754           89E5                       mov	bp,sp
25125 6756           83C4                   F8  add	sp,*-8
25126                                           ! Debug: func () void = get_font_access+0 (used reg = )
25127 6759           E8         FDBB            call	_get_font_access
25128                                           !BCC_EOS
25129                                           ! 3281  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25130                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25131 675C           8A46         06            mov	al,6[bp]
25132 675F           24                     04  and	al,*4
25133                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25134 6761           30E4                       xor	ah,ah
25135 6763           88C4                       mov	ah,al
25136 6765           30C0                       xor	al,al
25137 6767           B1                     03  mov	cl,*3
25138 6769           D3E0                       shl	ax,cl
25139 676B           50                         push	ax
25140                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25141 676C           8A46         06            mov	al,6[bp]
25142 676F           24                     03  and	al,*3
25143                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25144 6771           30E4                       xor	ah,ah
25145 6773           88C4                       mov	ah,al
25146 6775           30C0                       xor	al,al
25147 6777           B1                     06  mov	cl,*6
25148 6779           D3E0                       shl	ax,cl
25149                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25150 677B           0346         F6            add	ax,-$A[bp]
25151 677E           44                         inc	sp
25152 677F           44                         inc	sp
25153                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25154 6780           8946         FE            mov	-2[bp],ax
25155                                           !BCC_EOS
25156                                           ! 3282  for(i=0;i<0x100;i++)
25157                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25158 6783           31C0                       xor	ax,ax
25159 6785           8946         FA            mov	-6[bp],ax
25160                                           !BCC_EOS
25161                                           !BCC_EOS
25162                                           ! 3283   {
25163 6788           EB           41            jmp .208
25164                       0000678A            .209:
25165                                           ! 3284    src = i * 14;
25166                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25167 678A           8B46         FA            mov	ax,-6[bp]
25168 678D           89C2                       mov	dx,ax
25169 678F           B1                     03  mov	cl,*3
25170 6791           D3E0                       shl	ax,cl
25171 6793           29D0                       sub	ax,dx
25172 6795           D1E0                       shl	ax,*1
25173                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25174 6797           8946         F8            mov	-8[bp],ax
25175                                           !BCC_EOS
25176                                           ! 3285    dest = blockaddr + i * 32;
25177                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25178 679A           8B46         FA            mov	ax,-6[bp]
25179 679D           B1                     05  mov	cl,*5
25180 679F           D3E0                       shl	ax,cl
25181                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25182                                           ! Debug: expression subtree swapping
25183 67A1           0346         FE            add	ax,-2[bp]
25184                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25185 67A4           8946         FC            mov	-4[bp],ax
25186                                           !BCC_EOS
25187                                           ! 3286    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25188                                           ! Debug: list int = const $E (used reg = )
25189 67A7           B8                   000E  mov	ax,*$E
25190 67AA           50                         push	ax
25191                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25192 67AB           8B5E         F8            mov	bx,-8[bp]
25193                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25194                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25195 67AE           81C3                 171A  add	bx,#_vgafont14
25196 67B2           53                         push	bx
25197                                           ! Debug: list unsigned int = const $C000 (used reg = )
25198 67B3           B8                   C000  mov	ax,#$C000
25199 67B6           50                         push	ax
25200                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25201 67B7           FF76         FC            push	-4[bp]
25202                                           ! Debug: list unsigned int = const $A000 (used reg = )
25203 67BA           B8                   A000  mov	ax,#$A000
25204 67BD           50                         push	ax
25205                                           ! Debug: func () void = memcpyb+0 (used reg = )
25206 67BE           E8         12FC            call	_memcpyb
25207 67C1           83C4                   0A  add	sp,*$A
25208                                           !BCC_EOS
25209                                           ! 3287   }
25210                                           ! 3288  release_font_access();
25211                       000067C4            .207:
25212                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25213 67C4           8B46         FA            mov	ax,-6[bp]
25214 67C7           40                         inc	ax
25215 67C8           8946         FA            mov	-6[bp],ax
25216                       000067CB            .208:
25217                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25218 67CB           8B46         FA            mov	ax,-6[bp]
25219 67CE           3D                   0100  cmp	ax,#$100
25220 67D1           72           B7            jb 	.209
25221                       000067D3            .20A:
25222                       000067D3            .206:
25223                                           ! Debug: func () void = release_font_access+0 (used reg = )
25224 67D3           E8         FD64            call	_release_font_access
25225                                           !BCC_EOS
25226                                           ! 3289  if(AL>=0x10)
25227                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25228 67D6           8A46         04            mov	al,4[bp]
25229 67D9           3C                     10  cmp	al,*$10
25230 67DB           72           09            jb  	.20B
25231                       000067DD            .20C:
25232                                           ! 3290   {
25233                                           ! 3291    set_scan_lines(14);
25234                                           ! Debug: list int = const $E (used reg = )
25235 67DD           B8                   000E  mov	ax,*$E
25236 67E0           50                         push	ax
25237                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25238 67E1           E8         FD8A            call	_set_scan_lines
25239 67E4           44                         inc	sp
25240 67E5           44                         inc	sp
25241                                           !BCC_EOS
25242                                           ! 3292   }
25243                                           ! 3293 }
25244                       000067E6            .20B:
25245 67E6           89EC                       mov	sp,bp
25246 67E8           5D                         pop	bp
25247 67E9           C3                         ret
25248                                           ! 3294 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25249                                           ! Register BX used in function biosfn_load_text_8_14_pat
25250                       000067EA            _biosfn_load_text_8_8_pat:
25251                                           !BCC_EOS
25252                                           !BCC_EOS
25253                                           ! 3295 {
25254                                           ! 3296  Bit16u blockaddr,dest,i,src;
25255                                           !BCC_EOS
25256                                           ! 3297  get_font_access();
25257 67EA           55                         push	bp
25258 67EB           89E5                       mov	bp,sp
25259 67ED           83C4                   F8  add	sp,*-8
25260                                           ! Debug: func () void = get_font_access+0 (used reg = )
25261 67F0           E8         FD24            call	_get_font_access
25262                                           !BCC_EOS
25263                                           ! 3298  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25264                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25265 67F3           8A46         06            mov	al,6[bp]
25266 67F6           24                     04  and	al,*4
25267                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25268 67F8           30E4                       xor	ah,ah
25269 67FA           88C4                       mov	ah,al
25270 67FC           30C0                       xor	al,al
25271 67FE           B1                     03  mov	cl,*3
25272 6800           D3E0                       shl	ax,cl
25273 6802           50                         push	ax
25274                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25275 6803           8A46         06            mov	al,6[bp]
25276 6806           24                     03  and	al,*3
25277                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25278 6808           30E4                       xor	ah,ah
25279 680A           88C4                       mov	ah,al
25280 680C           30C0                       xor	al,al
25281 680E           B1                     06  mov	cl,*6
25282 6810           D3E0                       shl	ax,cl
25283                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25284 6812           0346         F6            add	ax,-$A[bp]
25285 6815           44                         inc	sp
25286 6816           44                         inc	sp
25287                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25288 6817           8946         FE            mov	-2[bp],ax
25289                                           !BCC_EOS
25290                                           ! 3299  for(i=0;i<0x100;i++)
25291                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25292 681A           31C0                       xor	ax,ax
25293 681C           8946         FA            mov	-6[bp],ax
25294                                           !BCC_EOS
25295                                           !BCC_EOS
25296                                           ! 3300   {
25297 681F           EB           3B            jmp .20F
25298                       00006821            .210:
25299                                           ! 3301    src
25300                                           ! 3301  = i * 8;
25301                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25302 6821           8B46         FA            mov	ax,-6[bp]
25303 6824           B1                     03  mov	cl,*3
25304 6826           D3E0                       shl	ax,cl
25305                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25306 6828           8946         F8            mov	-8[bp],ax
25307                                           !BCC_EOS
25308                                           ! 3302    dest = blockaddr + i * 32;
25309                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25310 682B           8B46         FA            mov	ax,-6[bp]
25311 682E           B1                     05  mov	cl,*5
25312 6830           D3E0                       shl	ax,cl
25313                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25314                                           ! Debug: expression subtree swapping
25315 6832           0346         FE            add	ax,-2[bp]
25316                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25317 6835           8946         FC            mov	-4[bp],ax
25318                                           !BCC_EOS
25319                                           ! 3303    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25320                                           ! Debug: list int = const 8 (used reg = )
25321 6838           B8                   0008  mov	ax,*8
25322 683B           50                         push	ax
25323                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25324 683C           8B5E         F8            mov	bx,-8[bp]
25325                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25326                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25327 683F           81C3                 0F1A  add	bx,#_vgafont8
25328 6843           53                         push	bx
25329                                           ! Debug: list unsigned int = const $C000 (used reg = )
25330 6844           B8                   C000  mov	ax,#$C000
25331 6847           50                         push	ax
25332                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25333 6848           FF76         FC            push	-4[bp]
25334                                           ! Debug: list unsigned int = const $A000 (used reg = )
25335 684B           B8                   A000  mov	ax,#$A000
25336 684E           50                         push	ax
25337                                           ! Debug: func () void = memcpyb+0 (used reg = )
25338 684F           E8         126B            call	_memcpyb
25339 6852           83C4                   0A  add	sp,*$A
25340                                           !BCC_EOS
25341                                           ! 3304   }
25342                                           ! 3305  release_font_access();
25343                       00006855            .20E:
25344                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25345 6855           8B46         FA            mov	ax,-6[bp]
25346 6858           40                         inc	ax
25347 6859           8946         FA            mov	-6[bp],ax
25348                       0000685C            .20F:
25349                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25350 685C           8B46         FA            mov	ax,-6[bp]
25351 685F           3D                   0100  cmp	ax,#$100
25352 6862           72           BD            jb 	.210
25353                       00006864            .211:
25354                       00006864            .20D:
25355                                           ! Debug: func () void = release_font_access+0 (used reg = )
25356 6864           E8         FCD3            call	_release_font_access
25357                                           !BCC_EOS
25358                                           ! 3306  if(AL>=0x10)
25359                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25360 6867           8A46         04            mov	al,4[bp]
25361 686A           3C                     10  cmp	al,*$10
25362 686C           72           09            jb  	.212
25363                       0000686E            .213:
25364                                           ! 3307   {
25365                                           ! 3308    set_scan_lines(8);
25366                                           ! Debug: list int = const 8 (used reg = )
25367 686E           B8                   0008  mov	ax,*8
25368 6871           50                         push	ax
25369                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25370 6872           E8         FCF9            call	_set_scan_lines
25371 6875           44                         inc	sp
25372 6876           44                         inc	sp
25373                                           !BCC_EOS
25374                                           ! 3309   }
25375                                           ! 3310 }
25376                       00006877            .212:
25377 6877           89EC                       mov	sp,bp
25378 6879           5D                         pop	bp
25379 687A           C3                         ret
25380                                           ! 3311 #asm
25381                                           !BCC_ASM
25382                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25383                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25384                       0000687B            biosfn_set_text_block_specifier:
25385 687B           50                           push ax
25386 687C           52                           push dx
25387 687D           BA                   03C4    mov dx, # 0x3c4
25388 6880           88DC                         mov ah, bl
25389 6882           B0                     03    mov al, #0x03
25390 6884           EF                           out dx, ax
25391 6885           5A                           pop dx
25392 6886           58                           pop ax
25393 6887           C3                           ret
25394                                           ! 3322 endasm
25395                                           !BCC_ENDASM
25396                                           ! 3323 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25397                                           ! Register BX used in function biosfn_load_text_8_8_pat
25398                       00006888            _biosfn_load_text_8_16_pat:
25399                                           !BCC_EOS
25400                                           !BCC_EOS
25401                                           ! 3324 {
25402                                           ! 3325  Bit16u blockaddr,dest,i,src;
25403                                           !BCC_EOS
25404                                           ! 3326  get_font_access();
25405 6888           55                         push	bp
25406 6889           89E5                       mov	bp,sp
25407 688B           83C4                   F8  add	sp,*-8
25408                                           ! Debug: func () void = get_font_access+0 (used reg = )
25409 688E           E8         FC86            call	_get_font_access
25410                                           !BCC_EOS
25411                                           ! 3327  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25412                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25413 6891           8A46         06            mov	al,6[bp]
25414 6894           24                     04  and	al,*4
25415                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25416 6896           30E4                       xor	ah,ah
25417 6898           88C4                       mov	ah,al
25418 689A           30C0                       xor	al,al
25419 689C           B1                     03  mov	cl,*3
25420 689E           D3E0                       shl	ax,cl
25421 68A0           50                         push	ax
25422                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25423 68A1           8A46         06            mov	al,6[bp]
25424 68A4           24                     03  and	al,*3
25425                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25426 68A6           30E4                       xor	ah,ah
25427 68A8           88C4                       mov	ah,al
25428 68AA           30C0                       xor	al,al
25429 68AC           B1                     06  mov	cl,*6
25430 68AE           D3E0                       shl	ax,cl
25431                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25432 68B0           0346         F6            add	ax,-$A[bp]
25433 68B3           44                         inc	sp
25434 68B4           44                         inc	sp
25435                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25436 68B5           8946         FE            mov	-2[bp],ax
25437                                           !BCC_EOS
25438                                           ! 3328  for(i=0;i<0x100;i++)
25439                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25440 68B8           31C0                       xor	ax,ax
25441 68BA           8946         FA            mov	-6[bp],ax
25442                                           !BCC_EOS
25443                                           !BCC_EOS
25444                                           ! 3329   {
25445 68BD           EB           3B            jmp .216
25446                       000068BF            .217:
25447                                           ! 3330    src = i * 16;
25448                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25449 68BF           8B46         FA            mov	ax,-6[bp]
25450 68C2           B1                     04  mov	cl,*4
25451 68C4           D3E0                       shl	ax,cl
25452                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25453 68C6           8946         F8            mov	-8[bp],ax
25454                                           !BCC_EOS
25455                                           ! 3331    dest = blockaddr + i * 32;
25456                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25457 68C9           8B46         FA            mov	ax,-6[bp]
25458 68CC           B1                     05  mov	cl,*5
25459 68CE           D3E0                       shl	ax,cl
25460                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25461                                           ! Debug: expression subtree swapping
25462 68D0           0346         FE            add	ax,-2[bp]
25463                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25464 68D3           8946         FC            mov	-4[bp],ax
25465                                           !BCC_EOS
25466                                           ! 3332    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25467                                           ! Debug: list int = const $10 (used reg = )
25468 68D6           B8                   0010  mov	ax,*$10
25469 68D9           50                         push	ax
25470                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25471 68DA           8B5E         F8            mov	bx,-8[bp]
25472                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25473                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25474 68DD           81C3                 251A  add	bx,#_vgafont16
25475 68E1           53                         push	bx
25476                                           ! Debug: list unsigned int = const $C000 (used reg = )
25477 68E2           B8                   C000  mov	ax,#$C000
25478 68E5           50                         push	ax
25479                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25480 68E6           FF76         FC            push	-4[bp]
25481                                           ! Debug: list unsigned int = const $A000 (used reg = )
25482 68E9           B8                   A000  mov	ax,#$A000
25483 68EC           50                         push	ax
25484                                           ! Debug: func () void = memcpyb+0 (used reg = )
25485 68ED           E8         11CD            call	_memcpyb
25486 68F0           83C4                   0A  add	sp,*$A
25487                                           !BCC_EOS
25488                                           ! 3333   }
25489                                           ! 3334  release_font_access();
25490                       000068F3            .215:
25491                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25492 68F3           8B46         FA            mov	ax,-6[bp]
25493 68F6           40                         inc	ax
25494 68F7           8946         FA            mov	-6[bp],ax
25495                       000068FA            .216:
25496                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25497 68FA           8B46         FA            mov	ax,-6[bp]
25498 68FD           3D                   0100  cmp	ax,#$100
25499 6900           72           BD            jb 	.217
25500                       00006902            .218:
25501                       00006902            .214:
25502                                           ! Debug: func () void = release_font_access+0 (used reg = )
25503 6902           E8         FC35            call	_release_font_access
25504                                           !BCC_EOS
25505                                           ! 3335  if(AL>=0x10)
25506                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25507 6905           8A46         04            mov	al,4[bp]
25508 6908           3C                     10  cmp	al,*$10
25509 690A           72           09            jb  	.219
25510                       0000690C            .21A:
25511                                           ! 3336   {
25512                                           ! 3337    set_scan_lines(16);
25513                                           ! Debug: list int = const $10 (used reg = )
25514 690C           B8                   0010  mov	ax,*$10
25515 690F           50                         push	ax
25516                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25517 6910           E8         FC5B            call	_set_scan_lines
25518 6913           44                         inc	sp
25519 6914           44                         inc	sp
25520                                           !BCC_EOS
25521                                           ! 3338   }
25522                                           ! 3339 }
25523                       00006915            .219:
25524 6915           89EC                       mov	sp,bp
25525 6917           5D                         pop	bp
25526 6918           C3                         ret
25527                                           ! 3340 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
25528                                           ! Register BX used in function biosfn_load_text_8_16_pat
25529                       00006919            _biosfn_load_gfx_8_8_chars:
25530                                           !BCC_EOS
25531                                           !BCC_EOS
25532                                           ! 3341 {
25533                                           ! 3342 }
25534 6919           C3                         ret
25535                                           ! 3343 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
25536                       0000691A            _biosfn_load_gfx_user_chars:
25537                                           !BCC_EOS
25538                                           !BCC_EOS
25539                                           !BCC_EOS
25540                                           !BCC_EOS
25541                                           !BCC_EOS
25542                                           ! 3344 {
25543                                           ! 3345 }
25544 691A           C3                         ret
25545                                           ! 3346 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
25546                       0000691B            _biosfn_load_gfx_8_14_chars:
25547                                           !BCC_EOS
25548                                           ! 3347 {
25549                                           ! 3348 }
25550 691B           C3                         ret
25551                                           ! 3349 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
25552                       0000691C            _biosfn_load_gfx_8_8_dd_chars:
25553                                           !BCC_EOS
25554                                           ! 3350 {
25555                                           ! 3351 }
25556 691C           C3                         ret
25557                                           ! 3352 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
25558                       0000691D            _biosfn_load_gfx_8_16_chars:
25559                                           !BCC_EOS
25560                                           ! 3353 {
25561                                           ! 3354 }
25562 691D           C3                         ret
25563                                           ! 3355 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
25564                                           ! 3356 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
25565                       0000691E            _biosfn_get_font_info:
25566                                           !BCC_EOS
25567                                           !BCC_EOS
25568                                           !BCC_EOS
25569                                           !BCC_EOS
25570                                           !BCC_EOS
25571                                           ! 3357 {Bit16u ss=get_SS();
25572 691E           55                         push	bp
25573 691F           89E5                       mov	bp,sp
25574 6921           4C                         dec	sp
25575 6922           4C                         dec	sp
25576                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
25577 6923           E8         1283            call	_get_SS
25578                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
25579 6926           8946         FE            mov	-2[bp],ax
25580                                           !BCC_EOS
25581                                           ! 3358  switch(BH)
25582 6929           8A46         04            mov	al,4[bp]
25583                                           ! 3359   {case 0x00:
25584 692C           E9         0143            br 	.21D
25585                                           ! 3360     write_word(ss,ES,read_word(0x00,0x1f*4));
25586                       0000692F            .21E:
25587                                           ! Debug: list int = const $7C (used reg = )
25588 692F           B8                   007C  mov	ax,*$7C
25589 6932           50                         push	ax
25590                                           ! Debug: list int = const 0 (used reg = )
25591 6933           31C0                       xor	ax,ax
25592 6935           50                         push	ax
25593                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25594 6936           E8         11F7            call	_read_word
25595 6939           83C4                   04  add	sp,*4
25596                                           ! Debug: list unsigned short = ax+0 (used reg = )
25597 693C           50                         push	ax
25598                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25599 693D           FF76         06            push	6[bp]
25600                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25601 6940           FF76         FE            push	-2[bp]
25602                                           ! Debug: func () void = write_word+0 (used reg = )
25603 6943           E8         1215            call	_write_word
25604 6946           83C4                   06  add	sp,*6
25605                                           !BCC_EOS
25606                                           ! 3361     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
25607                                           ! Debug: list int = const $7E (used reg = )
25608 6949           B8                   007E  mov	ax,*$7E
25609 694C           50                         push	ax
25610                                           ! Debug: list int = const 0 (used reg = )
25611 694D           31C0                       xor	ax,ax
25612 694F           50                         push	ax
25613                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25614 6950           E8         11DD            call	_read_word
25615 6953           83C4                   04  add	sp,*4
25616                                           ! Debug: list unsigned short = ax+0 (used reg = )
25617 6956           50                         push	ax
25618                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25619 6957           FF76         08            push	8[bp]
25620                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25621 695A           FF76         FE            push	-2[bp]
25622                                           ! Debug: func () void = write_word+0 (used reg = )
25623 695D           E8         11FB            call	_write_word
25624 6960           83C4                   06  add	sp,*6
25625                                           !BCC_EOS
25626                                           ! 3362     break;
25627 6963           E9         0131            br 	.21B
25628                                           !BCC_EOS
25629                                           ! 3363    case 0x01:
25630                                           ! 3364     write_word(ss,ES,read_word(0x00,0x43*4));
25631                       00006966            .21F:
25632                                           ! Debug: list int = const $10C (used reg = )
25633 6966           B8                   010C  mov	ax,#$10C
25634 6969           50                         push	ax
25635                                           ! Debug: list int = const 0 (used reg = )
25636 696A           31C0                       xor	ax,ax
25637 696C           50                         push	ax
25638                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25639 696D           E8         11C0            call	_read_word
25640 6970           83C4                   04  add	sp,*4
25641                                           ! Debug: list unsigned short = ax+0 (used reg = )
25642 6973           50                         push	ax
25643                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25644 6974           FF76         06            push	6[bp]
25645                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25646 6977           FF76         FE            push	-2[bp]
25647                                           ! Debug: func () void = write_word+0 (used reg = )
25648 697A           E8         11DE            call	_write_word
25649 697D           83C4                   06  add	sp,*6
25650                                           !BCC_EOS
25651                                           ! 3365     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
25652                                           ! Debug: list int = const $10E (used reg = )
25653 6980           B8                   010E  mov	ax,#$10E
25654 6983           50                         push	ax
25655                                           ! Debug: list int = const 0 (used reg = )
25656 6984           31C0                       xor	ax,ax
25657 6986           50                         push	ax
25658                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25659 6987           E8         11A6            call	_read_word
25660 698A           83C4                   04  add	sp,*4
25661                                           ! Debug: list unsigned short = ax+0 (used reg = )
25662 698D           50                         push	ax
25663                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25664 698E           FF76         08            push	8[bp]
25665                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25666 6991           FF76         FE            push	-2[bp]
25667                                           ! Debug: func () void = write_word+0 (used reg = )
25668 6994           E8         11C4            call	_write_word
25669 6997           83C4                   06  add	sp,*6
25670                                           !BCC_EOS
25671                                           ! 3366     break;
25672 699A           E9         00FA            br 	.21B
25673                                           !BCC_EOS
25674                                           ! 3367    case 0x02:
25675                                           ! 3368     write_word(ss,ES,0xC000);
25676                       0000699D            .220:
25677                                           ! Debug: list unsigned int = const $C000 (used reg = )
25678 699D           B8                   C000  mov	ax,#$C000
25679 69A0           50                         push	ax
25680                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25681 69A1           FF76         06            push	6[bp]
25682                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25683 69A4           FF76         FE            push	-2[bp]
25684                                           ! Debug: func () void = write_word+0 (used reg = )
25685 69A7           E8         11B1            call	_write_word
25686 69AA           83C4                   06  add	sp,*6
25687                                           !BCC_EOS
25688                                           ! 3369     write_word(ss,BP,vgafont14);
25689                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
25690 69AD           BB                   171A  mov	bx,#_vgafont14
25691 69B0           53                         push	bx
25692                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25693 69B1           FF76         08            push	8[bp]
25694                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25695 69B4           FF76         FE            push	-2[bp]
25696                                           ! Debug: func () void = write_word+0 (used reg = )
25697 69B7           E8         11A1            call	_write_word
25698 69BA           83C4                   06  add	sp,*6
25699                                           !BCC_EOS
25700                                           ! 3370     break;
25701 69BD           E9         00D7            br 	.21B
25702                                           !BCC_EOS
25703                                           ! 3371    case 0x03:
25704                                           ! 3372     write_word(ss,ES,0xC000);
25705                       000069C0            .221:
25706                                           ! Debug: list unsigned int = const $C000 (used reg = )
25707 69C0           B8                   C000  mov	ax,#$C000
25708 69C3           50                         push	ax
25709                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25710 69C4           FF76         06            push	6[bp]
25711                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25712 69C7           FF76         FE            push	-2[bp]
25713                                           ! Debug: func () void = write_word+0 (used reg = )
25714 69CA           E8         118E            call	_write_word
25715 69CD           83C4                   06  add	sp,*6
25716                                           !BCC_EOS
25717                                           ! 3373     write_word(ss,BP,vgafont8);
25718                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
25719 69D0           BB                   0F1A  mov	bx,#_vgafont8
25720 69D3           53                         push	bx
25721                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25722 69D4           FF76         08            push	8[bp]
25723                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25724 69D7           FF76         FE            push	-2[bp]
25725                                           ! Debug: func () void = write_word+0 (used reg = )
25726 69DA           E8         117E            call	_write_word
25727 69DD           83C4                   06  add	sp,*6
25728                                           !BCC_EOS
25729                                           ! 3374     break;
25730 69E0           E9         00B4            br 	.21B
25731                                           !BCC_EOS
25732                                           ! 3375    case 0x04:
25733                                           ! 3376     write_word(ss,ES,0xC000);
25734                       000069E3            .222:
25735                                           ! Debug: list unsigned int = const $C000 (used reg = )
25736 69E3           B8                   C000  mov	ax,#$C000
25737 69E6           50                         push	ax
25738                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25739 69E7           FF76         06            push	6[bp]
25740                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25741 69EA           FF76         FE            push	-2[bp]
25742                                           ! Debug: func () void = write_word+0 (used reg = )
25743 69ED           E8         116B            call	_write_word
25744 69F0           83C4                   06  add	sp,*6
25745                                           !BCC_EOS
25746                                           ! 3377     write_word(ss,BP,vgafont8+128*8);
25747                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
25748 69F3           BB                   131A  mov	bx,#_vgafont8+$400
25749 69F6           53                         push	bx
25750                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25751 69F7           FF76         08            push	8[bp]
25752                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25753 69FA           FF76         FE            push	-2[bp]
25754                                           ! Debug: func () void = write_word+0 (used reg = )
25755 69FD           E8         115B            call	_write_word
25756 6A00           83C4                   06  add	sp,*6
25757                                           !BCC_EOS
25758                                           ! 3378     break;
25759 6A03           E9         0091            br 	.21B
25760                                           !BCC_EOS
25761                                           ! 3379    case 0x05:
25762                                           ! 3380     write_word(ss,ES,0xC000);
25763                       00006A06            .223:
25764                                           ! Debug: list unsigned int = const $C000 (used reg = )
25765 6A06           B8                   C000  mov	ax,#$C000
25766 6A09           50                         push	ax
25767                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25768 6A0A           FF76         06            push	6[bp]
25769                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25770 6A0D           FF76         FE            push	-2[bp]
25771                                           ! Debug: func () void = write_word+0 (used reg = )
25772 6A10           E8         1148            call	_write_word
25773 6A13           83C4                   06  add	sp,*6
25774                                           !BCC_EOS
25775                                           ! 3381     write_word(ss,BP,vgafont14alt);
25776                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
25777 6A16           BB                   351A  mov	bx,#_vgafont14alt
25778 6A19           53                         push	bx
25779                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25780 6A1A           FF76         08            push	8[bp]
25781                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25782 6A1D           FF76         FE            push	-2[bp]
25783                                           ! Debug: func () void = write_word+0 (used reg = )
25784 6A20           E8         1138            call	_write_word
25785 6A23           83C4                   06  add	sp,*6
25786                                           !BCC_EOS
25787                                           ! 3382     break;
25788 6A26           EB           6F            jmp .21B
25789                                           !BCC_EOS
25790                                           ! 3383    case 0x06:
25791                                           ! 3384     write_word(ss,ES,0xC000);
25792                       00006A28            .224:
25793                                           ! Debug: list unsigned int = const $C000 (used reg = )
25794 6A28           B8                   C000  mov	ax,#$C000
25795 6A2B           50                         push	ax
25796                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25797 6A2C           FF76         06            push	6[bp]
25798                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25799 6A2F           FF76         FE            push	-2[bp]
25800                                           ! Debug: func () void = write_word+0 (used reg = )
25801 6A32           E8         1126            call	_write_word
25802 6A35           83C4                   06  add	sp,*6
25803                                           !BCC_EOS
25804                                           ! 3385     write_word(ss,BP,vgafont16);
25805                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
25806 6A38           BB                   251A  mov	bx,#_vgafont16
25807 6A3B           53                         push	bx
25808                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25809 6A3C           FF76         08            push	8[bp]
25810                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25811 6A3F           FF76         FE            push	-2[bp]
25812                                           ! Debug: func () void = write_word+0 (used reg = )
25813 6A42           E8         1116            call	_write_word
25814 6A45           83C4                   06  add	sp,*6
25815                                           !BCC_EOS
25816                                           ! 3386     break;
25817 6A48           EB           4D            jmp .21B
25818                                           !BCC_EOS
25819                                           ! 3387    case 0x07:
25820                                           ! 3388     write_word(ss,ES,0xC000);
25821                       00006A4A            .225:
25822                                           ! Debug: list unsigned int = const $C000 (used reg = )
25823 6A4A           B8                   C000  mov	ax,#$C000
25824 6A4D           50                         push	ax
25825                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25826 6A4E           FF76         06            push	6[bp]
25827                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25828 6A51           FF76         FE            push	-2[bp]
25829                                           ! Debug: func () void = write_word+0 (used reg = )
25830 6A54           E8         1104            call	_write_word
25831 6A57           83C4                   06  add	sp,*6
25832                                           !BCC_EOS
25833                                           ! 3389     write_word(ss,BP,vgafont16alt);
25834                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
25835 6A5A           BB                   351B  mov	bx,#_vgafont16alt
25836 6A5D           53                         push	bx
25837                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25838 6A5E           FF76         08            push	8[bp]
25839                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25840 6A61           FF76         FE            push	-2[bp]
25841                                           ! Debug: func () void = write_word+0 (used reg = )
25842 6A64           E8         10F4            call	_write_word
25843 6A67           83C4                   06  add	sp,*6
25844                                           !BCC_EOS
25845                                           ! 3390     break;
25846 6A6A           EB           2B            jmp .21B
25847                                           !BCC_EOS
25848                                           ! 3391    default:
25849                                           ! 3392     return;
25850                       00006A6C            .226:
25851 6A6C           89EC                       mov	sp,bp
25852 6A6E           5D                         pop	bp
25853 6A6F           C3                         ret
25854                                           !BCC_EOS
25855                                           ! 3393   }
25856                                           ! 3394  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
25857 6A70           EB           25            jmp .21B
25858                       00006A72            .21D:
25859 6A72           2C                     00  sub	al,*0
25860 6A74           72           F6            jb 	.226
25861 6A76           3C                     07  cmp	al,*7
25862 6A78           77           1B            ja  	.227
25863 6A7A           30E4                       xor	ah,ah
25864 6A7C           D1E0                       shl	ax,*1
25865 6A7E           89C3                       mov	bx,ax
25866 6A80           2E                         seg	cs
25867 6A81           FFA7       6A85            br	.228[bx]
25868                       00006A85            .228:
25869 6A85                      692F            .word	.21E
25870 6A87                      6966            .word	.21F
25871 6A89                      699D            .word	.220
25872 6A8B                      69C0            .word	.221
25873 6A8D                      69E3            .word	.222
25874 6A8F                      6A06            .word	.223
25875 6A91                      6A28            .word	.224
25876 6A93                      6A4A            .word	.225
25877                       00006A95            .227:
25878 6A95           EB           D5            jmp	.226
25879                       00006A97            .21B:
25880                       FFFFFFFC            ..FFF5	=	-4
25881                                           ! Debug: list int = const $85 (used reg = )
25882 6A97           B8                   0085  mov	ax,#$85
25883 6A9A           50                         push	ax
25884                                           ! Debug: list int = const $40 (used reg = )
25885 6A9B           B8                   0040  mov	ax,*$40
25886 6A9E           50                         push	ax
25887                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
25888 6A9F           E8         107B            call	_read_byte
25889 6AA2           83C4                   04  add	sp,*4
25890                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
25891 6AA5           30E4                       xor	ah,ah
25892                                           ! Debug: list unsigned short = ax+0 (used reg = )
25893 6AA7           50                         push	ax
25894                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
25895 6AA8           FF76         0A            push	$A[bp]
25896                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25897 6AAB           FF76         FE            push	-2[bp]
25898                                           ! Debug: func () void = write_word+0 (used reg = )
25899 6AAE           E8         10AA            call	_write_word
25900 6AB1           83C4                   06  add	sp,*6
25901                                           !BCC_EOS
25902                                           ! 3395  write_wo
25903                                           ! 3395 rd(ss,DX,(Bit16u)read_byte(0x40,0x84));
25904                                           ! Debug: list int = const $84 (used reg = )
25905 6AB4           B8                   0084  mov	ax,#$84
25906 6AB7           50                         push	ax
25907                                           ! Debug: list int = const $40 (used reg = )
25908 6AB8           B8                   0040  mov	ax,*$40
25909 6ABB           50                         push	ax
25910                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
25911 6ABC           E8         105E            call	_read_byte
25912 6ABF           83C4                   04  add	sp,*4
25913                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
25914 6AC2           30E4                       xor	ah,ah
25915                                           ! Debug: list unsigned short = ax+0 (used reg = )
25916 6AC4           50                         push	ax
25917                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
25918 6AC5           FF76         0C            push	$C[bp]
25919                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25920 6AC8           FF76         FE            push	-2[bp]
25921                                           ! Debug: func () void = write_word+0 (used reg = )
25922 6ACB           E8         108D            call	_write_word
25923 6ACE           83C4                   06  add	sp,*6
25924                                           !BCC_EOS
25925                                           ! 3396 }
25926 6AD1           89EC                       mov	sp,bp
25927 6AD3           5D                         pop	bp
25928 6AD4           C3                         ret
25929                                           ! 3397 #asm
25930                                           !BCC_ASM
25931                       00000006            _biosfn_get_font_info.BP	set	6
25932                       00000002            _biosfn_get_font_info.BH	set	2
25933                       00000008            _biosfn_get_font_info.CX	set	8
25934                       0000000A            _biosfn_get_font_info.DX	set	$A
25935                       00000004            _biosfn_get_font_info.ES	set	4
25936                       00006AD5            biosfn_get_ega_info:
25937 6AD5           1E                           push ds
25938 6AD6           50                           push ax
25939 6AD7           B8                   0040    mov ax, # 0x40
25940 6ADA           8ED8                         mov ds, ax
25941 6ADC           30ED                         xor ch, ch
25942 6ADE           BB                   0088    mov bx, # 0x88
25943 6AE1           8A0F                         mov cl, [bx]
25944 6AE3           80E1                   0F    and cl, #0x0f
25945 6AE6           BB                   0063    mov bx, # 0x63
25946 6AE9           8B07                         mov ax, [bx]
25947 6AEB           BB                   0003    mov bx, #0x0003
25948 6AEE           3D                   03B4    cmp ax, # 0x3b4
25949 6AF1           75           02              jne mode_ega_color
25950 6AF3           B7                     01    mov bh, #0x01
25951                       00006AF5            mode_ega_color:
25952 6AF5           58                           pop ax
25953 6AF6           1F                           pop ds
25954 6AF7           C3                           ret
25955                                           ! 3417 endasm
25956                                           !BCC_ENDASM
25957                                           ! 3418 static void biosfn_alternate_prtsc()
25958                                           ! Register BX used in function biosfn_get_font_info
25959                                           ! 3419 {
25960                       00006AF8            _biosfn_alternate_prtsc:
25961                                           ! 3420 }
25962 6AF8           C3                         ret
25963                                           ! 3421 #asm
25964                                           !BCC_ASM
25965                       00006AF9            biosfn_select_vert_res:
25966                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
25967 6AF9           1E                           push ds
25968 6AFA           53                           push bx
25969 6AFB           52                           push dx
25970 6AFC           88C2                         mov dl, al
25971 6AFE           B8                   0040    mov ax, # 0x40
25972 6B01           8ED8                         mov ds, ax
25973 6B03           BB                   0089    mov bx, # 0x89
25974 6B06           8A07                         mov al, [bx]
25975 6B08           BB                   0088    mov bx, # 0x88
25976 6B0B           8A27                         mov ah, [bx]
25977 6B0D           80FA                   01    cmp dl, #0x01
25978 6B10           74           15              je vert_res_350
25979 6B12           72           1D              jb vert_res_200
25980 6B14           80FA                   02    cmp dl, #0x02
25981 6B17           74           02              je vert_res_400
25982 6B19           EB           2A              jmp set_retcode
25983                       00006B1B            vert_res_400:
25984                                             ; reset modeset ctl bit 7 and set bit 4
25985                                             ; set switches bit 3-0 to 0x09
25986 6B1B           24                     7F    and al, #0x7f
25987 6B1D           0C                     10    or al, #0x10
25988 6B1F           80E4                   F0    and ah, #0xf0
25989 6B22           80CC                   09    or ah, #0x09
25990 6B25           75           14              jnz set_vert_res
25991                       00006B27            vert_res_350:
25992                                             ; reset modeset ctl bit 7 and bit 4
25993                                             ; set switches bit 3-0 to 0x09
25994 6B27           24                     6F    and al, #0x6f
25995 6B29           80E4                   F0    and ah, #0xf0
25996 6B2C           80CC                   09    or ah, #0x09
25997 6B2F           75           0A              jnz set_vert_res
25998                       00006B31            vert_res_200:
25999                                             ; set modeset ctl bit 7 and reset bit 4
26000                                             ; set switches bit 3-0 to 0x08
26001 6B31           24                     EF    and al, #0xef
26002 6B33           0C                     80    or al, #0x80
26003 6B35           80E4                   F0    and ah, #0xf0
26004 6B38           80CC                   08    or ah, #0x08
26005                       00006B3B            set_vert_res:
26006 6B3B           BB                   0089    mov bx, # 0x89
26007 6B3E           8807                         mov [bx], al
26008 6B40           BB                   0088    mov bx, # 0x88
26009 6B43           8827                         mov [bx], ah
26010                       00006B45            set_retcode:
26011 6B45           B8                   1212    mov ax, #0x1212
26012 6B48           5A                           pop dx
26013 6B49           5B                           pop bx
26014 6B4A           1F                           pop ds
26015 6B4B           C3                           ret
26016                       00006B4C            biosfn_enable_default_palette_loading:
26017 6B4C           1E                           push ds
26018 6B4D           53                           push bx
26019 6B4E           52                           push dx
26020 6B4F           88C2                         mov dl, al
26021 6B51           80E2                   01    and dl, #0x01
26022 6B54           C0E2                   03    shl dl, 3
26023 6B57           B8                   0040    mov ax, # 0x40
26024 6B5A           8ED8                         mov ds, ax
26025 6B5C           BB                   0089    mov bx, # 0x89
26026 6B5F           8A07                         mov al, [bx]
26027 6B61           24                     F7    and al, #0xf7
26028 6B63           08D0                         or al, dl
26029 6B65           8807                         mov [bx], al
26030 6B67           B8                   1212    mov ax, #0x1212
26031 6B6A           5A                           pop dx
26032 6B6B           5B                           pop bx
26033 6B6C           1F                           pop ds
26034 6B6D           C3                           ret
26035                       00006B6E            biosfn_enable_video_addressing:
26036 6B6E           53                           push bx
26037 6B6F           52                           push dx
26038 6B70           88C3                         mov bl, al
26039 6B72           80E3                   01    and bl, #0x01
26040 6B75           80F3                   01    xor bl, #0x01
26041 6B78           D0E3                         shl bl, 1
26042 6B7A           BA                   03CC    mov dx, # 0x3cc
26043 6B7D           EC                           in al, dx
26044 6B7E           24                     FD    and al, #0xfd
26045 6B80           08D8                         or al, bl
26046 6B82           BA                   03C2    mov dx, # 0x3c2
26047 6B85           EE                           out dx, al
26048 6B86           B8                   1212    mov ax, #0x1212
26049 6B89           5A                           pop dx
26050 6B8A           5B                           pop bx
26051 6B8B           C3                           ret
26052                       00006B8C            biosfn_enable_grayscale_summing:
26053 6B8C           1E                           push ds
26054 6B8D           53                           push bx
26055 6B8E           52                           push dx
26056 6B8F           88C2                         mov dl, al
26057 6B91           80E2                   01    and dl, #0x01
26058 6B94           80F2                   01    xor dl, #0x01
26059 6B97           D0E2                         shl dl, 1
26060 6B99           B8                   0040    mov ax, # 0x40
26061 6B9C           8ED8                         mov ds, ax
26062 6B9E           BB                   0089    mov bx, # 0x89
26063 6BA1           8A07                         mov al, [bx]
26064 6BA3           24                     FD    and al, #0xfd
26065 6BA5           08D0                         or al, dl
26066 6BA7           8807                         mov [bx], al
26067 6BA9           B8                   1212    mov ax, #0x1212
26068 6BAC           5A                           pop dx
26069 6BAD           5B                           pop bx
26070 6BAE           1F                           pop ds
26071 6BAF           C3                           ret
26072                       00006BB0            biosfn_enable_cursor_emulation:
26073 6BB0           1E                           push ds
26074 6BB1           53                           push bx
26075 6BB2           52                           push dx
26076 6BB3           88C2                         mov dl, al
26077 6BB5           80E2                   01    and dl, #0x01
26078 6BB8           80F2                   01    xor dl, #0x01
26079 6BBB           B8                   0040    mov ax, # 0x40
26080 6BBE           8ED8                         mov ds, ax
26081 6BC0           BB                   0089    mov bx, # 0x89
26082 6BC3           8A07                         mov al, [bx]
26083 6BC5           24                     FE    and al, #0xfe
26084 6BC7           08D0                         or al, dl
26085 6BC9           8807                         mov [bx], al
26086 6BCB           B8                   1212    mov ax, #0x1212
26087 6BCE           5A                           pop dx
26088 6BCF           5B                           pop bx
26089 6BD0           1F                           pop ds
26090 6BD1           C3                           ret
26091                                           ! 3548 endasm
26092                                           !BCC_ENDASM
26093                                           ! 3549 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26094                       00006BD2            _biosfn_switch_video_interface:
26095                                           !BCC_EOS
26096                                           !BCC_EOS
26097                                           !BCC_EOS
26098                                           ! 3550 {
26099                                           ! 3551 }
26100 6BD2           C3                         ret
26101                                           ! 3552 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26102                       00006BD3            _biosfn_enable_video_refresh_control:
26103                                           !BCC_EOS
26104                                           ! 3553 {
26105                                           ! 3554 }
26106 6BD3           C3                         ret
26107                                           ! 3555 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26108                                           ! 3556 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26109                       00006BD4            _biosfn_write_string:
26110                                           !BCC_EOS
26111                                           !BCC_EOS
26112                                           !BCC_EOS
26113                                           !BCC_EOS
26114                                           !BCC_EOS
26115                                           !BCC_EOS
26116                                           !BCC_EOS
26117                                           !BCC_EOS
26118                                           ! 3557 {
26119                                           ! 3558  Bit16u newcurs,oldcurs,dummy;
26120                                           !BCC_EOS
26121                                           ! 3559  Bit8u car,carattr;
26122                                           !BCC_EOS
26123                                           ! 3560  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26124 6BD4           55                         push	bp
26125 6BD5           89E5                       mov	bp,sp
26126 6BD7           83C4                   F8  add	sp,*-8
26127                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26128 6BDA           8D5E         FC            lea	bx,-4[bp]
26129 6BDD           53                         push	bx
26130                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26131 6BDE           8D5E         FA            lea	bx,-6[bp]
26132 6BE1           53                         push	bx
26133                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26134 6BE2           8A46         06            mov	al,6[bp]
26135 6BE5           30E4                       xor	ah,ah
26136 6BE7           50                         push	ax
26137                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26138 6BE8           E8         D761            call	_biosfn_get_cursor_pos
26139 6BEB           83C4                   06  add	sp,*6
26140                                           !BCC_EOS
26141                                           ! 3561  if(row==0xff)
26142                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26143 6BEE           8A46         0C            mov	al,$C[bp]
26144 6BF1           3C                     FF  cmp	al,#$FF
26145 6BF3           75           12            jne 	.229
26146                       00006BF5            .22A:
26147                                           ! 3562   {col=oldcurs&0x00ff;
26148                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26149 6BF5           8A46         FC            mov	al,-4[bp]
26150                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26151 6BF8           8846         0E            mov	$E[bp],al
26152                                           !BCC_EOS
26153                                           ! 3563    row=(oldcurs&0xff00)>>8;
26154                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26155 6BFB           8B46         FC            mov	ax,-4[bp]
26156 6BFE           30C0                       xor	al,al
26157                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26158 6C00           88E0                       mov	al,ah
26159 6C02           30E4                       xor	ah,ah
26160                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26161 6C04           8846         0C            mov	$C[bp],al
26162                                           !BCC_EOS
26163                                           ! 3564   }
26164                                           ! 3565  newcurs=row; newcurs<<=8; newcurs+=col;
26165                       00006C07            .229:
26166                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26167 6C07           8A46         0C            mov	al,$C[bp]
26168 6C0A           30E4                       xor	ah,ah
26169 6C0C           8946         FE            mov	-2[bp],ax
26170                                           !BCC_EOS
26171                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26172 6C0F           8B46         FE            mov	ax,-2[bp]
26173 6C12           88C4                       mov	ah,al
26174 6C14           30C0                       xor	al,al
26175 6C16           8946         FE            mov	-2[bp],ax
26176                                           !BCC_EOS
26177                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26178 6C19           8B46         FE            mov	ax,-2[bp]
26179 6C1C           0246         0E            add	al,$E[bp]
26180 6C1F           80D4                   00  adc	ah,*0
26181 6C22           8946         FE            mov	-2[bp],ax
26182                                           !BCC_EOS
26183                                           ! 3566  biosfn_set_cursor_pos(page,newcurs);
26184                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26185 6C25           FF76         FE            push	-2[bp]
26186                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26187 6C28           8A46         06            mov	al,6[bp]
26188 6C2B           30E4                       xor	ah,ah
26189 6C2D           50                         push	ax
26190                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26191 6C2E           E8         D61A            call	_biosfn_set_cursor_pos
26192 6C31           83C4                   04  add	sp,*4
26193                                           !BCC_EOS
26194                                           ! 3567  while(count--!=0)
26195                                           ! 3568   {
26196 6C34           EB           4F            jmp .22C
26197                       00006C36            .22D:
26198                                           ! 3569    car=read_byte(seg,offset++);
26199                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26200 6C36           8B46         12            mov	ax,$12[bp]
26201 6C39           40                         inc	ax
26202 6C3A           8946         12            mov	$12[bp],ax
26203                                           ! Debug: list unsigned short = ax-1 (used reg = )
26204 6C3D           48                         dec	ax
26205 6C3E           50                         push	ax
26206                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26207 6C3F           FF76         10            push	$10[bp]
26208                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26209 6C42           E8         0ED8            call	_read_byte
26210 6C45           83C4                   04  add	sp,*4
26211                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26212 6C48           8846         F9            mov	-7[bp],al
26213                                           !BCC_EOS
26214                                           ! 3570    if((flag&0x02)!=0)
26215                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26216 6C4B           8A46         04            mov	al,4[bp]
26217 6C4E           24                     02  and	al,*2
26218                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26219 6C50           84C0                       test	al,al
26220 6C52           74           15            je  	.22E
26221                       00006C54            .22F:
26222                                           ! 3571     attr=read_byte(seg,offset++);
26223                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26224 6C54           8B46         12            mov	ax,$12[bp]
26225 6C57           40                         inc	ax
26226 6C58           8946         12            mov	$12[bp],ax
26227                                           ! Debug: list unsigned short = ax-1 (used reg = )
26228 6C5B           48                         dec	ax
26229 6C5C           50                         push	ax
26230                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26231 6C5D           FF76         10            push	$10[bp]
26232                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26233 6C60           E8         0EBA            call	_read_byte
26234 6C63           83C4                   04  add	sp,*4
26235                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26236 6C66           8846         08            mov	8[bp],al
26237                                           !BCC_EOS
26238                                           ! 3572    biosfn_write_teletype(car,page,attr,3);
26239                       00006C69            .22E:
26240                                           ! Debug: list int = const 3 (used reg = )
26241 6C69           B8                   0003  mov	ax,*3
26242 6C6C           50                         push	ax
26243                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26244 6C6D           8A46         08            mov	al,8[bp]
26245 6C70           30E4                       xor	ah,ah
26246 6C72           50                         push	ax
26247                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26248 6C73           8A46         06            mov	al,6[bp]
26249 6C76           30E4                       xor	ah,ah
26250 6C78           50                         push	ax
26251                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26252 6C79           8A46         F9            mov	al,-7[bp]
26253 6C7C           30E4                       xor	ah,ah
26254 6C7E           50                         push	ax
26255                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26256 6C7F           E8         F133            call	_biosfn_write_teletype
26257 6C82           83C4                   08  add	sp,*8
26258                                           !BCC_EOS
26259                                           ! 3573   }
26260                                           ! 3574  if((flag&0x01)==0)
26261                       00006C85            .22C:
26262                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26263 6C85           8B46         0A            mov	ax,$A[bp]
26264 6C88           48                         dec	ax
26265 6C89           8946         0A            mov	$A[bp],ax
26266                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26267 6C8C           3D                   FFFF  cmp	ax,*-1
26268 6C8F           75           A5            jne	.22D
26269                       00006C91            .230:
26270                       00006C91            .22B:
26271                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26272 6C91           8A46         04            mov	al,4[bp]
26273 6C94           24                     01  and	al,*1
26274                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26275 6C96           84C0                       test	al,al
26276 6C98           75           0F            jne 	.231
26277                       00006C9A            .232:
26278                                           ! 3575   biosfn_set_cursor_pos(page,oldcurs);
26279                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26280 6C9A           FF76         FC            push	-4[bp]
26281                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26282 6C9D           8A46         06            mov	al,6[bp]
26283 6CA0           30E4                       xor	ah,ah
26284 6CA2           50                         push	ax
26285                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26286 6CA3           E8         D5A5            call	_biosfn_set_cursor_pos
26287 6CA6           83C4                   04  add	sp,*4
26288                                           !BCC_EOS
26289                                           ! 3576 }
26290                       00006CA9            .231:
26291 6CA9           89EC                       mov	sp,bp
26292 6CAB           5D                         pop	bp
26293 6CAC           C3                         ret
26294                                           ! 3577 #asm
26295                                           !BCC_ASM
26296                       00000008            _biosfn_write_string.count	set	8
26297                       0000000E            _biosfn_write_string.seg	set	$E
26298                       0000000C            _biosfn_write_string.col	set	$C
26299                       00000002            _biosfn_write_string.flag	set	2
26300                       00000006            _biosfn_write_string.attr	set	6
26301                       00000004            _biosfn_write_string.page	set	4
26302                       0000000A            _biosfn_write_string.row	set	$A
26303                       00000010            _biosfn_write_string.offset	set	$10
26304                       00006CAD            biosfn_group_1A:
26305 6CAD           3C                     00    cmp al, #0x00
26306 6CAF           74           05              je biosfn_read_display_code
26307 6CB1           3C                     01    cmp al, #0x01
26308 6CB3           74           16              je biosfn_set_display_code
26309 6CB5           C3                           ret
26310                       00006CB6            biosfn_read_display_code:
26311 6CB6           1E                           push ds
26312 6CB7           50                           push ax
26313 6CB8           B8                   0040    mov ax, # 0x40
26314 6CBB           8ED8                         mov ds, ax
26315 6CBD           BB                   008A    mov bx, # 0x8A
26316 6CC0           8A07                         mov al, [bx]
26317 6CC2           88C3                         mov bl, al
26318 6CC4           30FF                         xor bh, bh
26319 6CC6           58                           pop ax
26320 6CC7           88E0                         mov al, ah
26321 6CC9           1F                           pop ds
26322 6CCA           C3                           ret
26323                       00006CCB            biosfn_set_display_code:
26324 6CCB           1E                           push ds
26325 6CCC           50                           push ax
26326 6CCD           53                           push bx
26327 6CCE           B8                   0040    mov ax, # 0x40
26328 6CD1           8ED8                         mov ds, ax
26329 6CD3           89D8                         mov ax, bx
26330 6CD5           BB                   008A    mov bx, # 0x8A
26331 6CD8           8807                         mov [bx], al
26332 6CDA           5B                           pop bx
26333 6CDB           58                           pop ax
26334 6CDC           88E0                         mov al, ah
26335 6CDE           1F                           pop ds
26336 6CDF           C3                           ret
26337                                           ! 3611 endasm
26338                                           !BCC_ENDASM
26339                                           ! 3612 static void biosfn_read_state_info (BX,ES,DI)
26340                                           ! Register BX used in function biosfn_write_string
26341                                           ! 3613 Bit16u BX;Bit16u ES;Bit16u DI;
26342                       00006CE0            _biosfn_read_state_info:
26343                                           !BCC_EOS
26344                                           !BCC_EOS
26345                                           !BCC_EOS
26346                                           ! 3614 {
26347                                           ! 3615  write_word(ES,DI+0x00,&static_functionality);
26348 6CE0           55                         push	bp
26349 6CE1           89E5                       mov	bp,sp
26350                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26351 6CE3           BB                   0F0A  mov	bx,#_static_functionality
26352 6CE6           53                         push	bx
26353                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26354 6CE7           8B46         08            mov	ax,8[bp]
26355                                           ! Debug: list unsigned int = ax+0 (used reg = )
26356 6CEA           50                         push	ax
26357                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26358 6CEB           FF76         06            push	6[bp]
26359                                           ! Debug: func () void = write_word+0 (used reg = )
26360 6CEE           E8         0E6A            call	_write_word
26361 6CF1           89EC                       mov	sp,bp
26362                                           !BCC_EOS
26363                                           ! 3616  write_word(ES,DI+0x02,0xC000);
26364                                           ! Debug: list unsigned int = const $C000 (used reg = )
26365 6CF3           B8                   C000  mov	ax,#$C000
26366 6CF6           50                         push	ax
26367                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26368 6CF7           8B46         08            mov	ax,8[bp]
26369                                           ! Debug: list unsigned int = ax+2 (used reg = )
26370 6CFA           40                         inc	ax
26371 6CFB           40                         inc	ax
26372 6CFC           50                         push	ax
26373                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26374 6CFD           FF76         06            push	6[bp]
26375                                           ! Debug: func () void = write_word+0 (used reg = )
26376 6D00           E8         0E58            call	_write_word
26377 6D03           89EC                       mov	sp,bp
26378                                           !BCC_EOS
26379                                           ! 3617  memcpyb(ES,DI+0x04,0x40,0x49,30);
26380                                           ! Debug: list int = const $1E (used reg = )
26381 6D05           B8                   001E  mov	ax,*$1E
26382 6D08           50                         push	ax
26383                                           ! Debug: list int = const $49 (used reg = )
26384 6D09           B8                   0049  mov	ax,*$49
26385 6D0C           50                         push	ax
26386                                           ! Debug: list int = const $40 (used reg = )
26387 6D0D           B8                   0040  mov	ax,*$40
26388 6D10           50                         push	ax
26389                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26390 6D11           8B46         08            mov	ax,8[bp]
26391                                           ! Debug: list unsigned int = ax+4 (used reg = )
26392 6D14           05                   0004  add	ax,*4
26393 6D17           50                         push	ax
26394                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26395 6D18           FF76         06            push	6[bp]
26396                                           ! Debug: func () void = memcpyb+0 (used reg = )
26397 6D1B           E8         0D9F            call	_memcpyb
26398 6D1E           89EC                       mov	sp,bp
26399                                           !BCC_EOS
26400                                           ! 3618  memcpyb(ES,DI+0x22,0x40,0x84,3);
26401                                           ! Debug: list int = const 3 (used reg = )
26402 6D20           B8                   0003  mov	ax,*3
26403 6D23           50                         push	ax
26404                                           ! Debug: list int = const $84 (used reg = )
26405 6D24           B8                   0084  mov	ax,#$84
26406 6D27           50                         push	ax
26407                                           ! Debug: list int = const $40 (used reg = )
26408 6D28           B8                   0040  mov	ax,*$40
26409 6D2B           50                         push	ax
26410                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26411 6D2C           8B46         08            mov	ax,8[bp]
26412                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26413 6D2F           05                   0022  add	ax,*$22
26414 6D32           50                         push	ax
26415                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26416 6D33           FF76         06            push	6[bp]
26417                                           ! Debug: func () void = memcpyb+0 (used reg = )
26418 6D36           E8         0D84            call	_memcpyb
26419 6D39           89EC                       mov	sp,bp
26420                                           !BCC_EOS
26421                                           ! 3619  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26422                                           ! Debug: list int = const $8A (used reg = )
26423 6D3B           B8                   008A  mov	ax,#$8A
26424 6D3E           50                         push	ax
26425                                           ! Debug: list int = const $40 (used reg = )
26426 6D3F           B8                   0040  mov	ax,*$40
26427 6D42           50                         push	ax
26428                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26429 6D43           E8         0DD7            call	_read_byte
26430 6D46           89EC                       mov	sp,bp
26431                                           ! Debug: list unsigned char = al+0 (used reg = )
26432 6D48           30E4                       xor	ah,ah
26433 6D4A           50                         push	ax
26434                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26435 6D4B           8B46         08            mov	ax,8[bp]
26436                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26437 6D4E           05                   0025  add	ax,*$25
26438 6D51           50                         push	ax
26439                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26440 6D52           FF76         06            push	6[bp]
26441                                           ! Debug: func () void = write_byte+0 (used reg = )
26442 6D55           E8         0DEB            call	_write_byte
26443 6D58           89EC                       mov	sp,bp
26444                                           !BCC_EOS
26445                                           ! 3620  write_byte(ES,DI+0x26,0);
26446                                           ! Debug: list int = const 0 (used reg = )
26447 6D5A           31C0                       xor	ax,ax
26448 6D5C           50                         push	ax
26449                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26450 6D5D           8B46         08            mov	ax,8[bp]
26451                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26452 6D60           05                   0026  add	ax,*$26
26453 6D63           50                         push	ax
26454                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26455 6D64           FF76         06            push	6[bp]
26456                                           ! Debug: func () void = write_byte+0 (used reg = )
26457 6D67           E8         0DD9            call	_write_byte
26458 6D6A           89EC                       mov	sp,bp
26459                                           !BCC_EOS
26460                                           ! 3621  write_byte(ES,DI+0x27,16);
26461                                           ! Debug: list int = const $10 (used reg = )
26462 6D6C           B8                   0010  mov	ax,*$10
26463 6D6F           50                         push	ax
26464                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26465 6D70           8B46         08            mov	ax,8[bp]
26466                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26467 6D73           05                   0027  add	ax,*$27
26468 6D76           50                         push	ax
26469                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26470 6D77           FF76         06            push	6[bp]
26471                                           ! Debug: func () void = write_byte+0 (used reg = )
26472 6D7A           E8         0DC6            call	_write_byte
26473 6D7D           89EC                       mov	sp,bp
26474                                           !BCC_EOS
26475                                           ! 3622  write_byte(ES,DI+0x28,0);
26476                                           ! Debug: list int = const 0 (used reg = )
26477 6D7F           31C0                       xor	ax,ax
26478 6D81           50                         push	ax
26479                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26480 6D82           8B46         08            mov	ax,8[bp]
26481                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26482 6D85           05                   0028  add	ax,*$28
26483 6D88           50                         push	ax
26484                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26485 6D89           FF76         06            push	6[bp]
26486                                           ! Debug: func () void = write_byte+0 (used reg = )
26487 6D8C           E8         0DB4            call	_write_byte
26488 6D8F           89EC                       mov	sp,bp
26489                                           !BCC_EOS
26490                                           ! 3623  write_byte(ES,DI+0x29,8);
26491                                           ! Debug: list int = const 8 (used reg = )
26492 6D91           B8                   0008  mov	ax,*8
26493 6D94           50                         push	ax
26494                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26495 6D95           8B46         08            mov	ax,8[bp]
26496                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26497 6D98           05                   0029  add	ax,*$29
26498 6D9B           50                         push	ax
26499                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26500 6D9C           FF76         06            push	6[bp]
26501                                           ! Debug: func () void = write_byte+0 (used reg = )
26502 6D9F           E8         0DA1            call	_write_byte
26503 6DA2           89EC                       mov	sp,bp
26504                                           !BCC_EOS
26505                                           ! 3624  write_byte(ES,DI+0x2a,2);
26506                                           ! Debug: list int = const 2 (used reg = )
26507 6DA4           B8                   0002  mov	ax,*2
26508 6DA7           50                         push	ax
26509                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
26510 6DA8           8B46         08            mov	ax,8[bp]
26511                                           ! Debug: list unsigned int = ax+$2A (used reg = )
26512 6DAB           05                   002A  add	ax,*$2A
26513 6DAE           50                         push	ax
26514                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26515 6DAF           FF76         06            push	6[bp]
26516                                           ! Debug: func () void = write_byte+0 (used reg = )
26517 6DB2           E8         0D8E            call	_write_byte
26518 6DB5           89EC                       mov	sp,bp
26519                                           !BCC_EOS
26520                                           ! 3625  write_byte(ES,DI+0x2b,0);
26521                                           ! Debug: list int = const 0 (used reg = )
26522 6DB7           31C0                       xor	ax,ax
26523 6DB9           50                         push	ax
26524                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
26525 6DBA           8B46         08            mov	ax,8[bp]
26526                                           ! Debug: list unsigned int = ax+$2B (used reg = )
26527 6DBD           05                   002B  add	ax,*$2B
26528 6DC0           50                         push	ax
26529                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26530 6DC1           FF76         06            push	6[bp]
26531                                           ! Debug: func () void = write_byte+0 (used reg = )
26532 6DC4           E8         0D7C            call	_write_byte
26533 6DC7           89EC                       mov	sp,bp
26534                                           !BCC_EOS
26535                                           ! 3626  write_byte(ES,DI+0x2c,0);
26536                                           ! Debug: list int = const 0 (used reg = )
26537 6DC9           31C0                       xor	ax,ax
26538 6DCB           50                         push	ax
26539                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
26540 6DCC           8B46         08            mov	ax,8[bp]
26541                                           ! Debug: list unsigned int = ax+$2C (used reg = )
26542 6DCF           05                   002C  add	ax,*$2C
26543 6DD2           50                         push	ax
26544                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26545 6DD3           FF76         06            push	6[bp]
26546                                           ! Debug: func () void = write_byte+0 (used reg = )
26547 6DD6           E8         0D6A            call	_write_byte
26548 6DD9           89EC                       mov	sp,bp
26549                                           !BCC_EOS
26550                                           ! 3627  write_byte(E
26551                                           ! 3627 S,DI+0x31,3);
26552                                           ! Debug: list int = const 3 (used reg = )
26553 6DDB           B8                   0003  mov	ax,*3
26554 6DDE           50                         push	ax
26555                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
26556 6DDF           8B46         08            mov	ax,8[bp]
26557                                           ! Debug: list unsigned int = ax+$31 (used reg = )
26558 6DE2           05                   0031  add	ax,*$31
26559 6DE5           50                         push	ax
26560                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26561 6DE6           FF76         06            push	6[bp]
26562                                           ! Debug: func () void = write_byte+0 (used reg = )
26563 6DE9           E8         0D57            call	_write_byte
26564 6DEC           89EC                       mov	sp,bp
26565                                           !BCC_EOS
26566                                           ! 3628  write_byte(ES,DI+0x32,0);
26567                                           ! Debug: list int = const 0 (used reg = )
26568 6DEE           31C0                       xor	ax,ax
26569 6DF0           50                         push	ax
26570                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
26571 6DF1           8B46         08            mov	ax,8[bp]
26572                                           ! Debug: list unsigned int = ax+$32 (used reg = )
26573 6DF4           05                   0032  add	ax,*$32
26574 6DF7           50                         push	ax
26575                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26576 6DF8           FF76         06            push	6[bp]
26577                                           ! Debug: func () void = write_byte+0 (used reg = )
26578 6DFB           E8         0D45            call	_write_byte
26579 6DFE           89EC                       mov	sp,bp
26580                                           !BCC_EOS
26581                                           ! 3629  memsetb(ES,DI+0x33,0,13);
26582                                           ! Debug: list int = const $D (used reg = )
26583 6E00           B8                   000D  mov	ax,*$D
26584 6E03           50                         push	ax
26585                                           ! Debug: list int = const 0 (used reg = )
26586 6E04           31C0                       xor	ax,ax
26587 6E06           50                         push	ax
26588                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
26589 6E07           8B46         08            mov	ax,8[bp]
26590                                           ! Debug: list unsigned int = ax+$33 (used reg = )
26591 6E0A           05                   0033  add	ax,*$33
26592 6E0D           50                         push	ax
26593                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
26594 6E0E           FF76         06            push	6[bp]
26595                                           ! Debug: func () void = memsetb+0 (used reg = )
26596 6E11           E8         0C5F            call	_memsetb
26597 6E14           89EC                       mov	sp,bp
26598                                           !BCC_EOS
26599                                           ! 3630 }
26600 6E16           5D                         pop	bp
26601 6E17           C3                         ret
26602                                           ! 3631 static Bit16u biosfn_read_video_state_size2 (CX)
26603                                           ! Register BX used in function biosfn_read_state_info
26604                                           ! 3632      Bit16u CX;
26605                       00006E18            _biosfn_read_video_state_size2:
26606                                           !BCC_EOS
26607                                           ! 3633 {
26608                                           ! 3634     Bit16u size;
26609                                           !BCC_EOS
26610                                           ! 3635     size = 0;
26611 6E18           55                         push	bp
26612 6E19           89E5                       mov	bp,sp
26613 6E1B           4C                         dec	sp
26614 6E1C           4C                         dec	sp
26615                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
26616 6E1D           31C0                       xor	ax,ax
26617 6E1F           8946         FE            mov	-2[bp],ax
26618                                           !BCC_EOS
26619                                           ! 3636     if (CX & 1) {
26620                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
26621 6E22           8A46         04            mov	al,4[bp]
26622 6E25           24                     01  and	al,*1
26623 6E27           84C0                       test	al,al
26624 6E29           74           09            je  	.233
26625                       00006E2B            .234:
26626                                           ! 3637         size += 0x46;
26627                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
26628 6E2B           8B46         FE            mov	ax,-2[bp]
26629 6E2E           05                   0046  add	ax,*$46
26630 6E31           8946         FE            mov	-2[bp],ax
26631                                           !BCC_EOS
26632                                           ! 3638     }
26633                                           ! 3639     if (CX & 2) {
26634                       00006E34            .233:
26635                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
26636 6E34           8A46         04            mov	al,4[bp]
26637 6E37           24                     02  and	al,*2
26638 6E39           84C0                       test	al,al
26639 6E3B           74           09            je  	.235
26640                       00006E3D            .236:
26641                                           ! 3640         size += (5 + 8 + 5) * 2 + 6;
26642                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
26643 6E3D           8B46         FE            mov	ax,-2[bp]
26644 6E40           05                   002A  add	ax,*$2A
26645 6E43           8946         FE            mov	-2[bp],ax
26646                                           !BCC_EOS
26647                                           ! 3641     }
26648                                           ! 3642     if (CX & 4) {
26649                       00006E46            .235:
26650                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
26651 6E46           8A46         04            mov	al,4[bp]
26652 6E49           24                     04  and	al,*4
26653 6E4B           84C0                       test	al,al
26654 6E4D           74           09            je  	.237
26655                       00006E4F            .238:
26656                                           ! 3643         size += 3 + 256 * 3 + 1;
26657                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
26658 6E4F           8B46         FE            mov	ax,-2[bp]
26659 6E52           05                   0304  add	ax,#$304
26660 6E55           8946         FE            mov	-2[bp],ax
26661                                           !BCC_EOS
26662                                           ! 3644 }
26663                                           ! 3645     return size;
26664                       00006E58            .237:
26665 6E58           8B46         FE            mov	ax,-2[bp]
26666 6E5B           89EC                       mov	sp,bp
26667 6E5D           5D                         pop	bp
26668 6E5E           C3                         ret
26669                                           !BCC_EOS
26670                                           ! 3646 }
26671                                           ! 3647 static void biosfn_read_video_state_size (CX, BX)
26672                                           ! 3648      Bit16u CX; Bit16u *BX;
26673                       00006E5F            _biosfn_read_video_state_size:
26674                                           !BCC_EOS
26675                                           !BCC_EOS
26676                                           ! 3649 {
26677                                           ! 3650     Bit16u ss=get_SS();
26678 6E5F           55                         push	bp
26679 6E60           89E5                       mov	bp,sp
26680 6E62           4C                         dec	sp
26681 6E63           4C                         dec	sp
26682                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26683 6E64           E8         0D42            call	_get_SS
26684                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26685 6E67           8946         FE            mov	-2[bp],ax
26686                                           !BCC_EOS
26687                                           ! 3651     write_word(ss, BX, biosfn_read_video_state_size2(CX));
26688                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
26689 6E6A           FF76         04            push	4[bp]
26690                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
26691 6E6D           E8         FFA8            call	_biosfn_read_video_state_size2
26692 6E70           44                         inc	sp
26693 6E71           44                         inc	sp
26694                                           ! Debug: list unsigned short = ax+0 (used reg = )
26695 6E72           50                         push	ax
26696                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
26697 6E73           FF76         06            push	6[bp]
26698                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26699 6E76           FF76         FE            push	-2[bp]
26700                                           ! Debug: func () void = write_word+0 (used reg = )
26701 6E79           E8         0CDF            call	_write_word
26702 6E7C           83C4                   06  add	sp,*6
26703                                           !BCC_EOS
26704                                           ! 3652 }
26705 6E7F           89EC                       mov	sp,bp
26706 6E81           5D                         pop	bp
26707 6E82           C3                         ret
26708                                           ! 3653 static Bit16u biosfn_save_video_state (CX,ES,BX)
26709                                           ! 3654      Bit16u CX;Bit16u ES;Bit16u BX;
26710                       00006E83            _biosfn_save_video_state:
26711                                           !BCC_EOS
26712                                           !BCC_EOS
26713                                           !BCC_EOS
26714                                           ! 3655 {
26715                                           ! 3656     Bit16u i, v, crtc_addr, ar_index;
26716                                           !BCC_EOS
26717                                           ! 3657     crtc_addr = read_word(0x40, 0x63);
26718 6E83           55                         push	bp
26719 6E84           89E5                       mov	bp,sp
26720 6E86           83C4                   F8  add	sp,*-8
26721                                           ! Debug: list int = const $63 (used reg = )
26722 6E89           B8                   0063  mov	ax,*$63
26723 6E8C           50                         push	ax
26724                                           ! Debug: list int = const $40 (used reg = )
26725 6E8D           B8                   0040  mov	ax,*$40
26726 6E90           50                         push	ax
26727                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26728 6E91           E8         0C9C            call	_read_word
26729 6E94           83C4                   04  add	sp,*4
26730                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
26731 6E97           8946         FA            mov	-6[bp],ax
26732                                           !BCC_EOS
26733                                           ! 3658     if (CX & 1) {
26734                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
26735 6E9A           8A46         04            mov	al,4[bp]
26736 6E9D           24                     01  and	al,*1
26737 6E9F           84C0                       test	al,al
26738 6EA1   7503    E9         0266            beq 	.239
26739                       00006EA6            .23A:
26740                                           ! 3659         write_byte(ES, BX, inb(0x3c4)); BX++;
26741                                           ! Debug: list int = const $3C4 (used reg = )
26742 6EA6           B8                   03C4  mov	ax,#$3C4
26743 6EA9           50                         push	ax
26744                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26745 6EAA           E8         0CC6            call	_inb
26746 6EAD           44                         inc	sp
26747 6EAE           44                         inc	sp
26748                                           ! Debug: list unsigned char = al+0 (used reg = )
26749 6EAF           30E4                       xor	ah,ah
26750 6EB1           50                         push	ax
26751                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26752 6EB2           FF76         08            push	8[bp]
26753                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26754 6EB5           FF76         06            push	6[bp]
26755                                           ! Debug: func () void = write_byte+0 (used reg = )
26756 6EB8           E8         0C88            call	_write_byte
26757 6EBB           83C4                   06  add	sp,*6
26758                                           !BCC_EOS
26759                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26760 6EBE           8B46         08            mov	ax,8[bp]
26761 6EC1           40                         inc	ax
26762 6EC2           8946         08            mov	8[bp],ax
26763                                           !BCC_EOS
26764                                           ! 3660         write_byte(ES, BX, inb(crtc_addr)); BX++;
26765                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
26766 6EC5           FF76         FA            push	-6[bp]
26767                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26768 6EC8           E8         0CA8            call	_inb
26769 6ECB           44                         inc	sp
26770 6ECC           44                         inc	sp
26771                                           ! Debug: list unsigned char = al+0 (used reg = )
26772 6ECD           30E4                       xor	ah,ah
26773 6ECF           50                         push	ax
26774                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26775 6ED0           FF76         08            push	8[bp]
26776                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26777 6ED3           FF76         06            push	6[bp]
26778                                           ! Debug: func () void = write_byte+0 (used reg = )
26779 6ED6           E8         0C6A            call	_write_byte
26780 6ED9           83C4                   06  add	sp,*6
26781                                           !BCC_EOS
26782                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26783 6EDC           8B46         08            mov	ax,8[bp]
26784 6EDF           40                         inc	ax
26785 6EE0           8946         08            mov	8[bp],ax
26786                                           !BCC_EOS
26787                                           ! 3661         write_byte(ES, BX, inb(0x3ce)); BX++;
26788                                           ! Debug: list int = const $3CE (used reg = )
26789 6EE3           B8                   03CE  mov	ax,#$3CE
26790 6EE6           50                         push	ax
26791                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26792 6EE7           E8         0C89            call	_inb
26793 6EEA           44                         inc	sp
26794 6EEB           44                         inc	sp
26795                                           ! Debug: list unsigned char = al+0 (used reg = )
26796 6EEC           30E4                       xor	ah,ah
26797 6EEE           50                         push	ax
26798                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26799 6EEF           FF76         08            push	8[bp]
26800                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26801 6EF2           FF76         06            push	6[bp]
26802                                           ! Debug: func () void = write_byte+0 (used reg = )
26803 6EF5           E8         0C4B            call	_write_byte
26804 6EF8           83C4                   06  add	sp,*6
26805                                           !BCC_EOS
26806                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26807 6EFB           8B46         08            mov	ax,8[bp]
26808 6EFE           40                         inc	ax
26809 6EFF           8946         08            mov	8[bp],ax
26810                                           !BCC_EOS
26811                                           ! 3662         inb(0x3da);
26812                                           ! Debug: list int = const $3DA (used reg = )
26813 6F02           B8                   03DA  mov	ax,#$3DA
26814 6F05           50                         push	ax
26815                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26816 6F06           E8         0C6A            call	_inb
26817 6F09           44                         inc	sp
26818 6F0A           44                         inc	sp
26819                                           !BCC_EOS
26820                                           ! 3663         ar_index = inb(0x3c0);
26821                                           ! Debug: list int = const $3C0 (used reg = )
26822 6F0B           B8                   03C0  mov	ax,#$3C0
26823 6F0E           50                         push	ax
26824                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26825 6F0F           E8         0C61            call	_inb
26826 6F12           44                         inc	sp
26827 6F13           44                         inc	sp
26828                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
26829 6F14           30E4                       xor	ah,ah
26830 6F16           8946         F8            mov	-8[bp],ax
26831                                           !BCC_EOS
26832                                           ! 3664         write_byte(ES, BX, ar_index); BX++;
26833                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
26834 6F19           FF76         F8            push	-8[bp]
26835                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26836 6F1C           FF76         08            push	8[bp]
26837                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26838 6F1F           FF76         06            push	6[bp]
26839                                           ! Debug: func () void = write_byte+0 (used reg = )
26840 6F22           E8         0C1E            call	_write_byte
26841 6F25           83C4                   06  add	sp,*6
26842                                           !BCC_EOS
26843                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26844 6F28           8B46         08            mov	ax,8[bp]
26845 6F2B           40                         inc	ax
26846 6F2C           8946         08            mov	8[bp],ax
26847                                           !BCC_EOS
26848                                           ! 3665         write_byte(ES, BX, inb(0x3ca)); BX++;
26849                                           ! Debug: list int = const $3CA (used reg = )
26850 6F2F           B8                   03CA  mov	ax,#$3CA
26851 6F32           50                         push	ax
26852                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26853 6F33           E8         0C3D            call	_inb
26854 6F36           44                         inc	sp
26855 6F37           44                         inc	sp
26856                                           ! Debug: list unsigned char = al+0 (used reg = )
26857 6F38           30E4                       xor	ah,ah
26858 6F3A           50                         push	ax
26859                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26860 6F3B           FF76         08            push	8[bp]
26861                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26862 6F3E           FF76         06            push	6[bp]
26863                                           ! Debug: func () void = write_byte+0 (used reg = )
26864 6F41           E8         0BFF            call	_write_byte
26865 6F44           83C4                   06  add	sp,*6
26866                                           !BCC_EOS
26867                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26868 6F47           8B46         08            mov	ax,8[bp]
26869 6F4A           40                         inc	ax
26870 6F4B           8946         08            mov	8[bp],ax
26871                                           !BCC_EOS
26872                                           ! 3666         for(i=1;i<=4;i++){
26873                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
26874 6F4E           B8                   0001  mov	ax,*1
26875 6F51           8946         FE            mov	-2[bp],ax
26876                                           !BCC_EOS
26877                                           !BCC_EOS
26878 6F54           EB           33            jmp .23D
26879                       00006F56            .23E:
26880                                           ! 3667             outb(0x3c4, i);
26881                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
26882 6F56           FF76         FE            push	-2[bp]
26883                                           ! Debug: list int = const $3C4 (used reg = )
26884 6F59           B8                   03C4  mov	ax,#$3C4
26885 6F5C           50                         push	ax
26886                                           ! Debug: func () void = outb+0 (used reg = )
26887 6F5D           E8         0C29            call	_outb
26888 6F60           83C4                   04  add	sp,*4
26889                                           !BCC_EOS
26890                                           ! 3668             write_byte(ES, BX, inb(0x3c5)); BX++;
26891                                           ! Debug: list int = const $3C5 (used reg = )
26892 6F63           B8                   03C5  mov	ax,#$3C5
26893 6F66           50                         push	ax
26894                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26895 6F67           E8         0C09            call	_inb
26896 6F6A           44                         inc	sp
26897 6F6B           44                         inc	sp
26898                                           ! Debug: list unsigned char = al+0 (used reg = )
26899 6F6C           30E4                       xor	ah,ah
26900 6F6E           50                         push	ax
26901                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26902 6F6F           FF76         08            push	8[bp]
26903                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26904 6F72           FF76         06            push	6[bp]
26905                                           ! Debug: func () void = write_byte+0 (used reg = )
26906 6F75           E8         0BCB            call	_write_byte
26907 6F78           83C4                   06  add	sp,*6
26908                                           !BCC_EOS
26909                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26910 6F7B           8B46         08            mov	ax,8[bp]
26911 6F7E           40                         inc	ax
26912 6F7F           8946         08            mov	8[bp],ax
26913                                           !BCC_EOS
26914                                           ! 3669         }
26915                                           ! 3670         outb(0x3c4, 0);
26916                       00006F82            .23C:
26917                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
26918 6F82           8B46         FE            mov	ax,-2[bp]
26919 6F85           40                         inc	ax
26920 6F86           8946         FE            mov	-2[bp],ax
26921                       00006F89            .23D:
26922                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
26923 6F89           8B46         FE            mov	ax,-2[bp]
26924 6F8C           3D                   0004  cmp	ax,*4
26925 6F8F           76           C5            jbe	.23E
26926                       00006F91            .23F:
26927                       00006F91            .23B:
26928                                           ! Debug: list int = const 0 (used reg = )
26929 6F91           31C0                       xor	ax,ax
26930 6F93           50                         push	ax
26931                                           ! Debug: list int = const $3C4 (used reg = )
26932 6F94           B8                   03C4  mov	ax,#$3C4
26933 6F97           50                         push	ax
26934                                           ! Debug: func () void = outb+0 (used reg = )
26935 6F98           E8         0BEE            call	_outb
26936 6F9B           83C4                   04  add	sp,*4
26937                                           !BCC_EOS
26938                                           ! 3671         write_byte(ES, BX, inb(0x3c5)); BX++;
26939                                           ! Debug: list int = const $3C5 (used reg = )
26940 6F9E           B8                   03C5  mov	ax,#$3C5
26941 6FA1           50                         push	ax
26942                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26943 6FA2           E8         0BCE            call	_inb
26944 6FA5           44                         inc	sp
26945 6FA6           44                         inc	sp
26946                                           ! Debug: list unsigned char = al+0 (used reg = )
26947 6FA7           30E4                       xor	ah,ah
26948 6FA9           50                         push	ax
26949                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26950 6FAA           FF76         08            push	8[bp]
26951                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26952 6FAD           FF76         06            push	6[bp]
26953                                           ! Debug: func () void = write_byte+0 (used reg = )
26954 6FB0           E8         0B90            call	_write_byte
26955 6FB3           83C4                   06  add	sp,*6
26956                                           !BCC_EOS
26957                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26958 6FB6           8B46         08            mov	ax,8[bp]
26959 6FB9           40                         inc	ax
26960 6FBA           8946         08            mov	8[bp],ax
26961                                           !BCC_EOS
26962                                           ! 3672         for(i=0;i<=0x18;i++) {
26963                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
26964 6FBD           31C0                       xor	ax,ax
26965 6FBF           8946         FE            mov	-2[bp],ax
26966                                           !BCC_EOS
26967                                           !BCC_EOS
26968 6FC2           EB           33            jmp .242
26969                       00006FC4            .243:
26970                                           ! 3673             outb(crtc_addr,i);
26971                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
26972 6FC4           FF76         FE            push	-2[bp]
26973                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
26974 6FC7           FF76         FA            push	-6[bp]
26975                                           ! Debug: func () void = outb+0 (used reg = )
26976 6FCA           E8         0BBC            call	_outb
26977 6FCD           83C4                   04  add	sp,*4
26978                                           !BCC_EOS
26979                                           ! 3674             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
26980                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
26981 6FD0           8B46         FA            mov	ax,-6[bp]
26982                                           ! Debug: list unsigned int = ax+1 (used reg = )
26983 6FD3           40                         inc	ax
26984 6FD4           50                         push	ax
26985                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26986 6FD5           E8         0B9B            call	_inb
26987 6FD8           44                         inc	sp
26988 6FD9           44                         inc	sp
26989                                           ! Debug: list unsigned char = al+0 (used reg = )
26990 6FDA           30E4                       xor	ah,ah
26991 6FDC           50                         push	ax
26992                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26993 6FDD           FF76         08            push	8[bp]
26994                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26995 6FE0           FF76         06            push	6[bp]
26996                                           ! Debug: func () void = write_byte+0 (used reg = )
26997 6FE3           E8         0B5D            call	_write_byte
26998 6FE6           83C4                   06  add	sp,*6
26999                                           !BCC_EOS
27000                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27001 6FE9           8B46         08            mov	ax,8[bp]
27002 6FEC           40                         inc	ax
27003 6FED           8946         08            mov	8[bp],ax
27004                                           !BCC_EOS
27005                                           ! 3675         }
27006                                           ! 3676         for(i=0;i<=0x13;i++) {
27007                       00006FF0            .241:
27008                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27009 6FF0           8B46         FE            mov	ax,-2[bp]
27010 6FF3           40                         inc	ax
27011 6FF4           8946         FE            mov	-2[bp],ax
27012                       00006FF7            .242:
27013                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27014 6FF7           8B46         FE            mov	ax,-2[bp]
27015 6FFA           3D                   0018  cmp	ax,*$18
27016 6FFD           76           C5            jbe	.243
27017                       00006FFF            .244:
27018                       00006FFF            .240:
27019                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27020 6FFF           31C0                       xor	ax,ax
27021 7001           8946         FE            mov	-2[bp],ax
27022                                           !BCC_EOS
27023                                           !BCC_EOS
27024 7004           EB           44            jmp .247
27025                       00007006            .248:
27026                                           ! 3677             inb(0x3da);
27027                                           ! Debug: list int = const $3DA (used reg = )
27028 7006           B8                   03DA  mov	ax,#$3DA
27029 7009           50                         push	ax
27030                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27031 700A           E8         0B66            call	_inb
27032 700D           44                         inc	sp
27033 700E           44                         inc	sp
27034                                           !BCC_EOS
27035                                           ! 3678             outb(0x3c0, i | (ar_index & 0x20));
27036                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27037 700F           8A46         F8            mov	al,-8[bp]
27038 7012           24                     20  and	al,*$20
27039                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27040                                           ! Debug: expression subtree swapping
27041 7014           30E4                       xor	ah,ah
27042 7016           0B46         FE            or	ax,-2[bp]
27043                                           ! Debug: list unsigned int = ax+0 (used reg = )
27044 7019           50                         push	ax
27045                                           ! Debug: list int = const $3C0 (used reg = )
27046 701A           B8                   03C0  mov	ax,#$3C0
27047 701D           50                         push	ax
27048                                           ! Debug: func () void = outb+0 (used reg = )
27049 701E           E8         0B68            call	_outb
27050 7021           83C4                   04  add	sp,*4
27051                                           !BCC_EOS
27052                                           ! 3679             write_byte(ES, BX, inb(0x3c1)); BX++;
27053                                           ! Debug: list int = const $3C1 (used reg = )
27054 7024           B8                   03C1  mov	ax,#$3C1
27055 7027           50                         push	ax
27056                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27057 7028           E8         0B48            call	_inb
27058 702B           44                         inc	sp
27059 702C           44                         inc	sp
27060                                           ! Debug: list unsigned char = al+0 (used reg = )
27061 702D           30E4                       xor	ah,ah
27062 702F           50                         push	ax
27063                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27064 7030           FF76         08            push	8[bp]
27065                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27066 7033           FF76         06            push	6[bp]
27067                                           ! Debug: func () void = write_byte+0 (used reg = )
27068 7036           E8         0B0A            call	_write_byte
27069 7039           83C4                   06  add	sp,*6
27070                                           !BCC_EOS
27071                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27072 703C           8B46         08            mov	ax,8[bp]
27073 703F           40                         inc	ax
27074 7040           8946         08            mov	8[bp],ax
27075                                           !BCC_EOS
27076                                           ! 3680         }
27077                                           ! 3681         inb(0x3da);
27078                       00007043            .246:
27079                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27080 7043           8B46         FE            mov	ax,-2[bp]
27081 7046           40                         inc	ax
27082 7047           8946         FE            mov	-2[bp],ax
27083                       0000704A            .247:
27084                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27085 704A           8B46         FE            mov	ax,-2[bp]
27086 704D           3D                   0013  cmp	ax,*$13
27087 7050           76           B4            jbe	.248
27088                       00007052            .249:
27089                       00007052            .245:
27090                                           ! Debug: list int = const $3DA (used reg = )
27091 7052           B8                   03DA  mov	ax,#$3DA
27092 7055           50                         push	ax
27093                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27094 7056           E8         0B1A            call	_inb
27095 7059           44                         inc	sp
27096 705A           44                         inc	sp
27097                                           !BCC_EOS
27098                                           ! 3682         for(i=0;i<=8;i++) {
27099                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27100 705B           31C0                       xor	ax,ax
27101 705D           8946         FE            mov	-2[bp],ax
27102                                           !BCC_EOS
27103                                           !BCC_EOS
27104 7060           EB           33            jmp .24C
27105                       00007062            .24D:
27106                                           ! 3683             outb(0x3ce,i);
27107                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27108 7062           FF76         FE            push	-2[bp]
27109                                           ! Debug: list int = const $3CE (used reg = )
27110 7065           B8                   03CE  mov	ax,#$3CE
27111 7068           50                         push	ax
27112                                           ! Debug: func () void = outb+0 (used reg = )
27113 7069           E8         0B1D            call	_outb
27114 706C           83C4                   04  add	sp,*4
27115                                           !BCC_EOS
27116                                           ! 3684             write_byte(ES, BX, inb(0x3cf)); BX++;
27117                                           ! Debug: list int = const $3CF (used reg = )
27118 706F           B8                   03CF  mov	ax,#$3CF
27119 7072           50                         push	ax
27120                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27121 7073           E8         0AFD            call	_inb
27122 7076           44                         inc	sp
27123 7077           44                         inc	sp
27124                                           ! Debug: list unsigned char = al+0 (used reg = )
27125 7078           30E4                       xor	ah,ah
27126 707A           50                         push	ax
27127                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27128 707B           FF76         08            push	8[bp]
27129                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27130 707E           FF76         06            push	6[bp]
27131                                           ! Debug: func () void = write_byte+0 (used reg = )
27132 7081           E8         0ABF            call	_write_byte
27133 7084           83C4                   06  add	sp,*6
27134                                           !BCC_EOS
27135                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27136 7087           8B46         08            mov	ax,8[bp]
27137 708A           40                         inc	ax
27138 708B           8946         08            mov	8[bp],ax
27139                                           !BCC_EOS
27140                                           ! 3685         }
27141                                           ! 3686         write_word(ES, BX, crtc_addr); BX+= 2;
27142                       0000708E            .24B:
27143                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27144 708E           8B46         FE            mov	ax,-2[bp]
27145 7091           40                         inc	ax
27146 7092           8946         FE            mov	-2[bp],ax
27147                       00007095            .24C:
27148                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27149 7095           8B46         FE            mov	ax,-2[bp]
27150 7098           3D                   0008  cmp	ax,*8
27151 709B           76           C5            jbe	.24D
27152                       0000709D            .24E:
27153                       0000709D            .24A:
27154                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27155 709D           FF76         FA            push	-6[bp]
27156                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27157 70A0           FF76         08            push	8[bp]
27158                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27159 70A3           FF76         06            push	6[bp]
27160                                           ! Debug: func () void = write_word+0 (used reg = )
27161 70A6           E8         0AB2            call	_write_word
27162 70A9           83C4                   06  add	sp,*6
27163                                           !BCC_EOS
27164                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27165 70AC           8B46         08            mov	ax,8[bp]
27166 70AF           40                         inc	ax
27167 70B0           40                         inc	ax
27168 70B1           8946         08            mov	8[bp],ax
27169                                           !BCC_EOS
27170                                           ! 3687         write_byte(ES, BX, 0); BX++;
27171                                           ! Debug: list int = const 0 (used reg = )
27172 70B4           31C0                       xor	ax,ax
27173 70B6           50                         push	ax
27174                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27175 70B7           FF76         08            push	8[bp]
27176                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27177 70BA           FF76         06            push	6[bp]
27178                                           ! Debug: func () void = write_byte+0 (used reg = )
27179 70BD           E8         0A83            call	_write_byte
27180 70C0           83C4                   06  add	sp,*6
27181                                           !BCC_EOS
27182                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27183 70C3           8B46         08            mov	ax,8[bp]
27184 70C6           40                         inc	ax
27185 70C7           8946         08            mov	8[bp],ax
27186                                           !BCC_EOS
27187                                           ! 3688         write_byte(ES, BX, 0); BX++;
27188                                           ! Debug: list int = const 0 (used reg = )
27189 70CA           31C0                       xor	ax,ax
27190 70CC           50                         push	ax
27191                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27192 70CD           FF76         08            push	8[bp]
27193                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27194 70D0           FF76         06            push	6[bp]
27195                                           ! Debug: func () void = write_byte+0 (used reg = )
27196 70D3           E8         0A6D            call	_write_byte
27197 70D6           83C4                   06  add	sp,*6
27198                                           !BCC_EOS
27199                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27200 70D9           8B46         08            mov	ax,8[bp]
27201 70DC           40                         inc	ax
27202 70DD           8946         08            mov	8[bp],ax
27203                                           !BCC_EOS
27204                                           ! 3689         write_byte(ES, BX, 0); BX++;
27205                                           ! Debug: list int = const 0 (used reg = )
27206 70E0           31C0                       xor	ax,ax
27207 70E2           50                         push	ax
27208                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27209 70E3           FF76         08            push	8[bp]
27210                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27211 70E6           FF76         06            push	6[bp]
27212                                           ! Debug: func () void = write_byte+0 (used reg = )
27213 70E9           E8         0A57            call	_write_byte
27214 70EC           83C4                   06  add	sp,*6
27215                                           !BCC_EOS
27216                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27217 70EF           8B46         08            mov	ax,8[bp]
27218 70F2           40                         inc	ax
27219 70F3           8946         08            mov	8[bp],ax
27220                                           !BCC_EOS
27221                                           ! 3690         write_byte(ES, BX, 0); BX++;
27222                                           ! Debug: list int = const 0 (used reg = )
27223 70F6           31C0                       xor	ax,ax
27224 70F8           50                         push	ax
27225                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27226 70F9           FF76         08            push	8[bp]
27227                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27228 70FC           FF76         06            push	6[bp]
27229                                           ! Debug: func () void = write_byte+0 (used reg = )
27230 70FF           E8         0A41            call	_write_byte
27231 7102           83C4                   06  add	sp,*6
27232                                           !BCC_EOS
27233                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27234 7105           8B46         08            mov	ax,8[bp]
27235 7108           40                         inc	ax
27236 7109           8946         08            mov	8[bp],ax
27237                                           !BCC_EOS
27238                                           ! 3691     }
27239                                           ! 3692     if (CX & 2) {
27240                       0000710C            .239:
27241                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27242 710C           8A46         04            mov	al,4[bp]
27243 710F           24                     02  and	al,*2
27244 7111           84C0                       test	al,al
27245 7113   7503    E9         0270            beq 	.24F
27246                       00007118            .250:
27247                                           ! 3693         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27248                                           ! Debug: list int = const $49 (used reg = )
27249 7118           B8                   0049  mov	ax,*$49
27250 711B           50                         push	ax
27251                                           ! Debug: list int = const $40 (used reg = )
27252 711C           B8                   0040  mov	ax,*$40
27253 711F           50                         push	ax
27254                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27255 7120           E8         09FA            call	_read_byte
27256 7123           83C4                   04  add	sp,*4
27257                                           ! Debug: list unsigned char = al+0 (used reg = )
27258 7126           30E4                       xor	ah,ah
27259 7128           50                         push	ax
27260                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27261 7129           FF76         08            push	8[bp]
27262                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27263 712C           FF76         06            push	6[bp]
27264                                           ! Debug: func () void = write_byte+0 (used reg = )
27265 712F           E8         0A11            call	_write_byte
27266 7132           83C4                   06  add	sp,*6
27267                                           !BCC_EOS
27268                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27269 7135           8B46         08            mov	ax,8[bp]
27270 7138           40                         inc	ax
27271 7139           8946         08            mov	8[bp],ax
27272                                           !BCC_EOS
27273                                           ! 3694         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27274                                           ! Debug: list int = const $4A (used reg = )
27275 713C           B8                   004A  mov	ax,*$4A
27276 713F           50                         push	ax
27277                                           ! Debug: list int = const $40 (used reg = )
27278 7140           B8                   0040  mov	ax,*$40
27279 7143           50                         push	ax
27280                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27281 7144           E8         09E9            call	_read_word
27282 7147           83C4                   04  add	sp,*4
27283                                           ! Debug: list unsigned short = ax+0 (used reg = )
27284 714A           50                         push	ax
27285                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27286 714B           FF76         08            push	8[bp]
27287                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27288 714E           FF76         06            push	6[bp]
27289                                           ! Debug: func () void = write_word+0 (used reg = )
27290 7151           E8         0A07            call	_write_word
27291 7154           83C4                   06  add	sp,*6
27292                                           !BCC_EOS
27293                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27294 7157           8B46         08            mov	ax,8[bp]
27295 715A           40                         inc	ax
27296 715B           40                         inc	ax
27297 715C           8946         08            mov	8[bp],ax
27298                                           !BCC_EOS
27299                                           ! 3695         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27300                                           ! Debug: list int = const $4C (used reg = )
27301 715F           B8                   004C  mov	ax,*$4C
27302 7162           50                         push	ax
27303                                           ! Debug: list int = const $40 (used reg = )
27304 7163           B8                   0040  mov	ax,*$40
27305 7166           50                         push	ax
27306                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27307 7167           E8         09C6            call	_read_word
27308 716A           83C4                   04  add	sp,*4
27309                                           ! Debug: list unsigned short = ax+0 (used reg = )
27310 716D           50                         push	ax
27311                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27312 716E           FF76         08            push	8[bp]
27313                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27314 7171           FF76         06            push	6[bp]
27315                                           ! Debug: func () void = write_word+0 (used reg = )
27316 7174           E8         09E4            call	_write_word
27317 7177           83C4                   06  add	sp,*6
27318                                           !BCC_EOS
27319                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27320 717A           8B46         08            mov	ax,8[bp]
27321 717D           40                         inc	ax
27322 717E           40                         inc	ax
27323 717F           8946         08            mov	8[bp],ax
27324                                           !BCC_EOS
27325                                           ! 3696         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27326                                           ! Debug: list int = const $63 (used reg = )
27327 7182           B8                   0063  mov	ax,*$63
27328 7185           50                         push	ax
27329                                           ! Debug: list int = const $40 (used reg = )
27330 7186           B8                   0040  mov	ax,*$40
27331 7189           50                         push	ax
27332                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27333 718A           E8         09A3            call	_read_word
27334 718D           83C4                   04  add	sp,*4
27335                                           ! Debug: list unsigned short = ax+0 (used reg = )
27336 7190           50                         push	ax
27337                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27338 7191           FF76         08            push	8[bp]
27339                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27340 7194           FF76         06            push	6[bp]
27341                                           ! Debug: func () void = write_word+0 (used reg = )
27342 7197           E8         09C1            call	_write_word
27343 719A           83C4                   06  add	sp,*6
27344                                           !BCC_EOS
27345                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27346 719D           8B46         08            mov	ax,8[bp]
27347 71A0           40                         inc	ax
27348 71A1           40                         inc	ax
27349 71A2           8946         08            mov	8[bp],ax
27350                                           !BCC_EOS
27351                                           ! 3697         
27352                                           ! 3697 write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27353                                           ! Debug: list int = const $84 (used reg = )
27354 71A5           B8                   0084  mov	ax,#$84
27355 71A8           50                         push	ax
27356                                           ! Debug: list int = const $40 (used reg = )
27357 71A9           B8                   0040  mov	ax,*$40
27358 71AC           50                         push	ax
27359                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27360 71AD           E8         096D            call	_read_byte
27361 71B0           83C4                   04  add	sp,*4
27362                                           ! Debug: list unsigned char = al+0 (used reg = )
27363 71B3           30E4                       xor	ah,ah
27364 71B5           50                         push	ax
27365                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27366 71B6           FF76         08            push	8[bp]
27367                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27368 71B9           FF76         06            push	6[bp]
27369                                           ! Debug: func () void = write_byte+0 (used reg = )
27370 71BC           E8         0984            call	_write_byte
27371 71BF           83C4                   06  add	sp,*6
27372                                           !BCC_EOS
27373                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27374 71C2           8B46         08            mov	ax,8[bp]
27375 71C5           40                         inc	ax
27376 71C6           8946         08            mov	8[bp],ax
27377                                           !BCC_EOS
27378                                           ! 3698         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27379                                           ! Debug: list int = const $85 (used reg = )
27380 71C9           B8                   0085  mov	ax,#$85
27381 71CC           50                         push	ax
27382                                           ! Debug: list int = const $40 (used reg = )
27383 71CD           B8                   0040  mov	ax,*$40
27384 71D0           50                         push	ax
27385                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27386 71D1           E8         095C            call	_read_word
27387 71D4           83C4                   04  add	sp,*4
27388                                           ! Debug: list unsigned short = ax+0 (used reg = )
27389 71D7           50                         push	ax
27390                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27391 71D8           FF76         08            push	8[bp]
27392                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27393 71DB           FF76         06            push	6[bp]
27394                                           ! Debug: func () void = write_word+0 (used reg = )
27395 71DE           E8         097A            call	_write_word
27396 71E1           83C4                   06  add	sp,*6
27397                                           !BCC_EOS
27398                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27399 71E4           8B46         08            mov	ax,8[bp]
27400 71E7           40                         inc	ax
27401 71E8           40                         inc	ax
27402 71E9           8946         08            mov	8[bp],ax
27403                                           !BCC_EOS
27404                                           ! 3699         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27405                                           ! Debug: list int = const $87 (used reg = )
27406 71EC           B8                   0087  mov	ax,#$87
27407 71EF           50                         push	ax
27408                                           ! Debug: list int = const $40 (used reg = )
27409 71F0           B8                   0040  mov	ax,*$40
27410 71F3           50                         push	ax
27411                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27412 71F4           E8         0926            call	_read_byte
27413 71F7           83C4                   04  add	sp,*4
27414                                           ! Debug: list unsigned char = al+0 (used reg = )
27415 71FA           30E4                       xor	ah,ah
27416 71FC           50                         push	ax
27417                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27418 71FD           FF76         08            push	8[bp]
27419                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27420 7200           FF76         06            push	6[bp]
27421                                           ! Debug: func () void = write_byte+0 (used reg = )
27422 7203           E8         093D            call	_write_byte
27423 7206           83C4                   06  add	sp,*6
27424                                           !BCC_EOS
27425                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27426 7209           8B46         08            mov	ax,8[bp]
27427 720C           40                         inc	ax
27428 720D           8946         08            mov	8[bp],ax
27429                                           !BCC_EOS
27430                                           ! 3700         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27431                                           ! Debug: list int = const $88 (used reg = )
27432 7210           B8                   0088  mov	ax,#$88
27433 7213           50                         push	ax
27434                                           ! Debug: list int = const $40 (used reg = )
27435 7214           B8                   0040  mov	ax,*$40
27436 7217           50                         push	ax
27437                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27438 7218           E8         0902            call	_read_byte
27439 721B           83C4                   04  add	sp,*4
27440                                           ! Debug: list unsigned char = al+0 (used reg = )
27441 721E           30E4                       xor	ah,ah
27442 7220           50                         push	ax
27443                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27444 7221           FF76         08            push	8[bp]
27445                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27446 7224           FF76         06            push	6[bp]
27447                                           ! Debug: func () void = write_byte+0 (used reg = )
27448 7227           E8         0919            call	_write_byte
27449 722A           83C4                   06  add	sp,*6
27450                                           !BCC_EOS
27451                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27452 722D           8B46         08            mov	ax,8[bp]
27453 7230           40                         inc	ax
27454 7231           8946         08            mov	8[bp],ax
27455                                           !BCC_EOS
27456                                           ! 3701         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27457                                           ! Debug: list int = const $89 (used reg = )
27458 7234           B8                   0089  mov	ax,#$89
27459 7237           50                         push	ax
27460                                           ! Debug: list int = const $40 (used reg = )
27461 7238           B8                   0040  mov	ax,*$40
27462 723B           50                         push	ax
27463                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27464 723C           E8         08DE            call	_read_byte
27465 723F           83C4                   04  add	sp,*4
27466                                           ! Debug: list unsigned char = al+0 (used reg = )
27467 7242           30E4                       xor	ah,ah
27468 7244           50                         push	ax
27469                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27470 7245           FF76         08            push	8[bp]
27471                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27472 7248           FF76         06            push	6[bp]
27473                                           ! Debug: func () void = write_byte+0 (used reg = )
27474 724B           E8         08F5            call	_write_byte
27475 724E           83C4                   06  add	sp,*6
27476                                           !BCC_EOS
27477                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27478 7251           8B46         08            mov	ax,8[bp]
27479 7254           40                         inc	ax
27480 7255           8946         08            mov	8[bp],ax
27481                                           !BCC_EOS
27482                                           ! 3702         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27483                                           ! Debug: list int = const $60 (used reg = )
27484 7258           B8                   0060  mov	ax,*$60
27485 725B           50                         push	ax
27486                                           ! Debug: list int = const $40 (used reg = )
27487 725C           B8                   0040  mov	ax,*$40
27488 725F           50                         push	ax
27489                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27490 7260           E8         08CD            call	_read_word
27491 7263           83C4                   04  add	sp,*4
27492                                           ! Debug: list unsigned short = ax+0 (used reg = )
27493 7266           50                         push	ax
27494                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27495 7267           FF76         08            push	8[bp]
27496                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27497 726A           FF76         06            push	6[bp]
27498                                           ! Debug: func () void = write_word+0 (used reg = )
27499 726D           E8         08EB            call	_write_word
27500 7270           83C4                   06  add	sp,*6
27501                                           !BCC_EOS
27502                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27503 7273           8B46         08            mov	ax,8[bp]
27504 7276           40                         inc	ax
27505 7277           40                         inc	ax
27506 7278           8946         08            mov	8[bp],ax
27507                                           !BCC_EOS
27508                                           ! 3703         for(i=0;i<8;i++) {
27509                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27510 727B           31C0                       xor	ax,ax
27511 727D           8946         FE            mov	-2[bp],ax
27512                                           !BCC_EOS
27513                                           !BCC_EOS
27514 7280           EB           2F            jmp .253
27515                       00007282            .254:
27516                                           ! 3704             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
27517                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
27518                                           ! Debug: expression subtree swapping
27519 7282           8B46         FE            mov	ax,-2[bp]
27520 7285           D1E0                       shl	ax,*1
27521                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
27522                                           ! Debug: expression subtree swapping
27523                                           ! Debug: list unsigned int = ax+$50 (used reg = )
27524 7287           05                   0050  add	ax,*$50
27525 728A           50                         push	ax
27526                                           ! Debug: list int = const $40 (used reg = )
27527 728B           B8                   0040  mov	ax,*$40
27528 728E           50                         push	ax
27529                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27530 728F           E8         089E            call	_read_word
27531 7292           83C4                   04  add	sp,*4
27532                                           ! Debug: list unsigned short = ax+0 (used reg = )
27533 7295           50                         push	ax
27534                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27535 7296           FF76         08            push	8[bp]
27536                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27537 7299           FF76         06            push	6[bp]
27538                                           ! Debug: func () void = write_word+0 (used reg = )
27539 729C           E8         08BC            call	_write_word
27540 729F           83C4                   06  add	sp,*6
27541                                           !BCC_EOS
27542                                           ! 3705             BX += 2;
27543                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27544 72A2           8B46         08            mov	ax,8[bp]
27545 72A5           40                         inc	ax
27546 72A6           40                         inc	ax
27547 72A7           8946         08            mov	8[bp],ax
27548                                           !BCC_EOS
27549                                           ! 3706         }
27550                                           ! 3707         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
27551                       000072AA            .252:
27552                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27553 72AA           8B46         FE            mov	ax,-2[bp]
27554 72AD           40                         inc	ax
27555 72AE           8946         FE            mov	-2[bp],ax
27556                       000072B1            .253:
27557                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27558 72B1           8B46         FE            mov	ax,-2[bp]
27559 72B4           3D                   0008  cmp	ax,*8
27560 72B7           72           C9            jb 	.254
27561                       000072B9            .255:
27562                       000072B9            .251:
27563                                           ! Debug: list int = const $4E (used reg = )
27564 72B9           B8                   004E  mov	ax,*$4E
27565 72BC           50                         push	ax
27566                                           ! Debug: list int = const $40 (used reg = )
27567 72BD           B8                   0040  mov	ax,*$40
27568 72C0           50                         push	ax
27569                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27570 72C1           E8         086C            call	_read_word
27571 72C4           83C4                   04  add	sp,*4
27572                                           ! Debug: list unsigned short = ax+0 (used reg = )
27573 72C7           50                         push	ax
27574                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27575 72C8           FF76         08            push	8[bp]
27576                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27577 72CB           FF76         06            push	6[bp]
27578                                           ! Debug: func () void = write_word+0 (used reg = )
27579 72CE           E8         088A            call	_write_word
27580 72D1           83C4                   06  add	sp,*6
27581                                           !BCC_EOS
27582                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27583 72D4           8B46         08            mov	ax,8[bp]
27584 72D7           40                         inc	ax
27585 72D8           40                         inc	ax
27586 72D9           8946         08            mov	8[bp],ax
27587                                           !BCC_EOS
27588                                           ! 3708         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
27589                                           ! Debug: list int = const $62 (used reg = )
27590 72DC           B8                   0062  mov	ax,*$62
27591 72DF           50                         push	ax
27592                                           ! Debug: list int = const $40 (used reg = )
27593 72E0           B8                   0040  mov	ax,*$40
27594 72E3           50                         push	ax
27595                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27596 72E4           E8         0836            call	_read_byte
27597 72E7           83C4                   04  add	sp,*4
27598                                           ! Debug: list unsigned char = al+0 (used reg = )
27599 72EA           30E4                       xor	ah,ah
27600 72EC           50                         push	ax
27601                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27602 72ED           FF76         08            push	8[bp]
27603                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27604 72F0           FF76         06            push	6[bp]
27605                                           ! Debug: func () void = write_byte+0 (used reg = )
27606 72F3           E8         084D            call	_write_byte
27607 72F6           83C4                   06  add	sp,*6
27608                                           !BCC_EOS
27609                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27610 72F9           8B46         08            mov	ax,8[bp]
27611 72FC           40                         inc	ax
27612 72FD           8946         08            mov	8[bp],ax
27613                                           !BCC_EOS
27614                                           ! 3709         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
27615                                           ! Debug: list int = const $7C (used reg = )
27616 7300           B8                   007C  mov	ax,*$7C
27617 7303           50                         push	ax
27618                                           ! Debug: list int = const 0 (used reg = )
27619 7304           31C0                       xor	ax,ax
27620 7306           50                         push	ax
27621                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27622 7307           E8         0826            call	_read_word
27623 730A           83C4                   04  add	sp,*4
27624                                           ! Debug: list unsigned short = ax+0 (used reg = )
27625 730D           50                         push	ax
27626                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27627 730E           FF76         08            push	8[bp]
27628                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27629 7311           FF76         06            push	6[bp]
27630                                           ! Debug: func () void = write_word+0 (used reg = )
27631 7314           E8         0844            call	_write_word
27632 7317           83C4                   06  add	sp,*6
27633                                           !BCC_EOS
27634                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27635 731A           8B46         08            mov	ax,8[bp]
27636 731D           40                         inc	ax
27637 731E           40                         inc	ax
27638 731F           8946         08            mov	8[bp],ax
27639                                           !BCC_EOS
27640                                           ! 3710         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
27641                                           ! Debug: list int = const $7E (used reg = )
27642 7322           B8                   007E  mov	ax,*$7E
27643 7325           50                         push	ax
27644                                           ! Debug: list int = const 0 (used reg = )
27645 7326           31C0                       xor	ax,ax
27646 7328           50                         push	ax
27647                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27648 7329           E8         0804            call	_read_word
27649 732C           83C4                   04  add	sp,*4
27650                                           ! Debug: list unsigned short = ax+0 (used reg = )
27651 732F           50                         push	ax
27652                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27653 7330           FF76         08            push	8[bp]
27654                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27655 7333           FF76         06            push	6[bp]
27656                                           ! Debug: func () void = write_word+0 (used reg = )
27657 7336           E8         0822            call	_write_word
27658 7339           83C4                   06  add	sp,*6
27659                                           !BCC_EOS
27660                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27661 733C           8B46         08            mov	ax,8[bp]
27662 733F           40                         inc	ax
27663 7340           40                         inc	ax
27664 7341           8946         08            mov	8[bp],ax
27665                                           !BCC_EOS
27666                                           ! 3711         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
27667                                           ! Debug: list int = const $10C (used reg = )
27668 7344           B8                   010C  mov	ax,#$10C
27669 7347           50                         push	ax
27670                                           ! Debug: list int = const 0 (used reg = )
27671 7348           31C0                       xor	ax,ax
27672 734A           50                         push	ax
27673                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27674 734B           E8         07E2            call	_read_word
27675 734E           83C4                   04  add	sp,*4
27676                                           ! Debug: list unsigned short = ax+0 (used reg = )
27677 7351           50                         push	ax
27678                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27679 7352           FF76         08            push	8[bp]
27680                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27681 7355           FF76         06            push	6[bp]
27682                                           ! Debug: func () void = write_word+0 (used reg = )
27683 7358           E8         0800            call	_write_word
27684 735B           83C4                   06  add	sp,*6
27685                                           !BCC_EOS
27686                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27687 735E           8B46         08            mov	ax,8[bp]
27688 7361           40                         inc	ax
27689 7362           40                         inc	ax
27690 7363           8946         08            mov	8[bp],ax
27691                                           !BCC_EOS
27692                                           ! 3712         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
27693                                           ! Debug: list int = const $10E (used reg = )
27694 7366           B8                   010E  mov	ax,#$10E
27695 7369           50                         push	ax
27696                                           ! Debug: list int = const 0 (used reg = )
27697 736A           31C0                       xor	ax,ax
27698 736C           50                         push	ax
27699                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27700 736D           E8         07C0            call	_read_word
27701 7370           83C4                   04  add	sp,*4
27702                                           ! Debug: list unsigned short = ax+0 (used reg = )
27703 7373           50                         push	ax
27704                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27705 7374           FF76         08            push	8[bp]
27706                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27707 7377           FF76         06            push	6[bp]
27708                                           ! Debug: func () void = write_word+0 (used reg = )
27709 737A           E8         07DE            call	_write_word
27710 737D           83C4                   06  add	sp,*6
27711                                           !BCC_EOS
27712                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27713 7380           8B46         08            mov	ax,8[bp]
27714 7383           40                         inc	ax
27715 7384           40                         inc	ax
27716 7385           8946         08            mov	8[bp],ax
27717                                           !BCC_EOS
27718                                           ! 3713     }
27719                                           ! 3714     if (CX & 4) {
27720                       00007388            .24F:
27721                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
27722 7388           8A46         04            mov	al,4[bp]
27723 738B           24                     04  and	al,*4
27724 738D           84C0                       test	al,al
27725 738F   7503    E9         00B5            beq 	.256
27726                       00007394            .257:
27727                                           ! 3715         write_byte(ES, BX, inb(0x3c7)); BX++;
27728                                           ! Debug: list int = const $3C7 (used reg = )
27729 7394           B8                   03C7  mov	ax,#$3C7
27730 7397           50                         push	ax
27731                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27732 7398           E8         07D8            call	_inb
27733 739B           44                         inc	sp
27734 739C           44                         inc	sp
27735                                           ! Debug: list unsigned char = al+0 (used reg = )
27736 739D           30E4                       xor	ah,ah
27737 739F           50                         push	ax
27738                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27739 73A0           FF76         08            push	8[bp]
27740                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27741 73A3           FF76         06            push	6[bp]
27742                                           ! Debug: func () void = write_byte+0 (used reg = )
27743 73A6           E8         079A            call	_write_byte
27744 73A9           83C4                   06  add	sp,*6
27745                                           !BCC_EOS
27746                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27747 73AC           8B46         08            mov	ax,8[bp]
27748 73AF           40                         inc	ax
27749 73B0           8946         08            mov	8[bp],ax
27750                                           !BCC_EOS
27751                                           ! 3716         write_byte(ES, BX, inb(0x3c8)); BX++;
27752                                           ! Debug: list int = const $3C8 (used reg = )
27753 73B3           B8                   03C8  mov	ax,#$3C8
27754 73B6           50                         push	ax
27755                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27756 73B7           E8         07B9            call	_inb
27757 73BA           44                         inc	sp
27758 73BB           44                         inc	sp
27759                                           ! Debug: list unsigned char = al+0 (used reg = )
27760 73BC           30E4                       xor	ah,ah
27761 73BE           50                         push	ax
27762                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27763 73BF           FF76         08            push	8[bp]
27764                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27765 73C2           FF76         06            push	6[bp]
27766                                           ! Debug: func () void = write_byte+0 (used reg = )
27767 73C5           E8         077B            call	_write_byte
27768 73C8           83C4                   06  add	sp,*6
27769                                           !BCC_EOS
27770                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27771 73CB           8B46         08            mov	ax,8[bp]
27772 73CE           40                         inc	ax
27773 73CF           8946         08            mov	8[bp],ax
27774                                           !BCC_EOS
27775                                           ! 3717         write_byte(ES, BX, inb(0x3c6)); BX++;
27776                                           ! Debug: list int = const $3C6 (used reg = )
27777 73D2           B8                   03C6  mov	ax,#$3C6
27778 73D5           50                         push	ax
27779                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27780 73D6           E8         079A            call	_inb
27781 73D9           44                         inc	sp
27782 73DA           44                         inc	sp
27783                                           ! Debug: list unsigned char = al+0 (used reg = )
27784 73DB           30E4                       xor	ah,ah
27785 73DD           50                         push	ax
27786                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27787 73DE           FF76         08            push	8[bp]
27788                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27789 73E1           FF76         06            push	6[bp]
27790                                           ! Debug: func () void = write_byte+0 (used reg = )
27791 73E4           E8         075C            call	_write_byte
27792 73E7           83C4                   06  add	sp,*6
27793                                           !BCC_EOS
27794                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27795 73EA           8B46         08            mov	ax,8[bp]
27796 73ED           40                         inc	ax
27797 73EE           8946         08            mov	8[bp],ax
27798                                           !BCC_EOS
27799                                           ! 3718         outb(0x3c8,0x00);
27800                                           ! Debug: list int = const 0 (used reg = )
27801 73F1           31C0                       xor	ax,ax
27802 73F3           50                         push	ax
27803                                           ! Debug: list int = const $3C8 (used reg = )
27804 73F4           B8                   03C8  mov	ax,#$3C8
27805 73F7           50                         push	ax
27806                                           ! Debug: func () void = outb+0 (used reg = )
27807 73F8           E8         078E            call	_outb
27808 73FB           83C4                   04  add	sp,*4
27809                                           !BCC_EOS
27810                                           ! 3719         for(i=0;i<256*3;i++) {
27811                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27812 73FE           31C0                       xor	ax,ax
27813 7400           8946         FE            mov	-2[bp],ax
27814                                           !BCC_EOS
27815                                           !BCC_EOS
27816 7403           EB           26            jmp .25A
27817                       00007405            .25B:
27818                                           ! 3720             write_byte(ES, BX, inb(0x3c9)); BX++;
27819                                           ! Debug: list int = const $3C9 (used reg = )
27820 7405           B8                   03C9  mov	ax,#$3C9
27821 7408           50                         push	ax
27822                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27823 7409           E8         0767            call	_inb
27824 740C           44                         inc	sp
27825 740D           44                         inc	sp
27826                                           ! Debug: list unsigned char = al+0 (used reg = )
27827 740E           30E4                       xor	ah,ah
27828 7410           50                         push	ax
27829                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27830 7411           FF76         08            push	8[bp]
27831                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27832 7414           FF76         06            push	6[bp]
27833                                           ! Debug: func () void = write_byte+0 (used reg = )
27834 7417           E8         0729            call	_write_byte
27835 741A           83C4                   06  add	sp,*6
27836                                           !BCC_EOS
27837                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27838 741D           8B46         08            mov	ax,8[bp]
27839 7420           40                         inc	ax
27840 7421           8946         08            mov	8[bp],ax
27841                                           !BCC_EOS
27842                                           ! 3721         }
27843                                           ! 3722         write_byte(ES, BX, 0); BX++;
27844                       00007424            .259:
27845                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27846 7424           8B46         FE            mov	ax,-2[bp]
27847 7427           40                         inc	ax
27848 7428           8946         FE            mov	-2[bp],ax
27849                       0000742B            .25A:
27850                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
27851 742B           8B46         FE            mov	ax,-2[bp]
27852 742E           3D                   0300  cmp	ax,#$300
27853 7431           72           D2            jb 	.25B
27854                       00007433            .25C:
27855                       00007433            .258:
27856                                           ! Debug: list int = const 0 (used reg = )
27857 7433           31C0                       xor	ax,ax
27858 7435           50                         push	ax
27859                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27860 7436           FF76         08            push	8[bp]
27861                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27862 7439           FF76         06            push	6[bp]
27863                                           ! Debug: func () void = write_byte+0 (used reg = )
27864 743C           E8         0704            call	_write_byte
27865 743F           83C4                   06  add	sp,*6
27866                                           !BCC_EOS
27867                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27868 7442           8B46         08            mov	ax,8[bp]
27869 7445           40                         inc	ax
27870 7446           8946         08            mov	8[bp],ax
27871                                           !BCC_EOS
27872                                           ! 3723     }
27873                                           ! 3724     return BX;
27874                       00007449            .256:
27875 7449           8B46         08            mov	ax,8[bp]
27876 744C           89EC                       mov	sp,bp
27877 744E           5D                         pop	bp
27878 744F           C3                         ret
27879                                           !BCC_EOS
27880                                           ! 3725 }
27881                                           ! 3726 static Bit16u biosfn_restore_video_state (CX,ES,BX)
27882                                           ! 3727      Bit16u CX;Bit16u ES;Bit16u BX;
27883                       00007450            _biosfn_restore_video_state:
27884                                           !BCC_EOS
27885                                           !BCC_EOS
27886                                           !BCC_EOS
27887                                           ! 3728 {
27888                                           ! 3729     Bit16u i, crtc_addr, v, addr1, ar_index;
27889                                           !BCC_EOS
27890                                           ! 3730     if (CX & 1) {
27891 7450           55                         push	bp
27892 7451           89E5                       mov	bp,sp
27893 7453           83C4                   F6  add	sp,*-$A
27894                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
27895 7456           8A46         04            mov	al,4[bp]
27896 7459           24                     01  and	al,*1
27897 745B           84C0                       test	al,al
27898 745D   7503    E9         02AA            beq 	.25D
27899                       00007462            .25E:
27900                                           ! 3731         inb(0x3da);
27901                                           ! Debug: list int = const $3DA (used reg = )
27902 7462           B8                   03DA  mov	ax,#$3DA
27903 7465           50                         push	ax
27904                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27905 7466           E8         070A            call	_inb
27906 7469           44                         inc	sp
27907 746A           44                         inc	sp
27908                                           !BCC_EOS
27909                                           ! 3732         crtc_addr = read_word(ES, BX + 0x40);
27910                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
27911 746B           8B46         08            mov	ax,8[bp]
27912                                           ! Debug: list unsigned int = ax+$40 (used reg = )
27913 746E           05                   0040  add	ax,*$40
27914 7471           50                         push	ax
27915                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27916 7472           FF76         06            push	6[bp]
27917                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27918 7475           E8         06B8            call	_read_word
27919 7478           83C4                   04  add	sp,*4
27920                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
27921 747B           8946         FC            mov	-4[bp],ax
27922                                           !BCC_EOS
27923                                           ! 3733         addr1 = BX;
27924                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
27925 747E           8B46         08            mov	ax,8[bp]
27926 7481           8946         F8            mov	-8[bp],ax
27927                                           !BCC_EOS
27928                                           ! 3734         BX += 5;
27929                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
27930 7484           8B46         08            mov	ax,8[bp]
27931 7487           05                   0005  add	ax,*5
27932 748A           8946         08            mov	8[bp],ax
27933                                           !BCC_EOS
27934                                           ! 3735         for(i=1;i<=4;i++){
27935                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
27936 748D           B8                   0001  mov	ax,*1
27937 7490           8946         FE            mov	-2[bp],ax
27938                                           !BCC_EOS
27939                                           !BCC_EOS
27940 7493           EB           34            jmp .261
27941                       00007495            .262:
27942                                           ! 3736             outb(0x3c4, i);
27943                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
27944 7495           FF76         FE            push	-2[bp]
27945                                           ! Debug: list int = const $3C4 (used reg = )
27946 7498           B8                   03C4  mov	ax,#$3C4
27947 749B           50                         push	ax
27948                                           ! Debug: func () void = outb+0 (used reg = )
27949 749C           E8         06EA            call	_outb
27950 749F           83C4                   04  add	sp,*4
27951                                           !BCC_EOS
27952                                           ! 3737             outb(0x3c5, read_byte(ES, BX)); BX++;
27953                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27954 74A2           FF76         08            push	8[bp]
27955                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27956 74A5           FF76         06            push	6[bp]
27957                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27958 74A8           E8         0672            call	_read_byte
27959 74AB           83C4                   04  add	sp,*4
27960                                           ! Debug: list unsigned char = al+0 (used reg = )
27961 74AE           30E4                       xor	ah,ah
27962 74B0           50                         push	ax
27963                                           ! Debug: list int = const $3C5 (used reg = )
27964 74B1           B8                   03C5  mov	ax,#$3C5
27965 74B4           50                         push	ax
27966                                           ! Debug: func () void = outb+0 (used reg = )
27967 74B5           E8         06D1            call	_outb
27968 74B8           83C4                   04  add	sp,*4
27969                                           !BCC_EOS
27970                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
27971 74BB           8B46         08            mov	ax,8[bp]
27972 74BE           40                         inc	ax
27973 74BF           8946         08            mov	8[bp],ax
27974                                           !BCC_EOS
27975                                           ! 3738         }
27976                                           ! 3739         outb(0x3c4, 0);
27977                       000074C2            .260:
27978                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
27979 74C2           8B46         FE            mov	ax,-2[bp]
27980 74C5           40                         inc	ax
27981 74C6           8946         FE            mov	-2[bp],ax
27982                       000074C9            .261:
27983                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
27984 74C9           8B46         FE            mov	ax,-2[bp]
27985 74CC           3D                   0004  cmp	ax,*4
27986 74CF           76           C4            jbe	.262
27987                       000074D1            .263:
27988                       000074D1            .25F:
27989                                           ! Debug: list int = const 0 (used reg = )
27990 74D1           31C0                       xor	ax,ax
27991 74D3           50                         push	ax
27992                                           ! Debug: list int = const $3C4 (used reg = )
27993 74D4           B8                   03C4  mov	ax,#$3C4
27994 74D7           50                         push	ax
27995                                           ! Debug: func () void = outb+0 (used reg = )
27996 74D8           E8         06AE            call	_outb
27997 74DB           83C4                   04  add	sp,*4
27998                                           !BCC_EOS
27999                                           ! 3740         outb(0x3c5, read_byte(ES, BX)); BX++;
28000                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28001 74DE           FF76         08            push	8[bp]
28002                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28003 74E1           FF76         06            push	6[bp]
28004                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28005 74E4           E8         0636            call	_read_byte
28006 74E7           83C4                   04  add	sp,*4
28007                                           ! Debug: list unsigned char = al+0 (used reg = )
28008 74EA           30E4                       xor	ah,ah
28009 74EC           50                         push	ax
28010                                           ! Debug: list int = const $3C5 (used reg = )
28011 74ED           B8                   03C5  mov	ax,#$3C5
28012 74F0           50                         push	ax
28013                                           ! Debug: func () void = outb+0 (used reg = )
28014 74F1           E8         0695            call	_outb
28015 74F4           83C4                   04  add	sp,*4
28016                                           !BCC_EOS
28017                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28018 74F7           8B46         08            mov	ax,8[bp]
28019 74FA           40                         inc	ax
28020 74FB           8946         08            mov	8[bp],ax
28021                                           !BCC_EOS
28022                                           ! 3741         outw(crtc_addr,0x0011);
28023                                           ! Debug: list int = const $11 (used reg = )
28024 74FE           B8                   0011  mov	ax,*$11
28025 7501           50                         push	ax
28026                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28027 7502           FF76         FC            push	-4[bp]
28028                                           ! Debug: func () void = outw+0 (used reg = )
28029 7505           E8         0691            call	_outw
28030 7508           83C4                   04  add	sp,*4
28031                                           !BCC_EOS
28032                                           ! 3742         for(i=0;i<=0x18;i++) {
28033                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28034 750B           31C0                       xor	ax,ax
28035 750D           8946         FE            mov	-2[bp],ax
28036                                           !BCC_EOS
28037                                           !BCC_EOS
28038 7510           EB           3C            jmp .266
28039                       00007512            .267:
28040                                           ! 3743             if (i != 0x11) {
28041                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28042 7512           8B46         FE            mov	ax,-2[bp]
28043 7515           3D                   0011  cmp	ax,*$11
28044 7518           74           26            je  	.268
28045                       0000751A            .269:
28046                                           ! 3744                 outb(crtc_addr,i);
28047                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28048 751A           FF76         FE            push	-2[bp]
28049                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28050 751D           FF76         FC            push	-4[bp]
28051                                           ! Debug: func () void = outb+0 (used reg = )
28052 7520           E8         0666            call	_outb
28053 7523           83C4                   04  add	sp,*4
28054                                           !BCC_EOS
28055                                           ! 3745                 outb(crtc_addr+1, read_byte(ES, BX));
28056                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28057 7526           FF76         08            push	8[bp]
28058                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28059 7529           FF76         06            push	6[bp]
28060                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28061 752C           E8         05EE            call	_read_byte
28062 752F           83C4                   04  add	sp,*4
28063                                           ! Debug: list unsigned char = al+0 (used reg = )
28064 7532           30E4                       xor	ah,ah
28065 7534           50                         push	ax
28066                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28067 7535           8B46         FC            mov	ax,-4[bp]
28068                                           ! Debug: list unsigned int = ax+1 (used reg = )
28069 7538           40                         inc	ax
28070 7539           50                         push	ax
28071                                           ! Debug: func () void = outb+0 (used reg = )
28072 753A           E8         064C            call	_outb
28073 753D           83C4                   04  add	sp,*4
28074                                           !BCC_EOS
28075                                           ! 3746             }
28076                                           ! 3747             BX++;
28077                       00007540            .268:
28078                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28079 7540           8B46         08            mov	ax,8[bp]
28080 7543           40                         inc	ax
28081 7544           8946         08            mov	8[bp],ax
28082                                           !BCC_EOS
28083                                           ! 3748         }
28084                                           ! 3749         v = inb(0x3cc) & ~0x01;
28085                       00007547            .265:
28086                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28087 7547           8B46         FE            mov	ax,-2[bp]
28088 754A           40                         inc	ax
28089 754B           8946         FE            mov	-2[bp],ax
28090                       0000754E            .266:
28091                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28092 754E           8B46         FE            mov	ax,-2[bp]
28093 7551           3D                   0018  cmp	ax,*$18
28094 7554           76           BC            jbe	.267
28095                       00007556            .26A:
28096                       00007556            .264:
28097                                           ! Debug: list int = const $3CC (used reg = )
28098 7556           B8                   03CC  mov	ax,#$3CC
28099 7559           50                         push	ax
28100                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28101 755A           E8         0616            call	_inb
28102 755D           44                         inc	sp
28103 755E           44                         inc	sp
28104                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28105 755F           24                     FE  and	al,#$FE
28106                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28107 7561           30E4                       xor	ah,ah
28108 7563           8946         FA            mov	-6[bp],ax
28109                                           !BCC_EOS
28110                                           ! 3750         if (crtc_addr = 0x3d4)
28111                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28112 7566           B8                   03D4  mov	ax,#$3D4
28113 7569           8946         FC            mov	-4[bp],ax
28114 756C           85C0                       test	ax,ax
28115 756E           74           08            je  	.26B
28116                       00007570            .26C:
28117                                           ! 3751             v |= 0x01;
28118                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28119 7570           8B46         FA            mov	ax,-6[bp]
28120 7573           0C                     01  or	al,*1
28121 7575           8946         FA            mov	-6[bp],ax
28122                                           !BCC_EOS
28123                                           ! 3752         outb(0x3c2, v);
28124                       00007578            .26B:
28125                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28126 7578           FF76         FA            push	-6[bp]
28127                                           ! Debug: list int = const $3C2 (used reg = )
28128 757B           B8                   03C2  mov	ax,#$3C2
28129 757E           50                         push	ax
28130                                           ! Debug: func () void = outb+0 (used reg = )
28131 757F           E8         0607            call	_outb
28132 7582           83C4                   04  add	sp,*4
28133                                           !BCC_EOS
28134                                           ! 3753         outb(crtc_addr, 0x11);
28135                                           ! Debug: list int = const $11 (used reg = )
28136 7585           B8                   0011  mov	ax,*$11
28137 7588           50                         push	ax
28138                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28139 7589           FF76         FC            push	-4[bp]
28140                                           ! Debug: func () void = outb+0 (used reg = )
28141 758C           E8         05FA            call	_outb
28142 758F           83C4                   04  add	sp,*4
28143                                           !BCC_EOS
28144                                           ! 3754         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28145                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28146 7592           8B46         08            mov	ax,8[bp]
28147                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28148                                           ! Debug: list unsigned int = ax-7 (used reg = )
28149 7595           05                   FFF9  add	ax,*-7
28150 7598           50                         push	ax
28151                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28152 7599           FF76         06            push	6[bp]
28153                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28154 759C           E8         057E            call	_read_byte
28155 759F           83C4                   04  add	sp,*4
28156                                           ! Debug: list unsigned char = al+0 (used reg = )
28157 75A2           30E4                       xor	ah,ah
28158 75A4           50                         push	ax
28159                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28160 75A5           8B46         FC            mov	ax,-4[bp]
28161                                           ! Debug: list unsigned int = ax+1 (used reg = )
28162 75A8           40                         inc	ax
28163 75A9           50                         push	ax
28164                                           ! Debug: func () void = outb+0 (used reg = )
28165 75AA           E8         05DC            call	_outb
28166 75AD           83C4                   04  add	sp,*4
28167                                           !BCC_EOS
28168                                           ! 3755         ar_index = read_b
28169                                           ! 3755 yte(ES, addr1 + 0x03);
28170                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28171 75B0           8B46         F8            mov	ax,-8[bp]
28172                                           ! Debug: list unsigned int = ax+3 (used reg = )
28173 75B3           05                   0003  add	ax,*3
28174 75B6           50                         push	ax
28175                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28176 75B7           FF76         06            push	6[bp]
28177                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28178 75BA           E8         0560            call	_read_byte
28179 75BD           83C4                   04  add	sp,*4
28180                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28181 75C0           30E4                       xor	ah,ah
28182 75C2           8946         F6            mov	-$A[bp],ax
28183                                           !BCC_EOS
28184                                           ! 3756         inb(0x3da);
28185                                           ! Debug: list int = const $3DA (used reg = )
28186 75C5           B8                   03DA  mov	ax,#$3DA
28187 75C8           50                         push	ax
28188                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28189 75C9           E8         05A7            call	_inb
28190 75CC           44                         inc	sp
28191 75CD           44                         inc	sp
28192                                           !BCC_EOS
28193                                           ! 3757         for(i=0;i<=0x13;i++) {
28194                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28195 75CE           31C0                       xor	ax,ax
28196 75D0           8946         FE            mov	-2[bp],ax
28197                                           !BCC_EOS
28198                                           !BCC_EOS
28199 75D3           EB           3C            jmp .26F
28200                       000075D5            .270:
28201                                           ! 3758             outb(0x3c0, i | (ar_index & 0x20));
28202                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28203 75D5           8A46         F6            mov	al,-$A[bp]
28204 75D8           24                     20  and	al,*$20
28205                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28206                                           ! Debug: expression subtree swapping
28207 75DA           30E4                       xor	ah,ah
28208 75DC           0B46         FE            or	ax,-2[bp]
28209                                           ! Debug: list unsigned int = ax+0 (used reg = )
28210 75DF           50                         push	ax
28211                                           ! Debug: list int = const $3C0 (used reg = )
28212 75E0           B8                   03C0  mov	ax,#$3C0
28213 75E3           50                         push	ax
28214                                           ! Debug: func () void = outb+0 (used reg = )
28215 75E4           E8         05A2            call	_outb
28216 75E7           83C4                   04  add	sp,*4
28217                                           !BCC_EOS
28218                                           ! 3759             outb(0x3c0, read_byte(ES, BX)); BX++;
28219                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28220 75EA           FF76         08            push	8[bp]
28221                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28222 75ED           FF76         06            push	6[bp]
28223                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28224 75F0           E8         052A            call	_read_byte
28225 75F3           83C4                   04  add	sp,*4
28226                                           ! Debug: list unsigned char = al+0 (used reg = )
28227 75F6           30E4                       xor	ah,ah
28228 75F8           50                         push	ax
28229                                           ! Debug: list int = const $3C0 (used reg = )
28230 75F9           B8                   03C0  mov	ax,#$3C0
28231 75FC           50                         push	ax
28232                                           ! Debug: func () void = outb+0 (used reg = )
28233 75FD           E8         0589            call	_outb
28234 7600           83C4                   04  add	sp,*4
28235                                           !BCC_EOS
28236                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28237 7603           8B46         08            mov	ax,8[bp]
28238 7606           40                         inc	ax
28239 7607           8946         08            mov	8[bp],ax
28240                                           !BCC_EOS
28241                                           ! 3760         }
28242                                           ! 3761         outb(0x3c0, ar_index);
28243                       0000760A            .26E:
28244                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28245 760A           8B46         FE            mov	ax,-2[bp]
28246 760D           40                         inc	ax
28247 760E           8946         FE            mov	-2[bp],ax
28248                       00007611            .26F:
28249                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28250 7611           8B46         FE            mov	ax,-2[bp]
28251 7614           3D                   0013  cmp	ax,*$13
28252 7617           76           BC            jbe	.270
28253                       00007619            .271:
28254                       00007619            .26D:
28255                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28256 7619           FF76         F6            push	-$A[bp]
28257                                           ! Debug: list int = const $3C0 (used reg = )
28258 761C           B8                   03C0  mov	ax,#$3C0
28259 761F           50                         push	ax
28260                                           ! Debug: func () void = outb+0 (used reg = )
28261 7620           E8         0566            call	_outb
28262 7623           83C4                   04  add	sp,*4
28263                                           !BCC_EOS
28264                                           ! 3762         inb(0x3da);
28265                                           ! Debug: list int = const $3DA (used reg = )
28266 7626           B8                   03DA  mov	ax,#$3DA
28267 7629           50                         push	ax
28268                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28269 762A           E8         0546            call	_inb
28270 762D           44                         inc	sp
28271 762E           44                         inc	sp
28272                                           !BCC_EOS
28273                                           ! 3763         for(i=0;i<=8;i++) {
28274                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28275 762F           31C0                       xor	ax,ax
28276 7631           8946         FE            mov	-2[bp],ax
28277                                           !BCC_EOS
28278                                           !BCC_EOS
28279 7634           EB           34            jmp .274
28280                       00007636            .275:
28281                                           ! 3764             outb(0x3ce,i);
28282                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28283 7636           FF76         FE            push	-2[bp]
28284                                           ! Debug: list int = const $3CE (used reg = )
28285 7639           B8                   03CE  mov	ax,#$3CE
28286 763C           50                         push	ax
28287                                           ! Debug: func () void = outb+0 (used reg = )
28288 763D           E8         0549            call	_outb
28289 7640           83C4                   04  add	sp,*4
28290                                           !BCC_EOS
28291                                           ! 3765             outb(0x3cf, read_byte(ES, BX)); BX++;
28292                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28293 7643           FF76         08            push	8[bp]
28294                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28295 7646           FF76         06            push	6[bp]
28296                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28297 7649           E8         04D1            call	_read_byte
28298 764C           83C4                   04  add	sp,*4
28299                                           ! Debug: list unsigned char = al+0 (used reg = )
28300 764F           30E4                       xor	ah,ah
28301 7651           50                         push	ax
28302                                           ! Debug: list int = const $3CF (used reg = )
28303 7652           B8                   03CF  mov	ax,#$3CF
28304 7655           50                         push	ax
28305                                           ! Debug: func () void = outb+0 (used reg = )
28306 7656           E8         0530            call	_outb
28307 7659           83C4                   04  add	sp,*4
28308                                           !BCC_EOS
28309                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28310 765C           8B46         08            mov	ax,8[bp]
28311 765F           40                         inc	ax
28312 7660           8946         08            mov	8[bp],ax
28313                                           !BCC_EOS
28314                                           ! 3766         }
28315                                           ! 3767         BX += 2;
28316                       00007663            .273:
28317                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28318 7663           8B46         FE            mov	ax,-2[bp]
28319 7666           40                         inc	ax
28320 7667           8946         FE            mov	-2[bp],ax
28321                       0000766A            .274:
28322                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28323 766A           8B46         FE            mov	ax,-2[bp]
28324 766D           3D                   0008  cmp	ax,*8
28325 7670           76           C4            jbe	.275
28326                       00007672            .276:
28327                       00007672            .272:
28328                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28329 7672           8B46         08            mov	ax,8[bp]
28330 7675           40                         inc	ax
28331 7676           40                         inc	ax
28332 7677           8946         08            mov	8[bp],ax
28333                                           !BCC_EOS
28334                                           ! 3768         BX += 4;
28335                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28336 767A           8B46         08            mov	ax,8[bp]
28337 767D           05                   0004  add	ax,*4
28338 7680           8946         08            mov	8[bp],ax
28339                                           !BCC_EOS
28340                                           ! 3769         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28341                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28342 7683           FF76         F8            push	-8[bp]
28343                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28344 7686           FF76         06            push	6[bp]
28345                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28346 7689           E8         0491            call	_read_byte
28347 768C           83C4                   04  add	sp,*4
28348                                           ! Debug: list unsigned char = al+0 (used reg = )
28349 768F           30E4                       xor	ah,ah
28350 7691           50                         push	ax
28351                                           ! Debug: list int = const $3C4 (used reg = )
28352 7692           B8                   03C4  mov	ax,#$3C4
28353 7695           50                         push	ax
28354                                           ! Debug: func () void = outb+0 (used reg = )
28355 7696           E8         04F0            call	_outb
28356 7699           83C4                   04  add	sp,*4
28357                                           !BCC_EOS
28358                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28359 769C           8B46         F8            mov	ax,-8[bp]
28360 769F           40                         inc	ax
28361 76A0           8946         F8            mov	-8[bp],ax
28362                                           !BCC_EOS
28363                                           ! 3770         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28364                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28365 76A3           FF76         F8            push	-8[bp]
28366                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28367 76A6           FF76         06            push	6[bp]
28368                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28369 76A9           E8         0471            call	_read_byte
28370 76AC           83C4                   04  add	sp,*4
28371                                           ! Debug: list unsigned char = al+0 (used reg = )
28372 76AF           30E4                       xor	ah,ah
28373 76B1           50                         push	ax
28374                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28375 76B2           FF76         FC            push	-4[bp]
28376                                           ! Debug: func () void = outb+0 (used reg = )
28377 76B5           E8         04D1            call	_outb
28378 76B8           83C4                   04  add	sp,*4
28379                                           !BCC_EOS
28380                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28381 76BB           8B46         F8            mov	ax,-8[bp]
28382 76BE           40                         inc	ax
28383 76BF           8946         F8            mov	-8[bp],ax
28384                                           !BCC_EOS
28385                                           ! 3771         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28386                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28387 76C2           FF76         F8            push	-8[bp]
28388                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28389 76C5           FF76         06            push	6[bp]
28390                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28391 76C8           E8         0452            call	_read_byte
28392 76CB           83C4                   04  add	sp,*4
28393                                           ! Debug: list unsigned char = al+0 (used reg = )
28394 76CE           30E4                       xor	ah,ah
28395 76D0           50                         push	ax
28396                                           ! Debug: list int = const $3CE (used reg = )
28397 76D1           B8                   03CE  mov	ax,#$3CE
28398 76D4           50                         push	ax
28399                                           ! Debug: func () void = outb+0 (used reg = )
28400 76D5           E8         04B1            call	_outb
28401 76D8           83C4                   04  add	sp,*4
28402                                           !BCC_EOS
28403                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28404 76DB           8B46         F8            mov	ax,-8[bp]
28405 76DE           40                         inc	ax
28406 76DF           8946         F8            mov	-8[bp],ax
28407                                           !BCC_EOS
28408                                           ! 3772         addr1++;
28409                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28410 76E2           8B46         F8            mov	ax,-8[bp]
28411 76E5           40                         inc	ax
28412 76E6           8946         F8            mov	-8[bp],ax
28413                                           !BCC_EOS
28414                                           ! 3773         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28415                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28416 76E9           FF76         F8            push	-8[bp]
28417                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28418 76EC           FF76         06            push	6[bp]
28419                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28420 76EF           E8         042B            call	_read_byte
28421 76F2           83C4                   04  add	sp,*4
28422                                           ! Debug: list unsigned char = al+0 (used reg = )
28423 76F5           30E4                       xor	ah,ah
28424 76F7           50                         push	ax
28425                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28426 76F8           8B46         FC            mov	ax,-4[bp]
28427                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28428                                           ! Debug: list unsigned int = ax+6 (used reg = )
28429 76FB           05                   0006  add	ax,*6
28430 76FE           50                         push	ax
28431                                           ! Debug: func () void = outb+0 (used reg = )
28432 76FF           E8         0487            call	_outb
28433 7702           83C4                   04  add	sp,*4
28434                                           !BCC_EOS
28435                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28436 7705           8B46         F8            mov	ax,-8[bp]
28437 7708           40                         inc	ax
28438 7709           8946         F8            mov	-8[bp],ax
28439                                           !BCC_EOS
28440                                           ! 3774     }
28441                                           ! 3775     if (CX & 2) {
28442                       0000770C            .25D:
28443                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28444 770C           8A46         04            mov	al,4[bp]
28445 770F           24                     02  and	al,*2
28446 7711           84C0                       test	al,al
28447 7713   7503    E9         0270            beq 	.277
28448                       00007718            .278:
28449                                           ! 3776         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28450                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28451 7718           FF76         08            push	8[bp]
28452                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28453 771B           FF76         06            push	6[bp]
28454                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28455 771E           E8         03FC            call	_read_byte
28456 7721           83C4                   04  add	sp,*4
28457                                           ! Debug: list unsigned char = al+0 (used reg = )
28458 7724           30E4                       xor	ah,ah
28459 7726           50                         push	ax
28460                                           ! Debug: list int = const $49 (used reg = )
28461 7727           B8                   0049  mov	ax,*$49
28462 772A           50                         push	ax
28463                                           ! Debug: list int = const $40 (used reg = )
28464 772B           B8                   0040  mov	ax,*$40
28465 772E           50                         push	ax
28466                                           ! Debug: func () void = write_byte+0 (used reg = )
28467 772F           E8         0411            call	_write_byte
28468 7732           83C4                   06  add	sp,*6
28469                                           !BCC_EOS
28470                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28471 7735           8B46         08            mov	ax,8[bp]
28472 7738           40                         inc	ax
28473 7739           8946         08            mov	8[bp],ax
28474                                           !BCC_EOS
28475                                           ! 3777         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28476                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28477 773C           FF76         08            push	8[bp]
28478                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28479 773F           FF76         06            push	6[bp]
28480                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28481 7742           E8         03EB            call	_read_word
28482 7745           83C4                   04  add	sp,*4
28483                                           ! Debug: list unsigned short = ax+0 (used reg = )
28484 7748           50                         push	ax
28485                                           ! Debug: list int = const $4A (used reg = )
28486 7749           B8                   004A  mov	ax,*$4A
28487 774C           50                         push	ax
28488                                           ! Debug: list int = const $40 (used reg = )
28489 774D           B8                   0040  mov	ax,*$40
28490 7750           50                         push	ax
28491                                           ! Debug: func () void = write_word+0 (used reg = )
28492 7751           E8         0407            call	_write_word
28493 7754           83C4                   06  add	sp,*6
28494                                           !BCC_EOS
28495                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28496 7757           8B46         08            mov	ax,8[bp]
28497 775A           40                         inc	ax
28498 775B           40                         inc	ax
28499 775C           8946         08            mov	8[bp],ax
28500                                           !BCC_EOS
28501                                           ! 3778         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28502                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28503 775F           FF76         08            push	8[bp]
28504                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28505 7762           FF76         06            push	6[bp]
28506                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28507 7765           E8         03C8            call	_read_word
28508 7768           83C4                   04  add	sp,*4
28509                                           ! Debug: list unsigned short = ax+0 (used reg = )
28510 776B           50                         push	ax
28511                                           ! Debug: list int = const $4C (used reg = )
28512 776C           B8                   004C  mov	ax,*$4C
28513 776F           50                         push	ax
28514                                           ! Debug: list int = const $40 (used reg = )
28515 7770           B8                   0040  mov	ax,*$40
28516 7773           50                         push	ax
28517                                           ! Debug: func () void = write_word+0 (used reg = )
28518 7774           E8         03E4            call	_write_word
28519 7777           83C4                   06  add	sp,*6
28520                                           !BCC_EOS
28521                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28522 777A           8B46         08            mov	ax,8[bp]
28523 777D           40                         inc	ax
28524 777E           40                         inc	ax
28525 777F           8946         08            mov	8[bp],ax
28526                                           !BCC_EOS
28527                                           ! 3779         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
28528                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28529 7782           FF76         08            push	8[bp]
28530                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28531 7785           FF76         06            push	6[bp]
28532                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28533 7788           E8         03A5            call	_read_word
28534 778B           83C4                   04  add	sp,*4
28535                                           ! Debug: list unsigned short = ax+0 (used reg = )
28536 778E           50                         push	ax
28537                                           ! Debug: list int = const $63 (used reg = )
28538 778F           B8                   0063  mov	ax,*$63
28539 7792           50                         push	ax
28540                                           ! Debug: list int = const $40 (used reg = )
28541 7793           B8                   0040  mov	ax,*$40
28542 7796           50                         push	ax
28543                                           ! Debug: func () void = write_word+0 (used reg = )
28544 7797           E8         03C1            call	_write_word
28545 779A           83C4                   06  add	sp,*6
28546                                           !BCC_EOS
28547                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28548 779D           8B46         08            mov	ax,8[bp]
28549 77A0           40                         inc	ax
28550 77A1           40                         inc	ax
28551 77A2           8946         08            mov	8[bp],ax
28552                                           !BCC_EOS
28553                                           ! 3780         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
28554                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28555 77A5           FF76         08            push	8[bp]
28556                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28557 77A8           FF76         06            push	6[bp]
28558                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28559 77AB           E8         036F            call	_read_byte
28560 77AE           83C4                   04  add	sp,*4
28561                                           ! Debug: list unsigned char = al+0 (used reg = )
28562 77B1           30E4                       xor	ah,ah
28563 77B3           50                         push	ax
28564                                           ! Debug: list int = const $84 (used reg = )
28565 77B4           B8                   0084  mov	ax,#$84
28566 77B7           50                         push	ax
28567                                           ! Debug: list int = const $40 (used reg = )
28568 77B8           B8                   0040  mov	ax,*$40
28569 77BB           50                         push	ax
28570                                           ! Debug: func () void = write_byte+0 (used reg = )
28571 77BC           E8         0384            call	_write_byte
28572 77BF           83C4                   06  add	sp,*6
28573                                           !BCC_EOS
28574                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28575 77C2           8B46         08            mov	ax,8[bp]
28576 77C5           40                         inc	ax
28577 77C6           8946         08            mov	8[bp],ax
28578                                           !BCC_EOS
28579                                           ! 3781         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
28580                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28581 77C9           FF76         08            push	8[bp]
28582                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28583 77CC           FF76         06            push	6[bp]
28584                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28585 77CF           E8         035E            call	_read_word
28586 77D2           83C4                   04  add	sp,*4
28587                                           ! Debug: list unsigned short = ax+0 (used reg = )
28588 77D5           50                         push	ax
28589                                           ! Debug: list int = const $85 (used reg = )
28590 77D6           B8                   0085  mov	ax,#$85
28591 77D9           50                         push	ax
28592                                           ! Debug: list int = const $40 (used reg = )
28593 77DA           B8                   0040  mov	ax,*$40
28594 77DD           50                         push	ax
28595                                           ! Debug: func () void = write_word+0 (used reg = )
28596 77DE           E8         037A            call	_write_word
28597 77E1           83C4                   06  add	sp,*6
28598                                           !BCC_EOS
28599                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28600 77E4           8B46         08            mov	ax,8[bp]
28601 77E7           40                         inc	ax
28602 77E8           40                         inc	ax
28603 77E9           8946         08            mov	8[bp],ax
28604                                           !BCC_EOS
28605                                           ! 3782         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
28606                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28607 77EC           FF76         08            push	8[bp]
28608                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28609 77EF           FF76         06            push	6[bp]
28610                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28611 77F2           E8         0328            call	_read_byte
28612 77F5           83C4                   04  add	sp,*4
28613                                           ! Debug: list unsigned char = al+0 (used reg = )
28614 77F8           30E4                       xor	ah,ah
28615 77FA           50                         push	ax
28616                                           ! Debug: list int = const $87 (used reg = )
28617 77FB           B8                   0087  mov	ax,#$87
28618 77FE           50                         push	ax
28619                                           ! Debug: list int = const $40 (used reg = )
28620 77FF           B8                   0040  mov	ax,*$40
28621 7802           50                         push	ax
28622                                           ! Debug: func () void = write_byte+0 (used reg = )
28623 7803           E8         033D            call	_write_byte
28624 7806           83C4                   06  add	sp,*6
28625                                           !BCC_EOS
28626                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28627 7809           8B46         08            mov	ax,8[bp]
28628 780C           40                         inc	ax
28629 780D           8946         08            mov	8[bp],ax
28630                                           !BCC_EOS
28631                                           ! 3783         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
28632                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28633 7810           FF76         08            push	8[bp]
28634                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28635 7813           FF76         06            push	6[bp]
28636                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28637 7816           E8         0304            call	_read_byte
28638 7819           83C4                   04  add	sp,*4
28639                                           ! Debug: list unsigned char = al+0 (used reg = )
28640 781C           30E4                       xor	ah,ah
28641 781E           50                         push	ax
28642                                           ! Debug: list int = const $88 (used reg = )
28643 781F           B8                   0088  mov	ax,#$88
28644 7822           50                         push	ax
28645                                           ! Debug: list int = const $40 (used reg = )
28646 7823           B8                   0040  mov	ax,*$40
28647 7826           50                         push	ax
28648                                           ! Debug: func () void = write_byte+0 (used reg = )
28649 7827           E8         0319            call	_write_byte
28650 782A           83C4                   06  add	sp,*6
28651                                           !BCC_EOS
28652                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28653 782D           8B46         08            mov	ax,8[bp]
28654 7830           40                         inc	ax
28655 7831           8946         08            mov	8[bp],ax
28656                                           !BCC_EOS
28657                                           ! 3784         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
28658                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28659 7834           FF76         08            push	8[bp]
28660                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28661 7837           FF76         06            push	6[bp]
28662                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28663 783A           E8         02E0            call	_read_byte
28664 783D           83C4                   04  add	sp,*4
28665                                           ! Debug: list unsigned char = al+0 (used reg = )
28666 7840           30E4                       xor	ah,ah
28667 7842           50                         push	ax
28668                                           ! Debug: list int = const $89 (used reg = )
28669 7843           B8                   0089  mov	ax,#$89
28670 7846           50                         push	ax
28671                                           ! Debug: list int = const $40 (used reg = )
28672 7847           B8                   0040  mov	ax,*$40
28673 784A           50                         push	ax
28674                                           ! Debug: func () void = write_byte+0 (used reg = )
28675 784B           E8         02F5            call	_write_byte
28676 784E           83C4                   06  add	sp,*6
28677                                           !BCC_EOS
28678                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28679 7851           8B46         08            mov	ax,8[bp]
28680 7854           40                         inc	ax
28681 7855           8946         08            mov	8[bp],ax
28682                                           !BCC_EOS
28683                                           ! 3785         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
28684                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28685 7858           FF76         08            push	8[bp]
28686                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28687 785B           FF76         06            push	6[bp]
28688                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28689 785E           E8         02CF            call	_read_word
28690 7861           83C4                   04  add	sp,*4
28691                                           ! Debug: list unsigned short = ax+0 (used reg = )
28692 7864           50                         push	ax
28693                                           ! Debug: list int = const $60 (used reg = )
28694 7865           B8                   0060  mov	ax,*$60
28695 7868           50                         push	ax
28696                                           ! Debug: list int = const $40 (used reg = )
28697 7869           B8                   0040  mov	ax,*$40
28698 786C           50                         push	ax
28699                                           ! Debug: func () void = write_word+0 (used reg = )
28700 786D           E8         02EB            call	_write_word
28701 7870           83C4                   06  add	sp,*6
28702                                           !BCC_EOS
28703                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28704 7873           8B46         08            mov	ax,8[bp]
28705 7876           40                         inc	ax
28706 7877           40                         inc	ax
28707 7878           8946         08            mov	8[bp],ax
28708                                           !BCC_EOS
28709                                           ! 3786         for(i=0;i<8;i++) {
28710                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28711 787B           31C0                       xor	ax,ax
28712 787D           8946         FE            mov	-2[bp],ax
28713                                           !BCC_EOS
28714                                           !BCC_EOS
28715 7880           EB           2F            jmp .27B
28716                       00007882            .27C:
28717                                           ! 3787             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
28718                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28719 7882           FF76         08            push	8[bp]
28720                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28721 7885           FF76         06            push	6[bp]
28722                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28723 7888           E8         02A5            call	_read_word
28724 788B           83C4                   04  add	sp,*4
28725                                           ! Debug: list unsigned short = ax+0 (used reg = )
28726 788E           50                         push	ax
28727                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
28728                                           ! Debug: expression subtree swapping
28729 788F           8B46         FE            mov	ax,-2[bp]
28730 7892           D1E0                       shl	ax,*1
28731                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28732                                           ! Debug: expression subtree swapping
28733                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28734 7894           05                   0050  add	ax,*$50
28735 7897           50                         push	ax
28736                                           ! Debug: list int = const $40 (used reg = )
28737 7898           B8                   0040  mov	ax,*$40
28738 789B           50                         push	ax
28739                                           ! Debug: func () void = write_word+0 (used reg = )
28740 789C           E8         02BC            call	_write_word
28741 789F           83C4                   06  add	sp,*6
28742                                           !BCC_EOS
28743                                           ! 3788             BX += 2;
28744                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28745 78A2           8B46         08            mov	ax,8[bp]
28746 78A5           40                         inc	ax
28747 78A6           40                         inc	ax
28748 78A7           8946         08            mov	8[bp],ax
28749                                           !BCC_EOS
28750                                           ! 3789         }
28751                                           ! 3790         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
28752                       000078AA            .27A:
28753                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28754 78AA           8B46         FE            mov	ax,-2[bp]
28755 78AD           40                         inc	ax
28756 78AE           8946         FE            mov	-2[bp],ax
28757                       000078B1            .27B:
28758                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28759 78B1           8B46         FE            mov	ax,-2[bp]
28760 78B4           3D                   0008  cmp	ax,*8
28761 78B7           72           C9            jb 	.27C
28762                       000078B9            .27D:
28763                       000078B9            .279:
28764                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28765 78B9           FF76         08            push	8[bp]
28766                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28767 78BC           FF76         06            push	6[bp]
28768                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28769 78BF           E8         026E            call	_read_word
28770 78C2           83C4                   04  add	sp,*4
28771                                           ! Debug: list unsigned short = ax+0 (used reg = )
28772 78C5           50                         push	ax
28773                                           ! Debug: list int = const $4E (used reg = )
28774 78C6           B8                   004E  mov	ax,*$4E
28775 78C9           50                         push	ax
28776                                           ! Debug: list int = const $40 (used reg = )
28777 78CA           B8                   0040  mov	ax,*$40
28778 78CD           50                         push	ax
28779                                           ! Debug: func () void = write_word+0 (used reg = )
28780 78CE           E8         028A            call	_write_word
28781 78D1           83C4                   06  add	sp,*6
28782                                           !BCC_EOS
28783                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28784 78D4           8B46         08            mov	ax,8[bp]
28785 78D7           40                         inc	ax
28786 78D8           40                         inc	ax
28787 78D9           8946         08            mov	8[bp],ax
28788                                           !BCC_EOS
28789                                           ! 3791         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
28790                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28791 78DC           FF76         08            push	8[bp]
28792                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28793 78DF           FF76         06            push	6[bp]
28794                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28795 78E2           E8         0238            call	_read_byte
28796 78E5           83C4                   04  add	sp,*4
28797                                           ! Debug: list unsigned char = al+0 (used reg = )
28798 78E8           30E4                       xor	ah,ah
28799 78EA           50                         push	ax
28800                                           ! Debug: list int = const $62 (used reg = )
28801 78EB           B8                   0062  mov	ax,*$62
28802 78EE           50                         push	ax
28803                                           ! Debug: list int = const $40 (used reg = )
28804 78EF           B8                   0040  mov	ax,*$40
28805 78F2           50                         push	ax
28806                                           ! Debug: func () void = write_byte+0 (used reg = )
28807 78F3           E8         024D            call	_write_byte
28808 78F6           83C4                   06  add	sp,*6
28809                                           !BCC_EOS
28810                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28811 78F9           8B46         08            mov	ax,8[bp]
28812 78FC           40                         inc	ax
28813 78FD           8946         08            mov	8[bp],ax
28814                                           !BCC_EOS
28815                                           ! 3792         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
28816                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28817 7900           FF76         08            push	8[bp]
28818                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28819 7903           FF76         06            push	6[bp]
28820                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28821 7906           E8         0227            call	_read_word
28822 7909           83C4                   04  add	sp,*4
28823                                           ! Debug: list unsigned short = ax+0 (used reg = )
28824 790C           50                         push	ax
28825                                           ! Debug: list int = const $7C (used reg = )
28826 790D           B8                   007C  mov	ax,*$7C
28827 7910           50                         push	ax
28828                                           ! Debug: list int = const 0 (used reg = )
28829 7911           31C0                       xor	ax,ax
28830 7913           50                         push	ax
28831                                           ! Debug: func () void = write_word+0 (used reg = )
28832 7914           E8         0244            call	_write_word
28833 7917           83C4                   06  add	sp,*6
28834                                           !BCC_EOS
28835                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28836 791A           8B46         08            mov	ax,8[bp]
28837 791D           40                         inc	ax
28838 791E           40                         inc	ax
28839 791F           8946         08            mov	8[bp],ax
28840                                           !BCC_EOS
28841                                           ! 3793         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
28842                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28843 7922           FF76         08            push	8[bp]
28844                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28845 7925           FF76         06            push	6[bp]
28846                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28847 7928           E8         0205            call	_read_word
28848 792B           83C4                   04  add	sp,*4
28849                                           ! Debug: list unsigned short = ax+0 (used reg = )
28850 792E           50                         push	ax
28851                                           ! Debug: list int = const $7E (used reg = )
28852 792F           B8                   007E  mov	ax,*$7E
28853 7932           50                         push	ax
28854                                           ! Debug: list int = const 0 (used reg = )
28855 7933           31C0                       xor	ax,ax
28856 7935           50                         push	ax
28857                                           ! Debug: func () void = write_word+0 (used reg = )
28858 7936           E8         0222            call	_write_word
28859 7939           83C4                   06  add	sp,*6
28860                                           !BCC_EOS
28861                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28862 793C           8B46         08            mov	ax,8[bp]
28863 793F           40                         inc	ax
28864 7940           40                         inc	ax
28865 7941           8946         08            mov	8[bp],ax
28866                                           !BCC_EOS
28867                                           ! 3794         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
28868                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28869 7944           FF76         08            push	8[bp]
28870                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28871 7947           FF76         06            push	6[bp]
28872                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28873 794A           E8         01E3            call	_read_word
28874 794D           83C4                   04  add	sp,*4
28875                                           ! Debug: list unsigned short = ax+0 (used reg = )
28876 7950           50                         push	ax
28877                                           ! Debug: list int = const $10C (used reg = )
28878 7951           B8                   010C  mov	ax,#$10C
28879 7954           50                         push	ax
28880                                           ! Debug: list int = const 0 (used reg = )
28881 7955           31C0                       xor	ax,ax
28882 7957           50                         push	ax
28883                                           ! Debug: func () void = write_word+0 (used reg = )
28884 7958           E8         0200            call	_write_word
28885 795B           83C4                   06  add	sp,*6
28886                                           !BCC_EOS
28887                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28888 795E           8B46         08            mov	ax,8[bp]
28889 7961           40                         inc	ax
28890 7962           40                         inc	ax
28891 7963           8946         08            mov	8[bp],ax
28892                                           !BCC_EOS
28893                                           ! 3795         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
28894                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28895 7966           FF76         08            push	8[bp]
28896                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28897 7969           FF76         06            push	6[bp]
28898                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28899 796C           E8         01C1            call	_read_word
28900 796F           83C4                   04  add	sp,*4
28901                                           ! Debug: list unsigned short = ax+0 (used reg = )
28902 7972           50                         push	ax
28903                                           ! Debug: list int = const $10E (used reg = )
28904 7973           B8                   010E  mov	ax,#$10E
28905 7976           50                         push	ax
28906                                           ! Debug: list int = const 0 (used reg = )
28907 7977           31C0                       xor	ax,ax
28908 7979           50                         push	ax
28909                                           ! Debug: func () void = write_word+0 (used reg = )
28910 797A           E8         01DE            call	_write_word
28911 797D           83C4                   06  add	sp,*6
28912                                           !BCC_EOS
28913                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28914 7980           8B46         08            mov	ax,8[bp]
28915 7983           40                         inc	ax
28916 7984           40                         inc	ax
28917 7985           8946         08            mov	8[bp],ax
28918                                           !BCC_EOS
28919                                           ! 3796     }
28920                                           ! 3797     if (CX & 4) {
28921                       00007988            .277:
28922                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
28923 7988           8A46         04            mov	al,4[bp]
28924 798B           24                     04  and	al,*4
28925 798D           84C0                       test	al,al
28926 798F   7503    E9         0096            beq 	.27E
28927                       00007994            .27F:
28928                                           ! 3798         BX++;
28929                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28930 7994           8B46         08            mov	ax,8[bp]
28931 7997           40                         inc	ax
28932 7998           8946         08            mov	8[bp],ax
28933                                           !BCC_EOS
28934                                           ! 3799         v = read_byte(ES, BX); BX++;
28935                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28936 799B           FF76         08            push	8[bp]
28937                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28938 799E           FF76         06            push	6[bp]
28939                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28940 79A1           E8         0179            call	_read_byte
28941 79A4           83C4                   04  add	sp,*4
28942                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28943 79A7           30E4                       xor	ah,ah
28944 79A9           8946         FA            mov	-6[bp],ax
28945                                           !BCC_EOS
28946                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28947 79AC           8B46         08            mov	ax,8[bp]
28948 79AF           40                         inc	ax
28949 79B0           8946         08            mov	8[bp],ax
28950                                           !BCC_EOS
28951                                           ! 3800         outb(0x3c6, read_byte(ES, BX)); BX++;
28952                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28953 79B3           FF76         08            push	8[bp]
28954                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28955 79B6           FF76         06            push	6[bp]
28956                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28957 79B9           E8         0161            call	_read_byte
28958 79BC           83C4                   04  add	sp,*4
28959                                           ! Debug: list unsigned char = al+0 (used reg = )
28960 79BF           30E4                       xor	ah,ah
28961 79C1           50                         push	ax
28962                                           ! Debug: list int = const $3C6 (used reg = )
28963 79C2           B8                   03C6  mov	ax,#$3C6
28964 79C5           50                         push	ax
28965                                           ! Debug: func () void = outb+0 (used reg = )
28966 79C6           E8         01C0            call	_outb
28967 79C9           83C4                   04  add	sp,*4
28968                                           !BCC_EOS
28969                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28970 79CC           8B46         08            mov	ax,8[bp]
28971 79CF           40                         inc	ax
28972 79D0           8946         08            mov	8[bp],ax
28973                                           !BCC_EOS
28974                                           ! 3801         outb(0x3c8,0x00);
28975                                           ! Debug: list int = const 0 (used reg = )
28976 79D3           31C0                       xor	ax,ax
28977 79D5           50                         push	ax
28978                                           ! Debug: list int = const $3C8 (used reg = )
28979 79D6           B8                   03C8  mov	ax,#$3C8
28980 79D9           50                         push	ax
28981                                           ! Debug: func () void = outb+0 (used reg = )
28982 79DA           E8         01AC            call	_outb
28983 79DD           83C4                   04  add	sp,*4
28984                                           !BCC_EOS
28985                                           ! 3802         for(i=0;i<256*3;i++) {
28986                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28987 79E0           31C0                       xor	ax,ax
28988 79E2           8946         FE            mov	-2[bp],ax
28989                                           !BCC_EOS
28990                                           !BCC_EOS
28991 79E5           EB           27            jmp .282
28992                       000079E7            .283:
28993                                           ! 3803             outb(0x3c9, read_byte(ES, BX)); BX++;
28994                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28995 79E7           FF76         08            push	8[bp]
28996                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28997 79EA           FF76         06            push	6[bp]
28998                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28999 79ED           E8         012D            call	_read_byte
29000 79F0           83C4                   04  add	sp,*4
29001                                           ! Debug: list unsigned char = al+0 (used reg = )
29002 79F3           30E4                       xor	ah,ah
29003 79F5           50                         push	ax
29004                                           ! Debug: list int = const $3C9 (used reg = )
29005 79F6           B8                   03C9  mov	ax,#$3C9
29006 79F9           50                         push	ax
29007                                           ! Debug: func () void = outb+0 (used reg = )
29008 79FA           E8         018C            call	_outb
29009 79FD           83C4                   04  add	sp,*4
29010                                           !BCC_EOS
29011                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29012 7A00           8B46         08            mov	ax,8[bp]
29013 7A03           40                         inc	ax
29014 7A04           8946         08            mov	8[bp],ax
29015                                           !BCC_EOS
29016                                           ! 3804         }
29017                                           ! 3805         BX++;
29018                       00007A07            .281:
29019                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29020 7A07           8B46         FE            mov	ax,-2[bp]
29021 7A0A           40                         inc	ax
29022 7A0B           8946         FE            mov	-2[bp],ax
29023                       00007A0E            .282:
29024                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29025 7A0E           8B46         FE            mov	ax,-2[bp]
29026 7A11           3D                   0300  cmp	ax,#$300
29027 7A14           72           D1            jb 	.283
29028                       00007A16            .284:
29029                       00007A16            .280:
29030                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29031 7A16           8B46         08            mov	ax,8[bp]
29032 7A19           40                         inc	ax
29033 7A1A           8946         08            mov	8[bp],ax
29034                                           !BCC_EOS
29035                                           ! 3806         outb(0x3c8, v);
29036                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29037 7A1D           FF76         FA            push	-6[bp]
29038                                           ! Debug: list int = const $3C8 (used reg = )
29039 7A20           B8                   03C8  mov	ax,#$3C8
29040 7A23           50                         push	ax
29041                                           ! Debug: func () void = outb+0 (used reg = )
29042 7A24           E8         0162            call	_outb
29043 7A27           83C4                   04  add	sp,*4
29044                                           !BCC_EOS
29045                                           ! 3807     }
29046                                           ! 3808     return BX;
29047                       00007A2A            .27E:
29048 7A2A           8B46         08            mov	ax,8[bp]
29049 7A2D           89EC                       mov	sp,bp
29050 7A2F           5D                         pop	bp
29051 7A30           C3                         ret
29052                                           !BCC_EOS
29053                                           ! 3809 }
29054                                           ! 3810 static Bit8u find_vga_entry(mode)
29055                                           ! 3811 Bit8
29056                                           ! 3811 u mode;
29057                       00007A31            _find_vga_entry:
29058                                           !BCC_EOS
29059                                           ! 3812 {
29060                                           ! 3813  Bit8u i,line=0xFF;
29061 7A31           55                         push	bp
29062 7A32           89E5                       mov	bp,sp
29063 7A34           4C                         dec	sp
29064 7A35           4C                         dec	sp
29065                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29066 7A36           B0                     FF  mov	al,#$FF
29067 7A38           8846         FE            mov	-2[bp],al
29068                                           !BCC_EOS
29069                                           ! 3814  for(i=0;i<=15;i++)
29070                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29071 7A3B           30C0                       xor	al,al
29072 7A3D           8846         FF            mov	-1[bp],al
29073                                           !BCC_EOS
29074                                           !BCC_EOS
29075                                           ! 3815   if(vga_modes[i].svgamode==mode)
29076 7A40           EB           23            jmp .287
29077                       00007A42            .288:
29078                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29079 7A42           8A46         FF            mov	al,-1[bp]
29080 7A45           30E4                       xor	ah,ah
29081 7A47           B1                     03  mov	cl,*3
29082 7A49           D3E0                       shl	ax,cl
29083 7A4B           89C3                       mov	bx,ax
29084                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29085 7A4D           8A87       01B6            mov	al,_vga_modes[bx]
29086 7A51           3A46         04            cmp	al,4[bp]
29087 7A54           75           08            jne 	.289
29088                       00007A56            .28A:
29089                                           ! 3816    {line=i;
29090                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29091 7A56           8A46         FF            mov	al,-1[bp]
29092 7A59           8846         FE            mov	-2[bp],al
29093                                           !BCC_EOS
29094                                           ! 3817     break;
29095 7A5C           EB           0E            jmp .285
29096                                           !BCC_EOS
29097                                           ! 3818    }
29098                                           ! 3819  return line;
29099                       00007A5E            .289:
29100                       00007A5E            .286:
29101                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29102 7A5E           8A46         FF            mov	al,-1[bp]
29103 7A61           40                         inc	ax
29104 7A62           8846         FF            mov	-1[bp],al
29105                       00007A65            .287:
29106                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29107 7A65           8A46         FF            mov	al,-1[bp]
29108 7A68           3C                     0F  cmp	al,*$F
29109 7A6A           76           D6            jbe	.288
29110                       00007A6C            .28B:
29111                       00007A6C            .285:
29112 7A6C           8A46         FE            mov	al,-2[bp]
29113 7A6F           89EC                       mov	sp,bp
29114 7A71           5D                         pop	bp
29115 7A72           C3                         ret
29116                                           !BCC_EOS
29117                                           ! 3820 }
29118                                           ! 3821 static void memsetb(seg,offset,value,count)
29119                                           ! Register BX used in function find_vga_entry
29120                                           ! 3822   Bit16u seg;
29121                       00007A73            _memsetb:
29122                                           !BCC_EOS
29123                                           ! 3823   Bit16u offset;
29124                                           !BCC_EOS
29125                                           ! 3824   Bit16u value;
29126                                           !BCC_EOS
29127                                           ! 3825   Bit16u count;
29128                                           !BCC_EOS
29129                                           ! 3826 {
29130                                           ! 3827 #asm
29131                                           !BCC_ASM
29132                       00000008            _memsetb.count	set	8
29133                       00000002            _memsetb.seg	set	2
29134                       00000006            _memsetb.value	set	6
29135                       00000004            _memsetb.offset	set	4
29136 7A73           55                           push bp
29137 7A74           89E5                         mov bp, sp
29138 7A76           50                             push ax
29139 7A77           51                             push cx
29140 7A78           06                             push es
29141 7A79           57                             push di
29142 7A7A           8B4E         0A                mov cx, 10[bp] ; count
29143 7A7D           83F9                   00      cmp cx, #0x00
29144 7A80           74           10                je memsetb_end
29145 7A82           8B46         04                mov ax, 4[bp] ; segment
29146 7A85           8EC0                           mov es, ax
29147 7A87           8B46         06                mov ax, 6[bp] ; offset
29148 7A8A           89C7                           mov di, ax
29149 7A8C           8A46         08                mov al, 8[bp] ; value
29150 7A8F           FC                             cld
29151 7A90           F3                             rep
29152 7A91           AA                              stosb
29153                       00007A92            memsetb_end:
29154 7A92           5F                             pop di
29155 7A93           07                             pop es
29156 7A94           59                             pop cx
29157 7A95           58                             pop ax
29158 7A96           5D                           pop bp
29159                                           ! 3851 endasm
29160                                           !BCC_ENDASM
29161                                           ! 3852 }
29162 7A97           C3                         ret
29163                                           ! 3853 static void memsetw(seg,offset,value,count)
29164                                           ! 3854   Bit16u seg;
29165                       00007A98            _memsetw:
29166                                           !BCC_EOS
29167                                           ! 3855   Bit16u offset;
29168                                           !BCC_EOS
29169                                           ! 3856   Bit16u value;
29170                                           !BCC_EOS
29171                                           ! 3857   Bit16u count;
29172                                           !BCC_EOS
29173                                           ! 3858 {
29174                                           ! 3859 #asm
29175                                           !BCC_ASM
29176                       00000008            _memsetw.count	set	8
29177                       00000002            _memsetw.seg	set	2
29178                       00000006            _memsetw.value	set	6
29179                       00000004            _memsetw.offset	set	4
29180 7A98           55                           push bp
29181 7A99           89E5                         mov bp, sp
29182 7A9B           50                             push ax
29183 7A9C           51                             push cx
29184 7A9D           06                             push es
29185 7A9E           57                             push di
29186 7A9F           8B4E         0A                mov cx, 10[bp] ; count
29187 7AA2           83F9                   00      cmp cx, #0x00
29188 7AA5           74           10                je memsetw_end
29189 7AA7           8B46         04                mov ax, 4[bp] ; segment
29190 7AAA           8EC0                           mov es, ax
29191 7AAC           8B46         06                mov ax, 6[bp] ; offset
29192 7AAF           89C7                           mov di, ax
29193 7AB1           8B46         08                mov ax, 8[bp] ; value
29194 7AB4           FC                             cld
29195 7AB5           F3                             rep
29196 7AB6           AB                              stosw
29197                       00007AB7            memsetw_end:
29198 7AB7           5F                             pop di
29199 7AB8           07                             pop es
29200 7AB9           59                             pop cx
29201 7ABA           58                             pop ax
29202 7ABB           5D                           pop bp
29203                                           ! 3883 endasm
29204                                           !BCC_ENDASM
29205                                           ! 3884 }
29206 7ABC           C3                         ret
29207                                           ! 3885 static void memcpyb(dseg,doffset,sseg,soffset,count)
29208                                           ! 3886   Bit16u dseg;
29209                       00007ABD            _memcpyb:
29210                                           !BCC_EOS
29211                                           ! 3887   Bit16u doffset;
29212                                           !BCC_EOS
29213                                           ! 3888   Bit16u sseg;
29214                                           !BCC_EOS
29215                                           ! 3889   Bit16u soffset;
29216                                           !BCC_EOS
29217                                           ! 3890   Bit16u count;
29218                                           !BCC_EOS
29219                                           ! 3891 {
29220                                           ! 3892 #asm
29221                                           !BCC_ASM
29222                       0000000A            _memcpyb.count	set	$A
29223                       00000006            _memcpyb.sseg	set	6
29224                       00000008            _memcpyb.soffset	set	8
29225                       00000002            _memcpyb.dseg	set	2
29226                       00000004            _memcpyb.doffset	set	4
29227 7ABD           55                           push bp
29228 7ABE           89E5                         mov bp, sp
29229 7AC0           50                             push ax
29230 7AC1           51                             push cx
29231 7AC2           06                             push es
29232 7AC3           57                             push di
29233 7AC4           1E                             push ds
29234 7AC5           56                             push si
29235 7AC6           8B4E         0C                mov cx, 12[bp] ; count
29236 7AC9           83F9                   00      cmp cx, #0x0000
29237 7ACC           74           17                je memcpyb_end
29238 7ACE           8B46         04                mov ax, 4[bp] ; dsegment
29239 7AD1           8EC0                           mov es, ax
29240 7AD3           8B46         06                mov ax, 6[bp] ; doffset
29241 7AD6           89C7                           mov di, ax
29242 7AD8           8B46         08                mov ax, 8[bp] ; ssegment
29243 7ADB           8ED8                           mov ds, ax
29244 7ADD           8B46         0A                mov ax, 10[bp] ; soffset
29245 7AE0           89C6                           mov si, ax
29246 7AE2           FC                             cld
29247 7AE3           F3                             rep
29248 7AE4           A4                              movsb
29249                       00007AE5            memcpyb_end:
29250 7AE5           5E                             pop si
29251 7AE6           1F                             pop ds
29252 7AE7           5F                             pop di
29253 7AE8           07                             pop es
29254 7AE9           59                             pop cx
29255 7AEA           58                             pop ax
29256 7AEB           5D                           pop bp
29257                                           ! 3923 endasm
29258                                           !BCC_ENDASM
29259                                           ! 3924 }
29260 7AEC           C3                         ret
29261                                           ! 3925 static void memcpyw(dseg,doffset,sseg,soffset,count)
29262                                           ! 3926   Bit16u dseg;
29263                       00007AED            _memcpyw:
29264                                           !BCC_EOS
29265                                           ! 3927   Bit16u doffset;
29266                                           !BCC_EOS
29267                                           ! 3928   Bit16u sseg;
29268                                           !BCC_EOS
29269                                           ! 3929   Bit16u soffset;
29270                                           !BCC_EOS
29271                                           ! 3930   Bit16u count;
29272                                           !BCC_EOS
29273                                           ! 3931 {
29274                                           ! 3932 #asm
29275                                           !BCC_ASM
29276                       0000000A            _memcpyw.count	set	$A
29277                       00000006            _memcpyw.sseg	set	6
29278                       00000008            _memcpyw.soffset	set	8
29279                       00000002            _memcpyw.dseg	set	2
29280                       00000004            _memcpyw.doffset	set	4
29281 7AED           55                           push bp
29282 7AEE           89E5                         mov bp, sp
29283 7AF0           50                             push ax
29284 7AF1           51                             push cx
29285 7AF2           06                             push es
29286 7AF3           57                             push di
29287 7AF4           1E                             push ds
29288 7AF5           56                             push si
29289 7AF6           8B4E         0C                mov cx, 12[bp] ; count
29290 7AF9           83F9                   00      cmp cx, #0x0000
29291 7AFC           74           17                je memcpyw_end
29292 7AFE           8B46         04                mov ax, 4[bp] ; dsegment
29293 7B01           8EC0                           mov es, ax
29294 7B03           8B46         06                mov ax, 6[bp] ; doffset
29295 7B06           89C7                           mov di, ax
29296 7B08           8B46         08                mov ax, 8[bp] ; ssegment
29297 7B0B           8ED8                           mov ds, ax
29298 7B0D           8B46         0A                mov ax, 10[bp] ; soffset
29299 7B10           89C6                           mov si, ax
29300 7B12           FC                             cld
29301 7B13           F3                             rep
29302 7B14           A5                              movsw
29303                       00007B15            memcpyw_end:
29304 7B15           5E                             pop si
29305 7B16           1F                             pop ds
29306 7B17           5F                             pop di
29307 7B18           07                             pop es
29308 7B19           59                             pop cx
29309 7B1A           58                             pop ax
29310 7B1B           5D                           pop bp
29311                                           ! 3963 endasm
29312                                           !BCC_ENDASM
29313                                           ! 3964 }
29314 7B1C           C3                         ret
29315                                           ! 3965 static Bit8u
29316                                           ! 3966 read_byte(seg, offset)
29317                                           ! 3967   Bit16u seg;
29318                       00007B1D            _read_byte:
29319                                           !BCC_EOS
29320                                           ! 3968   Bit16u offset;
29321                                           !BCC_EOS
29322                                           ! 3969 {
29323                                           ! 3970 #asm
29324                                           !BCC_ASM
29325                       00000002            _read_byte.seg	set	2
29326                       00000004            _read_byte.offset	set	4
29327 7B1D           55                           push bp
29328 7B1E           89E5                         mov bp, sp
29329 7B20           53                             push bx
29330 7B21           1E                             push ds
29331 7B22           8B46         04                mov ax, 4[bp] ; segment
29332 7B25           8ED8                           mov ds, ax
29333 7B27           8B5E         06                mov bx, 6[bp] ; offset
29334 7B2A           8A07                           mov al, [bx]
29335                                               ;; al = return value (byte)
29336 7B2C           1F                             pop ds
29337 7B2D           5B                             pop bx
29338 7B2E           5D                           pop bp
29339                                           ! 3983 endasm
29340                                           !BCC_ENDASM
29341                                           ! 3984 }
29342 7B2F           C3                         ret
29343                                           ! 3985 static Bit16u
29344                                           ! 3986 read_word(seg, offset)
29345                                           ! 3987   Bit16u seg;
29346                       00007B30            _read_word:
29347                                           !BCC_EOS
29348                                           ! 3988   Bit16u offset;
29349                                           !BCC_EOS
29350                                           ! 3989 {
29351                                           ! 3990 #asm
29352                                           !BCC_ASM
29353                       00000002            _read_word.seg	set	2
29354                       00000004            _read_word.offset	set	4
29355 7B30           55                           push bp
29356 7B31           89E5                         mov bp, sp
29357 7B33           53                             push bx
29358 7B34           1E                             push ds
29359 7B35           8B46         04                mov ax, 4[bp] ; segment
29360 7B38           8ED8                           mov ds, ax
29361 7B3A           8B5E         06                mov bx, 6[bp] ; offset
29362 7B3D           8B07                           mov ax, [bx]
29363                                               ;; ax = return value (word)
29364 7B3F           1F                             pop ds
29365 7B40           5B                             pop bx
29366 7B41           5D                           pop bp
29367                                           ! 4003 endasm
29368                                           !BCC_ENDASM
29369                                           ! 4004 }
29370 7B42           C3                         ret
29371                                           ! 4005 static void
29372                                           ! 4006 write_byte(seg, offset, data)
29373                                           ! 4007   Bit16u seg;
29374                       00007B43            _write_byte:
29375                                           !BCC_EOS
29376                                           ! 4008   Bit16u offset;
29377                                           !BCC_EOS
29378                                           ! 4009   Bit8u data;
29379                                           !BCC_EOS
29380                                           ! 4010 {
29381                                           ! 4011 #asm
29382                                           !BCC_ASM
29383                       00000002            _write_byte.seg	set	2
29384                       00000006            _write_byte.data	set	6
29385                       00000004            _write_byte.offset	set	4
29386 7B43           55                           push bp
29387 7B44           89E5                         mov bp, sp
29388 7B46           50                             push ax
29389 7B47           53                             push bx
29390 7B48           1E                             push ds
29391 7B49           8B46         04                mov ax, 4[bp] ; segment
29392 7B4C           8ED8                           mov ds, ax
29393 7B4E           8B5E         06                mov bx, 6[bp] ; offset
29394 7B51           8A46         08                mov al, 8[bp] ; data byte
29395 7B54           8807                           mov [bx], al ; write data byte
29396 7B56           1F                             pop ds
29397 7B57           5B                             pop bx
29398 7B58           58                             pop ax
29399 7B59           5D                           pop bp
29400                                           ! 4026 endasm
29401                                           !BCC_ENDASM
29402                                           ! 4027 }
29403 7B5A           C3                         ret
29404                                           ! 4028 static void
29405                                           ! 4029 write_word(seg, offset, data)
29406                                           ! 4030   Bit16u seg;
29407                       00007B5B            _write_word:
29408                                           !BCC_EOS
29409                                           ! 4031   Bit16u offset;
29410                                           !BCC_EOS
29411                                           ! 4032   Bit16u data;
29412                                           !BCC_EOS
29413                                           ! 4033 {
29414                                           ! 4034 #asm
29415                                           !BCC_ASM
29416                       00000002            _write_word.seg	set	2
29417                       00000006            _write_word.data	set	6
29418                       00000004            _write_word.offset	set	4
29419 7B5B           55                           push bp
29420 7B5C           89E5                         mov bp, sp
29421 7B5E           50                             push ax
29422 7B5F           53                             push bx
29423 7B60           1E                             push ds
29424 7B61           8B46         04                mov ax, 4[bp] ; segment
29425 7B64           8ED8                           mov ds, ax
29426 7B66           8B5E         06                mov bx, 6[bp] ; offset
29427 7B69           8B46         08                mov ax, 8[bp] ; data word
29428 7B6C           8907                           mov [bx], ax ; write data word
29429 7B6E           1F                             pop ds
29430 7B6F           5B                             pop bx
29431 7B70           58                             pop ax
29432 7B71           5D                           pop bp
29433                                           ! 4049 endasm
29434                                           !BCC_ENDASM
29435                                           ! 4050 }
29436 7B72           C3                         ret
29437                                           ! 4051  Bit8u
29438                                           ! 4052 inb(port)
29439                                           ! 4053   Bit16u port;
29440                                           export	_inb
29441                       00007B73            _inb:
29442                                           !BCC_EOS
29443                                           ! 4054 {
29444                                           ! 4055 #asm
29445                                           !BCC_ASM
29446                       00000002            _inb.port	set	2
29447 7B73           55                           push bp
29448 7B74           89E5                         mov bp, sp
29449 7B76           52                             push dx
29450 7B77           8B56         04                mov dx, 4[bp]
29451 7B7A           EC                             in al, dx
29452 7B7B           5A                             pop dx
29453 7B7C           5D                           pop bp
29454                                           ! 4063 endasm
29455                                           !BCC_ENDASM
29456                                           ! 4064 }
29457 7B7D           C3                         ret
29458                                           ! 4065   Bit16u
29459                                           ! 4066 inw(port)
29460                                           ! 4067   Bit16u port;
29461                                           export	_inw
29462                       00007B7E            _inw:
29463                                           !BCC_EOS
29464                                           ! 4068 {
29465                                           ! 4069 #asm
29466                                           !BCC_ASM
29467                       00000002            _inw.port	set	2
29468 7B7E           55                           push bp
29469 7B7F           89E5                         mov bp, sp
29470 7B81           52                             push dx
29471 7B82           8B56         04                mov dx, 4[bp]
29472 7B85           ED                             in ax, dx
29473 7B86           5A                             pop dx
29474 7B87           5D                           pop bp
29475                                           ! 4077 endasm
29476                                           !BCC_ENDASM
29477                                           ! 4078 }
29478 7B88           C3                         ret
29479                                           ! 4079   void
29480                                           ! 4080 outb(port, val)
29481                                           ! 4081   Bit16u port;
29482                                           export	_outb
29483                       00007B89            _outb:
29484                                           !BCC_EOS
29485                                           ! 4082   Bit8u val;
29486                                           !BCC_EOS
29487                                           ! 4083 {
29488                                           ! 4084 #asm
29489                                           !BCC_ASM
29490                       00000004            _outb.val	set	4
29491                       00000002            _outb.port	set	2
29492 7B89           55                           push bp
29493 7B8A           89E5                         mov bp, sp
29494 7B8C           50                             push ax
29495 7B8D           52                             push dx
29496 7B8E           8B56         04                mov dx, 4[bp]
29497 7B91           8A46         06                mov al, 6[bp]
29498 7B94           EE                             out dx, al
29499 7B95           5A                             pop dx
29500 7B96           58                             pop ax
29501 7B97           5D                           pop bp
29502                                           ! 4095 endasm
29503                                           !BCC_ENDASM
29504                                           ! 4096 }
29505 7B98           C3                         ret
29506                                           ! 4097   void
29507                                           ! 4098 outw(port, val)
29508                                           ! 4099   Bit16u port;
29509                                           export	_outw
29510                       00007B99            _outw:
29511                                           !BCC_EOS
29512                                           ! 4100   Bit16u val;
29513                                           !BCC_EOS
29514                                           ! 4101 {
29515                                           ! 4102 #asm
29516                                           !BCC_ASM
29517                       00000004            _outw.val	set	4
29518                       00000002            _outw.port	set	2
29519 7B99           55                           push bp
29520 7B9A           89E5                         mov bp, sp
29521 7B9C           50                             push ax
29522 7B9D           52                             push dx
29523 7B9E           8B56         04                mov dx, 4[bp]
29524 7BA1           8B46         06                mov ax, 6[bp]
29525 7BA4           EF                             out dx, ax
29526 7BA5           5A                             pop dx
29527 7BA6           58                             pop ax
29528 7BA7           5D                           pop bp
29529                                           ! 4113 endasm
29530                                           !BCC_ENDASM
29531                                           ! 4114 }
29532 7BA8           C3                         ret
29533                                           ! 4115 Bit16u get_SS()
29534                                           ! 4116 {
29535                                           export	_get_SS
29536                       00007BA9            _get_SS:
29537                                           ! 4117 #asm
29538                                           !BCC_ASM
29539 7BA9           8CD0                         mov ax, ss
29540                                           ! 4119 endasm
29541                                           !BCC_ENDASM
29542                                           ! 4120 }
29543 7BAB           C3                         ret
29544                                           ! 4121 void printf(s)
29545                                           ! 4122   Bit8u *s;
29546                                           export	_printf
29547                       00007BAC            _printf:
29548                                           !BCC_EOS
29549                                           ! 4123 {
29550                                           ! 4124   Bit8u c, format_char;
29551                                           !BCC_EOS
29552                                           ! 4125   Boolean in_format;
29553                                           !BCC_EOS
29554                                           ! 4126   unsigned format_width, i;
29555                                           !BCC_EOS
29556                                           ! 4127   Bit16u *arg_ptr;
29557                                           !BCC_EOS
29558                                           ! 4128   Bit16u arg_seg, arg, digit, nibble, shift_count;
29559                                           !BCC_EOS
29560                                           ! 4129   arg_ptr = &s;
29561 7BAC           55                         push	bp
29562 7BAD           89E5                       mov	bp,sp
29563 7BAF           83C4                   EC  add	sp,*-$14
29564                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29565 7BB2           8D5E         04            lea	bx,4[bp]
29566 7BB5           895E         F6            mov	-$A[bp],bx
29567                                           !BCC_EOS
29568                                           ! 4130   arg_seg = get_SS();
29569                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
29570 7BB8           E8         FFEE            call	_get_SS
29571                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
29572 7BBB           8946         F4            mov	-$C[bp],ax
29573                                           !BCC_EOS
29574                                           ! 4131   in_format = 0;
29575                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29576 7BBE           31C0                       xor	ax,ax
29577 7BC0           8946         FC            mov	-4[bp],ax
29578                                           !BCC_EOS
29579                                           ! 4132   format_width = 0;
29580                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29581 7BC3           31C0                       xor	ax,ax
29582 7BC5           8946         FA            mov	-6[bp],ax
29583                                           !BCC_EOS
29584                                           ! 4133   while (c = read_byte(0xc000, s)) {
29585 7BC8           E9         0106            br 	.28D
29586                       00007BCB            .28E:
29587                                           ! 4134     if ( c == '%' ) {
29588                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
29589 7BCB           8A46         FF            mov	al,-1[bp]
29590 7BCE           3C                     25  cmp	al,*$25
29591 7BD0           75           0E            jne 	.28F
29592                       00007BD2            .290:
29593                                           ! 4135       in_format = 1;
29594                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
29595 7BD2           B8                   0001  mov	ax,*1
29596 7BD5           8946         FC            mov	-4[bp],ax
29597                                           !BCC_EOS
29598                                           ! 4136       format_width = 0;
29599                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29600 7BD8           31C0                       xor	ax,ax
29601 7BDA           8946         FA            mov	-6[bp],ax
29602                                           !BCC_EOS
29603                                           ! 4137       }
29604                                           ! 4138     else if (in_format) {
29605 7BDD           E9         00EA            br 	.291
29606                       00007BE0            .28F:
29607 7BE0           8B46         FC            mov	ax,-4[bp]
29608 7BE3           85C0                       test	ax,ax
29609 7BE5   7503    E9         00D0            beq 	.292
29610                       00007BEA            .293:
29611                                           ! 4139       if ( (c>='0') && (c<='9') ) {
29612                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29613 7BEA           8A46         FF            mov	al,-1[bp]
29614 7BED           3C                     30  cmp	al,*$30
29615 7BEF           72           28            jb  	.294
29616                       00007BF1            .296:
29617                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
29618 7BF1           8A46         FF            mov	al,-1[bp]
29619 7BF4           3C                     39  cmp	al,*$39
29620 7BF6           77           21            ja  	.294
29621                       00007BF8            .295:
29622                                           ! 4140         format_width = (format_width * 10) + (c - '0');
29623                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29624 7BF8           8A46         FF            mov	al,-1[bp]
29625 7BFB           30E4                       xor	ah,ah
29626 7BFD           05                   FFD0  add	ax,*-$30
29627 7C00           50                         push	ax
29628                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
29629 7C01           8B46         FA            mov	ax,-6[bp]
29630 7C04           89C2                       mov	dx,ax
29631 7C06           D1E0                       shl	ax,*1
29632 7C08           D1E0                       shl	ax,*1
29633 7C0A           01D0                       add	ax,dx
29634 7C0C           D1E0                       shl	ax,*1
29635                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
29636 7C0E           0346         EA            add	ax,-$16[bp]
29637 7C11           44                         inc	sp
29638 7C12           44                         inc	sp
29639                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
29640 7C13           8946         FA            mov	-6[bp],ax
29641                                           !BCC_EOS
29642                                           ! 4141         }
29643                                           ! 4142       else if (c == 'x') {
29644 7C16           E9         009F            br 	.297
29645                       00007C19            .294:
29646                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
29647 7C19           8A46         FF            mov	al,-1[bp]
29648 7C1C           3C                     78  cmp	al,*$78
29649 7C1E   7403    E9         0095            bne 	.298
29650                       00007C23            .299:
29651                                           ! 4143         arg_ptr++;
29652                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29653 7C23           8B5E         F6            mov	bx,-$A[bp]
29654 7C26           43                         inc	bx
29655 7C27           43                         inc	bx
29656 7C28           895E         F6            mov	-$A[bp],bx
29657                                           !BCC_EOS
29658                                           ! 4144         arg = read_word(arg_seg, arg_ptr);
29659                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29660 7C2B           FF76         F6            push	-$A[bp]
29661                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
29662 7C2E           FF76         F4            push	-$C[bp]
29663                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29664 7C31           E8         FEFC            call	_read_word
29665 7C34           83C4                   04  add	sp,*4
29666                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
29667 7C37           8946         F2            mov	-$E[bp],ax
29668                                           !BCC_EOS
29669                                           ! 4145         if (format_width == 0)
29670                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29671 7C3A           8B46         FA            mov	ax,-6[bp]
29672 7C3D           85C0                       test	ax,ax
29673 7C3F           75           06            jne 	.29A
29674                       00007C41            .29B:
29675                                           ! 4146           format_width = 4;
29676                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
29677 7C41           B8                   0004  mov	ax,*4
29678 7C44           8946         FA            mov	-6[bp],ax
29679                                           !BCC_EOS
29680                                           ! 4147         i = 0;
29681                       00007C47            .29A:
29682                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
29683 7C47           31C0                       xor	ax,ax
29684 7C49           8946         F8            mov	-8[bp],ax
29685                                           !BCC_EOS
29686                                           ! 4148         digit = format_width - 1;
29687                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
29688 7C4C           8B46         FA            mov	ax,-6[bp]
29689                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
29690 7C4F           48                         dec	ax
29691 7C50           8946         F0            mov	-$10[bp],ax
29692                                           !BCC_EOS
29693                                           ! 4149         for (i=0; i<format_width; i++) {
29694                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
29695 7C53           31C0                       xor	ax,ax
29696 7C55           8946         F8            mov	-8[bp],ax
29697                                           !BCC_EOS
29698                                           !BCC_EOS
29699 7C58           EB           51            jmp .29E
29700                       00007C5A            .29F:
29701                                           ! 4150           nibble = (arg >> (4 * digit)) & 0x000f;
29702                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
29703                                           ! Debug: expression subtree swapping
29704 7C5A           8B46         F0            mov	ax,-$10[bp]
29705 7C5D           D1E0                       shl	ax,*1
29706 7C5F           D1E0                       shl	ax,*1
29707                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
29708 7C61           89C3                       mov	bx,ax
29709 7C63           8B46         F2            mov	ax,-$E[bp]
29710 7C66           89D9                       mov	cx,bx
29711 7C68           D3E8                       shr	ax,cl
29712                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
29713 7C6A           24                     0F  and	al,*$F
29714                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
29715 7C6C           30E4                       xor	ah,ah
29716 7C6E           8946         EE            mov	-$12[bp],ax
29717                                           !BCC_EOS
29718                                           ! 4151           if (nibble <= 9)
29719                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
29720 7C71           8B46         EE            mov	ax,-$12[bp]
29721 7C74           3D                   0009  cmp	ax,*9
29722 7C77           77           13            ja  	.2A0
29723                       00007C79            .2A1:
29724                                           ! 4152             outb(0x0500, nibble + '0');
29725                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
29726 7C79           8B46         EE            mov	ax,-$12[bp]
29727                                           ! Debug: list unsigned int = ax+$30 (used reg = )
29728 7C7C           05                   0030  add	ax,*$30
29729 7C7F           50                         push	ax
29730                                           ! Debug: list int = const $500 (used reg = )
29731 7C80           B8                   0500  mov	ax,#$500
29732 7C83           50                         push	ax
29733                                           ! Debug: func () void = outb+0 (used reg = )
29734 7C84           E8         FF02            call	_outb
29735 7C87           83C4                   04  add	sp,*4
29736                                           !BCC_EOS
29737                                           ! 4153           else
29738                                           ! 4154             outb(0x0500, (nibble - 10) + 'A');
29739 7C8A           EB           11            jmp .2A2
29740                       00007C8C            .2A0:
29741                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
29742 7C8C           8B46         EE            mov	ax,-$12[bp]
29743                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
29744                                           ! Debug: list unsigned int = ax+$37 (used reg = )
29745 7C8F           05                   0037  add	ax,*$37
29746 7C92           50                         push	ax
29747                                           ! Debug: list int = const $500 (used reg = )
29748 7C93           B8                   0500  mov	ax,#$500
29749 7C96           50                         push	ax
29750                                           ! Debug: func () void = outb+0 (used reg = )
29751 7C97           E8         FEEF            call	_outb
29752 7C9A           83C4                   04  add	sp,*4
29753                                           !BCC_EOS
29754                                           ! 4155           digit--;
29755                       00007C9D            .2A2:
29756                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
29757 7C9D           8B46         F0            mov	ax,-$10[bp]
29758 7CA0           48                         dec	ax
29759 7CA1           8946         F0            mov	-$10[bp],ax
29760                                           !BCC_EOS
29761                                           ! 4156           }
29762                                           ! 4157         in_format = 0;
29763                       00007CA4            .29D:
29764                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
29765 7CA4           8B46         F8            mov	ax,-8[bp]
29766 7CA7           40                         inc	ax
29767 7CA8           8946         F8            mov	-8[bp],ax
29768                       00007CAB            .29E:
29769                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
29770 7CAB           8B46         F8            mov	ax,-8[bp]
29771 7CAE           3B46         FA            cmp	ax,-6[bp]
29772 7CB1           72           A7            jb 	.29F
29773                       00007CB3            .2A3:
29774                       00007CB3            .29C:
29775                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29776 7CB3           31C0                       xor	ax,ax
29777 7CB5           8946         FC            mov	-4[bp],ax
29778                                           !BCC_EOS
29779                                           ! 4158         }
29780                                           ! 4159       }
29781                       00007CB8            .298:
29782                       00007CB8            .297:
29783                                           ! 4160     else {
29784 7CB8           EB           10            jmp .2A4
29785                       00007CBA            .292:
29786                                           ! 4161       outb(0x0500, c);
29787                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
29788 7CBA           8A46         FF            mov	al,-1[bp]
29789 7CBD           30E4                       xor	ah,ah
29790 7CBF           50                         push	ax
29791                                           ! Debug: list int = const $500 (used reg = )
29792 7CC0           B8                   0500  mov	ax,#$500
29793 7CC3           50                         push	ax
29794                                           ! Debug: func () void = outb+0 (used reg = )
29795 7CC4           E8         FEC2            call	_outb
29796 7CC7           83C4                   04  add	sp,*4
29797                                           !BCC_EOS
29798                                           ! 4162       }
29799                                           ! 4163     s ++;
29800                       00007CCA            .2A4:
29801                       00007CCA            .291:
29802                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
29803 7CCA           8B5E         04            mov	bx,4[bp]
29804 7CCD           43                         inc	bx
29805 7CCE           895E         04            mov	4[bp],bx
29806                                           !BCC_EOS
29807                                           ! 4164     }
29808                                           ! 4165 }
29809                       00007CD1            .28D:
29810                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
29811 7CD1           FF76         04            push	4[bp]
29812                                           ! Debug: list unsigned int = const $C000 (used reg = )
29813 7CD4           B8                   C000  mov	ax,#$C000
29814 7CD7           50                         push	ax
29815                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29816 7CD8           E8         FE42            call	_read_byte
29817 7CDB           83C4                   04  add	sp,*4
29818                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
29819 7CDE           8846         FF            mov	-1[bp],al
29820 7CE1           84C0                       test	al,al
29821 7CE3   7403    E9         FEE3            bne 	.28E
29822                       00007CE8            .2A5:
29823                       00007CE8            .28C:
29824 7CE8           89EC                       mov	sp,bp
29825 7CEA           5D                         pop	bp
29826 7CEB           C3                         ret
29827                                           ! 4166 #asm
29828                                           !BCC_ASM
29829                       00000002            _printf.s	set	2
29830                                           ;; DATA_SEG_DEFS_HERE
29831                                           ! 4168 endasm
29832                                           !BCC_ENDASM
29833                                           ! 4169 #asm
29834                                           !BCC_ASM
29835                       00000002            _printf.s	set	2
29836 7CEC                        76            .ascii "vgabios ends here"
29837 7CFD                        00            .byte 0x00
29838                       00007CFE            vgabios_end:
29839 7CFE                        CB            .byte 0xCB
29840                                           ;; BLOCK_STRINGS_BEGIN
29841                                           ! 4175 endasm
29842                                           !BCC_ENDASM
29843                                           ! 4176 
29844                                           ! Register BX used in function printf
29845                                           
29846 7CFF                                      .bss
29847                                           
29848                                           ! 0 errors detected

Symbols:
..FFF5                      0 FFFC A   ..FFF6                      0 FFEE A   
..FFF7                      0 FFF4 A   ..FFF8                      0 FFF6 A   
..FFF9                      0 FFEE A   ..FFFA                      0 FFEE A   
..FFFB                      0 FFF2 A   ..FFFC                      0 FFF0 A   
..FFFD                      0 FFE8 A   ..FFFE                      0 FFE8 A   
..FFFF                      0 FFFE A   .1                          0 3AA2 A   
.10                         0 364C A   .100                        0 4D52 A   
.101                        0 4CDA A   .102                        0 4D17 A   
.103                        0 4CF1 A   .104                        0 4CEA A   
.105                        0 4D3F A   .106                        0 4D4B A   
.107                        0 4D49 A   .108                        0 4D5F A   
.109                        0 4D62 A   .10A                        0 4DF5 A   
.10B                        0 4DB0 A   .10C                        0 4D9E A   
.10D                        0 4D8C A   .10E                        0 4D85 A   
.10F                        0 4D7E A   .11                         0 367B A   
.110                        0 4F3C A   .111                        0 4E18 A   
.112                        0 4DFC A   .113                        0 4EAD A   
.114                        0 4E22 A   .115                        0 4EAA A   
.116                        0 4E99 A   .117                        0 4EA0 A   
.118                        0 4E2D A   .119                        0 4E71 A   
.11A                        0 4E4B A   .11B                        0 4E44 A   
.11C                        0 4E99 A   .11D                        0 4EAA A   
.11E                        0 4F3C A   .11F                        0 4F3C A   
.12                         0 366B A   .120                        0 4F28 A   
.121                        0 4F2F A   .122                        0 4EB7 A   
.123                        0 4EF4 A   .124                        0 4ECE A   
.125                        0 4EC7 A   .126                        0 4F1C A   
.127                        0 4F28 A   .128                        0 4F26 A   
.129                        0 4F3C A   .12A                        0 4F91 A   
.12B                        0 4F8D A   .12C                        0 5050 A   
.12D                        0 4FF2 A   .12E                        0 5050 A   
.12F                        0 5081 A   .13                         0 3680 A   
.131                        0 5077 A   .132                        0 505F A   
.133                        0 5067 A   .134                        0 506F A   
.135                        0 50EE A   .136                        0 50DE A   
.137                        0 50FC A   .138                        0 51B6 A   
.139                        0 51A4 A   .13A                        0 51AB A   
.13B                        0 5104 A   .13C                        0 51A4 A   
.13D                        0 5193 A   .13E                        0 519A A   
.13F                        0 5121 A   .14                         0 3697 A   
.140                        0 5183 A   .141                        0 516C A   
.142                        0 5193 A   .143                        0 51A4 A   
.144                        0 51B6 A   .145                        0 53CB A   
.146                        0 53BA A   .147                        0 53C1 A   
.148                        0 520C A   .149                        0 5230 A   
.14A                        0 5227 A   .14B                        0 52F2 A   
.14C                        0 523F A   .14D                        0 525A A   
.14E                        0 5248 A   .14F                        0 525F A   
.15                         0 36AB A   .150                        0 52DC A   
.151                        0 52CE A   .152                        0 52D5 A   
.153                        0 5266 A   .154                        0 52C4 A   
.155                        0 527D A   .156                        0 52A6 A   
.157                        0 5286 A   .158                        0 52C4 A   
.159                        0 52DC A   .15A                        0 53BA A   
.15B                        0 53BA A   .15C                        0 53B0 A   
.15D                        0 52F5 A   .15E                        0 5310 A   
.15F                        0 52FE A   .16                         0 36C4 A   
.160                        0 5315 A   .161                        0 5396 A   
.162                        0 5388 A   .163                        0 538F A   
.164                        0 531C A   .165                        0 537E A   
.166                        0 5333 A   .167                        0 535E A   
.168                        0 533C A   .169                        0 537E A   
.16A                        0 5396 A   .16B                        0 53BA A   
.16C                        0 53CB A   .16D                        0 54A0 A   
.16E                        0 548F A   .16F                        0 5496 A   
.17                         0 36DB A   .170                        0 5415 A   
.171                        0 548F A   .172                        0 5481 A   
.173                        0 5488 A   .174                        0 543B A   
.175                        0 545D A   .176                        0 5457 A   
.177                        0 548F A   .178                        0 54A0 A   
.179                        0 54D4 A   .17A                        0 54D0 A   
.17B                        0 55A2 A   .17C                        0 5538 A   
.17D                        0 5698 A   .17E                        0 5698 A   
.17F                        0 567F A   .18                         0 36E9 A   
.180                        0 55D7 A   .181                        0 5678 A   
.183                        0 5662 A   .184                        0 55EB A   
.185                        0 55EB A   .186                        0 5614 A   
.187                        0 563D A   .188                        0 5698 A   
.189                        0 568B A   .18A                        0 56CC A   
.18B                        0 56C8 A   .18C                        0 579B A   
.18D                        0 572D A   .18E                        0 5798 A   
.18F                        0 578C A   .19                         0 3724 A   
.190                        0 5763 A   .191                        0 5798 A   
.192                        0 5891 A   .193                        0 5891 A   
.194                        0 5878 A   .195                        0 57D0 A   
.196                        0 5871 A   .198                        0 585B A   
.199                        0 57E4 A   .19A                        0 57E4 A   
.19B                        0 580D A   .19C                        0 5836 A   
.19D                        0 5891 A   .19E                        0 5884 A   
.19F                        0 593D A   .1A                         0 375E A   
.1A0                        0 5939 A   .1A1                        0 5957 A   
.1A2                        0 5953 A   .1A3                        0 5BA8 A   
.1A5                        0 5B8F A   .1A6                        0 596C A   
.1A7                        0 596C A   .1A8                        0 59ED A   
.1A9                        0 59DF A   .1AA                        0 5A12 A   
.1AB                        0 5A44 A   .1AC                        0 5A28 A   
.1AD                        0 5A5E A   .1AE                        0 5A70 A   
.1AF                        0 5A67 A   .1B                         0 3773 A   
.1B0                        0 5ADC A   .1B1                        0 5A96 A   
.1B2                        0 5B1C A   .1B3                        0 5B30 A   
.1B4                        0 5B25 A   .1B5                        0 5B46 A   
.1B6                        0 5B5B A   .1B7                        0 5BE2 A   
.1B8                        0 5BDE A   .1B9                        0 5BFC A   
.1BA                        0 5BF8 A   .1BB                        0 5D93 A   
.1BD                        0 5D78 A   .1BE                        0 5C11 A   
.1BF                        0 5C11 A   .1C                         0 3793 A   
.1C0                        0 5CA5 A   .1C1                        0 5C97 A   
.1C2                        0 5C9E A   .1C3                        0 5C53 A   
.1C4                        0 5C97 A   .1C5                        0 5C83 A   
.1C6                        0 5CA5 A   .1C7                        0 5CA8 A   
.1C8                        0 5CD4 A   .1C9                        0 5CCB A   
.1CA                        0 5D1F A   .1CB                        0 5CFA A   
.1CC                        0 5D40 A   .1CD                        0 5D42 A   
.1CE                        0 5D71 A   .1CF                        0 5DD3 A   
.1D                         0 37B3 A   .1D0                        0 5DC2 A   
.1D1                        0 5DFD A   .1D2                        0 5DF9 A   
.1D3                        0 6061 A   .1D5                        0 603B A   
.1D6                        0 5E4E A   .1D7                        0 5E51 A   
.1D8                        0 5E5F A   .1D9                        0 5E58 A   
.1DA                        0 5E62 A   .1DB                        0 5E6A A   
.1DC                        0 5E74 A   .1DD                        0 5EC1 A   
.1DE                        0 5EB6 A   .1DF                        0 5E74 A   
.1E                         0 37D0 A   .1E0                        0 5EC1 A   
.1E1                        0 5EC4 A   .1E2                        0 5F5F A   
.1E3                        0 5EDD A   .1E4                        0 5F5C A   
.1E5                        0 5F39 A   .1E6                        0 6032 A   
.1E7                        0 6032 A   .1E9                        0 601C A   
.1EA                        0 5FA5 A   .1EB                        0 5FA5 A   
.1EC                        0 5FCE A   .1ED                        0 5FF7 A   
.1EE                        0 6077 A   .1EF                        0 606B A   
.1F                         0 37EB A   .1F0                        0 614E A   
.1F1                        0 6084 A   .1F2                        0 611E A   
.1F3                        0 609D A   .1F4                        0 6145 A   
.1F5                        0 64FC A   .1F6                        0 64EA A   
.1F7                        0 64F1 A   .1F8                        0 6433 A   
.1F9                        0 64A6 A   .1FA                        0 64A0 A   
.1FB                        0 64FC A   .1FC                        0 65DD A   
.1FD                        0 65CD A   .1FE                        0 65F5 A   
.1FF                        0 673A A   .20                         0 3808 A   
.200                        0 672B A   .201                        0 6732 A   
.202                        0 66EE A   .203                        0 673A A   
.204                        0 674F A   .205                        0 6744 A   
.206                        0 67D3 A   .207                        0 67C4 A   
.208                        0 67CB A   .209                        0 678A A   
.20A                        0 67D3 A   .20B                        0 67E6 A   
.20C                        0 67DD A   .20D                        0 6864 A   
.20E                        0 6855 A   .20F                        0 685C A   
.21                         0 3817 A   .210                        0 6821 A   
.211                        0 6864 A   .212                        0 6877 A   
.213                        0 686E A   .214                        0 6902 A   
.215                        0 68F3 A   .216                        0 68FA A   
.217                        0 68BF A   .218                        0 6902 A   
.219                        0 6915 A   .21A                        0 690C A   
.21B                        0 6A97 A   .21D                        0 6A72 A   
.21E                        0 692F A   .21F                        0 6966 A   
.22                         0 3960 A   .220                        0 699D A   
.221                        0 69C0 A   .222                        0 69E3 A   
.223                        0 6A06 A   .224                        0 6A28 A   
.225                        0 6A4A A   .226                        0 6A6C A   
.227                        0 6A95 A   .228                        0 6A85 A   
.229                        0 6C07 A   .22A                        0 6BF5 A   
.22B                        0 6C91 A   .22C                        0 6C85 A   
.22D                        0 6C36 A   .22E                        0 6C69 A   
.22F                        0 6C54 A   .230                        0 6C91 A   
.231                        0 6CA9 A   .232                        0 6C9A A   
.233                        0 6E34 A   .234                        0 6E2B A   
.235                        0 6E46 A   .236                        0 6E3D A   
.237                        0 6E58 A   .238                        0 6E4F A   
.239                        0 710C A   .23A                        0 6EA6 A   
.23B                        0 6F91 A   .23C                        0 6F82 A   
.23D                        0 6F89 A   .23E                        0 6F56 A   
.23F                        0 6F91 A   .24                         0 38FE A   
.240                        0 6FFF A   .241                        0 6FF0 A   
.242                        0 6FF7 A   .243                        0 6FC4 A   
.244                        0 6FFF A   .245                        0 7052 A   
.246                        0 7043 A   .247                        0 704A A   
.248                        0 7006 A   .249                        0 7052 A   
.24A                        0 709D A   .24B                        0 708E A   
.24C                        0 7095 A   .24D                        0 7062 A   
.24E                        0 709D A   .24F                        0 7388 A   
.25                         0 381D A   .250                        0 7118 A   
.251                        0 72B9 A   .252                        0 72AA A   
.253                        0 72B1 A   .254                        0 7282 A   
.255                        0 72B9 A   .256                        0 7449 A   
.257                        0 7394 A   .258                        0 7433 A   
.259                        0 7424 A   .25A                        0 742B A   
.25B                        0 7405 A   .25C                        0 7433 A   
.25D                        0 770C A   .25E                        0 7462 A   
.25F                        0 74D1 A   .26                         0 381D A   
.260                        0 74C2 A   .261                        0 74C9 A   
.262                        0 7495 A   .263                        0 74D1 A   
.264                        0 7556 A   .265                        0 7547 A   
.266                        0 754E A   .267                        0 7512 A   
.268                        0 7540 A   .269                        0 751A A   
.26A                        0 7556 A   .26B                        0 7578 A   
.26C                        0 7570 A   .26D                        0 7619 A   
.26E                        0 760A A   .26F                        0 7611 A   
.27                         0 3846 A   .270                        0 75D5 A   
.271                        0 7619 A   .272                        0 7672 A   
.273                        0 7663 A   .274                        0 766A A   
.275                        0 7636 A   .276                        0 7672 A   
.277                        0 7988 A   .278                        0 7718 A   
.279                        0 78B9 A   .27A                        0 78AA A   
.27B                        0 78B1 A   .27C                        0 7882 A   
.27D                        0 78B9 A   .27E                        0 7A2A A   
.27F                        0 7994 A   .28                         0 3846 A   
.280                        0 7A16 A   .281                        0 7A07 A   
.282                        0 7A0E A   .283                        0 79E7 A   
.284                        0 7A16 A   .285                        0 7A6C A   
.286                        0 7A5E A   .287                        0 7A65 A   
.288                        0 7A42 A   .289                        0 7A5E A   
.28A                        0 7A56 A   .28B                        0 7A6C A   
.28C                        0 7CE8 A   .28D                        0 7CD1 A   
.28E                        0 7BCB A   .28F                        0 7BE0 A   
.29                         0 385B A   .290                        0 7BD2 A   
.291                        0 7CCA A   .292                        0 7CBA A   
.293                        0 7BEA A   .294                        0 7C19 A   
.295                        0 7BF8 A   .296                        0 7BF1 A   
.297                        0 7CB8 A   .298                        0 7CB8 A   
.299                        0 7C23 A   .29A                        0 7C47 A   
.29B                        0 7C41 A   .29C                        0 7CB3 A   
.29D                        0 7CA4 A   .29E                        0 7CAB A   
.29F                        0 7C5A A   .2A                         0 385B A   
.2A0                        0 7C8C A   .2A1                        0 7C79 A   
.2A2                        0 7C9D A   .2A3                        0 7CB3 A   
.2A4                        0 7CCA A   .2A5                        0 7CE8 A   
.2B                         0 3870 A   .2C                         0 3870 A   
.2D                         0 3885 A   .2E                         0 3894 A   
.2F                         0 38B2 A   .3                          0 3A55 A   
.30                         0 38C0 A   .31                         0 38CE A   
.32                         0 38DC A   .33                         0 3963 A   
.34                         0 39B0 A   .36                         0 39A4 A   
.37                         0 3968 A   .38                         0 396D A   
.39                         0 398B A   .3A                         0 39B3 A   
.3B                         0 39E7 A   .3C                         0 3A03 A   
.3D                         0 3A47 A   .3F                         0 3A3B A   
.4                          0 3622 A   .40                         0 3A08 A   
.41                         0 3A17 A   .42                         0 3A28 A   
.43                         0 3AA2 A   .44                         0 3A68 A   
.45                         0 3AD4 A   .46                         0 3AD0 A   
.47                         0 3CA9 A   .48                         0 3B63 A   
.49                         0 3BD5 A   .4B                         0 3BC5 A   
.4C                         0 3BA3 A   .4D                         0 3BAB A   
.4E                         0 3BB3 A   .4F                         0 3BBB A   
.5                          0 367D A   .50                         0 3C93 A   
.51                         0 3C81 A   .52                         0 3C88 A   
.53                         0 3BDD A   .54                         0 3C5A A   
.55                         0 3BFE A   .56                         0 3C81 A   
.57                         0 3C93 A   .58                         0 3CA9 A   
.59                         0 3C9C A   .5A                         0 3CF9 A   
.5B                         0 3CEA A   .5C                         0 3CF1 A   
.5D                         0 3CB9 A   .5E                         0 3CF9 A   
.5F                         0 3D7E A   .60                         0 3D6F A   
.61                         0 3D76 A   .62                         0 3D37 A   
.63                         0 3D7E A   .64                         0 3DC5 A   
.65                         0 3DB6 A   .66                         0 3DBD A   
.67                         0 3D85 A   .68                         0 3DC5 A   
.69                         0 3DE0 A   .6A                         0 3DDB A   
.6B                         0 3DE3 A   .6C                         0 3E3A A   
.6D                         0 3E2B A   .6E                         0 3E32 A   
.6F                         0 3DFA A   .7                          0 3658 A   
.70                         0 3E3A A   .71                         0 3F3B A   
.72                         0 3E7A A   .73                         0 3EB6 A   
.74                         0 3E90 A   .75                         0 3F3B A   
.76                         0 3EE1 A   .77                         0 3EBD A   
.78                         0 3F3B A   .79                         0 4078 A   
.7A                         0 406A A   .7B                         0 409A A   
.7C                         0 408B A   .7D                         0 4092 A   
.7E                         0 407F A   .7F                         0 409A A   
.8                          0 3634 A   .80                         0 40C6 A   
.81                         0 40B8 A   .82                         0 412C A   
.84                         0 411D A   .85                         0 40DE A   
.86                         0 40F3 A   .87                         0 4107 A   
.88                         0 41FA A   .89                         0 41AA A   
.8A                         0 41A3 A   .8B                         0 419C A   
.8C                         0 4194 A   .8D                         0 41D3 A   
.8E                         0 41BE A   .8F                         0 41E7 A   
.9                          0 3640 A   .90                         0 425C A   
.91                         0 4258 A   .92                         0 4348 A   
.93                         0 4290 A   .94                         0 4380 A   
.95                         0 437C A   .96                         0 43D2 A   
.97                         0 43CE A   .98                         0 43FC A   
.99                         0 43F8 A   .9A                         0 4494 A   
.9B                         0 4426 A   .9C                         0 44B8 A   
.9D                         0 45E0 A   .9E                         0 45D1 A   
.9F                         0 45D8 A   .A                          0 3640 A   
.A0                         0 4595 A   .A1                         0 45E0 A   
.A2                         0 466B A   .A3                         0 465C A   
.A4                         0 4663 A   .A5                         0 4632 A   
.A6                         0 466B A   .A7                         0 478C A   
.A8                         0 477A A   .A9                         0 4781 A   
.AA                         0 46D9 A   .AB                         0 4738 A   
.AC                         0 46E2 A   .AD                         0 477A A   
.AE                         0 478C A   .AF                         0 4841 A   
.B                          0 3640 A   .B0                         0 4832 A   
.B1                         0 4839 A   .B2                         0 47C4 A   
.B3                         0 4805 A   .B4                         0 47CD A   
.B5                         0 4832 A   .B6                         0 4841 A   
.B7                         0 4857 A   .B8                         0 4853 A   
.B9                         0 4863 A   .BA                         0 485F A   
.BB                         0 488D A   .BC                         0 4889 A   
.BD                         0 48CA A   .BE                         0 48B9 A   
.BF                         0 48DB A   .C                          0 3640 A   
.C0                         0 48D4 A   .C1                         0 48EC A   
.C2                         0 48E5 A   .C3                         0 48FB A   
.C4                         0 48F6 A   .C5                         0 4B76 A   
.C6                         0 4923 A   .C7                         0 49AD A   
.C8                         0 4978 A   .C9                         0 4966 A   
.CA                         0 4954 A   .CB                         0 494D A   
.CC                         0 4946 A   .CD                         0 4B73 A   
.CE                         0 4A94 A   .CF                         0 49B7 A   
.D                          0 3640 A   .D0                         0 4A91 A   
.D1                         0 4A7D A   .D2                         0 4A84 A   
.D3                         0 49C2 A   .D4                         0 4A22 A   
.D5                         0 49E0 A   .D6                         0 49D9 A   
.D7                         0 4A7D A   .D8                         0 4A91 A   
.D9                         0 4B73 A   .DA                         0 4B73 A   
.DB                         0 4B5F A   .DC                         0 4B66 A   
.DD                         0 4A9F A   .DE                         0 4AF8 A   
.DF                         0 4AB6 A   .E                          0 3640 A   
.E0                         0 4AAF A   .E1                         0 4B53 A   
.E2                         0 4B5F A   .E3                         0 4B5D A   
.E4                         0 4B73 A   .E5                         0 4F55 A   
.E6                         0 4F55 A   .E8                         0 4F40 A   
.E9                         0 4BA8 A   .EA                         0 4BA8 A   
.EB                         0 4C3C A   .EC                         0 4BE7 A   
.ED                         0 4BD5 A   .EE                         0 4BC3 A   
.EF                         0 4BBC A   .F                          0 3640 A   
.F0                         0 4BB2 A   .F1                         0 4D5F A   
.F2                         0 4CD0 A   .F3                         0 4C46 A   
.F4                         0 4CCD A   .F5                         0 4CBC A   
.F6                         0 4CC3 A   .F7                         0 4C50 A   
.F8                         0 4C94 A   .F9                         0 4C6E A   
.FA                         0 4C67 A   .FB                         0 4CBC A   
.FC                         0 4CCD A   .FD                         0 4D5F A   
.FE                         0 4D5F A   .FF                         0 4D4B A   
_biosfn_alternate_prtsc     0 6AF8 A   _biosfn_enable_video_refre+ 0 6BD3 A   
_biosfn_get_cursor_pos      0 434C A   _biosfn_get_font_info       0 691E A   
_biosfn_load_gfx_8_14_char+ 0 691B A   _biosfn_load_gfx_8_16_char+ 0 691D A   
_biosfn_load_gfx_8_8_chars  0 6919 A   _biosfn_load_gfx_8_8_dd_ch+ 0 691C A   
_biosfn_load_gfx_user_char+ 0 691A A   _biosfn_load_text_8_14_pat  0 6753 A   
_biosfn_load_text_8_16_pat  0 6888 A   _biosfn_load_text_8_8_pat   0 67EA A   
_biosfn_load_text_user_pat  0 66B7 A   _biosfn_perform_gray_scale+ 0 640F A   
_biosfn_read_char_attr      0 4F59 A   _biosfn_read_pixel          0 5BAC A   
_biosfn_read_state_info     0 6CE0 A   _biosfn_read_video_state_s+ 0 6E5F A   
_biosfn_read_video_state_s+ 0 6E18 A   _biosfn_restore_video_stat+ 0 7450 A   
_biosfn_save_video_state    0 6E83 A   _biosfn_scroll              0 4845 A   
_biosfn_set_active_page     0 43C1 A   _biosfn_set_cursor_pos      0 424B A   
_biosfn_set_cursor_shape    0 4130 A   _biosfn_set_video_mode      0 3AA4 A   
_biosfn_switch_video_inter+ 0 6BD2 A   _biosfn_write_char_attr     0 54A4 A   
_biosfn_write_char_only     0 569C A   _biosfn_write_pixel         0 590D A   
_biosfn_write_string        0 6BD4 A   _biosfn_write_teletype      0 5DB5 A   
_dac_regs                   0 0246 A   _display_info               0 35D0 A   
_display_splash_screen      0 35CF A   _display_string             0 35EE A   
_find_vga_entry             0 7A31 A   _get_SS                     0 7BA9 A E 
_get_font_access            0 6517 A   _inb                        0 7B73 A E 
_int10_func                 0 3615 A   _inw                        0 7B7E A E 
_line_to_vpti               0 0236 A   _memcpyb                    0 7ABD A   
_memcpyw                    0 7AED A   _memsetb                    0 7A73 A   
_memsetw                    0 7A98 A   _outb                       0 7B89 A E 
_outw                       0 7B99 A E _palette0                   0 09CA A   
_palette1                   0 0A8A A   _palette2                   0 0B4A A   
_palette3                   0 0C0A A   _printf                     0 7BAC A E 
_read_byte                  0 7B1D A   _read_word                  0 7B30 A   
_release_font_access        0 653A A   _set_scan_lines             0 656E A   
_static_functionality       0 0F0A A   _vga_modes                  0 01B6 A   
_vgafont14                  0 171A A   _vgafont14alt               0 351A A   
_vgafont16                  0 251A A   _vgafont16alt               0 351B A   
_vgafont8                   0 0F1A A   _vgamem_copy_cga            0 467D A   
_vgamem_copy_pl4            0 4530 A   _vgamem_fill_cga            0 4790 A   
_vgamem_fill_pl4            0 45F2 A   _video_param_table          0 024A A   
_video_save_pointer_table   0 35B3 A   _write_byte                 0 7B43 A   
_write_gfx_char_cga         0 51C9 A   _write_gfx_char_lin         0 53CF A   
_write_gfx_char_pl4         0 5054 A   _write_word                 0 7B5B A   
biosfn_enable_cursor_emula+ 0 6BB0 A   biosfn_enable_default_pale+ 0 6B4C A   
biosfn_enable_grayscale_su+ 0 6B8C A   biosfn_enable_video_addres+ 0 6B6E A   
biosfn_get_all_palette_reg  0 62B4 A   biosfn_get_ega_info         0 6AD5 A   
biosfn_get_single_palette_+ 0 6282 A   biosfn_get_video_mode       0 617F A   
biosfn_group_0B             0 5895 A   biosfn_group_10             0 61A6 A   
biosfn_group_1A             0 6CAD A   biosfn_read_all_dac_reg     0 6394 A   
biosfn_read_display_code    0 6CB6 A   biosfn_read_overscan_borde+ 0 62A6 A   
biosfn_read_pel_mask        0 63C7 A   biosfn_read_single_dac_reg  0 6379 A   
biosfn_read_video_dac_stat+ 0 63D2 A   biosfn_select_vert_res      0 6AF9 A   
biosfn_select_video_dac_co+ 0 6336 A   biosfn_set_all_dac_reg      0 630E A   
biosfn_set_all_palette_reg  0 622F A   biosfn_set_border_color     0 58A0 A   
biosfn_set_display_code     0 6CCB A   biosfn_set_overscan_border+ 0 6227 A   
biosfn_set_palette          0 58DF A   biosfn_set_pel_mask         0 63BC A   
biosfn_set_single_dac_reg   0 62F5 A   biosfn_set_single_palette_+ 0 620D A   
biosfn_set_text_block_spec+ 0 687B A   biosfn_toggle_intensity     0 625C A   
get_dac_16_page             0 6402 A   get_palette_loop            0 62BC A   
idiv_u                      0 6569 A   init_bios_area              0 357B A   
init_vga_card               0 351C A   int10_end                   0 01B4 A   
int10_group_10_unknown      0 620C A   int10_normal                0 01A6 A   
int10_test_0B               0 0142 A   int10_test_1001             0 61AC A   
int10_test_1002             0 61B2 A   int10_test_1003             0 61B8 A   
int10_test_1007             0 61BF A   int10_test_1008             0 61C6 A   
int10_test_1009             0 61CD A   int10_test_1010             0 61D4 A   
int10_test_1012             0 61DB A   int10_test_1013             0 61E2 A   
int10_test_1015             0 61E9 A   int10_test_1017             0 61F0 A   
int10_test_1018             0 61F7 A   int10_test_1019             0 61FE A   
int10_test_101A             0 6205 A   int10_test_101B             0 0197 A   
int10_test_1103             0 014C A   int10_test_12               0 0156 A   
int10_test_1A               0 0138 A   int10_test_BL30             0 0165 A   
int10_test_BL31             0 016F A   int10_test_BL32             0 0179 A   
int10_test_BL33             0 0183 A   int10_test_BL34             0 018D A   
memcpyb_end                 0 7AE5 A   memcpyw_end                 0 7B15 A   
memsetb_end                 0 7A92 A   memsetw_end                 0 7AB7 A   
mode_ega_color              0 6AF5 A   msg_vga_init                0 3538 A   
no_actl_reg1                0 6226 A   no_actl_reg2                0 62A5 A   
read_dac_loop               0 63A5 A   set_actl_normal             0 6372 A   
set_cga_palette_loop        0 58EC A   set_dac_16_page             0 636C A   
set_dac_loop                0 631F A   set_dac_page                0 6359 A   
set_intensity_loop          0 58BE A   set_low_border              0 58B8 A   
set_palette_loop            0 623E A   set_retcode                 0 6B45 A   
set_vert_res                0 6B3B A   vert_res_200                0 6B31 A   
vert_res_350                0 6B27 A   vert_res_400                0 6B1B A   
vgabios_copyright           0 0052 A   vgabios_date                0 0044 A   
vgabios_end                 0 7CFE A   vgabios_entry_point         0 0003 A   
vgabios_init_func           0 0109 A   vgabios_int10_handler       0 012D A   
vgabios_license             0 007E A   vgabios_name                0 0022 A   
vgabios_start               0 0000 A   vgabios_version             0 0038 A   
vgabios_website             0 00B3 A   

00000 errors
00000 warnings
