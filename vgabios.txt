00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios_.c"
00003                                           ! 1 typedef unsigned char Bit8u;
00004                                           !BCC_EOS
00005                                           ! 2 typedef unsigned short Bit16u;
00006                                           !BCC_EOS
00007                                           ! 3 typedef unsigned long Bit32u;
00008                                           !BCC_EOS
00009                                           ! 4 typedef unsigned short Boolean;
00010                                           !BCC_EOS
00011                                           ! 5 void dispi_set_enable(enable);
00012                                           !BCC_EOS
00013                                           ! 6 Boolean vbe_has_vbe_display();
00014                                           !BCC_EOS
00015                                           ! 7 void vbe_biosfn_return_controller_information(AX, ES, DI);
00016                                           !BCC_EOS
00017                                           ! 8 void vbe_biosfn_return_mode_information(AX, CX, ES, DI);
00018                                           !BCC_EOS
00019                                           ! 9 void vbe_biosfn_set_mode(AX, BX, ES, DI);
00020                                           !BCC_EOS
00021                                           ! 10 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX);
00022                                           !BCC_EOS
00023                                           ! 11 void vbe_biosfn_set_get_palette_data(AX);
00024                                           !BCC_EOS
00025                                           ! 12 void vbe_biosfn_return_protected_mode_interface(AX);
00026                                           !BCC_EOS
00027                                           ! 13 typedef struct VbeInfoBlock
00028                                           ! 14 {
00029                                           ! 15    Bit8u VbeSignature[4];
00030                                           !BCC_EOS
00031                                           ! 16    Bit16u VbeVersion;
00032                                           !BCC_EOS
00033                                           ! 17    Bit16u OemStringPtr_Off;
00034                                           !BCC_EOS
00035                                           ! 18    Bit16u OemStringPtr_Seg;
00036                                           !BCC_EOS
00037                                           ! 19    Bit8u Capabilities[4];
00038                                           !BCC_EOS
00039                                           ! 20    Bit16u VideoModePtr_Off;
00040                                           !BCC_EOS
00041                                           ! 21    Bit16u VideoModePtr_Seg;
00042                                           !BCC_EOS
00043                                           ! 22    Bit16u TotalMemory;
00044                                           !BCC_EOS
00045                                           ! 23    Bit16u OemSoftwareRev;
00046                                           !BCC_EOS
00047                                           ! 24    Bit16u OemVendorNamePtr_Off;
00048                                           !BCC_EOS
00049                                           ! 25    Bit16u OemVendorNamePtr_Seg;
00050                                           !BCC_EOS
00051                                           ! 26    Bit16u OemProductNamePtr_Off;
00052                                           !BCC_EOS
00053                                           ! 27    Bit16u OemProductNamePtr_Seg;
00054                                           !BCC_EOS
00055                                           ! 28    Bit16u OemProductRevPtr_Off;
00056                                           !BCC_EOS
00057                                           ! 29    Bit16u OemProductRevPtr_Seg;
00058                                           !BCC_EOS
00059                                           ! 30    Bit16u Reserved[111];
00060                                           !BCC_EOS
00061                                           ! 31    Bit8u OemData[256];
00062                                           !BCC_EOS
00063                                           ! 32 } VbeInfoBlock;
00064                                           !BCC_EOS
00065                                           ! 33 typedef struct ModeInfoBlockCompact
00066                                           ! 34 {
00067                                           ! 35    Bit16u ModeAttributes;
00068                                           !BCC_EOS
00069                                           ! 36    Bit8u WinAAttributes;
00070                                           !BCC_EOS
00071                                           ! 37    Bit8u WinBAttributes;
00072                                           !BCC_EOS
00073                                           ! 38    Bit16u WinGranularity;
00074                                           !BCC_EOS
00075                                           ! 39    Bit16u WinSize;
00076                                           !BCC_EOS
00077                                           ! 40    Bit16u WinASegment;
00078                                           !BCC_EOS
00079                                           ! 41    Bit16u WinBSegment;
00080                                           !BCC_EOS
00081                                           ! 42    Bit32u WinFuncPtr;
00082                                           !BCC_EOS
00083                                           ! 43    Bit16u BytesPerScanLine;
00084                                           !BCC_EOS
00085                                           ! 44    Bit16u XResolution;
00086                                           !BCC_EOS
00087                                           ! 45    Bit16u YResolution;
00088                                           !BCC_EOS
00089                                           ! 46    Bit8u XCharSize;
00090                                           !BCC_EOS
00091                                           ! 47    Bit8u YCharSize;
00092                                           !BCC_EOS
00093                                           ! 48    Bit8u NumberOfPlanes;
00094                                           !BCC_EOS
00095                                           ! 49    Bit8u BitsPerPixel;
00096                                           !BCC_EOS
00097                                           ! 50    Bit8u NumberOfBanks;
00098                                           !BCC_EOS
00099                                           ! 51    Bit8u MemoryModel;
00100                                           !BCC_EOS
00101                                           ! 52    Bit8u BankSize;
00102                                           !BCC_EOS
00103                                           ! 53    Bit8u NumberOfImagePages;
00104                                           !BCC_EOS
00105                                           ! 54    Bit8u Reserved_page;
00106                                           !BCC_EOS
00107                                           ! 55    Bit8u RedMaskSize;
00108                                           !BCC_EOS
00109                                           ! 56    Bit8u RedFieldPosition;
00110                                           !BCC_EOS
00111                                           ! 57    Bit8u GreenMaskSize;
00112                                           !BCC_EOS
00113                                           ! 58    Bit8u GreenFieldPosition;
00114                                           !BCC_EOS
00115                                           ! 59    Bit8u BlueMaskSize;
00116                                           !BCC_EOS
00117                                           ! 60    Bit8u BlueFieldPosition;
00118                                           !BCC_EOS
00119                                           ! 61    Bit8u RsvdMaskSize;
00120                                           !BCC_EOS
00121                                           ! 62    Bit8u RsvdFieldPosition;
00122                                           !BCC_EOS
00123                                           ! 63    Bit8u DirectColorModeInfo;
00124                                           !BCC_EOS
00125                                           ! 64    Bit32u PhysBasePtr;
00126                                           !BCC_EOS
00127                                           ! 65    Bit32u OffScreenMemOffset;
00128                                           !BCC_EOS
00129                                           ! 66    Bit16u OffScreenMemSize;
00130                                           !BCC_EOS
00131                                           ! 67    Bit16u LinBytesPerScanLine;
00132                                           !BCC_EOS
00133                                           ! 68    Bit8u BnkNumberOfPages;
00134                                           !BCC_EOS
00135                                           ! 69    Bit8u LinNumberOfPages;
00136                                           !BCC_EOS
00137                                           ! 70    Bit8u LinRedMaskSize;
00138                                           !BCC_EOS
00139                                           ! 71    Bit8u LinRedFieldPosition;
00140                                           !BCC_EOS
00141                                           ! 72    Bit8u LinGreenMaskSize;
00142                                           !BCC_EOS
00143                                           ! 73    Bit8u LinGreenFieldPos
00144                                           ! 73 ition;
00145                                           !BCC_EOS
00146                                           ! 74    Bit8u LinBlueMaskSize;
00147                                           !BCC_EOS
00148                                           ! 75    Bit8u LinBlueFieldPosition;
00149                                           !BCC_EOS
00150                                           ! 76    Bit8u LinRsvdMaskSize;
00151                                           !BCC_EOS
00152                                           ! 77    Bit8u LinRsvdFieldPosition;
00153                                           !BCC_EOS
00154                                           ! 78    Bit32u MaxPixelClock;
00155                                           !BCC_EOS
00156                                           ! 79 } ModeInfoBlockCompact;
00157                                           !BCC_EOS
00158                                           ! 80 typedef struct ModeInfoBlock
00159                                           ! 81 {
00160                                           ! 82    Bit16u ModeAttributes;
00161                                           !BCC_EOS
00162                                           ! 83    Bit8u WinAAttributes;
00163                                           !BCC_EOS
00164                                           ! 84    Bit8u WinBAttributes;
00165                                           !BCC_EOS
00166                                           ! 85    Bit16u WinGranularity;
00167                                           !BCC_EOS
00168                                           ! 86    Bit16u WinSize;
00169                                           !BCC_EOS
00170                                           ! 87    Bit16u WinASegment;
00171                                           !BCC_EOS
00172                                           ! 88    Bit16u WinBSegment;
00173                                           !BCC_EOS
00174                                           ! 89    Bit32u WinFuncPtr;
00175                                           !BCC_EOS
00176                                           ! 90    Bit16u BytesPerScanLine;
00177                                           !BCC_EOS
00178                                           ! 91    Bit16u XResolution;
00179                                           !BCC_EOS
00180                                           ! 92    Bit16u YResolution;
00181                                           !BCC_EOS
00182                                           ! 93    Bit8u XCharSize;
00183                                           !BCC_EOS
00184                                           ! 94    Bit8u YCharSize;
00185                                           !BCC_EOS
00186                                           ! 95    Bit8u NumberOfPlanes;
00187                                           !BCC_EOS
00188                                           ! 96    Bit8u BitsPerPixel;
00189                                           !BCC_EOS
00190                                           ! 97    Bit8u NumberOfBanks;
00191                                           !BCC_EOS
00192                                           ! 98    Bit8u MemoryModel;
00193                                           !BCC_EOS
00194                                           ! 99    Bit8u BankSize;
00195                                           !BCC_EOS
00196                                           ! 100    Bit8u NumberOfImagePages;
00197                                           !BCC_EOS
00198                                           ! 101    Bit8u Reserved_page;
00199                                           !BCC_EOS
00200                                           ! 102    Bit8u RedMaskSize;
00201                                           !BCC_EOS
00202                                           ! 103    Bit8u RedFieldPosition;
00203                                           !BCC_EOS
00204                                           ! 104    Bit8u GreenMaskSize;
00205                                           !BCC_EOS
00206                                           ! 105    Bit8u GreenFieldPosition;
00207                                           !BCC_EOS
00208                                           ! 106    Bit8u BlueMaskSize;
00209                                           !BCC_EOS
00210                                           ! 107    Bit8u BlueFieldPosition;
00211                                           !BCC_EOS
00212                                           ! 108    Bit8u RsvdMaskSize;
00213                                           !BCC_EOS
00214                                           ! 109    Bit8u RsvdFieldPosition;
00215                                           !BCC_EOS
00216                                           ! 110    Bit8u DirectColorModeInfo;
00217                                           !BCC_EOS
00218                                           ! 111    Bit32u PhysBasePtr;
00219                                           !BCC_EOS
00220                                           ! 112    Bit32u OffScreenMemOffset;
00221                                           !BCC_EOS
00222                                           ! 113    Bit16u OffScreenMemSize;
00223                                           !BCC_EOS
00224                                           ! 114    Bit16u LinBytesPerScanLine;
00225                                           !BCC_EOS
00226                                           ! 115    Bit8u BnkNumberOfPages;
00227                                           !BCC_EOS
00228                                           ! 116    Bit8u LinNumberOfPages;
00229                                           !BCC_EOS
00230                                           ! 117    Bit8u LinRedMaskSize;
00231                                           !BCC_EOS
00232                                           ! 118    Bit8u LinRedFieldPosition;
00233                                           !BCC_EOS
00234                                           ! 119    Bit8u LinGreenMaskSize;
00235                                           !BCC_EOS
00236                                           ! 120    Bit8u LinGreenFieldPosition;
00237                                           !BCC_EOS
00238                                           ! 121    Bit8u LinBlueMaskSize;
00239                                           !BCC_EOS
00240                                           ! 122    Bit8u LinBlueFieldPosition;
00241                                           !BCC_EOS
00242                                           ! 123    Bit8u LinRsvdMaskSize;
00243                                           !BCC_EOS
00244                                           ! 124    Bit8u LinRsvdFieldPosition;
00245                                           !BCC_EOS
00246                                           ! 125    Bit32u MaxPixelClock;
00247                                           !BCC_EOS
00248                                           ! 126    Bit8u Reserved[189];
00249                                           !BCC_EOS
00250                                           ! 127 } ModeInfoBlock;
00251                                           !BCC_EOS
00252                                           ! 128 typedef struct ModeInfoListItem
00253                                           ! 129 {
00254                                           ! 130   Bit16u mode;
00255                                           !BCC_EOS
00256                                           ! 131   ModeInfoBlockCompact info;
00257                                           !BCC_EOS
00258                                           ! 132 } ModeInfoListItem;
00259                                           !BCC_EOS
00260                                           ! 133 static Bit8u read_byte();
00261                                           !BCC_EOS
00262                                           ! 134 static Bit16u read_word();
00263                                           !BCC_EOS
00264                                           ! 135 static void write_byte();
00265                                           !BCC_EOS
00266                                           ! 136 static void write_word();
00267                                           !BCC_EOS
00268                                           ! 137 static Bit8u inb();
00269                                           !BCC_EOS
00270                                           ! 138 static Bit16u inw();
00271                                           !BCC_EOS
00272                                           ! 139 static void outb();
00273                                           !BCC_EOS
00274                                           ! 140 static void outw();
00275                                           !BCC_EOS
00276                                           ! 141 static Bit16u get_SS();
00277                                           !BCC_EOS
00278                                           ! 142 static void printf();
00279                                           !BCC_EOS
00280                                           ! 143 static void unimplemented();
00281                                           !BCC_EOS
00282                                           ! 144 static void unknown();
00283                                           !BCC_EOS
00284                                           ! 145 static Bit8u find_vga_entry();
00285                                           !BCC_EOS
00286                                           ! 146 static void memsetb();
00287                                           !BCC_EOS
00288                                           ! 147 static void memsetw();
00289                                           !BCC_EOS
00290                                           ! 148 static void memcpyb();
00291                                           !BCC_EOS
00292                                           ! 149 static void memcpyw();
00293                                           !BCC_EOS
00294                                           ! 150 static void biosfn_set_video_mode();
00295                                           !BCC_EOS
00296                                           ! 151 static void biosfn_set_cursor_shape();
00297                                           !BCC_EOS
00298                                           ! 152 static void biosfn_set_cursor_pos();
00299                                           !BCC_EOS
00300                                           ! 153 static void biosfn_get_cursor_pos();
00301                                           !BCC_EOS
00302                                           ! 154 static void biosfn_set_active
00303                                           ! 154 _page();
00304                                           !BCC_EOS
00305                                           ! 155 static void biosfn_scroll();
00306                                           !BCC_EOS
00307                                           ! 156 static void biosfn_read_char_attr();
00308                                           !BCC_EOS
00309                                           ! 157 static void biosfn_write_char_attr();
00310                                           !BCC_EOS
00311                                           ! 158 static void biosfn_write_char_only();
00312                                           !BCC_EOS
00313                                           ! 159 static void biosfn_write_pixel();
00314                                           !BCC_EOS
00315                                           ! 160 static void biosfn_read_pixel();
00316                                           !BCC_EOS
00317                                           ! 161 static void biosfn_write_teletype();
00318                                           !BCC_EOS
00319                                           ! 162 static void biosfn_perform_gray_scale_summing();
00320                                           !BCC_EOS
00321                                           ! 163 static void biosfn_load_text_user_pat();
00322                                           !BCC_EOS
00323                                           ! 164 static void biosfn_load_text_8_14_pat();
00324                                           !BCC_EOS
00325                                           ! 165 static void biosfn_load_text_8_8_pat();
00326                                           !BCC_EOS
00327                                           ! 166 static void biosfn_load_text_8_16_pat();
00328                                           !BCC_EOS
00329                                           ! 167 static void biosfn_load_gfx_8_8_chars();
00330                                           !BCC_EOS
00331                                           ! 168 static void biosfn_load_gfx_user_chars();
00332                                           !BCC_EOS
00333                                           ! 169 static void biosfn_load_gfx_8_14_chars();
00334                                           !BCC_EOS
00335                                           ! 170 static void biosfn_load_gfx_8_8_dd_chars();
00336                                           !BCC_EOS
00337                                           ! 171 static void biosfn_load_gfx_8_16_chars();
00338                                           !BCC_EOS
00339                                           ! 172 static void biosfn_get_font_info();
00340                                           !BCC_EOS
00341                                           ! 173 static void biosfn_alternate_prtsc();
00342                                           !BCC_EOS
00343                                           ! 174 static void biosfn_switch_video_interface();
00344                                           !BCC_EOS
00345                                           ! 175 static void biosfn_enable_video_refresh_control();
00346                                           !BCC_EOS
00347                                           ! 176 static void biosfn_write_string();
00348                                           !BCC_EOS
00349                                           ! 177 static void biosfn_read_state_info();
00350                                           !BCC_EOS
00351                                           ! 178 static void biosfn_read_video_state_size();
00352                                           !BCC_EOS
00353                                           ! 179 static Bit16u biosfn_save_video_state();
00354                                           !BCC_EOS
00355                                           ! 180 static Bit16u biosfn_restore_video_state();
00356                                           !BCC_EOS
00357                                           ! 181 extern Bit8u video_save_pointer_table[];
00358                                           !BCC_EOS
00359                                           ! 182 #asm
00360                                           !BCC_ASM
00361                                           MACRO SET_INT_VECTOR
00362                                             push ds
00363                                             xor ax, ax
00364                                             mov ds, ax
00365                                             mov ax, ?3
00366                                             mov ?1*4, ax
00367                                             mov ax, ?2
00368                                             mov ?1*4+2, ax
00369                                             pop ds
00370                                           MEND
00371                                           ! 193 endasm
00372                                           !BCC_ENDASM
00373                                           ! 194 #asm
00374                                           !BCC_ASM
00375                                           
00376 0000                                      .rom
00377 0000                                      .org 0
00378                                           use16 386
00379                       00000000            vgabios_start:
00380 0000                        55            .byte 0x55, 0xaa
00381 0002                        40            .byte 0x40
00382                       00000003            vgabios_entry_point:
00383 0003           E9         0103              jmp vgabios_init_func
00384 001E                                      .org 0x1e
00385 001E                        49            .ascii "IBM"
00386 0021                        00            .byte 0x00
00387                       00000022            vgabios_name:
00388 0022                        50            .ascii "Plex86/Bochs VGABios"
00389 0036                        20            .ascii " "
00390 0037                        00            .byte 0x00
00391                       00000038            vgabios_version:
00392 0038                        63            .ascii "current-cvs"
00393 0043                        20            .ascii " "
00394                       00000044            vgabios_date:
00395 0044                        31            .ascii "14 Jun 2023"
00396 004F                        0A            .byte 0x0a,0x0d
00397 0051                        00            .byte 0x00
00398                       00000052            vgabios_copyright:
00399 0052                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00400 007B                        0A            .byte 0x0a,0x0d
00401 007D                        00            .byte 0x00
00402                       0000007E            vgabios_license:
00403 007E                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00404 00AE                        0A            .byte 0x0a,0x0d
00405 00B0                        0A            .byte 0x0a,0x0d
00406 00B2                        00            .byte 0x00
00407                       000000B3            vgabios_website:
00408 00B3                        50            .ascii "Please visit :"
00409 00C1                        0A            .byte 0x0a,0x0d
00410                                           ;;.ascii " . http://www.plex86.org"
00411                                           ;;.byte 0x0a,0x0d
00412 00C3                        20            .ascii " . http://bochs.sourceforge.net"
00413 00E2                        0A            .byte 0x0a,0x0d
00414 00E4                        20            .ascii " . http://www.nongnu.org/vgabios"
00415 0104                        0A            .byte 0x0a,0x0d
00416 0106                        0A            .byte 0x0a,0x0d
00417 0108                        00            .byte 0x00
00418                                           ;; ============================================================================================
00419                                           ;;
00420                                           ;; Init Entry point
00421                                           ;;
00422                                           ;; ============================================================================================
00423                       00000109            vgabios_init_func:
00424                                           ;; init vga card
00425 0109           E8         3457              call init_vga_card
00426                                           ;; init basic bios vars
00427 010C           E8         34B3              call init_bios_area
00428                                           ;; init vbe functions
00429 010F           E8         92C3              call vbe_init
00430                                           ;; set int10 vect
00431                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   0112           1E                           push ds
 +a   0113           31C0                         xor ax, ax
 +a   0115           8ED8                         mov ds, ax
 +a   0117           B8                   0133    mov ax,  #vgabios_int10_handler
 +a   011A           A3         0040              mov 0x10*4, ax
 +a   011D           B8                   C000    mov ax,  #0xC000
 +a   0120           A3         0042              mov 0x10*4+2, ax
 +a   0123           1F                           pop ds
00432                                           ;; display splash screen
00433 0124           E8         34EF              call _display_splash_screen
00434                                           ;; init video mode and clear the screen
00435 0127           B8                   0003    mov ax,#0x0003
00436 012A           CD                     10    int #0x10
00437                                           ;; show info
00438 012C           E8         34E8              call _display_info
00439                                           ;; show vbe info
00440 012F           E8         92D1              call vbe_display_info
00441 0132           CB                           retf
00442                                           ! 262 endasm
00443                                           !BCC_ENDASM
00444                                           ! 263 #asm
00445                                           !BCC_ASM
00446                       00000133            vgabios_int10_handler:
00447 0133           9C                           pushf
00448 0134           80FC                   0F    cmp ah, #0x0f
00449 0137           75           06              jne int10_test_1A
00450 0139           E8         6118              call biosfn_get_video_mode
00451 013C           E9         00BC              jmp int10_end
00452                       0000013F            int10_test_1A:
00453 013F           80FC                   1A    cmp ah, #0x1a
00454 0142           75           06              jne int10_test_0B
00455 0144           E8         6C3A              call biosfn_group_1A
00456 0147           E9         00B1              jmp int10_end
00457                       0000014A            int10_test_0B:
00458 014A           80FC                   0B    cmp ah, #0x0b
00459 014D           75           06              jne int10_test_1103
00460 014F           E8         5826              call biosfn_group_0B
00461 0152           E9         00A6              jmp int10_end
00462                       00000155            int10_test_1103:
00463 0155           3D                   1103    cmp ax, #0x1103
00464 0158           75           06              jne int10_test_12
00465 015A           E8         67F2              call biosfn_set_text_block_specifier
00466 015D           E9         009B              jmp int10_end
00467                       00000160            int10_test_12:
00468 0160           80FC                   12    cmp ah, #0x12
00469 0163           75           3E              jne int10_test_101B
00470 0165           80FB                   10    cmp bl, #0x10
00471 0168           75           06              jne int10_test_BL30
00472 016A           E8         6A3C              call biosfn_get_ega_info
00473 016D           E9         008B              jmp int10_end
00474                       00000170            int10_test_BL30:
00475 0170           80FB                   30    cmp bl, #0x30
00476 0173           75           06              jne int10_test_BL31
00477 0175           E8         6A55              call biosfn_select_vert_res
00478 0178           E9         0080              jmp int10_end
00479                       0000017B            int10_test_BL31:
00480 017B           80FB                   31    cmp bl, #0x31
00481 017E           75           05              jne int10_test_BL32
00482 0180           E8         6A9D              call biosfn_enable_default_palette_loading
00483 0183           EB           76              jmp int10_end
00484                       00000185            int10_test_BL32:
00485 0185           80FB                   32    cmp bl, #0x32
00486 0188           75           05              jne int10_test_BL33
00487 018A           E8         6AB5              call biosfn_enable_video_addressing
00488 018D           EB           6C              jmp int10_end
00489                       0000018F            int10_test_BL33:
00490 018F           80FB                   33    cmp bl, #0x33
00491 0192           75           05              jne int10_test_BL34
00492 0194           E8         6AC9              call biosfn_enable_grayscale_summing
00493 0197           EB           62              jmp int10_end
00494                       00000199            int10_test_BL34:
00495 0199           80FB                   34    cmp bl, #0x34
00496 019C           75           4F              jne int10_normal
00497 019E           E8         6AE3              call biosfn_enable_cursor_emulation
00498 01A1           EB           58              jmp int10_end
00499                       000001A3            int10_test_101B:
00500 01A3           3D                   101B    cmp ax, #0x101b
00501 01A6           74           45              je int10_normal
00502 01A8           80FC                   10    cmp ah, #0x10
00503 01AB           75           05              jne int10_test_4F
00504 01AD           E8         60CB              call biosfn_group_10
00505 01B0           EB           49              jmp int10_end
00506                       000001B2            int10_test_4F:
00507 01B2           80FC                   4F    cmp ah, #0x4f
00508 01B5           75           36              jne int10_normal
00509 01B7           3C                     03    cmp al, #0x03
00510 01B9           75           05              jne int10_test_vbe_05
00511 01BB           E8         9737              call vbe_biosfn_return_current_mode
00512 01BE           EB           3B              jmp int10_end
00513                       000001C0            int10_test_vbe_05:
00514 01C0           3C                     05    cmp al, #0x05
00515 01C2           75           05              jne int10_test_vbe_06
00516 01C4           E8         9A02              call vbe_biosfn_display_window_control
00517 01C7           EB           32              jmp int10_end
00518                       000001C9            int10_test_vbe_06:
00519 01C9           3C                     06    cmp al, #0x06
00520 01CB           75           05              jne int10_test_vbe_07
00521 01CD           E8         9A26              call vbe_biosfn_set_get_logical_scan_line_length
00522 01D0           EB           29              jmp int10_end
00523                       000001D2            int10_test_vbe_07:
00524 01D2           3C                     07    cmp al, #0x07
00525 01D4           75           05              jne int10_test_vbe_08
00526 01D6           E8         9A6A              call vbe_biosfn_set_get_display_start
00527 01D9           EB           20              jmp int10_end
00528                       000001DB            int10_test_vbe_08:
00529 01DB           3C                     08    cmp al, #0x08
00530 01DD           75           05              jne int10_test_vbe_0A
00531 01DF           E8         9A8F              call vbe_biosfn_set_get_dac_palette_format
00532 01E2           EB           17              jmp int10_end
00533                       000001E4            int10_test_vbe_0A:
00534 01E4           3C                     0A    cmp al, #0x0A
00535 01E6           75           05              jne int10_normal
00536 01E8           E8         9ABE              call vbe_biosfn_return_protected_mode_interface
00537 01EB           EB           0E              jmp int10_end
00538                       000001ED            int10_normal:
00539 01ED           06                           push es
00540 01EE           1E                           push ds
00541 01EF           60                           pusha
00542                                           ;; We have to set ds to access the right data segment
00543 01F0           BB                   C000    mov bx, #0xc000
00544 01F3           8EDB                         mov ds, bx
00545 01F5           E8         3464              call _int10_func
00546 01F8           61                           popa
00547 01F9           1F                           pop ds
00548 01FA           07                           pop es
00549                       000001FB            int10_end:
00550 01FB           9D                           popf
00551 01FC           CF                           iret
00552                                           ! 370 endasm
00553                                           !BCC_ENDASM
00554                                           ! 371 typedef struct
00555                                           ! 372 {Bit8u svgamode;
00556                                           !BCC_EOS
00557                                           ! 373  Bit8u class;
00558                                           !BCC_EOS
00559                                           ! 374  Bit8u memmodel;
00560                                           !BCC_EOS
00561                                           ! 375  Bit8u pixbits;
00562                                           !BCC_EOS
00563                                           ! 376  Bit16u sstart;
00564                                           !BCC_EOS
00565                                           ! 377  Bit8u pelmask;
00566                                           !BCC_EOS
00567                                           ! 378  Bit8u dacmodel;
00568                                           !BCC_EOS
00569                                           ! 379 } VGAMODES;
00570                                           !BCC_EOS
00571                                           ! 380 static VGAMODES vga_modes[15 +1]=
00572                                           ! 381 {
00573                                           
00574                       000001FD            _vga_modes:
00575                                           ! 382  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00576 01FD                        00            .byte	0
00577 01FE                        00            .byte	0
00578 01FF                        00            .byte	0
00579 0200                        04            .byte	4
00580 0201                      B800            .word	$B800
00581 0203                        FF            .byte	$FF
00582 0204                        02            .byte	2
00583                                           ! 383  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00584 0205                        01            .byte	1
00585 0206                        00            .byte	0
00586 0207                        00            .byte	0
00587 0208                        04            .byte	4
00588 0209                      B800            .word	$B800
00589 020B                        FF            .byte	$FF
00590 020C                        02            .byte	2
00591                                           ! 384  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00592 020D                        02            .byte	2
00593 020E                        00            .byte	0
00594 020F                        00            .byte	0
00595 0210                        04            .byte	4
00596 0211                      B800            .word	$B800
00597 0213                        FF            .byte	$FF
00598 0214                        02            .byte	2
00599                                           ! 385  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00600 0215                        03            .byte	3
00601 0216                        00            .byte	0
00602 0217                        00            .byte	0
00603 0218                        04            .byte	4
00604 0219                      B800            .word	$B800
00605 021B                        FF            .byte	$FF
00606 021C                        02            .byte	2
00607                                           ! 386  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00608 021D                        04            .byte	4
00609 021E                        01            .byte	1
00610 021F                        02            .byte	2
00611 0220                        02            .byte	2
00612 0221                      B800            .word	$B800
00613 0223                        FF            .byte	$FF
00614 0224                        01            .byte	1
00615                                           ! 387  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00616 0225                        05            .byte	5
00617 0226                        01            .byte	1
00618 0227                        02            .byte	2
00619 0228                        02            .byte	2
00620 0229                      B800            .word	$B800
00621 022B                        FF            .byte	$FF
00622 022C                        01            .byte	1
00623                                           ! 388  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00624 022D                        06            .byte	6
00625 022E                        01            .byte	1
00626 022F                        02            .byte	2
00627 0230                        01            .byte	1
00628 0231                      B800            .word	$B800
00629 0233                        FF            .byte	$FF
00630 0234                        01            .byte	1
00631                                           ! 389  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00632 0235                        07            .byte	7
00633 0236                        00            .byte	0
00634 0237                        01            .byte	1
00635 0238                        04            .byte	4
00636 0239                      B000            .word	$B000
00637 023B                        FF            .byte	$FF
00638 023C                        00            .byte	0
00639                                           ! 390  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00640 023D                        0D            .byte	$D
00641 023E                        01            .byte	1
00642 023F                        04            .byte	4
00643 0240                        04            .byte	4
00644 0241                      A000            .word	$A000
00645 0243                        FF            .byte	$FF
00646 0244                        01            .byte	1
00647                                           ! 391  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00648 0245                        0E            .byte	$E
00649 0246                        01            .byte	1
00650 0247                        04            .byte	4
00651 0248                        04            .byte	4
00652 0249                      A000            .word	$A000
00653 024B                        FF            .byte	$FF
00654 024C                        01            .byte	1
00655                                           ! 392  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00656 024D                        0F            .byte	$F
00657 024E                        01            .byte	1
00658 024F                        03            .byte	3
00659 0250                        01            .byte	1
00660 0251                      A000            .word	$A000
00661 0253                        FF            .byte	$FF
00662 0254                        00            .byte	0
00663                                           ! 393  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00664 0255                        10            .byte	$10
00665 0256                        01            .byte	1
00666 0257                        04            .byte	4
00667 0258                        04            .byte	4
00668 0259                      A000            .word	$A000
00669 025B                        FF            .byte	$FF
00670 025C                        02            .byte	2
00671                                           ! 394  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00672 025D                        11            .byte	$11
00673 025E                        01            .byte	1
00674 025F                        03            .byte	3
00675 0260                        01            .byte	1
00676 0261                      A000            .word	$A000
00677 0263                        FF            .byte	$FF
00678 0264                        02            .byte	2
00679                                           ! 395  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00680 0265                        12            .byte	$12
00681 0266                        01            .byte	1
00682 0267                        04            .byte	4
00683 0268                        04            .byte	4
00684 0269                      A000            .word	$A000
00685 026B                        FF            .byte	$FF
00686 026C                        02            .byte	2
00687                                           ! 396  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00688 026D                        13            .byte	$13
00689 026E                        01            .byte	1
00690 026F                        05            .byte	5
00691 0270                        08            .byte	8
00692 0271                      A000            .word	$A000
00693 0273                        FF            .byte	$FF
00694 0274                        03            .byte	3
00695                                           ! 397  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00696 0275                        6A            .byte	$6A
00697 0276                        01            .byte	1
00698 0277                        04            .byte	4
00699 0278                        04            .byte	4
00700 0279                      A000            .word	$A000
00701 027B                        FF            .byte	$FF
00702 027C                        02            .byte	2
00703                                           ! 398 };
00704                                           !BCC_EOS
00705                                           ! 399 static Bit8u line_to_vpti[15 +1]={
00706                       0000027D            _line_to_vpti:
00707                                           ! 400     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00708 027D                        17            .byte	$17
00709 027E                        17            .byte	$17
00710 027F                        18            .byte	$18
00711 0280                        18            .byte	$18
00712 0281                        04            .byte	4
00713 0282                        05            .byte	5
00714 0283                        06            .byte	6
00715 0284                        07            .byte	7
00716                                           ! 401     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00717 0285                        0D            .byte	$D
00718 0286                        0E            .byte	$E
00719 0287                        11            .byte	$11
00720 0288                        12            .byte	$12
00721 0289                        1A            .byte	$1A
00722 028A                        1B            .byte	$1B
00723 028B                        1C            .byte	$1C
00724 028C                        1D            .byte	$1D
00725                                           ! 402 };
00726                                           !BCC_EOS
00727                                           ! 403 static Bit8u dac_regs[3 +1]=
00728                                           ! 404 {0x3f,0x3f,0x3f,0xff};
00729                       0000028D            _dac_regs:
00730 028D                        3F            .byte	$3F
00731 028E                        3F            .byte	$3F
00732 028F                        3F            .byte	$3F
00733 0290                        FF            .byte	$FF
00734                                           !BCC_EOS
00735                                           ! 405 typedef struct {
00736                                           ! 406     Bit8u twidth;
00737                                           !BCC_EOS
00738                                           ! 407     Bit8u theightm1;
00739                                           !BCC_EOS
00740                                           ! 408     Bit8u cheight;
00741                                           !BCC_EOS
00742                                           ! 409     Bit8u slength_l;
00743                                           !BCC_EOS
00744                                           ! 410     Bit8u slength_h;
00745                                           !BCC_EOS
00746                                           ! 411     Bit8u sequ_regs[4];
00747                                           !BCC_EOS
00748                                           ! 412     Bit8u miscreg;
00749                                           !BCC_EOS
00750                                           ! 413     Bit8u crtc_regs[25];
00751                                           !BCC_EOS
00752                                           ! 414     Bit8u actl_regs[20];
00753                                           !BCC_EOS
00754                                           ! 415     Bit8u grdc_regs[
00755                                           ! 415 9];
00756                                           !BCC_EOS
00757                                           ! 416 } VideoParamTableEntry;
00758                                           !BCC_EOS
00759                                           ! 417 static VideoParamTableEntry video_param_table[30] = {
00760                       00000291            _video_param_table:
00761                                           ! 418 {
00762                                           ! 419  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00763 0291                        00            .byte	0
00764 0292                        00            .byte	0
00765 0293                        00            .byte	0
00766 0294                        00            .byte	0
00767 0295                        00            .byte	0
00768 0296                        00            .byte	0
00769 0297                        00            .byte	0
00770 0298                        00            .byte	0
00771                                           ! 420  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00772 0299                        00            .byte	0
00773 029A                        00            .byte	0
00774 029B                        00            .byte	0
00775 029C                        00            .byte	0
00776 029D                        00            .byte	0
00777 029E                        00            .byte	0
00778 029F                        00            .byte	0
00779 02A0                        00            .byte	0
00780                                           ! 421  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00781 02A1                        00            .byte	0
00782 02A2                        00            .byte	0
00783 02A3                        00            .byte	0
00784 02A4                        00            .byte	0
00785 02A5                        00            .byte	0
00786 02A6                        00            .byte	0
00787 02A7                        00            .byte	0
00788 02A8                        00            .byte	0
00789                                           ! 422  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00790 02A9                        00            .byte	0
00791 02AA                        00            .byte	0
00792 02AB                        00            .byte	0
00793 02AC                        00            .byte	0
00794 02AD                        00            .byte	0
00795 02AE                        00            .byte	0
00796 02AF                        00            .byte	0
00797 02B0                        00            .byte	0
00798                                           ! 423  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00799 02B1                        00            .byte	0
00800 02B2                        00            .byte	0
00801 02B3                        00            .byte	0
00802 02B4                        00            .byte	0
00803 02B5                        00            .byte	0
00804 02B6                        00            .byte	0
00805 02B7                        00            .byte	0
00806 02B8                        00            .byte	0
00807                                           ! 424  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00808 02B9                        00            .byte	0
00809 02BA                        00            .byte	0
00810 02BB                        00            .byte	0
00811 02BC                        00            .byte	0
00812 02BD                        00            .byte	0
00813 02BE                        00            .byte	0
00814 02BF                        00            .byte	0
00815 02C0                        00            .byte	0
00816                                           ! 425  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00817 02C1                        00            .byte	0
00818 02C2                        00            .byte	0
00819 02C3                        00            .byte	0
00820 02C4                        00            .byte	0
00821 02C5                        00            .byte	0
00822 02C6                        00            .byte	0
00823 02C7                        00            .byte	0
00824 02C8                        00            .byte	0
00825                                           ! 426  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00826 02C9                        00            .byte	0
00827 02CA                        00            .byte	0
00828 02CB                        00            .byte	0
00829 02CC                        00            .byte	0
00830 02CD                        00            .byte	0
00831 02CE                        00            .byte	0
00832 02CF                        00            .byte	0
00833 02D0                        00            .byte	0
00834                                           ! 427 },
00835                                           ! 428 {
00836                                           ! 429  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00837 02D1                        00            .byte	0
00838 02D2                        00            .byte	0
00839 02D3                        00            .byte	0
00840 02D4                        00            .byte	0
00841 02D5                        00            .byte	0
00842 02D6                        00            .byte	0
00843 02D7                        00            .byte	0
00844 02D8                        00            .byte	0
00845                                           ! 430  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00846 02D9                        00            .byte	0
00847 02DA                        00            .byte	0
00848 02DB                        00            .byte	0
00849 02DC                        00            .byte	0
00850 02DD                        00            .byte	0
00851 02DE                        00            .byte	0
00852 02DF                        00            .byte	0
00853 02E0                        00            .byte	0
00854                                           ! 431  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00855 02E1                        00            .byte	0
00856 02E2                        00            .byte	0
00857 02E3                        00            .byte	0
00858 02E4                        00            .byte	0
00859 02E5                        00            .byte	0
00860 02E6                        00            .byte	0
00861 02E7                        00            .byte	0
00862 02E8                        00            .byte	0
00863                                           ! 432  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00864 02E9                        00            .byte	0
00865 02EA                        00            .byte	0
00866 02EB                        00            .byte	0
00867 02EC                        00            .byte	0
00868 02ED                        00            .byte	0
00869 02EE                        00            .byte	0
00870 02EF                        00            .byte	0
00871 02F0                        00            .byte	0
00872                                           ! 433  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00873 02F1                        00            .byte	0
00874 02F2                        00            .byte	0
00875 02F3                        00            .byte	0
00876 02F4                        00            .byte	0
00877 02F5                        00            .byte	0
00878 02F6                        00            .byte	0
00879 02F7                        00            .byte	0
00880 02F8                        00            .byte	0
00881                                           ! 434  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00882 02F9                        00            .byte	0
00883 02FA                        00            .byte	0
00884 02FB                        00            .byte	0
00885 02FC                        00            .byte	0
00886 02FD                        00            .byte	0
00887 02FE                        00            .byte	0
00888 02FF                        00            .byte	0
00889 0300                        00            .byte	0
00890                                           ! 435  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00891 0301                        00            .byte	0
00892 0302                        00            .byte	0
00893 0303                        00            .byte	0
00894 0304                        00            .byte	0
00895 0305                        00            .byte	0
00896 0306                        00            .byte	0
00897 0307                        00            .byte	0
00898 0308                        00            .byte	0
00899                                           ! 436  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00900 0309                        00            .byte	0
00901 030A                        00            .byte	0
00902 030B                        00            .byte	0
00903 030C                        00            .byte	0
00904 030D                        00            .byte	0
00905 030E                        00            .byte	0
00906 030F                        00            .byte	0
00907 0310                        00            .byte	0
00908                                           ! 437 },
00909                                           ! 438 {
00910                                           ! 439  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00911 0311                        00            .byte	0
00912 0312                        00            .byte	0
00913 0313                        00            .byte	0
00914 0314                        00            .byte	0
00915 0315                        00            .byte	0
00916 0316                        00            .byte	0
00917 0317                        00            .byte	0
00918 0318                        00            .byte	0
00919                                           ! 440  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00920 0319                        00            .byte	0
00921 031A                        00            .byte	0
00922 031B                        00            .byte	0
00923 031C                        00            .byte	0
00924 031D                        00            .byte	0
00925 031E                        00            .byte	0
00926 031F                        00            .byte	0
00927 0320                        00            .byte	0
00928                                           ! 441  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00929 0321                        00            .byte	0
00930 0322                        00            .byte	0
00931 0323                        00            .byte	0
00932 0324                        00            .byte	0
00933 0325                        00            .byte	0
00934 0326                        00            .byte	0
00935 0327                        00            .byte	0
00936 0328                        00            .byte	0
00937                                           ! 442  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00938 0329                        00            .byte	0
00939 032A                        00            .byte	0
00940 032B                        00            .byte	0
00941 032C                        00            .byte	0
00942 032D                        00            .byte	0
00943 032E                        00            .byte	0
00944 032F                        00            .byte	0
00945 0330                        00            .byte	0
00946                                           ! 443  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00947 0331                        00            .byte	0
00948 0332                        00            .byte	0
00949 0333                        00            .byte	0
00950 0334                        00            .byte	0
00951 0335                        00            .byte	0
00952 0336                        00            .byte	0
00953 0337                        00            .byte	0
00954 0338                        00            .byte	0
00955                                           ! 444  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00956 0339                        00            .byte	0
00957 033A                        00            .byte	0
00958 033B                        00            .byte	0
00959 033C                        00            .byte	0
00960 033D                        00            .byte	0
00961 033E                        00            .byte	0
00962 033F                        00            .byte	0
00963 0340                        00            .byte	0
00964                                           ! 445  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00965 0341                        00            .byte	0
00966 0342                        00            .byte	0
00967 0343                        00            .byte	0
00968 0344                        00            .byte	0
00969 0345                        00            .byte	0
00970 0346                        00            .byte	0
00971 0347                        00            .byte	0
00972 0348                        00            .byte	0
00973                                           ! 446  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00974 0349                        00            .byte	0
00975 034A                        00            .byte	0
00976 034B                        00            .byte	0
00977 034C                        00            .byte	0
00978 034D                        00            .byte	0
00979 034E                        00            .byte	0
00980 034F                        00            .byte	0
00981 0350                        00            .byte	0
00982                                           ! 447 },
00983                                           ! 448 {
00984                                           ! 449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00985 0351                        00            .byte	0
00986 0352                        00            .byte	0
00987 0353                        00            .byte	0
00988 0354                        00            .byte	0
00989 0355                        00            .byte	0
00990 0356                        00            .byte	0
00991 0357                        00            .byte	0
00992 0358                        00            .byte	0
00993                                           ! 450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00994 0359                        00            .byte	0
00995 035A                        00            .byte	0
00996 035B                        00            .byte	0
00997 035C                        00            .byte	0
00998 035D                        00            .byte	0
00999 035E                        00            .byte	0
01000 035F                        00            .byte	0
01001 0360                        00            .byte	0
01002                                           ! 451  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01003 0361                        00            .byte	0
01004 0362                        00            .byte	0
01005 0363                        00            .byte	0
01006 0364                        00            .byte	0
01007 0365                        00            .byte	0
01008 0366                        00            .byte	0
01009 0367                        00            .byte	0
01010 0368                        00            .byte	0
01011                                           ! 452  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01012 0369                        00            .byte	0
01013 036A                        00            .byte	0
01014 036B                        00            .byte	0
01015 036C                        00            .byte	0
01016 036D                        00            .byte	0
01017 036E                        00            .byte	0
01018 036F                        00            .byte	0
01019 0370                        00            .byte	0
01020                                           ! 453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01021 0371                        00            .byte	0
01022 0372                        00            .byte	0
01023 0373                        00            .byte	0
01024 0374                        00            .byte	0
01025 0375                        00            .byte	0
01026 0376                        00            .byte	0
01027 0377                        00            .byte	0
01028 0378                        00            .byte	0
01029                                           ! 454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01030 0379                        00            .byte	0
01031 037A                        00            .byte	0
01032 037B                        00            .byte	0
01033 037C                        00            .byte	0
01034 037D                        00            .byte	0
01035 037E                        00            .byte	0
01036 037F                        00            .byte	0
01037 0380                        00            .byte	0
01038                                           ! 455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01039 0381                        00            .byte	0
01040 0382                        00            .byte	0
01041 0383                        00            .byte	0
01042 0384                        00            .byte	0
01043 0385                        00            .byte	0
01044 0386                        00            .byte	0
01045 0387                        00            .byte	0
01046 0388                        00            .byte	0
01047                                           ! 456  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01048 0389                        00            .byte	0
01049 038A                        00            .byte	0
01050 038B                        00            .byte	0
01051 038C                        00            .byte	0
01052 038D                        00            .byte	0
01053 038E                        00            .byte	0
01054 038F                        00            .byte	0
01055 0390                        00            .byte	0
01056                                           ! 457 },
01057                                           ! 458 {
01058                                           ! 459  40, 24, 8, 0x00, 0x08,
01059 0391                        28            .byte	$28
01060 0392                        18            .byte	$18
01061 0393                        08            .byte	8
01062 0394                        00            .byte	0
01063 0395                        08            .byte	8
01064                                           ! 460  0x09, 0x03, 0x00, 0x02,
01065 0396                        09            .byte	9
01066 0397                        03            .byte	3
01067 0398                        00            .byte	0
01068 0399                        02            .byte	2
01069                                           ! 461  0x63,
01070 039A                        63            .byte	$63
01071                                           ! 462  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01072 039B                        2D            .byte	$2D
01073 039C                        27            .byte	$27
01074 039D                        28            .byte	$28
01075 039E                        90            .byte	$90
01076 039F                        2B            .byte	$2B
01077 03A0                        80            .byte	$80
01078 03A1                        BF            .byte	$BF
01079 03A2                        1F            .byte	$1F
01080                                           ! 463  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01081 03A3                        00            .byte	0
01082 03A4                        C1            .byte	$C1
01083 03A5                        00            .byte	0
01084 03A6                        00            .byte	0
01085 03A7                        00            .byte	0
01086 03A8                        00            .byte	0
01087 03A9                        00            .byte	0
01088 03AA                        00            .byte	0
01089                                           ! 464  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01090 03AB                        9C            .byte	$9C
01091 03AC                        8E            .byte	$8E
01092 03AD                        8F            .byte	$8F
01093 03AE                        14            .byte	$14
01094 03AF                        00            .byte	0
01095 03B0                        96            .byte	$96
01096 03B1                        B9            .byte	$B9
01097 03B2                        A2            .byte	$A2
01098                                           ! 465  0xff,
01099 03B3                        FF            .byte	$FF
01100                                           ! 466  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01101 03B4                        00            .byte	0
01102 03B5                        13            .byte	$13
01103 03B6                        15            .byte	$15
01104 03B7                        17            .byte	$17
01105 03B8                        02            .byte	2
01106 03B9                        04            .byte	4
01107 03BA                        06            .byte	6
01108 03BB                        07            .byte	7
01109                                           ! 467  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01110 03BC                        10            .byte	$10
01111 03BD                        11            .byte	$11
01112 03BE                        12            .byte	$12
01113 03BF                        13            .byte	$13
01114 03C0                        14            .byte	$14
01115 03C1                        15            .byte	$15
01116 03C2                        16            .byte	$16
01117 03C3                        17            .byte	$17
01118                                           ! 468  0x01, 0x00, 0x03, 0x00,
01119 03C4                        01            .byte	1
01120 03C5                        00            .byte	0
01121 03C6                        03            .byte	3
01122 03C7                        00            .byte	0
01123                                           ! 469  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 
01124 03C8                        00            .byte	0
01125 03C9                        00            .byte	0
01126 03CA                        00            .byte	0
01127 03CB                        00            .byte	0
01128 03CC                        00            .byte	0
01129 03CD                        30            .byte	$30
01130 03CE                        0F            .byte	$F
01131                                           ! 469 0x0f, 0xff,
01132 03CF                        0F            .byte	$F
01133 03D0                        FF            .byte	$FF
01134                                           ! 470 },
01135                                           ! 471 {
01136                                           ! 472  40, 24, 8, 0x00, 0x08,
01137 03D1                        28            .byte	$28
01138 03D2                        18            .byte	$18
01139 03D3                        08            .byte	8
01140 03D4                        00            .byte	0
01141 03D5                        08            .byte	8
01142                                           ! 473  0x09, 0x03, 0x00, 0x02,
01143 03D6                        09            .byte	9
01144 03D7                        03            .byte	3
01145 03D8                        00            .byte	0
01146 03D9                        02            .byte	2
01147                                           ! 474  0x63,
01148 03DA                        63            .byte	$63
01149                                           ! 475  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01150 03DB                        2D            .byte	$2D
01151 03DC                        27            .byte	$27
01152 03DD                        28            .byte	$28
01153 03DE                        90            .byte	$90
01154 03DF                        2B            .byte	$2B
01155 03E0                        80            .byte	$80
01156 03E1                        BF            .byte	$BF
01157 03E2                        1F            .byte	$1F
01158                                           ! 476  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01159 03E3                        00            .byte	0
01160 03E4                        C1            .byte	$C1
01161 03E5                        00            .byte	0
01162 03E6                        00            .byte	0
01163 03E7                        00            .byte	0
01164 03E8                        00            .byte	0
01165 03E9                        00            .byte	0
01166 03EA                        00            .byte	0
01167                                           ! 477  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01168 03EB                        9C            .byte	$9C
01169 03EC                        8E            .byte	$8E
01170 03ED                        8F            .byte	$8F
01171 03EE                        14            .byte	$14
01172 03EF                        00            .byte	0
01173 03F0                        96            .byte	$96
01174 03F1                        B9            .byte	$B9
01175 03F2                        A2            .byte	$A2
01176                                           ! 478  0xff,
01177 03F3                        FF            .byte	$FF
01178                                           ! 479  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01179 03F4                        00            .byte	0
01180 03F5                        13            .byte	$13
01181 03F6                        15            .byte	$15
01182 03F7                        17            .byte	$17
01183 03F8                        02            .byte	2
01184 03F9                        04            .byte	4
01185 03FA                        06            .byte	6
01186 03FB                        07            .byte	7
01187                                           ! 480  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01188 03FC                        10            .byte	$10
01189 03FD                        11            .byte	$11
01190 03FE                        12            .byte	$12
01191 03FF                        13            .byte	$13
01192 0400                        14            .byte	$14
01193 0401                        15            .byte	$15
01194 0402                        16            .byte	$16
01195 0403                        17            .byte	$17
01196                                           ! 481  0x01, 0x00, 0x03, 0x00,
01197 0404                        01            .byte	1
01198 0405                        00            .byte	0
01199 0406                        03            .byte	3
01200 0407                        00            .byte	0
01201                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01202 0408                        00            .byte	0
01203 0409                        00            .byte	0
01204 040A                        00            .byte	0
01205 040B                        00            .byte	0
01206 040C                        00            .byte	0
01207 040D                        30            .byte	$30
01208 040E                        0F            .byte	$F
01209 040F                        0F            .byte	$F
01210 0410                        FF            .byte	$FF
01211                                           ! 483 },
01212                                           ! 484 {
01213                                           ! 485  80, 24, 8, 0x00, 0x10,
01214 0411                        50            .byte	$50
01215 0412                        18            .byte	$18
01216 0413                        08            .byte	8
01217 0414                        00            .byte	0
01218 0415                        10            .byte	$10
01219                                           ! 486  0x01, 0x01, 0x00, 0x06,
01220 0416                        01            .byte	1
01221 0417                        01            .byte	1
01222 0418                        00            .byte	0
01223 0419                        06            .byte	6
01224                                           ! 487  0x63,
01225 041A                        63            .byte	$63
01226                                           ! 488  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01227 041B                        5F            .byte	$5F
01228 041C                        4F            .byte	$4F
01229 041D                        50            .byte	$50
01230 041E                        82            .byte	$82
01231 041F                        54            .byte	$54
01232 0420                        80            .byte	$80
01233 0421                        BF            .byte	$BF
01234 0422                        1F            .byte	$1F
01235                                           ! 489  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01236 0423                        00            .byte	0
01237 0424                        C1            .byte	$C1
01238 0425                        00            .byte	0
01239 0426                        00            .byte	0
01240 0427                        00            .byte	0
01241 0428                        00            .byte	0
01242 0429                        00            .byte	0
01243 042A                        00            .byte	0
01244                                           ! 490  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01245 042B                        9C            .byte	$9C
01246 042C                        8E            .byte	$8E
01247 042D                        8F            .byte	$8F
01248 042E                        28            .byte	$28
01249 042F                        00            .byte	0
01250 0430                        96            .byte	$96
01251 0431                        B9            .byte	$B9
01252 0432                        C2            .byte	$C2
01253                                           ! 491  0xff,
01254 0433                        FF            .byte	$FF
01255                                           ! 492  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01256 0434                        00            .byte	0
01257 0435                        17            .byte	$17
01258 0436                        17            .byte	$17
01259 0437                        17            .byte	$17
01260 0438                        17            .byte	$17
01261 0439                        17            .byte	$17
01262 043A                        17            .byte	$17
01263 043B                        17            .byte	$17
01264                                           ! 493  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01265 043C                        17            .byte	$17
01266 043D                        17            .byte	$17
01267 043E                        17            .byte	$17
01268 043F                        17            .byte	$17
01269 0440                        17            .byte	$17
01270 0441                        17            .byte	$17
01271 0442                        17            .byte	$17
01272 0443                        17            .byte	$17
01273                                           ! 494  0x01, 0x00, 0x01, 0x00,
01274 0444                        01            .byte	1
01275 0445                        00            .byte	0
01276 0446                        01            .byte	1
01277 0447                        00            .byte	0
01278                                           ! 495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01279 0448                        00            .byte	0
01280 0449                        00            .byte	0
01281 044A                        00            .byte	0
01282 044B                        00            .byte	0
01283 044C                        00            .byte	0
01284 044D                        00            .byte	0
01285 044E                        0D            .byte	$D
01286 044F                        0F            .byte	$F
01287 0450                        FF            .byte	$FF
01288                                           ! 496 },
01289                                           ! 497 {
01290                                           ! 498  80, 24, 16, 0x00, 0x10,
01291 0451                        50            .byte	$50
01292 0452                        18            .byte	$18
01293 0453                        10            .byte	$10
01294 0454                        00            .byte	0
01295 0455                        10            .byte	$10
01296                                           ! 499  0x00, 0x03, 0x00, 0x02,
01297 0456                        00            .byte	0
01298 0457                        03            .byte	3
01299 0458                        00            .byte	0
01300 0459                        02            .byte	2
01301                                           ! 500  0x66,
01302 045A                        66            .byte	$66
01303                                           ! 501  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01304 045B                        5F            .byte	$5F
01305 045C                        4F            .byte	$4F
01306 045D                        50            .byte	$50
01307 045E                        82            .byte	$82
01308 045F                        55            .byte	$55
01309 0460                        81            .byte	$81
01310 0461                        BF            .byte	$BF
01311 0462                        1F            .byte	$1F
01312                                           ! 502  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01313 0463                        00            .byte	0
01314 0464                        4F            .byte	$4F
01315 0465                        0D            .byte	$D
01316 0466                        0E            .byte	$E
01317 0467                        00            .byte	0
01318 0468                        00            .byte	0
01319 0469                        00            .byte	0
01320 046A                        00            .byte	0
01321                                           ! 503  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01322 046B                        9C            .byte	$9C
01323 046C                        8E            .byte	$8E
01324 046D                        8F            .byte	$8F
01325 046E                        28            .byte	$28
01326 046F                        0F            .byte	$F
01327 0470                        96            .byte	$96
01328 0471                        B9            .byte	$B9
01329 0472                        A3            .byte	$A3
01330                                           ! 504  0xff,
01331 0473                        FF            .byte	$FF
01332                                           ! 505  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01333 0474                        00            .byte	0
01334 0475                        08            .byte	8
01335 0476                        08            .byte	8
01336 0477                        08            .byte	8
01337 0478                        08            .byte	8
01338 0479                        08            .byte	8
01339 047A                        08            .byte	8
01340 047B                        08            .byte	8
01341                                           ! 506  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01342 047C                        10            .byte	$10
01343 047D                        18            .byte	$18
01344 047E                        18            .byte	$18
01345 047F                        18            .byte	$18
01346 0480                        18            .byte	$18
01347 0481                        18            .byte	$18
01348 0482                        18            .byte	$18
01349 0483                        18            .byte	$18
01350                                           ! 507  0x0e, 0x00, 0x0f, 0x08,
01351 0484                        0E            .byte	$E
01352 0485                        00            .byte	0
01353 0486                        0F            .byte	$F
01354 0487                        08            .byte	8
01355                                           ! 508  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01356 0488                        00            .byte	0
01357 0489                        00            .byte	0
01358 048A                        00            .byte	0
01359 048B                        00            .byte	0
01360 048C                        00            .byte	0
01361 048D                        10            .byte	$10
01362 048E                        0A            .byte	$A
01363 048F                        0F            .byte	$F
01364 0490                        FF            .byte	$FF
01365                                           ! 509 },
01366                                           ! 510 {
01367                                           ! 511  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01368 0491                        00            .byte	0
01369 0492                        00            .byte	0
01370 0493                        00            .byte	0
01371 0494                        00            .byte	0
01372 0495                        00            .byte	0
01373 0496                        00            .byte	0
01374 0497                        00            .byte	0
01375 0498                        00            .byte	0
01376                                           ! 512  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01377 0499                        00            .byte	0
01378 049A                        00            .byte	0
01379 049B                        00            .byte	0
01380 049C                        00            .byte	0
01381 049D                        00            .byte	0
01382 049E                        00            .byte	0
01383 049F                        00            .byte	0
01384 04A0                        00            .byte	0
01385                                           ! 513  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01386 04A1                        00            .byte	0
01387 04A2                        00            .byte	0
01388 04A3                        00            .byte	0
01389 04A4                        00            .byte	0
01390 04A5                        00            .byte	0
01391 04A6                        00            .byte	0
01392 04A7                        00            .byte	0
01393 04A8                        00            .byte	0
01394                                           ! 514  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01395 04A9                        00            .byte	0
01396 04AA                        00            .byte	0
01397 04AB                        00            .byte	0
01398 04AC                        00            .byte	0
01399 04AD                        00            .byte	0
01400 04AE                        00            .byte	0
01401 04AF                        00            .byte	0
01402 04B0                        00            .byte	0
01403                                           ! 515  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01404 04B1                        00            .byte	0
01405 04B2                        00            .byte	0
01406 04B3                        00            .byte	0
01407 04B4                        00            .byte	0
01408 04B5                        00            .byte	0
01409 04B6                        00            .byte	0
01410 04B7                        00            .byte	0
01411 04B8                        00            .byte	0
01412                                           ! 516  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01413 04B9                        00            .byte	0
01414 04BA                        00            .byte	0
01415 04BB                        00            .byte	0
01416 04BC                        00            .byte	0
01417 04BD                        00            .byte	0
01418 04BE                        00            .byte	0
01419 04BF                        00            .byte	0
01420 04C0                        00            .byte	0
01421                                           ! 517  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01422 04C1                        00            .byte	0
01423 04C2                        00            .byte	0
01424 04C3                        00            .byte	0
01425 04C4                        00            .byte	0
01426 04C5                        00            .byte	0
01427 04C6                        00            .byte	0
01428 04C7                        00            .byte	0
01429 04C8                        00            .byte	0
01430                                           ! 518  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01431 04C9                        00            .byte	0
01432 04CA                        00            .byte	0
01433 04CB                        00            .byte	0
01434 04CC                        00            .byte	0
01435 04CD                        00            .byte	0
01436 04CE                        00            .byte	0
01437 04CF                        00            .byte	0
01438 04D0                        00            .byte	0
01439                                           ! 519 },
01440                                           ! 520 {
01441                                           ! 521  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01442 04D1                        00            .byte	0
01443 04D2                        00            .byte	0
01444 04D3                        00            .byte	0
01445 04D4                        00            .byte	0
01446 04D5                        00            .byte	0
01447 04D6                        00            .byte	0
01448 04D7                        00            .byte	0
01449 04D8                        00            .byte	0
01450                                           ! 522  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01451 04D9                        00            .byte	0
01452 04DA                        00            .byte	0
01453 04DB                        00            .byte	0
01454 04DC                        00            .byte	0
01455 04DD                        00            .byte	0
01456 04DE                        00            .byte	0
01457 04DF                        00            .byte	0
01458 04E0                        00            .byte	0
01459                                           ! 523  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01460 04E1                        00            .byte	0
01461 04E2                        00            .byte	0
01462 04E3                        00            .byte	0
01463 04E4                        00            .byte	0
01464 04E5                        00            .byte	0
01465 04E6                        00            .byte	0
01466 04E7                        00            .byte	0
01467 04E8                        00            .byte	0
01468                                           ! 524  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01469 04E9                        00            .byte	0
01470 04EA                        00            .byte	0
01471 04EB                        00            .byte	0
01472 04EC                        00            .byte	0
01473 04ED                        00            .byte	0
01474 04EE                        00            .byte	0
01475 04EF                        00            .byte	0
01476 04F0                        00            .byte	0
01477                                           ! 525  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01478 04F1                        00            .byte	0
01479 04F2                        00            .byte	0
01480 04F3                        00            .byte	0
01481 04F4                        00            .byte	0
01482 04F5                        00            .byte	0
01483 04F6                        00            .byte	0
01484 04F7                        00            .byte	0
01485 04F8                        00            .byte	0
01486                                           ! 526  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01487 04F9                        00            .byte	0
01488 04FA                        00            .byte	0
01489 04FB                        00            .byte	0
01490 04FC                        00            .byte	0
01491 04FD                        00            .byte	0
01492 04FE                        00            .byte	0
01493 04FF                        00            .byte	0
01494 0500                        00            .byte	0
01495                                           ! 527  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01496 0501                        00            .byte	0
01497 0502                        00            .byte	0
01498 0503                        00            .byte	0
01499 0504                        00            .byte	0
01500 0505                        00            .byte	0
01501 0506                        00            .byte	0
01502 0507                        00            .byte	0
01503 0508                        00            .byte	0
01504                                           ! 528  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01505 0509                        00            .byte	0
01506 050A                        00            .byte	0
01507 050B                        00            .byte	0
01508 050C                        00            .byte	0
01509 050D                        00            .byte	0
01510 050E                        00            .byte	0
01511 050F                        00            .byte	0
01512 0510                        00            .byte	0
01513                                           ! 529 },
01514                                           ! 530 {
01515                                           ! 531  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01516 0511                        00            .byte	0
01517 0512                        00            .byte	0
01518 0513                        00            .byte	0
01519 0514                        00            .byte	0
01520 0515                        00            .byte	0
01521 0516                        00            .byte	0
01522 0517                        00            .byte	0
01523 0518                        00            .byte	0
01524                                           ! 532  0x00, 0
01525 0519                        00            .byte	0
01526                                           ! 532 x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01527 051A                        00            .byte	0
01528 051B                        00            .byte	0
01529 051C                        00            .byte	0
01530 051D                        00            .byte	0
01531 051E                        00            .byte	0
01532 051F                        00            .byte	0
01533 0520                        00            .byte	0
01534                                           ! 533  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01535 0521                        00            .byte	0
01536 0522                        00            .byte	0
01537 0523                        00            .byte	0
01538 0524                        00            .byte	0
01539 0525                        00            .byte	0
01540 0526                        00            .byte	0
01541 0527                        00            .byte	0
01542 0528                        00            .byte	0
01543                                           ! 534  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01544 0529                        00            .byte	0
01545 052A                        00            .byte	0
01546 052B                        00            .byte	0
01547 052C                        00            .byte	0
01548 052D                        00            .byte	0
01549 052E                        00            .byte	0
01550 052F                        00            .byte	0
01551 0530                        00            .byte	0
01552                                           ! 535  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01553 0531                        00            .byte	0
01554 0532                        00            .byte	0
01555 0533                        00            .byte	0
01556 0534                        00            .byte	0
01557 0535                        00            .byte	0
01558 0536                        00            .byte	0
01559 0537                        00            .byte	0
01560 0538                        00            .byte	0
01561                                           ! 536  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01562 0539                        00            .byte	0
01563 053A                        00            .byte	0
01564 053B                        00            .byte	0
01565 053C                        00            .byte	0
01566 053D                        00            .byte	0
01567 053E                        00            .byte	0
01568 053F                        00            .byte	0
01569 0540                        00            .byte	0
01570                                           ! 537  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01571 0541                        00            .byte	0
01572 0542                        00            .byte	0
01573 0543                        00            .byte	0
01574 0544                        00            .byte	0
01575 0545                        00            .byte	0
01576 0546                        00            .byte	0
01577 0547                        00            .byte	0
01578 0548                        00            .byte	0
01579                                           ! 538  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01580 0549                        00            .byte	0
01581 054A                        00            .byte	0
01582 054B                        00            .byte	0
01583 054C                        00            .byte	0
01584 054D                        00            .byte	0
01585 054E                        00            .byte	0
01586 054F                        00            .byte	0
01587 0550                        00            .byte	0
01588                                           ! 539 },
01589                                           ! 540 {
01590                                           ! 541  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01591 0551                        00            .byte	0
01592 0552                        00            .byte	0
01593 0553                        00            .byte	0
01594 0554                        00            .byte	0
01595 0555                        00            .byte	0
01596 0556                        00            .byte	0
01597 0557                        00            .byte	0
01598 0558                        00            .byte	0
01599                                           ! 542  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01600 0559                        00            .byte	0
01601 055A                        00            .byte	0
01602 055B                        00            .byte	0
01603 055C                        00            .byte	0
01604 055D                        00            .byte	0
01605 055E                        00            .byte	0
01606 055F                        00            .byte	0
01607 0560                        00            .byte	0
01608                                           ! 543  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01609 0561                        00            .byte	0
01610 0562                        00            .byte	0
01611 0563                        00            .byte	0
01612 0564                        00            .byte	0
01613 0565                        00            .byte	0
01614 0566                        00            .byte	0
01615 0567                        00            .byte	0
01616 0568                        00            .byte	0
01617                                           ! 544  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01618 0569                        00            .byte	0
01619 056A                        00            .byte	0
01620 056B                        00            .byte	0
01621 056C                        00            .byte	0
01622 056D                        00            .byte	0
01623 056E                        00            .byte	0
01624 056F                        00            .byte	0
01625 0570                        00            .byte	0
01626                                           ! 545  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01627 0571                        00            .byte	0
01628 0572                        00            .byte	0
01629 0573                        00            .byte	0
01630 0574                        00            .byte	0
01631 0575                        00            .byte	0
01632 0576                        00            .byte	0
01633 0577                        00            .byte	0
01634 0578                        00            .byte	0
01635                                           ! 546  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01636 0579                        00            .byte	0
01637 057A                        00            .byte	0
01638 057B                        00            .byte	0
01639 057C                        00            .byte	0
01640 057D                        00            .byte	0
01641 057E                        00            .byte	0
01642 057F                        00            .byte	0
01643 0580                        00            .byte	0
01644                                           ! 547  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01645 0581                        00            .byte	0
01646 0582                        00            .byte	0
01647 0583                        00            .byte	0
01648 0584                        00            .byte	0
01649 0585                        00            .byte	0
01650 0586                        00            .byte	0
01651 0587                        00            .byte	0
01652 0588                        00            .byte	0
01653                                           ! 548  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01654 0589                        00            .byte	0
01655 058A                        00            .byte	0
01656 058B                        00            .byte	0
01657 058C                        00            .byte	0
01658 058D                        00            .byte	0
01659 058E                        00            .byte	0
01660 058F                        00            .byte	0
01661 0590                        00            .byte	0
01662                                           ! 549 },
01663                                           ! 550 {
01664                                           ! 551  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01665 0591                        00            .byte	0
01666 0592                        00            .byte	0
01667 0593                        00            .byte	0
01668 0594                        00            .byte	0
01669 0595                        00            .byte	0
01670 0596                        00            .byte	0
01671 0597                        00            .byte	0
01672 0598                        00            .byte	0
01673                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01674 0599                        00            .byte	0
01675 059A                        00            .byte	0
01676 059B                        00            .byte	0
01677 059C                        00            .byte	0
01678 059D                        00            .byte	0
01679 059E                        00            .byte	0
01680 059F                        00            .byte	0
01681 05A0                        00            .byte	0
01682                                           ! 553  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01683 05A1                        00            .byte	0
01684 05A2                        00            .byte	0
01685 05A3                        00            .byte	0
01686 05A4                        00            .byte	0
01687 05A5                        00            .byte	0
01688 05A6                        00            .byte	0
01689 05A7                        00            .byte	0
01690 05A8                        00            .byte	0
01691                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01692 05A9                        00            .byte	0
01693 05AA                        00            .byte	0
01694 05AB                        00            .byte	0
01695 05AC                        00            .byte	0
01696 05AD                        00            .byte	0
01697 05AE                        00            .byte	0
01698 05AF                        00            .byte	0
01699 05B0                        00            .byte	0
01700                                           ! 555  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01701 05B1                        00            .byte	0
01702 05B2                        00            .byte	0
01703 05B3                        00            .byte	0
01704 05B4                        00            .byte	0
01705 05B5                        00            .byte	0
01706 05B6                        00            .byte	0
01707 05B7                        00            .byte	0
01708 05B8                        00            .byte	0
01709                                           ! 556  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01710 05B9                        00            .byte	0
01711 05BA                        00            .byte	0
01712 05BB                        00            .byte	0
01713 05BC                        00            .byte	0
01714 05BD                        00            .byte	0
01715 05BE                        00            .byte	0
01716 05BF                        00            .byte	0
01717 05C0                        00            .byte	0
01718                                           ! 557  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01719 05C1                        00            .byte	0
01720 05C2                        00            .byte	0
01721 05C3                        00            .byte	0
01722 05C4                        00            .byte	0
01723 05C5                        00            .byte	0
01724 05C6                        00            .byte	0
01725 05C7                        00            .byte	0
01726 05C8                        00            .byte	0
01727                                           ! 558  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01728 05C9                        00            .byte	0
01729 05CA                        00            .byte	0
01730 05CB                        00            .byte	0
01731 05CC                        00            .byte	0
01732 05CD                        00            .byte	0
01733 05CE                        00            .byte	0
01734 05CF                        00            .byte	0
01735 05D0                        00            .byte	0
01736                                           ! 559 },
01737                                           ! 560 {
01738                                           ! 561  40, 24, 8, 0x00, 0x20,
01739 05D1                        28            .byte	$28
01740 05D2                        18            .byte	$18
01741 05D3                        08            .byte	8
01742 05D4                        00            .byte	0
01743 05D5                        20            .byte	$20
01744                                           ! 562  0x09, 0x0f, 0x00, 0x06,
01745 05D6                        09            .byte	9
01746 05D7                        0F            .byte	$F
01747 05D8                        00            .byte	0
01748 05D9                        06            .byte	6
01749                                           ! 563  0x63,
01750 05DA                        63            .byte	$63
01751                                           ! 564  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01752 05DB                        2D            .byte	$2D
01753 05DC                        27            .byte	$27
01754 05DD                        28            .byte	$28
01755 05DE                        90            .byte	$90
01756 05DF                        2B            .byte	$2B
01757 05E0                        80            .byte	$80
01758 05E1                        BF            .byte	$BF
01759 05E2                        1F            .byte	$1F
01760                                           ! 565  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01761 05E3                        00            .byte	0
01762 05E4                        C0            .byte	$C0
01763 05E5                        00            .byte	0
01764 05E6                        00            .byte	0
01765 05E7                        00            .byte	0
01766 05E8                        00            .byte	0
01767 05E9                        00            .byte	0
01768 05EA                        00            .byte	0
01769                                           ! 566  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01770 05EB                        9C            .byte	$9C
01771 05EC                        8E            .byte	$8E
01772 05ED                        8F            .byte	$8F
01773 05EE                        14            .byte	$14
01774 05EF                        00            .byte	0
01775 05F0                        96            .byte	$96
01776 05F1                        B9            .byte	$B9
01777 05F2                        E3            .byte	$E3
01778                                           ! 567  0xff,
01779 05F3                        FF            .byte	$FF
01780                                           ! 568  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01781 05F4                        00            .byte	0
01782 05F5                        01            .byte	1
01783 05F6                        02            .byte	2
01784 05F7                        03            .byte	3
01785 05F8                        04            .byte	4
01786 05F9                        05            .byte	5
01787 05FA                        06            .byte	6
01788 05FB                        07            .byte	7
01789                                           ! 569  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01790 05FC                        10            .byte	$10
01791 05FD                        11            .byte	$11
01792 05FE                        12            .byte	$12
01793 05FF                        13            .byte	$13
01794 0600                        14            .byte	$14
01795 0601                        15            .byte	$15
01796 0602                        16            .byte	$16
01797 0603                        17            .byte	$17
01798                                           ! 570  0x01, 0x00, 0x0f, 0x00,
01799 0604                        01            .byte	1
01800 0605                        00            .byte	0
01801 0606                        0F            .byte	$F
01802 0607                        00            .byte	0
01803                                           ! 571  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01804 0608                        00            .byte	0
01805 0609                        00            .byte	0
01806 060A                        00            .byte	0
01807 060B                        00            .byte	0
01808 060C                        00            .byte	0
01809 060D                        00            .byte	0
01810 060E                        05            .byte	5
01811 060F                        0F            .byte	$F
01812 0610                        FF            .byte	$FF
01813                                           ! 572 },
01814                                           ! 573 {
01815                                           ! 574  80, 24, 8, 0x00, 0x40,
01816 0611                        50            .byte	$50
01817 0612                        18            .byte	$18
01818 0613                        08            .byte	8
01819 0614                        00            .byte	0
01820 0615                        40            .byte	$40
01821                                           ! 575  0x01, 0x0f, 0x00, 0x06,
01822 0616                        01            .byte	1
01823 0617                        0F            .byte	$F
01824 0618                        00            .byte	0
01825 0619                        06            .byte	6
01826                                           ! 576  0x63,
01827 061A                        63            .byte	$63
01828                                           ! 577  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01829 061B                        5F            .byte	$5F
01830 061C                        4F            .byte	$4F
01831 061D                        50            .byte	$50
01832 061E                        82            .byte	$82
01833 061F                        54            .byte	$54
01834 0620                        80            .byte	$80
01835 0621                        BF            .byte	$BF
01836 0622                        1F            .byte	$1F
01837                                           ! 578  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01838 0623                        00            .byte	0
01839 0624                        C0            .byte	$C0
01840 0625                        00            .byte	0
01841 0626                        00            .byte	0
01842 0627                        00            .byte	0
01843 0628                        00            .byte	0
01844 0629                        00            .byte	0
01845 062A                        00            .byte	0
01846                                           ! 579  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01847 062B                        9C            .byte	$9C
01848 062C                        8E            .byte	$8E
01849 062D                        8F            .byte	$8F
01850 062E                        28            .byte	$28
01851 062F                        00            .byte	0
01852 0630                        96            .byte	$96
01853 0631                        B9            .byte	$B9
01854 0632                        E3            .byte	$E3
01855                                           ! 580  0xff,
01856 0633                        FF            .byte	$FF
01857                                           ! 581  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01858 0634                        00            .byte	0
01859 0635                        01            .byte	1
01860 0636                        02            .byte	2
01861 0637                        03            .byte	3
01862 0638                        04            .byte	4
01863 0639                        05            .byte	5
01864 063A                        06            .byte	6
01865 063B                        07            .byte	7
01866                                           ! 582  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01867 063C                        10            .byte	$10
01868 063D                        11            .byte	$11
01869 063E                        12            .byte	$12
01870 063F                        13            .byte	$13
01871 0640                        14            .byte	$14
01872 0641                        15            .byte	$15
01873 0642                        16            .byte	$16
01874 0643                        17            .byte	$17
01875                                           ! 583  0x01, 0x00, 0x0f, 0x00,
01876 0644                        01            .byte	1
01877 0645                        00            .byte	0
01878 0646                        0F            .byte	$F
01879 0647                        00            .byte	0
01880                                           ! 584  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01881 0648                        00            .byte	0
01882 0649                        00            .byte	0
01883 064A                        00            .byte	0
01884 064B                        00            .byte	0
01885 064C                        00            .byte	0
01886 064D                        00            .byte	0
01887 064E                        05            .byte	5
01888 064F                        0F            .byte	$F
01889 0650                        FF            .byte	$FF
01890                                           ! 585 },
01891                                           ! 586 {
01892                                           ! 587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01893 0651                        00            .byte	0
01894 0652                        00            .byte	0
01895 0653                        00            .byte	0
01896 0654                        00            .byte	0
01897 0655                        00            .byte	0
01898 0656                        00            .byte	0
01899 0657                        00            .byte	0
01900 0658                        00            .byte	0
01901                                           ! 588  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01902 0659                        00            .byte	0
01903 065A                        00            .byte	0
01904 065B                        00            .byte	0
01905 065C                        00            .byte	0
01906 065D                        00            .byte	0
01907 065E                        00            .byte	0
01908 065F                        00            .byte	0
01909 0660                        00            .byte	0
01910                                           ! 589  0x00, 0x00, 0x00, 0x00, 0x00,
01911 0661                        00            .byte	0
01912 0662                        00            .byte	0
01913 0663                        00            .byte	0
01914 0664                        00            .byte	0
01915                                           ! 589  0x00, 0x00, 0x00,
01916 0665                        00            .byte	0
01917 0666                        00            .byte	0
01918 0667                        00            .byte	0
01919 0668                        00            .byte	0
01920                                           ! 590  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01921 0669                        00            .byte	0
01922 066A                        00            .byte	0
01923 066B                        00            .byte	0
01924 066C                        00            .byte	0
01925 066D                        00            .byte	0
01926 066E                        00            .byte	0
01927 066F                        00            .byte	0
01928 0670                        00            .byte	0
01929                                           ! 591  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01930 0671                        00            .byte	0
01931 0672                        00            .byte	0
01932 0673                        00            .byte	0
01933 0674                        00            .byte	0
01934 0675                        00            .byte	0
01935 0676                        00            .byte	0
01936 0677                        00            .byte	0
01937 0678                        00            .byte	0
01938                                           ! 592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01939 0679                        00            .byte	0
01940 067A                        00            .byte	0
01941 067B                        00            .byte	0
01942 067C                        00            .byte	0
01943 067D                        00            .byte	0
01944 067E                        00            .byte	0
01945 067F                        00            .byte	0
01946 0680                        00            .byte	0
01947                                           ! 593  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01948 0681                        00            .byte	0
01949 0682                        00            .byte	0
01950 0683                        00            .byte	0
01951 0684                        00            .byte	0
01952 0685                        00            .byte	0
01953 0686                        00            .byte	0
01954 0687                        00            .byte	0
01955 0688                        00            .byte	0
01956                                           ! 594  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01957 0689                        00            .byte	0
01958 068A                        00            .byte	0
01959 068B                        00            .byte	0
01960 068C                        00            .byte	0
01961 068D                        00            .byte	0
01962 068E                        00            .byte	0
01963 068F                        00            .byte	0
01964 0690                        00            .byte	0
01965                                           ! 595 },
01966                                           ! 596 {
01967                                           ! 597  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01968 0691                        00            .byte	0
01969 0692                        00            .byte	0
01970 0693                        00            .byte	0
01971 0694                        00            .byte	0
01972 0695                        00            .byte	0
01973 0696                        00            .byte	0
01974 0697                        00            .byte	0
01975 0698                        00            .byte	0
01976                                           ! 598  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01977 0699                        00            .byte	0
01978 069A                        00            .byte	0
01979 069B                        00            .byte	0
01980 069C                        00            .byte	0
01981 069D                        00            .byte	0
01982 069E                        00            .byte	0
01983 069F                        00            .byte	0
01984 06A0                        00            .byte	0
01985                                           ! 599  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01986 06A1                        00            .byte	0
01987 06A2                        00            .byte	0
01988 06A3                        00            .byte	0
01989 06A4                        00            .byte	0
01990 06A5                        00            .byte	0
01991 06A6                        00            .byte	0
01992 06A7                        00            .byte	0
01993 06A8                        00            .byte	0
01994                                           ! 600  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01995 06A9                        00            .byte	0
01996 06AA                        00            .byte	0
01997 06AB                        00            .byte	0
01998 06AC                        00            .byte	0
01999 06AD                        00            .byte	0
02000 06AE                        00            .byte	0
02001 06AF                        00            .byte	0
02002 06B0                        00            .byte	0
02003                                           ! 601  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02004 06B1                        00            .byte	0
02005 06B2                        00            .byte	0
02006 06B3                        00            .byte	0
02007 06B4                        00            .byte	0
02008 06B5                        00            .byte	0
02009 06B6                        00            .byte	0
02010 06B7                        00            .byte	0
02011 06B8                        00            .byte	0
02012                                           ! 602  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02013 06B9                        00            .byte	0
02014 06BA                        00            .byte	0
02015 06BB                        00            .byte	0
02016 06BC                        00            .byte	0
02017 06BD                        00            .byte	0
02018 06BE                        00            .byte	0
02019 06BF                        00            .byte	0
02020 06C0                        00            .byte	0
02021                                           ! 603  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02022 06C1                        00            .byte	0
02023 06C2                        00            .byte	0
02024 06C3                        00            .byte	0
02025 06C4                        00            .byte	0
02026 06C5                        00            .byte	0
02027 06C6                        00            .byte	0
02028 06C7                        00            .byte	0
02029 06C8                        00            .byte	0
02030                                           ! 604  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02031 06C9                        00            .byte	0
02032 06CA                        00            .byte	0
02033 06CB                        00            .byte	0
02034 06CC                        00            .byte	0
02035 06CD                        00            .byte	0
02036 06CE                        00            .byte	0
02037 06CF                        00            .byte	0
02038 06D0                        00            .byte	0
02039                                           ! 605 },
02040                                           ! 606 {
02041                                           ! 607  80, 24, 14, 0x00, 0x80,
02042 06D1                        50            .byte	$50
02043 06D2                        18            .byte	$18
02044 06D3                        0E            .byte	$E
02045 06D4                        00            .byte	0
02046 06D5                        80            .byte	$80
02047                                           ! 608  0x01, 0x0f, 0x00, 0x06,
02048 06D6                        01            .byte	1
02049 06D7                        0F            .byte	$F
02050 06D8                        00            .byte	0
02051 06D9                        06            .byte	6
02052                                           ! 609  0xa3,
02053 06DA                        A3            .byte	$A3
02054                                           ! 610  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02055 06DB                        5F            .byte	$5F
02056 06DC                        4F            .byte	$4F
02057 06DD                        50            .byte	$50
02058 06DE                        82            .byte	$82
02059 06DF                        54            .byte	$54
02060 06E0                        80            .byte	$80
02061 06E1                        BF            .byte	$BF
02062 06E2                        1F            .byte	$1F
02063                                           ! 611  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02064 06E3                        00            .byte	0
02065 06E4                        40            .byte	$40
02066 06E5                        00            .byte	0
02067 06E6                        00            .byte	0
02068 06E7                        00            .byte	0
02069 06E8                        00            .byte	0
02070 06E9                        00            .byte	0
02071 06EA                        00            .byte	0
02072                                           ! 612  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02073 06EB                        83            .byte	$83
02074 06EC                        85            .byte	$85
02075 06ED                        5D            .byte	$5D
02076 06EE                        28            .byte	$28
02077 06EF                        0F            .byte	$F
02078 06F0                        63            .byte	$63
02079 06F1                        BA            .byte	$BA
02080 06F2                        E3            .byte	$E3
02081                                           ! 613  0xff,
02082 06F3                        FF            .byte	$FF
02083                                           ! 614  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
02084 06F4                        00            .byte	0
02085 06F5                        08            .byte	8
02086 06F6                        00            .byte	0
02087 06F7                        00            .byte	0
02088 06F8                        18            .byte	$18
02089 06F9                        18            .byte	$18
02090 06FA                        00            .byte	0
02091 06FB                        00            .byte	0
02092                                           ! 615  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
02093 06FC                        00            .byte	0
02094 06FD                        08            .byte	8
02095 06FE                        00            .byte	0
02096 06FF                        00            .byte	0
02097 0700                        00            .byte	0
02098 0701                        18            .byte	$18
02099 0702                        00            .byte	0
02100 0703                        00            .byte	0
02101                                           ! 616  0x01, 0x00, 0x01, 0x00,
02102 0704                        01            .byte	1
02103 0705                        00            .byte	0
02104 0706                        01            .byte	1
02105 0707                        00            .byte	0
02106                                           ! 617  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02107 0708                        00            .byte	0
02108 0709                        00            .byte	0
02109 070A                        00            .byte	0
02110 070B                        00            .byte	0
02111 070C                        00            .byte	0
02112 070D                        00            .byte	0
02113 070E                        05            .byte	5
02114 070F                        0F            .byte	$F
02115 0710                        FF            .byte	$FF
02116                                           ! 618 },
02117                                           ! 619 {
02118                                           ! 620  80, 24, 14, 0x00, 0x80,
02119 0711                        50            .byte	$50
02120 0712                        18            .byte	$18
02121 0713                        0E            .byte	$E
02122 0714                        00            .byte	0
02123 0715                        80            .byte	$80
02124                                           ! 621  0x01, 0x0f, 0x00, 0x06,
02125 0716                        01            .byte	1
02126 0717                        0F            .byte	$F
02127 0718                        00            .byte	0
02128 0719                        06            .byte	6
02129                                           ! 622  0xa3,
02130 071A                        A3            .byte	$A3
02131                                           ! 623  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02132 071B                        5F            .byte	$5F
02133 071C                        4F            .byte	$4F
02134 071D                        50            .byte	$50
02135 071E                        82            .byte	$82
02136 071F                        54            .byte	$54
02137 0720                        80            .byte	$80
02138 0721                        BF            .byte	$BF
02139 0722                        1F            .byte	$1F
02140                                           ! 624  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02141 0723                        00            .byte	0
02142 0724                        40            .byte	$40
02143 0725                        00            .byte	0
02144 0726                        00            .byte	0
02145 0727                        00            .byte	0
02146 0728                        00            .byte	0
02147 0729                        00            .byte	0
02148 072A                        00            .byte	0
02149                                           ! 625  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02150 072B                        83            .byte	$83
02151 072C                        85            .byte	$85
02152 072D                        5D            .byte	$5D
02153 072E                        28            .byte	$28
02154 072F                        0F            .byte	$F
02155 0730                        63            .byte	$63
02156 0731                        BA            .byte	$BA
02157 0732                        E3            .byte	$E3
02158                                           ! 626  0xff,
02159 0733                        FF            .byte	$FF
02160                                           ! 627  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02161 0734                        00            .byte	0
02162 0735                        01            .byte	1
02163 0736                        02            .byte	2
02164 0737                        03            .byte	3
02165 0738                        04            .byte	4
02166 0739                        05            .byte	5
02167 073A                        14            .byte	$14
02168 073B                        07            .byte	7
02169                                           ! 628  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02170 073C                        38            .byte	$38
02171 073D                        39            .byte	$39
02172 073E                        3A            .byte	$3A
02173 073F                        3B            .byte	$3B
02174 0740                        3C            .byte	$3C
02175 0741                        3D            .byte	$3D
02176 0742                        3E            .byte	$3E
02177 0743                        3F            .byte	$3F
02178                                           ! 629  0x01, 0x00, 0x0f, 0x00,
02179 0744                        01            .byte	1
02180 0745                        00            .byte	0
02181 0746                        0F            .byte	$F
02182 0747                        00            .byte	0
02183                                           ! 630  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02184 0748                        00            .byte	0
02185 0749                        00            .byte	0
02186 074A                        00            .byte	0
02187 074B                        00            .byte	0
02188 074C                        00            .byte	0
02189 074D                        00            .byte	0
02190 074E                        05            .byte	5
02191 074F                        0F            .byte	$F
02192 0750                        FF            .byte	$FF
02193                                           ! 631 },
02194                                           ! 632 {
02195                                           ! 633  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02196 0751                        00            .byte	0
02197 0752                        00            .byte	0
02198 0753                        00            .byte	0
02199 0754                        00            .byte	0
02200 0755                        00            .byte	0
02201 0756                        00            .byte	0
02202 0757                        00            .byte	0
02203 0758                        00            .byte	0
02204                                           ! 634  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02205 0759                        00            .byte	0
02206 075A                        00            .byte	0
02207 075B                        00            .byte	0
02208 075C                        00            .byte	0
02209 075D                        00            .byte	0
02210 075E                        00            .byte	0
02211 075F                        00            .byte	0
02212 0760                        00            .byte	0
02213                                           ! 635  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02214 0761                        00            .byte	0
02215 0762                        00            .byte	0
02216 0763                        00            .byte	0
02217 0764                        00            .byte	0
02218 0765                        00            .byte	0
02219 0766                        00            .byte	0
02220 0767                        00            .byte	0
02221 0768                        00            .byte	0
02222                                           ! 636  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02223 0769                        00            .byte	0
02224 076A                        00            .byte	0
02225 076B                        00            .byte	0
02226 076C                        00            .byte	0
02227 076D                        00            .byte	0
02228 076E                        00            .byte	0
02229 076F                        00            .byte	0
02230 0770                        00            .byte	0
02231                                           ! 637  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02232 0771                        00            .byte	0
02233 0772                        00            .byte	0
02234 0773                        00            .byte	0
02235 0774                        00            .byte	0
02236 0775                        00            .byte	0
02237 0776                        00            .byte	0
02238 0777                        00            .byte	0
02239 0778                        00            .byte	0
02240                                           ! 638  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02241 0779                        00            .byte	0
02242 077A                        00            .byte	0
02243 077B                        00            .byte	0
02244 077C                        00            .byte	0
02245 077D                        00            .byte	0
02246 077E                        00            .byte	0
02247 077F                        00            .byte	0
02248 0780                        00            .byte	0
02249                                           ! 639  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02250 0781                        00            .byte	0
02251 0782                        00            .byte	0
02252 0783                        00            .byte	0
02253 0784                        00            .byte	0
02254 0785                        00            .byte	0
02255 0786                        00            .byte	0
02256 0787                        00            .byte	0
02257 0788                        00            .byte	0
02258                                           ! 640  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02259 0789                        00            .byte	0
02260 078A                        00            .byte	0
02261 078B                        00            .byte	0
02262 078C                        00            .byte	0
02263 078D                        00            .byte	0
02264 078E                        00            .byte	0
02265 078F                        00            .byte	0
02266 0790                        00            .byte	0
02267                                           ! 641 },
02268                                           ! 642 {
02269                                           ! 643  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02270 0791                        00            .byte	0
02271 0792                        00            .byte	0
02272 0793                        00            .byte	0
02273 0794                        00            .byte	0
02274 0795                        00            .byte	0
02275 0796                        00            .byte	0
02276 0797                        00            .byte	0
02277 0798                        00            .byte	0
02278                                           ! 644  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02279 0799                        00            .byte	0
02280 079A                        00            .byte	0
02281 079B                        00            .byte	0
02282 079C                        00            .byte	0
02283 079D                        00            .byte	0
02284 079E                        00            .byte	0
02285 079F                        00            .byte	0
02286 07A0                        00            .byte	0
02287                                           ! 645  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02288 07A1                        00            .byte	0
02289 07A2                        00            .byte	0
02290 07A3                        00            .byte	0
02291 07A4                        00            .byte	0
02292 07A5                        00            .byte	0
02293 07A6                        00            .byte	0
02294 07A7                        00            .byte	0
02295 07A8                        00            .byte	0
02296                                           ! 646  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02297 07A9                        00            .byte	0
02298 07AA                        00            .byte	0
02299 07AB                        00            .byte	0
02300 07AC                        00            .byte	0
02301 07AD                        00            .byte	0
02302 07AE                        00            .byte	0
02303 07AF                        00            .byte	0
02304 07B0                        00            .byte	0
02305                                           ! 647  
02306                                           ! 647 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02307 07B1                        00            .byte	0
02308 07B2                        00            .byte	0
02309 07B3                        00            .byte	0
02310 07B4                        00            .byte	0
02311 07B5                        00            .byte	0
02312 07B6                        00            .byte	0
02313 07B7                        00            .byte	0
02314 07B8                        00            .byte	0
02315                                           ! 648  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02316 07B9                        00            .byte	0
02317 07BA                        00            .byte	0
02318 07BB                        00            .byte	0
02319 07BC                        00            .byte	0
02320 07BD                        00            .byte	0
02321 07BE                        00            .byte	0
02322 07BF                        00            .byte	0
02323 07C0                        00            .byte	0
02324                                           ! 649  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02325 07C1                        00            .byte	0
02326 07C2                        00            .byte	0
02327 07C3                        00            .byte	0
02328 07C4                        00            .byte	0
02329 07C5                        00            .byte	0
02330 07C6                        00            .byte	0
02331 07C7                        00            .byte	0
02332 07C8                        00            .byte	0
02333                                           ! 650  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02334 07C9                        00            .byte	0
02335 07CA                        00            .byte	0
02336 07CB                        00            .byte	0
02337 07CC                        00            .byte	0
02338 07CD                        00            .byte	0
02339 07CE                        00            .byte	0
02340 07CF                        00            .byte	0
02341 07D0                        00            .byte	0
02342                                           ! 651 },
02343                                           ! 652 {
02344                                           ! 653  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02345 07D1                        00            .byte	0
02346 07D2                        00            .byte	0
02347 07D3                        00            .byte	0
02348 07D4                        00            .byte	0
02349 07D5                        00            .byte	0
02350 07D6                        00            .byte	0
02351 07D7                        00            .byte	0
02352 07D8                        00            .byte	0
02353                                           ! 654  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02354 07D9                        00            .byte	0
02355 07DA                        00            .byte	0
02356 07DB                        00            .byte	0
02357 07DC                        00            .byte	0
02358 07DD                        00            .byte	0
02359 07DE                        00            .byte	0
02360 07DF                        00            .byte	0
02361 07E0                        00            .byte	0
02362                                           ! 655  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02363 07E1                        00            .byte	0
02364 07E2                        00            .byte	0
02365 07E3                        00            .byte	0
02366 07E4                        00            .byte	0
02367 07E5                        00            .byte	0
02368 07E6                        00            .byte	0
02369 07E7                        00            .byte	0
02370 07E8                        00            .byte	0
02371                                           ! 656  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02372 07E9                        00            .byte	0
02373 07EA                        00            .byte	0
02374 07EB                        00            .byte	0
02375 07EC                        00            .byte	0
02376 07ED                        00            .byte	0
02377 07EE                        00            .byte	0
02378 07EF                        00            .byte	0
02379 07F0                        00            .byte	0
02380                                           ! 657  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02381 07F1                        00            .byte	0
02382 07F2                        00            .byte	0
02383 07F3                        00            .byte	0
02384 07F4                        00            .byte	0
02385 07F5                        00            .byte	0
02386 07F6                        00            .byte	0
02387 07F7                        00            .byte	0
02388 07F8                        00            .byte	0
02389                                           ! 658  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02390 07F9                        00            .byte	0
02391 07FA                        00            .byte	0
02392 07FB                        00            .byte	0
02393 07FC                        00            .byte	0
02394 07FD                        00            .byte	0
02395 07FE                        00            .byte	0
02396 07FF                        00            .byte	0
02397 0800                        00            .byte	0
02398                                           ! 659  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02399 0801                        00            .byte	0
02400 0802                        00            .byte	0
02401 0803                        00            .byte	0
02402 0804                        00            .byte	0
02403 0805                        00            .byte	0
02404 0806                        00            .byte	0
02405 0807                        00            .byte	0
02406 0808                        00            .byte	0
02407                                           ! 660  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02408 0809                        00            .byte	0
02409 080A                        00            .byte	0
02410 080B                        00            .byte	0
02411 080C                        00            .byte	0
02412 080D                        00            .byte	0
02413 080E                        00            .byte	0
02414 080F                        00            .byte	0
02415 0810                        00            .byte	0
02416                                           ! 661 },
02417                                           ! 662 {
02418                                           ! 663  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02419 0811                        00            .byte	0
02420 0812                        00            .byte	0
02421 0813                        00            .byte	0
02422 0814                        00            .byte	0
02423 0815                        00            .byte	0
02424 0816                        00            .byte	0
02425 0817                        00            .byte	0
02426 0818                        00            .byte	0
02427                                           ! 664  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02428 0819                        00            .byte	0
02429 081A                        00            .byte	0
02430 081B                        00            .byte	0
02431 081C                        00            .byte	0
02432 081D                        00            .byte	0
02433 081E                        00            .byte	0
02434 081F                        00            .byte	0
02435 0820                        00            .byte	0
02436                                           ! 665  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02437 0821                        00            .byte	0
02438 0822                        00            .byte	0
02439 0823                        00            .byte	0
02440 0824                        00            .byte	0
02441 0825                        00            .byte	0
02442 0826                        00            .byte	0
02443 0827                        00            .byte	0
02444 0828                        00            .byte	0
02445                                           ! 666  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02446 0829                        00            .byte	0
02447 082A                        00            .byte	0
02448 082B                        00            .byte	0
02449 082C                        00            .byte	0
02450 082D                        00            .byte	0
02451 082E                        00            .byte	0
02452 082F                        00            .byte	0
02453 0830                        00            .byte	0
02454                                           ! 667  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02455 0831                        00            .byte	0
02456 0832                        00            .byte	0
02457 0833                        00            .byte	0
02458 0834                        00            .byte	0
02459 0835                        00            .byte	0
02460 0836                        00            .byte	0
02461 0837                        00            .byte	0
02462 0838                        00            .byte	0
02463                                           ! 668  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02464 0839                        00            .byte	0
02465 083A                        00            .byte	0
02466 083B                        00            .byte	0
02467 083C                        00            .byte	0
02468 083D                        00            .byte	0
02469 083E                        00            .byte	0
02470 083F                        00            .byte	0
02471 0840                        00            .byte	0
02472                                           ! 669  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02473 0841                        00            .byte	0
02474 0842                        00            .byte	0
02475 0843                        00            .byte	0
02476 0844                        00            .byte	0
02477 0845                        00            .byte	0
02478 0846                        00            .byte	0
02479 0847                        00            .byte	0
02480 0848                        00            .byte	0
02481                                           ! 670  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02482 0849                        00            .byte	0
02483 084A                        00            .byte	0
02484 084B                        00            .byte	0
02485 084C                        00            .byte	0
02486 084D                        00            .byte	0
02487 084E                        00            .byte	0
02488 084F                        00            .byte	0
02489 0850                        00            .byte	0
02490                                           ! 671 },
02491                                           ! 672 {
02492                                           ! 673  40, 24, 16, 0x00, 0x08,
02493 0851                        28            .byte	$28
02494 0852                        18            .byte	$18
02495 0853                        10            .byte	$10
02496 0854                        00            .byte	0
02497 0855                        08            .byte	8
02498                                           ! 674  0x08, 0x03, 0x00, 0x02,
02499 0856                        08            .byte	8
02500 0857                        03            .byte	3
02501 0858                        00            .byte	0
02502 0859                        02            .byte	2
02503                                           ! 675  0x67,
02504 085A                        67            .byte	$67
02505                                           ! 676  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02506 085B                        2D            .byte	$2D
02507 085C                        27            .byte	$27
02508 085D                        28            .byte	$28
02509 085E                        90            .byte	$90
02510 085F                        2B            .byte	$2B
02511 0860                        A0            .byte	$A0
02512 0861                        BF            .byte	$BF
02513 0862                        1F            .byte	$1F
02514                                           ! 677  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02515 0863                        00            .byte	0
02516 0864                        4F            .byte	$4F
02517 0865                        0D            .byte	$D
02518 0866                        0E            .byte	$E
02519 0867                        00            .byte	0
02520 0868                        00            .byte	0
02521 0869                        00            .byte	0
02522 086A                        00            .byte	0
02523                                           ! 678  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02524 086B                        9C            .byte	$9C
02525 086C                        8E            .byte	$8E
02526 086D                        8F            .byte	$8F
02527 086E                        14            .byte	$14
02528 086F                        1F            .byte	$1F
02529 0870                        96            .byte	$96
02530 0871                        B9            .byte	$B9
02531 0872                        A3            .byte	$A3
02532                                           ! 679  0xff,
02533 0873                        FF            .byte	$FF
02534                                           ! 680  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02535 0874                        00            .byte	0
02536 0875                        01            .byte	1
02537 0876                        02            .byte	2
02538 0877                        03            .byte	3
02539 0878                        04            .byte	4
02540 0879                        05            .byte	5
02541 087A                        14            .byte	$14
02542 087B                        07            .byte	7
02543                                           ! 681  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02544 087C                        38            .byte	$38
02545 087D                        39            .byte	$39
02546 087E                        3A            .byte	$3A
02547 087F                        3B            .byte	$3B
02548 0880                        3C            .byte	$3C
02549 0881                        3D            .byte	$3D
02550 0882                        3E            .byte	$3E
02551 0883                        3F            .byte	$3F
02552                                           ! 682  0x0c, 0x00, 0x0f, 0x08,
02553 0884                        0C            .byte	$C
02554 0885                        00            .byte	0
02555 0886                        0F            .byte	$F
02556 0887                        08            .byte	8
02557                                           ! 683  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02558 0888                        00            .byte	0
02559 0889                        00            .byte	0
02560 088A                        00            .byte	0
02561 088B                        00            .byte	0
02562 088C                        00            .byte	0
02563 088D                        10            .byte	$10
02564 088E                        0E            .byte	$E
02565 088F                        0F            .byte	$F
02566 0890                        FF            .byte	$FF
02567                                           ! 684 },
02568                                           ! 685 {
02569                                           ! 686  80, 24, 16, 0x00, 0x10,
02570 0891                        50            .byte	$50
02571 0892                        18            .byte	$18
02572 0893                        10            .byte	$10
02573 0894                        00            .byte	0
02574 0895                        10            .byte	$10
02575                                           ! 687  0x00, 0x03, 0x00, 0x02,
02576 0896                        00            .byte	0
02577 0897                        03            .byte	3
02578 0898                        00            .byte	0
02579 0899                        02            .byte	2
02580                                           ! 688  0x67,
02581 089A                        67            .byte	$67
02582                                           ! 689  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02583 089B                        5F            .byte	$5F
02584 089C                        4F            .byte	$4F
02585 089D                        50            .byte	$50
02586 089E                        82            .byte	$82
02587 089F                        55            .byte	$55
02588 08A0                        81            .byte	$81
02589 08A1                        BF            .byte	$BF
02590 08A2                        1F            .byte	$1F
02591                                           ! 690  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02592 08A3                        00            .byte	0
02593 08A4                        4F            .byte	$4F
02594 08A5                        0D            .byte	$D
02595 08A6                        0E            .byte	$E
02596 08A7                        00            .byte	0
02597 08A8                        00            .byte	0
02598 08A9                        00            .byte	0
02599 08AA                        00            .byte	0
02600                                           ! 691  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02601 08AB                        9C            .byte	$9C
02602 08AC                        8E            .byte	$8E
02603 08AD                        8F            .byte	$8F
02604 08AE                        28            .byte	$28
02605 08AF                        1F            .byte	$1F
02606 08B0                        96            .byte	$96
02607 08B1                        B9            .byte	$B9
02608 08B2                        A3            .byte	$A3
02609                                           ! 692  0xff,
02610 08B3                        FF            .byte	$FF
02611                                           ! 693  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02612 08B4                        00            .byte	0
02613 08B5                        01            .byte	1
02614 08B6                        02            .byte	2
02615 08B7                        03            .byte	3
02616 08B8                        04            .byte	4
02617 08B9                        05            .byte	5
02618 08BA                        14            .byte	$14
02619 08BB                        07            .byte	7
02620                                           ! 694  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02621 08BC                        38            .byte	$38
02622 08BD                        39            .byte	$39
02623 08BE                        3A            .byte	$3A
02624 08BF                        3B            .byte	$3B
02625 08C0                        3C            .byte	$3C
02626 08C1                        3D            .byte	$3D
02627 08C2                        3E            .byte	$3E
02628 08C3                        3F            .byte	$3F
02629                                           ! 695  0x0c, 0x00, 0x0f, 0x08,
02630 08C4                        0C            .byte	$C
02631 08C5                        00            .byte	0
02632 08C6                        0F            .byte	$F
02633 08C7                        08            .byte	8
02634                                           ! 696  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02635 08C8                        00            .byte	0
02636 08C9                        00            .byte	0
02637 08CA                        00            .byte	0
02638 08CB                        00            .byte	0
02639 08CC                        00            .byte	0
02640 08CD                        10            .byte	$10
02641 08CE                        0E            .byte	$E
02642 08CF                        0F            .byte	$F
02643 08D0                        FF            .byte	$FF
02644                                           ! 697 },
02645                                           ! 698 {
02646                                           ! 699  80, 24, 16, 0x00, 0x10,
02647 08D1                        50            .byte	$50
02648 08D2                        18            .byte	$18
02649 08D3                        10            .byte	$10
02650 08D4                        00            .byte	0
02651 08D5                        10            .byte	$10
02652                                           ! 700  0x00, 0x03, 0x00, 0x02,
02653 08D6                        00            .byte	0
02654 08D7                        03            .byte	3
02655 08D8                        00            .byte	0
02656 08D9                        02            .byte	2
02657                                           ! 701  0x66,
02658 08DA                        66            .byte	$66
02659                                           ! 702  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02660 08DB                        5F            .byte	$5F
02661 08DC                        4F            .byte	$4F
02662 08DD                        50            .byte	$50
02663 08DE                        82            .byte	$82
02664 08DF                        55            .byte	$55
02665 08E0                        81            .byte	$81
02666 08E1                        BF            .byte	$BF
02667 08E2                        1F            .byte	$1F
02668                                           ! 703  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02669 08E3                        00            .byte	0
02670 08E4                        4F            .byte	$4F
02671 08E5                        0D            .byte	$D
02672 08E6                        0E            .byte	$E
02673 08E7                        00            .byte	0
02674 08E8                        00            .byte	0
02675 08E9                        00            .byte	0
02676 08EA                        00            .byte	0
02677                                           ! 704  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02678 08EB                        9C            .byte	$9C
02679 08EC                        8E            .byte	$8E
02680 08ED                        8F            .byte	$8F
02681 08EE                        28            .byte	$28
02682 08EF                        0F            .byte	$F
02683 08F0                        96            .byte	$96
02684 08F1                        B9            .byte	$B9
02685 08F2                        A3            .byte	$A3
02686                                           ! 705  0xff,
02687 08F3                        FF            .byte	$FF
02688                                           ! 706  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02689 08F4                        00            .byte	0
02690 08F5                        08            .byte	8
02691 08F6                        08            .byte	8
02692 08F7                        08            .byte	8
02693 08F8                        08            .byte	8
02694 08F9                        08            .byte	8
02695 08FA                        08            .byte	8
02696 08FB                        08            .byte	8
02697                                           ! 707  0x10,
02698                                           ! 707  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02699 08FC                        10            .byte	$10
02700 08FD                        18            .byte	$18
02701 08FE                        18            .byte	$18
02702 08FF                        18            .byte	$18
02703 0900                        18            .byte	$18
02704 0901                        18            .byte	$18
02705 0902                        18            .byte	$18
02706 0903                        18            .byte	$18
02707                                           ! 708  0x0e, 0x00, 0x0f, 0x08,
02708 0904                        0E            .byte	$E
02709 0905                        00            .byte	0
02710 0906                        0F            .byte	$F
02711 0907                        08            .byte	8
02712                                           ! 709  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02713 0908                        00            .byte	0
02714 0909                        00            .byte	0
02715 090A                        00            .byte	0
02716 090B                        00            .byte	0
02717 090C                        00            .byte	0
02718 090D                        10            .byte	$10
02719 090E                        0A            .byte	$A
02720 090F                        0F            .byte	$F
02721 0910                        FF            .byte	$FF
02722                                           ! 710 },
02723                                           ! 711 {
02724                                           ! 712  80, 29, 16, 0x00, 0x00,
02725 0911                        50            .byte	$50
02726 0912                        1D            .byte	$1D
02727 0913                        10            .byte	$10
02728 0914                        00            .byte	0
02729 0915                        00            .byte	0
02730                                           ! 713  0x01, 0x0f, 0x00, 0x06,
02731 0916                        01            .byte	1
02732 0917                        0F            .byte	$F
02733 0918                        00            .byte	0
02734 0919                        06            .byte	6
02735                                           ! 714  0xe3,
02736 091A                        E3            .byte	$E3
02737                                           ! 715  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02738 091B                        5F            .byte	$5F
02739 091C                        4F            .byte	$4F
02740 091D                        50            .byte	$50
02741 091E                        82            .byte	$82
02742 091F                        54            .byte	$54
02743 0920                        80            .byte	$80
02744 0921                        0B            .byte	$B
02745 0922                        3E            .byte	$3E
02746                                           ! 716  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02747 0923                        00            .byte	0
02748 0924                        40            .byte	$40
02749 0925                        00            .byte	0
02750 0926                        00            .byte	0
02751 0927                        00            .byte	0
02752 0928                        00            .byte	0
02753 0929                        00            .byte	0
02754 092A                        00            .byte	0
02755                                           ! 717  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02756 092B                        EA            .byte	$EA
02757 092C                        8C            .byte	$8C
02758 092D                        DF            .byte	$DF
02759 092E                        28            .byte	$28
02760 092F                        00            .byte	0
02761 0930                        E7            .byte	$E7
02762 0931                        04            .byte	4
02763 0932                        E3            .byte	$E3
02764                                           ! 718  0xff,
02765 0933                        FF            .byte	$FF
02766                                           ! 719  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02767 0934                        00            .byte	0
02768 0935                        3F            .byte	$3F
02769 0936                        00            .byte	0
02770 0937                        3F            .byte	$3F
02771 0938                        00            .byte	0
02772 0939                        3F            .byte	$3F
02773 093A                        00            .byte	0
02774 093B                        3F            .byte	$3F
02775                                           ! 720  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02776 093C                        00            .byte	0
02777 093D                        3F            .byte	$3F
02778 093E                        00            .byte	0
02779 093F                        3F            .byte	$3F
02780 0940                        00            .byte	0
02781 0941                        3F            .byte	$3F
02782 0942                        00            .byte	0
02783 0943                        3F            .byte	$3F
02784                                           ! 721  0x01, 0x00, 0x0f, 0x00,
02785 0944                        01            .byte	1
02786 0945                        00            .byte	0
02787 0946                        0F            .byte	$F
02788 0947                        00            .byte	0
02789                                           ! 722  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02790 0948                        00            .byte	0
02791 0949                        00            .byte	0
02792 094A                        00            .byte	0
02793 094B                        00            .byte	0
02794 094C                        00            .byte	0
02795 094D                        00            .byte	0
02796 094E                        05            .byte	5
02797 094F                        0F            .byte	$F
02798 0950                        FF            .byte	$FF
02799                                           ! 723 },
02800                                           ! 724 {
02801                                           ! 725  80, 29, 16, 0x00, 0x00,
02802 0951                        50            .byte	$50
02803 0952                        1D            .byte	$1D
02804 0953                        10            .byte	$10
02805 0954                        00            .byte	0
02806 0955                        00            .byte	0
02807                                           ! 726  0x01, 0x0f, 0x00, 0x06,
02808 0956                        01            .byte	1
02809 0957                        0F            .byte	$F
02810 0958                        00            .byte	0
02811 0959                        06            .byte	6
02812                                           ! 727  0xe3,
02813 095A                        E3            .byte	$E3
02814                                           ! 728  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02815 095B                        5F            .byte	$5F
02816 095C                        4F            .byte	$4F
02817 095D                        50            .byte	$50
02818 095E                        82            .byte	$82
02819 095F                        54            .byte	$54
02820 0960                        80            .byte	$80
02821 0961                        0B            .byte	$B
02822 0962                        3E            .byte	$3E
02823                                           ! 729  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02824 0963                        00            .byte	0
02825 0964                        40            .byte	$40
02826 0965                        00            .byte	0
02827 0966                        00            .byte	0
02828 0967                        00            .byte	0
02829 0968                        00            .byte	0
02830 0969                        00            .byte	0
02831 096A                        00            .byte	0
02832                                           ! 730  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02833 096B                        EA            .byte	$EA
02834 096C                        8C            .byte	$8C
02835 096D                        DF            .byte	$DF
02836 096E                        28            .byte	$28
02837 096F                        00            .byte	0
02838 0970                        E7            .byte	$E7
02839 0971                        04            .byte	4
02840 0972                        E3            .byte	$E3
02841                                           ! 731  0xff,
02842 0973                        FF            .byte	$FF
02843                                           ! 732  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02844 0974                        00            .byte	0
02845 0975                        01            .byte	1
02846 0976                        02            .byte	2
02847 0977                        03            .byte	3
02848 0978                        04            .byte	4
02849 0979                        05            .byte	5
02850 097A                        14            .byte	$14
02851 097B                        07            .byte	7
02852                                           ! 733  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02853 097C                        38            .byte	$38
02854 097D                        39            .byte	$39
02855 097E                        3A            .byte	$3A
02856 097F                        3B            .byte	$3B
02857 0980                        3C            .byte	$3C
02858 0981                        3D            .byte	$3D
02859 0982                        3E            .byte	$3E
02860 0983                        3F            .byte	$3F
02861                                           ! 734  0x01, 0x00, 0x0f, 0x00,
02862 0984                        01            .byte	1
02863 0985                        00            .byte	0
02864 0986                        0F            .byte	$F
02865 0987                        00            .byte	0
02866                                           ! 735  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02867 0988                        00            .byte	0
02868 0989                        00            .byte	0
02869 098A                        00            .byte	0
02870 098B                        00            .byte	0
02871 098C                        00            .byte	0
02872 098D                        00            .byte	0
02873 098E                        05            .byte	5
02874 098F                        0F            .byte	$F
02875 0990                        FF            .byte	$FF
02876                                           ! 736 },
02877                                           ! 737 {
02878                                           ! 738  40, 24, 8, 0x00, 0x00,
02879 0991                        28            .byte	$28
02880 0992                        18            .byte	$18
02881 0993                        08            .byte	8
02882 0994                        00            .byte	0
02883 0995                        00            .byte	0
02884                                           ! 739  0x01, 0x0f, 0x00, 0x0e,
02885 0996                        01            .byte	1
02886 0997                        0F            .byte	$F
02887 0998                        00            .byte	0
02888 0999                        0E            .byte	$E
02889                                           ! 740  0x63,
02890 099A                        63            .byte	$63
02891                                           ! 741  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02892 099B                        5F            .byte	$5F
02893 099C                        4F            .byte	$4F
02894 099D                        50            .byte	$50
02895 099E                        82            .byte	$82
02896 099F                        54            .byte	$54
02897 09A0                        80            .byte	$80
02898 09A1                        BF            .byte	$BF
02899 09A2                        1F            .byte	$1F
02900                                           ! 742  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02901 09A3                        00            .byte	0
02902 09A4                        41            .byte	$41
02903 09A5                        00            .byte	0
02904 09A6                        00            .byte	0
02905 09A7                        00            .byte	0
02906 09A8                        00            .byte	0
02907 09A9                        00            .byte	0
02908 09AA                        00            .byte	0
02909                                           ! 743  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02910 09AB                        9C            .byte	$9C
02911 09AC                        8E            .byte	$8E
02912 09AD                        8F            .byte	$8F
02913 09AE                        28            .byte	$28
02914 09AF                        40            .byte	$40
02915 09B0                        96            .byte	$96
02916 09B1                        B9            .byte	$B9
02917 09B2                        A3            .byte	$A3
02918                                           ! 744  0xff,
02919 09B3                        FF            .byte	$FF
02920                                           ! 745  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02921 09B4                        00            .byte	0
02922 09B5                        01            .byte	1
02923 09B6                        02            .byte	2
02924 09B7                        03            .byte	3
02925 09B8                        04            .byte	4
02926 09B9                        05            .byte	5
02927 09BA                        06            .byte	6
02928 09BB                        07            .byte	7
02929                                           ! 746  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02930 09BC                        08            .byte	8
02931 09BD                        09            .byte	9
02932 09BE                        0A            .byte	$A
02933 09BF                        0B            .byte	$B
02934 09C0                        0C            .byte	$C
02935 09C1                        0D            .byte	$D
02936 09C2                        0E            .byte	$E
02937 09C3                        0F            .byte	$F
02938                                           ! 747  0x41, 0x00, 0x0f, 0x00,
02939 09C4                        41            .byte	$41
02940 09C5                        00            .byte	0
02941 09C6                        0F            .byte	$F
02942 09C7                        00            .byte	0
02943                                           ! 748  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02944 09C8                        00            .byte	0
02945 09C9                        00            .byte	0
02946 09CA                        00            .byte	0
02947 09CB                        00            .byte	0
02948 09CC                        00            .byte	0
02949 09CD                        40            .byte	$40
02950 09CE                        05            .byte	5
02951 09CF                        0F            .byte	$F
02952 09D0                        FF            .byte	$FF
02953                                           ! 749 },
02954                                           ! 750 {
02955                                           ! 751  100, 36, 16, 0x00, 0x00,
02956 09D1                        64            .byte	$64
02957 09D2                        24            .byte	$24
02958 09D3                        10            .byte	$10
02959 09D4                        00            .byte	0
02960 09D5                        00            .byte	0
02961                                           ! 752  0x01, 0x0f, 0x00, 0x06,
02962 09D6                        01            .byte	1
02963 09D7                        0F            .byte	$F
02964 09D8                        00            .byte	0
02965 09D9                        06            .byte	6
02966                                           ! 753  0xe3,
02967 09DA                        E3            .byte	$E3
02968                                           ! 754  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02969 09DB                        7F            .byte	$7F
02970 09DC                        63            .byte	$63
02971 09DD                        63            .byte	$63
02972 09DE                        83            .byte	$83
02973 09DF                        6B            .byte	$6B
02974 09E0                        1B            .byte	$1B
02975 09E1                        72            .byte	$72
02976 09E2                        F0            .byte	$F0
02977                                           ! 755  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02978 09E3                        00            .byte	0
02979 09E4                        60            .byte	$60
02980 09E5                        00            .byte	0
02981 09E6                        00            .byte	0
02982 09E7                        00            .byte	0
02983 09E8                        00            .byte	0
02984 09E9                        00            .byte	0
02985 09EA                        00            .byte	0
02986                                           ! 756  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
02987 09EB                        59            .byte	$59
02988 09EC                        8D            .byte	$8D
02989 09ED                        57            .byte	$57
02990 09EE                        32            .byte	$32
02991 09EF                        00            .byte	0
02992 09F0                        57            .byte	$57
02993 09F1                        73            .byte	$73
02994 09F2                        E3            .byte	$E3
02995                                           ! 757  0xff,
02996 09F3                        FF            .byte	$FF
02997                                           ! 758  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02998 09F4                        00            .byte	0
02999 09F5                        01            .byte	1
03000 09F6                        02            .byte	2
03001 09F7                        03            .byte	3
03002 09F8                        04            .byte	4
03003 09F9                        05            .byte	5
03004 09FA                        14            .byte	$14
03005 09FB                        07            .byte	7
03006                                           ! 759  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
03007 09FC                        38            .byte	$38
03008 09FD                        39            .byte	$39
03009 09FE                        3A            .byte	$3A
03010 09FF                        3B            .byte	$3B
03011 0A00                        3C            .byte	$3C
03012 0A01                        3D            .byte	$3D
03013 0A02                        3E            .byte	$3E
03014 0A03                        3F            .byte	$3F
03015                                           ! 760  0x01, 0x00, 0x0f, 0x00,
03016 0A04                        01            .byte	1
03017 0A05                        00            .byte	0
03018 0A06                        0F            .byte	$F
03019 0A07                        00            .byte	0
03020                                           ! 761  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
03021 0A08                        00            .byte	0
03022 0A09                        00            .byte	0
03023 0A0A                        00            .byte	0
03024 0A0B                        00            .byte	0
03025 0A0C                        00            .byte	0
03026 0A0D                        00            .byte	0
03027 0A0E                        05            .byte	5
03028 0A0F                        0F            .byte	$F
03029 0A10                        FF            .byte	$FF
03030                                           ! 762 },
03031                                           ! 763 };
03032                                           !BCC_EOS
03033                                           ! 764 static Bit8u palette0[63+1][3]=
03034                                           ! 765 {
03035                       00000A11            _palette0:
03036                                           ! 766   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03037 0A11                        00            .byte	0
03038 0A12                        00            .byte	0
03039 0A13                        00            .byte	0
03040 0A14                        00            .byte	0
03041 0A15                        00            .byte	0
03042 0A16                        00            .byte	0
03043 0A17                        00            .byte	0
03044 0A18                        00            .byte	0
03045 0A19                        00            .byte	0
03046 0A1A                        00            .byte	0
03047 0A1B                        00            .byte	0
03048 0A1C                        00            .byte	0
03049 0A1D                        00            .byte	0
03050 0A1E                        00            .byte	0
03051 0A1F                        00            .byte	0
03052 0A20                        00            .byte	0
03053 0A21                        00            .byte	0
03054 0A22                        00            .byte	0
03055 0A23                        00            .byte	0
03056 0A24                        00            .byte	0
03057 0A25                        00            .byte	0
03058 0A26                        00            .byte	0
03059 0A27                        00            .byte	0
03060 0A28                        00            .byte	0
03061                                           ! 767   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03062 0A29                        2A            .byte	$2A
03063 0A2A                        2A            .byte	$2A
03064 0A2B                        2A            .byte	$2A
03065 0A2C                        2A            .byte	$2A
03066 0A2D                        2A            .byte	$2A
03067 0A2E                        2A            .byte	$2A
03068 0A2F                        2A            .byte	$2A
03069 0A30                        2A            .byte	$2A
03070 0A31                        2A            .byte	$2A
03071 0A32                        2A            .byte	$2A
03072 0A33                        2A            .byte	$2A
03073 0A34                        2A            .byte	$2A
03074 0A35                        2A            .byte	$2A
03075 0A36                        2A            .byte	$2A
03076 0A37                        2A            .byte	$2A
03077 0A38                        2A            .byte	$2A
03078 0A39                        2A            .byte	$2A
03079 0A3A                        2A            .byte	$2A
03080 0A3B                        2A            .byte	$2A
03081 0A3C                        2A            .byte	$2A
03082 0A3D                        2A            .byte	$2A
03083 0A3E                        2A            .byte	$2A
03084 0A3F                        2A            .byte	$2A
03085 0A40                        2A            .byte	$2A
03086                                           ! 768   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03087 0A41                        2A            .byte	$2A
03088 0A42                        2A            .byte	$2A
03089 0A43                        2A            .byte	$2A
03090 0A44                        2A            .byte	$2A
03091 0A45                        2A            .byte	$2A
03092 0A46                        2A            .byte	$2A
03093 0A47                        2A            .byte	$2A
03094 0A48                        2A            .byte	$2A
03095                                           ! 768  0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03096 0A49                        2A            .byte	$2A
03097 0A4A                        2A            .byte	$2A
03098 0A4B                        2A            .byte	$2A
03099 0A4C                        2A            .byte	$2A
03100 0A4D                        2A            .byte	$2A
03101 0A4E                        2A            .byte	$2A
03102 0A4F                        2A            .byte	$2A
03103 0A50                        2A            .byte	$2A
03104 0A51                        2A            .byte	$2A
03105 0A52                        2A            .byte	$2A
03106 0A53                        2A            .byte	$2A
03107 0A54                        2A            .byte	$2A
03108 0A55                        2A            .byte	$2A
03109 0A56                        2A            .byte	$2A
03110 0A57                        2A            .byte	$2A
03111 0A58                        2A            .byte	$2A
03112                                           ! 769   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
03113 0A59                        3F            .byte	$3F
03114 0A5A                        3F            .byte	$3F
03115 0A5B                        3F            .byte	$3F
03116 0A5C                        3F            .byte	$3F
03117 0A5D                        3F            .byte	$3F
03118 0A5E                        3F            .byte	$3F
03119 0A5F                        3F            .byte	$3F
03120 0A60                        3F            .byte	$3F
03121 0A61                        3F            .byte	$3F
03122 0A62                        3F            .byte	$3F
03123 0A63                        3F            .byte	$3F
03124 0A64                        3F            .byte	$3F
03125 0A65                        3F            .byte	$3F
03126 0A66                        3F            .byte	$3F
03127 0A67                        3F            .byte	$3F
03128 0A68                        3F            .byte	$3F
03129 0A69                        3F            .byte	$3F
03130 0A6A                        3F            .byte	$3F
03131 0A6B                        3F            .byte	$3F
03132 0A6C                        3F            .byte	$3F
03133 0A6D                        3F            .byte	$3F
03134 0A6E                        3F            .byte	$3F
03135 0A6F                        3F            .byte	$3F
03136 0A70                        3F            .byte	$3F
03137                                           ! 770   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03138 0A71                        00            .byte	0
03139 0A72                        00            .byte	0
03140 0A73                        00            .byte	0
03141 0A74                        00            .byte	0
03142 0A75                        00            .byte	0
03143 0A76                        00            .byte	0
03144 0A77                        00            .byte	0
03145 0A78                        00            .byte	0
03146 0A79                        00            .byte	0
03147 0A7A                        00            .byte	0
03148 0A7B                        00            .byte	0
03149 0A7C                        00            .byte	0
03150 0A7D                        00            .byte	0
03151 0A7E                        00            .byte	0
03152 0A7F                        00            .byte	0
03153 0A80                        00            .byte	0
03154 0A81                        00            .byte	0
03155 0A82                        00            .byte	0
03156 0A83                        00            .byte	0
03157 0A84                        00            .byte	0
03158 0A85                        00            .byte	0
03159 0A86                        00            .byte	0
03160 0A87                        00            .byte	0
03161 0A88                        00            .byte	0
03162                                           ! 771   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03163 0A89                        2A            .byte	$2A
03164 0A8A                        2A            .byte	$2A
03165 0A8B                        2A            .byte	$2A
03166 0A8C                        2A            .byte	$2A
03167 0A8D                        2A            .byte	$2A
03168 0A8E                        2A            .byte	$2A
03169 0A8F                        2A            .byte	$2A
03170 0A90                        2A            .byte	$2A
03171 0A91                        2A            .byte	$2A
03172 0A92                        2A            .byte	$2A
03173 0A93                        2A            .byte	$2A
03174 0A94                        2A            .byte	$2A
03175 0A95                        2A            .byte	$2A
03176 0A96                        2A            .byte	$2A
03177 0A97                        2A            .byte	$2A
03178 0A98                        2A            .byte	$2A
03179 0A99                        2A            .byte	$2A
03180 0A9A                        2A            .byte	$2A
03181 0A9B                        2A            .byte	$2A
03182 0A9C                        2A            .byte	$2A
03183 0A9D                        2A            .byte	$2A
03184 0A9E                        2A            .byte	$2A
03185 0A9F                        2A            .byte	$2A
03186 0AA0                        2A            .byte	$2A
03187                                           ! 772   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03188 0AA1                        2A            .byte	$2A
03189 0AA2                        2A            .byte	$2A
03190 0AA3                        2A            .byte	$2A
03191 0AA4                        2A            .byte	$2A
03192 0AA5                        2A            .byte	$2A
03193 0AA6                        2A            .byte	$2A
03194 0AA7                        2A            .byte	$2A
03195 0AA8                        2A            .byte	$2A
03196 0AA9                        2A            .byte	$2A
03197 0AAA                        2A            .byte	$2A
03198 0AAB                        2A            .byte	$2A
03199 0AAC                        2A            .byte	$2A
03200 0AAD                        2A            .byte	$2A
03201 0AAE                        2A            .byte	$2A
03202 0AAF                        2A            .byte	$2A
03203 0AB0                        2A            .byte	$2A
03204 0AB1                        2A            .byte	$2A
03205 0AB2                        2A            .byte	$2A
03206 0AB3                        2A            .byte	$2A
03207 0AB4                        2A            .byte	$2A
03208 0AB5                        2A            .byte	$2A
03209 0AB6                        2A            .byte	$2A
03210 0AB7                        2A            .byte	$2A
03211 0AB8                        2A            .byte	$2A
03212                                           ! 773   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
03213 0AB9                        3F            .byte	$3F
03214 0ABA                        3F            .byte	$3F
03215 0ABB                        3F            .byte	$3F
03216 0ABC                        3F            .byte	$3F
03217 0ABD                        3F            .byte	$3F
03218 0ABE                        3F            .byte	$3F
03219 0ABF                        3F            .byte	$3F
03220 0AC0                        3F            .byte	$3F
03221 0AC1                        3F            .byte	$3F
03222 0AC2                        3F            .byte	$3F
03223 0AC3                        3F            .byte	$3F
03224 0AC4                        3F            .byte	$3F
03225 0AC5                        3F            .byte	$3F
03226 0AC6                        3F            .byte	$3F
03227 0AC7                        3F            .byte	$3F
03228 0AC8                        3F            .byte	$3F
03229 0AC9                        3F            .byte	$3F
03230 0ACA                        3F            .byte	$3F
03231 0ACB                        3F            .byte	$3F
03232 0ACC                        3F            .byte	$3F
03233 0ACD                        3F            .byte	$3F
03234 0ACE                        3F            .byte	$3F
03235 0ACF                        3F            .byte	$3F
03236                                           ! 774 };
03237 0AD0                        3F            .byte	$3F
03238                                           !BCC_EOS
03239                                           ! 775 static Bit8u palette1[63+1][3]=
03240                                           ! 776 {
03241                       00000AD1            _palette1:
03242                                           ! 777   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03243 0AD1                        00            .byte	0
03244 0AD2                        00            .byte	0
03245 0AD3                        00            .byte	0
03246 0AD4                        00            .byte	0
03247 0AD5                        00            .byte	0
03248 0AD6                        2A            .byte	$2A
03249 0AD7                        00            .byte	0
03250 0AD8                        2A            .byte	$2A
03251 0AD9                        00            .byte	0
03252 0ADA                        00            .byte	0
03253 0ADB                        2A            .byte	$2A
03254 0ADC                        2A            .byte	$2A
03255 0ADD                        2A            .byte	$2A
03256 0ADE                        00            .byte	0
03257 0ADF                        00            .byte	0
03258 0AE0                        2A            .byte	$2A
03259 0AE1                        00            .byte	0
03260 0AE2                        2A            .byte	$2A
03261 0AE3                        2A            .byte	$2A
03262 0AE4                        15            .byte	$15
03263 0AE5                        00            .byte	0
03264 0AE6                        2A            .byte	$2A
03265 0AE7                        2A            .byte	$2A
03266 0AE8                        2A            .byte	$2A
03267                                           ! 778   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03268 0AE9                        00            .byte	0
03269 0AEA                        00            .byte	0
03270 0AEB                        00            .byte	0
03271 0AEC                        00            .byte	0
03272 0AED                        00            .byte	0
03273 0AEE                        2A            .byte	$2A
03274 0AEF                        00            .byte	0
03275 0AF0                        2A            .byte	$2A
03276 0AF1                        00            .byte	0
03277 0AF2                        00            .byte	0
03278 0AF3                        2A            .byte	$2A
03279 0AF4                        2A            .byte	$2A
03280 0AF5                        2A            .byte	$2A
03281 0AF6                        00            .byte	0
03282 0AF7                        00            .byte	0
03283 0AF8                        2A            .byte	$2A
03284 0AF9                        00            .byte	0
03285 0AFA                        2A            .byte	$2A
03286 0AFB                        2A            .byte	$2A
03287 0AFC                        15            .byte	$15
03288 0AFD                        00            .byte	0
03289 0AFE                        2A            .byte	$2A
03290 0AFF                        2A            .byte	$2A
03291 0B00                        2A            .byte	$2A
03292                                           ! 779   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03293 0B01                        15            .byte	$15
03294 0B02                        15            .byte	$15
03295 0B03                        15            .byte	$15
03296 0B04                        15            .byte	$15
03297 0B05                        15            .byte	$15
03298 0B06                        3F            .byte	$3F
03299 0B07                        15            .byte	$15
03300 0B08                        3F            .byte	$3F
03301 0B09                        15            .byte	$15
03302 0B0A                        15            .byte	$15
03303 0B0B                        3F            .byte	$3F
03304 0B0C                        3F            .byte	$3F
03305 0B0D                        3F            .byte	$3F
03306 0B0E                        15            .byte	$15
03307 0B0F                        15            .byte	$15
03308 0B10                        3F            .byte	$3F
03309 0B11                        15            .byte	$15
03310 0B12                        3F            .byte	$3F
03311 0B13                        3F            .byte	$3F
03312 0B14                        3F            .byte	$3F
03313 0B15                        15            .byte	$15
03314 0B16                        3F            .byte	$3F
03315 0B17                        3F            .byte	$3F
03316 0B18                        3F            .byte	$3F
03317                                           ! 780   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03318 0B19                        15            .byte	$15
03319 0B1A                        15            .byte	$15
03320 0B1B                        15            .byte	$15
03321 0B1C                        15            .byte	$15
03322 0B1D                        15            .byte	$15
03323 0B1E                        3F            .byte	$3F
03324 0B1F                        15            .byte	$15
03325 0B20                        3F            .byte	$3F
03326 0B21                        15            .byte	$15
03327 0B22                        15            .byte	$15
03328 0B23                        3F            .byte	$3F
03329 0B24                        3F            .byte	$3F
03330 0B25                        3F            .byte	$3F
03331 0B26                        15            .byte	$15
03332 0B27                        15            .byte	$15
03333 0B28                        3F            .byte	$3F
03334 0B29                        15            .byte	$15
03335 0B2A                        3F            .byte	$3F
03336 0B2B                        3F            .byte	$3F
03337 0B2C                        3F            .byte	$3F
03338 0B2D                        15            .byte	$15
03339 0B2E                        3F            .byte	$3F
03340 0B2F                        3F            .byte	$3F
03341 0B30                        3F            .byte	$3F
03342                                           ! 781   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03343 0B31                        00            .byte	0
03344 0B32                        00            .byte	0
03345 0B33                        00            .byte	0
03346 0B34                        00            .byte	0
03347 0B35                        00            .byte	0
03348 0B36                        2A            .byte	$2A
03349 0B37                        00            .byte	0
03350 0B38                        2A            .byte	$2A
03351 0B39                        00            .byte	0
03352 0B3A                        00            .byte	0
03353 0B3B                        2A            .byte	$2A
03354 0B3C                        2A            .byte	$2A
03355 0B3D                        2A            .byte	$2A
03356 0B3E                        00            .byte	0
03357 0B3F                        00            .byte	0
03358 0B40                        2A            .byte	$2A
03359 0B41                        00            .byte	0
03360 0B42                        2A            .byte	$2A
03361 0B43                        2A            .byte	$2A
03362 0B44                        15            .byte	$15
03363 0B45                        00            .byte	0
03364 0B46                        2A            .byte	$2A
03365 0B47                        2A            .byte	$2A
03366 0B48                        2A            .byte	$2A
03367                                           ! 782   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03368 0B49                        00            .byte	0
03369 0B4A                        00            .byte	0
03370 0B4B                        00            .byte	0
03371 0B4C                        00            .byte	0
03372 0B4D                        00            .byte	0
03373 0B4E                        2A            .byte	$2A
03374 0B4F                        00            .byte	0
03375 0B50                        2A            .byte	$2A
03376 0B51                        00            .byte	0
03377 0B52                        00            .byte	0
03378 0B53                        2A            .byte	$2A
03379 0B54                        2A            .byte	$2A
03380 0B55                        2A            .byte	$2A
03381 0B56                        00            .byte	0
03382 0B57                        00            .byte	0
03383 0B58                        2A            .byte	$2A
03384 0B59                        00            .byte	0
03385 0B5A                        2A            .byte	$2A
03386 0B5B                        2A            .byte	$2A
03387 0B5C                        15            .byte	$15
03388 0B5D                        00            .byte	0
03389 0B5E                        2A            .byte	$2A
03390 0B5F                        2A            .byte	$2A
03391 0B60                        2A            .byte	$2A
03392                                           ! 783   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03393 0B61                        15            .byte	$15
03394 0B62                        15            .byte	$15
03395 0B63                        15            .byte	$15
03396 0B64                        15            .byte	$15
03397 0B65                        15            .byte	$15
03398 0B66                        3F            .byte	$3F
03399 0B67                        15            .byte	$15
03400 0B68                        3F            .byte	$3F
03401 0B69                        15            .byte	$15
03402 0B6A                        15            .byte	$15
03403 0B6B                        3F            .byte	$3F
03404 0B6C                        3F            .byte	$3F
03405 0B6D                        3F            .byte	$3F
03406 0B6E                        15            .byte	$15
03407 0B6F                        15            .byte	$15
03408 0B70                        3F            .byte	$3F
03409 0B71                        15            .byte	$15
03410 0B72                        3F            .byte	$3F
03411 0B73                        3F            .byte	$3F
03412 0B74                        3F            .byte	$3F
03413 0B75                        15            .byte	$15
03414 0B76                        3F            .byte	$3F
03415 0B77                        3F            .byte	$3F
03416 0B78                        3F            .byte	$3F
03417                                           ! 784   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03418 0B79                        15            .byte	$15
03419 0B7A                        15            .byte	$15
03420 0B7B                        15            .byte	$15
03421 0B7C                        15            .byte	$15
03422 0B7D                        15            .byte	$15
03423 0B7E                        3F            .byte	$3F
03424 0B7F                        15            .byte	$15
03425 0B80                        3F            .byte	$3F
03426 0B81                        15            .byte	$15
03427 0B82                        15            .byte	$15
03428 0B83                        3F            .byte	$3F
03429 0B84                        3F            .byte	$3F
03430 0B85                        3F            .byte	$3F
03431 0B86                        15            .byte	$15
03432 0B87                        15            .byte	$15
03433 0B88                        3F            .byte	$3F
03434 0B89                        15            .byte	$15
03435 0B8A                        3F            .byte	$3F
03436 0B8B                        3F            .byte	$3F
03437 0B8C                        3F            .byte	$3F
03438 0B8D                        15            .byte	$15
03439 0B8E                        3F            .byte	$3F
03440 0B8F                        3F            .byte	$3F
03441                                           ! 785 };
03442 0B90                        3F            .byte	$3F
03443                                           !BCC_EOS
03444                                           ! 786 static Bit8u palette2[63+1][3]=
03445                                           ! 787 {
03446                       00000B91            _palette2:
03447                                           ! 788   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03448 0B91                        00            .byte	0
03449 0B92                        00            .byte	0
03450 0B93                        00            .byte	0
03451 0B94                        00            .byte	0
03452 0B95                        00            .byte	0
03453 0B96                        2A            .byte	$2A
03454 0B97                        00            .byte	0
03455 0B98                        2A            .byte	$2A
03456 0B99                        00            .byte	0
03457 0B9A                        00            .byte	0
03458 0B9B                        2A            .byte	$2A
03459 0B9C                        2A            .byte	$2A
03460 0B9D                        2A            .byte	$2A
03461 0B9E                        00            .byte	0
03462 0B9F                        00            .byte	0
03463 0BA0                        2A            .byte	$2A
03464 0BA1                        00            .byte	0
03465 0BA2                        2A            .byte	$2A
03466 0BA3                        2A            .byte	$2A
03467 0BA4                        2A            .byte	$2A
03468 0BA5                        00            .byte	0
03469 0BA6                        2A            .byte	$2A
03470 0BA7                        2A            .byte	$2A
03471 0BA8                        2A            .byte	$2A
03472                                           ! 789   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00
03473 0BA9                        00            .byte	0
03474 0BAA                        00            .byte	0
03475 0BAB                        15            .byte	$15
03476 0BAC                        00            .byte	0
03477 0BAD                        00            .byte	0
03478 0BAE                        3F            .byte	$3F
03479 0BAF                        00            .byte	0
03480 0BB0                        2A            .byte	$2A
03481 0BB1                        15            .byte	$15
03482 0BB2                        00            .byte	0
03483 0BB3                        2A            .byte	$2A
03484 0BB4                        3F            .byte	$3F
03485 0BB5                        2A            .byte	$2A
03486                                           ! 789 ,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03487 0BB6                        00            .byte	0
03488 0BB7                        15            .byte	$15
03489 0BB8                        2A            .byte	$2A
03490 0BB9                        00            .byte	0
03491 0BBA                        3F            .byte	$3F
03492 0BBB                        2A            .byte	$2A
03493 0BBC                        2A            .byte	$2A
03494 0BBD                        15            .byte	$15
03495 0BBE                        2A            .byte	$2A
03496 0BBF                        2A            .byte	$2A
03497 0BC0                        3F            .byte	$3F
03498                                           ! 790   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03499 0BC1                        00            .byte	0
03500 0BC2                        15            .byte	$15
03501 0BC3                        00            .byte	0
03502 0BC4                        00            .byte	0
03503 0BC5                        15            .byte	$15
03504 0BC6                        2A            .byte	$2A
03505 0BC7                        00            .byte	0
03506 0BC8                        3F            .byte	$3F
03507 0BC9                        00            .byte	0
03508 0BCA                        00            .byte	0
03509 0BCB                        3F            .byte	$3F
03510 0BCC                        2A            .byte	$2A
03511 0BCD                        2A            .byte	$2A
03512 0BCE                        15            .byte	$15
03513 0BCF                        00            .byte	0
03514 0BD0                        2A            .byte	$2A
03515 0BD1                        15            .byte	$15
03516 0BD2                        2A            .byte	$2A
03517 0BD3                        2A            .byte	$2A
03518 0BD4                        3F            .byte	$3F
03519 0BD5                        00            .byte	0
03520 0BD6                        2A            .byte	$2A
03521 0BD7                        3F            .byte	$3F
03522 0BD8                        2A            .byte	$2A
03523                                           ! 791   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03524 0BD9                        00            .byte	0
03525 0BDA                        15            .byte	$15
03526 0BDB                        15            .byte	$15
03527 0BDC                        00            .byte	0
03528 0BDD                        15            .byte	$15
03529 0BDE                        3F            .byte	$3F
03530 0BDF                        00            .byte	0
03531 0BE0                        3F            .byte	$3F
03532 0BE1                        15            .byte	$15
03533 0BE2                        00            .byte	0
03534 0BE3                        3F            .byte	$3F
03535 0BE4                        3F            .byte	$3F
03536 0BE5                        2A            .byte	$2A
03537 0BE6                        15            .byte	$15
03538 0BE7                        15            .byte	$15
03539 0BE8                        2A            .byte	$2A
03540 0BE9                        15            .byte	$15
03541 0BEA                        3F            .byte	$3F
03542 0BEB                        2A            .byte	$2A
03543 0BEC                        3F            .byte	$3F
03544 0BED                        15            .byte	$15
03545 0BEE                        2A            .byte	$2A
03546 0BEF                        3F            .byte	$3F
03547 0BF0                        3F            .byte	$3F
03548                                           ! 792   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03549 0BF1                        15            .byte	$15
03550 0BF2                        00            .byte	0
03551 0BF3                        00            .byte	0
03552 0BF4                        15            .byte	$15
03553 0BF5                        00            .byte	0
03554 0BF6                        2A            .byte	$2A
03555 0BF7                        15            .byte	$15
03556 0BF8                        2A            .byte	$2A
03557 0BF9                        00            .byte	0
03558 0BFA                        15            .byte	$15
03559 0BFB                        2A            .byte	$2A
03560 0BFC                        2A            .byte	$2A
03561 0BFD                        3F            .byte	$3F
03562 0BFE                        00            .byte	0
03563 0BFF                        00            .byte	0
03564 0C00                        3F            .byte	$3F
03565 0C01                        00            .byte	0
03566 0C02                        2A            .byte	$2A
03567 0C03                        3F            .byte	$3F
03568 0C04                        2A            .byte	$2A
03569 0C05                        00            .byte	0
03570 0C06                        3F            .byte	$3F
03571 0C07                        2A            .byte	$2A
03572 0C08                        2A            .byte	$2A
03573                                           ! 793   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03574 0C09                        15            .byte	$15
03575 0C0A                        00            .byte	0
03576 0C0B                        15            .byte	$15
03577 0C0C                        15            .byte	$15
03578 0C0D                        00            .byte	0
03579 0C0E                        3F            .byte	$3F
03580 0C0F                        15            .byte	$15
03581 0C10                        2A            .byte	$2A
03582 0C11                        15            .byte	$15
03583 0C12                        15            .byte	$15
03584 0C13                        2A            .byte	$2A
03585 0C14                        3F            .byte	$3F
03586 0C15                        3F            .byte	$3F
03587 0C16                        00            .byte	0
03588 0C17                        15            .byte	$15
03589 0C18                        3F            .byte	$3F
03590 0C19                        00            .byte	0
03591 0C1A                        3F            .byte	$3F
03592 0C1B                        3F            .byte	$3F
03593 0C1C                        2A            .byte	$2A
03594 0C1D                        15            .byte	$15
03595 0C1E                        3F            .byte	$3F
03596 0C1F                        2A            .byte	$2A
03597 0C20                        3F            .byte	$3F
03598                                           ! 794   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03599 0C21                        15            .byte	$15
03600 0C22                        15            .byte	$15
03601 0C23                        00            .byte	0
03602 0C24                        15            .byte	$15
03603 0C25                        15            .byte	$15
03604 0C26                        2A            .byte	$2A
03605 0C27                        15            .byte	$15
03606 0C28                        3F            .byte	$3F
03607 0C29                        00            .byte	0
03608 0C2A                        15            .byte	$15
03609 0C2B                        3F            .byte	$3F
03610 0C2C                        2A            .byte	$2A
03611 0C2D                        3F            .byte	$3F
03612 0C2E                        15            .byte	$15
03613 0C2F                        00            .byte	0
03614 0C30                        3F            .byte	$3F
03615 0C31                        15            .byte	$15
03616 0C32                        2A            .byte	$2A
03617 0C33                        3F            .byte	$3F
03618 0C34                        3F            .byte	$3F
03619 0C35                        00            .byte	0
03620 0C36                        3F            .byte	$3F
03621 0C37                        3F            .byte	$3F
03622 0C38                        2A            .byte	$2A
03623                                           ! 795   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03624 0C39                        15            .byte	$15
03625 0C3A                        15            .byte	$15
03626 0C3B                        15            .byte	$15
03627 0C3C                        15            .byte	$15
03628 0C3D                        15            .byte	$15
03629 0C3E                        3F            .byte	$3F
03630 0C3F                        15            .byte	$15
03631 0C40                        3F            .byte	$3F
03632 0C41                        15            .byte	$15
03633 0C42                        15            .byte	$15
03634 0C43                        3F            .byte	$3F
03635 0C44                        3F            .byte	$3F
03636 0C45                        3F            .byte	$3F
03637 0C46                        15            .byte	$15
03638 0C47                        15            .byte	$15
03639 0C48                        3F            .byte	$3F
03640 0C49                        15            .byte	$15
03641 0C4A                        3F            .byte	$3F
03642 0C4B                        3F            .byte	$3F
03643 0C4C                        3F            .byte	$3F
03644 0C4D                        15            .byte	$15
03645 0C4E                        3F            .byte	$3F
03646 0C4F                        3F            .byte	$3F
03647                                           ! 796 };
03648 0C50                        3F            .byte	$3F
03649                                           !BCC_EOS
03650                                           ! 797 static Bit8u palette3[256][3]=
03651                                           ! 798 {
03652                       00000C51            _palette3:
03653                                           ! 799   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03654 0C51                        00            .byte	0
03655 0C52                        00            .byte	0
03656 0C53                        00            .byte	0
03657 0C54                        00            .byte	0
03658 0C55                        00            .byte	0
03659 0C56                        2A            .byte	$2A
03660 0C57                        00            .byte	0
03661 0C58                        2A            .byte	$2A
03662 0C59                        00            .byte	0
03663 0C5A                        00            .byte	0
03664 0C5B                        2A            .byte	$2A
03665 0C5C                        2A            .byte	$2A
03666 0C5D                        2A            .byte	$2A
03667 0C5E                        00            .byte	0
03668 0C5F                        00            .byte	0
03669 0C60                        2A            .byte	$2A
03670 0C61                        00            .byte	0
03671 0C62                        2A            .byte	$2A
03672 0C63                        2A            .byte	$2A
03673 0C64                        15            .byte	$15
03674 0C65                        00            .byte	0
03675 0C66                        2A            .byte	$2A
03676 0C67                        2A            .byte	$2A
03677 0C68                        2A            .byte	$2A
03678                                           ! 800   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03679 0C69                        15            .byte	$15
03680 0C6A                        15            .byte	$15
03681 0C6B                        15            .byte	$15
03682 0C6C                        15            .byte	$15
03683 0C6D                        15            .byte	$15
03684 0C6E                        3F            .byte	$3F
03685 0C6F                        15            .byte	$15
03686 0C70                        3F            .byte	$3F
03687 0C71                        15            .byte	$15
03688 0C72                        15            .byte	$15
03689 0C73                        3F            .byte	$3F
03690 0C74                        3F            .byte	$3F
03691 0C75                        3F            .byte	$3F
03692 0C76                        15            .byte	$15
03693 0C77                        15            .byte	$15
03694 0C78                        3F            .byte	$3F
03695 0C79                        15            .byte	$15
03696 0C7A                        3F            .byte	$3F
03697 0C7B                        3F            .byte	$3F
03698 0C7C                        3F            .byte	$3F
03699 0C7D                        15            .byte	$15
03700 0C7E                        3F            .byte	$3F
03701 0C7F                        3F            .byte	$3F
03702 0C80                        3F            .byte	$3F
03703                                           ! 801   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03704 0C81                        00            .byte	0
03705 0C82                        00            .byte	0
03706 0C83                        00            .byte	0
03707 0C84                        05            .byte	5
03708 0C85                        05            .byte	5
03709 0C86                        05            .byte	5
03710 0C87                        08            .byte	8
03711 0C88                        08            .byte	8
03712 0C89                        08            .byte	8
03713 0C8A                        0B            .byte	$B
03714 0C8B                        0B            .byte	$B
03715 0C8C                        0B            .byte	$B
03716 0C8D                        0E            .byte	$E
03717 0C8E                        0E            .byte	$E
03718 0C8F                        0E            .byte	$E
03719 0C90                        11            .byte	$11
03720 0C91                        11            .byte	$11
03721 0C92                        11            .byte	$11
03722 0C93                        14            .byte	$14
03723 0C94                        14            .byte	$14
03724 0C95                        14            .byte	$14
03725 0C96                        18            .byte	$18
03726 0C97                        18            .byte	$18
03727 0C98                        18            .byte	$18
03728                                           ! 802   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03729 0C99                        1C            .byte	$1C
03730 0C9A                        1C            .byte	$1C
03731 0C9B                        1C            .byte	$1C
03732 0C9C                        20            .byte	$20
03733 0C9D                        20            .byte	$20
03734 0C9E                        20            .byte	$20
03735 0C9F                        24            .byte	$24
03736 0CA0                        24            .byte	$24
03737 0CA1                        24            .byte	$24
03738 0CA2                        28            .byte	$28
03739 0CA3                        28            .byte	$28
03740 0CA4                        28            .byte	$28
03741 0CA5                        2D            .byte	$2D
03742 0CA6                        2D            .byte	$2D
03743 0CA7                        2D            .byte	$2D
03744 0CA8                        32            .byte	$32
03745 0CA9                        32            .byte	$32
03746 0CAA                        32            .byte	$32
03747 0CAB                        38            .byte	$38
03748 0CAC                        38            .byte	$38
03749 0CAD                        38            .byte	$38
03750 0CAE                        3F            .byte	$3F
03751 0CAF                        3F            .byte	$3F
03752 0CB0                        3F            .byte	$3F
03753                                           ! 803   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03754 0CB1                        00            .byte	0
03755 0CB2                        00            .byte	0
03756 0CB3                        3F            .byte	$3F
03757 0CB4                        10            .byte	$10
03758 0CB5                        00            .byte	0
03759 0CB6                        3F            .byte	$3F
03760 0CB7                        1F            .byte	$1F
03761 0CB8                        00            .byte	0
03762 0CB9                        3F            .byte	$3F
03763 0CBA                        2F            .byte	$2F
03764 0CBB                        00            .byte	0
03765 0CBC                        3F            .byte	$3F
03766 0CBD                        3F            .byte	$3F
03767 0CBE                        00            .byte	0
03768 0CBF                        3F            .byte	$3F
03769 0CC0                        3F            .byte	$3F
03770 0CC1                        00            .byte	0
03771 0CC2                        2F            .byte	$2F
03772 0CC3                        3F            .byte	$3F
03773 0CC4                        00            .byte	0
03774 0CC5                        1F            .byte	$1F
03775 0CC6                        3F            .byte	$3F
03776 0CC7                        00            .byte	0
03777 0CC8                        10            .byte	$10
03778                                           ! 804   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03779 0CC9                        3F            .byte	$3F
03780 0CCA                        00            .byte	0
03781 0CCB                        00            .byte	0
03782 0CCC                        3F            .byte	$3F
03783 0CCD                        10            .byte	$10
03784 0CCE                        00            .byte	0
03785 0CCF                        3F            .byte	$3F
03786 0CD0                        1F            .byte	$1F
03787 0CD1                        00            .byte	0
03788 0CD2                        3F            .byte	$3F
03789 0CD3                        2F            .byte	$2F
03790 0CD4                        00            .byte	0
03791 0CD5                        3F            .byte	$3F
03792 0CD6                        3F            .byte	$3F
03793 0CD7                        00            .byte	0
03794 0CD8                        2F            .byte	$2F
03795 0CD9                        3F            .byte	$3F
03796 0CDA                        00            .byte	0
03797 0CDB                        1F            .byte	$1F
03798 0CDC                        3F            .byte	$3F
03799 0CDD                        00            .byte	0
03800 0CDE                        10            .byte	$10
03801 0CDF                        3F            .byte	$3F
03802 0CE0                        00            .byte	0
03803                                           ! 805   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03804 0CE1                        00            .byte	0
03805 0CE2                        3F            .byte	$3F
03806 0CE3                        00            .byte	0
03807 0CE4                        00            .byte	0
03808 0CE5                        3F            .byte	$3F
03809 0CE6                        10            .byte	$10
03810 0CE7                        00            .byte	0
03811 0CE8                        3F            .byte	$3F
03812 0CE9                        1F            .byte	$1F
03813 0CEA                        00            .byte	0
03814 0CEB                        3F            .byte	$3F
03815 0CEC                        2F            .byte	$2F
03816 0CED                        00            .byte	0
03817 0CEE                        3F            .byte	$3F
03818 0CEF                        3F            .byte	$3F
03819 0CF0                        00            .byte	0
03820 0CF1                        2F            .byte	$2F
03821 0CF2                        3F            .byte	$3F
03822 0CF3                        00            .byte	0
03823 0CF4                        1F            .byte	$1F
03824 0CF5                        3F            .byte	$3F
03825 0CF6                        00            .byte	0
03826 0CF7                        10            .byte	$10
03827 0CF8                        3F            .byte	$3F
03828                                           ! 806   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03829 0CF9                        1F            .byte	$1F
03830 0CFA                        1F            .byte	$1F
03831 0CFB                        3F            .byte	$3F
03832 0CFC                        27            .byte	$27
03833 0CFD                        1F            .byte	$1F
03834 0CFE                        3F            .byte	$3F
03835 0CFF                        2F            .byte	$2F
03836 0D00                        1F            .byte	$1F
03837 0D01                        3F            .byte	$3F
03838 0D02                        37            .byte	$37
03839 0D03                        1F            .byte	$1F
03840 0D04                        3F            .byte	$3F
03841 0D05                        3F            .byte	$3F
03842 0D06                        1F            .byte	$1F
03843 0D07                        3F            .byte	$3F
03844 0D08                        3F            .byte	$3F
03845 0D09                        1F            .byte	$1F
03846 0D0A                        37            .byte	$37
03847 0D0B                        3F            .byte	$3F
03848 0D0C                        1F            .byte	$1F
03849 0D0D                        2F            .byte	$2F
03850 0D0E                        3F            .byte	$3F
03851 0D0F                        1F            .byte	$1F
03852 0D10                        27            .byte	$27
03853                                           ! 807   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03854 0D11                        3F            .byte	$3F
03855 0D12                        1F            .byte	$1F
03856 0D13                        1F            .byte	$1F
03857 0D14                        3F            .byte	$3F
03858 0D15                        27            .byte	$27
03859 0D16                        1F            .byte	$1F
03860 0D17                        3F            .byte	$3F
03861 0D18                        2F            .byte	$2F
03862 0D19                        1F            .byte	$1F
03863 0D1A                        3F            .byte	$3F
03864 0D1B                        37            .byte	$37
03865 0D1C                        1F            .byte	$1F
03866 0D1D                        3F            .byte	$3F
03867 0D1E                        3F            .byte	$3F
03868 0D1F                        1F            .byte	$1F
03869 0D20                        37            .byte	$37
03870 0D21                        3F            .byte	$3F
03871 0D22                        1F            .byte	$1F
03872 0D23                        2F            .byte	$2F
03873 0D24                        3F            .byte	$3F
03874 0D25                        1F            .byte	$1F
03875 0D26                        27            .byte	$27
03876 0D27                        3F            .byte	$3F
03877 0D28                        1F            .byte	$1F
03878                                           ! 808   0x1f,0
03879 0D29                        1F            .byte	$1F
03880                                           ! 808 x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03881 0D2A                        3F            .byte	$3F
03882 0D2B                        1F            .byte	$1F
03883 0D2C                        1F            .byte	$1F
03884 0D2D                        3F            .byte	$3F
03885 0D2E                        27            .byte	$27
03886 0D2F                        1F            .byte	$1F
03887 0D30                        3F            .byte	$3F
03888 0D31                        2F            .byte	$2F
03889 0D32                        1F            .byte	$1F
03890 0D33                        3F            .byte	$3F
03891 0D34                        37            .byte	$37
03892 0D35                        1F            .byte	$1F
03893 0D36                        3F            .byte	$3F
03894 0D37                        3F            .byte	$3F
03895 0D38                        1F            .byte	$1F
03896 0D39                        37            .byte	$37
03897 0D3A                        3F            .byte	$3F
03898 0D3B                        1F            .byte	$1F
03899 0D3C                        2F            .byte	$2F
03900 0D3D                        3F            .byte	$3F
03901 0D3E                        1F            .byte	$1F
03902 0D3F                        27            .byte	$27
03903 0D40                        3F            .byte	$3F
03904                                           ! 809   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03905 0D41                        2D            .byte	$2D
03906 0D42                        2D            .byte	$2D
03907 0D43                        3F            .byte	$3F
03908 0D44                        31            .byte	$31
03909 0D45                        2D            .byte	$2D
03910 0D46                        3F            .byte	$3F
03911 0D47                        36            .byte	$36
03912 0D48                        2D            .byte	$2D
03913 0D49                        3F            .byte	$3F
03914 0D4A                        3A            .byte	$3A
03915 0D4B                        2D            .byte	$2D
03916 0D4C                        3F            .byte	$3F
03917 0D4D                        3F            .byte	$3F
03918 0D4E                        2D            .byte	$2D
03919 0D4F                        3F            .byte	$3F
03920 0D50                        3F            .byte	$3F
03921 0D51                        2D            .byte	$2D
03922 0D52                        3A            .byte	$3A
03923 0D53                        3F            .byte	$3F
03924 0D54                        2D            .byte	$2D
03925 0D55                        36            .byte	$36
03926 0D56                        3F            .byte	$3F
03927 0D57                        2D            .byte	$2D
03928 0D58                        31            .byte	$31
03929                                           ! 810   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03930 0D59                        3F            .byte	$3F
03931 0D5A                        2D            .byte	$2D
03932 0D5B                        2D            .byte	$2D
03933 0D5C                        3F            .byte	$3F
03934 0D5D                        31            .byte	$31
03935 0D5E                        2D            .byte	$2D
03936 0D5F                        3F            .byte	$3F
03937 0D60                        36            .byte	$36
03938 0D61                        2D            .byte	$2D
03939 0D62                        3F            .byte	$3F
03940 0D63                        3A            .byte	$3A
03941 0D64                        2D            .byte	$2D
03942 0D65                        3F            .byte	$3F
03943 0D66                        3F            .byte	$3F
03944 0D67                        2D            .byte	$2D
03945 0D68                        3A            .byte	$3A
03946 0D69                        3F            .byte	$3F
03947 0D6A                        2D            .byte	$2D
03948 0D6B                        36            .byte	$36
03949 0D6C                        3F            .byte	$3F
03950 0D6D                        2D            .byte	$2D
03951 0D6E                        31            .byte	$31
03952 0D6F                        3F            .byte	$3F
03953 0D70                        2D            .byte	$2D
03954                                           ! 811   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03955 0D71                        2D            .byte	$2D
03956 0D72                        3F            .byte	$3F
03957 0D73                        2D            .byte	$2D
03958 0D74                        2D            .byte	$2D
03959 0D75                        3F            .byte	$3F
03960 0D76                        31            .byte	$31
03961 0D77                        2D            .byte	$2D
03962 0D78                        3F            .byte	$3F
03963 0D79                        36            .byte	$36
03964 0D7A                        2D            .byte	$2D
03965 0D7B                        3F            .byte	$3F
03966 0D7C                        3A            .byte	$3A
03967 0D7D                        2D            .byte	$2D
03968 0D7E                        3F            .byte	$3F
03969 0D7F                        3F            .byte	$3F
03970 0D80                        2D            .byte	$2D
03971 0D81                        3A            .byte	$3A
03972 0D82                        3F            .byte	$3F
03973 0D83                        2D            .byte	$2D
03974 0D84                        36            .byte	$36
03975 0D85                        3F            .byte	$3F
03976 0D86                        2D            .byte	$2D
03977 0D87                        31            .byte	$31
03978 0D88                        3F            .byte	$3F
03979                                           ! 812   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
03980 0D89                        00            .byte	0
03981 0D8A                        00            .byte	0
03982 0D8B                        1C            .byte	$1C
03983 0D8C                        07            .byte	7
03984 0D8D                        00            .byte	0
03985 0D8E                        1C            .byte	$1C
03986 0D8F                        0E            .byte	$E
03987 0D90                        00            .byte	0
03988 0D91                        1C            .byte	$1C
03989 0D92                        15            .byte	$15
03990 0D93                        00            .byte	0
03991 0D94                        1C            .byte	$1C
03992 0D95                        1C            .byte	$1C
03993 0D96                        00            .byte	0
03994 0D97                        1C            .byte	$1C
03995 0D98                        1C            .byte	$1C
03996 0D99                        00            .byte	0
03997 0D9A                        15            .byte	$15
03998 0D9B                        1C            .byte	$1C
03999 0D9C                        00            .byte	0
04000 0D9D                        0E            .byte	$E
04001 0D9E                        1C            .byte	$1C
04002 0D9F                        00            .byte	0
04003 0DA0                        07            .byte	7
04004                                           ! 813   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
04005 0DA1                        1C            .byte	$1C
04006 0DA2                        00            .byte	0
04007 0DA3                        00            .byte	0
04008 0DA4                        1C            .byte	$1C
04009 0DA5                        07            .byte	7
04010 0DA6                        00            .byte	0
04011 0DA7                        1C            .byte	$1C
04012 0DA8                        0E            .byte	$E
04013 0DA9                        00            .byte	0
04014 0DAA                        1C            .byte	$1C
04015 0DAB                        15            .byte	$15
04016 0DAC                        00            .byte	0
04017 0DAD                        1C            .byte	$1C
04018 0DAE                        1C            .byte	$1C
04019 0DAF                        00            .byte	0
04020 0DB0                        15            .byte	$15
04021 0DB1                        1C            .byte	$1C
04022 0DB2                        00            .byte	0
04023 0DB3                        0E            .byte	$E
04024 0DB4                        1C            .byte	$1C
04025 0DB5                        00            .byte	0
04026 0DB6                        07            .byte	7
04027 0DB7                        1C            .byte	$1C
04028 0DB8                        00            .byte	0
04029                                           ! 814   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
04030 0DB9                        00            .byte	0
04031 0DBA                        1C            .byte	$1C
04032 0DBB                        00            .byte	0
04033 0DBC                        00            .byte	0
04034 0DBD                        1C            .byte	$1C
04035 0DBE                        07            .byte	7
04036 0DBF                        00            .byte	0
04037 0DC0                        1C            .byte	$1C
04038 0DC1                        0E            .byte	$E
04039 0DC2                        00            .byte	0
04040 0DC3                        1C            .byte	$1C
04041 0DC4                        15            .byte	$15
04042 0DC5                        00            .byte	0
04043 0DC6                        1C            .byte	$1C
04044 0DC7                        1C            .byte	$1C
04045 0DC8                        00            .byte	0
04046 0DC9                        15            .byte	$15
04047 0DCA                        1C            .byte	$1C
04048 0DCB                        00            .byte	0
04049 0DCC                        0E            .byte	$E
04050 0DCD                        1C            .byte	$1C
04051 0DCE                        00            .byte	0
04052 0DCF                        07            .byte	7
04053 0DD0                        1C            .byte	$1C
04054                                           ! 815   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
04055 0DD1                        0E            .byte	$E
04056 0DD2                        0E            .byte	$E
04057 0DD3                        1C            .byte	$1C
04058 0DD4                        11            .byte	$11
04059 0DD5                        0E            .byte	$E
04060 0DD6                        1C            .byte	$1C
04061 0DD7                        15            .byte	$15
04062 0DD8                        0E            .byte	$E
04063 0DD9                        1C            .byte	$1C
04064 0DDA                        18            .byte	$18
04065 0DDB                        0E            .byte	$E
04066 0DDC                        1C            .byte	$1C
04067 0DDD                        1C            .byte	$1C
04068 0DDE                        0E            .byte	$E
04069 0DDF                        1C            .byte	$1C
04070 0DE0                        1C            .byte	$1C
04071 0DE1                        0E            .byte	$E
04072 0DE2                        18            .byte	$18
04073 0DE3                        1C            .byte	$1C
04074 0DE4                        0E            .byte	$E
04075 0DE5                        15            .byte	$15
04076 0DE6                        1C            .byte	$1C
04077 0DE7                        0E            .byte	$E
04078 0DE8                        11            .byte	$11
04079                                           ! 816   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
04080 0DE9                        1C            .byte	$1C
04081 0DEA                        0E            .byte	$E
04082 0DEB                        0E            .byte	$E
04083 0DEC                        1C            .byte	$1C
04084 0DED                        11            .byte	$11
04085 0DEE                        0E            .byte	$E
04086 0DEF                        1C            .byte	$1C
04087 0DF0                        15            .byte	$15
04088 0DF1                        0E            .byte	$E
04089 0DF2                        1C            .byte	$1C
04090 0DF3                        18            .byte	$18
04091 0DF4                        0E            .byte	$E
04092 0DF5                        1C            .byte	$1C
04093 0DF6                        1C            .byte	$1C
04094 0DF7                        0E            .byte	$E
04095 0DF8                        18            .byte	$18
04096 0DF9                        1C            .byte	$1C
04097 0DFA                        0E            .byte	$E
04098 0DFB                        15            .byte	$15
04099 0DFC                        1C            .byte	$1C
04100 0DFD                        0E            .byte	$E
04101 0DFE                        11            .byte	$11
04102 0DFF                        1C            .byte	$1C
04103 0E00                        0E            .byte	$E
04104                                           ! 817   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
04105 0E01                        0E            .byte	$E
04106 0E02                        1C            .byte	$1C
04107 0E03                        0E            .byte	$E
04108 0E04                        0E            .byte	$E
04109 0E05                        1C            .byte	$1C
04110 0E06                        11            .byte	$11
04111 0E07                        0E            .byte	$E
04112 0E08                        1C            .byte	$1C
04113 0E09                        15            .byte	$15
04114 0E0A                        0E            .byte	$E
04115 0E0B                        1C            .byte	$1C
04116 0E0C                        18            .byte	$18
04117 0E0D                        0E            .byte	$E
04118 0E0E                        1C            .byte	$1C
04119 0E0F                        1C            .byte	$1C
04120 0E10                        0E            .byte	$E
04121 0E11                        18            .byte	$18
04122 0E12                        1C            .byte	$1C
04123 0E13                        0E            .byte	$E
04124 0E14                        15            .byte	$15
04125 0E15                        1C            .byte	$1C
04126 0E16                        0E            .byte	$E
04127 0E17                        11            .byte	$11
04128 0E18                        1C            .byte	$1C
04129                                           ! 818   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
04130 0E19                        14            .byte	$14
04131 0E1A                        14            .byte	$14
04132 0E1B                        1C            .byte	$1C
04133 0E1C                        16            .byte	$16
04134 0E1D                        14            .byte	$14
04135 0E1E                        1C            .byte	$1C
04136 0E1F                        18            .byte	$18
04137 0E20                        14            .byte	$14
04138 0E21                        1C            .byte	$1C
04139 0E22                        1A            .byte	$1A
04140 0E23                        14            .byte	$14
04141 0E24                        1C            .byte	$1C
04142 0E25                        1C            .byte	$1C
04143 0E26                        14            .byte	$14
04144 0E27                        1C            .byte	$1C
04145 0E28                        1C            .byte	$1C
04146 0E29                        14            .byte	$14
04147 0E2A                        1A            .byte	$1A
04148 0E2B                        1C            .byte	$1C
04149 0E2C                        14            .byte	$14
04150 0E2D                        18            .byte	$18
04151 0E2E                        1C            .byte	$1C
04152 0E2F                        14            .byte	$14
04153 0E30                        16            .byte	$16
04154                                           ! 819   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
04155 0E31                        1C            .byte	$1C
04156 0E32                        14            .byte	$14
04157 0E33                        14            .byte	$14
04158 0E34                        1C            .byte	$1C
04159 0E35                        16            .byte	$16
04160 0E36                        14            .byte	$14
04161 0E37                        1C            .byte	$1C
04162 0E38                        18            .byte	$18
04163 0E39                        14            .byte	$14
04164 0E3A                        1C            .byte	$1C
04165 0E3B                        1A            .byte	$1A
04166 0E3C                        14            .byte	$14
04167 0E3D                        1C            .byte	$1C
04168 0E3E                        1C            .byte	$1C
04169 0E3F                        14            .byte	$14
04170 0E40                        1A            .byte	$1A
04171 0E41                        1C            .byte	$1C
04172 0E42                        14            .byte	$14
04173 0E43                        18            .byte	$18
04174 0E44                        1C            .byte	$1C
04175 0E45                        14            .byte	$14
04176 0E46                        16            .byte	$16
04177 0E47                        1C            .byte	$1C
04178 0E48                        14            .byte	$14
04179                                           ! 820   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
04180 0E49                        14            .byte	$14
04181 0E4A                        1C            .byte	$1C
04182 0E4B                        14            .byte	$14
04183 0E4C                        14            .byte	$14
04184 0E4D                        1C            .byte	$1C
04185 0E4E                        16            .byte	$16
04186 0E4F                        14            .byte	$14
04187 0E50                        1C            .byte	$1C
04188 0E51                        18            .byte	$18
04189 0E52                        14            .byte	$14
04190 0E53                        1C            .byte	$1C
04191 0E54                        1A            .byte	$1A
04192 0E55                        14            .byte	$14
04193 0E56                        1C            .byte	$1C
04194 0E57                        1C            .byte	$1C
04195 0E58                        14            .byte	$14
04196 0E59                        1A            .byte	$1A
04197 0E5A                        1C            .byte	$1C
04198 0E5B                        14            .byte	$14
04199 0E5C                        18            .byte	$18
04200 0E5D                        1C            .byte	$1C
04201 0E5E                        14            .byte	$14
04202 0E5F                        16            .byte	$16
04203 0E60                        1C            .byte	$1C
04204                                           ! 821   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
04205 0E61                        00            .byte	0
04206 0E62                        00            .byte	0
04207 0E63                        10            .byte	$10
04208 0E64                        04            .byte	4
04209 0E65                        00            .byte	0
04210 0E66                        10            .byte	$10
04211 0E67                        08            .byte	8
04212 0E68                        00            .byte	0
04213 0E69                        10            .byte	$10
04214 0E6A                        0C            .byte	$C
04215 0E6B                        00            .byte	0
04216 0E6C                        10            .byte	$10
04217 0E6D                        10            .byte	$10
04218 0E6E                        00            .byte	0
04219 0E6F                        10            .byte	$10
04220 0E70                        10            .byte	$10
04221 0E71                        00            .byte	0
04222 0E72                        0C            .byte	$C
04223 0E73                        10            .byte	$10
04224 0E74                        00            .byte	0
04225 0E75                        08            .byte	8
04226 0E76                        10            .byte	$10
04227 0E77                        00            .byte	0
04228 0E78                        04            .byte	4
04229                                           ! 822   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
04230 0E79                        10            .byte	$10
04231 0E7A                        00            .byte	0
04232 0E7B                        00            .byte	0
04233 0E7C                        10            .byte	$10
04234 0E7D                        04            .byte	4
04235 0E7E                        00            .byte	0
04236 0E7F                        10            .byte	$10
04237 0E80                        08            .byte	8
04238 0E81                        00            .byte	0
04239 0E82                        10            .byte	$10
04240 0E83                        0C            .byte	$C
04241 0E84                        00            .byte	0
04242 0E85                        10            .byte	$10
04243 0E86                        10            .byte	$10
04244 0E87                        00            .byte	0
04245 0E88                        0C            .byte	$C
04246 0E89                        10            .byte	$10
04247 0E8A                        00            .byte	0
04248 0E8B                        08            .byte	8
04249 0E8C                        10            .byte	$10
04250 0E8D                        00            .byte	0
04251 0E8E                        04            .byte	4
04252 0E8F                        10            .byte	$10
04253 0E90                        00            .byte	0
04254                                           ! 823   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x0
04255 0E91                        00            .byte	0
04256 0E92                        10            .byte	$10
04257 0E93                        00            .byte	0
04258 0E94                        00            .byte	0
04259 0E95                        10            .byte	$10
04260 0E96                        04            .byte	4
04261 0E97                        00            .byte	0
04262 0E98                        10            .byte	$10
04263 0E99                        08            .byte	8
04264 0E9A                        00            .byte	0
04265 0E9B                        10            .byte	$10
04266 0E9C                        0C            .byte	$C
04267 0E9D                        00            .byte	0
04268 0E9E                        10            .byte	$10
04269 0E9F                        10            .byte	$10
04270 0EA0                        00            .byte	0
04271 0EA1                        0C            .byte	$C
04272 0EA2                        10            .byte	$10
04273 0EA3                        00            .byte	0
04274                                           ! 823 8,0x10, 0x00,0x04,0x10,
04275 0EA4                        08            .byte	8
04276 0EA5                        10            .byte	$10
04277 0EA6                        00            .byte	0
04278 0EA7                        04            .byte	4
04279 0EA8                        10            .byte	$10
04280                                           ! 824   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04281 0EA9                        08            .byte	8
04282 0EAA                        08            .byte	8
04283 0EAB                        10            .byte	$10
04284 0EAC                        0A            .byte	$A
04285 0EAD                        08            .byte	8
04286 0EAE                        10            .byte	$10
04287 0EAF                        0C            .byte	$C
04288 0EB0                        08            .byte	8
04289 0EB1                        10            .byte	$10
04290 0EB2                        0E            .byte	$E
04291 0EB3                        08            .byte	8
04292 0EB4                        10            .byte	$10
04293 0EB5                        10            .byte	$10
04294 0EB6                        08            .byte	8
04295 0EB7                        10            .byte	$10
04296 0EB8                        10            .byte	$10
04297 0EB9                        08            .byte	8
04298 0EBA                        0E            .byte	$E
04299 0EBB                        10            .byte	$10
04300 0EBC                        08            .byte	8
04301 0EBD                        0C            .byte	$C
04302 0EBE                        10            .byte	$10
04303 0EBF                        08            .byte	8
04304 0EC0                        0A            .byte	$A
04305                                           ! 825   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04306 0EC1                        10            .byte	$10
04307 0EC2                        08            .byte	8
04308 0EC3                        08            .byte	8
04309 0EC4                        10            .byte	$10
04310 0EC5                        0A            .byte	$A
04311 0EC6                        08            .byte	8
04312 0EC7                        10            .byte	$10
04313 0EC8                        0C            .byte	$C
04314 0EC9                        08            .byte	8
04315 0ECA                        10            .byte	$10
04316 0ECB                        0E            .byte	$E
04317 0ECC                        08            .byte	8
04318 0ECD                        10            .byte	$10
04319 0ECE                        10            .byte	$10
04320 0ECF                        08            .byte	8
04321 0ED0                        0E            .byte	$E
04322 0ED1                        10            .byte	$10
04323 0ED2                        08            .byte	8
04324 0ED3                        0C            .byte	$C
04325 0ED4                        10            .byte	$10
04326 0ED5                        08            .byte	8
04327 0ED6                        0A            .byte	$A
04328 0ED7                        10            .byte	$10
04329 0ED8                        08            .byte	8
04330                                           ! 826   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04331 0ED9                        08            .byte	8
04332 0EDA                        10            .byte	$10
04333 0EDB                        08            .byte	8
04334 0EDC                        08            .byte	8
04335 0EDD                        10            .byte	$10
04336 0EDE                        0A            .byte	$A
04337 0EDF                        08            .byte	8
04338 0EE0                        10            .byte	$10
04339 0EE1                        0C            .byte	$C
04340 0EE2                        08            .byte	8
04341 0EE3                        10            .byte	$10
04342 0EE4                        0E            .byte	$E
04343 0EE5                        08            .byte	8
04344 0EE6                        10            .byte	$10
04345 0EE7                        10            .byte	$10
04346 0EE8                        08            .byte	8
04347 0EE9                        0E            .byte	$E
04348 0EEA                        10            .byte	$10
04349 0EEB                        08            .byte	8
04350 0EEC                        0C            .byte	$C
04351 0EED                        10            .byte	$10
04352 0EEE                        08            .byte	8
04353 0EEF                        0A            .byte	$A
04354 0EF0                        10            .byte	$10
04355                                           ! 827   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04356 0EF1                        0B            .byte	$B
04357 0EF2                        0B            .byte	$B
04358 0EF3                        10            .byte	$10
04359 0EF4                        0C            .byte	$C
04360 0EF5                        0B            .byte	$B
04361 0EF6                        10            .byte	$10
04362 0EF7                        0D            .byte	$D
04363 0EF8                        0B            .byte	$B
04364 0EF9                        10            .byte	$10
04365 0EFA                        0F            .byte	$F
04366 0EFB                        0B            .byte	$B
04367 0EFC                        10            .byte	$10
04368 0EFD                        10            .byte	$10
04369 0EFE                        0B            .byte	$B
04370 0EFF                        10            .byte	$10
04371 0F00                        10            .byte	$10
04372 0F01                        0B            .byte	$B
04373 0F02                        0F            .byte	$F
04374 0F03                        10            .byte	$10
04375 0F04                        0B            .byte	$B
04376 0F05                        0D            .byte	$D
04377 0F06                        10            .byte	$10
04378 0F07                        0B            .byte	$B
04379 0F08                        0C            .byte	$C
04380                                           ! 828   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04381 0F09                        10            .byte	$10
04382 0F0A                        0B            .byte	$B
04383 0F0B                        0B            .byte	$B
04384 0F0C                        10            .byte	$10
04385 0F0D                        0C            .byte	$C
04386 0F0E                        0B            .byte	$B
04387 0F0F                        10            .byte	$10
04388 0F10                        0D            .byte	$D
04389 0F11                        0B            .byte	$B
04390 0F12                        10            .byte	$10
04391 0F13                        0F            .byte	$F
04392 0F14                        0B            .byte	$B
04393 0F15                        10            .byte	$10
04394 0F16                        10            .byte	$10
04395 0F17                        0B            .byte	$B
04396 0F18                        0F            .byte	$F
04397 0F19                        10            .byte	$10
04398 0F1A                        0B            .byte	$B
04399 0F1B                        0D            .byte	$D
04400 0F1C                        10            .byte	$10
04401 0F1D                        0B            .byte	$B
04402 0F1E                        0C            .byte	$C
04403 0F1F                        10            .byte	$10
04404 0F20                        0B            .byte	$B
04405                                           ! 829   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04406 0F21                        0B            .byte	$B
04407 0F22                        10            .byte	$10
04408 0F23                        0B            .byte	$B
04409 0F24                        0B            .byte	$B
04410 0F25                        10            .byte	$10
04411 0F26                        0C            .byte	$C
04412 0F27                        0B            .byte	$B
04413 0F28                        10            .byte	$10
04414 0F29                        0D            .byte	$D
04415 0F2A                        0B            .byte	$B
04416 0F2B                        10            .byte	$10
04417 0F2C                        0F            .byte	$F
04418 0F2D                        0B            .byte	$B
04419 0F2E                        10            .byte	$10
04420 0F2F                        10            .byte	$10
04421 0F30                        0B            .byte	$B
04422 0F31                        0F            .byte	$F
04423 0F32                        10            .byte	$10
04424 0F33                        0B            .byte	$B
04425 0F34                        0D            .byte	$D
04426 0F35                        10            .byte	$10
04427 0F36                        0B            .byte	$B
04428 0F37                        0C            .byte	$C
04429 0F38                        10            .byte	$10
04430                                           ! 830   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04431 0F39                        00            .byte	0
04432 0F3A                        00            .byte	0
04433 0F3B                        00            .byte	0
04434 0F3C                        00            .byte	0
04435 0F3D                        00            .byte	0
04436 0F3E                        00            .byte	0
04437 0F3F                        00            .byte	0
04438 0F40                        00            .byte	0
04439 0F41                        00            .byte	0
04440 0F42                        00            .byte	0
04441 0F43                        00            .byte	0
04442 0F44                        00            .byte	0
04443 0F45                        00            .byte	0
04444 0F46                        00            .byte	0
04445 0F47                        00            .byte	0
04446 0F48                        00            .byte	0
04447 0F49                        00            .byte	0
04448 0F4A                        00            .byte	0
04449 0F4B                        00            .byte	0
04450 0F4C                        00            .byte	0
04451 0F4D                        00            .byte	0
04452 0F4E                        00            .byte	0
04453 0F4F                        00            .byte	0
04454                                           ! 831 };
04455 0F50                        00            .byte	0
04456                                           !BCC_EOS
04457                                           ! 832 static Bit8u static_functionality[0x10]=
04458                                           ! 833 {
04459                       00000F51            _static_functionality:
04460                                           ! 834          0xff,
04461 0F51                        FF            .byte	$FF
04462                                           ! 835          0xe0,
04463 0F52                        E0            .byte	$E0
04464                                           ! 836          0x0f,
04465 0F53                        0F            .byte	$F
04466                                           ! 837          0x00, 0x00, 0x00, 0x00,
04467 0F54                        00            .byte	0
04468 0F55                        00            .byte	0
04469 0F56                        00            .byte	0
04470 0F57                        00            .byte	0
04471                                           ! 838          0x07,
04472 0F58                        07            .byte	7
04473                                           ! 839          0x02,
04474 0F59                        02            .byte	2
04475                                           ! 840          0x08,
04476 0F5A                        08            .byte	8
04477                                           ! 841          0xe7,
04478 0F5B                        E7            .byte	$E7
04479                                           ! 842          0x0c,
04480 0F5C                        0C            .byte	$C
04481                                           ! 843          0x00,
04482 0F5D                        00            .byte	0
04483                                           ! 844          0x00,
04484 0F5E                        00            .byte	0
04485                                           ! 845          0x00,
04486 0F5F                        00            .byte	0
04487                                           ! 846          0x00
04488                                           ! 847 };
04489 0F60                        00            .byte	0
04490                                           !BCC_EOS
04491                                           ! 848 static Bit8u vgafont8[256*8]=
04492                                           ! 849 {
04493                       00000F61            _vgafont8:
04494                                           ! 850  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04495 0F61                        00            .byte	0
04496 0F62                        00            .byte	0
04497 0F63                        00            .byte	0
04498 0F64                        00            .byte	0
04499 0F65                        00            .byte	0
04500 0F66                        00            .byte	0
04501 0F67                        00            .byte	0
04502 0F68                        00            .byte	0
04503                                           ! 851  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04504 0F69                        7E            .byte	$7E
04505 0F6A                        81            .byte	$81
04506 0F6B                        A5            .byte	$A5
04507 0F6C                        81            .byte	$81
04508 0F6D                        BD            .byte	$BD
04509 0F6E                        99            .byte	$99
04510 0F6F                        81            .byte	$81
04511 0F70                        7E            .byte	$7E
04512                                           ! 852  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04513 0F71                        7E            .byte	$7E
04514 0F72                        FF            .byte	$FF
04515 0F73                        DB            .byte	$DB
04516 0F74                        FF            .byte	$FF
04517 0F75                        C3            .byte	$C3
04518 0F76                        E7            .byte	$E7
04519 0F77                        FF            .byte	$FF
04520 0F78                        7E            .byte	$7E
04521                                           ! 853  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04522 0F79                        6C            .byte	$6C
04523 0F7A                        FE            .byte	$FE
04524 0F7B                        FE            .byte	$FE
04525 0F7C                        FE            .byte	$FE
04526 0F7D                        7C            .byte	$7C
04527 0F7E                        38            .byte	$38
04528 0F7F                        10            .byte	$10
04529 0F80                        00            .byte	0
04530                                           ! 854  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04531 0F81                        10            .byte	$10
04532 0F82                        38            .byte	$38
04533 0F83                        7C            .byte	$7C
04534 0F84                        FE            .byte	$FE
04535 0F85                        7C            .byte	$7C
04536 0F86                        38            .byte	$38
04537 0F87                        10            .byte	$10
04538 0F88                        00            .byte	0
04539                                           ! 855  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04540 0F89                        38            .byte	$38
04541 0F8A                        7C            .byte	$7C
04542 0F8B                        38            .byte	$38
04543 0F8C                        FE            .byte	$FE
04544 0F8D                        FE            .byte	$FE
04545 0F8E                        7C            .byte	$7C
04546 0F8F                        38            .byte	$38
04547 0F90                        7C            .byte	$7C
04548                                           ! 856  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04549 0F91                        10            .byte	$10
04550 0F92                        10            .byte	$10
04551 0F93                        38            .byte	$38
04552 0F94                        7C            .byte	$7C
04553 0F95                        FE            .byte	$FE
04554 0F96                        7C            .byte	$7C
04555 0F97                        38            .byte	$38
04556 0F98                        7C            .byte	$7C
04557                                           ! 857  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04558 0F99                        00            .byte	0
04559 0F9A                        00            .byte	0
04560 0F9B                        18            .byte	$18
04561 0F9C                        3C            .byte	$3C
04562 0F9D                        3C            .byte	$3C
04563 0F9E                        18            .byte	$18
04564 0F9F                        00            .byte	0
04565 0FA0                        00            .byte	0
04566                                           ! 858  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04567 0FA1                        FF            .byte	$FF
04568 0FA2                        FF            .byte	$FF
04569 0FA3                        E7            .byte	$E7
04570 0FA4                        C3            .byte	$C3
04571 0FA5                        C3            .byte	$C3
04572 0FA6                        E7            .byte	$E7
04573 0FA7                        FF            .byte	$FF
04574 0FA8                        FF            .byte	$FF
04575                                           ! 859  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04576 0FA9                        00            .byte	0
04577 0FAA                        3C            .byte	$3C
04578 0FAB                        66            .byte	$66
04579 0FAC                        42            .byte	$42
04580 0FAD                        42            .byte	$42
04581 0FAE                        66            .byte	$66
04582 0FAF                        3C            .byte	$3C
04583 0FB0                        00            .byte	0
04584                                           ! 860  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04585 0FB1                        FF            .byte	$FF
04586 0FB2                        C3            .byte	$C3
04587 0FB3                        99            .byte	$99
04588 0FB4                        BD            .byte	$BD
04589 0FB5                        BD            .byte	$BD
04590 0FB6                        99            .byte	$99
04591 0FB7                        C3            .byte	$C3
04592 0FB8                        FF            .byte	$FF
04593                                           ! 861  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04594 0FB9                        0F            .byte	$F
04595 0FBA                        07            .byte	7
04596 0FBB                        0F            .byte	$F
04597 0FBC                        7D            .byte	$7D
04598 0FBD                        CC            .byte	$CC
04599 0FBE                        CC            .byte	$CC
04600 0FBF                        CC            .byte	$CC
04601 0FC0                        78            .byte	$78
04602                                           ! 862  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04603 0FC1                        3C            .byte	$3C
04604 0FC2                        66            .byte	$66
04605 0FC3                        66            .byte	$66
04606 0FC4                        66            .byte	$66
04607 0FC5                        3C            .byte	$3C
04608 0FC6                        18            .byte	$18
04609 0FC7                        7E            .byte	$7E
04610 0FC8                        18            .byte	$18
04611                                           ! 863  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04612 0FC9                        3F            .byte	$3F
04613 0FCA                        33            .byte	$33
04614 0FCB                        3F            .byte	$3F
04615 0FCC                        30            .byte	$30
04616 0FCD                        30            .byte	$30
04617 0FCE                        70            .byte	$70
04618 0FCF                        F0            .byte	$F0
04619 0FD0                        E0            .byte	$E0
04620                                           ! 864  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04621 0FD1                        7F            .byte	$7F
04622 0FD2                        63            .byte	$63
04623 0FD3                        7F            .byte	$7F
04624 0FD4                        63            .byte	$63
04625 0FD5                        63            .byte	$63
04626 0FD6                        67            .byte	$67
04627 0FD7                        E6            .byte	$E6
04628 0FD8                        C0            .byte	$C0
04629                                           ! 865  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04630 0FD9                        99            .byte	$99
04631 0FDA                        5A            .byte	$5A
04632 0FDB                        3C            .byte	$3C
04633 0FDC                        E7            .byte	$E7
04634 0FDD                        E7            .byte	$E7
04635 0FDE                        3C            .byte	$3C
04636 0FDF                        5A            .byte	$5A
04637 0FE0                        99            .byte	$99
04638                                           ! 866  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0
04639 0FE1                        80            .byte	$80
04640 0FE2                        E0            .byte	$E0
04641 0FE3                        F8            .byte	$F8
04642 0FE4                        FE            .byte	$FE
04643 0FE5                        F8            .byte	$F8
04644 0FE6                        E0            .byte	$E0
04645                                           ! 866 x80, 0x00,
04646 0FE7                        80            .byte	$80
04647 0FE8                        00            .byte	0
04648                                           ! 867  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04649 0FE9                        02            .byte	2
04650 0FEA                        0E            .byte	$E
04651 0FEB                        3E            .byte	$3E
04652 0FEC                        FE            .byte	$FE
04653 0FED                        3E            .byte	$3E
04654 0FEE                        0E            .byte	$E
04655 0FEF                        02            .byte	2
04656 0FF0                        00            .byte	0
04657                                           ! 868  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04658 0FF1                        18            .byte	$18
04659 0FF2                        3C            .byte	$3C
04660 0FF3                        7E            .byte	$7E
04661 0FF4                        18            .byte	$18
04662 0FF5                        18            .byte	$18
04663 0FF6                        7E            .byte	$7E
04664 0FF7                        3C            .byte	$3C
04665 0FF8                        18            .byte	$18
04666                                           ! 869  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04667 0FF9                        66            .byte	$66
04668 0FFA                        66            .byte	$66
04669 0FFB                        66            .byte	$66
04670 0FFC                        66            .byte	$66
04671 0FFD                        66            .byte	$66
04672 0FFE                        00            .byte	0
04673 0FFF                        66            .byte	$66
04674 1000                        00            .byte	0
04675                                           ! 870  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04676 1001                        7F            .byte	$7F
04677 1002                        DB            .byte	$DB
04678 1003                        DB            .byte	$DB
04679 1004                        7B            .byte	$7B
04680 1005                        1B            .byte	$1B
04681 1006                        1B            .byte	$1B
04682 1007                        1B            .byte	$1B
04683 1008                        00            .byte	0
04684                                           ! 871  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04685 1009                        3E            .byte	$3E
04686 100A                        63            .byte	$63
04687 100B                        38            .byte	$38
04688 100C                        6C            .byte	$6C
04689 100D                        6C            .byte	$6C
04690 100E                        38            .byte	$38
04691 100F                        CC            .byte	$CC
04692 1010                        78            .byte	$78
04693                                           ! 872  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04694 1011                        00            .byte	0
04695 1012                        00            .byte	0
04696 1013                        00            .byte	0
04697 1014                        00            .byte	0
04698 1015                        7E            .byte	$7E
04699 1016                        7E            .byte	$7E
04700 1017                        7E            .byte	$7E
04701 1018                        00            .byte	0
04702                                           ! 873  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04703 1019                        18            .byte	$18
04704 101A                        3C            .byte	$3C
04705 101B                        7E            .byte	$7E
04706 101C                        18            .byte	$18
04707 101D                        7E            .byte	$7E
04708 101E                        3C            .byte	$3C
04709 101F                        18            .byte	$18
04710 1020                        FF            .byte	$FF
04711                                           ! 874  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04712 1021                        18            .byte	$18
04713 1022                        3C            .byte	$3C
04714 1023                        7E            .byte	$7E
04715 1024                        18            .byte	$18
04716 1025                        18            .byte	$18
04717 1026                        18            .byte	$18
04718 1027                        18            .byte	$18
04719 1028                        00            .byte	0
04720                                           ! 875  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04721 1029                        18            .byte	$18
04722 102A                        18            .byte	$18
04723 102B                        18            .byte	$18
04724 102C                        18            .byte	$18
04725 102D                        7E            .byte	$7E
04726 102E                        3C            .byte	$3C
04727 102F                        18            .byte	$18
04728 1030                        00            .byte	0
04729                                           ! 876  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04730 1031                        00            .byte	0
04731 1032                        18            .byte	$18
04732 1033                        0C            .byte	$C
04733 1034                        FE            .byte	$FE
04734 1035                        0C            .byte	$C
04735 1036                        18            .byte	$18
04736 1037                        00            .byte	0
04737 1038                        00            .byte	0
04738                                           ! 877  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04739 1039                        00            .byte	0
04740 103A                        30            .byte	$30
04741 103B                        60            .byte	$60
04742 103C                        FE            .byte	$FE
04743 103D                        60            .byte	$60
04744 103E                        30            .byte	$30
04745 103F                        00            .byte	0
04746 1040                        00            .byte	0
04747                                           ! 878  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04748 1041                        00            .byte	0
04749 1042                        00            .byte	0
04750 1043                        C0            .byte	$C0
04751 1044                        C0            .byte	$C0
04752 1045                        C0            .byte	$C0
04753 1046                        FE            .byte	$FE
04754 1047                        00            .byte	0
04755 1048                        00            .byte	0
04756                                           ! 879  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04757 1049                        00            .byte	0
04758 104A                        24            .byte	$24
04759 104B                        66            .byte	$66
04760 104C                        FF            .byte	$FF
04761 104D                        66            .byte	$66
04762 104E                        24            .byte	$24
04763 104F                        00            .byte	0
04764 1050                        00            .byte	0
04765                                           ! 880  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04766 1051                        00            .byte	0
04767 1052                        18            .byte	$18
04768 1053                        3C            .byte	$3C
04769 1054                        7E            .byte	$7E
04770 1055                        FF            .byte	$FF
04771 1056                        FF            .byte	$FF
04772 1057                        00            .byte	0
04773 1058                        00            .byte	0
04774                                           ! 881  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04775 1059                        00            .byte	0
04776 105A                        FF            .byte	$FF
04777 105B                        FF            .byte	$FF
04778 105C                        7E            .byte	$7E
04779 105D                        3C            .byte	$3C
04780 105E                        18            .byte	$18
04781 105F                        00            .byte	0
04782 1060                        00            .byte	0
04783                                           ! 882  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04784 1061                        00            .byte	0
04785 1062                        00            .byte	0
04786 1063                        00            .byte	0
04787 1064                        00            .byte	0
04788 1065                        00            .byte	0
04789 1066                        00            .byte	0
04790 1067                        00            .byte	0
04791 1068                        00            .byte	0
04792                                           ! 883  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04793 1069                        30            .byte	$30
04794 106A                        78            .byte	$78
04795 106B                        78            .byte	$78
04796 106C                        30            .byte	$30
04797 106D                        30            .byte	$30
04798 106E                        00            .byte	0
04799 106F                        30            .byte	$30
04800 1070                        00            .byte	0
04801                                           ! 884  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04802 1071                        6C            .byte	$6C
04803 1072                        6C            .byte	$6C
04804 1073                        6C            .byte	$6C
04805 1074                        00            .byte	0
04806 1075                        00            .byte	0
04807 1076                        00            .byte	0
04808 1077                        00            .byte	0
04809 1078                        00            .byte	0
04810                                           ! 885  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04811 1079                        6C            .byte	$6C
04812 107A                        6C            .byte	$6C
04813 107B                        FE            .byte	$FE
04814 107C                        6C            .byte	$6C
04815 107D                        FE            .byte	$FE
04816 107E                        6C            .byte	$6C
04817 107F                        6C            .byte	$6C
04818 1080                        00            .byte	0
04819                                           ! 886  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04820 1081                        30            .byte	$30
04821 1082                        7C            .byte	$7C
04822 1083                        C0            .byte	$C0
04823 1084                        78            .byte	$78
04824 1085                        0C            .byte	$C
04825 1086                        F8            .byte	$F8
04826 1087                        30            .byte	$30
04827 1088                        00            .byte	0
04828                                           ! 887  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04829 1089                        00            .byte	0
04830 108A                        C6            .byte	$C6
04831 108B                        CC            .byte	$CC
04832 108C                        18            .byte	$18
04833 108D                        30            .byte	$30
04834 108E                        66            .byte	$66
04835 108F                        C6            .byte	$C6
04836 1090                        00            .byte	0
04837                                           ! 888  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04838 1091                        38            .byte	$38
04839 1092                        6C            .byte	$6C
04840 1093                        38            .byte	$38
04841 1094                        76            .byte	$76
04842 1095                        DC            .byte	$DC
04843 1096                        CC            .byte	$CC
04844 1097                        76            .byte	$76
04845 1098                        00            .byte	0
04846                                           ! 889  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04847 1099                        60            .byte	$60
04848 109A                        60            .byte	$60
04849 109B                        C0            .byte	$C0
04850 109C                        00            .byte	0
04851 109D                        00            .byte	0
04852 109E                        00            .byte	0
04853 109F                        00            .byte	0
04854 10A0                        00            .byte	0
04855                                           ! 890  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04856 10A1                        18            .byte	$18
04857 10A2                        30            .byte	$30
04858 10A3                        60            .byte	$60
04859 10A4                        60            .byte	$60
04860 10A5                        60            .byte	$60
04861 10A6                        30            .byte	$30
04862 10A7                        18            .byte	$18
04863 10A8                        00            .byte	0
04864                                           ! 891  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04865 10A9                        60            .byte	$60
04866 10AA                        30            .byte	$30
04867 10AB                        18            .byte	$18
04868 10AC                        18            .byte	$18
04869 10AD                        18            .byte	$18
04870 10AE                        30            .byte	$30
04871 10AF                        60            .byte	$60
04872 10B0                        00            .byte	0
04873                                           ! 892  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04874 10B1                        00            .byte	0
04875 10B2                        66            .byte	$66
04876 10B3                        3C            .byte	$3C
04877 10B4                        FF            .byte	$FF
04878 10B5                        3C            .byte	$3C
04879 10B6                        66            .byte	$66
04880 10B7                        00            .byte	0
04881 10B8                        00            .byte	0
04882                                           ! 893  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04883 10B9                        00            .byte	0
04884 10BA                        30            .byte	$30
04885 10BB                        30            .byte	$30
04886 10BC                        FC            .byte	$FC
04887 10BD                        30            .byte	$30
04888 10BE                        30            .byte	$30
04889 10BF                        00            .byte	0
04890 10C0                        00            .byte	0
04891                                           ! 894  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04892 10C1                        00            .byte	0
04893 10C2                        00            .byte	0
04894 10C3                        00            .byte	0
04895 10C4                        00            .byte	0
04896 10C5                        00            .byte	0
04897 10C6                        30            .byte	$30
04898 10C7                        30            .byte	$30
04899 10C8                        60            .byte	$60
04900                                           ! 895  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04901 10C9                        00            .byte	0
04902 10CA                        00            .byte	0
04903 10CB                        00            .byte	0
04904 10CC                        FC            .byte	$FC
04905 10CD                        00            .byte	0
04906 10CE                        00            .byte	0
04907 10CF                        00            .byte	0
04908 10D0                        00            .byte	0
04909                                           ! 896  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04910 10D1                        00            .byte	0
04911 10D2                        00            .byte	0
04912 10D3                        00            .byte	0
04913 10D4                        00            .byte	0
04914 10D5                        00            .byte	0
04915 10D6                        30            .byte	$30
04916 10D7                        30            .byte	$30
04917 10D8                        00            .byte	0
04918                                           ! 897  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04919 10D9                        06            .byte	6
04920 10DA                        0C            .byte	$C
04921 10DB                        18            .byte	$18
04922 10DC                        30            .byte	$30
04923 10DD                        60            .byte	$60
04924 10DE                        C0            .byte	$C0
04925 10DF                        80            .byte	$80
04926 10E0                        00            .byte	0
04927                                           ! 898  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04928 10E1                        7C            .byte	$7C
04929 10E2                        C6            .byte	$C6
04930 10E3                        CE            .byte	$CE
04931 10E4                        DE            .byte	$DE
04932 10E5                        F6            .byte	$F6
04933 10E6                        E6            .byte	$E6
04934 10E7                        7C            .byte	$7C
04935 10E8                        00            .byte	0
04936                                           ! 899  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04937 10E9                        30            .byte	$30
04938 10EA                        70            .byte	$70
04939 10EB                        30            .byte	$30
04940 10EC                        30            .byte	$30
04941 10ED                        30            .byte	$30
04942 10EE                        30            .byte	$30
04943 10EF                        FC            .byte	$FC
04944 10F0                        00            .byte	0
04945                                           ! 900  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04946 10F1                        78            .byte	$78
04947 10F2                        CC            .byte	$CC
04948 10F3                        0C            .byte	$C
04949 10F4                        38            .byte	$38
04950 10F5                        60            .byte	$60
04951 10F6                        CC            .byte	$CC
04952 10F7                        FC            .byte	$FC
04953 10F8                        00            .byte	0
04954                                           ! 901  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04955 10F9                        78            .byte	$78
04956 10FA                        CC            .byte	$CC
04957 10FB                        0C            .byte	$C
04958 10FC                        38            .byte	$38
04959 10FD                        0C            .byte	$C
04960 10FE                        CC            .byte	$CC
04961 10FF                        78            .byte	$78
04962 1100                        00            .byte	0
04963                                           ! 902  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04964 1101                        1C            .byte	$1C
04965 1102                        3C            .byte	$3C
04966 1103                        6C            .byte	$6C
04967 1104                        CC            .byte	$CC
04968 1105                        FE            .byte	$FE
04969 1106                        0C            .byte	$C
04970 1107                        1E            .byte	$1E
04971 1108                        00            .byte	0
04972                                           ! 903  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
04973 1109                        FC            .byte	$FC
04974 110A                        C0            .byte	$C0
04975 110B                        F8            .byte	$F8
04976 110C                        0C            .byte	$C
04977 110D                        0C            .byte	$C
04978 110E                        CC            .byte	$CC
04979 110F                        78            .byte	$78
04980 1110                        00            .byte	0
04981                                           ! 904  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
04982 1111                        38            .byte	$38
04983 1112                        60            .byte	$60
04984 1113                        C0            .byte	$C0
04985 1114                        F8            .byte	$F8
04986 1115                        CC            .byte	$CC
04987 1116                        CC            .byte	$CC
04988 1117                        78            .byte	$78
04989 1118                        00            .byte	0
04990                                           ! 905  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
04991 1119                        FC            .byte	$FC
04992 111A                        CC            .byte	$CC
04993 111B                        0C            .byte	$C
04994 111C                        18            .byte	$18
04995 111D                        30            .byte	$30
04996 111E                        30            .byte	$30
04997 111F                        30            .byte	$30
04998 1120                        00            .byte	0
04999                                           ! 906  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05000 1121                        78            .byte	$78
05001 1122                        CC            .byte	$CC
05002 1123                        CC            .byte	$CC
05003 1124                        78            .byte	$78
05004 1125                        CC            .byte	$CC
05005 1126                        CC            .byte	$CC
05006 1127                        78            .byte	$78
05007 1128                        00            .byte	0
05008                                           ! 907  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
05009 1129                        78            .byte	$78
05010 112A                        CC            .byte	$CC
05011 112B                        CC            .byte	$CC
05012 112C                        7C            .byte	$7C
05013 112D                        0C            .byte	$C
05014 112E                        18            .byte	$18
05015 112F                        70            .byte	$70
05016 1130                        00            .byte	0
05017                                           ! 908  0x00, 0x30, 0x30, 0x00, 0x0
05018 1131                        00            .byte	0
05019 1132                        30            .byte	$30
05020 1133                        30            .byte	$30
05021 1134                        00            .byte	0
05022                                           ! 908 0, 0x30, 0x30, 0x00,
05023 1135                        00            .byte	0
05024 1136                        30            .byte	$30
05025 1137                        30            .byte	$30
05026 1138                        00            .byte	0
05027                                           ! 909  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
05028 1139                        00            .byte	0
05029 113A                        30            .byte	$30
05030 113B                        30            .byte	$30
05031 113C                        00            .byte	0
05032 113D                        00            .byte	0
05033 113E                        30            .byte	$30
05034 113F                        30            .byte	$30
05035 1140                        60            .byte	$60
05036                                           ! 910  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
05037 1141                        18            .byte	$18
05038 1142                        30            .byte	$30
05039 1143                        60            .byte	$60
05040 1144                        C0            .byte	$C0
05041 1145                        60            .byte	$60
05042 1146                        30            .byte	$30
05043 1147                        18            .byte	$18
05044 1148                        00            .byte	0
05045                                           ! 911  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
05046 1149                        00            .byte	0
05047 114A                        00            .byte	0
05048 114B                        FC            .byte	$FC
05049 114C                        00            .byte	0
05050 114D                        00            .byte	0
05051 114E                        FC            .byte	$FC
05052 114F                        00            .byte	0
05053 1150                        00            .byte	0
05054                                           ! 912  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
05055 1151                        60            .byte	$60
05056 1152                        30            .byte	$30
05057 1153                        18            .byte	$18
05058 1154                        0C            .byte	$C
05059 1155                        18            .byte	$18
05060 1156                        30            .byte	$30
05061 1157                        60            .byte	$60
05062 1158                        00            .byte	0
05063                                           ! 913  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
05064 1159                        78            .byte	$78
05065 115A                        CC            .byte	$CC
05066 115B                        0C            .byte	$C
05067 115C                        18            .byte	$18
05068 115D                        30            .byte	$30
05069 115E                        00            .byte	0
05070 115F                        30            .byte	$30
05071 1160                        00            .byte	0
05072                                           ! 914  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
05073 1161                        7C            .byte	$7C
05074 1162                        C6            .byte	$C6
05075 1163                        DE            .byte	$DE
05076 1164                        DE            .byte	$DE
05077 1165                        DE            .byte	$DE
05078 1166                        C0            .byte	$C0
05079 1167                        78            .byte	$78
05080 1168                        00            .byte	0
05081                                           ! 915  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
05082 1169                        30            .byte	$30
05083 116A                        78            .byte	$78
05084 116B                        CC            .byte	$CC
05085 116C                        CC            .byte	$CC
05086 116D                        FC            .byte	$FC
05087 116E                        CC            .byte	$CC
05088 116F                        CC            .byte	$CC
05089 1170                        00            .byte	0
05090                                           ! 916  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
05091 1171                        FC            .byte	$FC
05092 1172                        66            .byte	$66
05093 1173                        66            .byte	$66
05094 1174                        7C            .byte	$7C
05095 1175                        66            .byte	$66
05096 1176                        66            .byte	$66
05097 1177                        FC            .byte	$FC
05098 1178                        00            .byte	0
05099                                           ! 917  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
05100 1179                        3C            .byte	$3C
05101 117A                        66            .byte	$66
05102 117B                        C0            .byte	$C0
05103 117C                        C0            .byte	$C0
05104 117D                        C0            .byte	$C0
05105 117E                        66            .byte	$66
05106 117F                        3C            .byte	$3C
05107 1180                        00            .byte	0
05108                                           ! 918  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
05109 1181                        F8            .byte	$F8
05110 1182                        6C            .byte	$6C
05111 1183                        66            .byte	$66
05112 1184                        66            .byte	$66
05113 1185                        66            .byte	$66
05114 1186                        6C            .byte	$6C
05115 1187                        F8            .byte	$F8
05116 1188                        00            .byte	0
05117                                           ! 919  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
05118 1189                        FE            .byte	$FE
05119 118A                        62            .byte	$62
05120 118B                        68            .byte	$68
05121 118C                        78            .byte	$78
05122 118D                        68            .byte	$68
05123 118E                        62            .byte	$62
05124 118F                        FE            .byte	$FE
05125 1190                        00            .byte	0
05126                                           ! 920  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
05127 1191                        FE            .byte	$FE
05128 1192                        62            .byte	$62
05129 1193                        68            .byte	$68
05130 1194                        78            .byte	$78
05131 1195                        68            .byte	$68
05132 1196                        60            .byte	$60
05133 1197                        F0            .byte	$F0
05134 1198                        00            .byte	0
05135                                           ! 921  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
05136 1199                        3C            .byte	$3C
05137 119A                        66            .byte	$66
05138 119B                        C0            .byte	$C0
05139 119C                        C0            .byte	$C0
05140 119D                        CE            .byte	$CE
05141 119E                        66            .byte	$66
05142 119F                        3E            .byte	$3E
05143 11A0                        00            .byte	0
05144                                           ! 922  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
05145 11A1                        CC            .byte	$CC
05146 11A2                        CC            .byte	$CC
05147 11A3                        CC            .byte	$CC
05148 11A4                        FC            .byte	$FC
05149 11A5                        CC            .byte	$CC
05150 11A6                        CC            .byte	$CC
05151 11A7                        CC            .byte	$CC
05152 11A8                        00            .byte	0
05153                                           ! 923  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05154 11A9                        78            .byte	$78
05155 11AA                        30            .byte	$30
05156 11AB                        30            .byte	$30
05157 11AC                        30            .byte	$30
05158 11AD                        30            .byte	$30
05159 11AE                        30            .byte	$30
05160 11AF                        78            .byte	$78
05161 11B0                        00            .byte	0
05162                                           ! 924  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
05163 11B1                        1E            .byte	$1E
05164 11B2                        0C            .byte	$C
05165 11B3                        0C            .byte	$C
05166 11B4                        0C            .byte	$C
05167 11B5                        CC            .byte	$CC
05168 11B6                        CC            .byte	$CC
05169 11B7                        78            .byte	$78
05170 11B8                        00            .byte	0
05171                                           ! 925  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
05172 11B9                        E6            .byte	$E6
05173 11BA                        66            .byte	$66
05174 11BB                        6C            .byte	$6C
05175 11BC                        78            .byte	$78
05176 11BD                        6C            .byte	$6C
05177 11BE                        66            .byte	$66
05178 11BF                        E6            .byte	$E6
05179 11C0                        00            .byte	0
05180                                           ! 926  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
05181 11C1                        F0            .byte	$F0
05182 11C2                        60            .byte	$60
05183 11C3                        60            .byte	$60
05184 11C4                        60            .byte	$60
05185 11C5                        62            .byte	$62
05186 11C6                        66            .byte	$66
05187 11C7                        FE            .byte	$FE
05188 11C8                        00            .byte	0
05189                                           ! 927  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
05190 11C9                        C6            .byte	$C6
05191 11CA                        EE            .byte	$EE
05192 11CB                        FE            .byte	$FE
05193 11CC                        FE            .byte	$FE
05194 11CD                        D6            .byte	$D6
05195 11CE                        C6            .byte	$C6
05196 11CF                        C6            .byte	$C6
05197 11D0                        00            .byte	0
05198                                           ! 928  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
05199 11D1                        C6            .byte	$C6
05200 11D2                        E6            .byte	$E6
05201 11D3                        F6            .byte	$F6
05202 11D4                        DE            .byte	$DE
05203 11D5                        CE            .byte	$CE
05204 11D6                        C6            .byte	$C6
05205 11D7                        C6            .byte	$C6
05206 11D8                        00            .byte	0
05207                                           ! 929  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
05208 11D9                        38            .byte	$38
05209 11DA                        6C            .byte	$6C
05210 11DB                        C6            .byte	$C6
05211 11DC                        C6            .byte	$C6
05212 11DD                        C6            .byte	$C6
05213 11DE                        6C            .byte	$6C
05214 11DF                        38            .byte	$38
05215 11E0                        00            .byte	0
05216                                           ! 930  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
05217 11E1                        FC            .byte	$FC
05218 11E2                        66            .byte	$66
05219 11E3                        66            .byte	$66
05220 11E4                        7C            .byte	$7C
05221 11E5                        60            .byte	$60
05222 11E6                        60            .byte	$60
05223 11E7                        F0            .byte	$F0
05224 11E8                        00            .byte	0
05225                                           ! 931  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
05226 11E9                        78            .byte	$78
05227 11EA                        CC            .byte	$CC
05228 11EB                        CC            .byte	$CC
05229 11EC                        CC            .byte	$CC
05230 11ED                        DC            .byte	$DC
05231 11EE                        78            .byte	$78
05232 11EF                        1C            .byte	$1C
05233 11F0                        00            .byte	0
05234                                           ! 932  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
05235 11F1                        FC            .byte	$FC
05236 11F2                        66            .byte	$66
05237 11F3                        66            .byte	$66
05238 11F4                        7C            .byte	$7C
05239 11F5                        6C            .byte	$6C
05240 11F6                        66            .byte	$66
05241 11F7                        E6            .byte	$E6
05242 11F8                        00            .byte	0
05243                                           ! 933  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05244 11F9                        78            .byte	$78
05245 11FA                        CC            .byte	$CC
05246 11FB                        E0            .byte	$E0
05247 11FC                        70            .byte	$70
05248 11FD                        1C            .byte	$1C
05249 11FE                        CC            .byte	$CC
05250 11FF                        78            .byte	$78
05251 1200                        00            .byte	0
05252                                           ! 934  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05253 1201                        FC            .byte	$FC
05254 1202                        B4            .byte	$B4
05255 1203                        30            .byte	$30
05256 1204                        30            .byte	$30
05257 1205                        30            .byte	$30
05258 1206                        30            .byte	$30
05259 1207                        78            .byte	$78
05260 1208                        00            .byte	0
05261                                           ! 935  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05262 1209                        CC            .byte	$CC
05263 120A                        CC            .byte	$CC
05264 120B                        CC            .byte	$CC
05265 120C                        CC            .byte	$CC
05266 120D                        CC            .byte	$CC
05267 120E                        CC            .byte	$CC
05268 120F                        FC            .byte	$FC
05269 1210                        00            .byte	0
05270                                           ! 936  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05271 1211                        CC            .byte	$CC
05272 1212                        CC            .byte	$CC
05273 1213                        CC            .byte	$CC
05274 1214                        CC            .byte	$CC
05275 1215                        CC            .byte	$CC
05276 1216                        78            .byte	$78
05277 1217                        30            .byte	$30
05278 1218                        00            .byte	0
05279                                           ! 937  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05280 1219                        C6            .byte	$C6
05281 121A                        C6            .byte	$C6
05282 121B                        C6            .byte	$C6
05283 121C                        D6            .byte	$D6
05284 121D                        FE            .byte	$FE
05285 121E                        EE            .byte	$EE
05286 121F                        C6            .byte	$C6
05287 1220                        00            .byte	0
05288                                           ! 938  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05289 1221                        C6            .byte	$C6
05290 1222                        C6            .byte	$C6
05291 1223                        6C            .byte	$6C
05292 1224                        38            .byte	$38
05293 1225                        38            .byte	$38
05294 1226                        6C            .byte	$6C
05295 1227                        C6            .byte	$C6
05296 1228                        00            .byte	0
05297                                           ! 939  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05298 1229                        CC            .byte	$CC
05299 122A                        CC            .byte	$CC
05300 122B                        CC            .byte	$CC
05301 122C                        78            .byte	$78
05302 122D                        30            .byte	$30
05303 122E                        30            .byte	$30
05304 122F                        78            .byte	$78
05305 1230                        00            .byte	0
05306                                           ! 940  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05307 1231                        FE            .byte	$FE
05308 1232                        C6            .byte	$C6
05309 1233                        8C            .byte	$8C
05310 1234                        18            .byte	$18
05311 1235                        32            .byte	$32
05312 1236                        66            .byte	$66
05313 1237                        FE            .byte	$FE
05314 1238                        00            .byte	0
05315                                           ! 941  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05316 1239                        78            .byte	$78
05317 123A                        60            .byte	$60
05318 123B                        60            .byte	$60
05319 123C                        60            .byte	$60
05320 123D                        60            .byte	$60
05321 123E                        60            .byte	$60
05322 123F                        78            .byte	$78
05323 1240                        00            .byte	0
05324                                           ! 942  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05325 1241                        C0            .byte	$C0
05326 1242                        60            .byte	$60
05327 1243                        30            .byte	$30
05328 1244                        18            .byte	$18
05329 1245                        0C            .byte	$C
05330 1246                        06            .byte	6
05331 1247                        02            .byte	2
05332 1248                        00            .byte	0
05333                                           ! 943  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05334 1249                        78            .byte	$78
05335 124A                        18            .byte	$18
05336 124B                        18            .byte	$18
05337 124C                        18            .byte	$18
05338 124D                        18            .byte	$18
05339 124E                        18            .byte	$18
05340 124F                        78            .byte	$78
05341 1250                        00            .byte	0
05342                                           ! 944  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05343 1251                        10            .byte	$10
05344 1252                        38            .byte	$38
05345 1253                        6C            .byte	$6C
05346 1254                        C6            .byte	$C6
05347 1255                        00            .byte	0
05348 1256                        00            .byte	0
05349 1257                        00            .byte	0
05350 1258                        00            .byte	0
05351                                           ! 945  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05352 1259                        00            .byte	0
05353 125A                        00            .byte	0
05354 125B                        00            .byte	0
05355 125C                        00            .byte	0
05356 125D                        00            .byte	0
05357 125E                        00            .byte	0
05358 125F                        00            .byte	0
05359 1260                        FF            .byte	$FF
05360                                           ! 946  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05361 1261                        30            .byte	$30
05362 1262                        30            .byte	$30
05363 1263                        18            .byte	$18
05364 1264                        00            .byte	0
05365 1265                        00            .byte	0
05366 1266                        00            .byte	0
05367 1267                        00            .byte	0
05368 1268                        00            .byte	0
05369                                           ! 947  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05370 1269                        00            .byte	0
05371 126A                        00            .byte	0
05372 126B                        78            .byte	$78
05373 126C                        0C            .byte	$C
05374 126D                        7C            .byte	$7C
05375 126E                        CC            .byte	$CC
05376 126F                        76            .byte	$76
05377 1270                        00            .byte	0
05378                                           ! 948  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05379 1271                        E0            .byte	$E0
05380 1272                        60            .byte	$60
05381 1273                        60            .byte	$60
05382 1274                        7C            .byte	$7C
05383 1275                        66            .byte	$66
05384 1276                        66            .byte	$66
05385 1277                        DC            .byte	$DC
05386 1278                        00            .byte	0
05387                                           ! 949  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05388 1279                        00            .byte	0
05389 127A                        00            .byte	0
05390 127B                        78            .byte	$78
05391 127C                        CC            .byte	$CC
05392 127D                        C0            .byte	$C0
05393 127E                        CC            .byte	$CC
05394 127F                        78            .byte	$78
05395 1280                        00            .byte	0
05396                                           ! 950  0x1c, 0x0c, 0x0c,
05397 1281                        1C            .byte	$1C
05398 1282                        0C            .byte	$C
05399                                           ! 950  0x7c, 0xcc, 0xcc, 0x76, 0x00,
05400 1283                        0C            .byte	$C
05401 1284                        7C            .byte	$7C
05402 1285                        CC            .byte	$CC
05403 1286                        CC            .byte	$CC
05404 1287                        76            .byte	$76
05405 1288                        00            .byte	0
05406                                           ! 951  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05407 1289                        00            .byte	0
05408 128A                        00            .byte	0
05409 128B                        78            .byte	$78
05410 128C                        CC            .byte	$CC
05411 128D                        FC            .byte	$FC
05412 128E                        C0            .byte	$C0
05413 128F                        78            .byte	$78
05414 1290                        00            .byte	0
05415                                           ! 952  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05416 1291                        38            .byte	$38
05417 1292                        6C            .byte	$6C
05418 1293                        60            .byte	$60
05419 1294                        F0            .byte	$F0
05420 1295                        60            .byte	$60
05421 1296                        60            .byte	$60
05422 1297                        F0            .byte	$F0
05423 1298                        00            .byte	0
05424                                           ! 953  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05425 1299                        00            .byte	0
05426 129A                        00            .byte	0
05427 129B                        76            .byte	$76
05428 129C                        CC            .byte	$CC
05429 129D                        CC            .byte	$CC
05430 129E                        7C            .byte	$7C
05431 129F                        0C            .byte	$C
05432 12A0                        F8            .byte	$F8
05433                                           ! 954  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05434 12A1                        E0            .byte	$E0
05435 12A2                        60            .byte	$60
05436 12A3                        6C            .byte	$6C
05437 12A4                        76            .byte	$76
05438 12A5                        66            .byte	$66
05439 12A6                        66            .byte	$66
05440 12A7                        E6            .byte	$E6
05441 12A8                        00            .byte	0
05442                                           ! 955  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05443 12A9                        30            .byte	$30
05444 12AA                        00            .byte	0
05445 12AB                        70            .byte	$70
05446 12AC                        30            .byte	$30
05447 12AD                        30            .byte	$30
05448 12AE                        30            .byte	$30
05449 12AF                        78            .byte	$78
05450 12B0                        00            .byte	0
05451                                           ! 956  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05452 12B1                        0C            .byte	$C
05453 12B2                        00            .byte	0
05454 12B3                        0C            .byte	$C
05455 12B4                        0C            .byte	$C
05456 12B5                        0C            .byte	$C
05457 12B6                        CC            .byte	$CC
05458 12B7                        CC            .byte	$CC
05459 12B8                        78            .byte	$78
05460                                           ! 957  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05461 12B9                        E0            .byte	$E0
05462 12BA                        60            .byte	$60
05463 12BB                        66            .byte	$66
05464 12BC                        6C            .byte	$6C
05465 12BD                        78            .byte	$78
05466 12BE                        6C            .byte	$6C
05467 12BF                        E6            .byte	$E6
05468 12C0                        00            .byte	0
05469                                           ! 958  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05470 12C1                        70            .byte	$70
05471 12C2                        30            .byte	$30
05472 12C3                        30            .byte	$30
05473 12C4                        30            .byte	$30
05474 12C5                        30            .byte	$30
05475 12C6                        30            .byte	$30
05476 12C7                        78            .byte	$78
05477 12C8                        00            .byte	0
05478                                           ! 959  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05479 12C9                        00            .byte	0
05480 12CA                        00            .byte	0
05481 12CB                        CC            .byte	$CC
05482 12CC                        FE            .byte	$FE
05483 12CD                        FE            .byte	$FE
05484 12CE                        D6            .byte	$D6
05485 12CF                        C6            .byte	$C6
05486 12D0                        00            .byte	0
05487                                           ! 960  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05488 12D1                        00            .byte	0
05489 12D2                        00            .byte	0
05490 12D3                        F8            .byte	$F8
05491 12D4                        CC            .byte	$CC
05492 12D5                        CC            .byte	$CC
05493 12D6                        CC            .byte	$CC
05494 12D7                        CC            .byte	$CC
05495 12D8                        00            .byte	0
05496                                           ! 961  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05497 12D9                        00            .byte	0
05498 12DA                        00            .byte	0
05499 12DB                        78            .byte	$78
05500 12DC                        CC            .byte	$CC
05501 12DD                        CC            .byte	$CC
05502 12DE                        CC            .byte	$CC
05503 12DF                        78            .byte	$78
05504 12E0                        00            .byte	0
05505                                           ! 962  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05506 12E1                        00            .byte	0
05507 12E2                        00            .byte	0
05508 12E3                        DC            .byte	$DC
05509 12E4                        66            .byte	$66
05510 12E5                        66            .byte	$66
05511 12E6                        7C            .byte	$7C
05512 12E7                        60            .byte	$60
05513 12E8                        F0            .byte	$F0
05514                                           ! 963  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05515 12E9                        00            .byte	0
05516 12EA                        00            .byte	0
05517 12EB                        76            .byte	$76
05518 12EC                        CC            .byte	$CC
05519 12ED                        CC            .byte	$CC
05520 12EE                        7C            .byte	$7C
05521 12EF                        0C            .byte	$C
05522 12F0                        1E            .byte	$1E
05523                                           ! 964  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05524 12F1                        00            .byte	0
05525 12F2                        00            .byte	0
05526 12F3                        DC            .byte	$DC
05527 12F4                        76            .byte	$76
05528 12F5                        66            .byte	$66
05529 12F6                        60            .byte	$60
05530 12F7                        F0            .byte	$F0
05531 12F8                        00            .byte	0
05532                                           ! 965  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05533 12F9                        00            .byte	0
05534 12FA                        00            .byte	0
05535 12FB                        7C            .byte	$7C
05536 12FC                        C0            .byte	$C0
05537 12FD                        78            .byte	$78
05538 12FE                        0C            .byte	$C
05539 12FF                        F8            .byte	$F8
05540 1300                        00            .byte	0
05541                                           ! 966  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05542 1301                        10            .byte	$10
05543 1302                        30            .byte	$30
05544 1303                        7C            .byte	$7C
05545 1304                        30            .byte	$30
05546 1305                        30            .byte	$30
05547 1306                        34            .byte	$34
05548 1307                        18            .byte	$18
05549 1308                        00            .byte	0
05550                                           ! 967  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05551 1309                        00            .byte	0
05552 130A                        00            .byte	0
05553 130B                        CC            .byte	$CC
05554 130C                        CC            .byte	$CC
05555 130D                        CC            .byte	$CC
05556 130E                        CC            .byte	$CC
05557 130F                        76            .byte	$76
05558 1310                        00            .byte	0
05559                                           ! 968  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05560 1311                        00            .byte	0
05561 1312                        00            .byte	0
05562 1313                        CC            .byte	$CC
05563 1314                        CC            .byte	$CC
05564 1315                        CC            .byte	$CC
05565 1316                        78            .byte	$78
05566 1317                        30            .byte	$30
05567 1318                        00            .byte	0
05568                                           ! 969  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05569 1319                        00            .byte	0
05570 131A                        00            .byte	0
05571 131B                        C6            .byte	$C6
05572 131C                        D6            .byte	$D6
05573 131D                        FE            .byte	$FE
05574 131E                        FE            .byte	$FE
05575 131F                        6C            .byte	$6C
05576 1320                        00            .byte	0
05577                                           ! 970  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05578 1321                        00            .byte	0
05579 1322                        00            .byte	0
05580 1323                        C6            .byte	$C6
05581 1324                        6C            .byte	$6C
05582 1325                        38            .byte	$38
05583 1326                        6C            .byte	$6C
05584 1327                        C6            .byte	$C6
05585 1328                        00            .byte	0
05586                                           ! 971  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05587 1329                        00            .byte	0
05588 132A                        00            .byte	0
05589 132B                        CC            .byte	$CC
05590 132C                        CC            .byte	$CC
05591 132D                        CC            .byte	$CC
05592 132E                        7C            .byte	$7C
05593 132F                        0C            .byte	$C
05594 1330                        F8            .byte	$F8
05595                                           ! 972  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05596 1331                        00            .byte	0
05597 1332                        00            .byte	0
05598 1333                        FC            .byte	$FC
05599 1334                        98            .byte	$98
05600 1335                        30            .byte	$30
05601 1336                        64            .byte	$64
05602 1337                        FC            .byte	$FC
05603 1338                        00            .byte	0
05604                                           ! 973  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05605 1339                        1C            .byte	$1C
05606 133A                        30            .byte	$30
05607 133B                        30            .byte	$30
05608 133C                        E0            .byte	$E0
05609 133D                        30            .byte	$30
05610 133E                        30            .byte	$30
05611 133F                        1C            .byte	$1C
05612 1340                        00            .byte	0
05613                                           ! 974  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05614 1341                        18            .byte	$18
05615 1342                        18            .byte	$18
05616 1343                        18            .byte	$18
05617 1344                        00            .byte	0
05618 1345                        18            .byte	$18
05619 1346                        18            .byte	$18
05620 1347                        18            .byte	$18
05621 1348                        00            .byte	0
05622                                           ! 975  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05623 1349                        E0            .byte	$E0
05624 134A                        30            .byte	$30
05625 134B                        30            .byte	$30
05626 134C                        1C            .byte	$1C
05627 134D                        30            .byte	$30
05628 134E                        30            .byte	$30
05629 134F                        E0            .byte	$E0
05630 1350                        00            .byte	0
05631                                           ! 976  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05632 1351                        76            .byte	$76
05633 1352                        DC            .byte	$DC
05634 1353                        00            .byte	0
05635 1354                        00            .byte	0
05636 1355                        00            .byte	0
05637 1356                        00            .byte	0
05638 1357                        00            .byte	0
05639 1358                        00            .byte	0
05640                                           ! 977  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05641 1359                        00            .byte	0
05642 135A                        10            .byte	$10
05643 135B                        38            .byte	$38
05644 135C                        6C            .byte	$6C
05645 135D                        C6            .byte	$C6
05646 135E                        C6            .byte	$C6
05647 135F                        FE            .byte	$FE
05648 1360                        00            .byte	0
05649                                           ! 978  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05650 1361                        78            .byte	$78
05651 1362                        CC            .byte	$CC
05652 1363                        C0            .byte	$C0
05653 1364                        CC            .byte	$CC
05654 1365                        78            .byte	$78
05655 1366                        18            .byte	$18
05656 1367                        0C            .byte	$C
05657 1368                        78            .byte	$78
05658                                           ! 979  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05659 1369                        00            .byte	0
05660 136A                        CC            .byte	$CC
05661 136B                        00            .byte	0
05662 136C                        CC            .byte	$CC
05663 136D                        CC            .byte	$CC
05664 136E                        CC            .byte	$CC
05665 136F                        7E            .byte	$7E
05666 1370                        00            .byte	0
05667                                           ! 980  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05668 1371                        1C            .byte	$1C
05669 1372                        00            .byte	0
05670 1373                        78            .byte	$78
05671 1374                        CC            .byte	$CC
05672 1375                        FC            .byte	$FC
05673 1376                        C0            .byte	$C0
05674 1377                        78            .byte	$78
05675 1378                        00            .byte	0
05676                                           ! 981  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05677 1379                        7E            .byte	$7E
05678 137A                        C3            .byte	$C3
05679 137B                        3C            .byte	$3C
05680 137C                        06            .byte	6
05681 137D                        3E            .byte	$3E
05682 137E                        66            .byte	$66
05683 137F                        3F            .byte	$3F
05684 1380                        00            .byte	0
05685                                           ! 982  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05686 1381                        CC            .byte	$CC
05687 1382                        00            .byte	0
05688 1383                        78            .byte	$78
05689 1384                        0C            .byte	$C
05690 1385                        7C            .byte	$7C
05691 1386                        CC            .byte	$CC
05692 1387                        7E            .byte	$7E
05693 1388                        00            .byte	0
05694                                           ! 983  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05695 1389                        E0            .byte	$E0
05696 138A                        00            .byte	0
05697 138B                        78            .byte	$78
05698 138C                        0C            .byte	$C
05699 138D                        7C            .byte	$7C
05700 138E                        CC            .byte	$CC
05701 138F                        7E            .byte	$7E
05702 1390                        00            .byte	0
05703                                           ! 984  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05704 1391                        30            .byte	$30
05705 1392                        30            .byte	$30
05706 1393                        78            .byte	$78
05707 1394                        0C            .byte	$C
05708 1395                        7C            .byte	$7C
05709 1396                        CC            .byte	$CC
05710 1397                        7E            .byte	$7E
05711 1398                        00            .byte	0
05712                                           ! 985  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05713 1399                        00            .byte	0
05714 139A                        00            .byte	0
05715 139B                        78            .byte	$78
05716 139C                        C0            .byte	$C0
05717 139D                        C0            .byte	$C0
05718 139E                        78            .byte	$78
05719 139F                        0C            .byte	$C
05720 13A0                        38            .byte	$38
05721                                           ! 986  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05722 13A1                        7E            .byte	$7E
05723 13A2                        C3            .byte	$C3
05724 13A3                        3C            .byte	$3C
05725 13A4                        66            .byte	$66
05726 13A5                        7E            .byte	$7E
05727 13A6                        60            .byte	$60
05728 13A7                        3C            .byte	$3C
05729 13A8                        00            .byte	0
05730                                           ! 987  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05731 13A9                        CC            .byte	$CC
05732 13AA                        00            .byte	0
05733 13AB                        78            .byte	$78
05734 13AC                        CC            .byte	$CC
05735 13AD                        FC            .byte	$FC
05736 13AE                        C0            .byte	$C0
05737 13AF                        78            .byte	$78
05738 13B0                        00            .byte	0
05739                                           ! 988  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05740 13B1                        E0            .byte	$E0
05741 13B2                        00            .byte	0
05742 13B3                        78            .byte	$78
05743 13B4                        CC            .byte	$CC
05744 13B5                        FC            .byte	$FC
05745 13B6                        C0            .byte	$C0
05746 13B7                        78            .byte	$78
05747 13B8                        00            .byte	0
05748                                           ! 989  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05749 13B9                        CC            .byte	$CC
05750 13BA                        00            .byte	0
05751 13BB                        70            .byte	$70
05752 13BC                        30            .byte	$30
05753 13BD                        30            .byte	$30
05754 13BE                        30            .byte	$30
05755 13BF                        78            .byte	$78
05756 13C0                        00            .byte	0
05757                                           ! 990  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05758 13C1                        7C            .byte	$7C
05759 13C2                        C6            .byte	$C6
05760 13C3                        38            .byte	$38
05761 13C4                        18            .byte	$18
05762 13C5                        18            .byte	$18
05763 13C6                        18            .byte	$18
05764 13C7                        3C            .byte	$3C
05765 13C8                        00            .byte	0
05766                                           ! 991  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05767 13C9                        E0            .byte	$E0
05768 13CA                        00            .byte	0
05769 13CB                        70            .byte	$70
05770 13CC                        30            .byte	$30
05771 13CD                        30            .byte	$30
05772 13CE                        30            .byte	$30
05773 13CF                        78            .byte	$78
05774 13D0                        00            .byte	0
05775                                           ! 992  0xc6, 0
05776 13D1                        C6            .byte	$C6
05777                                           ! 992 x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05778 13D2                        38            .byte	$38
05779 13D3                        6C            .byte	$6C
05780 13D4                        C6            .byte	$C6
05781 13D5                        FE            .byte	$FE
05782 13D6                        C6            .byte	$C6
05783 13D7                        C6            .byte	$C6
05784 13D8                        00            .byte	0
05785                                           ! 993  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05786 13D9                        30            .byte	$30
05787 13DA                        30            .byte	$30
05788 13DB                        00            .byte	0
05789 13DC                        78            .byte	$78
05790 13DD                        CC            .byte	$CC
05791 13DE                        FC            .byte	$FC
05792 13DF                        CC            .byte	$CC
05793 13E0                        00            .byte	0
05794                                           ! 994  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05795 13E1                        1C            .byte	$1C
05796 13E2                        00            .byte	0
05797 13E3                        FC            .byte	$FC
05798 13E4                        60            .byte	$60
05799 13E5                        78            .byte	$78
05800 13E6                        60            .byte	$60
05801 13E7                        FC            .byte	$FC
05802 13E8                        00            .byte	0
05803                                           ! 995  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05804 13E9                        00            .byte	0
05805 13EA                        00            .byte	0
05806 13EB                        7F            .byte	$7F
05807 13EC                        0C            .byte	$C
05808 13ED                        7F            .byte	$7F
05809 13EE                        CC            .byte	$CC
05810 13EF                        7F            .byte	$7F
05811 13F0                        00            .byte	0
05812                                           ! 996  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05813 13F1                        3E            .byte	$3E
05814 13F2                        6C            .byte	$6C
05815 13F3                        CC            .byte	$CC
05816 13F4                        FE            .byte	$FE
05817 13F5                        CC            .byte	$CC
05818 13F6                        CC            .byte	$CC
05819 13F7                        CE            .byte	$CE
05820 13F8                        00            .byte	0
05821                                           ! 997  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05822 13F9                        78            .byte	$78
05823 13FA                        CC            .byte	$CC
05824 13FB                        00            .byte	0
05825 13FC                        78            .byte	$78
05826 13FD                        CC            .byte	$CC
05827 13FE                        CC            .byte	$CC
05828 13FF                        78            .byte	$78
05829 1400                        00            .byte	0
05830                                           ! 998  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05831 1401                        00            .byte	0
05832 1402                        CC            .byte	$CC
05833 1403                        00            .byte	0
05834 1404                        78            .byte	$78
05835 1405                        CC            .byte	$CC
05836 1406                        CC            .byte	$CC
05837 1407                        78            .byte	$78
05838 1408                        00            .byte	0
05839                                           ! 999  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05840 1409                        00            .byte	0
05841 140A                        E0            .byte	$E0
05842 140B                        00            .byte	0
05843 140C                        78            .byte	$78
05844 140D                        CC            .byte	$CC
05845 140E                        CC            .byte	$CC
05846 140F                        78            .byte	$78
05847 1410                        00            .byte	0
05848                                           ! 1000  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05849 1411                        78            .byte	$78
05850 1412                        CC            .byte	$CC
05851 1413                        00            .byte	0
05852 1414                        CC            .byte	$CC
05853 1415                        CC            .byte	$CC
05854 1416                        CC            .byte	$CC
05855 1417                        7E            .byte	$7E
05856 1418                        00            .byte	0
05857                                           ! 1001  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05858 1419                        00            .byte	0
05859 141A                        E0            .byte	$E0
05860 141B                        00            .byte	0
05861 141C                        CC            .byte	$CC
05862 141D                        CC            .byte	$CC
05863 141E                        CC            .byte	$CC
05864 141F                        7E            .byte	$7E
05865 1420                        00            .byte	0
05866                                           ! 1002  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05867 1421                        00            .byte	0
05868 1422                        CC            .byte	$CC
05869 1423                        00            .byte	0
05870 1424                        CC            .byte	$CC
05871 1425                        CC            .byte	$CC
05872 1426                        7C            .byte	$7C
05873 1427                        0C            .byte	$C
05874 1428                        F8            .byte	$F8
05875                                           ! 1003  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05876 1429                        C3            .byte	$C3
05877 142A                        18            .byte	$18
05878 142B                        3C            .byte	$3C
05879 142C                        66            .byte	$66
05880 142D                        66            .byte	$66
05881 142E                        3C            .byte	$3C
05882 142F                        18            .byte	$18
05883 1430                        00            .byte	0
05884                                           ! 1004  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05885 1431                        CC            .byte	$CC
05886 1432                        00            .byte	0
05887 1433                        CC            .byte	$CC
05888 1434                        CC            .byte	$CC
05889 1435                        CC            .byte	$CC
05890 1436                        CC            .byte	$CC
05891 1437                        78            .byte	$78
05892 1438                        00            .byte	0
05893                                           ! 1005  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05894 1439                        18            .byte	$18
05895 143A                        18            .byte	$18
05896 143B                        7E            .byte	$7E
05897 143C                        C0            .byte	$C0
05898 143D                        C0            .byte	$C0
05899 143E                        7E            .byte	$7E
05900 143F                        18            .byte	$18
05901 1440                        18            .byte	$18
05902                                           ! 1006  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05903 1441                        38            .byte	$38
05904 1442                        6C            .byte	$6C
05905 1443                        64            .byte	$64
05906 1444                        F0            .byte	$F0
05907 1445                        60            .byte	$60
05908 1446                        E6            .byte	$E6
05909 1447                        FC            .byte	$FC
05910 1448                        00            .byte	0
05911                                           ! 1007  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05912 1449                        CC            .byte	$CC
05913 144A                        CC            .byte	$CC
05914 144B                        78            .byte	$78
05915 144C                        FC            .byte	$FC
05916 144D                        30            .byte	$30
05917 144E                        FC            .byte	$FC
05918 144F                        30            .byte	$30
05919 1450                        30            .byte	$30
05920                                           ! 1008  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05921 1451                        F8            .byte	$F8
05922 1452                        CC            .byte	$CC
05923 1453                        CC            .byte	$CC
05924 1454                        FA            .byte	$FA
05925 1455                        C6            .byte	$C6
05926 1456                        CF            .byte	$CF
05927 1457                        C6            .byte	$C6
05928 1458                        C7            .byte	$C7
05929                                           ! 1009  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05930 1459                        0E            .byte	$E
05931 145A                        1B            .byte	$1B
05932 145B                        18            .byte	$18
05933 145C                        3C            .byte	$3C
05934 145D                        18            .byte	$18
05935 145E                        18            .byte	$18
05936 145F                        D8            .byte	$D8
05937 1460                        70            .byte	$70
05938                                           ! 1010  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05939 1461                        1C            .byte	$1C
05940 1462                        00            .byte	0
05941 1463                        78            .byte	$78
05942 1464                        0C            .byte	$C
05943 1465                        7C            .byte	$7C
05944 1466                        CC            .byte	$CC
05945 1467                        7E            .byte	$7E
05946 1468                        00            .byte	0
05947                                           ! 1011  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05948 1469                        38            .byte	$38
05949 146A                        00            .byte	0
05950 146B                        70            .byte	$70
05951 146C                        30            .byte	$30
05952 146D                        30            .byte	$30
05953 146E                        30            .byte	$30
05954 146F                        78            .byte	$78
05955 1470                        00            .byte	0
05956                                           ! 1012  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05957 1471                        00            .byte	0
05958 1472                        1C            .byte	$1C
05959 1473                        00            .byte	0
05960 1474                        78            .byte	$78
05961 1475                        CC            .byte	$CC
05962 1476                        CC            .byte	$CC
05963 1477                        78            .byte	$78
05964 1478                        00            .byte	0
05965                                           ! 1013  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05966 1479                        00            .byte	0
05967 147A                        1C            .byte	$1C
05968 147B                        00            .byte	0
05969 147C                        CC            .byte	$CC
05970 147D                        CC            .byte	$CC
05971 147E                        CC            .byte	$CC
05972 147F                        7E            .byte	$7E
05973 1480                        00            .byte	0
05974                                           ! 1014  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
05975 1481                        00            .byte	0
05976 1482                        F8            .byte	$F8
05977 1483                        00            .byte	0
05978 1484                        F8            .byte	$F8
05979 1485                        CC            .byte	$CC
05980 1486                        CC            .byte	$CC
05981 1487                        CC            .byte	$CC
05982 1488                        00            .byte	0
05983                                           ! 1015  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
05984 1489                        FC            .byte	$FC
05985 148A                        00            .byte	0
05986 148B                        CC            .byte	$CC
05987 148C                        EC            .byte	$EC
05988 148D                        FC            .byte	$FC
05989 148E                        DC            .byte	$DC
05990 148F                        CC            .byte	$CC
05991 1490                        00            .byte	0
05992                                           ! 1016  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
05993 1491                        3C            .byte	$3C
05994 1492                        6C            .byte	$6C
05995 1493                        6C            .byte	$6C
05996 1494                        3E            .byte	$3E
05997 1495                        00            .byte	0
05998 1496                        7E            .byte	$7E
05999 1497                        00            .byte	0
06000 1498                        00            .byte	0
06001                                           ! 1017  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
06002 1499                        38            .byte	$38
06003 149A                        6C            .byte	$6C
06004 149B                        6C            .byte	$6C
06005 149C                        38            .byte	$38
06006 149D                        00            .byte	0
06007 149E                        7C            .byte	$7C
06008 149F                        00            .byte	0
06009 14A0                        00            .byte	0
06010                                           ! 1018  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
06011 14A1                        30            .byte	$30
06012 14A2                        00            .byte	0
06013 14A3                        30            .byte	$30
06014 14A4                        60            .byte	$60
06015 14A5                        C0            .byte	$C0
06016 14A6                        CC            .byte	$CC
06017 14A7                        78            .byte	$78
06018 14A8                        00            .byte	0
06019                                           ! 1019  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
06020 14A9                        00            .byte	0
06021 14AA                        00            .byte	0
06022 14AB                        00            .byte	0
06023 14AC                        FC            .byte	$FC
06024 14AD                        C0            .byte	$C0
06025 14AE                        C0            .byte	$C0
06026 14AF                        00            .byte	0
06027 14B0                        00            .byte	0
06028                                           ! 1020  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
06029 14B1                        00            .byte	0
06030 14B2                        00            .byte	0
06031 14B3                        00            .byte	0
06032 14B4                        FC            .byte	$FC
06033 14B5                        0C            .byte	$C
06034 14B6                        0C            .byte	$C
06035 14B7                        00            .byte	0
06036 14B8                        00            .byte	0
06037                                           ! 1021  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
06038 14B9                        C3            .byte	$C3
06039 14BA                        C6            .byte	$C6
06040 14BB                        CC            .byte	$CC
06041 14BC                        DE            .byte	$DE
06042 14BD                        33            .byte	$33
06043 14BE                        66            .byte	$66
06044 14BF                        CC            .byte	$CC
06045 14C0                        0F            .byte	$F
06046                                           ! 1022  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
06047 14C1                        C3            .byte	$C3
06048 14C2                        C6            .byte	$C6
06049 14C3                        CC            .byte	$CC
06050 14C4                        DB            .byte	$DB
06051 14C5                        37            .byte	$37
06052 14C6                        6F            .byte	$6F
06053 14C7                        CF            .byte	$CF
06054 14C8                        03            .byte	3
06055                                           ! 1023  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
06056 14C9                        18            .byte	$18
06057 14CA                        18            .byte	$18
06058 14CB                        00            .byte	0
06059 14CC                        18            .byte	$18
06060 14CD                        18            .byte	$18
06061 14CE                        18            .byte	$18
06062 14CF                        18            .byte	$18
06063 14D0                        00            .byte	0
06064                                           ! 1024  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
06065 14D1                        00            .byte	0
06066 14D2                        33            .byte	$33
06067 14D3                        66            .byte	$66
06068 14D4                        CC            .byte	$CC
06069 14D5                        66            .byte	$66
06070 14D6                        33            .byte	$33
06071 14D7                        00            .byte	0
06072 14D8                        00            .byte	0
06073                                           ! 1025  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
06074 14D9                        00            .byte	0
06075 14DA                        CC            .byte	$CC
06076 14DB                        66            .byte	$66
06077 14DC                        33            .byte	$33
06078 14DD                        66            .byte	$66
06079 14DE                        CC            .byte	$CC
06080 14DF                        00            .byte	0
06081 14E0                        00            .byte	0
06082                                           ! 1026  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
06083 14E1                        22            .byte	$22
06084 14E2                        88            .byte	$88
06085 14E3                        22            .byte	$22
06086 14E4                        88            .byte	$88
06087 14E5                        22            .byte	$22
06088 14E6                        88            .byte	$88
06089 14E7                        22            .byte	$22
06090 14E8                        88            .byte	$88
06091                                           ! 1027  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
06092 14E9                        55            .byte	$55
06093 14EA                        AA            .byte	$AA
06094 14EB                        55            .byte	$55
06095 14EC                        AA            .byte	$AA
06096 14ED                        55            .byte	$55
06097 14EE                        AA            .byte	$AA
06098 14EF                        55            .byte	$55
06099 14F0                        AA            .byte	$AA
06100                                           ! 1028  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
06101 14F1                        DB            .byte	$DB
06102 14F2                        77            .byte	$77
06103 14F3                        DB            .byte	$DB
06104 14F4                        EE            .byte	$EE
06105 14F5                        DB            .byte	$DB
06106 14F6                        77            .byte	$77
06107 14F7                        DB            .byte	$DB
06108 14F8                        EE            .byte	$EE
06109                                           ! 1029  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
06110 14F9                        18            .byte	$18
06111 14FA                        18            .byte	$18
06112 14FB                        18            .byte	$18
06113 14FC                        18            .byte	$18
06114 14FD                        18            .byte	$18
06115 14FE                        18            .byte	$18
06116 14FF                        18            .byte	$18
06117 1500                        18            .byte	$18
06118                                           ! 1030  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
06119 1501                        18            .byte	$18
06120 1502                        18            .byte	$18
06121 1503                        18            .byte	$18
06122 1504                        18            .byte	$18
06123 1505                        F8            .byte	$F8
06124 1506                        18            .byte	$18
06125 1507                        18            .byte	$18
06126 1508                        18            .byte	$18
06127                                           ! 1031  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06128 1509                        18            .byte	$18
06129 150A                        18            .byte	$18
06130 150B                        F8            .byte	$F8
06131 150C                        18            .byte	$18
06132 150D                        F8            .byte	$F8
06133 150E                        18            .byte	$18
06134 150F                        18            .byte	$18
06135 1510                        18            .byte	$18
06136                                           ! 1032  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
06137 1511                        36            .byte	$36
06138 1512                        36            .byte	$36
06139 1513                        36            .byte	$36
06140 1514                        36            .byte	$36
06141 1515                        F6            .byte	$F6
06142 1516                        36            .byte	$36
06143 1517                        36            .byte	$36
06144 1518                        36            .byte	$36
06145                                           ! 1033  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36
06146 1519                        00            .byte	0
06147 151A                        00            .byte	0
06148 151B                        00            .byte	0
06149 151C                        00            .byte	0
06150 151D                        FE            .byte	$FE
06151 151E                        36            .byte	$36
06152 151F                        36            .byte	$36
06153                                           ! 1033 ,
06154 1520                        36            .byte	$36
06155                                           ! 1034  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06156 1521                        00            .byte	0
06157 1522                        00            .byte	0
06158 1523                        F8            .byte	$F8
06159 1524                        18            .byte	$18
06160 1525                        F8            .byte	$F8
06161 1526                        18            .byte	$18
06162 1527                        18            .byte	$18
06163 1528                        18            .byte	$18
06164                                           ! 1035  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
06165 1529                        36            .byte	$36
06166 152A                        36            .byte	$36
06167 152B                        F6            .byte	$F6
06168 152C                        06            .byte	6
06169 152D                        F6            .byte	$F6
06170 152E                        36            .byte	$36
06171 152F                        36            .byte	$36
06172 1530                        36            .byte	$36
06173                                           ! 1036  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
06174 1531                        36            .byte	$36
06175 1532                        36            .byte	$36
06176 1533                        36            .byte	$36
06177 1534                        36            .byte	$36
06178 1535                        36            .byte	$36
06179 1536                        36            .byte	$36
06180 1537                        36            .byte	$36
06181 1538                        36            .byte	$36
06182                                           ! 1037  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
06183 1539                        00            .byte	0
06184 153A                        00            .byte	0
06185 153B                        FE            .byte	$FE
06186 153C                        06            .byte	6
06187 153D                        F6            .byte	$F6
06188 153E                        36            .byte	$36
06189 153F                        36            .byte	$36
06190 1540                        36            .byte	$36
06191                                           ! 1038  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
06192 1541                        36            .byte	$36
06193 1542                        36            .byte	$36
06194 1543                        F6            .byte	$F6
06195 1544                        06            .byte	6
06196 1545                        FE            .byte	$FE
06197 1546                        00            .byte	0
06198 1547                        00            .byte	0
06199 1548                        00            .byte	0
06200                                           ! 1039  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
06201 1549                        36            .byte	$36
06202 154A                        36            .byte	$36
06203 154B                        36            .byte	$36
06204 154C                        36            .byte	$36
06205 154D                        FE            .byte	$FE
06206 154E                        00            .byte	0
06207 154F                        00            .byte	0
06208 1550                        00            .byte	0
06209                                           ! 1040  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
06210 1551                        18            .byte	$18
06211 1552                        18            .byte	$18
06212 1553                        F8            .byte	$F8
06213 1554                        18            .byte	$18
06214 1555                        F8            .byte	$F8
06215 1556                        00            .byte	0
06216 1557                        00            .byte	0
06217 1558                        00            .byte	0
06218                                           ! 1041  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
06219 1559                        00            .byte	0
06220 155A                        00            .byte	0
06221 155B                        00            .byte	0
06222 155C                        00            .byte	0
06223 155D                        F8            .byte	$F8
06224 155E                        18            .byte	$18
06225 155F                        18            .byte	$18
06226 1560                        18            .byte	$18
06227                                           ! 1042  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
06228 1561                        18            .byte	$18
06229 1562                        18            .byte	$18
06230 1563                        18            .byte	$18
06231 1564                        18            .byte	$18
06232 1565                        1F            .byte	$1F
06233 1566                        00            .byte	0
06234 1567                        00            .byte	0
06235 1568                        00            .byte	0
06236                                           ! 1043  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
06237 1569                        18            .byte	$18
06238 156A                        18            .byte	$18
06239 156B                        18            .byte	$18
06240 156C                        18            .byte	$18
06241 156D                        FF            .byte	$FF
06242 156E                        00            .byte	0
06243 156F                        00            .byte	0
06244 1570                        00            .byte	0
06245                                           ! 1044  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06246 1571                        00            .byte	0
06247 1572                        00            .byte	0
06248 1573                        00            .byte	0
06249 1574                        00            .byte	0
06250 1575                        FF            .byte	$FF
06251 1576                        18            .byte	$18
06252 1577                        18            .byte	$18
06253 1578                        18            .byte	$18
06254                                           ! 1045  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06255 1579                        18            .byte	$18
06256 157A                        18            .byte	$18
06257 157B                        18            .byte	$18
06258 157C                        18            .byte	$18
06259 157D                        1F            .byte	$1F
06260 157E                        18            .byte	$18
06261 157F                        18            .byte	$18
06262 1580                        18            .byte	$18
06263                                           ! 1046  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06264 1581                        00            .byte	0
06265 1582                        00            .byte	0
06266 1583                        00            .byte	0
06267 1584                        00            .byte	0
06268 1585                        FF            .byte	$FF
06269 1586                        00            .byte	0
06270 1587                        00            .byte	0
06271 1588                        00            .byte	0
06272                                           ! 1047  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06273 1589                        18            .byte	$18
06274 158A                        18            .byte	$18
06275 158B                        18            .byte	$18
06276 158C                        18            .byte	$18
06277 158D                        FF            .byte	$FF
06278 158E                        18            .byte	$18
06279 158F                        18            .byte	$18
06280 1590                        18            .byte	$18
06281                                           ! 1048  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06282 1591                        18            .byte	$18
06283 1592                        18            .byte	$18
06284 1593                        1F            .byte	$1F
06285 1594                        18            .byte	$18
06286 1595                        1F            .byte	$1F
06287 1596                        18            .byte	$18
06288 1597                        18            .byte	$18
06289 1598                        18            .byte	$18
06290                                           ! 1049  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06291 1599                        36            .byte	$36
06292 159A                        36            .byte	$36
06293 159B                        36            .byte	$36
06294 159C                        36            .byte	$36
06295 159D                        37            .byte	$37
06296 159E                        36            .byte	$36
06297 159F                        36            .byte	$36
06298 15A0                        36            .byte	$36
06299                                           ! 1050  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06300 15A1                        36            .byte	$36
06301 15A2                        36            .byte	$36
06302 15A3                        37            .byte	$37
06303 15A4                        30            .byte	$30
06304 15A5                        3F            .byte	$3F
06305 15A6                        00            .byte	0
06306 15A7                        00            .byte	0
06307 15A8                        00            .byte	0
06308                                           ! 1051  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06309 15A9                        00            .byte	0
06310 15AA                        00            .byte	0
06311 15AB                        3F            .byte	$3F
06312 15AC                        30            .byte	$30
06313 15AD                        37            .byte	$37
06314 15AE                        36            .byte	$36
06315 15AF                        36            .byte	$36
06316 15B0                        36            .byte	$36
06317                                           ! 1052  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06318 15B1                        36            .byte	$36
06319 15B2                        36            .byte	$36
06320 15B3                        F7            .byte	$F7
06321 15B4                        00            .byte	0
06322 15B5                        FF            .byte	$FF
06323 15B6                        00            .byte	0
06324 15B7                        00            .byte	0
06325 15B8                        00            .byte	0
06326                                           ! 1053  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06327 15B9                        00            .byte	0
06328 15BA                        00            .byte	0
06329 15BB                        FF            .byte	$FF
06330 15BC                        00            .byte	0
06331 15BD                        F7            .byte	$F7
06332 15BE                        36            .byte	$36
06333 15BF                        36            .byte	$36
06334 15C0                        36            .byte	$36
06335                                           ! 1054  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06336 15C1                        36            .byte	$36
06337 15C2                        36            .byte	$36
06338 15C3                        37            .byte	$37
06339 15C4                        30            .byte	$30
06340 15C5                        37            .byte	$37
06341 15C6                        36            .byte	$36
06342 15C7                        36            .byte	$36
06343 15C8                        36            .byte	$36
06344                                           ! 1055  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06345 15C9                        00            .byte	0
06346 15CA                        00            .byte	0
06347 15CB                        FF            .byte	$FF
06348 15CC                        00            .byte	0
06349 15CD                        FF            .byte	$FF
06350 15CE                        00            .byte	0
06351 15CF                        00            .byte	0
06352 15D0                        00            .byte	0
06353                                           ! 1056  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06354 15D1                        36            .byte	$36
06355 15D2                        36            .byte	$36
06356 15D3                        F7            .byte	$F7
06357 15D4                        00            .byte	0
06358 15D5                        F7            .byte	$F7
06359 15D6                        36            .byte	$36
06360 15D7                        36            .byte	$36
06361 15D8                        36            .byte	$36
06362                                           ! 1057  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06363 15D9                        18            .byte	$18
06364 15DA                        18            .byte	$18
06365 15DB                        FF            .byte	$FF
06366 15DC                        00            .byte	0
06367 15DD                        FF            .byte	$FF
06368 15DE                        00            .byte	0
06369 15DF                        00            .byte	0
06370 15E0                        00            .byte	0
06371                                           ! 1058  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06372 15E1                        36            .byte	$36
06373 15E2                        36            .byte	$36
06374 15E3                        36            .byte	$36
06375 15E4                        36            .byte	$36
06376 15E5                        FF            .byte	$FF
06377 15E6                        00            .byte	0
06378 15E7                        00            .byte	0
06379 15E8                        00            .byte	0
06380                                           ! 1059  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06381 15E9                        00            .byte	0
06382 15EA                        00            .byte	0
06383 15EB                        FF            .byte	$FF
06384 15EC                        00            .byte	0
06385 15ED                        FF            .byte	$FF
06386 15EE                        18            .byte	$18
06387 15EF                        18            .byte	$18
06388 15F0                        18            .byte	$18
06389                                           ! 1060  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06390 15F1                        00            .byte	0
06391 15F2                        00            .byte	0
06392 15F3                        00            .byte	0
06393 15F4                        00            .byte	0
06394 15F5                        FF            .byte	$FF
06395 15F6                        36            .byte	$36
06396 15F7                        36            .byte	$36
06397 15F8                        36            .byte	$36
06398                                           ! 1061  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06399 15F9                        36            .byte	$36
06400 15FA                        36            .byte	$36
06401 15FB                        36            .byte	$36
06402 15FC                        36            .byte	$36
06403 15FD                        3F            .byte	$3F
06404 15FE                        00            .byte	0
06405 15FF                        00            .byte	0
06406 1600                        00            .byte	0
06407                                           ! 1062  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06408 1601                        18            .byte	$18
06409 1602                        18            .byte	$18
06410 1603                        1F            .byte	$1F
06411 1604                        18            .byte	$18
06412 1605                        1F            .byte	$1F
06413 1606                        00            .byte	0
06414 1607                        00            .byte	0
06415 1608                        00            .byte	0
06416                                           ! 1063  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06417 1609                        00            .byte	0
06418 160A                        00            .byte	0
06419 160B                        1F            .byte	$1F
06420 160C                        18            .byte	$18
06421 160D                        1F            .byte	$1F
06422 160E                        18            .byte	$18
06423 160F                        18            .byte	$18
06424 1610                        18            .byte	$18
06425                                           ! 1064  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06426 1611                        00            .byte	0
06427 1612                        00            .byte	0
06428 1613                        00            .byte	0
06429 1614                        00            .byte	0
06430 1615                        3F            .byte	$3F
06431 1616                        36            .byte	$36
06432 1617                        36            .byte	$36
06433 1618                        36            .byte	$36
06434                                           ! 1065  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06435 1619                        36            .byte	$36
06436 161A                        36            .byte	$36
06437 161B                        36            .byte	$36
06438 161C                        36            .byte	$36
06439 161D                        FF            .byte	$FF
06440 161E                        36            .byte	$36
06441 161F                        36            .byte	$36
06442 1620                        36            .byte	$36
06443                                           ! 1066  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06444 1621                        18            .byte	$18
06445 1622                        18            .byte	$18
06446 1623                        FF            .byte	$FF
06447 1624                        18            .byte	$18
06448 1625                        FF            .byte	$FF
06449 1626                        18            .byte	$18
06450 1627                        18            .byte	$18
06451 1628                        18            .byte	$18
06452                                           ! 1067  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06453 1629                        18            .byte	$18
06454 162A                        18            .byte	$18
06455 162B                        18            .byte	$18
06456 162C                        18            .byte	$18
06457 162D                        F8            .byte	$F8
06458 162E                        00            .byte	0
06459 162F                        00            .byte	0
06460 1630                        00            .byte	0
06461                                           ! 1068  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06462 1631                        00            .byte	0
06463 1632                        00            .byte	0
06464 1633                        00            .byte	0
06465 1634                        00            .byte	0
06466 1635                        1F            .byte	$1F
06467 1636                        18            .byte	$18
06468 1637                        18            .byte	$18
06469 1638                        18            .byte	$18
06470                                           ! 1069  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06471 1639                        FF            .byte	$FF
06472 163A                        FF            .byte	$FF
06473 163B                        FF            .byte	$FF
06474 163C                        FF            .byte	$FF
06475 163D                        FF            .byte	$FF
06476 163E                        FF            .byte	$FF
06477 163F                        FF            .byte	$FF
06478 1640                        FF            .byte	$FF
06479                                           ! 1070  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06480 1641                        00            .byte	0
06481 1642                        00            .byte	0
06482 1643                        00            .byte	0
06483 1644                        00            .byte	0
06484 1645                        FF            .byte	$FF
06485 1646                        FF            .byte	$FF
06486 1647                        FF            .byte	$FF
06487 1648                        FF            .byte	$FF
06488                                           ! 1071  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06489 1649                        F0            .byte	$F0
06490 164A                        F0            .byte	$F0
06491 164B                        F0            .byte	$F0
06492 164C                        F0            .byte	$F0
06493 164D                        F0            .byte	$F0
06494 164E                        F0            .byte	$F0
06495 164F                        F0            .byte	$F0
06496 1650                        F0            .byte	$F0
06497                                           ! 1072  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06498 1651                        0F            .byte	$F
06499 1652                        0F            .byte	$F
06500 1653                        0F            .byte	$F
06501 1654                        0F            .byte	$F
06502 1655                        0F            .byte	$F
06503 1656                        0F            .byte	$F
06504 1657                        0F            .byte	$F
06505 1658                        0F            .byte	$F
06506                                           ! 1073  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06507 1659                        FF            .byte	$FF
06508 165A                        FF            .byte	$FF
06509 165B                        FF            .byte	$FF
06510 165C                        FF            .byte	$FF
06511 165D                        00            .byte	0
06512 165E                        00            .byte	0
06513 165F                        00            .byte	0
06514 1660                        00            .byte	0
06515                                           ! 1074  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06516 1661                        00            .byte	0
06517 1662                        00            .byte	0
06518 1663                        76            .byte	$76
06519 1664                        DC            .byte	$DC
06520 1665                        C8            .byte	$C8
06521 1666                        DC            .byte	$DC
06522 1667                        76            .byte	$76
06523 1668                        00            .byte	0
06524                                           ! 1075  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 
06525 1669                        00            .byte	0
06526 166A                        78            .byte	$78
06527 166B                        CC            .byte	$CC
06528 166C                        F8            .byte	$F8
06529 166D                        CC            .byte	$CC
06530 166E                        F8            .byte	$F8
06531                                           ! 1075 0xc0, 0xc0,
06532 166F                        C0            .byte	$C0
06533 1670                        C0            .byte	$C0
06534                                           ! 1076  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06535 1671                        00            .byte	0
06536 1672                        FC            .byte	$FC
06537 1673                        CC            .byte	$CC
06538 1674                        C0            .byte	$C0
06539 1675                        C0            .byte	$C0
06540 1676                        C0            .byte	$C0
06541 1677                        C0            .byte	$C0
06542 1678                        00            .byte	0
06543                                           ! 1077  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06544 1679                        00            .byte	0
06545 167A                        FE            .byte	$FE
06546 167B                        6C            .byte	$6C
06547 167C                        6C            .byte	$6C
06548 167D                        6C            .byte	$6C
06549 167E                        6C            .byte	$6C
06550 167F                        6C            .byte	$6C
06551 1680                        00            .byte	0
06552                                           ! 1078  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06553 1681                        FC            .byte	$FC
06554 1682                        CC            .byte	$CC
06555 1683                        60            .byte	$60
06556 1684                        30            .byte	$30
06557 1685                        60            .byte	$60
06558 1686                        CC            .byte	$CC
06559 1687                        FC            .byte	$FC
06560 1688                        00            .byte	0
06561                                           ! 1079  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06562 1689                        00            .byte	0
06563 168A                        00            .byte	0
06564 168B                        7E            .byte	$7E
06565 168C                        D8            .byte	$D8
06566 168D                        D8            .byte	$D8
06567 168E                        D8            .byte	$D8
06568 168F                        70            .byte	$70
06569 1690                        00            .byte	0
06570                                           ! 1080  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06571 1691                        00            .byte	0
06572 1692                        66            .byte	$66
06573 1693                        66            .byte	$66
06574 1694                        66            .byte	$66
06575 1695                        66            .byte	$66
06576 1696                        7C            .byte	$7C
06577 1697                        60            .byte	$60
06578 1698                        C0            .byte	$C0
06579                                           ! 1081  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06580 1699                        00            .byte	0
06581 169A                        76            .byte	$76
06582 169B                        DC            .byte	$DC
06583 169C                        18            .byte	$18
06584 169D                        18            .byte	$18
06585 169E                        18            .byte	$18
06586 169F                        18            .byte	$18
06587 16A0                        00            .byte	0
06588                                           ! 1082  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06589 16A1                        FC            .byte	$FC
06590 16A2                        30            .byte	$30
06591 16A3                        78            .byte	$78
06592 16A4                        CC            .byte	$CC
06593 16A5                        CC            .byte	$CC
06594 16A6                        78            .byte	$78
06595 16A7                        30            .byte	$30
06596 16A8                        FC            .byte	$FC
06597                                           ! 1083  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06598 16A9                        38            .byte	$38
06599 16AA                        6C            .byte	$6C
06600 16AB                        C6            .byte	$C6
06601 16AC                        FE            .byte	$FE
06602 16AD                        C6            .byte	$C6
06603 16AE                        6C            .byte	$6C
06604 16AF                        38            .byte	$38
06605 16B0                        00            .byte	0
06606                                           ! 1084  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06607 16B1                        38            .byte	$38
06608 16B2                        6C            .byte	$6C
06609 16B3                        C6            .byte	$C6
06610 16B4                        C6            .byte	$C6
06611 16B5                        6C            .byte	$6C
06612 16B6                        6C            .byte	$6C
06613 16B7                        EE            .byte	$EE
06614 16B8                        00            .byte	0
06615                                           ! 1085  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06616 16B9                        1C            .byte	$1C
06617 16BA                        30            .byte	$30
06618 16BB                        18            .byte	$18
06619 16BC                        7C            .byte	$7C
06620 16BD                        CC            .byte	$CC
06621 16BE                        CC            .byte	$CC
06622 16BF                        78            .byte	$78
06623 16C0                        00            .byte	0
06624                                           ! 1086  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06625 16C1                        00            .byte	0
06626 16C2                        00            .byte	0
06627 16C3                        7E            .byte	$7E
06628 16C4                        DB            .byte	$DB
06629 16C5                        DB            .byte	$DB
06630 16C6                        7E            .byte	$7E
06631 16C7                        00            .byte	0
06632 16C8                        00            .byte	0
06633                                           ! 1087  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06634 16C9                        06            .byte	6
06635 16CA                        0C            .byte	$C
06636 16CB                        7E            .byte	$7E
06637 16CC                        DB            .byte	$DB
06638 16CD                        DB            .byte	$DB
06639 16CE                        7E            .byte	$7E
06640 16CF                        60            .byte	$60
06641 16D0                        C0            .byte	$C0
06642                                           ! 1088  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06643 16D1                        38            .byte	$38
06644 16D2                        60            .byte	$60
06645 16D3                        C0            .byte	$C0
06646 16D4                        F8            .byte	$F8
06647 16D5                        C0            .byte	$C0
06648 16D6                        60            .byte	$60
06649 16D7                        38            .byte	$38
06650 16D8                        00            .byte	0
06651                                           ! 1089  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06652 16D9                        78            .byte	$78
06653 16DA                        CC            .byte	$CC
06654 16DB                        CC            .byte	$CC
06655 16DC                        CC            .byte	$CC
06656 16DD                        CC            .byte	$CC
06657 16DE                        CC            .byte	$CC
06658 16DF                        CC            .byte	$CC
06659 16E0                        00            .byte	0
06660                                           ! 1090  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06661 16E1                        00            .byte	0
06662 16E2                        FC            .byte	$FC
06663 16E3                        00            .byte	0
06664 16E4                        FC            .byte	$FC
06665 16E5                        00            .byte	0
06666 16E6                        FC            .byte	$FC
06667 16E7                        00            .byte	0
06668 16E8                        00            .byte	0
06669                                           ! 1091  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06670 16E9                        30            .byte	$30
06671 16EA                        30            .byte	$30
06672 16EB                        FC            .byte	$FC
06673 16EC                        30            .byte	$30
06674 16ED                        30            .byte	$30
06675 16EE                        00            .byte	0
06676 16EF                        FC            .byte	$FC
06677 16F0                        00            .byte	0
06678                                           ! 1092  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06679 16F1                        60            .byte	$60
06680 16F2                        30            .byte	$30
06681 16F3                        18            .byte	$18
06682 16F4                        30            .byte	$30
06683 16F5                        60            .byte	$60
06684 16F6                        00            .byte	0
06685 16F7                        FC            .byte	$FC
06686 16F8                        00            .byte	0
06687                                           ! 1093  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06688 16F9                        18            .byte	$18
06689 16FA                        30            .byte	$30
06690 16FB                        60            .byte	$60
06691 16FC                        30            .byte	$30
06692 16FD                        18            .byte	$18
06693 16FE                        00            .byte	0
06694 16FF                        FC            .byte	$FC
06695 1700                        00            .byte	0
06696                                           ! 1094  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06697 1701                        0E            .byte	$E
06698 1702                        1B            .byte	$1B
06699 1703                        1B            .byte	$1B
06700 1704                        18            .byte	$18
06701 1705                        18            .byte	$18
06702 1706                        18            .byte	$18
06703 1707                        18            .byte	$18
06704 1708                        18            .byte	$18
06705                                           ! 1095  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06706 1709                        18            .byte	$18
06707 170A                        18            .byte	$18
06708 170B                        18            .byte	$18
06709 170C                        18            .byte	$18
06710 170D                        18            .byte	$18
06711 170E                        D8            .byte	$D8
06712 170F                        D8            .byte	$D8
06713 1710                        70            .byte	$70
06714                                           ! 1096  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06715 1711                        30            .byte	$30
06716 1712                        30            .byte	$30
06717 1713                        00            .byte	0
06718 1714                        FC            .byte	$FC
06719 1715                        00            .byte	0
06720 1716                        30            .byte	$30
06721 1717                        30            .byte	$30
06722 1718                        00            .byte	0
06723                                           ! 1097  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06724 1719                        00            .byte	0
06725 171A                        76            .byte	$76
06726 171B                        DC            .byte	$DC
06727 171C                        00            .byte	0
06728 171D                        76            .byte	$76
06729 171E                        DC            .byte	$DC
06730 171F                        00            .byte	0
06731 1720                        00            .byte	0
06732                                           ! 1098  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06733 1721                        38            .byte	$38
06734 1722                        6C            .byte	$6C
06735 1723                        6C            .byte	$6C
06736 1724                        38            .byte	$38
06737 1725                        00            .byte	0
06738 1726                        00            .byte	0
06739 1727                        00            .byte	0
06740 1728                        00            .byte	0
06741                                           ! 1099  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06742 1729                        00            .byte	0
06743 172A                        00            .byte	0
06744 172B                        00            .byte	0
06745 172C                        18            .byte	$18
06746 172D                        18            .byte	$18
06747 172E                        00            .byte	0
06748 172F                        00            .byte	0
06749 1730                        00            .byte	0
06750                                           ! 1100  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06751 1731                        00            .byte	0
06752 1732                        00            .byte	0
06753 1733                        00            .byte	0
06754 1734                        00            .byte	0
06755 1735                        18            .byte	$18
06756 1736                        00            .byte	0
06757 1737                        00            .byte	0
06758 1738                        00            .byte	0
06759                                           ! 1101  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06760 1739                        0F            .byte	$F
06761 173A                        0C            .byte	$C
06762 173B                        0C            .byte	$C
06763 173C                        0C            .byte	$C
06764 173D                        EC            .byte	$EC
06765 173E                        6C            .byte	$6C
06766 173F                        3C            .byte	$3C
06767 1740                        1C            .byte	$1C
06768                                           ! 1102  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06769 1741                        78            .byte	$78
06770 1742                        6C            .byte	$6C
06771 1743                        6C            .byte	$6C
06772 1744                        6C            .byte	$6C
06773 1745                        6C            .byte	$6C
06774 1746                        00            .byte	0
06775 1747                        00            .byte	0
06776 1748                        00            .byte	0
06777                                           ! 1103  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06778 1749                        70            .byte	$70
06779 174A                        18            .byte	$18
06780 174B                        30            .byte	$30
06781 174C                        60            .byte	$60
06782 174D                        78            .byte	$78
06783 174E                        00            .byte	0
06784 174F                        00            .byte	0
06785 1750                        00            .byte	0
06786                                           ! 1104  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06787 1751                        00            .byte	0
06788 1752                        00            .byte	0
06789 1753                        3C            .byte	$3C
06790 1754                        3C            .byte	$3C
06791 1755                        3C            .byte	$3C
06792 1756                        3C            .byte	$3C
06793 1757                        00            .byte	0
06794 1758                        00            .byte	0
06795                                           ! 1105  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06796 1759                        00            .byte	0
06797 175A                        00            .byte	0
06798 175B                        00            .byte	0
06799 175C                        00            .byte	0
06800 175D                        00            .byte	0
06801 175E                        00            .byte	0
06802 175F                        00            .byte	0
06803                                           ! 1106 };
06804 1760                        00            .byte	0
06805                                           !BCC_EOS
06806                                           ! 1107 static Bit8u vgafont14[256*14]=
06807                                           ! 1108 {
06808                       00001761            _vgafont14:
06809                                           ! 1109  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06810 1761                        00            .byte	0
06811 1762                        00            .byte	0
06812 1763                        00            .byte	0
06813 1764                        00            .byte	0
06814 1765                        00            .byte	0
06815 1766                        00            .byte	0
06816 1767                        00            .byte	0
06817 1768                        00            .byte	0
06818 1769                        00            .byte	0
06819 176A                        00            .byte	0
06820 176B                        00            .byte	0
06821 176C                        00            .byte	0
06822 176D                        00            .byte	0
06823 176E                        00            .byte	0
06824                                           ! 1110  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06825 176F                        00            .byte	0
06826 1770                        00            .byte	0
06827 1771                        7E            .byte	$7E
06828 1772                        81            .byte	$81
06829 1773                        A5            .byte	$A5
06830 1774                        81            .byte	$81
06831 1775                        81            .byte	$81
06832 1776                        BD            .byte	$BD
06833 1777                        99            .byte	$99
06834 1778                        81            .byte	$81
06835 1779                        7E            .byte	$7E
06836 177A                        00            .byte	0
06837 177B                        00            .byte	0
06838 177C                        00            .byte	0
06839                                           ! 1111  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06840 177D                        00            .byte	0
06841 177E                        00            .byte	0
06842 177F                        7E            .byte	$7E
06843 1780                        FF            .byte	$FF
06844 1781                        DB            .byte	$DB
06845 1782                        FF            .byte	$FF
06846 1783                        FF            .byte	$FF
06847 1784                        C3            .byte	$C3
06848 1785                        E7            .byte	$E7
06849 1786                        FF            .byte	$FF
06850 1787                        7E            .byte	$7E
06851 1788                        00            .byte	0
06852 1789                        00            .byte	0
06853 178A                        00            .byte	0
06854                                           ! 1112  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06855 178B                        00            .byte	0
06856 178C                        00            .byte	0
06857 178D                        00            .byte	0
06858 178E                        6C            .byte	$6C
06859 178F                        FE            .byte	$FE
06860 1790                        FE            .byte	$FE
06861 1791                        FE            .byte	$FE
06862 1792                        FE            .byte	$FE
06863 1793                        7C            .byte	$7C
06864 1794                        38            .byte	$38
06865 1795                        10            .byte	$10
06866 1796                        00            .byte	0
06867 1797                        00            .byte	0
06868 1798                        00            .byte	0
06869                                           ! 1113  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06870 1799                        00            .byte	0
06871 179A                        00            .byte	0
06872 179B                        00            .byte	0
06873 179C                        10            .byte	$10
06874 179D                        38            .byte	$38
06875 179E                        7C            .byte	$7C
06876 179F                        FE            .byte	$FE
06877 17A0                        7C            .byte	$7C
06878 17A1                        38            .byte	$38
06879 17A2                        10            .byte	$10
06880 17A3                        00            .byte	0
06881 17A4                        00            .byte	0
06882 17A5                        00            .byte	0
06883 17A6                        00            .byte	0
06884                                           ! 1114  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06885 17A7                        00            .byte	0
06886 17A8                        00            .byte	0
06887 17A9                        18            .byte	$18
06888 17AA                        3C            .byte	$3C
06889 17AB                        3C            .byte	$3C
06890 17AC                        E7            .byte	$E7
06891 17AD                        E7            .byte	$E7
06892 17AE                        E7            .byte	$E7
06893 17AF                        18            .byte	$18
06894 17B0                        18            .byte	$18
06895 17B1                        3C            .byte	$3C
06896 17B2                        00            .byte	0
06897 17B3                        00            .byte	0
06898 17B4                        00            .byte	0
06899                                           ! 1115  0x00, 0x00, 0x18, 0
06900 17B5                        00            .byte	0
06901 17B6                        00            .byte	0
06902 17B7                        18            .byte	$18
06903                                           ! 1115 x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06904 17B8                        3C            .byte	$3C
06905 17B9                        7E            .byte	$7E
06906 17BA                        FF            .byte	$FF
06907 17BB                        FF            .byte	$FF
06908 17BC                        7E            .byte	$7E
06909 17BD                        18            .byte	$18
06910 17BE                        18            .byte	$18
06911 17BF                        3C            .byte	$3C
06912 17C0                        00            .byte	0
06913 17C1                        00            .byte	0
06914 17C2                        00            .byte	0
06915                                           ! 1116  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06916 17C3                        00            .byte	0
06917 17C4                        00            .byte	0
06918 17C5                        00            .byte	0
06919 17C6                        00            .byte	0
06920 17C7                        00            .byte	0
06921 17C8                        18            .byte	$18
06922 17C9                        3C            .byte	$3C
06923 17CA                        3C            .byte	$3C
06924 17CB                        18            .byte	$18
06925 17CC                        00            .byte	0
06926 17CD                        00            .byte	0
06927 17CE                        00            .byte	0
06928 17CF                        00            .byte	0
06929 17D0                        00            .byte	0
06930                                           ! 1117  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06931 17D1                        FF            .byte	$FF
06932 17D2                        FF            .byte	$FF
06933 17D3                        FF            .byte	$FF
06934 17D4                        FF            .byte	$FF
06935 17D5                        FF            .byte	$FF
06936 17D6                        E7            .byte	$E7
06937 17D7                        C3            .byte	$C3
06938 17D8                        C3            .byte	$C3
06939 17D9                        E7            .byte	$E7
06940 17DA                        FF            .byte	$FF
06941 17DB                        FF            .byte	$FF
06942 17DC                        FF            .byte	$FF
06943 17DD                        FF            .byte	$FF
06944 17DE                        FF            .byte	$FF
06945                                           ! 1118  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06946 17DF                        00            .byte	0
06947 17E0                        00            .byte	0
06948 17E1                        00            .byte	0
06949 17E2                        00            .byte	0
06950 17E3                        3C            .byte	$3C
06951 17E4                        66            .byte	$66
06952 17E5                        42            .byte	$42
06953 17E6                        42            .byte	$42
06954 17E7                        66            .byte	$66
06955 17E8                        3C            .byte	$3C
06956 17E9                        00            .byte	0
06957 17EA                        00            .byte	0
06958 17EB                        00            .byte	0
06959 17EC                        00            .byte	0
06960                                           ! 1119  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06961 17ED                        FF            .byte	$FF
06962 17EE                        FF            .byte	$FF
06963 17EF                        FF            .byte	$FF
06964 17F0                        FF            .byte	$FF
06965 17F1                        C3            .byte	$C3
06966 17F2                        99            .byte	$99
06967 17F3                        BD            .byte	$BD
06968 17F4                        BD            .byte	$BD
06969 17F5                        99            .byte	$99
06970 17F6                        C3            .byte	$C3
06971 17F7                        FF            .byte	$FF
06972 17F8                        FF            .byte	$FF
06973 17F9                        FF            .byte	$FF
06974 17FA                        FF            .byte	$FF
06975                                           ! 1120  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
06976 17FB                        00            .byte	0
06977 17FC                        00            .byte	0
06978 17FD                        1E            .byte	$1E
06979 17FE                        0E            .byte	$E
06980 17FF                        1A            .byte	$1A
06981 1800                        32            .byte	$32
06982 1801                        78            .byte	$78
06983 1802                        CC            .byte	$CC
06984 1803                        CC            .byte	$CC
06985 1804                        CC            .byte	$CC
06986 1805                        78            .byte	$78
06987 1806                        00            .byte	0
06988 1807                        00            .byte	0
06989 1808                        00            .byte	0
06990                                           ! 1121  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
06991 1809                        00            .byte	0
06992 180A                        00            .byte	0
06993 180B                        3C            .byte	$3C
06994 180C                        66            .byte	$66
06995 180D                        66            .byte	$66
06996 180E                        66            .byte	$66
06997 180F                        3C            .byte	$3C
06998 1810                        18            .byte	$18
06999 1811                        7E            .byte	$7E
07000 1812                        18            .byte	$18
07001 1813                        18            .byte	$18
07002 1814                        00            .byte	0
07003 1815                        00            .byte	0
07004 1816                        00            .byte	0
07005                                           ! 1122  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
07006 1817                        00            .byte	0
07007 1818                        00            .byte	0
07008 1819                        3F            .byte	$3F
07009 181A                        33            .byte	$33
07010 181B                        3F            .byte	$3F
07011 181C                        30            .byte	$30
07012 181D                        30            .byte	$30
07013 181E                        30            .byte	$30
07014 181F                        70            .byte	$70
07015 1820                        F0            .byte	$F0
07016 1821                        E0            .byte	$E0
07017 1822                        00            .byte	0
07018 1823                        00            .byte	0
07019 1824                        00            .byte	0
07020                                           ! 1123  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
07021 1825                        00            .byte	0
07022 1826                        00            .byte	0
07023 1827                        7F            .byte	$7F
07024 1828                        63            .byte	$63
07025 1829                        7F            .byte	$7F
07026 182A                        63            .byte	$63
07027 182B                        63            .byte	$63
07028 182C                        63            .byte	$63
07029 182D                        67            .byte	$67
07030 182E                        E7            .byte	$E7
07031 182F                        E6            .byte	$E6
07032 1830                        C0            .byte	$C0
07033 1831                        00            .byte	0
07034 1832                        00            .byte	0
07035                                           ! 1124  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
07036 1833                        00            .byte	0
07037 1834                        00            .byte	0
07038 1835                        18            .byte	$18
07039 1836                        18            .byte	$18
07040 1837                        DB            .byte	$DB
07041 1838                        3C            .byte	$3C
07042 1839                        E7            .byte	$E7
07043 183A                        3C            .byte	$3C
07044 183B                        DB            .byte	$DB
07045 183C                        18            .byte	$18
07046 183D                        18            .byte	$18
07047 183E                        00            .byte	0
07048 183F                        00            .byte	0
07049 1840                        00            .byte	0
07050                                           ! 1125  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
07051 1841                        00            .byte	0
07052 1842                        00            .byte	0
07053 1843                        80            .byte	$80
07054 1844                        C0            .byte	$C0
07055 1845                        E0            .byte	$E0
07056 1846                        F8            .byte	$F8
07057 1847                        FE            .byte	$FE
07058 1848                        F8            .byte	$F8
07059 1849                        E0            .byte	$E0
07060 184A                        C0            .byte	$C0
07061 184B                        80            .byte	$80
07062 184C                        00            .byte	0
07063 184D                        00            .byte	0
07064 184E                        00            .byte	0
07065                                           ! 1126  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07066 184F                        00            .byte	0
07067 1850                        00            .byte	0
07068 1851                        02            .byte	2
07069 1852                        06            .byte	6
07070 1853                        0E            .byte	$E
07071 1854                        3E            .byte	$3E
07072 1855                        FE            .byte	$FE
07073 1856                        3E            .byte	$3E
07074 1857                        0E            .byte	$E
07075 1858                        06            .byte	6
07076 1859                        02            .byte	2
07077 185A                        00            .byte	0
07078 185B                        00            .byte	0
07079 185C                        00            .byte	0
07080                                           ! 1127  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07081 185D                        00            .byte	0
07082 185E                        00            .byte	0
07083 185F                        18            .byte	$18
07084 1860                        3C            .byte	$3C
07085 1861                        7E            .byte	$7E
07086 1862                        18            .byte	$18
07087 1863                        18            .byte	$18
07088 1864                        18            .byte	$18
07089 1865                        7E            .byte	$7E
07090 1866                        3C            .byte	$3C
07091 1867                        18            .byte	$18
07092 1868                        00            .byte	0
07093 1869                        00            .byte	0
07094 186A                        00            .byte	0
07095                                           ! 1128  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
07096 186B                        00            .byte	0
07097 186C                        00            .byte	0
07098 186D                        66            .byte	$66
07099 186E                        66            .byte	$66
07100 186F                        66            .byte	$66
07101 1870                        66            .byte	$66
07102 1871                        66            .byte	$66
07103 1872                        66            .byte	$66
07104 1873                        00            .byte	0
07105 1874                        66            .byte	$66
07106 1875                        66            .byte	$66
07107 1876                        00            .byte	0
07108 1877                        00            .byte	0
07109 1878                        00            .byte	0
07110                                           ! 1129  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
07111 1879                        00            .byte	0
07112 187A                        00            .byte	0
07113 187B                        7F            .byte	$7F
07114 187C                        DB            .byte	$DB
07115 187D                        DB            .byte	$DB
07116 187E                        DB            .byte	$DB
07117 187F                        7B            .byte	$7B
07118 1880                        1B            .byte	$1B
07119 1881                        1B            .byte	$1B
07120 1882                        1B            .byte	$1B
07121 1883                        1B            .byte	$1B
07122 1884                        00            .byte	0
07123 1885                        00            .byte	0
07124 1886                        00            .byte	0
07125                                           ! 1130  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
07126 1887                        00            .byte	0
07127 1888                        7C            .byte	$7C
07128 1889                        C6            .byte	$C6
07129 188A                        60            .byte	$60
07130 188B                        38            .byte	$38
07131 188C                        6C            .byte	$6C
07132 188D                        C6            .byte	$C6
07133 188E                        C6            .byte	$C6
07134 188F                        6C            .byte	$6C
07135 1890                        38            .byte	$38
07136 1891                        0C            .byte	$C
07137 1892                        C6            .byte	$C6
07138 1893                        7C            .byte	$7C
07139 1894                        00            .byte	0
07140                                           ! 1131  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
07141 1895                        00            .byte	0
07142 1896                        00            .byte	0
07143 1897                        00            .byte	0
07144 1898                        00            .byte	0
07145 1899                        00            .byte	0
07146 189A                        00            .byte	0
07147 189B                        00            .byte	0
07148 189C                        00            .byte	0
07149 189D                        FE            .byte	$FE
07150 189E                        FE            .byte	$FE
07151 189F                        FE            .byte	$FE
07152 18A0                        00            .byte	0
07153 18A1                        00            .byte	0
07154 18A2                        00            .byte	0
07155                                           ! 1132  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
07156 18A3                        00            .byte	0
07157 18A4                        00            .byte	0
07158 18A5                        18            .byte	$18
07159 18A6                        3C            .byte	$3C
07160 18A7                        7E            .byte	$7E
07161 18A8                        18            .byte	$18
07162 18A9                        18            .byte	$18
07163 18AA                        18            .byte	$18
07164 18AB                        7E            .byte	$7E
07165 18AC                        3C            .byte	$3C
07166 18AD                        18            .byte	$18
07167 18AE                        7E            .byte	$7E
07168 18AF                        00            .byte	0
07169 18B0                        00            .byte	0
07170                                           ! 1133  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
07171 18B1                        00            .byte	0
07172 18B2                        00            .byte	0
07173 18B3                        18            .byte	$18
07174 18B4                        3C            .byte	$3C
07175 18B5                        7E            .byte	$7E
07176 18B6                        18            .byte	$18
07177 18B7                        18            .byte	$18
07178 18B8                        18            .byte	$18
07179 18B9                        18            .byte	$18
07180 18BA                        18            .byte	$18
07181 18BB                        18            .byte	$18
07182 18BC                        00            .byte	0
07183 18BD                        00            .byte	0
07184 18BE                        00            .byte	0
07185                                           ! 1134  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07186 18BF                        00            .byte	0
07187 18C0                        00            .byte	0
07188 18C1                        18            .byte	$18
07189 18C2                        18            .byte	$18
07190 18C3                        18            .byte	$18
07191 18C4                        18            .byte	$18
07192 18C5                        18            .byte	$18
07193 18C6                        18            .byte	$18
07194 18C7                        7E            .byte	$7E
07195 18C8                        3C            .byte	$3C
07196 18C9                        18            .byte	$18
07197 18CA                        00            .byte	0
07198 18CB                        00            .byte	0
07199 18CC                        00            .byte	0
07200                                           ! 1135  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07201 18CD                        00            .byte	0
07202 18CE                        00            .byte	0
07203 18CF                        00            .byte	0
07204 18D0                        00            .byte	0
07205 18D1                        18            .byte	$18
07206 18D2                        0C            .byte	$C
07207 18D3                        FE            .byte	$FE
07208 18D4                        0C            .byte	$C
07209 18D5                        18            .byte	$18
07210 18D6                        00            .byte	0
07211 18D7                        00            .byte	0
07212 18D8                        00            .byte	0
07213 18D9                        00            .byte	0
07214 18DA                        00            .byte	0
07215                                           ! 1136  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
07216 18DB                        00            .byte	0
07217 18DC                        00            .byte	0
07218 18DD                        00            .byte	0
07219 18DE                        00            .byte	0
07220 18DF                        30            .byte	$30
07221 18E0                        60            .byte	$60
07222 18E1                        FE            .byte	$FE
07223 18E2                        60            .byte	$60
07224 18E3                        30            .byte	$30
07225 18E4                        00            .byte	0
07226 18E5                        00            .byte	0
07227 18E6                        00            .byte	0
07228 18E7                        00            .byte	0
07229 18E8                        00            .byte	0
07230                                           ! 1137  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
07231 18E9                        00            .byte	0
07232 18EA                        00            .byte	0
07233 18EB                        00            .byte	0
07234 18EC                        00            .byte	0
07235 18ED                        00            .byte	0
07236 18EE                        C0            .byte	$C0
07237 18EF                        C0            .byte	$C0
07238 18F0                        C0            .byte	$C0
07239 18F1                        FE            .byte	$FE
07240 18F2                        00            .byte	0
07241 18F3                        00            .byte	0
07242 18F4                        00            .byte	0
07243 18F5                        00            .byte	0
07244 18F6                        00            .byte	0
07245                                           ! 1138  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
07246 18F7                        00            .byte	0
07247 18F8                        00            .byte	0
07248 18F9                        00            .byte	0
07249 18FA                        00            .byte	0
07250 18FB                        28            .byte	$28
07251 18FC                        6C            .byte	$6C
07252 18FD                        FE            .byte	$FE
07253 18FE                        6C            .byte	$6C
07254 18FF                        28            .byte	$28
07255 1900                        00            .byte	0
07256 1901                        00            .byte	0
07257 1902                        00            .byte	0
07258 1903                        00            .byte	0
07259 1904                        00            .byte	0
07260                                           ! 1139  0x00, 0x00, 0x00, 0x10, 0x3
07261 1905                        00            .byte	0
07262 1906                        00            .byte	0
07263 1907                        00            .byte	0
07264 1908                        10            .byte	$10
07265                                           ! 1139 8, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07266 1909                        38            .byte	$38
07267 190A                        38            .byte	$38
07268 190B                        7C            .byte	$7C
07269 190C                        7C            .byte	$7C
07270 190D                        FE            .byte	$FE
07271 190E                        FE            .byte	$FE
07272 190F                        00            .byte	0
07273 1910                        00            .byte	0
07274 1911                        00            .byte	0
07275 1912                        00            .byte	0
07276                                           ! 1140  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07277 1913                        00            .byte	0
07278 1914                        00            .byte	0
07279 1915                        00            .byte	0
07280 1916                        FE            .byte	$FE
07281 1917                        FE            .byte	$FE
07282 1918                        7C            .byte	$7C
07283 1919                        7C            .byte	$7C
07284 191A                        38            .byte	$38
07285 191B                        38            .byte	$38
07286 191C                        10            .byte	$10
07287 191D                        00            .byte	0
07288 191E                        00            .byte	0
07289 191F                        00            .byte	0
07290 1920                        00            .byte	0
07291                                           ! 1141  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07292 1921                        00            .byte	0
07293 1922                        00            .byte	0
07294 1923                        00            .byte	0
07295 1924                        00            .byte	0
07296 1925                        00            .byte	0
07297 1926                        00            .byte	0
07298 1927                        00            .byte	0
07299 1928                        00            .byte	0
07300 1929                        00            .byte	0
07301 192A                        00            .byte	0
07302 192B                        00            .byte	0
07303 192C                        00            .byte	0
07304 192D                        00            .byte	0
07305 192E                        00            .byte	0
07306                                           ! 1142  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07307 192F                        00            .byte	0
07308 1930                        00            .byte	0
07309 1931                        18            .byte	$18
07310 1932                        3C            .byte	$3C
07311 1933                        3C            .byte	$3C
07312 1934                        3C            .byte	$3C
07313 1935                        18            .byte	$18
07314 1936                        18            .byte	$18
07315 1937                        00            .byte	0
07316 1938                        18            .byte	$18
07317 1939                        18            .byte	$18
07318 193A                        00            .byte	0
07319 193B                        00            .byte	0
07320 193C                        00            .byte	0
07321                                           ! 1143  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07322 193D                        00            .byte	0
07323 193E                        66            .byte	$66
07324 193F                        66            .byte	$66
07325 1940                        66            .byte	$66
07326 1941                        24            .byte	$24
07327 1942                        00            .byte	0
07328 1943                        00            .byte	0
07329 1944                        00            .byte	0
07330 1945                        00            .byte	0
07331 1946                        00            .byte	0
07332 1947                        00            .byte	0
07333 1948                        00            .byte	0
07334 1949                        00            .byte	0
07335 194A                        00            .byte	0
07336                                           ! 1144  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07337 194B                        00            .byte	0
07338 194C                        00            .byte	0
07339 194D                        6C            .byte	$6C
07340 194E                        6C            .byte	$6C
07341 194F                        FE            .byte	$FE
07342 1950                        6C            .byte	$6C
07343 1951                        6C            .byte	$6C
07344 1952                        6C            .byte	$6C
07345 1953                        FE            .byte	$FE
07346 1954                        6C            .byte	$6C
07347 1955                        6C            .byte	$6C
07348 1956                        00            .byte	0
07349 1957                        00            .byte	0
07350 1958                        00            .byte	0
07351                                           ! 1145  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07352 1959                        18            .byte	$18
07353 195A                        18            .byte	$18
07354 195B                        7C            .byte	$7C
07355 195C                        C6            .byte	$C6
07356 195D                        C2            .byte	$C2
07357 195E                        C0            .byte	$C0
07358 195F                        7C            .byte	$7C
07359 1960                        06            .byte	6
07360 1961                        86            .byte	$86
07361 1962                        C6            .byte	$C6
07362 1963                        7C            .byte	$7C
07363 1964                        18            .byte	$18
07364 1965                        18            .byte	$18
07365 1966                        00            .byte	0
07366                                           ! 1146  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07367 1967                        00            .byte	0
07368 1968                        00            .byte	0
07369 1969                        00            .byte	0
07370 196A                        00            .byte	0
07371 196B                        C2            .byte	$C2
07372 196C                        C6            .byte	$C6
07373 196D                        0C            .byte	$C
07374 196E                        18            .byte	$18
07375 196F                        30            .byte	$30
07376 1970                        66            .byte	$66
07377 1971                        C6            .byte	$C6
07378 1972                        00            .byte	0
07379 1973                        00            .byte	0
07380 1974                        00            .byte	0
07381                                           ! 1147  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07382 1975                        00            .byte	0
07383 1976                        00            .byte	0
07384 1977                        38            .byte	$38
07385 1978                        6C            .byte	$6C
07386 1979                        6C            .byte	$6C
07387 197A                        38            .byte	$38
07388 197B                        76            .byte	$76
07389 197C                        DC            .byte	$DC
07390 197D                        CC            .byte	$CC
07391 197E                        CC            .byte	$CC
07392 197F                        76            .byte	$76
07393 1980                        00            .byte	0
07394 1981                        00            .byte	0
07395 1982                        00            .byte	0
07396                                           ! 1148  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07397 1983                        00            .byte	0
07398 1984                        30            .byte	$30
07399 1985                        30            .byte	$30
07400 1986                        30            .byte	$30
07401 1987                        60            .byte	$60
07402 1988                        00            .byte	0
07403 1989                        00            .byte	0
07404 198A                        00            .byte	0
07405 198B                        00            .byte	0
07406 198C                        00            .byte	0
07407 198D                        00            .byte	0
07408 198E                        00            .byte	0
07409 198F                        00            .byte	0
07410 1990                        00            .byte	0
07411                                           ! 1149  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07412 1991                        00            .byte	0
07413 1992                        00            .byte	0
07414 1993                        0C            .byte	$C
07415 1994                        18            .byte	$18
07416 1995                        30            .byte	$30
07417 1996                        30            .byte	$30
07418 1997                        30            .byte	$30
07419 1998                        30            .byte	$30
07420 1999                        30            .byte	$30
07421 199A                        18            .byte	$18
07422 199B                        0C            .byte	$C
07423 199C                        00            .byte	0
07424 199D                        00            .byte	0
07425 199E                        00            .byte	0
07426                                           ! 1150  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07427 199F                        00            .byte	0
07428 19A0                        00            .byte	0
07429 19A1                        30            .byte	$30
07430 19A2                        18            .byte	$18
07431 19A3                        0C            .byte	$C
07432 19A4                        0C            .byte	$C
07433 19A5                        0C            .byte	$C
07434 19A6                        0C            .byte	$C
07435 19A7                        0C            .byte	$C
07436 19A8                        18            .byte	$18
07437 19A9                        30            .byte	$30
07438 19AA                        00            .byte	0
07439 19AB                        00            .byte	0
07440 19AC                        00            .byte	0
07441                                           ! 1151  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07442 19AD                        00            .byte	0
07443 19AE                        00            .byte	0
07444 19AF                        00            .byte	0
07445 19B0                        00            .byte	0
07446 19B1                        66            .byte	$66
07447 19B2                        3C            .byte	$3C
07448 19B3                        FF            .byte	$FF
07449 19B4                        3C            .byte	$3C
07450 19B5                        66            .byte	$66
07451 19B6                        00            .byte	0
07452 19B7                        00            .byte	0
07453 19B8                        00            .byte	0
07454 19B9                        00            .byte	0
07455 19BA                        00            .byte	0
07456                                           ! 1152  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07457 19BB                        00            .byte	0
07458 19BC                        00            .byte	0
07459 19BD                        00            .byte	0
07460 19BE                        00            .byte	0
07461 19BF                        18            .byte	$18
07462 19C0                        18            .byte	$18
07463 19C1                        7E            .byte	$7E
07464 19C2                        18            .byte	$18
07465 19C3                        18            .byte	$18
07466 19C4                        00            .byte	0
07467 19C5                        00            .byte	0
07468 19C6                        00            .byte	0
07469 19C7                        00            .byte	0
07470 19C8                        00            .byte	0
07471                                           ! 1153  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07472 19C9                        00            .byte	0
07473 19CA                        00            .byte	0
07474 19CB                        00            .byte	0
07475 19CC                        00            .byte	0
07476 19CD                        00            .byte	0
07477 19CE                        00            .byte	0
07478 19CF                        00            .byte	0
07479 19D0                        00            .byte	0
07480 19D1                        18            .byte	$18
07481 19D2                        18            .byte	$18
07482 19D3                        18            .byte	$18
07483 19D4                        30            .byte	$30
07484 19D5                        00            .byte	0
07485 19D6                        00            .byte	0
07486                                           ! 1154  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07487 19D7                        00            .byte	0
07488 19D8                        00            .byte	0
07489 19D9                        00            .byte	0
07490 19DA                        00            .byte	0
07491 19DB                        00            .byte	0
07492 19DC                        00            .byte	0
07493 19DD                        FE            .byte	$FE
07494 19DE                        00            .byte	0
07495 19DF                        00            .byte	0
07496 19E0                        00            .byte	0
07497 19E1                        00            .byte	0
07498 19E2                        00            .byte	0
07499 19E3                        00            .byte	0
07500 19E4                        00            .byte	0
07501                                           ! 1155  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07502 19E5                        00            .byte	0
07503 19E6                        00            .byte	0
07504 19E7                        00            .byte	0
07505 19E8                        00            .byte	0
07506 19E9                        00            .byte	0
07507 19EA                        00            .byte	0
07508 19EB                        00            .byte	0
07509 19EC                        00            .byte	0
07510 19ED                        00            .byte	0
07511 19EE                        18            .byte	$18
07512 19EF                        18            .byte	$18
07513 19F0                        00            .byte	0
07514 19F1                        00            .byte	0
07515 19F2                        00            .byte	0
07516                                           ! 1156  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07517 19F3                        00            .byte	0
07518 19F4                        00            .byte	0
07519 19F5                        02            .byte	2
07520 19F6                        06            .byte	6
07521 19F7                        0C            .byte	$C
07522 19F8                        18            .byte	$18
07523 19F9                        30            .byte	$30
07524 19FA                        60            .byte	$60
07525 19FB                        C0            .byte	$C0
07526 19FC                        80            .byte	$80
07527 19FD                        00            .byte	0
07528 19FE                        00            .byte	0
07529 19FF                        00            .byte	0
07530 1A00                        00            .byte	0
07531                                           ! 1157  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07532 1A01                        00            .byte	0
07533 1A02                        00            .byte	0
07534 1A03                        7C            .byte	$7C
07535 1A04                        C6            .byte	$C6
07536 1A05                        CE            .byte	$CE
07537 1A06                        DE            .byte	$DE
07538 1A07                        F6            .byte	$F6
07539 1A08                        E6            .byte	$E6
07540 1A09                        C6            .byte	$C6
07541 1A0A                        C6            .byte	$C6
07542 1A0B                        7C            .byte	$7C
07543 1A0C                        00            .byte	0
07544 1A0D                        00            .byte	0
07545 1A0E                        00            .byte	0
07546                                           ! 1158  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07547 1A0F                        00            .byte	0
07548 1A10                        00            .byte	0
07549 1A11                        18            .byte	$18
07550 1A12                        38            .byte	$38
07551 1A13                        78            .byte	$78
07552 1A14                        18            .byte	$18
07553 1A15                        18            .byte	$18
07554 1A16                        18            .byte	$18
07555 1A17                        18            .byte	$18
07556 1A18                        18            .byte	$18
07557 1A19                        7E            .byte	$7E
07558 1A1A                        00            .byte	0
07559 1A1B                        00            .byte	0
07560 1A1C                        00            .byte	0
07561                                           ! 1159  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07562 1A1D                        00            .byte	0
07563 1A1E                        00            .byte	0
07564 1A1F                        7C            .byte	$7C
07565 1A20                        C6            .byte	$C6
07566 1A21                        06            .byte	6
07567 1A22                        0C            .byte	$C
07568 1A23                        18            .byte	$18
07569 1A24                        30            .byte	$30
07570 1A25                        60            .byte	$60
07571 1A26                        C6            .byte	$C6
07572 1A27                        FE            .byte	$FE
07573 1A28                        00            .byte	0
07574 1A29                        00            .byte	0
07575 1A2A                        00            .byte	0
07576                                           ! 1160  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07577 1A2B                        00            .byte	0
07578 1A2C                        00            .byte	0
07579 1A2D                        7C            .byte	$7C
07580 1A2E                        C6            .byte	$C6
07581 1A2F                        06            .byte	6
07582 1A30                        06            .byte	6
07583 1A31                        3C            .byte	$3C
07584 1A32                        06            .byte	6
07585 1A33                        06            .byte	6
07586 1A34                        C6            .byte	$C6
07587 1A35                        7C            .byte	$7C
07588 1A36                        00            .byte	0
07589 1A37                        00            .byte	0
07590 1A38                        00            .byte	0
07591                                           ! 1161  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07592 1A39                        00            .byte	0
07593 1A3A                        00            .byte	0
07594 1A3B                        0C            .byte	$C
07595 1A3C                        1C            .byte	$1C
07596 1A3D                        3C            .byte	$3C
07597 1A3E                        6C            .byte	$6C
07598 1A3F                        CC            .byte	$CC
07599 1A40                        FE            .byte	$FE
07600 1A41                        0C            .byte	$C
07601 1A42                        0C            .byte	$C
07602 1A43                        1E            .byte	$1E
07603 1A44                        00            .byte	0
07604 1A45                        00            .byte	0
07605 1A46                        00            .byte	0
07606                                           ! 1162  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07607 1A47                        00            .byte	0
07608 1A48                        00            .byte	0
07609 1A49                        FE            .byte	$FE
07610 1A4A                        C0            .byte	$C0
07611 1A4B                        C0            .byte	$C0
07612 1A4C                        C0            .byte	$C0
07613 1A4D                        FC            .byte	$FC
07614 1A4E                        06            .byte	6
07615 1A4F                        06            .byte	6
07616 1A50                        C6            .byte	$C6
07617 1A51                        7C            .byte	$7C
07618 1A52                        00            .byte	0
07619 1A53                        00            .byte	0
07620 1A54                        00            .byte	0
07621                                           ! 1163  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0,
07622 1A55                        00            .byte	0
07623 1A56                        00            .byte	0
07624 1A57                        38            .byte	$38
07625 1A58                        60            .byte	$60
07626 1A59                        C0            .byte	$C0
07627                                           ! 1163  0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07628 1A5A                        C0            .byte	$C0
07629 1A5B                        FC            .byte	$FC
07630 1A5C                        C6            .byte	$C6
07631 1A5D                        C6            .byte	$C6
07632 1A5E                        C6            .byte	$C6
07633 1A5F                        7C            .byte	$7C
07634 1A60                        00            .byte	0
07635 1A61                        00            .byte	0
07636 1A62                        00            .byte	0
07637                                           ! 1164  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07638 1A63                        00            .byte	0
07639 1A64                        00            .byte	0
07640 1A65                        FE            .byte	$FE
07641 1A66                        C6            .byte	$C6
07642 1A67                        06            .byte	6
07643 1A68                        0C            .byte	$C
07644 1A69                        18            .byte	$18
07645 1A6A                        30            .byte	$30
07646 1A6B                        30            .byte	$30
07647 1A6C                        30            .byte	$30
07648 1A6D                        30            .byte	$30
07649 1A6E                        00            .byte	0
07650 1A6F                        00            .byte	0
07651 1A70                        00            .byte	0
07652                                           ! 1165  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07653 1A71                        00            .byte	0
07654 1A72                        00            .byte	0
07655 1A73                        7C            .byte	$7C
07656 1A74                        C6            .byte	$C6
07657 1A75                        C6            .byte	$C6
07658 1A76                        C6            .byte	$C6
07659 1A77                        7C            .byte	$7C
07660 1A78                        C6            .byte	$C6
07661 1A79                        C6            .byte	$C6
07662 1A7A                        C6            .byte	$C6
07663 1A7B                        7C            .byte	$7C
07664 1A7C                        00            .byte	0
07665 1A7D                        00            .byte	0
07666 1A7E                        00            .byte	0
07667                                           ! 1166  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07668 1A7F                        00            .byte	0
07669 1A80                        00            .byte	0
07670 1A81                        7C            .byte	$7C
07671 1A82                        C6            .byte	$C6
07672 1A83                        C6            .byte	$C6
07673 1A84                        C6            .byte	$C6
07674 1A85                        7E            .byte	$7E
07675 1A86                        06            .byte	6
07676 1A87                        06            .byte	6
07677 1A88                        0C            .byte	$C
07678 1A89                        78            .byte	$78
07679 1A8A                        00            .byte	0
07680 1A8B                        00            .byte	0
07681 1A8C                        00            .byte	0
07682                                           ! 1167  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07683 1A8D                        00            .byte	0
07684 1A8E                        00            .byte	0
07685 1A8F                        00            .byte	0
07686 1A90                        18            .byte	$18
07687 1A91                        18            .byte	$18
07688 1A92                        00            .byte	0
07689 1A93                        00            .byte	0
07690 1A94                        00            .byte	0
07691 1A95                        18            .byte	$18
07692 1A96                        18            .byte	$18
07693 1A97                        00            .byte	0
07694 1A98                        00            .byte	0
07695 1A99                        00            .byte	0
07696 1A9A                        00            .byte	0
07697                                           ! 1168  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07698 1A9B                        00            .byte	0
07699 1A9C                        00            .byte	0
07700 1A9D                        00            .byte	0
07701 1A9E                        18            .byte	$18
07702 1A9F                        18            .byte	$18
07703 1AA0                        00            .byte	0
07704 1AA1                        00            .byte	0
07705 1AA2                        00            .byte	0
07706 1AA3                        18            .byte	$18
07707 1AA4                        18            .byte	$18
07708 1AA5                        30            .byte	$30
07709 1AA6                        00            .byte	0
07710 1AA7                        00            .byte	0
07711 1AA8                        00            .byte	0
07712                                           ! 1169  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07713 1AA9                        00            .byte	0
07714 1AAA                        00            .byte	0
07715 1AAB                        06            .byte	6
07716 1AAC                        0C            .byte	$C
07717 1AAD                        18            .byte	$18
07718 1AAE                        30            .byte	$30
07719 1AAF                        60            .byte	$60
07720 1AB0                        30            .byte	$30
07721 1AB1                        18            .byte	$18
07722 1AB2                        0C            .byte	$C
07723 1AB3                        06            .byte	6
07724 1AB4                        00            .byte	0
07725 1AB5                        00            .byte	0
07726 1AB6                        00            .byte	0
07727                                           ! 1170  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07728 1AB7                        00            .byte	0
07729 1AB8                        00            .byte	0
07730 1AB9                        00            .byte	0
07731 1ABA                        00            .byte	0
07732 1ABB                        00            .byte	0
07733 1ABC                        7E            .byte	$7E
07734 1ABD                        00            .byte	0
07735 1ABE                        00            .byte	0
07736 1ABF                        7E            .byte	$7E
07737 1AC0                        00            .byte	0
07738 1AC1                        00            .byte	0
07739 1AC2                        00            .byte	0
07740 1AC3                        00            .byte	0
07741 1AC4                        00            .byte	0
07742                                           ! 1171  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07743 1AC5                        00            .byte	0
07744 1AC6                        00            .byte	0
07745 1AC7                        60            .byte	$60
07746 1AC8                        30            .byte	$30
07747 1AC9                        18            .byte	$18
07748 1ACA                        0C            .byte	$C
07749 1ACB                        06            .byte	6
07750 1ACC                        0C            .byte	$C
07751 1ACD                        18            .byte	$18
07752 1ACE                        30            .byte	$30
07753 1ACF                        60            .byte	$60
07754 1AD0                        00            .byte	0
07755 1AD1                        00            .byte	0
07756 1AD2                        00            .byte	0
07757                                           ! 1172  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07758 1AD3                        00            .byte	0
07759 1AD4                        00            .byte	0
07760 1AD5                        7C            .byte	$7C
07761 1AD6                        C6            .byte	$C6
07762 1AD7                        C6            .byte	$C6
07763 1AD8                        0C            .byte	$C
07764 1AD9                        18            .byte	$18
07765 1ADA                        18            .byte	$18
07766 1ADB                        00            .byte	0
07767 1ADC                        18            .byte	$18
07768 1ADD                        18            .byte	$18
07769 1ADE                        00            .byte	0
07770 1ADF                        00            .byte	0
07771 1AE0                        00            .byte	0
07772                                           ! 1173  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07773 1AE1                        00            .byte	0
07774 1AE2                        00            .byte	0
07775 1AE3                        7C            .byte	$7C
07776 1AE4                        C6            .byte	$C6
07777 1AE5                        C6            .byte	$C6
07778 1AE6                        DE            .byte	$DE
07779 1AE7                        DE            .byte	$DE
07780 1AE8                        DE            .byte	$DE
07781 1AE9                        DC            .byte	$DC
07782 1AEA                        C0            .byte	$C0
07783 1AEB                        7C            .byte	$7C
07784 1AEC                        00            .byte	0
07785 1AED                        00            .byte	0
07786 1AEE                        00            .byte	0
07787                                           ! 1174  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07788 1AEF                        00            .byte	0
07789 1AF0                        00            .byte	0
07790 1AF1                        10            .byte	$10
07791 1AF2                        38            .byte	$38
07792 1AF3                        6C            .byte	$6C
07793 1AF4                        C6            .byte	$C6
07794 1AF5                        C6            .byte	$C6
07795 1AF6                        FE            .byte	$FE
07796 1AF7                        C6            .byte	$C6
07797 1AF8                        C6            .byte	$C6
07798 1AF9                        C6            .byte	$C6
07799 1AFA                        00            .byte	0
07800 1AFB                        00            .byte	0
07801 1AFC                        00            .byte	0
07802                                           ! 1175  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07803 1AFD                        00            .byte	0
07804 1AFE                        00            .byte	0
07805 1AFF                        FC            .byte	$FC
07806 1B00                        66            .byte	$66
07807 1B01                        66            .byte	$66
07808 1B02                        66            .byte	$66
07809 1B03                        7C            .byte	$7C
07810 1B04                        66            .byte	$66
07811 1B05                        66            .byte	$66
07812 1B06                        66            .byte	$66
07813 1B07                        FC            .byte	$FC
07814 1B08                        00            .byte	0
07815 1B09                        00            .byte	0
07816 1B0A                        00            .byte	0
07817                                           ! 1176  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07818 1B0B                        00            .byte	0
07819 1B0C                        00            .byte	0
07820 1B0D                        3C            .byte	$3C
07821 1B0E                        66            .byte	$66
07822 1B0F                        C2            .byte	$C2
07823 1B10                        C0            .byte	$C0
07824 1B11                        C0            .byte	$C0
07825 1B12                        C0            .byte	$C0
07826 1B13                        C2            .byte	$C2
07827 1B14                        66            .byte	$66
07828 1B15                        3C            .byte	$3C
07829 1B16                        00            .byte	0
07830 1B17                        00            .byte	0
07831 1B18                        00            .byte	0
07832                                           ! 1177  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07833 1B19                        00            .byte	0
07834 1B1A                        00            .byte	0
07835 1B1B                        F8            .byte	$F8
07836 1B1C                        6C            .byte	$6C
07837 1B1D                        66            .byte	$66
07838 1B1E                        66            .byte	$66
07839 1B1F                        66            .byte	$66
07840 1B20                        66            .byte	$66
07841 1B21                        66            .byte	$66
07842 1B22                        6C            .byte	$6C
07843 1B23                        F8            .byte	$F8
07844 1B24                        00            .byte	0
07845 1B25                        00            .byte	0
07846 1B26                        00            .byte	0
07847                                           ! 1178  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07848 1B27                        00            .byte	0
07849 1B28                        00            .byte	0
07850 1B29                        FE            .byte	$FE
07851 1B2A                        66            .byte	$66
07852 1B2B                        62            .byte	$62
07853 1B2C                        68            .byte	$68
07854 1B2D                        78            .byte	$78
07855 1B2E                        68            .byte	$68
07856 1B2F                        62            .byte	$62
07857 1B30                        66            .byte	$66
07858 1B31                        FE            .byte	$FE
07859 1B32                        00            .byte	0
07860 1B33                        00            .byte	0
07861 1B34                        00            .byte	0
07862                                           ! 1179  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07863 1B35                        00            .byte	0
07864 1B36                        00            .byte	0
07865 1B37                        FE            .byte	$FE
07866 1B38                        66            .byte	$66
07867 1B39                        62            .byte	$62
07868 1B3A                        68            .byte	$68
07869 1B3B                        78            .byte	$78
07870 1B3C                        68            .byte	$68
07871 1B3D                        60            .byte	$60
07872 1B3E                        60            .byte	$60
07873 1B3F                        F0            .byte	$F0
07874 1B40                        00            .byte	0
07875 1B41                        00            .byte	0
07876 1B42                        00            .byte	0
07877                                           ! 1180  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07878 1B43                        00            .byte	0
07879 1B44                        00            .byte	0
07880 1B45                        3C            .byte	$3C
07881 1B46                        66            .byte	$66
07882 1B47                        C2            .byte	$C2
07883 1B48                        C0            .byte	$C0
07884 1B49                        C0            .byte	$C0
07885 1B4A                        DE            .byte	$DE
07886 1B4B                        C6            .byte	$C6
07887 1B4C                        66            .byte	$66
07888 1B4D                        3A            .byte	$3A
07889 1B4E                        00            .byte	0
07890 1B4F                        00            .byte	0
07891 1B50                        00            .byte	0
07892                                           ! 1181  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07893 1B51                        00            .byte	0
07894 1B52                        00            .byte	0
07895 1B53                        C6            .byte	$C6
07896 1B54                        C6            .byte	$C6
07897 1B55                        C6            .byte	$C6
07898 1B56                        C6            .byte	$C6
07899 1B57                        FE            .byte	$FE
07900 1B58                        C6            .byte	$C6
07901 1B59                        C6            .byte	$C6
07902 1B5A                        C6            .byte	$C6
07903 1B5B                        C6            .byte	$C6
07904 1B5C                        00            .byte	0
07905 1B5D                        00            .byte	0
07906 1B5E                        00            .byte	0
07907                                           ! 1182  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07908 1B5F                        00            .byte	0
07909 1B60                        00            .byte	0
07910 1B61                        3C            .byte	$3C
07911 1B62                        18            .byte	$18
07912 1B63                        18            .byte	$18
07913 1B64                        18            .byte	$18
07914 1B65                        18            .byte	$18
07915 1B66                        18            .byte	$18
07916 1B67                        18            .byte	$18
07917 1B68                        18            .byte	$18
07918 1B69                        3C            .byte	$3C
07919 1B6A                        00            .byte	0
07920 1B6B                        00            .byte	0
07921 1B6C                        00            .byte	0
07922                                           ! 1183  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07923 1B6D                        00            .byte	0
07924 1B6E                        00            .byte	0
07925 1B6F                        1E            .byte	$1E
07926 1B70                        0C            .byte	$C
07927 1B71                        0C            .byte	$C
07928 1B72                        0C            .byte	$C
07929 1B73                        0C            .byte	$C
07930 1B74                        0C            .byte	$C
07931 1B75                        CC            .byte	$CC
07932 1B76                        CC            .byte	$CC
07933 1B77                        78            .byte	$78
07934 1B78                        00            .byte	0
07935 1B79                        00            .byte	0
07936 1B7A                        00            .byte	0
07937                                           ! 1184  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07938 1B7B                        00            .byte	0
07939 1B7C                        00            .byte	0
07940 1B7D                        E6            .byte	$E6
07941 1B7E                        66            .byte	$66
07942 1B7F                        6C            .byte	$6C
07943 1B80                        6C            .byte	$6C
07944 1B81                        78            .byte	$78
07945 1B82                        6C            .byte	$6C
07946 1B83                        6C            .byte	$6C
07947 1B84                        66            .byte	$66
07948 1B85                        E6            .byte	$E6
07949 1B86                        00            .byte	0
07950 1B87                        00            .byte	0
07951 1B88                        00            .byte	0
07952                                           ! 1185  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07953 1B89                        00            .byte	0
07954 1B8A                        00            .byte	0
07955 1B8B                        F0            .byte	$F0
07956 1B8C                        60            .byte	$60
07957 1B8D                        60            .byte	$60
07958 1B8E                        60            .byte	$60
07959 1B8F                        60            .byte	$60
07960 1B90                        60            .byte	$60
07961 1B91                        62            .byte	$62
07962 1B92                        66            .byte	$66
07963 1B93                        FE            .byte	$FE
07964 1B94                        00            .byte	0
07965 1B95                        00            .byte	0
07966 1B96                        00            .byte	0
07967                                           ! 1186  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07968 1B97                        00            .byte	0
07969 1B98                        00            .byte	0
07970 1B99                        C6            .byte	$C6
07971 1B9A                        EE            .byte	$EE
07972 1B9B                        FE            .byte	$FE
07973 1B9C                        FE            .byte	$FE
07974 1B9D                        D6            .byte	$D6
07975 1B9E                        C6            .byte	$C6
07976 1B9F                        C6            .byte	$C6
07977 1BA0                        C6            .byte	$C6
07978 1BA1                        C6            .byte	$C6
07979 1BA2                        00            .byte	0
07980 1BA3                        00            .byte	0
07981 1BA4                        00            .byte	0
07982                                           ! 1187  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0
07983 1BA5                        00            .byte	0
07984 1BA6                        00            .byte	0
07985 1BA7                        C6            .byte	$C6
07986 1BA8                        E6            .byte	$E6
07987 1BA9                        F6            .byte	$F6
07988 1BAA                        FE            .byte	$FE
07989 1BAB                        DE            .byte	$DE
07990                                           ! 1187 xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07991 1BAC                        CE            .byte	$CE
07992 1BAD                        C6            .byte	$C6
07993 1BAE                        C6            .byte	$C6
07994 1BAF                        C6            .byte	$C6
07995 1BB0                        00            .byte	0
07996 1BB1                        00            .byte	0
07997 1BB2                        00            .byte	0
07998                                           ! 1188  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
07999 1BB3                        00            .byte	0
08000 1BB4                        00            .byte	0
08001 1BB5                        38            .byte	$38
08002 1BB6                        6C            .byte	$6C
08003 1BB7                        C6            .byte	$C6
08004 1BB8                        C6            .byte	$C6
08005 1BB9                        C6            .byte	$C6
08006 1BBA                        C6            .byte	$C6
08007 1BBB                        C6            .byte	$C6
08008 1BBC                        6C            .byte	$6C
08009 1BBD                        38            .byte	$38
08010 1BBE                        00            .byte	0
08011 1BBF                        00            .byte	0
08012 1BC0                        00            .byte	0
08013                                           ! 1189  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08014 1BC1                        00            .byte	0
08015 1BC2                        00            .byte	0
08016 1BC3                        FC            .byte	$FC
08017 1BC4                        66            .byte	$66
08018 1BC5                        66            .byte	$66
08019 1BC6                        66            .byte	$66
08020 1BC7                        7C            .byte	$7C
08021 1BC8                        60            .byte	$60
08022 1BC9                        60            .byte	$60
08023 1BCA                        60            .byte	$60
08024 1BCB                        F0            .byte	$F0
08025 1BCC                        00            .byte	0
08026 1BCD                        00            .byte	0
08027 1BCE                        00            .byte	0
08028                                           ! 1190  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
08029 1BCF                        00            .byte	0
08030 1BD0                        00            .byte	0
08031 1BD1                        7C            .byte	$7C
08032 1BD2                        C6            .byte	$C6
08033 1BD3                        C6            .byte	$C6
08034 1BD4                        C6            .byte	$C6
08035 1BD5                        C6            .byte	$C6
08036 1BD6                        D6            .byte	$D6
08037 1BD7                        DE            .byte	$DE
08038 1BD8                        7C            .byte	$7C
08039 1BD9                        0C            .byte	$C
08040 1BDA                        0E            .byte	$E
08041 1BDB                        00            .byte	0
08042 1BDC                        00            .byte	0
08043                                           ! 1191  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08044 1BDD                        00            .byte	0
08045 1BDE                        00            .byte	0
08046 1BDF                        FC            .byte	$FC
08047 1BE0                        66            .byte	$66
08048 1BE1                        66            .byte	$66
08049 1BE2                        66            .byte	$66
08050 1BE3                        7C            .byte	$7C
08051 1BE4                        6C            .byte	$6C
08052 1BE5                        66            .byte	$66
08053 1BE6                        66            .byte	$66
08054 1BE7                        E6            .byte	$E6
08055 1BE8                        00            .byte	0
08056 1BE9                        00            .byte	0
08057 1BEA                        00            .byte	0
08058                                           ! 1192  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08059 1BEB                        00            .byte	0
08060 1BEC                        00            .byte	0
08061 1BED                        7C            .byte	$7C
08062 1BEE                        C6            .byte	$C6
08063 1BEF                        C6            .byte	$C6
08064 1BF0                        60            .byte	$60
08065 1BF1                        38            .byte	$38
08066 1BF2                        0C            .byte	$C
08067 1BF3                        C6            .byte	$C6
08068 1BF4                        C6            .byte	$C6
08069 1BF5                        7C            .byte	$7C
08070 1BF6                        00            .byte	0
08071 1BF7                        00            .byte	0
08072 1BF8                        00            .byte	0
08073                                           ! 1193  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08074 1BF9                        00            .byte	0
08075 1BFA                        00            .byte	0
08076 1BFB                        7E            .byte	$7E
08077 1BFC                        7E            .byte	$7E
08078 1BFD                        5A            .byte	$5A
08079 1BFE                        18            .byte	$18
08080 1BFF                        18            .byte	$18
08081 1C00                        18            .byte	$18
08082 1C01                        18            .byte	$18
08083 1C02                        18            .byte	$18
08084 1C03                        3C            .byte	$3C
08085 1C04                        00            .byte	0
08086 1C05                        00            .byte	0
08087 1C06                        00            .byte	0
08088                                           ! 1194  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08089 1C07                        00            .byte	0
08090 1C08                        00            .byte	0
08091 1C09                        C6            .byte	$C6
08092 1C0A                        C6            .byte	$C6
08093 1C0B                        C6            .byte	$C6
08094 1C0C                        C6            .byte	$C6
08095 1C0D                        C6            .byte	$C6
08096 1C0E                        C6            .byte	$C6
08097 1C0F                        C6            .byte	$C6
08098 1C10                        C6            .byte	$C6
08099 1C11                        7C            .byte	$7C
08100 1C12                        00            .byte	0
08101 1C13                        00            .byte	0
08102 1C14                        00            .byte	0
08103                                           ! 1195  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
08104 1C15                        00            .byte	0
08105 1C16                        00            .byte	0
08106 1C17                        C6            .byte	$C6
08107 1C18                        C6            .byte	$C6
08108 1C19                        C6            .byte	$C6
08109 1C1A                        C6            .byte	$C6
08110 1C1B                        C6            .byte	$C6
08111 1C1C                        C6            .byte	$C6
08112 1C1D                        6C            .byte	$6C
08113 1C1E                        38            .byte	$38
08114 1C1F                        10            .byte	$10
08115 1C20                        00            .byte	0
08116 1C21                        00            .byte	0
08117 1C22                        00            .byte	0
08118                                           ! 1196  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
08119 1C23                        00            .byte	0
08120 1C24                        00            .byte	0
08121 1C25                        C6            .byte	$C6
08122 1C26                        C6            .byte	$C6
08123 1C27                        C6            .byte	$C6
08124 1C28                        C6            .byte	$C6
08125 1C29                        D6            .byte	$D6
08126 1C2A                        D6            .byte	$D6
08127 1C2B                        FE            .byte	$FE
08128 1C2C                        7C            .byte	$7C
08129 1C2D                        6C            .byte	$6C
08130 1C2E                        00            .byte	0
08131 1C2F                        00            .byte	0
08132 1C30                        00            .byte	0
08133                                           ! 1197  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08134 1C31                        00            .byte	0
08135 1C32                        00            .byte	0
08136 1C33                        C6            .byte	$C6
08137 1C34                        C6            .byte	$C6
08138 1C35                        6C            .byte	$6C
08139 1C36                        38            .byte	$38
08140 1C37                        38            .byte	$38
08141 1C38                        38            .byte	$38
08142 1C39                        6C            .byte	$6C
08143 1C3A                        C6            .byte	$C6
08144 1C3B                        C6            .byte	$C6
08145 1C3C                        00            .byte	0
08146 1C3D                        00            .byte	0
08147 1C3E                        00            .byte	0
08148                                           ! 1198  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08149 1C3F                        00            .byte	0
08150 1C40                        00            .byte	0
08151 1C41                        66            .byte	$66
08152 1C42                        66            .byte	$66
08153 1C43                        66            .byte	$66
08154 1C44                        66            .byte	$66
08155 1C45                        3C            .byte	$3C
08156 1C46                        18            .byte	$18
08157 1C47                        18            .byte	$18
08158 1C48                        18            .byte	$18
08159 1C49                        3C            .byte	$3C
08160 1C4A                        00            .byte	0
08161 1C4B                        00            .byte	0
08162 1C4C                        00            .byte	0
08163                                           ! 1199  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
08164 1C4D                        00            .byte	0
08165 1C4E                        00            .byte	0
08166 1C4F                        FE            .byte	$FE
08167 1C50                        C6            .byte	$C6
08168 1C51                        8C            .byte	$8C
08169 1C52                        18            .byte	$18
08170 1C53                        30            .byte	$30
08171 1C54                        60            .byte	$60
08172 1C55                        C2            .byte	$C2
08173 1C56                        C6            .byte	$C6
08174 1C57                        FE            .byte	$FE
08175 1C58                        00            .byte	0
08176 1C59                        00            .byte	0
08177 1C5A                        00            .byte	0
08178                                           ! 1200  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
08179 1C5B                        00            .byte	0
08180 1C5C                        00            .byte	0
08181 1C5D                        3C            .byte	$3C
08182 1C5E                        30            .byte	$30
08183 1C5F                        30            .byte	$30
08184 1C60                        30            .byte	$30
08185 1C61                        30            .byte	$30
08186 1C62                        30            .byte	$30
08187 1C63                        30            .byte	$30
08188 1C64                        30            .byte	$30
08189 1C65                        3C            .byte	$3C
08190 1C66                        00            .byte	0
08191 1C67                        00            .byte	0
08192 1C68                        00            .byte	0
08193                                           ! 1201  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
08194 1C69                        00            .byte	0
08195 1C6A                        00            .byte	0
08196 1C6B                        80            .byte	$80
08197 1C6C                        C0            .byte	$C0
08198 1C6D                        E0            .byte	$E0
08199 1C6E                        70            .byte	$70
08200 1C6F                        38            .byte	$38
08201 1C70                        1C            .byte	$1C
08202 1C71                        0E            .byte	$E
08203 1C72                        06            .byte	6
08204 1C73                        02            .byte	2
08205 1C74                        00            .byte	0
08206 1C75                        00            .byte	0
08207 1C76                        00            .byte	0
08208                                           ! 1202  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
08209 1C77                        00            .byte	0
08210 1C78                        00            .byte	0
08211 1C79                        3C            .byte	$3C
08212 1C7A                        0C            .byte	$C
08213 1C7B                        0C            .byte	$C
08214 1C7C                        0C            .byte	$C
08215 1C7D                        0C            .byte	$C
08216 1C7E                        0C            .byte	$C
08217 1C7F                        0C            .byte	$C
08218 1C80                        0C            .byte	$C
08219 1C81                        3C            .byte	$3C
08220 1C82                        00            .byte	0
08221 1C83                        00            .byte	0
08222 1C84                        00            .byte	0
08223                                           ! 1203  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08224 1C85                        10            .byte	$10
08225 1C86                        38            .byte	$38
08226 1C87                        6C            .byte	$6C
08227 1C88                        C6            .byte	$C6
08228 1C89                        00            .byte	0
08229 1C8A                        00            .byte	0
08230 1C8B                        00            .byte	0
08231 1C8C                        00            .byte	0
08232 1C8D                        00            .byte	0
08233 1C8E                        00            .byte	0
08234 1C8F                        00            .byte	0
08235 1C90                        00            .byte	0
08236 1C91                        00            .byte	0
08237 1C92                        00            .byte	0
08238                                           ! 1204  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
08239 1C93                        00            .byte	0
08240 1C94                        00            .byte	0
08241 1C95                        00            .byte	0
08242 1C96                        00            .byte	0
08243 1C97                        00            .byte	0
08244 1C98                        00            .byte	0
08245 1C99                        00            .byte	0
08246 1C9A                        00            .byte	0
08247 1C9B                        00            .byte	0
08248 1C9C                        00            .byte	0
08249 1C9D                        00            .byte	0
08250 1C9E                        00            .byte	0
08251 1C9F                        FF            .byte	$FF
08252 1CA0                        00            .byte	0
08253                                           ! 1205  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08254 1CA1                        30            .byte	$30
08255 1CA2                        30            .byte	$30
08256 1CA3                        18            .byte	$18
08257 1CA4                        00            .byte	0
08258 1CA5                        00            .byte	0
08259 1CA6                        00            .byte	0
08260 1CA7                        00            .byte	0
08261 1CA8                        00            .byte	0
08262 1CA9                        00            .byte	0
08263 1CAA                        00            .byte	0
08264 1CAB                        00            .byte	0
08265 1CAC                        00            .byte	0
08266 1CAD                        00            .byte	0
08267 1CAE                        00            .byte	0
08268                                           ! 1206  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08269 1CAF                        00            .byte	0
08270 1CB0                        00            .byte	0
08271 1CB1                        00            .byte	0
08272 1CB2                        00            .byte	0
08273 1CB3                        00            .byte	0
08274 1CB4                        78            .byte	$78
08275 1CB5                        0C            .byte	$C
08276 1CB6                        7C            .byte	$7C
08277 1CB7                        CC            .byte	$CC
08278 1CB8                        CC            .byte	$CC
08279 1CB9                        76            .byte	$76
08280 1CBA                        00            .byte	0
08281 1CBB                        00            .byte	0
08282 1CBC                        00            .byte	0
08283                                           ! 1207  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08284 1CBD                        00            .byte	0
08285 1CBE                        00            .byte	0
08286 1CBF                        E0            .byte	$E0
08287 1CC0                        60            .byte	$60
08288 1CC1                        60            .byte	$60
08289 1CC2                        78            .byte	$78
08290 1CC3                        6C            .byte	$6C
08291 1CC4                        66            .byte	$66
08292 1CC5                        66            .byte	$66
08293 1CC6                        66            .byte	$66
08294 1CC7                        7C            .byte	$7C
08295 1CC8                        00            .byte	0
08296 1CC9                        00            .byte	0
08297 1CCA                        00            .byte	0
08298                                           ! 1208  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08299 1CCB                        00            .byte	0
08300 1CCC                        00            .byte	0
08301 1CCD                        00            .byte	0
08302 1CCE                        00            .byte	0
08303 1CCF                        00            .byte	0
08304 1CD0                        7C            .byte	$7C
08305 1CD1                        C6            .byte	$C6
08306 1CD2                        C0            .byte	$C0
08307 1CD3                        C0            .byte	$C0
08308 1CD4                        C6            .byte	$C6
08309 1CD5                        7C            .byte	$7C
08310 1CD6                        00            .byte	0
08311 1CD7                        00            .byte	0
08312 1CD8                        00            .byte	0
08313                                           ! 1209  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08314 1CD9                        00            .byte	0
08315 1CDA                        00            .byte	0
08316 1CDB                        1C            .byte	$1C
08317 1CDC                        0C            .byte	$C
08318 1CDD                        0C            .byte	$C
08319 1CDE                        3C            .byte	$3C
08320 1CDF                        6C            .byte	$6C
08321 1CE0                        CC            .byte	$CC
08322 1CE1                        CC            .byte	$CC
08323 1CE2                        CC            .byte	$CC
08324 1CE3                        76            .byte	$76
08325 1CE4                        00            .byte	0
08326 1CE5                        00            .byte	0
08327 1CE6                        00            .byte	0
08328                                           ! 1210  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08329 1CE7                        00            .byte	0
08330 1CE8                        00            .byte	0
08331 1CE9                        00            .byte	0
08332 1CEA                        00            .byte	0
08333 1CEB                        00            .byte	0
08334 1CEC                        7C            .byte	$7C
08335 1CED                        C6            .byte	$C6
08336 1CEE                        FE            .byte	$FE
08337 1CEF                        C0            .byte	$C0
08338 1CF0                        C6            .byte	$C6
08339 1CF1                        7C            .byte	$7C
08340 1CF2                        00            .byte	0
08341 1CF3                        00            .byte	0
08342 1CF4                        00            .byte	0
08343                                           ! 1211  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x6
08344 1CF5                        00            .byte	0
08345 1CF6                        00            .byte	0
08346 1CF7                        38            .byte	$38
08347 1CF8                        6C            .byte	$6C
08348 1CF9                        64            .byte	$64
08349 1CFA                        60            .byte	$60
08350 1CFB                        F0            .byte	$F0
08351 1CFC                        60            .byte	$60
08352                                           ! 1211 0, 0x60, 0xf0, 0x00, 0x00, 0x00,
08353 1CFD                        60            .byte	$60
08354 1CFE                        60            .byte	$60
08355 1CFF                        F0            .byte	$F0
08356 1D00                        00            .byte	0
08357 1D01                        00            .byte	0
08358 1D02                        00            .byte	0
08359                                           ! 1212  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08360 1D03                        00            .byte	0
08361 1D04                        00            .byte	0
08362 1D05                        00            .byte	0
08363 1D06                        00            .byte	0
08364 1D07                        00            .byte	0
08365 1D08                        76            .byte	$76
08366 1D09                        CC            .byte	$CC
08367 1D0A                        CC            .byte	$CC
08368 1D0B                        CC            .byte	$CC
08369 1D0C                        7C            .byte	$7C
08370 1D0D                        0C            .byte	$C
08371 1D0E                        CC            .byte	$CC
08372 1D0F                        78            .byte	$78
08373 1D10                        00            .byte	0
08374                                           ! 1213  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08375 1D11                        00            .byte	0
08376 1D12                        00            .byte	0
08377 1D13                        E0            .byte	$E0
08378 1D14                        60            .byte	$60
08379 1D15                        60            .byte	$60
08380 1D16                        6C            .byte	$6C
08381 1D17                        76            .byte	$76
08382 1D18                        66            .byte	$66
08383 1D19                        66            .byte	$66
08384 1D1A                        66            .byte	$66
08385 1D1B                        E6            .byte	$E6
08386 1D1C                        00            .byte	0
08387 1D1D                        00            .byte	0
08388 1D1E                        00            .byte	0
08389                                           ! 1214  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08390 1D1F                        00            .byte	0
08391 1D20                        00            .byte	0
08392 1D21                        18            .byte	$18
08393 1D22                        18            .byte	$18
08394 1D23                        00            .byte	0
08395 1D24                        38            .byte	$38
08396 1D25                        18            .byte	$18
08397 1D26                        18            .byte	$18
08398 1D27                        18            .byte	$18
08399 1D28                        18            .byte	$18
08400 1D29                        3C            .byte	$3C
08401 1D2A                        00            .byte	0
08402 1D2B                        00            .byte	0
08403 1D2C                        00            .byte	0
08404                                           ! 1215  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08405 1D2D                        00            .byte	0
08406 1D2E                        00            .byte	0
08407 1D2F                        06            .byte	6
08408 1D30                        06            .byte	6
08409 1D31                        00            .byte	0
08410 1D32                        0E            .byte	$E
08411 1D33                        06            .byte	6
08412 1D34                        06            .byte	6
08413 1D35                        06            .byte	6
08414 1D36                        06            .byte	6
08415 1D37                        66            .byte	$66
08416 1D38                        66            .byte	$66
08417 1D39                        3C            .byte	$3C
08418 1D3A                        00            .byte	0
08419                                           ! 1216  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08420 1D3B                        00            .byte	0
08421 1D3C                        00            .byte	0
08422 1D3D                        E0            .byte	$E0
08423 1D3E                        60            .byte	$60
08424 1D3F                        60            .byte	$60
08425 1D40                        66            .byte	$66
08426 1D41                        6C            .byte	$6C
08427 1D42                        78            .byte	$78
08428 1D43                        6C            .byte	$6C
08429 1D44                        66            .byte	$66
08430 1D45                        E6            .byte	$E6
08431 1D46                        00            .byte	0
08432 1D47                        00            .byte	0
08433 1D48                        00            .byte	0
08434                                           ! 1217  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08435 1D49                        00            .byte	0
08436 1D4A                        00            .byte	0
08437 1D4B                        38            .byte	$38
08438 1D4C                        18            .byte	$18
08439 1D4D                        18            .byte	$18
08440 1D4E                        18            .byte	$18
08441 1D4F                        18            .byte	$18
08442 1D50                        18            .byte	$18
08443 1D51                        18            .byte	$18
08444 1D52                        18            .byte	$18
08445 1D53                        3C            .byte	$3C
08446 1D54                        00            .byte	0
08447 1D55                        00            .byte	0
08448 1D56                        00            .byte	0
08449                                           ! 1218  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08450 1D57                        00            .byte	0
08451 1D58                        00            .byte	0
08452 1D59                        00            .byte	0
08453 1D5A                        00            .byte	0
08454 1D5B                        00            .byte	0
08455 1D5C                        EC            .byte	$EC
08456 1D5D                        FE            .byte	$FE
08457 1D5E                        D6            .byte	$D6
08458 1D5F                        D6            .byte	$D6
08459 1D60                        D6            .byte	$D6
08460 1D61                        C6            .byte	$C6
08461 1D62                        00            .byte	0
08462 1D63                        00            .byte	0
08463 1D64                        00            .byte	0
08464                                           ! 1219  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08465 1D65                        00            .byte	0
08466 1D66                        00            .byte	0
08467 1D67                        00            .byte	0
08468 1D68                        00            .byte	0
08469 1D69                        00            .byte	0
08470 1D6A                        DC            .byte	$DC
08471 1D6B                        66            .byte	$66
08472 1D6C                        66            .byte	$66
08473 1D6D                        66            .byte	$66
08474 1D6E                        66            .byte	$66
08475 1D6F                        66            .byte	$66
08476 1D70                        00            .byte	0
08477 1D71                        00            .byte	0
08478 1D72                        00            .byte	0
08479                                           ! 1220  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08480 1D73                        00            .byte	0
08481 1D74                        00            .byte	0
08482 1D75                        00            .byte	0
08483 1D76                        00            .byte	0
08484 1D77                        00            .byte	0
08485 1D78                        7C            .byte	$7C
08486 1D79                        C6            .byte	$C6
08487 1D7A                        C6            .byte	$C6
08488 1D7B                        C6            .byte	$C6
08489 1D7C                        C6            .byte	$C6
08490 1D7D                        7C            .byte	$7C
08491 1D7E                        00            .byte	0
08492 1D7F                        00            .byte	0
08493 1D80                        00            .byte	0
08494                                           ! 1221  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08495 1D81                        00            .byte	0
08496 1D82                        00            .byte	0
08497 1D83                        00            .byte	0
08498 1D84                        00            .byte	0
08499 1D85                        00            .byte	0
08500 1D86                        DC            .byte	$DC
08501 1D87                        66            .byte	$66
08502 1D88                        66            .byte	$66
08503 1D89                        66            .byte	$66
08504 1D8A                        7C            .byte	$7C
08505 1D8B                        60            .byte	$60
08506 1D8C                        60            .byte	$60
08507 1D8D                        F0            .byte	$F0
08508 1D8E                        00            .byte	0
08509                                           ! 1222  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08510 1D8F                        00            .byte	0
08511 1D90                        00            .byte	0
08512 1D91                        00            .byte	0
08513 1D92                        00            .byte	0
08514 1D93                        00            .byte	0
08515 1D94                        76            .byte	$76
08516 1D95                        CC            .byte	$CC
08517 1D96                        CC            .byte	$CC
08518 1D97                        CC            .byte	$CC
08519 1D98                        7C            .byte	$7C
08520 1D99                        0C            .byte	$C
08521 1D9A                        0C            .byte	$C
08522 1D9B                        1E            .byte	$1E
08523 1D9C                        00            .byte	0
08524                                           ! 1223  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08525 1D9D                        00            .byte	0
08526 1D9E                        00            .byte	0
08527 1D9F                        00            .byte	0
08528 1DA0                        00            .byte	0
08529 1DA1                        00            .byte	0
08530 1DA2                        DC            .byte	$DC
08531 1DA3                        76            .byte	$76
08532 1DA4                        66            .byte	$66
08533 1DA5                        60            .byte	$60
08534 1DA6                        60            .byte	$60
08535 1DA7                        F0            .byte	$F0
08536 1DA8                        00            .byte	0
08537 1DA9                        00            .byte	0
08538 1DAA                        00            .byte	0
08539                                           ! 1224  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08540 1DAB                        00            .byte	0
08541 1DAC                        00            .byte	0
08542 1DAD                        00            .byte	0
08543 1DAE                        00            .byte	0
08544 1DAF                        00            .byte	0
08545 1DB0                        7C            .byte	$7C
08546 1DB1                        C6            .byte	$C6
08547 1DB2                        70            .byte	$70
08548 1DB3                        1C            .byte	$1C
08549 1DB4                        C6            .byte	$C6
08550 1DB5                        7C            .byte	$7C
08551 1DB6                        00            .byte	0
08552 1DB7                        00            .byte	0
08553 1DB8                        00            .byte	0
08554                                           ! 1225  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08555 1DB9                        00            .byte	0
08556 1DBA                        00            .byte	0
08557 1DBB                        10            .byte	$10
08558 1DBC                        30            .byte	$30
08559 1DBD                        30            .byte	$30
08560 1DBE                        FC            .byte	$FC
08561 1DBF                        30            .byte	$30
08562 1DC0                        30            .byte	$30
08563 1DC1                        30            .byte	$30
08564 1DC2                        36            .byte	$36
08565 1DC3                        1C            .byte	$1C
08566 1DC4                        00            .byte	0
08567 1DC5                        00            .byte	0
08568 1DC6                        00            .byte	0
08569                                           ! 1226  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08570 1DC7                        00            .byte	0
08571 1DC8                        00            .byte	0
08572 1DC9                        00            .byte	0
08573 1DCA                        00            .byte	0
08574 1DCB                        00            .byte	0
08575 1DCC                        CC            .byte	$CC
08576 1DCD                        CC            .byte	$CC
08577 1DCE                        CC            .byte	$CC
08578 1DCF                        CC            .byte	$CC
08579 1DD0                        CC            .byte	$CC
08580 1DD1                        76            .byte	$76
08581 1DD2                        00            .byte	0
08582 1DD3                        00            .byte	0
08583 1DD4                        00            .byte	0
08584                                           ! 1227  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08585 1DD5                        00            .byte	0
08586 1DD6                        00            .byte	0
08587 1DD7                        00            .byte	0
08588 1DD8                        00            .byte	0
08589 1DD9                        00            .byte	0
08590 1DDA                        66            .byte	$66
08591 1DDB                        66            .byte	$66
08592 1DDC                        66            .byte	$66
08593 1DDD                        66            .byte	$66
08594 1DDE                        3C            .byte	$3C
08595 1DDF                        18            .byte	$18
08596 1DE0                        00            .byte	0
08597 1DE1                        00            .byte	0
08598 1DE2                        00            .byte	0
08599                                           ! 1228  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08600 1DE3                        00            .byte	0
08601 1DE4                        00            .byte	0
08602 1DE5                        00            .byte	0
08603 1DE6                        00            .byte	0
08604 1DE7                        00            .byte	0
08605 1DE8                        C6            .byte	$C6
08606 1DE9                        C6            .byte	$C6
08607 1DEA                        D6            .byte	$D6
08608 1DEB                        D6            .byte	$D6
08609 1DEC                        FE            .byte	$FE
08610 1DED                        6C            .byte	$6C
08611 1DEE                        00            .byte	0
08612 1DEF                        00            .byte	0
08613 1DF0                        00            .byte	0
08614                                           ! 1229  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08615 1DF1                        00            .byte	0
08616 1DF2                        00            .byte	0
08617 1DF3                        00            .byte	0
08618 1DF4                        00            .byte	0
08619 1DF5                        00            .byte	0
08620 1DF6                        C6            .byte	$C6
08621 1DF7                        6C            .byte	$6C
08622 1DF8                        38            .byte	$38
08623 1DF9                        38            .byte	$38
08624 1DFA                        6C            .byte	$6C
08625 1DFB                        C6            .byte	$C6
08626 1DFC                        00            .byte	0
08627 1DFD                        00            .byte	0
08628 1DFE                        00            .byte	0
08629                                           ! 1230  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08630 1DFF                        00            .byte	0
08631 1E00                        00            .byte	0
08632 1E01                        00            .byte	0
08633 1E02                        00            .byte	0
08634 1E03                        00            .byte	0
08635 1E04                        C6            .byte	$C6
08636 1E05                        C6            .byte	$C6
08637 1E06                        C6            .byte	$C6
08638 1E07                        C6            .byte	$C6
08639 1E08                        7E            .byte	$7E
08640 1E09                        06            .byte	6
08641 1E0A                        0C            .byte	$C
08642 1E0B                        F8            .byte	$F8
08643 1E0C                        00            .byte	0
08644                                           ! 1231  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08645 1E0D                        00            .byte	0
08646 1E0E                        00            .byte	0
08647 1E0F                        00            .byte	0
08648 1E10                        00            .byte	0
08649 1E11                        00            .byte	0
08650 1E12                        FE            .byte	$FE
08651 1E13                        CC            .byte	$CC
08652 1E14                        18            .byte	$18
08653 1E15                        30            .byte	$30
08654 1E16                        66            .byte	$66
08655 1E17                        FE            .byte	$FE
08656 1E18                        00            .byte	0
08657 1E19                        00            .byte	0
08658 1E1A                        00            .byte	0
08659                                           ! 1232  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08660 1E1B                        00            .byte	0
08661 1E1C                        00            .byte	0
08662 1E1D                        0E            .byte	$E
08663 1E1E                        18            .byte	$18
08664 1E1F                        18            .byte	$18
08665 1E20                        18            .byte	$18
08666 1E21                        70            .byte	$70
08667 1E22                        18            .byte	$18
08668 1E23                        18            .byte	$18
08669 1E24                        18            .byte	$18
08670 1E25                        0E            .byte	$E
08671 1E26                        00            .byte	0
08672 1E27                        00            .byte	0
08673 1E28                        00            .byte	0
08674                                           ! 1233  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08675 1E29                        00            .byte	0
08676 1E2A                        00            .byte	0
08677 1E2B                        18            .byte	$18
08678 1E2C                        18            .byte	$18
08679 1E2D                        18            .byte	$18
08680 1E2E                        18            .byte	$18
08681 1E2F                        00            .byte	0
08682 1E30                        18            .byte	$18
08683 1E31                        18            .byte	$18
08684 1E32                        18            .byte	$18
08685 1E33                        18            .byte	$18
08686 1E34                        00            .byte	0
08687 1E35                        00            .byte	0
08688 1E36                        00            .byte	0
08689                                           ! 1234  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08690 1E37                        00            .byte	0
08691 1E38                        00            .byte	0
08692 1E39                        70            .byte	$70
08693 1E3A                        18            .byte	$18
08694 1E3B                        18            .byte	$18
08695 1E3C                        18            .byte	$18
08696 1E3D                        0E            .byte	$E
08697 1E3E                        18            .byte	$18
08698 1E3F                        18            .byte	$18
08699 1E40                        18            .byte	$18
08700 1E41                        70            .byte	$70
08701 1E42                        00            .byte	0
08702 1E43                        00            .byte	0
08703 1E44                        00            .byte	0
08704                                           ! 1235  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08705 1E45                        00            .byte	0
08706 1E46                        00            .byte	0
08707 1E47                        76            .byte	$76
08708 1E48                        DC            .byte	$DC
08709 1E49                        00            .byte	0
08710 1E4A                        00            .byte	0
08711 1E4B                        00            .byte	0
08712 1E4C                        00            .byte	0
08713 1E4D                        00            .byte	0
08714                                           ! 1235  0x00, 0x00, 0x00, 0x00,
08715 1E4E                        00            .byte	0
08716 1E4F                        00            .byte	0
08717 1E50                        00            .byte	0
08718 1E51                        00            .byte	0
08719 1E52                        00            .byte	0
08720                                           ! 1236  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08721 1E53                        00            .byte	0
08722 1E54                        00            .byte	0
08723 1E55                        00            .byte	0
08724 1E56                        00            .byte	0
08725 1E57                        10            .byte	$10
08726 1E58                        38            .byte	$38
08727 1E59                        6C            .byte	$6C
08728 1E5A                        C6            .byte	$C6
08729 1E5B                        C6            .byte	$C6
08730 1E5C                        FE            .byte	$FE
08731 1E5D                        00            .byte	0
08732 1E5E                        00            .byte	0
08733 1E5F                        00            .byte	0
08734 1E60                        00            .byte	0
08735                                           ! 1237  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08736 1E61                        00            .byte	0
08737 1E62                        00            .byte	0
08738 1E63                        3C            .byte	$3C
08739 1E64                        66            .byte	$66
08740 1E65                        C2            .byte	$C2
08741 1E66                        C0            .byte	$C0
08742 1E67                        C0            .byte	$C0
08743 1E68                        C2            .byte	$C2
08744 1E69                        66            .byte	$66
08745 1E6A                        3C            .byte	$3C
08746 1E6B                        0C            .byte	$C
08747 1E6C                        06            .byte	6
08748 1E6D                        7C            .byte	$7C
08749 1E6E                        00            .byte	0
08750                                           ! 1238  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08751 1E6F                        00            .byte	0
08752 1E70                        00            .byte	0
08753 1E71                        CC            .byte	$CC
08754 1E72                        CC            .byte	$CC
08755 1E73                        00            .byte	0
08756 1E74                        CC            .byte	$CC
08757 1E75                        CC            .byte	$CC
08758 1E76                        CC            .byte	$CC
08759 1E77                        CC            .byte	$CC
08760 1E78                        CC            .byte	$CC
08761 1E79                        76            .byte	$76
08762 1E7A                        00            .byte	0
08763 1E7B                        00            .byte	0
08764 1E7C                        00            .byte	0
08765                                           ! 1239  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08766 1E7D                        00            .byte	0
08767 1E7E                        0C            .byte	$C
08768 1E7F                        18            .byte	$18
08769 1E80                        30            .byte	$30
08770 1E81                        00            .byte	0
08771 1E82                        7C            .byte	$7C
08772 1E83                        C6            .byte	$C6
08773 1E84                        FE            .byte	$FE
08774 1E85                        C0            .byte	$C0
08775 1E86                        C6            .byte	$C6
08776 1E87                        7C            .byte	$7C
08777 1E88                        00            .byte	0
08778 1E89                        00            .byte	0
08779 1E8A                        00            .byte	0
08780                                           ! 1240  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08781 1E8B                        00            .byte	0
08782 1E8C                        10            .byte	$10
08783 1E8D                        38            .byte	$38
08784 1E8E                        6C            .byte	$6C
08785 1E8F                        00            .byte	0
08786 1E90                        78            .byte	$78
08787 1E91                        0C            .byte	$C
08788 1E92                        7C            .byte	$7C
08789 1E93                        CC            .byte	$CC
08790 1E94                        CC            .byte	$CC
08791 1E95                        76            .byte	$76
08792 1E96                        00            .byte	0
08793 1E97                        00            .byte	0
08794 1E98                        00            .byte	0
08795                                           ! 1241  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08796 1E99                        00            .byte	0
08797 1E9A                        00            .byte	0
08798 1E9B                        CC            .byte	$CC
08799 1E9C                        CC            .byte	$CC
08800 1E9D                        00            .byte	0
08801 1E9E                        78            .byte	$78
08802 1E9F                        0C            .byte	$C
08803 1EA0                        7C            .byte	$7C
08804 1EA1                        CC            .byte	$CC
08805 1EA2                        CC            .byte	$CC
08806 1EA3                        76            .byte	$76
08807 1EA4                        00            .byte	0
08808 1EA5                        00            .byte	0
08809 1EA6                        00            .byte	0
08810                                           ! 1242  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08811 1EA7                        00            .byte	0
08812 1EA8                        60            .byte	$60
08813 1EA9                        30            .byte	$30
08814 1EAA                        18            .byte	$18
08815 1EAB                        00            .byte	0
08816 1EAC                        78            .byte	$78
08817 1EAD                        0C            .byte	$C
08818 1EAE                        7C            .byte	$7C
08819 1EAF                        CC            .byte	$CC
08820 1EB0                        CC            .byte	$CC
08821 1EB1                        76            .byte	$76
08822 1EB2                        00            .byte	0
08823 1EB3                        00            .byte	0
08824 1EB4                        00            .byte	0
08825                                           ! 1243  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08826 1EB5                        00            .byte	0
08827 1EB6                        38            .byte	$38
08828 1EB7                        6C            .byte	$6C
08829 1EB8                        38            .byte	$38
08830 1EB9                        00            .byte	0
08831 1EBA                        78            .byte	$78
08832 1EBB                        0C            .byte	$C
08833 1EBC                        7C            .byte	$7C
08834 1EBD                        CC            .byte	$CC
08835 1EBE                        CC            .byte	$CC
08836 1EBF                        76            .byte	$76
08837 1EC0                        00            .byte	0
08838 1EC1                        00            .byte	0
08839 1EC2                        00            .byte	0
08840                                           ! 1244  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08841 1EC3                        00            .byte	0
08842 1EC4                        00            .byte	0
08843 1EC5                        00            .byte	0
08844 1EC6                        00            .byte	0
08845 1EC7                        3C            .byte	$3C
08846 1EC8                        66            .byte	$66
08847 1EC9                        60            .byte	$60
08848 1ECA                        66            .byte	$66
08849 1ECB                        3C            .byte	$3C
08850 1ECC                        0C            .byte	$C
08851 1ECD                        06            .byte	6
08852 1ECE                        3C            .byte	$3C
08853 1ECF                        00            .byte	0
08854 1ED0                        00            .byte	0
08855                                           ! 1245  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08856 1ED1                        00            .byte	0
08857 1ED2                        10            .byte	$10
08858 1ED3                        38            .byte	$38
08859 1ED4                        6C            .byte	$6C
08860 1ED5                        00            .byte	0
08861 1ED6                        7C            .byte	$7C
08862 1ED7                        C6            .byte	$C6
08863 1ED8                        FE            .byte	$FE
08864 1ED9                        C0            .byte	$C0
08865 1EDA                        C6            .byte	$C6
08866 1EDB                        7C            .byte	$7C
08867 1EDC                        00            .byte	0
08868 1EDD                        00            .byte	0
08869 1EDE                        00            .byte	0
08870                                           ! 1246  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08871 1EDF                        00            .byte	0
08872 1EE0                        00            .byte	0
08873 1EE1                        CC            .byte	$CC
08874 1EE2                        CC            .byte	$CC
08875 1EE3                        00            .byte	0
08876 1EE4                        7C            .byte	$7C
08877 1EE5                        C6            .byte	$C6
08878 1EE6                        FE            .byte	$FE
08879 1EE7                        C0            .byte	$C0
08880 1EE8                        C6            .byte	$C6
08881 1EE9                        7C            .byte	$7C
08882 1EEA                        00            .byte	0
08883 1EEB                        00            .byte	0
08884 1EEC                        00            .byte	0
08885                                           ! 1247  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08886 1EED                        00            .byte	0
08887 1EEE                        60            .byte	$60
08888 1EEF                        30            .byte	$30
08889 1EF0                        18            .byte	$18
08890 1EF1                        00            .byte	0
08891 1EF2                        7C            .byte	$7C
08892 1EF3                        C6            .byte	$C6
08893 1EF4                        FE            .byte	$FE
08894 1EF5                        C0            .byte	$C0
08895 1EF6                        C6            .byte	$C6
08896 1EF7                        7C            .byte	$7C
08897 1EF8                        00            .byte	0
08898 1EF9                        00            .byte	0
08899 1EFA                        00            .byte	0
08900                                           ! 1248  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08901 1EFB                        00            .byte	0
08902 1EFC                        00            .byte	0
08903 1EFD                        66            .byte	$66
08904 1EFE                        66            .byte	$66
08905 1EFF                        00            .byte	0
08906 1F00                        38            .byte	$38
08907 1F01                        18            .byte	$18
08908 1F02                        18            .byte	$18
08909 1F03                        18            .byte	$18
08910 1F04                        18            .byte	$18
08911 1F05                        3C            .byte	$3C
08912 1F06                        00            .byte	0
08913 1F07                        00            .byte	0
08914 1F08                        00            .byte	0
08915                                           ! 1249  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08916 1F09                        00            .byte	0
08917 1F0A                        18            .byte	$18
08918 1F0B                        3C            .byte	$3C
08919 1F0C                        66            .byte	$66
08920 1F0D                        00            .byte	0
08921 1F0E                        38            .byte	$38
08922 1F0F                        18            .byte	$18
08923 1F10                        18            .byte	$18
08924 1F11                        18            .byte	$18
08925 1F12                        18            .byte	$18
08926 1F13                        3C            .byte	$3C
08927 1F14                        00            .byte	0
08928 1F15                        00            .byte	0
08929 1F16                        00            .byte	0
08930                                           ! 1250  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08931 1F17                        00            .byte	0
08932 1F18                        60            .byte	$60
08933 1F19                        30            .byte	$30
08934 1F1A                        18            .byte	$18
08935 1F1B                        00            .byte	0
08936 1F1C                        38            .byte	$38
08937 1F1D                        18            .byte	$18
08938 1F1E                        18            .byte	$18
08939 1F1F                        18            .byte	$18
08940 1F20                        18            .byte	$18
08941 1F21                        3C            .byte	$3C
08942 1F22                        00            .byte	0
08943 1F23                        00            .byte	0
08944 1F24                        00            .byte	0
08945                                           ! 1251  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08946 1F25                        00            .byte	0
08947 1F26                        C6            .byte	$C6
08948 1F27                        C6            .byte	$C6
08949 1F28                        10            .byte	$10
08950 1F29                        38            .byte	$38
08951 1F2A                        6C            .byte	$6C
08952 1F2B                        C6            .byte	$C6
08953 1F2C                        C6            .byte	$C6
08954 1F2D                        FE            .byte	$FE
08955 1F2E                        C6            .byte	$C6
08956 1F2F                        C6            .byte	$C6
08957 1F30                        00            .byte	0
08958 1F31                        00            .byte	0
08959 1F32                        00            .byte	0
08960                                           ! 1252  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08961 1F33                        38            .byte	$38
08962 1F34                        6C            .byte	$6C
08963 1F35                        38            .byte	$38
08964 1F36                        00            .byte	0
08965 1F37                        38            .byte	$38
08966 1F38                        6C            .byte	$6C
08967 1F39                        C6            .byte	$C6
08968 1F3A                        C6            .byte	$C6
08969 1F3B                        FE            .byte	$FE
08970 1F3C                        C6            .byte	$C6
08971 1F3D                        C6            .byte	$C6
08972 1F3E                        00            .byte	0
08973 1F3F                        00            .byte	0
08974 1F40                        00            .byte	0
08975                                           ! 1253  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
08976 1F41                        18            .byte	$18
08977 1F42                        30            .byte	$30
08978 1F43                        60            .byte	$60
08979 1F44                        00            .byte	0
08980 1F45                        FE            .byte	$FE
08981 1F46                        66            .byte	$66
08982 1F47                        60            .byte	$60
08983 1F48                        7C            .byte	$7C
08984 1F49                        60            .byte	$60
08985 1F4A                        66            .byte	$66
08986 1F4B                        FE            .byte	$FE
08987 1F4C                        00            .byte	0
08988 1F4D                        00            .byte	0
08989 1F4E                        00            .byte	0
08990                                           ! 1254  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
08991 1F4F                        00            .byte	0
08992 1F50                        00            .byte	0
08993 1F51                        00            .byte	0
08994 1F52                        00            .byte	0
08995 1F53                        CC            .byte	$CC
08996 1F54                        76            .byte	$76
08997 1F55                        36            .byte	$36
08998 1F56                        7E            .byte	$7E
08999 1F57                        D8            .byte	$D8
09000 1F58                        D8            .byte	$D8
09001 1F59                        6E            .byte	$6E
09002 1F5A                        00            .byte	0
09003 1F5B                        00            .byte	0
09004 1F5C                        00            .byte	0
09005                                           ! 1255  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
09006 1F5D                        00            .byte	0
09007 1F5E                        00            .byte	0
09008 1F5F                        3E            .byte	$3E
09009 1F60                        6C            .byte	$6C
09010 1F61                        CC            .byte	$CC
09011 1F62                        CC            .byte	$CC
09012 1F63                        FE            .byte	$FE
09013 1F64                        CC            .byte	$CC
09014 1F65                        CC            .byte	$CC
09015 1F66                        CC            .byte	$CC
09016 1F67                        CE            .byte	$CE
09017 1F68                        00            .byte	0
09018 1F69                        00            .byte	0
09019 1F6A                        00            .byte	0
09020                                           ! 1256  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09021 1F6B                        00            .byte	0
09022 1F6C                        10            .byte	$10
09023 1F6D                        38            .byte	$38
09024 1F6E                        6C            .byte	$6C
09025 1F6F                        00            .byte	0
09026 1F70                        7C            .byte	$7C
09027 1F71                        C6            .byte	$C6
09028 1F72                        C6            .byte	$C6
09029 1F73                        C6            .byte	$C6
09030 1F74                        C6            .byte	$C6
09031 1F75                        7C            .byte	$7C
09032 1F76                        00            .byte	0
09033 1F77                        00            .byte	0
09034 1F78                        00            .byte	0
09035                                           ! 1257  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09036 1F79                        00            .byte	0
09037 1F7A                        00            .byte	0
09038 1F7B                        C6            .byte	$C6
09039 1F7C                        C6            .byte	$C6
09040 1F7D                        00            .byte	0
09041 1F7E                        7C            .byte	$7C
09042 1F7F                        C6            .byte	$C6
09043 1F80                        C6            .byte	$C6
09044 1F81                        C6            .byte	$C6
09045 1F82                        C6            .byte	$C6
09046 1F83                        7C            .byte	$7C
09047 1F84                        00            .byte	0
09048 1F85                        00            .byte	0
09049 1F86                        00            .byte	0
09050                                           ! 1258  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09051 1F87                        00            .byte	0
09052 1F88                        60            .byte	$60
09053 1F89                        30            .byte	$30
09054 1F8A                        18            .byte	$18
09055 1F8B                        00            .byte	0
09056 1F8C                        7C            .byte	$7C
09057 1F8D                        C6            .byte	$C6
09058 1F8E                        C6            .byte	$C6
09059 1F8F                        C6            .byte	$C6
09060 1F90                        C6            .byte	$C6
09061 1F91                        7C            .byte	$7C
09062 1F92                        00            .byte	0
09063 1F93                        00            .byte	0
09064 1F94                        00            .byte	0
09065                                           ! 1259  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0
09066 1F95                        00            .byte	0
09067 1F96                        30            .byte	$30
09068 1F97                        78            .byte	$78
09069 1F98                        CC            .byte	$CC
09070 1F99                        00            .byte	0
09071 1F9A                        CC            .byte	$CC
09072 1F9B                        CC            .byte	$CC
09073 1F9C                        CC            .byte	$CC
09074 1F9D                        CC            .byte	$CC
09075 1F9E                        CC            .byte	$CC
09076 1F9F                        76            .byte	$76
09077                                           ! 1259 x00, 0x00, 0x00,
09078 1FA0                        00            .byte	0
09079 1FA1                        00            .byte	0
09080 1FA2                        00            .byte	0
09081                                           ! 1260  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09082 1FA3                        00            .byte	0
09083 1FA4                        60            .byte	$60
09084 1FA5                        30            .byte	$30
09085 1FA6                        18            .byte	$18
09086 1FA7                        00            .byte	0
09087 1FA8                        CC            .byte	$CC
09088 1FA9                        CC            .byte	$CC
09089 1FAA                        CC            .byte	$CC
09090 1FAB                        CC            .byte	$CC
09091 1FAC                        CC            .byte	$CC
09092 1FAD                        76            .byte	$76
09093 1FAE                        00            .byte	0
09094 1FAF                        00            .byte	0
09095 1FB0                        00            .byte	0
09096                                           ! 1261  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
09097 1FB1                        00            .byte	0
09098 1FB2                        00            .byte	0
09099 1FB3                        C6            .byte	$C6
09100 1FB4                        C6            .byte	$C6
09101 1FB5                        00            .byte	0
09102 1FB6                        C6            .byte	$C6
09103 1FB7                        C6            .byte	$C6
09104 1FB8                        C6            .byte	$C6
09105 1FB9                        C6            .byte	$C6
09106 1FBA                        7E            .byte	$7E
09107 1FBB                        06            .byte	6
09108 1FBC                        0C            .byte	$C
09109 1FBD                        78            .byte	$78
09110 1FBE                        00            .byte	0
09111                                           ! 1262  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
09112 1FBF                        00            .byte	0
09113 1FC0                        C6            .byte	$C6
09114 1FC1                        C6            .byte	$C6
09115 1FC2                        38            .byte	$38
09116 1FC3                        6C            .byte	$6C
09117 1FC4                        C6            .byte	$C6
09118 1FC5                        C6            .byte	$C6
09119 1FC6                        C6            .byte	$C6
09120 1FC7                        C6            .byte	$C6
09121 1FC8                        6C            .byte	$6C
09122 1FC9                        38            .byte	$38
09123 1FCA                        00            .byte	0
09124 1FCB                        00            .byte	0
09125 1FCC                        00            .byte	0
09126                                           ! 1263  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09127 1FCD                        00            .byte	0
09128 1FCE                        C6            .byte	$C6
09129 1FCF                        C6            .byte	$C6
09130 1FD0                        00            .byte	0
09131 1FD1                        C6            .byte	$C6
09132 1FD2                        C6            .byte	$C6
09133 1FD3                        C6            .byte	$C6
09134 1FD4                        C6            .byte	$C6
09135 1FD5                        C6            .byte	$C6
09136 1FD6                        C6            .byte	$C6
09137 1FD7                        7C            .byte	$7C
09138 1FD8                        00            .byte	0
09139 1FD9                        00            .byte	0
09140 1FDA                        00            .byte	0
09141                                           ! 1264  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
09142 1FDB                        00            .byte	0
09143 1FDC                        18            .byte	$18
09144 1FDD                        18            .byte	$18
09145 1FDE                        3C            .byte	$3C
09146 1FDF                        66            .byte	$66
09147 1FE0                        60            .byte	$60
09148 1FE1                        60            .byte	$60
09149 1FE2                        66            .byte	$66
09150 1FE3                        3C            .byte	$3C
09151 1FE4                        18            .byte	$18
09152 1FE5                        18            .byte	$18
09153 1FE6                        00            .byte	0
09154 1FE7                        00            .byte	0
09155 1FE8                        00            .byte	0
09156                                           ! 1265  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
09157 1FE9                        00            .byte	0
09158 1FEA                        38            .byte	$38
09159 1FEB                        6C            .byte	$6C
09160 1FEC                        64            .byte	$64
09161 1FED                        60            .byte	$60
09162 1FEE                        F0            .byte	$F0
09163 1FEF                        60            .byte	$60
09164 1FF0                        60            .byte	$60
09165 1FF1                        60            .byte	$60
09166 1FF2                        E6            .byte	$E6
09167 1FF3                        FC            .byte	$FC
09168 1FF4                        00            .byte	0
09169 1FF5                        00            .byte	0
09170 1FF6                        00            .byte	0
09171                                           ! 1266  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
09172 1FF7                        00            .byte	0
09173 1FF8                        00            .byte	0
09174 1FF9                        66            .byte	$66
09175 1FFA                        66            .byte	$66
09176 1FFB                        3C            .byte	$3C
09177 1FFC                        18            .byte	$18
09178 1FFD                        7E            .byte	$7E
09179 1FFE                        18            .byte	$18
09180 1FFF                        7E            .byte	$7E
09181 2000                        18            .byte	$18
09182 2001                        18            .byte	$18
09183 2002                        00            .byte	0
09184 2003                        00            .byte	0
09185 2004                        00            .byte	0
09186                                           ! 1267  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
09187 2005                        00            .byte	0
09188 2006                        F8            .byte	$F8
09189 2007                        CC            .byte	$CC
09190 2008                        CC            .byte	$CC
09191 2009                        F8            .byte	$F8
09192 200A                        C4            .byte	$C4
09193 200B                        CC            .byte	$CC
09194 200C                        DE            .byte	$DE
09195 200D                        CC            .byte	$CC
09196 200E                        CC            .byte	$CC
09197 200F                        C6            .byte	$C6
09198 2010                        00            .byte	0
09199 2011                        00            .byte	0
09200 2012                        00            .byte	0
09201                                           ! 1268  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
09202 2013                        00            .byte	0
09203 2014                        0E            .byte	$E
09204 2015                        1B            .byte	$1B
09205 2016                        18            .byte	$18
09206 2017                        18            .byte	$18
09207 2018                        18            .byte	$18
09208 2019                        7E            .byte	$7E
09209 201A                        18            .byte	$18
09210 201B                        18            .byte	$18
09211 201C                        18            .byte	$18
09212 201D                        18            .byte	$18
09213 201E                        D8            .byte	$D8
09214 201F                        70            .byte	$70
09215 2020                        00            .byte	0
09216                                           ! 1269  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09217 2021                        00            .byte	0
09218 2022                        18            .byte	$18
09219 2023                        30            .byte	$30
09220 2024                        60            .byte	$60
09221 2025                        00            .byte	0
09222 2026                        78            .byte	$78
09223 2027                        0C            .byte	$C
09224 2028                        7C            .byte	$7C
09225 2029                        CC            .byte	$CC
09226 202A                        CC            .byte	$CC
09227 202B                        76            .byte	$76
09228 202C                        00            .byte	0
09229 202D                        00            .byte	0
09230 202E                        00            .byte	0
09231                                           ! 1270  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
09232 202F                        00            .byte	0
09233 2030                        0C            .byte	$C
09234 2031                        18            .byte	$18
09235 2032                        30            .byte	$30
09236 2033                        00            .byte	0
09237 2034                        38            .byte	$38
09238 2035                        18            .byte	$18
09239 2036                        18            .byte	$18
09240 2037                        18            .byte	$18
09241 2038                        18            .byte	$18
09242 2039                        3C            .byte	$3C
09243 203A                        00            .byte	0
09244 203B                        00            .byte	0
09245 203C                        00            .byte	0
09246                                           ! 1271  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09247 203D                        00            .byte	0
09248 203E                        18            .byte	$18
09249 203F                        30            .byte	$30
09250 2040                        60            .byte	$60
09251 2041                        00            .byte	0
09252 2042                        7C            .byte	$7C
09253 2043                        C6            .byte	$C6
09254 2044                        C6            .byte	$C6
09255 2045                        C6            .byte	$C6
09256 2046                        C6            .byte	$C6
09257 2047                        7C            .byte	$7C
09258 2048                        00            .byte	0
09259 2049                        00            .byte	0
09260 204A                        00            .byte	0
09261                                           ! 1272  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09262 204B                        00            .byte	0
09263 204C                        18            .byte	$18
09264 204D                        30            .byte	$30
09265 204E                        60            .byte	$60
09266 204F                        00            .byte	0
09267 2050                        CC            .byte	$CC
09268 2051                        CC            .byte	$CC
09269 2052                        CC            .byte	$CC
09270 2053                        CC            .byte	$CC
09271 2054                        CC            .byte	$CC
09272 2055                        76            .byte	$76
09273 2056                        00            .byte	0
09274 2057                        00            .byte	0
09275 2058                        00            .byte	0
09276                                           ! 1273  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09277 2059                        00            .byte	0
09278 205A                        00            .byte	0
09279 205B                        76            .byte	$76
09280 205C                        DC            .byte	$DC
09281 205D                        00            .byte	0
09282 205E                        DC            .byte	$DC
09283 205F                        66            .byte	$66
09284 2060                        66            .byte	$66
09285 2061                        66            .byte	$66
09286 2062                        66            .byte	$66
09287 2063                        66            .byte	$66
09288 2064                        00            .byte	0
09289 2065                        00            .byte	0
09290 2066                        00            .byte	0
09291                                           ! 1274  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09292 2067                        76            .byte	$76
09293 2068                        DC            .byte	$DC
09294 2069                        00            .byte	0
09295 206A                        C6            .byte	$C6
09296 206B                        E6            .byte	$E6
09297 206C                        F6            .byte	$F6
09298 206D                        FE            .byte	$FE
09299 206E                        DE            .byte	$DE
09300 206F                        CE            .byte	$CE
09301 2070                        C6            .byte	$C6
09302 2071                        C6            .byte	$C6
09303 2072                        00            .byte	0
09304 2073                        00            .byte	0
09305 2074                        00            .byte	0
09306                                           ! 1275  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09307 2075                        00            .byte	0
09308 2076                        3C            .byte	$3C
09309 2077                        6C            .byte	$6C
09310 2078                        6C            .byte	$6C
09311 2079                        3E            .byte	$3E
09312 207A                        00            .byte	0
09313 207B                        7E            .byte	$7E
09314 207C                        00            .byte	0
09315 207D                        00            .byte	0
09316 207E                        00            .byte	0
09317 207F                        00            .byte	0
09318 2080                        00            .byte	0
09319 2081                        00            .byte	0
09320 2082                        00            .byte	0
09321                                           ! 1276  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09322 2083                        00            .byte	0
09323 2084                        38            .byte	$38
09324 2085                        6C            .byte	$6C
09325 2086                        6C            .byte	$6C
09326 2087                        38            .byte	$38
09327 2088                        00            .byte	0
09328 2089                        7C            .byte	$7C
09329 208A                        00            .byte	0
09330 208B                        00            .byte	0
09331 208C                        00            .byte	0
09332 208D                        00            .byte	0
09333 208E                        00            .byte	0
09334 208F                        00            .byte	0
09335 2090                        00            .byte	0
09336                                           ! 1277  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09337 2091                        00            .byte	0
09338 2092                        00            .byte	0
09339 2093                        30            .byte	$30
09340 2094                        30            .byte	$30
09341 2095                        00            .byte	0
09342 2096                        30            .byte	$30
09343 2097                        30            .byte	$30
09344 2098                        60            .byte	$60
09345 2099                        C6            .byte	$C6
09346 209A                        C6            .byte	$C6
09347 209B                        7C            .byte	$7C
09348 209C                        00            .byte	0
09349 209D                        00            .byte	0
09350 209E                        00            .byte	0
09351                                           ! 1278  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09352 209F                        00            .byte	0
09353 20A0                        00            .byte	0
09354 20A1                        00            .byte	0
09355 20A2                        00            .byte	0
09356 20A3                        00            .byte	0
09357 20A4                        00            .byte	0
09358 20A5                        FE            .byte	$FE
09359 20A6                        C0            .byte	$C0
09360 20A7                        C0            .byte	$C0
09361 20A8                        C0            .byte	$C0
09362 20A9                        00            .byte	0
09363 20AA                        00            .byte	0
09364 20AB                        00            .byte	0
09365 20AC                        00            .byte	0
09366                                           ! 1279  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09367 20AD                        00            .byte	0
09368 20AE                        00            .byte	0
09369 20AF                        00            .byte	0
09370 20B0                        00            .byte	0
09371 20B1                        00            .byte	0
09372 20B2                        00            .byte	0
09373 20B3                        FE            .byte	$FE
09374 20B4                        06            .byte	6
09375 20B5                        06            .byte	6
09376 20B6                        06            .byte	6
09377 20B7                        00            .byte	0
09378 20B8                        00            .byte	0
09379 20B9                        00            .byte	0
09380 20BA                        00            .byte	0
09381                                           ! 1280  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09382 20BB                        00            .byte	0
09383 20BC                        C0            .byte	$C0
09384 20BD                        C0            .byte	$C0
09385 20BE                        C6            .byte	$C6
09386 20BF                        CC            .byte	$CC
09387 20C0                        D8            .byte	$D8
09388 20C1                        30            .byte	$30
09389 20C2                        60            .byte	$60
09390 20C3                        DC            .byte	$DC
09391 20C4                        86            .byte	$86
09392 20C5                        0C            .byte	$C
09393 20C6                        18            .byte	$18
09394 20C7                        3E            .byte	$3E
09395 20C8                        00            .byte	0
09396                                           ! 1281  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09397 20C9                        00            .byte	0
09398 20CA                        C0            .byte	$C0
09399 20CB                        C0            .byte	$C0
09400 20CC                        C6            .byte	$C6
09401 20CD                        CC            .byte	$CC
09402 20CE                        D8            .byte	$D8
09403 20CF                        30            .byte	$30
09404 20D0                        66            .byte	$66
09405 20D1                        CE            .byte	$CE
09406 20D2                        9E            .byte	$9E
09407 20D3                        3E            .byte	$3E
09408 20D4                        06            .byte	6
09409 20D5                        06            .byte	6
09410 20D6                        00            .byte	0
09411                                           ! 1282  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09412 20D7                        00            .byte	0
09413 20D8                        00            .byte	0
09414 20D9                        18            .byte	$18
09415 20DA                        18            .byte	$18
09416 20DB                        00            .byte	0
09417 20DC                        18            .byte	$18
09418 20DD                        18            .byte	$18
09419 20DE                        3C            .byte	$3C
09420 20DF                        3C            .byte	$3C
09421 20E0                        3C            .byte	$3C
09422 20E1                        18            .byte	$18
09423 20E2                        00            .byte	0
09424 20E3                        00            .byte	0
09425 20E4                        00            .byte	0
09426                                           ! 1283  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x0
09427 20E5                        00            .byte	0
09428 20E6                        00            .byte	0
09429 20E7                        00            .byte	0
09430 20E8                        00            .byte	0
09431 20E9                        36            .byte	$36
09432 20EA                        6C            .byte	$6C
09433 20EB                        D8            .byte	$D8
09434 20EC                        6C            .byte	$6C
09435 20ED                        36            .byte	$36
09436 20EE                        00            .byte	0
09437 20EF                        00            .byte	0
09438 20F0                        00            .byte	0
09439                                           ! 1283 0, 0x00,
09440 20F1                        00            .byte	0
09441 20F2                        00            .byte	0
09442                                           ! 1284  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09443 20F3                        00            .byte	0
09444 20F4                        00            .byte	0
09445 20F5                        00            .byte	0
09446 20F6                        00            .byte	0
09447 20F7                        D8            .byte	$D8
09448 20F8                        6C            .byte	$6C
09449 20F9                        36            .byte	$36
09450 20FA                        6C            .byte	$6C
09451 20FB                        D8            .byte	$D8
09452 20FC                        00            .byte	0
09453 20FD                        00            .byte	0
09454 20FE                        00            .byte	0
09455 20FF                        00            .byte	0
09456 2100                        00            .byte	0
09457                                           ! 1285  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09458 2101                        11            .byte	$11
09459 2102                        44            .byte	$44
09460 2103                        11            .byte	$11
09461 2104                        44            .byte	$44
09462 2105                        11            .byte	$11
09463 2106                        44            .byte	$44
09464 2107                        11            .byte	$11
09465 2108                        44            .byte	$44
09466 2109                        11            .byte	$11
09467 210A                        44            .byte	$44
09468 210B                        11            .byte	$11
09469 210C                        44            .byte	$44
09470 210D                        11            .byte	$11
09471 210E                        44            .byte	$44
09472                                           ! 1286  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09473 210F                        55            .byte	$55
09474 2110                        AA            .byte	$AA
09475 2111                        55            .byte	$55
09476 2112                        AA            .byte	$AA
09477 2113                        55            .byte	$55
09478 2114                        AA            .byte	$AA
09479 2115                        55            .byte	$55
09480 2116                        AA            .byte	$AA
09481 2117                        55            .byte	$55
09482 2118                        AA            .byte	$AA
09483 2119                        55            .byte	$55
09484 211A                        AA            .byte	$AA
09485 211B                        55            .byte	$55
09486 211C                        AA            .byte	$AA
09487                                           ! 1287  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09488 211D                        DD            .byte	$DD
09489 211E                        77            .byte	$77
09490 211F                        DD            .byte	$DD
09491 2120                        77            .byte	$77
09492 2121                        DD            .byte	$DD
09493 2122                        77            .byte	$77
09494 2123                        DD            .byte	$DD
09495 2124                        77            .byte	$77
09496 2125                        DD            .byte	$DD
09497 2126                        77            .byte	$77
09498 2127                        DD            .byte	$DD
09499 2128                        77            .byte	$77
09500 2129                        DD            .byte	$DD
09501 212A                        77            .byte	$77
09502                                           ! 1288  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09503 212B                        18            .byte	$18
09504 212C                        18            .byte	$18
09505 212D                        18            .byte	$18
09506 212E                        18            .byte	$18
09507 212F                        18            .byte	$18
09508 2130                        18            .byte	$18
09509 2131                        18            .byte	$18
09510 2132                        18            .byte	$18
09511 2133                        18            .byte	$18
09512 2134                        18            .byte	$18
09513 2135                        18            .byte	$18
09514 2136                        18            .byte	$18
09515 2137                        18            .byte	$18
09516 2138                        18            .byte	$18
09517                                           ! 1289  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09518 2139                        18            .byte	$18
09519 213A                        18            .byte	$18
09520 213B                        18            .byte	$18
09521 213C                        18            .byte	$18
09522 213D                        18            .byte	$18
09523 213E                        18            .byte	$18
09524 213F                        18            .byte	$18
09525 2140                        F8            .byte	$F8
09526 2141                        18            .byte	$18
09527 2142                        18            .byte	$18
09528 2143                        18            .byte	$18
09529 2144                        18            .byte	$18
09530 2145                        18            .byte	$18
09531 2146                        18            .byte	$18
09532                                           ! 1290  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09533 2147                        18            .byte	$18
09534 2148                        18            .byte	$18
09535 2149                        18            .byte	$18
09536 214A                        18            .byte	$18
09537 214B                        18            .byte	$18
09538 214C                        F8            .byte	$F8
09539 214D                        18            .byte	$18
09540 214E                        F8            .byte	$F8
09541 214F                        18            .byte	$18
09542 2150                        18            .byte	$18
09543 2151                        18            .byte	$18
09544 2152                        18            .byte	$18
09545 2153                        18            .byte	$18
09546 2154                        18            .byte	$18
09547                                           ! 1291  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09548 2155                        36            .byte	$36
09549 2156                        36            .byte	$36
09550 2157                        36            .byte	$36
09551 2158                        36            .byte	$36
09552 2159                        36            .byte	$36
09553 215A                        36            .byte	$36
09554 215B                        36            .byte	$36
09555 215C                        F6            .byte	$F6
09556 215D                        36            .byte	$36
09557 215E                        36            .byte	$36
09558 215F                        36            .byte	$36
09559 2160                        36            .byte	$36
09560 2161                        36            .byte	$36
09561 2162                        36            .byte	$36
09562                                           ! 1292  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09563 2163                        00            .byte	0
09564 2164                        00            .byte	0
09565 2165                        00            .byte	0
09566 2166                        00            .byte	0
09567 2167                        00            .byte	0
09568 2168                        00            .byte	0
09569 2169                        00            .byte	0
09570 216A                        FE            .byte	$FE
09571 216B                        36            .byte	$36
09572 216C                        36            .byte	$36
09573 216D                        36            .byte	$36
09574 216E                        36            .byte	$36
09575 216F                        36            .byte	$36
09576 2170                        36            .byte	$36
09577                                           ! 1293  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09578 2171                        00            .byte	0
09579 2172                        00            .byte	0
09580 2173                        00            .byte	0
09581 2174                        00            .byte	0
09582 2175                        00            .byte	0
09583 2176                        F8            .byte	$F8
09584 2177                        18            .byte	$18
09585 2178                        F8            .byte	$F8
09586 2179                        18            .byte	$18
09587 217A                        18            .byte	$18
09588 217B                        18            .byte	$18
09589 217C                        18            .byte	$18
09590 217D                        18            .byte	$18
09591 217E                        18            .byte	$18
09592                                           ! 1294  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09593 217F                        36            .byte	$36
09594 2180                        36            .byte	$36
09595 2181                        36            .byte	$36
09596 2182                        36            .byte	$36
09597 2183                        36            .byte	$36
09598 2184                        F6            .byte	$F6
09599 2185                        06            .byte	6
09600 2186                        F6            .byte	$F6
09601 2187                        36            .byte	$36
09602 2188                        36            .byte	$36
09603 2189                        36            .byte	$36
09604 218A                        36            .byte	$36
09605 218B                        36            .byte	$36
09606 218C                        36            .byte	$36
09607                                           ! 1295  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09608 218D                        36            .byte	$36
09609 218E                        36            .byte	$36
09610 218F                        36            .byte	$36
09611 2190                        36            .byte	$36
09612 2191                        36            .byte	$36
09613 2192                        36            .byte	$36
09614 2193                        36            .byte	$36
09615 2194                        36            .byte	$36
09616 2195                        36            .byte	$36
09617 2196                        36            .byte	$36
09618 2197                        36            .byte	$36
09619 2198                        36            .byte	$36
09620 2199                        36            .byte	$36
09621 219A                        36            .byte	$36
09622                                           ! 1296  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09623 219B                        00            .byte	0
09624 219C                        00            .byte	0
09625 219D                        00            .byte	0
09626 219E                        00            .byte	0
09627 219F                        00            .byte	0
09628 21A0                        FE            .byte	$FE
09629 21A1                        06            .byte	6
09630 21A2                        F6            .byte	$F6
09631 21A3                        36            .byte	$36
09632 21A4                        36            .byte	$36
09633 21A5                        36            .byte	$36
09634 21A6                        36            .byte	$36
09635 21A7                        36            .byte	$36
09636 21A8                        36            .byte	$36
09637                                           ! 1297  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09638 21A9                        36            .byte	$36
09639 21AA                        36            .byte	$36
09640 21AB                        36            .byte	$36
09641 21AC                        36            .byte	$36
09642 21AD                        36            .byte	$36
09643 21AE                        F6            .byte	$F6
09644 21AF                        06            .byte	6
09645 21B0                        FE            .byte	$FE
09646 21B1                        00            .byte	0
09647 21B2                        00            .byte	0
09648 21B3                        00            .byte	0
09649 21B4                        00            .byte	0
09650 21B5                        00            .byte	0
09651 21B6                        00            .byte	0
09652                                           ! 1298  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09653 21B7                        36            .byte	$36
09654 21B8                        36            .byte	$36
09655 21B9                        36            .byte	$36
09656 21BA                        36            .byte	$36
09657 21BB                        36            .byte	$36
09658 21BC                        36            .byte	$36
09659 21BD                        36            .byte	$36
09660 21BE                        FE            .byte	$FE
09661 21BF                        00            .byte	0
09662 21C0                        00            .byte	0
09663 21C1                        00            .byte	0
09664 21C2                        00            .byte	0
09665 21C3                        00            .byte	0
09666 21C4                        00            .byte	0
09667                                           ! 1299  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09668 21C5                        18            .byte	$18
09669 21C6                        18            .byte	$18
09670 21C7                        18            .byte	$18
09671 21C8                        18            .byte	$18
09672 21C9                        18            .byte	$18
09673 21CA                        F8            .byte	$F8
09674 21CB                        18            .byte	$18
09675 21CC                        F8            .byte	$F8
09676 21CD                        00            .byte	0
09677 21CE                        00            .byte	0
09678 21CF                        00            .byte	0
09679 21D0                        00            .byte	0
09680 21D1                        00            .byte	0
09681 21D2                        00            .byte	0
09682                                           ! 1300  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09683 21D3                        00            .byte	0
09684 21D4                        00            .byte	0
09685 21D5                        00            .byte	0
09686 21D6                        00            .byte	0
09687 21D7                        00            .byte	0
09688 21D8                        00            .byte	0
09689 21D9                        00            .byte	0
09690 21DA                        F8            .byte	$F8
09691 21DB                        18            .byte	$18
09692 21DC                        18            .byte	$18
09693 21DD                        18            .byte	$18
09694 21DE                        18            .byte	$18
09695 21DF                        18            .byte	$18
09696 21E0                        18            .byte	$18
09697                                           ! 1301  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09698 21E1                        18            .byte	$18
09699 21E2                        18            .byte	$18
09700 21E3                        18            .byte	$18
09701 21E4                        18            .byte	$18
09702 21E5                        18            .byte	$18
09703 21E6                        18            .byte	$18
09704 21E7                        18            .byte	$18
09705 21E8                        1F            .byte	$1F
09706 21E9                        00            .byte	0
09707 21EA                        00            .byte	0
09708 21EB                        00            .byte	0
09709 21EC                        00            .byte	0
09710 21ED                        00            .byte	0
09711 21EE                        00            .byte	0
09712                                           ! 1302  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09713 21EF                        18            .byte	$18
09714 21F0                        18            .byte	$18
09715 21F1                        18            .byte	$18
09716 21F2                        18            .byte	$18
09717 21F3                        18            .byte	$18
09718 21F4                        18            .byte	$18
09719 21F5                        18            .byte	$18
09720 21F6                        FF            .byte	$FF
09721 21F7                        00            .byte	0
09722 21F8                        00            .byte	0
09723 21F9                        00            .byte	0
09724 21FA                        00            .byte	0
09725 21FB                        00            .byte	0
09726 21FC                        00            .byte	0
09727                                           ! 1303  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09728 21FD                        00            .byte	0
09729 21FE                        00            .byte	0
09730 21FF                        00            .byte	0
09731 2200                        00            .byte	0
09732 2201                        00            .byte	0
09733 2202                        00            .byte	0
09734 2203                        00            .byte	0
09735 2204                        FF            .byte	$FF
09736 2205                        18            .byte	$18
09737 2206                        18            .byte	$18
09738 2207                        18            .byte	$18
09739 2208                        18            .byte	$18
09740 2209                        18            .byte	$18
09741 220A                        18            .byte	$18
09742                                           ! 1304  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09743 220B                        18            .byte	$18
09744 220C                        18            .byte	$18
09745 220D                        18            .byte	$18
09746 220E                        18            .byte	$18
09747 220F                        18            .byte	$18
09748 2210                        18            .byte	$18
09749 2211                        18            .byte	$18
09750 2212                        1F            .byte	$1F
09751 2213                        18            .byte	$18
09752 2214                        18            .byte	$18
09753 2215                        18            .byte	$18
09754 2216                        18            .byte	$18
09755 2217                        18            .byte	$18
09756 2218                        18            .byte	$18
09757                                           ! 1305  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09758 2219                        00            .byte	0
09759 221A                        00            .byte	0
09760 221B                        00            .byte	0
09761 221C                        00            .byte	0
09762 221D                        00            .byte	0
09763 221E                        00            .byte	0
09764 221F                        00            .byte	0
09765 2220                        FF            .byte	$FF
09766 2221                        00            .byte	0
09767 2222                        00            .byte	0
09768 2223                        00            .byte	0
09769 2224                        00            .byte	0
09770 2225                        00            .byte	0
09771 2226                        00            .byte	0
09772                                           ! 1306  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09773 2227                        18            .byte	$18
09774 2228                        18            .byte	$18
09775 2229                        18            .byte	$18
09776 222A                        18            .byte	$18
09777 222B                        18            .byte	$18
09778 222C                        18            .byte	$18
09779 222D                        18            .byte	$18
09780 222E                        FF            .byte	$FF
09781 222F                        18            .byte	$18
09782 2230                        18            .byte	$18
09783 2231                        18            .byte	$18
09784 2232                        18            .byte	$18
09785 2233                        18            .byte	$18
09786 2234                        18            .byte	$18
09787                                           ! 1307  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09788 2235                        18            .byte	$18
09789 2236                        18            .byte	$18
09790 2237                        18            .byte	$18
09791 2238                        18            .byte	$18
09792 2239                        18            .byte	$18
09793 223A                        1F            .byte	$1F
09794 223B                        18            .byte	$18
09795 223C                        1F            .byte	$1F
09796 223D                        18            .byte	$18
09797 223E                        18            .byte	$18
09798 223F                        18            .byte	$18
09799 2240                        18            .byte	$18
09800 2241                        18            .byte	$18
09801                                           ! 1307 
09802 2242                        18            .byte	$18
09803                                           ! 1308  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09804 2243                        36            .byte	$36
09805 2244                        36            .byte	$36
09806 2245                        36            .byte	$36
09807 2246                        36            .byte	$36
09808 2247                        36            .byte	$36
09809 2248                        36            .byte	$36
09810 2249                        36            .byte	$36
09811 224A                        37            .byte	$37
09812 224B                        36            .byte	$36
09813 224C                        36            .byte	$36
09814 224D                        36            .byte	$36
09815 224E                        36            .byte	$36
09816 224F                        36            .byte	$36
09817 2250                        36            .byte	$36
09818                                           ! 1309  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09819 2251                        36            .byte	$36
09820 2252                        36            .byte	$36
09821 2253                        36            .byte	$36
09822 2254                        36            .byte	$36
09823 2255                        36            .byte	$36
09824 2256                        37            .byte	$37
09825 2257                        30            .byte	$30
09826 2258                        3F            .byte	$3F
09827 2259                        00            .byte	0
09828 225A                        00            .byte	0
09829 225B                        00            .byte	0
09830 225C                        00            .byte	0
09831 225D                        00            .byte	0
09832 225E                        00            .byte	0
09833                                           ! 1310  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09834 225F                        00            .byte	0
09835 2260                        00            .byte	0
09836 2261                        00            .byte	0
09837 2262                        00            .byte	0
09838 2263                        00            .byte	0
09839 2264                        3F            .byte	$3F
09840 2265                        30            .byte	$30
09841 2266                        37            .byte	$37
09842 2267                        36            .byte	$36
09843 2268                        36            .byte	$36
09844 2269                        36            .byte	$36
09845 226A                        36            .byte	$36
09846 226B                        36            .byte	$36
09847 226C                        36            .byte	$36
09848                                           ! 1311  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09849 226D                        36            .byte	$36
09850 226E                        36            .byte	$36
09851 226F                        36            .byte	$36
09852 2270                        36            .byte	$36
09853 2271                        36            .byte	$36
09854 2272                        F7            .byte	$F7
09855 2273                        00            .byte	0
09856 2274                        FF            .byte	$FF
09857 2275                        00            .byte	0
09858 2276                        00            .byte	0
09859 2277                        00            .byte	0
09860 2278                        00            .byte	0
09861 2279                        00            .byte	0
09862 227A                        00            .byte	0
09863                                           ! 1312  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09864 227B                        00            .byte	0
09865 227C                        00            .byte	0
09866 227D                        00            .byte	0
09867 227E                        00            .byte	0
09868 227F                        00            .byte	0
09869 2280                        FF            .byte	$FF
09870 2281                        00            .byte	0
09871 2282                        F7            .byte	$F7
09872 2283                        36            .byte	$36
09873 2284                        36            .byte	$36
09874 2285                        36            .byte	$36
09875 2286                        36            .byte	$36
09876 2287                        36            .byte	$36
09877 2288                        36            .byte	$36
09878                                           ! 1313  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09879 2289                        36            .byte	$36
09880 228A                        36            .byte	$36
09881 228B                        36            .byte	$36
09882 228C                        36            .byte	$36
09883 228D                        36            .byte	$36
09884 228E                        37            .byte	$37
09885 228F                        30            .byte	$30
09886 2290                        37            .byte	$37
09887 2291                        36            .byte	$36
09888 2292                        36            .byte	$36
09889 2293                        36            .byte	$36
09890 2294                        36            .byte	$36
09891 2295                        36            .byte	$36
09892 2296                        36            .byte	$36
09893                                           ! 1314  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09894 2297                        00            .byte	0
09895 2298                        00            .byte	0
09896 2299                        00            .byte	0
09897 229A                        00            .byte	0
09898 229B                        00            .byte	0
09899 229C                        FF            .byte	$FF
09900 229D                        00            .byte	0
09901 229E                        FF            .byte	$FF
09902 229F                        00            .byte	0
09903 22A0                        00            .byte	0
09904 22A1                        00            .byte	0
09905 22A2                        00            .byte	0
09906 22A3                        00            .byte	0
09907 22A4                        00            .byte	0
09908                                           ! 1315  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09909 22A5                        36            .byte	$36
09910 22A6                        36            .byte	$36
09911 22A7                        36            .byte	$36
09912 22A8                        36            .byte	$36
09913 22A9                        36            .byte	$36
09914 22AA                        F7            .byte	$F7
09915 22AB                        00            .byte	0
09916 22AC                        F7            .byte	$F7
09917 22AD                        36            .byte	$36
09918 22AE                        36            .byte	$36
09919 22AF                        36            .byte	$36
09920 22B0                        36            .byte	$36
09921 22B1                        36            .byte	$36
09922 22B2                        36            .byte	$36
09923                                           ! 1316  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09924 22B3                        18            .byte	$18
09925 22B4                        18            .byte	$18
09926 22B5                        18            .byte	$18
09927 22B6                        18            .byte	$18
09928 22B7                        18            .byte	$18
09929 22B8                        FF            .byte	$FF
09930 22B9                        00            .byte	0
09931 22BA                        FF            .byte	$FF
09932 22BB                        00            .byte	0
09933 22BC                        00            .byte	0
09934 22BD                        00            .byte	0
09935 22BE                        00            .byte	0
09936 22BF                        00            .byte	0
09937 22C0                        00            .byte	0
09938                                           ! 1317  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09939 22C1                        36            .byte	$36
09940 22C2                        36            .byte	$36
09941 22C3                        36            .byte	$36
09942 22C4                        36            .byte	$36
09943 22C5                        36            .byte	$36
09944 22C6                        36            .byte	$36
09945 22C7                        36            .byte	$36
09946 22C8                        FF            .byte	$FF
09947 22C9                        00            .byte	0
09948 22CA                        00            .byte	0
09949 22CB                        00            .byte	0
09950 22CC                        00            .byte	0
09951 22CD                        00            .byte	0
09952 22CE                        00            .byte	0
09953                                           ! 1318  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09954 22CF                        00            .byte	0
09955 22D0                        00            .byte	0
09956 22D1                        00            .byte	0
09957 22D2                        00            .byte	0
09958 22D3                        00            .byte	0
09959 22D4                        FF            .byte	$FF
09960 22D5                        00            .byte	0
09961 22D6                        FF            .byte	$FF
09962 22D7                        18            .byte	$18
09963 22D8                        18            .byte	$18
09964 22D9                        18            .byte	$18
09965 22DA                        18            .byte	$18
09966 22DB                        18            .byte	$18
09967 22DC                        18            .byte	$18
09968                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09969 22DD                        00            .byte	0
09970 22DE                        00            .byte	0
09971 22DF                        00            .byte	0
09972 22E0                        00            .byte	0
09973 22E1                        00            .byte	0
09974 22E2                        00            .byte	0
09975 22E3                        00            .byte	0
09976 22E4                        FF            .byte	$FF
09977 22E5                        36            .byte	$36
09978 22E6                        36            .byte	$36
09979 22E7                        36            .byte	$36
09980 22E8                        36            .byte	$36
09981 22E9                        36            .byte	$36
09982 22EA                        36            .byte	$36
09983                                           ! 1320  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09984 22EB                        36            .byte	$36
09985 22EC                        36            .byte	$36
09986 22ED                        36            .byte	$36
09987 22EE                        36            .byte	$36
09988 22EF                        36            .byte	$36
09989 22F0                        36            .byte	$36
09990 22F1                        36            .byte	$36
09991 22F2                        3F            .byte	$3F
09992 22F3                        00            .byte	0
09993 22F4                        00            .byte	0
09994 22F5                        00            .byte	0
09995 22F6                        00            .byte	0
09996 22F7                        00            .byte	0
09997 22F8                        00            .byte	0
09998                                           ! 1321  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09999 22F9                        18            .byte	$18
10000 22FA                        18            .byte	$18
10001 22FB                        18            .byte	$18
10002 22FC                        18            .byte	$18
10003 22FD                        18            .byte	$18
10004 22FE                        1F            .byte	$1F
10005 22FF                        18            .byte	$18
10006 2300                        1F            .byte	$1F
10007 2301                        00            .byte	0
10008 2302                        00            .byte	0
10009 2303                        00            .byte	0
10010 2304                        00            .byte	0
10011 2305                        00            .byte	0
10012 2306                        00            .byte	0
10013                                           ! 1322  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10014 2307                        00            .byte	0
10015 2308                        00            .byte	0
10016 2309                        00            .byte	0
10017 230A                        00            .byte	0
10018 230B                        00            .byte	0
10019 230C                        1F            .byte	$1F
10020 230D                        18            .byte	$18
10021 230E                        1F            .byte	$1F
10022 230F                        18            .byte	$18
10023 2310                        18            .byte	$18
10024 2311                        18            .byte	$18
10025 2312                        18            .byte	$18
10026 2313                        18            .byte	$18
10027 2314                        18            .byte	$18
10028                                           ! 1323  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10029 2315                        00            .byte	0
10030 2316                        00            .byte	0
10031 2317                        00            .byte	0
10032 2318                        00            .byte	0
10033 2319                        00            .byte	0
10034 231A                        00            .byte	0
10035 231B                        00            .byte	0
10036 231C                        3F            .byte	$3F
10037 231D                        36            .byte	$36
10038 231E                        36            .byte	$36
10039 231F                        36            .byte	$36
10040 2320                        36            .byte	$36
10041 2321                        36            .byte	$36
10042 2322                        36            .byte	$36
10043                                           ! 1324  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10044 2323                        36            .byte	$36
10045 2324                        36            .byte	$36
10046 2325                        36            .byte	$36
10047 2326                        36            .byte	$36
10048 2327                        36            .byte	$36
10049 2328                        36            .byte	$36
10050 2329                        36            .byte	$36
10051 232A                        FF            .byte	$FF
10052 232B                        36            .byte	$36
10053 232C                        36            .byte	$36
10054 232D                        36            .byte	$36
10055 232E                        36            .byte	$36
10056 232F                        36            .byte	$36
10057 2330                        36            .byte	$36
10058                                           ! 1325  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10059 2331                        18            .byte	$18
10060 2332                        18            .byte	$18
10061 2333                        18            .byte	$18
10062 2334                        18            .byte	$18
10063 2335                        18            .byte	$18
10064 2336                        FF            .byte	$FF
10065 2337                        18            .byte	$18
10066 2338                        FF            .byte	$FF
10067 2339                        18            .byte	$18
10068 233A                        18            .byte	$18
10069 233B                        18            .byte	$18
10070 233C                        18            .byte	$18
10071 233D                        18            .byte	$18
10072 233E                        18            .byte	$18
10073                                           ! 1326  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10074 233F                        18            .byte	$18
10075 2340                        18            .byte	$18
10076 2341                        18            .byte	$18
10077 2342                        18            .byte	$18
10078 2343                        18            .byte	$18
10079 2344                        18            .byte	$18
10080 2345                        18            .byte	$18
10081 2346                        F8            .byte	$F8
10082 2347                        00            .byte	0
10083 2348                        00            .byte	0
10084 2349                        00            .byte	0
10085 234A                        00            .byte	0
10086 234B                        00            .byte	0
10087 234C                        00            .byte	0
10088                                           ! 1327  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10089 234D                        00            .byte	0
10090 234E                        00            .byte	0
10091 234F                        00            .byte	0
10092 2350                        00            .byte	0
10093 2351                        00            .byte	0
10094 2352                        00            .byte	0
10095 2353                        00            .byte	0
10096 2354                        1F            .byte	$1F
10097 2355                        18            .byte	$18
10098 2356                        18            .byte	$18
10099 2357                        18            .byte	$18
10100 2358                        18            .byte	$18
10101 2359                        18            .byte	$18
10102 235A                        18            .byte	$18
10103                                           ! 1328  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10104 235B                        FF            .byte	$FF
10105 235C                        FF            .byte	$FF
10106 235D                        FF            .byte	$FF
10107 235E                        FF            .byte	$FF
10108 235F                        FF            .byte	$FF
10109 2360                        FF            .byte	$FF
10110 2361                        FF            .byte	$FF
10111 2362                        FF            .byte	$FF
10112 2363                        FF            .byte	$FF
10113 2364                        FF            .byte	$FF
10114 2365                        FF            .byte	$FF
10115 2366                        FF            .byte	$FF
10116 2367                        FF            .byte	$FF
10117 2368                        FF            .byte	$FF
10118                                           ! 1329  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10119 2369                        00            .byte	0
10120 236A                        00            .byte	0
10121 236B                        00            .byte	0
10122 236C                        00            .byte	0
10123 236D                        00            .byte	0
10124 236E                        00            .byte	0
10125 236F                        00            .byte	0
10126 2370                        FF            .byte	$FF
10127 2371                        FF            .byte	$FF
10128 2372                        FF            .byte	$FF
10129 2373                        FF            .byte	$FF
10130 2374                        FF            .byte	$FF
10131 2375                        FF            .byte	$FF
10132 2376                        FF            .byte	$FF
10133                                           ! 1330  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
10134 2377                        F0            .byte	$F0
10135 2378                        F0            .byte	$F0
10136 2379                        F0            .byte	$F0
10137 237A                        F0            .byte	$F0
10138 237B                        F0            .byte	$F0
10139 237C                        F0            .byte	$F0
10140 237D                        F0            .byte	$F0
10141 237E                        F0            .byte	$F0
10142 237F                        F0            .byte	$F0
10143 2380                        F0            .byte	$F0
10144 2381                        F0            .byte	$F0
10145 2382                        F0            .byte	$F0
10146 2383                        F0            .byte	$F0
10147 2384                        F0            .byte	$F0
10148                                           ! 1331  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
10149 2385                        0F            .byte	$F
10150 2386                        0F            .byte	$F
10151 2387                        0F            .byte	$F
10152 2388                        0F            .byte	$F
10153 2389                        0F            .byte	$F
10154 238A                        0F            .byte	$F
10155 238B                        0F            .byte	$F
10156 238C                        0F            .byte	$F
10157 238D                        0F            .byte	$F
10158 238E                        0F            .byte	$F
10159 238F                        0F            .byte	$F
10160 2390                        0F            .byte	$F
10161 2391                        0F            .byte	$F
10162 2392                        0F            .byte	$F
10163                                           ! 1332  0xff, 
10164 2393                        FF            .byte	$FF
10165                                           ! 1332 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10166 2394                        FF            .byte	$FF
10167 2395                        FF            .byte	$FF
10168 2396                        FF            .byte	$FF
10169 2397                        FF            .byte	$FF
10170 2398                        FF            .byte	$FF
10171 2399                        FF            .byte	$FF
10172 239A                        00            .byte	0
10173 239B                        00            .byte	0
10174 239C                        00            .byte	0
10175 239D                        00            .byte	0
10176 239E                        00            .byte	0
10177 239F                        00            .byte	0
10178 23A0                        00            .byte	0
10179                                           ! 1333  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
10180 23A1                        00            .byte	0
10181 23A2                        00            .byte	0
10182 23A3                        00            .byte	0
10183 23A4                        00            .byte	0
10184 23A5                        00            .byte	0
10185 23A6                        76            .byte	$76
10186 23A7                        DC            .byte	$DC
10187 23A8                        D8            .byte	$D8
10188 23A9                        D8            .byte	$D8
10189 23AA                        DC            .byte	$DC
10190 23AB                        76            .byte	$76
10191 23AC                        00            .byte	0
10192 23AD                        00            .byte	0
10193 23AE                        00            .byte	0
10194                                           ! 1334  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
10195 23AF                        00            .byte	0
10196 23B0                        00            .byte	0
10197 23B1                        00            .byte	0
10198 23B2                        00            .byte	0
10199 23B3                        7C            .byte	$7C
10200 23B4                        C6            .byte	$C6
10201 23B5                        FC            .byte	$FC
10202 23B6                        C6            .byte	$C6
10203 23B7                        C6            .byte	$C6
10204 23B8                        FC            .byte	$FC
10205 23B9                        C0            .byte	$C0
10206 23BA                        C0            .byte	$C0
10207 23BB                        40            .byte	$40
10208 23BC                        00            .byte	0
10209                                           ! 1335  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
10210 23BD                        00            .byte	0
10211 23BE                        00            .byte	0
10212 23BF                        FE            .byte	$FE
10213 23C0                        C6            .byte	$C6
10214 23C1                        C6            .byte	$C6
10215 23C2                        C0            .byte	$C0
10216 23C3                        C0            .byte	$C0
10217 23C4                        C0            .byte	$C0
10218 23C5                        C0            .byte	$C0
10219 23C6                        C0            .byte	$C0
10220 23C7                        C0            .byte	$C0
10221 23C8                        00            .byte	0
10222 23C9                        00            .byte	0
10223 23CA                        00            .byte	0
10224                                           ! 1336  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
10225 23CB                        00            .byte	0
10226 23CC                        00            .byte	0
10227 23CD                        00            .byte	0
10228 23CE                        00            .byte	0
10229 23CF                        FE            .byte	$FE
10230 23D0                        6C            .byte	$6C
10231 23D1                        6C            .byte	$6C
10232 23D2                        6C            .byte	$6C
10233 23D3                        6C            .byte	$6C
10234 23D4                        6C            .byte	$6C
10235 23D5                        6C            .byte	$6C
10236 23D6                        00            .byte	0
10237 23D7                        00            .byte	0
10238 23D8                        00            .byte	0
10239                                           ! 1337  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10240 23D9                        00            .byte	0
10241 23DA                        00            .byte	0
10242 23DB                        FE            .byte	$FE
10243 23DC                        C6            .byte	$C6
10244 23DD                        60            .byte	$60
10245 23DE                        30            .byte	$30
10246 23DF                        18            .byte	$18
10247 23E0                        30            .byte	$30
10248 23E1                        60            .byte	$60
10249 23E2                        C6            .byte	$C6
10250 23E3                        FE            .byte	$FE
10251 23E4                        00            .byte	0
10252 23E5                        00            .byte	0
10253 23E6                        00            .byte	0
10254                                           ! 1338  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10255 23E7                        00            .byte	0
10256 23E8                        00            .byte	0
10257 23E9                        00            .byte	0
10258 23EA                        00            .byte	0
10259 23EB                        00            .byte	0
10260 23EC                        7E            .byte	$7E
10261 23ED                        D8            .byte	$D8
10262 23EE                        D8            .byte	$D8
10263 23EF                        D8            .byte	$D8
10264 23F0                        D8            .byte	$D8
10265 23F1                        70            .byte	$70
10266 23F2                        00            .byte	0
10267 23F3                        00            .byte	0
10268 23F4                        00            .byte	0
10269                                           ! 1339  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10270 23F5                        00            .byte	0
10271 23F6                        00            .byte	0
10272 23F7                        00            .byte	0
10273 23F8                        00            .byte	0
10274 23F9                        66            .byte	$66
10275 23FA                        66            .byte	$66
10276 23FB                        66            .byte	$66
10277 23FC                        66            .byte	$66
10278 23FD                        7C            .byte	$7C
10279 23FE                        60            .byte	$60
10280 23FF                        60            .byte	$60
10281 2400                        C0            .byte	$C0
10282 2401                        00            .byte	0
10283 2402                        00            .byte	0
10284                                           ! 1340  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10285 2403                        00            .byte	0
10286 2404                        00            .byte	0
10287 2405                        00            .byte	0
10288 2406                        00            .byte	0
10289 2407                        76            .byte	$76
10290 2408                        DC            .byte	$DC
10291 2409                        18            .byte	$18
10292 240A                        18            .byte	$18
10293 240B                        18            .byte	$18
10294 240C                        18            .byte	$18
10295 240D                        18            .byte	$18
10296 240E                        00            .byte	0
10297 240F                        00            .byte	0
10298 2410                        00            .byte	0
10299                                           ! 1341  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10300 2411                        00            .byte	0
10301 2412                        00            .byte	0
10302 2413                        7E            .byte	$7E
10303 2414                        18            .byte	$18
10304 2415                        3C            .byte	$3C
10305 2416                        66            .byte	$66
10306 2417                        66            .byte	$66
10307 2418                        66            .byte	$66
10308 2419                        3C            .byte	$3C
10309 241A                        18            .byte	$18
10310 241B                        7E            .byte	$7E
10311 241C                        00            .byte	0
10312 241D                        00            .byte	0
10313 241E                        00            .byte	0
10314                                           ! 1342  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10315 241F                        00            .byte	0
10316 2420                        00            .byte	0
10317 2421                        38            .byte	$38
10318 2422                        6C            .byte	$6C
10319 2423                        C6            .byte	$C6
10320 2424                        C6            .byte	$C6
10321 2425                        FE            .byte	$FE
10322 2426                        C6            .byte	$C6
10323 2427                        C6            .byte	$C6
10324 2428                        6C            .byte	$6C
10325 2429                        38            .byte	$38
10326 242A                        00            .byte	0
10327 242B                        00            .byte	0
10328 242C                        00            .byte	0
10329                                           ! 1343  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10330 242D                        00            .byte	0
10331 242E                        00            .byte	0
10332 242F                        38            .byte	$38
10333 2430                        6C            .byte	$6C
10334 2431                        C6            .byte	$C6
10335 2432                        C6            .byte	$C6
10336 2433                        C6            .byte	$C6
10337 2434                        6C            .byte	$6C
10338 2435                        6C            .byte	$6C
10339 2436                        6C            .byte	$6C
10340 2437                        EE            .byte	$EE
10341 2438                        00            .byte	0
10342 2439                        00            .byte	0
10343 243A                        00            .byte	0
10344                                           ! 1344  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10345 243B                        00            .byte	0
10346 243C                        00            .byte	0
10347 243D                        1E            .byte	$1E
10348 243E                        30            .byte	$30
10349 243F                        18            .byte	$18
10350 2440                        0C            .byte	$C
10351 2441                        3E            .byte	$3E
10352 2442                        66            .byte	$66
10353 2443                        66            .byte	$66
10354 2444                        66            .byte	$66
10355 2445                        3C            .byte	$3C
10356 2446                        00            .byte	0
10357 2447                        00            .byte	0
10358 2448                        00            .byte	0
10359                                           ! 1345  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10360 2449                        00            .byte	0
10361 244A                        00            .byte	0
10362 244B                        00            .byte	0
10363 244C                        00            .byte	0
10364 244D                        00            .byte	0
10365 244E                        7E            .byte	$7E
10366 244F                        DB            .byte	$DB
10367 2450                        DB            .byte	$DB
10368 2451                        7E            .byte	$7E
10369 2452                        00            .byte	0
10370 2453                        00            .byte	0
10371 2454                        00            .byte	0
10372 2455                        00            .byte	0
10373 2456                        00            .byte	0
10374                                           ! 1346  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10375 2457                        00            .byte	0
10376 2458                        00            .byte	0
10377 2459                        03            .byte	3
10378 245A                        06            .byte	6
10379 245B                        7E            .byte	$7E
10380 245C                        DB            .byte	$DB
10381 245D                        DB            .byte	$DB
10382 245E                        F3            .byte	$F3
10383 245F                        7E            .byte	$7E
10384 2460                        60            .byte	$60
10385 2461                        C0            .byte	$C0
10386 2462                        00            .byte	0
10387 2463                        00            .byte	0
10388 2464                        00            .byte	0
10389                                           ! 1347  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10390 2465                        00            .byte	0
10391 2466                        00            .byte	0
10392 2467                        1C            .byte	$1C
10393 2468                        30            .byte	$30
10394 2469                        60            .byte	$60
10395 246A                        60            .byte	$60
10396 246B                        7C            .byte	$7C
10397 246C                        60            .byte	$60
10398 246D                        60            .byte	$60
10399 246E                        30            .byte	$30
10400 246F                        1C            .byte	$1C
10401 2470                        00            .byte	0
10402 2471                        00            .byte	0
10403 2472                        00            .byte	0
10404                                           ! 1348  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10405 2473                        00            .byte	0
10406 2474                        00            .byte	0
10407 2475                        00            .byte	0
10408 2476                        7C            .byte	$7C
10409 2477                        C6            .byte	$C6
10410 2478                        C6            .byte	$C6
10411 2479                        C6            .byte	$C6
10412 247A                        C6            .byte	$C6
10413 247B                        C6            .byte	$C6
10414 247C                        C6            .byte	$C6
10415 247D                        C6            .byte	$C6
10416 247E                        00            .byte	0
10417 247F                        00            .byte	0
10418 2480                        00            .byte	0
10419                                           ! 1349  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10420 2481                        00            .byte	0
10421 2482                        00            .byte	0
10422 2483                        00            .byte	0
10423 2484                        FE            .byte	$FE
10424 2485                        00            .byte	0
10425 2486                        00            .byte	0
10426 2487                        FE            .byte	$FE
10427 2488                        00            .byte	0
10428 2489                        00            .byte	0
10429 248A                        FE            .byte	$FE
10430 248B                        00            .byte	0
10431 248C                        00            .byte	0
10432 248D                        00            .byte	0
10433 248E                        00            .byte	0
10434                                           ! 1350  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10435 248F                        00            .byte	0
10436 2490                        00            .byte	0
10437 2491                        00            .byte	0
10438 2492                        18            .byte	$18
10439 2493                        18            .byte	$18
10440 2494                        7E            .byte	$7E
10441 2495                        18            .byte	$18
10442 2496                        18            .byte	$18
10443 2497                        00            .byte	0
10444 2498                        00            .byte	0
10445 2499                        FF            .byte	$FF
10446 249A                        00            .byte	0
10447 249B                        00            .byte	0
10448 249C                        00            .byte	0
10449                                           ! 1351  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10450 249D                        00            .byte	0
10451 249E                        00            .byte	0
10452 249F                        30            .byte	$30
10453 24A0                        18            .byte	$18
10454 24A1                        0C            .byte	$C
10455 24A2                        06            .byte	6
10456 24A3                        0C            .byte	$C
10457 24A4                        18            .byte	$18
10458 24A5                        30            .byte	$30
10459 24A6                        00            .byte	0
10460 24A7                        7E            .byte	$7E
10461 24A8                        00            .byte	0
10462 24A9                        00            .byte	0
10463 24AA                        00            .byte	0
10464                                           ! 1352  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10465 24AB                        00            .byte	0
10466 24AC                        00            .byte	0
10467 24AD                        0C            .byte	$C
10468 24AE                        18            .byte	$18
10469 24AF                        30            .byte	$30
10470 24B0                        60            .byte	$60
10471 24B1                        30            .byte	$30
10472 24B2                        18            .byte	$18
10473 24B3                        0C            .byte	$C
10474 24B4                        00            .byte	0
10475 24B5                        7E            .byte	$7E
10476 24B6                        00            .byte	0
10477 24B7                        00            .byte	0
10478 24B8                        00            .byte	0
10479                                           ! 1353  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10480 24B9                        00            .byte	0
10481 24BA                        00            .byte	0
10482 24BB                        0E            .byte	$E
10483 24BC                        1B            .byte	$1B
10484 24BD                        1B            .byte	$1B
10485 24BE                        18            .byte	$18
10486 24BF                        18            .byte	$18
10487 24C0                        18            .byte	$18
10488 24C1                        18            .byte	$18
10489 24C2                        18            .byte	$18
10490 24C3                        18            .byte	$18
10491 24C4                        18            .byte	$18
10492 24C5                        18            .byte	$18
10493 24C6                        18            .byte	$18
10494                                           ! 1354  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10495 24C7                        18            .byte	$18
10496 24C8                        18            .byte	$18
10497 24C9                        18            .byte	$18
10498 24CA                        18            .byte	$18
10499 24CB                        18            .byte	$18
10500 24CC                        18            .byte	$18
10501 24CD                        18            .byte	$18
10502 24CE                        18            .byte	$18
10503 24CF                        D8            .byte	$D8
10504 24D0                        D8            .byte	$D8
10505 24D1                        70            .byte	$70
10506 24D2                        00            .byte	0
10507 24D3                        00            .byte	0
10508 24D4                        00            .byte	0
10509                                           ! 1355  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10510 24D5                        00            .byte	0
10511 24D6                        00            .byte	0
10512 24D7                        00            .byte	0
10513 24D8                        18            .byte	$18
10514 24D9                        18            .byte	$18
10515 24DA                        00            .byte	0
10516 24DB                        7E            .byte	$7E
10517 24DC                        00            .byte	0
10518 24DD                        18            .byte	$18
10519 24DE                        18            .byte	$18
10520 24DF                        00            .byte	0
10521 24E0                        00            .byte	0
10522 24E1                        00            .byte	0
10523 24E2                        00            .byte	0
10524                                           ! 1356  0x00, 0x00, 0x
10525 24E3                        00            .byte	0
10526 24E4                        00            .byte	0
10527                                           ! 1356 00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10528 24E5                        00            .byte	0
10529 24E6                        00            .byte	0
10530 24E7                        76            .byte	$76
10531 24E8                        DC            .byte	$DC
10532 24E9                        00            .byte	0
10533 24EA                        76            .byte	$76
10534 24EB                        DC            .byte	$DC
10535 24EC                        00            .byte	0
10536 24ED                        00            .byte	0
10537 24EE                        00            .byte	0
10538 24EF                        00            .byte	0
10539 24F0                        00            .byte	0
10540                                           ! 1357  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10541 24F1                        00            .byte	0
10542 24F2                        38            .byte	$38
10543 24F3                        6C            .byte	$6C
10544 24F4                        6C            .byte	$6C
10545 24F5                        38            .byte	$38
10546 24F6                        00            .byte	0
10547 24F7                        00            .byte	0
10548 24F8                        00            .byte	0
10549 24F9                        00            .byte	0
10550 24FA                        00            .byte	0
10551 24FB                        00            .byte	0
10552 24FC                        00            .byte	0
10553 24FD                        00            .byte	0
10554 24FE                        00            .byte	0
10555                                           ! 1358  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10556 24FF                        00            .byte	0
10557 2500                        00            .byte	0
10558 2501                        00            .byte	0
10559 2502                        00            .byte	0
10560 2503                        00            .byte	0
10561 2504                        00            .byte	0
10562 2505                        18            .byte	$18
10563 2506                        18            .byte	$18
10564 2507                        00            .byte	0
10565 2508                        00            .byte	0
10566 2509                        00            .byte	0
10567 250A                        00            .byte	0
10568 250B                        00            .byte	0
10569 250C                        00            .byte	0
10570                                           ! 1359  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10571 250D                        00            .byte	0
10572 250E                        00            .byte	0
10573 250F                        00            .byte	0
10574 2510                        00            .byte	0
10575 2511                        00            .byte	0
10576 2512                        00            .byte	0
10577 2513                        00            .byte	0
10578 2514                        18            .byte	$18
10579 2515                        00            .byte	0
10580 2516                        00            .byte	0
10581 2517                        00            .byte	0
10582 2518                        00            .byte	0
10583 2519                        00            .byte	0
10584 251A                        00            .byte	0
10585                                           ! 1360  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10586 251B                        00            .byte	0
10587 251C                        0F            .byte	$F
10588 251D                        0C            .byte	$C
10589 251E                        0C            .byte	$C
10590 251F                        0C            .byte	$C
10591 2520                        0C            .byte	$C
10592 2521                        0C            .byte	$C
10593 2522                        EC            .byte	$EC
10594 2523                        6C            .byte	$6C
10595 2524                        3C            .byte	$3C
10596 2525                        1C            .byte	$1C
10597 2526                        00            .byte	0
10598 2527                        00            .byte	0
10599 2528                        00            .byte	0
10600                                           ! 1361  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10601 2529                        00            .byte	0
10602 252A                        D8            .byte	$D8
10603 252B                        6C            .byte	$6C
10604 252C                        6C            .byte	$6C
10605 252D                        6C            .byte	$6C
10606 252E                        6C            .byte	$6C
10607 252F                        6C            .byte	$6C
10608 2530                        00            .byte	0
10609 2531                        00            .byte	0
10610 2532                        00            .byte	0
10611 2533                        00            .byte	0
10612 2534                        00            .byte	0
10613 2535                        00            .byte	0
10614 2536                        00            .byte	0
10615                                           ! 1362  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10616 2537                        00            .byte	0
10617 2538                        70            .byte	$70
10618 2539                        D8            .byte	$D8
10619 253A                        30            .byte	$30
10620 253B                        60            .byte	$60
10621 253C                        C8            .byte	$C8
10622 253D                        F8            .byte	$F8
10623 253E                        00            .byte	0
10624 253F                        00            .byte	0
10625 2540                        00            .byte	0
10626 2541                        00            .byte	0
10627 2542                        00            .byte	0
10628 2543                        00            .byte	0
10629 2544                        00            .byte	0
10630                                           ! 1363  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10631 2545                        00            .byte	0
10632 2546                        00            .byte	0
10633 2547                        00            .byte	0
10634 2548                        00            .byte	0
10635 2549                        7C            .byte	$7C
10636 254A                        7C            .byte	$7C
10637 254B                        7C            .byte	$7C
10638 254C                        7C            .byte	$7C
10639 254D                        7C            .byte	$7C
10640 254E                        7C            .byte	$7C
10641 254F                        00            .byte	0
10642 2550                        00            .byte	0
10643 2551                        00            .byte	0
10644 2552                        00            .byte	0
10645                                           ! 1364  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10646 2553                        00            .byte	0
10647 2554                        00            .byte	0
10648 2555                        00            .byte	0
10649 2556                        00            .byte	0
10650 2557                        00            .byte	0
10651 2558                        00            .byte	0
10652 2559                        00            .byte	0
10653 255A                        00            .byte	0
10654 255B                        00            .byte	0
10655 255C                        00            .byte	0
10656 255D                        00            .byte	0
10657 255E                        00            .byte	0
10658 255F                        00            .byte	0
10659                                           ! 1365 };
10660 2560                        00            .byte	0
10661                                           !BCC_EOS
10662                                           ! 1366 static Bit8u vgafont16[256*16]=
10663                                           ! 1367 {
10664                       00002561            _vgafont16:
10665                                           ! 1368  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10666 2561                        00            .byte	0
10667 2562                        00            .byte	0
10668 2563                        00            .byte	0
10669 2564                        00            .byte	0
10670 2565                        00            .byte	0
10671 2566                        00            .byte	0
10672 2567                        00            .byte	0
10673 2568                        00            .byte	0
10674 2569                        00            .byte	0
10675 256A                        00            .byte	0
10676 256B                        00            .byte	0
10677 256C                        00            .byte	0
10678 256D                        00            .byte	0
10679 256E                        00            .byte	0
10680 256F                        00            .byte	0
10681 2570                        00            .byte	0
10682                                           ! 1369  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10683 2571                        00            .byte	0
10684 2572                        00            .byte	0
10685 2573                        7E            .byte	$7E
10686 2574                        81            .byte	$81
10687 2575                        A5            .byte	$A5
10688 2576                        81            .byte	$81
10689 2577                        81            .byte	$81
10690 2578                        BD            .byte	$BD
10691 2579                        99            .byte	$99
10692 257A                        81            .byte	$81
10693 257B                        81            .byte	$81
10694 257C                        7E            .byte	$7E
10695 257D                        00            .byte	0
10696 257E                        00            .byte	0
10697 257F                        00            .byte	0
10698 2580                        00            .byte	0
10699                                           ! 1370  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10700 2581                        00            .byte	0
10701 2582                        00            .byte	0
10702 2583                        7E            .byte	$7E
10703 2584                        FF            .byte	$FF
10704 2585                        DB            .byte	$DB
10705 2586                        FF            .byte	$FF
10706 2587                        FF            .byte	$FF
10707 2588                        C3            .byte	$C3
10708 2589                        E7            .byte	$E7
10709 258A                        FF            .byte	$FF
10710 258B                        FF            .byte	$FF
10711 258C                        7E            .byte	$7E
10712 258D                        00            .byte	0
10713 258E                        00            .byte	0
10714 258F                        00            .byte	0
10715 2590                        00            .byte	0
10716                                           ! 1371  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10717 2591                        00            .byte	0
10718 2592                        00            .byte	0
10719 2593                        00            .byte	0
10720 2594                        00            .byte	0
10721 2595                        6C            .byte	$6C
10722 2596                        FE            .byte	$FE
10723 2597                        FE            .byte	$FE
10724 2598                        FE            .byte	$FE
10725 2599                        FE            .byte	$FE
10726 259A                        7C            .byte	$7C
10727 259B                        38            .byte	$38
10728 259C                        10            .byte	$10
10729 259D                        00            .byte	0
10730 259E                        00            .byte	0
10731 259F                        00            .byte	0
10732 25A0                        00            .byte	0
10733                                           ! 1372  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10734 25A1                        00            .byte	0
10735 25A2                        00            .byte	0
10736 25A3                        00            .byte	0
10737 25A4                        00            .byte	0
10738 25A5                        10            .byte	$10
10739 25A6                        38            .byte	$38
10740 25A7                        7C            .byte	$7C
10741 25A8                        FE            .byte	$FE
10742 25A9                        7C            .byte	$7C
10743 25AA                        38            .byte	$38
10744 25AB                        10            .byte	$10
10745 25AC                        00            .byte	0
10746 25AD                        00            .byte	0
10747 25AE                        00            .byte	0
10748 25AF                        00            .byte	0
10749 25B0                        00            .byte	0
10750                                           ! 1373  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10751 25B1                        00            .byte	0
10752 25B2                        00            .byte	0
10753 25B3                        00            .byte	0
10754 25B4                        18            .byte	$18
10755 25B5                        3C            .byte	$3C
10756 25B6                        3C            .byte	$3C
10757 25B7                        E7            .byte	$E7
10758 25B8                        E7            .byte	$E7
10759 25B9                        E7            .byte	$E7
10760 25BA                        18            .byte	$18
10761 25BB                        18            .byte	$18
10762 25BC                        3C            .byte	$3C
10763 25BD                        00            .byte	0
10764 25BE                        00            .byte	0
10765 25BF                        00            .byte	0
10766 25C0                        00            .byte	0
10767                                           ! 1374  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10768 25C1                        00            .byte	0
10769 25C2                        00            .byte	0
10770 25C3                        00            .byte	0
10771 25C4                        18            .byte	$18
10772 25C5                        3C            .byte	$3C
10773 25C6                        7E            .byte	$7E
10774 25C7                        FF            .byte	$FF
10775 25C8                        FF            .byte	$FF
10776 25C9                        7E            .byte	$7E
10777 25CA                        18            .byte	$18
10778 25CB                        18            .byte	$18
10779 25CC                        3C            .byte	$3C
10780 25CD                        00            .byte	0
10781 25CE                        00            .byte	0
10782 25CF                        00            .byte	0
10783 25D0                        00            .byte	0
10784                                           ! 1375  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10785 25D1                        00            .byte	0
10786 25D2                        00            .byte	0
10787 25D3                        00            .byte	0
10788 25D4                        00            .byte	0
10789 25D5                        00            .byte	0
10790 25D6                        00            .byte	0
10791 25D7                        18            .byte	$18
10792 25D8                        3C            .byte	$3C
10793 25D9                        3C            .byte	$3C
10794 25DA                        18            .byte	$18
10795 25DB                        00            .byte	0
10796 25DC                        00            .byte	0
10797 25DD                        00            .byte	0
10798 25DE                        00            .byte	0
10799 25DF                        00            .byte	0
10800 25E0                        00            .byte	0
10801                                           ! 1376  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10802 25E1                        FF            .byte	$FF
10803 25E2                        FF            .byte	$FF
10804 25E3                        FF            .byte	$FF
10805 25E4                        FF            .byte	$FF
10806 25E5                        FF            .byte	$FF
10807 25E6                        FF            .byte	$FF
10808 25E7                        E7            .byte	$E7
10809 25E8                        C3            .byte	$C3
10810 25E9                        C3            .byte	$C3
10811 25EA                        E7            .byte	$E7
10812 25EB                        FF            .byte	$FF
10813 25EC                        FF            .byte	$FF
10814 25ED                        FF            .byte	$FF
10815 25EE                        FF            .byte	$FF
10816 25EF                        FF            .byte	$FF
10817 25F0                        FF            .byte	$FF
10818                                           ! 1377  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10819 25F1                        00            .byte	0
10820 25F2                        00            .byte	0
10821 25F3                        00            .byte	0
10822 25F4                        00            .byte	0
10823 25F5                        00            .byte	0
10824 25F6                        3C            .byte	$3C
10825 25F7                        66            .byte	$66
10826 25F8                        42            .byte	$42
10827 25F9                        42            .byte	$42
10828 25FA                        66            .byte	$66
10829 25FB                        3C            .byte	$3C
10830 25FC                        00            .byte	0
10831 25FD                        00            .byte	0
10832 25FE                        00            .byte	0
10833 25FF                        00            .byte	0
10834 2600                        00            .byte	0
10835                                           ! 1378  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10836 2601                        FF            .byte	$FF
10837 2602                        FF            .byte	$FF
10838 2603                        FF            .byte	$FF
10839 2604                        FF            .byte	$FF
10840 2605                        FF            .byte	$FF
10841 2606                        C3            .byte	$C3
10842 2607                        99            .byte	$99
10843 2608                        BD            .byte	$BD
10844 2609                        BD            .byte	$BD
10845 260A                        99            .byte	$99
10846 260B                        C3            .byte	$C3
10847 260C                        FF            .byte	$FF
10848 260D                        FF            .byte	$FF
10849 260E                        FF            .byte	$FF
10850 260F                        FF            .byte	$FF
10851 2610                        FF            .byte	$FF
10852                                           ! 1379  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10853 2611                        00            .byte	0
10854 2612                        00            .byte	0
10855 2613                        1E            .byte	$1E
10856 2614                        0E            .byte	$E
10857 2615                        1A            .byte	$1A
10858 2616                        32            .byte	$32
10859 2617                        78            .byte	$78
10860 2618                        CC            .byte	$CC
10861 2619                        CC            .byte	$CC
10862 261A                        CC            .byte	$CC
10863 261B                        CC            .byte	$CC
10864 261C                        78            .byte	$78
10865 261D                        00            .byte	0
10866 261E                        00            .byte	0
10867 261F                        00            .byte	0
10868 2620                        00            .byte	0
10869                                           ! 1380  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10870 2621                        00            .byte	0
10871 2622                        00            .byte	0
10872 2623                        3C            .byte	$3C
10873 2624                        66            .byte	$66
10874 2625                        66            .byte	$66
10875 2626                        66            .byte	$66
10876 2627                        66            .byte	$66
10877 2628                        3C            .byte	$3C
10878 2629                        18            .byte	$18
10879 262A                        7E            .byte	$7E
10880 262B                        18            .byte	$18
10881 262C                        18            .byte	$18
10882 262D                        00            .byte	0
10883 262E                        00            .byte	0
10884 262F                        00            .byte	0
10885 2630                        00            .byte	0
10886                                           ! 1381  
10887                                           ! 1381 0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10888 2631                        00            .byte	0
10889 2632                        00            .byte	0
10890 2633                        3F            .byte	$3F
10891 2634                        33            .byte	$33
10892 2635                        3F            .byte	$3F
10893 2636                        30            .byte	$30
10894 2637                        30            .byte	$30
10895 2638                        30            .byte	$30
10896 2639                        30            .byte	$30
10897 263A                        70            .byte	$70
10898 263B                        F0            .byte	$F0
10899 263C                        E0            .byte	$E0
10900 263D                        00            .byte	0
10901 263E                        00            .byte	0
10902 263F                        00            .byte	0
10903 2640                        00            .byte	0
10904                                           ! 1382  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10905 2641                        00            .byte	0
10906 2642                        00            .byte	0
10907 2643                        7F            .byte	$7F
10908 2644                        63            .byte	$63
10909 2645                        7F            .byte	$7F
10910 2646                        63            .byte	$63
10911 2647                        63            .byte	$63
10912 2648                        63            .byte	$63
10913 2649                        63            .byte	$63
10914 264A                        67            .byte	$67
10915 264B                        E7            .byte	$E7
10916 264C                        E6            .byte	$E6
10917 264D                        C0            .byte	$C0
10918 264E                        00            .byte	0
10919 264F                        00            .byte	0
10920 2650                        00            .byte	0
10921                                           ! 1383  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10922 2651                        00            .byte	0
10923 2652                        00            .byte	0
10924 2653                        00            .byte	0
10925 2654                        18            .byte	$18
10926 2655                        18            .byte	$18
10927 2656                        DB            .byte	$DB
10928 2657                        3C            .byte	$3C
10929 2658                        E7            .byte	$E7
10930 2659                        3C            .byte	$3C
10931 265A                        DB            .byte	$DB
10932 265B                        18            .byte	$18
10933 265C                        18            .byte	$18
10934 265D                        00            .byte	0
10935 265E                        00            .byte	0
10936 265F                        00            .byte	0
10937 2660                        00            .byte	0
10938                                           ! 1384  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10939 2661                        00            .byte	0
10940 2662                        80            .byte	$80
10941 2663                        C0            .byte	$C0
10942 2664                        E0            .byte	$E0
10943 2665                        F0            .byte	$F0
10944 2666                        F8            .byte	$F8
10945 2667                        FE            .byte	$FE
10946 2668                        F8            .byte	$F8
10947 2669                        F0            .byte	$F0
10948 266A                        E0            .byte	$E0
10949 266B                        C0            .byte	$C0
10950 266C                        80            .byte	$80
10951 266D                        00            .byte	0
10952 266E                        00            .byte	0
10953 266F                        00            .byte	0
10954 2670                        00            .byte	0
10955                                           ! 1385  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10956 2671                        00            .byte	0
10957 2672                        02            .byte	2
10958 2673                        06            .byte	6
10959 2674                        0E            .byte	$E
10960 2675                        1E            .byte	$1E
10961 2676                        3E            .byte	$3E
10962 2677                        FE            .byte	$FE
10963 2678                        3E            .byte	$3E
10964 2679                        1E            .byte	$1E
10965 267A                        0E            .byte	$E
10966 267B                        06            .byte	6
10967 267C                        02            .byte	2
10968 267D                        00            .byte	0
10969 267E                        00            .byte	0
10970 267F                        00            .byte	0
10971 2680                        00            .byte	0
10972                                           ! 1386  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
10973 2681                        00            .byte	0
10974 2682                        00            .byte	0
10975 2683                        18            .byte	$18
10976 2684                        3C            .byte	$3C
10977 2685                        7E            .byte	$7E
10978 2686                        18            .byte	$18
10979 2687                        18            .byte	$18
10980 2688                        18            .byte	$18
10981 2689                        7E            .byte	$7E
10982 268A                        3C            .byte	$3C
10983 268B                        18            .byte	$18
10984 268C                        00            .byte	0
10985 268D                        00            .byte	0
10986 268E                        00            .byte	0
10987 268F                        00            .byte	0
10988 2690                        00            .byte	0
10989                                           ! 1387  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
10990 2691                        00            .byte	0
10991 2692                        00            .byte	0
10992 2693                        66            .byte	$66
10993 2694                        66            .byte	$66
10994 2695                        66            .byte	$66
10995 2696                        66            .byte	$66
10996 2697                        66            .byte	$66
10997 2698                        66            .byte	$66
10998 2699                        66            .byte	$66
10999 269A                        00            .byte	0
11000 269B                        66            .byte	$66
11001 269C                        66            .byte	$66
11002 269D                        00            .byte	0
11003 269E                        00            .byte	0
11004 269F                        00            .byte	0
11005 26A0                        00            .byte	0
11006                                           ! 1388  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
11007 26A1                        00            .byte	0
11008 26A2                        00            .byte	0
11009 26A3                        7F            .byte	$7F
11010 26A4                        DB            .byte	$DB
11011 26A5                        DB            .byte	$DB
11012 26A6                        DB            .byte	$DB
11013 26A7                        7B            .byte	$7B
11014 26A8                        1B            .byte	$1B
11015 26A9                        1B            .byte	$1B
11016 26AA                        1B            .byte	$1B
11017 26AB                        1B            .byte	$1B
11018 26AC                        1B            .byte	$1B
11019 26AD                        00            .byte	0
11020 26AE                        00            .byte	0
11021 26AF                        00            .byte	0
11022 26B0                        00            .byte	0
11023                                           ! 1389  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11024 26B1                        00            .byte	0
11025 26B2                        7C            .byte	$7C
11026 26B3                        C6            .byte	$C6
11027 26B4                        60            .byte	$60
11028 26B5                        38            .byte	$38
11029 26B6                        6C            .byte	$6C
11030 26B7                        C6            .byte	$C6
11031 26B8                        C6            .byte	$C6
11032 26B9                        6C            .byte	$6C
11033 26BA                        38            .byte	$38
11034 26BB                        0C            .byte	$C
11035 26BC                        C6            .byte	$C6
11036 26BD                        7C            .byte	$7C
11037 26BE                        00            .byte	0
11038 26BF                        00            .byte	0
11039 26C0                        00            .byte	0
11040                                           ! 1390  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
11041 26C1                        00            .byte	0
11042 26C2                        00            .byte	0
11043 26C3                        00            .byte	0
11044 26C4                        00            .byte	0
11045 26C5                        00            .byte	0
11046 26C6                        00            .byte	0
11047 26C7                        00            .byte	0
11048 26C8                        00            .byte	0
11049 26C9                        FE            .byte	$FE
11050 26CA                        FE            .byte	$FE
11051 26CB                        FE            .byte	$FE
11052 26CC                        FE            .byte	$FE
11053 26CD                        00            .byte	0
11054 26CE                        00            .byte	0
11055 26CF                        00            .byte	0
11056 26D0                        00            .byte	0
11057                                           ! 1391  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11058 26D1                        00            .byte	0
11059 26D2                        00            .byte	0
11060 26D3                        18            .byte	$18
11061 26D4                        3C            .byte	$3C
11062 26D5                        7E            .byte	$7E
11063 26D6                        18            .byte	$18
11064 26D7                        18            .byte	$18
11065 26D8                        18            .byte	$18
11066 26D9                        7E            .byte	$7E
11067 26DA                        3C            .byte	$3C
11068 26DB                        18            .byte	$18
11069 26DC                        7E            .byte	$7E
11070 26DD                        00            .byte	0
11071 26DE                        00            .byte	0
11072 26DF                        00            .byte	0
11073 26E0                        00            .byte	0
11074                                           ! 1392  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11075 26E1                        00            .byte	0
11076 26E2                        00            .byte	0
11077 26E3                        18            .byte	$18
11078 26E4                        3C            .byte	$3C
11079 26E5                        7E            .byte	$7E
11080 26E6                        18            .byte	$18
11081 26E7                        18            .byte	$18
11082 26E8                        18            .byte	$18
11083 26E9                        18            .byte	$18
11084 26EA                        18            .byte	$18
11085 26EB                        18            .byte	$18
11086 26EC                        18            .byte	$18
11087 26ED                        00            .byte	0
11088 26EE                        00            .byte	0
11089 26EF                        00            .byte	0
11090 26F0                        00            .byte	0
11091                                           ! 1393  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11092 26F1                        00            .byte	0
11093 26F2                        00            .byte	0
11094 26F3                        18            .byte	$18
11095 26F4                        18            .byte	$18
11096 26F5                        18            .byte	$18
11097 26F6                        18            .byte	$18
11098 26F7                        18            .byte	$18
11099 26F8                        18            .byte	$18
11100 26F9                        18            .byte	$18
11101 26FA                        7E            .byte	$7E
11102 26FB                        3C            .byte	$3C
11103 26FC                        18            .byte	$18
11104 26FD                        00            .byte	0
11105 26FE                        00            .byte	0
11106 26FF                        00            .byte	0
11107 2700                        00            .byte	0
11108                                           ! 1394  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11109 2701                        00            .byte	0
11110 2702                        00            .byte	0
11111 2703                        00            .byte	0
11112 2704                        00            .byte	0
11113 2705                        00            .byte	0
11114 2706                        18            .byte	$18
11115 2707                        0C            .byte	$C
11116 2708                        FE            .byte	$FE
11117 2709                        0C            .byte	$C
11118 270A                        18            .byte	$18
11119 270B                        00            .byte	0
11120 270C                        00            .byte	0
11121 270D                        00            .byte	0
11122 270E                        00            .byte	0
11123 270F                        00            .byte	0
11124 2710                        00            .byte	0
11125                                           ! 1395  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11126 2711                        00            .byte	0
11127 2712                        00            .byte	0
11128 2713                        00            .byte	0
11129 2714                        00            .byte	0
11130 2715                        00            .byte	0
11131 2716                        30            .byte	$30
11132 2717                        60            .byte	$60
11133 2718                        FE            .byte	$FE
11134 2719                        60            .byte	$60
11135 271A                        30            .byte	$30
11136 271B                        00            .byte	0
11137 271C                        00            .byte	0
11138 271D                        00            .byte	0
11139 271E                        00            .byte	0
11140 271F                        00            .byte	0
11141 2720                        00            .byte	0
11142                                           ! 1396  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11143 2721                        00            .byte	0
11144 2722                        00            .byte	0
11145 2723                        00            .byte	0
11146 2724                        00            .byte	0
11147 2725                        00            .byte	0
11148 2726                        00            .byte	0
11149 2727                        C0            .byte	$C0
11150 2728                        C0            .byte	$C0
11151 2729                        C0            .byte	$C0
11152 272A                        FE            .byte	$FE
11153 272B                        00            .byte	0
11154 272C                        00            .byte	0
11155 272D                        00            .byte	0
11156 272E                        00            .byte	0
11157 272F                        00            .byte	0
11158 2730                        00            .byte	0
11159                                           ! 1397  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11160 2731                        00            .byte	0
11161 2732                        00            .byte	0
11162 2733                        00            .byte	0
11163 2734                        00            .byte	0
11164 2735                        00            .byte	0
11165 2736                        24            .byte	$24
11166 2737                        66            .byte	$66
11167 2738                        FF            .byte	$FF
11168 2739                        66            .byte	$66
11169 273A                        24            .byte	$24
11170 273B                        00            .byte	0
11171 273C                        00            .byte	0
11172 273D                        00            .byte	0
11173 273E                        00            .byte	0
11174 273F                        00            .byte	0
11175 2740                        00            .byte	0
11176                                           ! 1398  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
11177 2741                        00            .byte	0
11178 2742                        00            .byte	0
11179 2743                        00            .byte	0
11180 2744                        00            .byte	0
11181 2745                        10            .byte	$10
11182 2746                        38            .byte	$38
11183 2747                        38            .byte	$38
11184 2748                        7C            .byte	$7C
11185 2749                        7C            .byte	$7C
11186 274A                        FE            .byte	$FE
11187 274B                        FE            .byte	$FE
11188 274C                        00            .byte	0
11189 274D                        00            .byte	0
11190 274E                        00            .byte	0
11191 274F                        00            .byte	0
11192 2750                        00            .byte	0
11193                                           ! 1399  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
11194 2751                        00            .byte	0
11195 2752                        00            .byte	0
11196 2753                        00            .byte	0
11197 2754                        00            .byte	0
11198 2755                        FE            .byte	$FE
11199 2756                        FE            .byte	$FE
11200 2757                        7C            .byte	$7C
11201 2758                        7C            .byte	$7C
11202 2759                        38            .byte	$38
11203 275A                        38            .byte	$38
11204 275B                        10            .byte	$10
11205 275C                        00            .byte	0
11206 275D                        00            .byte	0
11207 275E                        00            .byte	0
11208 275F                        00            .byte	0
11209 2760                        00            .byte	0
11210                                           ! 1400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11211 2761                        00            .byte	0
11212 2762                        00            .byte	0
11213 2763                        00            .byte	0
11214 2764                        00            .byte	0
11215 2765                        00            .byte	0
11216 2766                        00            .byte	0
11217 2767                        00            .byte	0
11218 2768                        00            .byte	0
11219 2769                        00            .byte	0
11220 276A                        00            .byte	0
11221 276B                        00            .byte	0
11222 276C                        00            .byte	0
11223 276D                        00            .byte	0
11224 276E                        00            .byte	0
11225 276F                        00            .byte	0
11226 2770                        00            .byte	0
11227                                           ! 1401  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11228 2771                        00            .byte	0
11229 2772                        00            .byte	0
11230 2773                        18            .byte	$18
11231 2774                        3C            .byte	$3C
11232 2775                        3C            .byte	$3C
11233 2776                        3C            .byte	$3C
11234 2777                        18            .byte	$18
11235 2778                        18            .byte	$18
11236 2779                        18            .byte	$18
11237 277A                        00            .byte	0
11238 277B                        18            .byte	$18
11239 277C                        18            .byte	$18
11240 277D                        00            .byte	0
11241 277E                        00            .byte	0
11242 277F                        00            .byte	0
11243 2780                        00            .byte	0
11244                                           ! 1402  0x00, 0x66,
11245 2781                        00            .byte	0
11246                                           ! 1402  0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11247 2782                        66            .byte	$66
11248 2783                        66            .byte	$66
11249 2784                        66            .byte	$66
11250 2785                        24            .byte	$24
11251 2786                        00            .byte	0
11252 2787                        00            .byte	0
11253 2788                        00            .byte	0
11254 2789                        00            .byte	0
11255 278A                        00            .byte	0
11256 278B                        00            .byte	0
11257 278C                        00            .byte	0
11258 278D                        00            .byte	0
11259 278E                        00            .byte	0
11260 278F                        00            .byte	0
11261 2790                        00            .byte	0
11262                                           ! 1403  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11263 2791                        00            .byte	0
11264 2792                        00            .byte	0
11265 2793                        00            .byte	0
11266 2794                        6C            .byte	$6C
11267 2795                        6C            .byte	$6C
11268 2796                        FE            .byte	$FE
11269 2797                        6C            .byte	$6C
11270 2798                        6C            .byte	$6C
11271 2799                        6C            .byte	$6C
11272 279A                        FE            .byte	$FE
11273 279B                        6C            .byte	$6C
11274 279C                        6C            .byte	$6C
11275 279D                        00            .byte	0
11276 279E                        00            .byte	0
11277 279F                        00            .byte	0
11278 27A0                        00            .byte	0
11279                                           ! 1404  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11280 27A1                        18            .byte	$18
11281 27A2                        18            .byte	$18
11282 27A3                        7C            .byte	$7C
11283 27A4                        C6            .byte	$C6
11284 27A5                        C2            .byte	$C2
11285 27A6                        C0            .byte	$C0
11286 27A7                        7C            .byte	$7C
11287 27A8                        06            .byte	6
11288 27A9                        06            .byte	6
11289 27AA                        86            .byte	$86
11290 27AB                        C6            .byte	$C6
11291 27AC                        7C            .byte	$7C
11292 27AD                        18            .byte	$18
11293 27AE                        18            .byte	$18
11294 27AF                        00            .byte	0
11295 27B0                        00            .byte	0
11296                                           ! 1405  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11297 27B1                        00            .byte	0
11298 27B2                        00            .byte	0
11299 27B3                        00            .byte	0
11300 27B4                        00            .byte	0
11301 27B5                        C2            .byte	$C2
11302 27B6                        C6            .byte	$C6
11303 27B7                        0C            .byte	$C
11304 27B8                        18            .byte	$18
11305 27B9                        30            .byte	$30
11306 27BA                        60            .byte	$60
11307 27BB                        C6            .byte	$C6
11308 27BC                        86            .byte	$86
11309 27BD                        00            .byte	0
11310 27BE                        00            .byte	0
11311 27BF                        00            .byte	0
11312 27C0                        00            .byte	0
11313                                           ! 1406  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11314 27C1                        00            .byte	0
11315 27C2                        00            .byte	0
11316 27C3                        38            .byte	$38
11317 27C4                        6C            .byte	$6C
11318 27C5                        6C            .byte	$6C
11319 27C6                        38            .byte	$38
11320 27C7                        76            .byte	$76
11321 27C8                        DC            .byte	$DC
11322 27C9                        CC            .byte	$CC
11323 27CA                        CC            .byte	$CC
11324 27CB                        CC            .byte	$CC
11325 27CC                        76            .byte	$76
11326 27CD                        00            .byte	0
11327 27CE                        00            .byte	0
11328 27CF                        00            .byte	0
11329 27D0                        00            .byte	0
11330                                           ! 1407  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11331 27D1                        00            .byte	0
11332 27D2                        30            .byte	$30
11333 27D3                        30            .byte	$30
11334 27D4                        30            .byte	$30
11335 27D5                        60            .byte	$60
11336 27D6                        00            .byte	0
11337 27D7                        00            .byte	0
11338 27D8                        00            .byte	0
11339 27D9                        00            .byte	0
11340 27DA                        00            .byte	0
11341 27DB                        00            .byte	0
11342 27DC                        00            .byte	0
11343 27DD                        00            .byte	0
11344 27DE                        00            .byte	0
11345 27DF                        00            .byte	0
11346 27E0                        00            .byte	0
11347                                           ! 1408  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11348 27E1                        00            .byte	0
11349 27E2                        00            .byte	0
11350 27E3                        0C            .byte	$C
11351 27E4                        18            .byte	$18
11352 27E5                        30            .byte	$30
11353 27E6                        30            .byte	$30
11354 27E7                        30            .byte	$30
11355 27E8                        30            .byte	$30
11356 27E9                        30            .byte	$30
11357 27EA                        30            .byte	$30
11358 27EB                        18            .byte	$18
11359 27EC                        0C            .byte	$C
11360 27ED                        00            .byte	0
11361 27EE                        00            .byte	0
11362 27EF                        00            .byte	0
11363 27F0                        00            .byte	0
11364                                           ! 1409  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11365 27F1                        00            .byte	0
11366 27F2                        00            .byte	0
11367 27F3                        30            .byte	$30
11368 27F4                        18            .byte	$18
11369 27F5                        0C            .byte	$C
11370 27F6                        0C            .byte	$C
11371 27F7                        0C            .byte	$C
11372 27F8                        0C            .byte	$C
11373 27F9                        0C            .byte	$C
11374 27FA                        0C            .byte	$C
11375 27FB                        18            .byte	$18
11376 27FC                        30            .byte	$30
11377 27FD                        00            .byte	0
11378 27FE                        00            .byte	0
11379 27FF                        00            .byte	0
11380 2800                        00            .byte	0
11381                                           ! 1410  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11382 2801                        00            .byte	0
11383 2802                        00            .byte	0
11384 2803                        00            .byte	0
11385 2804                        00            .byte	0
11386 2805                        00            .byte	0
11387 2806                        66            .byte	$66
11388 2807                        3C            .byte	$3C
11389 2808                        FF            .byte	$FF
11390 2809                        3C            .byte	$3C
11391 280A                        66            .byte	$66
11392 280B                        00            .byte	0
11393 280C                        00            .byte	0
11394 280D                        00            .byte	0
11395 280E                        00            .byte	0
11396 280F                        00            .byte	0
11397 2810                        00            .byte	0
11398                                           ! 1411  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11399 2811                        00            .byte	0
11400 2812                        00            .byte	0
11401 2813                        00            .byte	0
11402 2814                        00            .byte	0
11403 2815                        00            .byte	0
11404 2816                        18            .byte	$18
11405 2817                        18            .byte	$18
11406 2818                        7E            .byte	$7E
11407 2819                        18            .byte	$18
11408 281A                        18            .byte	$18
11409 281B                        00            .byte	0
11410 281C                        00            .byte	0
11411 281D                        00            .byte	0
11412 281E                        00            .byte	0
11413 281F                        00            .byte	0
11414 2820                        00            .byte	0
11415                                           ! 1412  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11416 2821                        00            .byte	0
11417 2822                        00            .byte	0
11418 2823                        00            .byte	0
11419 2824                        00            .byte	0
11420 2825                        00            .byte	0
11421 2826                        00            .byte	0
11422 2827                        00            .byte	0
11423 2828                        00            .byte	0
11424 2829                        00            .byte	0
11425 282A                        18            .byte	$18
11426 282B                        18            .byte	$18
11427 282C                        18            .byte	$18
11428 282D                        30            .byte	$30
11429 282E                        00            .byte	0
11430 282F                        00            .byte	0
11431 2830                        00            .byte	0
11432                                           ! 1413  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11433 2831                        00            .byte	0
11434 2832                        00            .byte	0
11435 2833                        00            .byte	0
11436 2834                        00            .byte	0
11437 2835                        00            .byte	0
11438 2836                        00            .byte	0
11439 2837                        00            .byte	0
11440 2838                        FE            .byte	$FE
11441 2839                        00            .byte	0
11442 283A                        00            .byte	0
11443 283B                        00            .byte	0
11444 283C                        00            .byte	0
11445 283D                        00            .byte	0
11446 283E                        00            .byte	0
11447 283F                        00            .byte	0
11448 2840                        00            .byte	0
11449                                           ! 1414  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11450 2841                        00            .byte	0
11451 2842                        00            .byte	0
11452 2843                        00            .byte	0
11453 2844                        00            .byte	0
11454 2845                        00            .byte	0
11455 2846                        00            .byte	0
11456 2847                        00            .byte	0
11457 2848                        00            .byte	0
11458 2849                        00            .byte	0
11459 284A                        00            .byte	0
11460 284B                        18            .byte	$18
11461 284C                        18            .byte	$18
11462 284D                        00            .byte	0
11463 284E                        00            .byte	0
11464 284F                        00            .byte	0
11465 2850                        00            .byte	0
11466                                           ! 1415  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11467 2851                        00            .byte	0
11468 2852                        00            .byte	0
11469 2853                        00            .byte	0
11470 2854                        00            .byte	0
11471 2855                        02            .byte	2
11472 2856                        06            .byte	6
11473 2857                        0C            .byte	$C
11474 2858                        18            .byte	$18
11475 2859                        30            .byte	$30
11476 285A                        60            .byte	$60
11477 285B                        C0            .byte	$C0
11478 285C                        80            .byte	$80
11479 285D                        00            .byte	0
11480 285E                        00            .byte	0
11481 285F                        00            .byte	0
11482 2860                        00            .byte	0
11483                                           ! 1416  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11484 2861                        00            .byte	0
11485 2862                        00            .byte	0
11486 2863                        3C            .byte	$3C
11487 2864                        66            .byte	$66
11488 2865                        C3            .byte	$C3
11489 2866                        C3            .byte	$C3
11490 2867                        DB            .byte	$DB
11491 2868                        DB            .byte	$DB
11492 2869                        C3            .byte	$C3
11493 286A                        C3            .byte	$C3
11494 286B                        66            .byte	$66
11495 286C                        3C            .byte	$3C
11496 286D                        00            .byte	0
11497 286E                        00            .byte	0
11498 286F                        00            .byte	0
11499 2870                        00            .byte	0
11500                                           ! 1417  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11501 2871                        00            .byte	0
11502 2872                        00            .byte	0
11503 2873                        18            .byte	$18
11504 2874                        38            .byte	$38
11505 2875                        78            .byte	$78
11506 2876                        18            .byte	$18
11507 2877                        18            .byte	$18
11508 2878                        18            .byte	$18
11509 2879                        18            .byte	$18
11510 287A                        18            .byte	$18
11511 287B                        18            .byte	$18
11512 287C                        7E            .byte	$7E
11513 287D                        00            .byte	0
11514 287E                        00            .byte	0
11515 287F                        00            .byte	0
11516 2880                        00            .byte	0
11517                                           ! 1418  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11518 2881                        00            .byte	0
11519 2882                        00            .byte	0
11520 2883                        7C            .byte	$7C
11521 2884                        C6            .byte	$C6
11522 2885                        06            .byte	6
11523 2886                        0C            .byte	$C
11524 2887                        18            .byte	$18
11525 2888                        30            .byte	$30
11526 2889                        60            .byte	$60
11527 288A                        C0            .byte	$C0
11528 288B                        C6            .byte	$C6
11529 288C                        FE            .byte	$FE
11530 288D                        00            .byte	0
11531 288E                        00            .byte	0
11532 288F                        00            .byte	0
11533 2890                        00            .byte	0
11534                                           ! 1419  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11535 2891                        00            .byte	0
11536 2892                        00            .byte	0
11537 2893                        7C            .byte	$7C
11538 2894                        C6            .byte	$C6
11539 2895                        06            .byte	6
11540 2896                        06            .byte	6
11541 2897                        3C            .byte	$3C
11542 2898                        06            .byte	6
11543 2899                        06            .byte	6
11544 289A                        06            .byte	6
11545 289B                        C6            .byte	$C6
11546 289C                        7C            .byte	$7C
11547 289D                        00            .byte	0
11548 289E                        00            .byte	0
11549 289F                        00            .byte	0
11550 28A0                        00            .byte	0
11551                                           ! 1420  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11552 28A1                        00            .byte	0
11553 28A2                        00            .byte	0
11554 28A3                        0C            .byte	$C
11555 28A4                        1C            .byte	$1C
11556 28A5                        3C            .byte	$3C
11557 28A6                        6C            .byte	$6C
11558 28A7                        CC            .byte	$CC
11559 28A8                        FE            .byte	$FE
11560 28A9                        0C            .byte	$C
11561 28AA                        0C            .byte	$C
11562 28AB                        0C            .byte	$C
11563 28AC                        1E            .byte	$1E
11564 28AD                        00            .byte	0
11565 28AE                        00            .byte	0
11566 28AF                        00            .byte	0
11567 28B0                        00            .byte	0
11568                                           ! 1421  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11569 28B1                        00            .byte	0
11570 28B2                        00            .byte	0
11571 28B3                        FE            .byte	$FE
11572 28B4                        C0            .byte	$C0
11573 28B5                        C0            .byte	$C0
11574 28B6                        C0            .byte	$C0
11575 28B7                        FC            .byte	$FC
11576 28B8                        06            .byte	6
11577 28B9                        06            .byte	6
11578 28BA                        06            .byte	6
11579 28BB                        C6            .byte	$C6
11580 28BC                        7C            .byte	$7C
11581 28BD                        00            .byte	0
11582 28BE                        00            .byte	0
11583 28BF                        00            .byte	0
11584 28C0                        00            .byte	0
11585                                           ! 1422  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11586 28C1                        00            .byte	0
11587 28C2                        00            .byte	0
11588 28C3                        38            .byte	$38
11589 28C4                        60            .byte	$60
11590 28C5                        C0            .byte	$C0
11591 28C6                        C0            .byte	$C0
11592 28C7                        FC            .byte	$FC
11593 28C8                        C6            .byte	$C6
11594 28C9                        C6            .byte	$C6
11595 28CA                        C6            .byte	$C6
11596 28CB                        C6            .byte	$C6
11597 28CC                        7C            .byte	$7C
11598 28CD                        00            .byte	0
11599 28CE                        00            .byte	0
11600 28CF                        00            .byte	0
11601 28D0                        00            .byte	0
11602                                           ! 1423  0x00, 0x00, 0xfe, 0xc6
11603 28D1                        00            .byte	0
11604 28D2                        00            .byte	0
11605 28D3                        FE            .byte	$FE
11606                                           ! 1423 , 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11607 28D4                        C6            .byte	$C6
11608 28D5                        06            .byte	6
11609 28D6                        06            .byte	6
11610 28D7                        0C            .byte	$C
11611 28D8                        18            .byte	$18
11612 28D9                        30            .byte	$30
11613 28DA                        30            .byte	$30
11614 28DB                        30            .byte	$30
11615 28DC                        30            .byte	$30
11616 28DD                        00            .byte	0
11617 28DE                        00            .byte	0
11618 28DF                        00            .byte	0
11619 28E0                        00            .byte	0
11620                                           ! 1424  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11621 28E1                        00            .byte	0
11622 28E2                        00            .byte	0
11623 28E3                        7C            .byte	$7C
11624 28E4                        C6            .byte	$C6
11625 28E5                        C6            .byte	$C6
11626 28E6                        C6            .byte	$C6
11627 28E7                        7C            .byte	$7C
11628 28E8                        C6            .byte	$C6
11629 28E9                        C6            .byte	$C6
11630 28EA                        C6            .byte	$C6
11631 28EB                        C6            .byte	$C6
11632 28EC                        7C            .byte	$7C
11633 28ED                        00            .byte	0
11634 28EE                        00            .byte	0
11635 28EF                        00            .byte	0
11636 28F0                        00            .byte	0
11637                                           ! 1425  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11638 28F1                        00            .byte	0
11639 28F2                        00            .byte	0
11640 28F3                        7C            .byte	$7C
11641 28F4                        C6            .byte	$C6
11642 28F5                        C6            .byte	$C6
11643 28F6                        C6            .byte	$C6
11644 28F7                        7E            .byte	$7E
11645 28F8                        06            .byte	6
11646 28F9                        06            .byte	6
11647 28FA                        06            .byte	6
11648 28FB                        0C            .byte	$C
11649 28FC                        78            .byte	$78
11650 28FD                        00            .byte	0
11651 28FE                        00            .byte	0
11652 28FF                        00            .byte	0
11653 2900                        00            .byte	0
11654                                           ! 1426  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11655 2901                        00            .byte	0
11656 2902                        00            .byte	0
11657 2903                        00            .byte	0
11658 2904                        00            .byte	0
11659 2905                        18            .byte	$18
11660 2906                        18            .byte	$18
11661 2907                        00            .byte	0
11662 2908                        00            .byte	0
11663 2909                        00            .byte	0
11664 290A                        18            .byte	$18
11665 290B                        18            .byte	$18
11666 290C                        00            .byte	0
11667 290D                        00            .byte	0
11668 290E                        00            .byte	0
11669 290F                        00            .byte	0
11670 2910                        00            .byte	0
11671                                           ! 1427  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11672 2911                        00            .byte	0
11673 2912                        00            .byte	0
11674 2913                        00            .byte	0
11675 2914                        00            .byte	0
11676 2915                        18            .byte	$18
11677 2916                        18            .byte	$18
11678 2917                        00            .byte	0
11679 2918                        00            .byte	0
11680 2919                        00            .byte	0
11681 291A                        18            .byte	$18
11682 291B                        18            .byte	$18
11683 291C                        30            .byte	$30
11684 291D                        00            .byte	0
11685 291E                        00            .byte	0
11686 291F                        00            .byte	0
11687 2920                        00            .byte	0
11688                                           ! 1428  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11689 2921                        00            .byte	0
11690 2922                        00            .byte	0
11691 2923                        00            .byte	0
11692 2924                        06            .byte	6
11693 2925                        0C            .byte	$C
11694 2926                        18            .byte	$18
11695 2927                        30            .byte	$30
11696 2928                        60            .byte	$60
11697 2929                        30            .byte	$30
11698 292A                        18            .byte	$18
11699 292B                        0C            .byte	$C
11700 292C                        06            .byte	6
11701 292D                        00            .byte	0
11702 292E                        00            .byte	0
11703 292F                        00            .byte	0
11704 2930                        00            .byte	0
11705                                           ! 1429  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11706 2931                        00            .byte	0
11707 2932                        00            .byte	0
11708 2933                        00            .byte	0
11709 2934                        00            .byte	0
11710 2935                        00            .byte	0
11711 2936                        7E            .byte	$7E
11712 2937                        00            .byte	0
11713 2938                        00            .byte	0
11714 2939                        7E            .byte	$7E
11715 293A                        00            .byte	0
11716 293B                        00            .byte	0
11717 293C                        00            .byte	0
11718 293D                        00            .byte	0
11719 293E                        00            .byte	0
11720 293F                        00            .byte	0
11721 2940                        00            .byte	0
11722                                           ! 1430  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11723 2941                        00            .byte	0
11724 2942                        00            .byte	0
11725 2943                        00            .byte	0
11726 2944                        60            .byte	$60
11727 2945                        30            .byte	$30
11728 2946                        18            .byte	$18
11729 2947                        0C            .byte	$C
11730 2948                        06            .byte	6
11731 2949                        0C            .byte	$C
11732 294A                        18            .byte	$18
11733 294B                        30            .byte	$30
11734 294C                        60            .byte	$60
11735 294D                        00            .byte	0
11736 294E                        00            .byte	0
11737 294F                        00            .byte	0
11738 2950                        00            .byte	0
11739                                           ! 1431  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11740 2951                        00            .byte	0
11741 2952                        00            .byte	0
11742 2953                        7C            .byte	$7C
11743 2954                        C6            .byte	$C6
11744 2955                        C6            .byte	$C6
11745 2956                        0C            .byte	$C
11746 2957                        18            .byte	$18
11747 2958                        18            .byte	$18
11748 2959                        18            .byte	$18
11749 295A                        00            .byte	0
11750 295B                        18            .byte	$18
11751 295C                        18            .byte	$18
11752 295D                        00            .byte	0
11753 295E                        00            .byte	0
11754 295F                        00            .byte	0
11755 2960                        00            .byte	0
11756                                           ! 1432  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11757 2961                        00            .byte	0
11758 2962                        00            .byte	0
11759 2963                        00            .byte	0
11760 2964                        7C            .byte	$7C
11761 2965                        C6            .byte	$C6
11762 2966                        C6            .byte	$C6
11763 2967                        DE            .byte	$DE
11764 2968                        DE            .byte	$DE
11765 2969                        DE            .byte	$DE
11766 296A                        DC            .byte	$DC
11767 296B                        C0            .byte	$C0
11768 296C                        7C            .byte	$7C
11769 296D                        00            .byte	0
11770 296E                        00            .byte	0
11771 296F                        00            .byte	0
11772 2970                        00            .byte	0
11773                                           ! 1433  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11774 2971                        00            .byte	0
11775 2972                        00            .byte	0
11776 2973                        10            .byte	$10
11777 2974                        38            .byte	$38
11778 2975                        6C            .byte	$6C
11779 2976                        C6            .byte	$C6
11780 2977                        C6            .byte	$C6
11781 2978                        FE            .byte	$FE
11782 2979                        C6            .byte	$C6
11783 297A                        C6            .byte	$C6
11784 297B                        C6            .byte	$C6
11785 297C                        C6            .byte	$C6
11786 297D                        00            .byte	0
11787 297E                        00            .byte	0
11788 297F                        00            .byte	0
11789 2980                        00            .byte	0
11790                                           ! 1434  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11791 2981                        00            .byte	0
11792 2982                        00            .byte	0
11793 2983                        FC            .byte	$FC
11794 2984                        66            .byte	$66
11795 2985                        66            .byte	$66
11796 2986                        66            .byte	$66
11797 2987                        7C            .byte	$7C
11798 2988                        66            .byte	$66
11799 2989                        66            .byte	$66
11800 298A                        66            .byte	$66
11801 298B                        66            .byte	$66
11802 298C                        FC            .byte	$FC
11803 298D                        00            .byte	0
11804 298E                        00            .byte	0
11805 298F                        00            .byte	0
11806 2990                        00            .byte	0
11807                                           ! 1435  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11808 2991                        00            .byte	0
11809 2992                        00            .byte	0
11810 2993                        3C            .byte	$3C
11811 2994                        66            .byte	$66
11812 2995                        C2            .byte	$C2
11813 2996                        C0            .byte	$C0
11814 2997                        C0            .byte	$C0
11815 2998                        C0            .byte	$C0
11816 2999                        C0            .byte	$C0
11817 299A                        C2            .byte	$C2
11818 299B                        66            .byte	$66
11819 299C                        3C            .byte	$3C
11820 299D                        00            .byte	0
11821 299E                        00            .byte	0
11822 299F                        00            .byte	0
11823 29A0                        00            .byte	0
11824                                           ! 1436  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11825 29A1                        00            .byte	0
11826 29A2                        00            .byte	0
11827 29A3                        F8            .byte	$F8
11828 29A4                        6C            .byte	$6C
11829 29A5                        66            .byte	$66
11830 29A6                        66            .byte	$66
11831 29A7                        66            .byte	$66
11832 29A8                        66            .byte	$66
11833 29A9                        66            .byte	$66
11834 29AA                        66            .byte	$66
11835 29AB                        6C            .byte	$6C
11836 29AC                        F8            .byte	$F8
11837 29AD                        00            .byte	0
11838 29AE                        00            .byte	0
11839 29AF                        00            .byte	0
11840 29B0                        00            .byte	0
11841                                           ! 1437  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11842 29B1                        00            .byte	0
11843 29B2                        00            .byte	0
11844 29B3                        FE            .byte	$FE
11845 29B4                        66            .byte	$66
11846 29B5                        62            .byte	$62
11847 29B6                        68            .byte	$68
11848 29B7                        78            .byte	$78
11849 29B8                        68            .byte	$68
11850 29B9                        60            .byte	$60
11851 29BA                        62            .byte	$62
11852 29BB                        66            .byte	$66
11853 29BC                        FE            .byte	$FE
11854 29BD                        00            .byte	0
11855 29BE                        00            .byte	0
11856 29BF                        00            .byte	0
11857 29C0                        00            .byte	0
11858                                           ! 1438  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11859 29C1                        00            .byte	0
11860 29C2                        00            .byte	0
11861 29C3                        FE            .byte	$FE
11862 29C4                        66            .byte	$66
11863 29C5                        62            .byte	$62
11864 29C6                        68            .byte	$68
11865 29C7                        78            .byte	$78
11866 29C8                        68            .byte	$68
11867 29C9                        60            .byte	$60
11868 29CA                        60            .byte	$60
11869 29CB                        60            .byte	$60
11870 29CC                        F0            .byte	$F0
11871 29CD                        00            .byte	0
11872 29CE                        00            .byte	0
11873 29CF                        00            .byte	0
11874 29D0                        00            .byte	0
11875                                           ! 1439  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11876 29D1                        00            .byte	0
11877 29D2                        00            .byte	0
11878 29D3                        3C            .byte	$3C
11879 29D4                        66            .byte	$66
11880 29D5                        C2            .byte	$C2
11881 29D6                        C0            .byte	$C0
11882 29D7                        C0            .byte	$C0
11883 29D8                        DE            .byte	$DE
11884 29D9                        C6            .byte	$C6
11885 29DA                        C6            .byte	$C6
11886 29DB                        66            .byte	$66
11887 29DC                        3A            .byte	$3A
11888 29DD                        00            .byte	0
11889 29DE                        00            .byte	0
11890 29DF                        00            .byte	0
11891 29E0                        00            .byte	0
11892                                           ! 1440  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11893 29E1                        00            .byte	0
11894 29E2                        00            .byte	0
11895 29E3                        C6            .byte	$C6
11896 29E4                        C6            .byte	$C6
11897 29E5                        C6            .byte	$C6
11898 29E6                        C6            .byte	$C6
11899 29E7                        FE            .byte	$FE
11900 29E8                        C6            .byte	$C6
11901 29E9                        C6            .byte	$C6
11902 29EA                        C6            .byte	$C6
11903 29EB                        C6            .byte	$C6
11904 29EC                        C6            .byte	$C6
11905 29ED                        00            .byte	0
11906 29EE                        00            .byte	0
11907 29EF                        00            .byte	0
11908 29F0                        00            .byte	0
11909                                           ! 1441  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11910 29F1                        00            .byte	0
11911 29F2                        00            .byte	0
11912 29F3                        3C            .byte	$3C
11913 29F4                        18            .byte	$18
11914 29F5                        18            .byte	$18
11915 29F6                        18            .byte	$18
11916 29F7                        18            .byte	$18
11917 29F8                        18            .byte	$18
11918 29F9                        18            .byte	$18
11919 29FA                        18            .byte	$18
11920 29FB                        18            .byte	$18
11921 29FC                        3C            .byte	$3C
11922 29FD                        00            .byte	0
11923 29FE                        00            .byte	0
11924 29FF                        00            .byte	0
11925 2A00                        00            .byte	0
11926                                           ! 1442  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11927 2A01                        00            .byte	0
11928 2A02                        00            .byte	0
11929 2A03                        1E            .byte	$1E
11930 2A04                        0C            .byte	$C
11931 2A05                        0C            .byte	$C
11932 2A06                        0C            .byte	$C
11933 2A07                        0C            .byte	$C
11934 2A08                        0C            .byte	$C
11935 2A09                        CC            .byte	$CC
11936 2A0A                        CC            .byte	$CC
11937 2A0B                        CC            .byte	$CC
11938 2A0C                        78            .byte	$78
11939 2A0D                        00            .byte	0
11940 2A0E                        00            .byte	0
11941 2A0F                        00            .byte	0
11942 2A10                        00            .byte	0
11943                                           ! 1443  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11944 2A11                        00            .byte	0
11945 2A12                        00            .byte	0
11946 2A13                        E6            .byte	$E6
11947 2A14                        66            .byte	$66
11948 2A15                        66            .byte	$66
11949 2A16                        6C            .byte	$6C
11950 2A17                        78            .byte	$78
11951 2A18                        78            .byte	$78
11952 2A19                        6C            .byte	$6C
11953 2A1A                        66            .byte	$66
11954 2A1B                        66            .byte	$66
11955 2A1C                        E6            .byte	$E6
11956 2A1D                        00            .byte	0
11957 2A1E                        00            .byte	0
11958 2A1F                        00            .byte	0
11959 2A20                        00            .byte	0
11960                                           ! 1444  0x00, 0x00, 0xf0, 0x60, 0x60, 0x6
11961 2A21                        00            .byte	0
11962 2A22                        00            .byte	0
11963 2A23                        F0            .byte	$F0
11964 2A24                        60            .byte	$60
11965 2A25                        60            .byte	$60
11966                                           ! 1444 0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11967 2A26                        60            .byte	$60
11968 2A27                        60            .byte	$60
11969 2A28                        60            .byte	$60
11970 2A29                        60            .byte	$60
11971 2A2A                        62            .byte	$62
11972 2A2B                        66            .byte	$66
11973 2A2C                        FE            .byte	$FE
11974 2A2D                        00            .byte	0
11975 2A2E                        00            .byte	0
11976 2A2F                        00            .byte	0
11977 2A30                        00            .byte	0
11978                                           ! 1445  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11979 2A31                        00            .byte	0
11980 2A32                        00            .byte	0
11981 2A33                        C3            .byte	$C3
11982 2A34                        E7            .byte	$E7
11983 2A35                        FF            .byte	$FF
11984 2A36                        FF            .byte	$FF
11985 2A37                        DB            .byte	$DB
11986 2A38                        C3            .byte	$C3
11987 2A39                        C3            .byte	$C3
11988 2A3A                        C3            .byte	$C3
11989 2A3B                        C3            .byte	$C3
11990 2A3C                        C3            .byte	$C3
11991 2A3D                        00            .byte	0
11992 2A3E                        00            .byte	0
11993 2A3F                        00            .byte	0
11994 2A40                        00            .byte	0
11995                                           ! 1446  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11996 2A41                        00            .byte	0
11997 2A42                        00            .byte	0
11998 2A43                        C6            .byte	$C6
11999 2A44                        E6            .byte	$E6
12000 2A45                        F6            .byte	$F6
12001 2A46                        FE            .byte	$FE
12002 2A47                        DE            .byte	$DE
12003 2A48                        CE            .byte	$CE
12004 2A49                        C6            .byte	$C6
12005 2A4A                        C6            .byte	$C6
12006 2A4B                        C6            .byte	$C6
12007 2A4C                        C6            .byte	$C6
12008 2A4D                        00            .byte	0
12009 2A4E                        00            .byte	0
12010 2A4F                        00            .byte	0
12011 2A50                        00            .byte	0
12012                                           ! 1447  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12013 2A51                        00            .byte	0
12014 2A52                        00            .byte	0
12015 2A53                        7C            .byte	$7C
12016 2A54                        C6            .byte	$C6
12017 2A55                        C6            .byte	$C6
12018 2A56                        C6            .byte	$C6
12019 2A57                        C6            .byte	$C6
12020 2A58                        C6            .byte	$C6
12021 2A59                        C6            .byte	$C6
12022 2A5A                        C6            .byte	$C6
12023 2A5B                        C6            .byte	$C6
12024 2A5C                        7C            .byte	$7C
12025 2A5D                        00            .byte	0
12026 2A5E                        00            .byte	0
12027 2A5F                        00            .byte	0
12028 2A60                        00            .byte	0
12029                                           ! 1448  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12030 2A61                        00            .byte	0
12031 2A62                        00            .byte	0
12032 2A63                        FC            .byte	$FC
12033 2A64                        66            .byte	$66
12034 2A65                        66            .byte	$66
12035 2A66                        66            .byte	$66
12036 2A67                        7C            .byte	$7C
12037 2A68                        60            .byte	$60
12038 2A69                        60            .byte	$60
12039 2A6A                        60            .byte	$60
12040 2A6B                        60            .byte	$60
12041 2A6C                        F0            .byte	$F0
12042 2A6D                        00            .byte	0
12043 2A6E                        00            .byte	0
12044 2A6F                        00            .byte	0
12045 2A70                        00            .byte	0
12046                                           ! 1449  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
12047 2A71                        00            .byte	0
12048 2A72                        00            .byte	0
12049 2A73                        7C            .byte	$7C
12050 2A74                        C6            .byte	$C6
12051 2A75                        C6            .byte	$C6
12052 2A76                        C6            .byte	$C6
12053 2A77                        C6            .byte	$C6
12054 2A78                        C6            .byte	$C6
12055 2A79                        C6            .byte	$C6
12056 2A7A                        D6            .byte	$D6
12057 2A7B                        DE            .byte	$DE
12058 2A7C                        7C            .byte	$7C
12059 2A7D                        0C            .byte	$C
12060 2A7E                        0E            .byte	$E
12061 2A7F                        00            .byte	0
12062 2A80                        00            .byte	0
12063                                           ! 1450  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12064 2A81                        00            .byte	0
12065 2A82                        00            .byte	0
12066 2A83                        FC            .byte	$FC
12067 2A84                        66            .byte	$66
12068 2A85                        66            .byte	$66
12069 2A86                        66            .byte	$66
12070 2A87                        7C            .byte	$7C
12071 2A88                        6C            .byte	$6C
12072 2A89                        66            .byte	$66
12073 2A8A                        66            .byte	$66
12074 2A8B                        66            .byte	$66
12075 2A8C                        E6            .byte	$E6
12076 2A8D                        00            .byte	0
12077 2A8E                        00            .byte	0
12078 2A8F                        00            .byte	0
12079 2A90                        00            .byte	0
12080                                           ! 1451  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12081 2A91                        00            .byte	0
12082 2A92                        00            .byte	0
12083 2A93                        7C            .byte	$7C
12084 2A94                        C6            .byte	$C6
12085 2A95                        C6            .byte	$C6
12086 2A96                        60            .byte	$60
12087 2A97                        38            .byte	$38
12088 2A98                        0C            .byte	$C
12089 2A99                        06            .byte	6
12090 2A9A                        C6            .byte	$C6
12091 2A9B                        C6            .byte	$C6
12092 2A9C                        7C            .byte	$7C
12093 2A9D                        00            .byte	0
12094 2A9E                        00            .byte	0
12095 2A9F                        00            .byte	0
12096 2AA0                        00            .byte	0
12097                                           ! 1452  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12098 2AA1                        00            .byte	0
12099 2AA2                        00            .byte	0
12100 2AA3                        FF            .byte	$FF
12101 2AA4                        DB            .byte	$DB
12102 2AA5                        99            .byte	$99
12103 2AA6                        18            .byte	$18
12104 2AA7                        18            .byte	$18
12105 2AA8                        18            .byte	$18
12106 2AA9                        18            .byte	$18
12107 2AAA                        18            .byte	$18
12108 2AAB                        18            .byte	$18
12109 2AAC                        3C            .byte	$3C
12110 2AAD                        00            .byte	0
12111 2AAE                        00            .byte	0
12112 2AAF                        00            .byte	0
12113 2AB0                        00            .byte	0
12114                                           ! 1453  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12115 2AB1                        00            .byte	0
12116 2AB2                        00            .byte	0
12117 2AB3                        C6            .byte	$C6
12118 2AB4                        C6            .byte	$C6
12119 2AB5                        C6            .byte	$C6
12120 2AB6                        C6            .byte	$C6
12121 2AB7                        C6            .byte	$C6
12122 2AB8                        C6            .byte	$C6
12123 2AB9                        C6            .byte	$C6
12124 2ABA                        C6            .byte	$C6
12125 2ABB                        C6            .byte	$C6
12126 2ABC                        7C            .byte	$7C
12127 2ABD                        00            .byte	0
12128 2ABE                        00            .byte	0
12129 2ABF                        00            .byte	0
12130 2AC0                        00            .byte	0
12131                                           ! 1454  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12132 2AC1                        00            .byte	0
12133 2AC2                        00            .byte	0
12134 2AC3                        C3            .byte	$C3
12135 2AC4                        C3            .byte	$C3
12136 2AC5                        C3            .byte	$C3
12137 2AC6                        C3            .byte	$C3
12138 2AC7                        C3            .byte	$C3
12139 2AC8                        C3            .byte	$C3
12140 2AC9                        C3            .byte	$C3
12141 2ACA                        66            .byte	$66
12142 2ACB                        3C            .byte	$3C
12143 2ACC                        18            .byte	$18
12144 2ACD                        00            .byte	0
12145 2ACE                        00            .byte	0
12146 2ACF                        00            .byte	0
12147 2AD0                        00            .byte	0
12148                                           ! 1455  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12149 2AD1                        00            .byte	0
12150 2AD2                        00            .byte	0
12151 2AD3                        C3            .byte	$C3
12152 2AD4                        C3            .byte	$C3
12153 2AD5                        C3            .byte	$C3
12154 2AD6                        C3            .byte	$C3
12155 2AD7                        C3            .byte	$C3
12156 2AD8                        DB            .byte	$DB
12157 2AD9                        DB            .byte	$DB
12158 2ADA                        FF            .byte	$FF
12159 2ADB                        66            .byte	$66
12160 2ADC                        66            .byte	$66
12161 2ADD                        00            .byte	0
12162 2ADE                        00            .byte	0
12163 2ADF                        00            .byte	0
12164 2AE0                        00            .byte	0
12165                                           ! 1456  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12166 2AE1                        00            .byte	0
12167 2AE2                        00            .byte	0
12168 2AE3                        C3            .byte	$C3
12169 2AE4                        C3            .byte	$C3
12170 2AE5                        66            .byte	$66
12171 2AE6                        3C            .byte	$3C
12172 2AE7                        18            .byte	$18
12173 2AE8                        18            .byte	$18
12174 2AE9                        3C            .byte	$3C
12175 2AEA                        66            .byte	$66
12176 2AEB                        C3            .byte	$C3
12177 2AEC                        C3            .byte	$C3
12178 2AED                        00            .byte	0
12179 2AEE                        00            .byte	0
12180 2AEF                        00            .byte	0
12181 2AF0                        00            .byte	0
12182                                           ! 1457  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12183 2AF1                        00            .byte	0
12184 2AF2                        00            .byte	0
12185 2AF3                        C3            .byte	$C3
12186 2AF4                        C3            .byte	$C3
12187 2AF5                        C3            .byte	$C3
12188 2AF6                        66            .byte	$66
12189 2AF7                        3C            .byte	$3C
12190 2AF8                        18            .byte	$18
12191 2AF9                        18            .byte	$18
12192 2AFA                        18            .byte	$18
12193 2AFB                        18            .byte	$18
12194 2AFC                        3C            .byte	$3C
12195 2AFD                        00            .byte	0
12196 2AFE                        00            .byte	0
12197 2AFF                        00            .byte	0
12198 2B00                        00            .byte	0
12199                                           ! 1458  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
12200 2B01                        00            .byte	0
12201 2B02                        00            .byte	0
12202 2B03                        FF            .byte	$FF
12203 2B04                        C3            .byte	$C3
12204 2B05                        86            .byte	$86
12205 2B06                        0C            .byte	$C
12206 2B07                        18            .byte	$18
12207 2B08                        30            .byte	$30
12208 2B09                        60            .byte	$60
12209 2B0A                        C1            .byte	$C1
12210 2B0B                        C3            .byte	$C3
12211 2B0C                        FF            .byte	$FF
12212 2B0D                        00            .byte	0
12213 2B0E                        00            .byte	0
12214 2B0F                        00            .byte	0
12215 2B10                        00            .byte	0
12216                                           ! 1459  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
12217 2B11                        00            .byte	0
12218 2B12                        00            .byte	0
12219 2B13                        3C            .byte	$3C
12220 2B14                        30            .byte	$30
12221 2B15                        30            .byte	$30
12222 2B16                        30            .byte	$30
12223 2B17                        30            .byte	$30
12224 2B18                        30            .byte	$30
12225 2B19                        30            .byte	$30
12226 2B1A                        30            .byte	$30
12227 2B1B                        30            .byte	$30
12228 2B1C                        3C            .byte	$3C
12229 2B1D                        00            .byte	0
12230 2B1E                        00            .byte	0
12231 2B1F                        00            .byte	0
12232 2B20                        00            .byte	0
12233                                           ! 1460  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
12234 2B21                        00            .byte	0
12235 2B22                        00            .byte	0
12236 2B23                        00            .byte	0
12237 2B24                        80            .byte	$80
12238 2B25                        C0            .byte	$C0
12239 2B26                        E0            .byte	$E0
12240 2B27                        70            .byte	$70
12241 2B28                        38            .byte	$38
12242 2B29                        1C            .byte	$1C
12243 2B2A                        0E            .byte	$E
12244 2B2B                        06            .byte	6
12245 2B2C                        02            .byte	2
12246 2B2D                        00            .byte	0
12247 2B2E                        00            .byte	0
12248 2B2F                        00            .byte	0
12249 2B30                        00            .byte	0
12250                                           ! 1461  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12251 2B31                        00            .byte	0
12252 2B32                        00            .byte	0
12253 2B33                        3C            .byte	$3C
12254 2B34                        0C            .byte	$C
12255 2B35                        0C            .byte	$C
12256 2B36                        0C            .byte	$C
12257 2B37                        0C            .byte	$C
12258 2B38                        0C            .byte	$C
12259 2B39                        0C            .byte	$C
12260 2B3A                        0C            .byte	$C
12261 2B3B                        0C            .byte	$C
12262 2B3C                        3C            .byte	$3C
12263 2B3D                        00            .byte	0
12264 2B3E                        00            .byte	0
12265 2B3F                        00            .byte	0
12266 2B40                        00            .byte	0
12267                                           ! 1462  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12268 2B41                        10            .byte	$10
12269 2B42                        38            .byte	$38
12270 2B43                        6C            .byte	$6C
12271 2B44                        C6            .byte	$C6
12272 2B45                        00            .byte	0
12273 2B46                        00            .byte	0
12274 2B47                        00            .byte	0
12275 2B48                        00            .byte	0
12276 2B49                        00            .byte	0
12277 2B4A                        00            .byte	0
12278 2B4B                        00            .byte	0
12279 2B4C                        00            .byte	0
12280 2B4D                        00            .byte	0
12281 2B4E                        00            .byte	0
12282 2B4F                        00            .byte	0
12283 2B50                        00            .byte	0
12284                                           ! 1463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12285 2B51                        00            .byte	0
12286 2B52                        00            .byte	0
12287 2B53                        00            .byte	0
12288 2B54                        00            .byte	0
12289 2B55                        00            .byte	0
12290 2B56                        00            .byte	0
12291 2B57                        00            .byte	0
12292 2B58                        00            .byte	0
12293 2B59                        00            .byte	0
12294 2B5A                        00            .byte	0
12295 2B5B                        00            .byte	0
12296 2B5C                        00            .byte	0
12297 2B5D                        00            .byte	0
12298 2B5E                        FF            .byte	$FF
12299 2B5F                        00            .byte	0
12300 2B60                        00            .byte	0
12301                                           ! 1464  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12302 2B61                        30            .byte	$30
12303 2B62                        30            .byte	$30
12304 2B63                        18            .byte	$18
12305 2B64                        00            .byte	0
12306 2B65                        00            .byte	0
12307 2B66                        00            .byte	0
12308 2B67                        00            .byte	0
12309 2B68                        00            .byte	0
12310 2B69                        00            .byte	0
12311 2B6A                        00            .byte	0
12312 2B6B                        00            .byte	0
12313 2B6C                        00            .byte	0
12314 2B6D                        00            .byte	0
12315 2B6E                        00            .byte	0
12316 2B6F                        00            .byte	0
12317 2B70                        00            .byte	0
12318                                           ! 1465  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x
12319 2B71                        00            .byte	0
12320 2B72                        00            .byte	0
12321 2B73                        00            .byte	0
12322 2B74                        00            .byte	0
12323 2B75                        00            .byte	0
12324 2B76                        78            .byte	$78
12325 2B77                        0C            .byte	$C
12326                                           ! 1465 7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12327 2B78                        7C            .byte	$7C
12328 2B79                        CC            .byte	$CC
12329 2B7A                        CC            .byte	$CC
12330 2B7B                        CC            .byte	$CC
12331 2B7C                        76            .byte	$76
12332 2B7D                        00            .byte	0
12333 2B7E                        00            .byte	0
12334 2B7F                        00            .byte	0
12335 2B80                        00            .byte	0
12336                                           ! 1466  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12337 2B81                        00            .byte	0
12338 2B82                        00            .byte	0
12339 2B83                        E0            .byte	$E0
12340 2B84                        60            .byte	$60
12341 2B85                        60            .byte	$60
12342 2B86                        78            .byte	$78
12343 2B87                        6C            .byte	$6C
12344 2B88                        66            .byte	$66
12345 2B89                        66            .byte	$66
12346 2B8A                        66            .byte	$66
12347 2B8B                        66            .byte	$66
12348 2B8C                        7C            .byte	$7C
12349 2B8D                        00            .byte	0
12350 2B8E                        00            .byte	0
12351 2B8F                        00            .byte	0
12352 2B90                        00            .byte	0
12353                                           ! 1467  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12354 2B91                        00            .byte	0
12355 2B92                        00            .byte	0
12356 2B93                        00            .byte	0
12357 2B94                        00            .byte	0
12358 2B95                        00            .byte	0
12359 2B96                        7C            .byte	$7C
12360 2B97                        C6            .byte	$C6
12361 2B98                        C0            .byte	$C0
12362 2B99                        C0            .byte	$C0
12363 2B9A                        C0            .byte	$C0
12364 2B9B                        C6            .byte	$C6
12365 2B9C                        7C            .byte	$7C
12366 2B9D                        00            .byte	0
12367 2B9E                        00            .byte	0
12368 2B9F                        00            .byte	0
12369 2BA0                        00            .byte	0
12370                                           ! 1468  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12371 2BA1                        00            .byte	0
12372 2BA2                        00            .byte	0
12373 2BA3                        1C            .byte	$1C
12374 2BA4                        0C            .byte	$C
12375 2BA5                        0C            .byte	$C
12376 2BA6                        3C            .byte	$3C
12377 2BA7                        6C            .byte	$6C
12378 2BA8                        CC            .byte	$CC
12379 2BA9                        CC            .byte	$CC
12380 2BAA                        CC            .byte	$CC
12381 2BAB                        CC            .byte	$CC
12382 2BAC                        76            .byte	$76
12383 2BAD                        00            .byte	0
12384 2BAE                        00            .byte	0
12385 2BAF                        00            .byte	0
12386 2BB0                        00            .byte	0
12387                                           ! 1469  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12388 2BB1                        00            .byte	0
12389 2BB2                        00            .byte	0
12390 2BB3                        00            .byte	0
12391 2BB4                        00            .byte	0
12392 2BB5                        00            .byte	0
12393 2BB6                        7C            .byte	$7C
12394 2BB7                        C6            .byte	$C6
12395 2BB8                        FE            .byte	$FE
12396 2BB9                        C0            .byte	$C0
12397 2BBA                        C0            .byte	$C0
12398 2BBB                        C6            .byte	$C6
12399 2BBC                        7C            .byte	$7C
12400 2BBD                        00            .byte	0
12401 2BBE                        00            .byte	0
12402 2BBF                        00            .byte	0
12403 2BC0                        00            .byte	0
12404                                           ! 1470  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12405 2BC1                        00            .byte	0
12406 2BC2                        00            .byte	0
12407 2BC3                        38            .byte	$38
12408 2BC4                        6C            .byte	$6C
12409 2BC5                        64            .byte	$64
12410 2BC6                        60            .byte	$60
12411 2BC7                        F0            .byte	$F0
12412 2BC8                        60            .byte	$60
12413 2BC9                        60            .byte	$60
12414 2BCA                        60            .byte	$60
12415 2BCB                        60            .byte	$60
12416 2BCC                        F0            .byte	$F0
12417 2BCD                        00            .byte	0
12418 2BCE                        00            .byte	0
12419 2BCF                        00            .byte	0
12420 2BD0                        00            .byte	0
12421                                           ! 1471  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12422 2BD1                        00            .byte	0
12423 2BD2                        00            .byte	0
12424 2BD3                        00            .byte	0
12425 2BD4                        00            .byte	0
12426 2BD5                        00            .byte	0
12427 2BD6                        76            .byte	$76
12428 2BD7                        CC            .byte	$CC
12429 2BD8                        CC            .byte	$CC
12430 2BD9                        CC            .byte	$CC
12431 2BDA                        CC            .byte	$CC
12432 2BDB                        CC            .byte	$CC
12433 2BDC                        7C            .byte	$7C
12434 2BDD                        0C            .byte	$C
12435 2BDE                        CC            .byte	$CC
12436 2BDF                        78            .byte	$78
12437 2BE0                        00            .byte	0
12438                                           ! 1472  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12439 2BE1                        00            .byte	0
12440 2BE2                        00            .byte	0
12441 2BE3                        E0            .byte	$E0
12442 2BE4                        60            .byte	$60
12443 2BE5                        60            .byte	$60
12444 2BE6                        6C            .byte	$6C
12445 2BE7                        76            .byte	$76
12446 2BE8                        66            .byte	$66
12447 2BE9                        66            .byte	$66
12448 2BEA                        66            .byte	$66
12449 2BEB                        66            .byte	$66
12450 2BEC                        E6            .byte	$E6
12451 2BED                        00            .byte	0
12452 2BEE                        00            .byte	0
12453 2BEF                        00            .byte	0
12454 2BF0                        00            .byte	0
12455                                           ! 1473  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12456 2BF1                        00            .byte	0
12457 2BF2                        00            .byte	0
12458 2BF3                        18            .byte	$18
12459 2BF4                        18            .byte	$18
12460 2BF5                        00            .byte	0
12461 2BF6                        38            .byte	$38
12462 2BF7                        18            .byte	$18
12463 2BF8                        18            .byte	$18
12464 2BF9                        18            .byte	$18
12465 2BFA                        18            .byte	$18
12466 2BFB                        18            .byte	$18
12467 2BFC                        3C            .byte	$3C
12468 2BFD                        00            .byte	0
12469 2BFE                        00            .byte	0
12470 2BFF                        00            .byte	0
12471 2C00                        00            .byte	0
12472                                           ! 1474  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12473 2C01                        00            .byte	0
12474 2C02                        00            .byte	0
12475 2C03                        06            .byte	6
12476 2C04                        06            .byte	6
12477 2C05                        00            .byte	0
12478 2C06                        0E            .byte	$E
12479 2C07                        06            .byte	6
12480 2C08                        06            .byte	6
12481 2C09                        06            .byte	6
12482 2C0A                        06            .byte	6
12483 2C0B                        06            .byte	6
12484 2C0C                        06            .byte	6
12485 2C0D                        66            .byte	$66
12486 2C0E                        66            .byte	$66
12487 2C0F                        3C            .byte	$3C
12488 2C10                        00            .byte	0
12489                                           ! 1475  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12490 2C11                        00            .byte	0
12491 2C12                        00            .byte	0
12492 2C13                        E0            .byte	$E0
12493 2C14                        60            .byte	$60
12494 2C15                        60            .byte	$60
12495 2C16                        66            .byte	$66
12496 2C17                        6C            .byte	$6C
12497 2C18                        78            .byte	$78
12498 2C19                        78            .byte	$78
12499 2C1A                        6C            .byte	$6C
12500 2C1B                        66            .byte	$66
12501 2C1C                        E6            .byte	$E6
12502 2C1D                        00            .byte	0
12503 2C1E                        00            .byte	0
12504 2C1F                        00            .byte	0
12505 2C20                        00            .byte	0
12506                                           ! 1476  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12507 2C21                        00            .byte	0
12508 2C22                        00            .byte	0
12509 2C23                        38            .byte	$38
12510 2C24                        18            .byte	$18
12511 2C25                        18            .byte	$18
12512 2C26                        18            .byte	$18
12513 2C27                        18            .byte	$18
12514 2C28                        18            .byte	$18
12515 2C29                        18            .byte	$18
12516 2C2A                        18            .byte	$18
12517 2C2B                        18            .byte	$18
12518 2C2C                        3C            .byte	$3C
12519 2C2D                        00            .byte	0
12520 2C2E                        00            .byte	0
12521 2C2F                        00            .byte	0
12522 2C30                        00            .byte	0
12523                                           ! 1477  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12524 2C31                        00            .byte	0
12525 2C32                        00            .byte	0
12526 2C33                        00            .byte	0
12527 2C34                        00            .byte	0
12528 2C35                        00            .byte	0
12529 2C36                        E6            .byte	$E6
12530 2C37                        FF            .byte	$FF
12531 2C38                        DB            .byte	$DB
12532 2C39                        DB            .byte	$DB
12533 2C3A                        DB            .byte	$DB
12534 2C3B                        DB            .byte	$DB
12535 2C3C                        DB            .byte	$DB
12536 2C3D                        00            .byte	0
12537 2C3E                        00            .byte	0
12538 2C3F                        00            .byte	0
12539 2C40                        00            .byte	0
12540                                           ! 1478  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12541 2C41                        00            .byte	0
12542 2C42                        00            .byte	0
12543 2C43                        00            .byte	0
12544 2C44                        00            .byte	0
12545 2C45                        00            .byte	0
12546 2C46                        DC            .byte	$DC
12547 2C47                        66            .byte	$66
12548 2C48                        66            .byte	$66
12549 2C49                        66            .byte	$66
12550 2C4A                        66            .byte	$66
12551 2C4B                        66            .byte	$66
12552 2C4C                        66            .byte	$66
12553 2C4D                        00            .byte	0
12554 2C4E                        00            .byte	0
12555 2C4F                        00            .byte	0
12556 2C50                        00            .byte	0
12557                                           ! 1479  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12558 2C51                        00            .byte	0
12559 2C52                        00            .byte	0
12560 2C53                        00            .byte	0
12561 2C54                        00            .byte	0
12562 2C55                        00            .byte	0
12563 2C56                        7C            .byte	$7C
12564 2C57                        C6            .byte	$C6
12565 2C58                        C6            .byte	$C6
12566 2C59                        C6            .byte	$C6
12567 2C5A                        C6            .byte	$C6
12568 2C5B                        C6            .byte	$C6
12569 2C5C                        7C            .byte	$7C
12570 2C5D                        00            .byte	0
12571 2C5E                        00            .byte	0
12572 2C5F                        00            .byte	0
12573 2C60                        00            .byte	0
12574                                           ! 1480  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12575 2C61                        00            .byte	0
12576 2C62                        00            .byte	0
12577 2C63                        00            .byte	0
12578 2C64                        00            .byte	0
12579 2C65                        00            .byte	0
12580 2C66                        DC            .byte	$DC
12581 2C67                        66            .byte	$66
12582 2C68                        66            .byte	$66
12583 2C69                        66            .byte	$66
12584 2C6A                        66            .byte	$66
12585 2C6B                        66            .byte	$66
12586 2C6C                        7C            .byte	$7C
12587 2C6D                        60            .byte	$60
12588 2C6E                        60            .byte	$60
12589 2C6F                        F0            .byte	$F0
12590 2C70                        00            .byte	0
12591                                           ! 1481  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12592 2C71                        00            .byte	0
12593 2C72                        00            .byte	0
12594 2C73                        00            .byte	0
12595 2C74                        00            .byte	0
12596 2C75                        00            .byte	0
12597 2C76                        76            .byte	$76
12598 2C77                        CC            .byte	$CC
12599 2C78                        CC            .byte	$CC
12600 2C79                        CC            .byte	$CC
12601 2C7A                        CC            .byte	$CC
12602 2C7B                        CC            .byte	$CC
12603 2C7C                        7C            .byte	$7C
12604 2C7D                        0C            .byte	$C
12605 2C7E                        0C            .byte	$C
12606 2C7F                        1E            .byte	$1E
12607 2C80                        00            .byte	0
12608                                           ! 1482  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12609 2C81                        00            .byte	0
12610 2C82                        00            .byte	0
12611 2C83                        00            .byte	0
12612 2C84                        00            .byte	0
12613 2C85                        00            .byte	0
12614 2C86                        DC            .byte	$DC
12615 2C87                        76            .byte	$76
12616 2C88                        66            .byte	$66
12617 2C89                        60            .byte	$60
12618 2C8A                        60            .byte	$60
12619 2C8B                        60            .byte	$60
12620 2C8C                        F0            .byte	$F0
12621 2C8D                        00            .byte	0
12622 2C8E                        00            .byte	0
12623 2C8F                        00            .byte	0
12624 2C90                        00            .byte	0
12625                                           ! 1483  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12626 2C91                        00            .byte	0
12627 2C92                        00            .byte	0
12628 2C93                        00            .byte	0
12629 2C94                        00            .byte	0
12630 2C95                        00            .byte	0
12631 2C96                        7C            .byte	$7C
12632 2C97                        C6            .byte	$C6
12633 2C98                        60            .byte	$60
12634 2C99                        38            .byte	$38
12635 2C9A                        0C            .byte	$C
12636 2C9B                        C6            .byte	$C6
12637 2C9C                        7C            .byte	$7C
12638 2C9D                        00            .byte	0
12639 2C9E                        00            .byte	0
12640 2C9F                        00            .byte	0
12641 2CA0                        00            .byte	0
12642                                           ! 1484  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12643 2CA1                        00            .byte	0
12644 2CA2                        00            .byte	0
12645 2CA3                        10            .byte	$10
12646 2CA4                        30            .byte	$30
12647 2CA5                        30            .byte	$30
12648 2CA6                        FC            .byte	$FC
12649 2CA7                        30            .byte	$30
12650 2CA8                        30            .byte	$30
12651 2CA9                        30            .byte	$30
12652 2CAA                        30            .byte	$30
12653 2CAB                        36            .byte	$36
12654 2CAC                        1C            .byte	$1C
12655 2CAD                        00            .byte	0
12656 2CAE                        00            .byte	0
12657 2CAF                        00            .byte	0
12658 2CB0                        00            .byte	0
12659                                           ! 1485  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12660 2CB1                        00            .byte	0
12661 2CB2                        00            .byte	0
12662 2CB3                        00            .byte	0
12663 2CB4                        00            .byte	0
12664 2CB5                        00            .byte	0
12665 2CB6                        CC            .byte	$CC
12666 2CB7                        CC            .byte	$CC
12667 2CB8                        CC            .byte	$CC
12668 2CB9                        CC            .byte	$CC
12669 2CBA                        CC            .byte	$CC
12670 2CBB                        CC            .byte	$CC
12671 2CBC                        76            .byte	$76
12672 2CBD                        00            .byte	0
12673 2CBE                        00            .byte	0
12674 2CBF                        00            .byte	0
12675 2CC0                        00            .byte	0
12676                                           ! 1486  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0
12677 2CC1                        00            .byte	0
12678 2CC2                        00            .byte	0
12679 2CC3                        00            .byte	0
12680 2CC4                        00            .byte	0
12681 2CC5                        00            .byte	0
12682 2CC6                        C3            .byte	$C3
12683 2CC7                        C3            .byte	$C3
12684 2CC8                        C3            .byte	$C3
12685 2CC9                        C3            .byte	$C3
12686                                           ! 1486 x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12687 2CCA                        66            .byte	$66
12688 2CCB                        3C            .byte	$3C
12689 2CCC                        18            .byte	$18
12690 2CCD                        00            .byte	0
12691 2CCE                        00            .byte	0
12692 2CCF                        00            .byte	0
12693 2CD0                        00            .byte	0
12694                                           ! 1487  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12695 2CD1                        00            .byte	0
12696 2CD2                        00            .byte	0
12697 2CD3                        00            .byte	0
12698 2CD4                        00            .byte	0
12699 2CD5                        00            .byte	0
12700 2CD6                        C3            .byte	$C3
12701 2CD7                        C3            .byte	$C3
12702 2CD8                        C3            .byte	$C3
12703 2CD9                        DB            .byte	$DB
12704 2CDA                        DB            .byte	$DB
12705 2CDB                        FF            .byte	$FF
12706 2CDC                        66            .byte	$66
12707 2CDD                        00            .byte	0
12708 2CDE                        00            .byte	0
12709 2CDF                        00            .byte	0
12710 2CE0                        00            .byte	0
12711                                           ! 1488  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12712 2CE1                        00            .byte	0
12713 2CE2                        00            .byte	0
12714 2CE3                        00            .byte	0
12715 2CE4                        00            .byte	0
12716 2CE5                        00            .byte	0
12717 2CE6                        C3            .byte	$C3
12718 2CE7                        66            .byte	$66
12719 2CE8                        3C            .byte	$3C
12720 2CE9                        18            .byte	$18
12721 2CEA                        3C            .byte	$3C
12722 2CEB                        66            .byte	$66
12723 2CEC                        C3            .byte	$C3
12724 2CED                        00            .byte	0
12725 2CEE                        00            .byte	0
12726 2CEF                        00            .byte	0
12727 2CF0                        00            .byte	0
12728                                           ! 1489  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12729 2CF1                        00            .byte	0
12730 2CF2                        00            .byte	0
12731 2CF3                        00            .byte	0
12732 2CF4                        00            .byte	0
12733 2CF5                        00            .byte	0
12734 2CF6                        C6            .byte	$C6
12735 2CF7                        C6            .byte	$C6
12736 2CF8                        C6            .byte	$C6
12737 2CF9                        C6            .byte	$C6
12738 2CFA                        C6            .byte	$C6
12739 2CFB                        C6            .byte	$C6
12740 2CFC                        7E            .byte	$7E
12741 2CFD                        06            .byte	6
12742 2CFE                        0C            .byte	$C
12743 2CFF                        F8            .byte	$F8
12744 2D00                        00            .byte	0
12745                                           ! 1490  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12746 2D01                        00            .byte	0
12747 2D02                        00            .byte	0
12748 2D03                        00            .byte	0
12749 2D04                        00            .byte	0
12750 2D05                        00            .byte	0
12751 2D06                        FE            .byte	$FE
12752 2D07                        CC            .byte	$CC
12753 2D08                        18            .byte	$18
12754 2D09                        30            .byte	$30
12755 2D0A                        60            .byte	$60
12756 2D0B                        C6            .byte	$C6
12757 2D0C                        FE            .byte	$FE
12758 2D0D                        00            .byte	0
12759 2D0E                        00            .byte	0
12760 2D0F                        00            .byte	0
12761 2D10                        00            .byte	0
12762                                           ! 1491  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12763 2D11                        00            .byte	0
12764 2D12                        00            .byte	0
12765 2D13                        0E            .byte	$E
12766 2D14                        18            .byte	$18
12767 2D15                        18            .byte	$18
12768 2D16                        18            .byte	$18
12769 2D17                        70            .byte	$70
12770 2D18                        18            .byte	$18
12771 2D19                        18            .byte	$18
12772 2D1A                        18            .byte	$18
12773 2D1B                        18            .byte	$18
12774 2D1C                        0E            .byte	$E
12775 2D1D                        00            .byte	0
12776 2D1E                        00            .byte	0
12777 2D1F                        00            .byte	0
12778 2D20                        00            .byte	0
12779                                           ! 1492  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12780 2D21                        00            .byte	0
12781 2D22                        00            .byte	0
12782 2D23                        18            .byte	$18
12783 2D24                        18            .byte	$18
12784 2D25                        18            .byte	$18
12785 2D26                        18            .byte	$18
12786 2D27                        00            .byte	0
12787 2D28                        18            .byte	$18
12788 2D29                        18            .byte	$18
12789 2D2A                        18            .byte	$18
12790 2D2B                        18            .byte	$18
12791 2D2C                        18            .byte	$18
12792 2D2D                        00            .byte	0
12793 2D2E                        00            .byte	0
12794 2D2F                        00            .byte	0
12795 2D30                        00            .byte	0
12796                                           ! 1493  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12797 2D31                        00            .byte	0
12798 2D32                        00            .byte	0
12799 2D33                        70            .byte	$70
12800 2D34                        18            .byte	$18
12801 2D35                        18            .byte	$18
12802 2D36                        18            .byte	$18
12803 2D37                        0E            .byte	$E
12804 2D38                        18            .byte	$18
12805 2D39                        18            .byte	$18
12806 2D3A                        18            .byte	$18
12807 2D3B                        18            .byte	$18
12808 2D3C                        70            .byte	$70
12809 2D3D                        00            .byte	0
12810 2D3E                        00            .byte	0
12811 2D3F                        00            .byte	0
12812 2D40                        00            .byte	0
12813                                           ! 1494  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12814 2D41                        00            .byte	0
12815 2D42                        00            .byte	0
12816 2D43                        76            .byte	$76
12817 2D44                        DC            .byte	$DC
12818 2D45                        00            .byte	0
12819 2D46                        00            .byte	0
12820 2D47                        00            .byte	0
12821 2D48                        00            .byte	0
12822 2D49                        00            .byte	0
12823 2D4A                        00            .byte	0
12824 2D4B                        00            .byte	0
12825 2D4C                        00            .byte	0
12826 2D4D                        00            .byte	0
12827 2D4E                        00            .byte	0
12828 2D4F                        00            .byte	0
12829 2D50                        00            .byte	0
12830                                           ! 1495  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12831 2D51                        00            .byte	0
12832 2D52                        00            .byte	0
12833 2D53                        00            .byte	0
12834 2D54                        00            .byte	0
12835 2D55                        10            .byte	$10
12836 2D56                        38            .byte	$38
12837 2D57                        6C            .byte	$6C
12838 2D58                        C6            .byte	$C6
12839 2D59                        C6            .byte	$C6
12840 2D5A                        C6            .byte	$C6
12841 2D5B                        FE            .byte	$FE
12842 2D5C                        00            .byte	0
12843 2D5D                        00            .byte	0
12844 2D5E                        00            .byte	0
12845 2D5F                        00            .byte	0
12846 2D60                        00            .byte	0
12847                                           ! 1496  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12848 2D61                        00            .byte	0
12849 2D62                        00            .byte	0
12850 2D63                        3C            .byte	$3C
12851 2D64                        66            .byte	$66
12852 2D65                        C2            .byte	$C2
12853 2D66                        C0            .byte	$C0
12854 2D67                        C0            .byte	$C0
12855 2D68                        C0            .byte	$C0
12856 2D69                        C2            .byte	$C2
12857 2D6A                        66            .byte	$66
12858 2D6B                        3C            .byte	$3C
12859 2D6C                        0C            .byte	$C
12860 2D6D                        06            .byte	6
12861 2D6E                        7C            .byte	$7C
12862 2D6F                        00            .byte	0
12863 2D70                        00            .byte	0
12864                                           ! 1497  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12865 2D71                        00            .byte	0
12866 2D72                        00            .byte	0
12867 2D73                        CC            .byte	$CC
12868 2D74                        00            .byte	0
12869 2D75                        00            .byte	0
12870 2D76                        CC            .byte	$CC
12871 2D77                        CC            .byte	$CC
12872 2D78                        CC            .byte	$CC
12873 2D79                        CC            .byte	$CC
12874 2D7A                        CC            .byte	$CC
12875 2D7B                        CC            .byte	$CC
12876 2D7C                        76            .byte	$76
12877 2D7D                        00            .byte	0
12878 2D7E                        00            .byte	0
12879 2D7F                        00            .byte	0
12880 2D80                        00            .byte	0
12881                                           ! 1498  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12882 2D81                        00            .byte	0
12883 2D82                        0C            .byte	$C
12884 2D83                        18            .byte	$18
12885 2D84                        30            .byte	$30
12886 2D85                        00            .byte	0
12887 2D86                        7C            .byte	$7C
12888 2D87                        C6            .byte	$C6
12889 2D88                        FE            .byte	$FE
12890 2D89                        C0            .byte	$C0
12891 2D8A                        C0            .byte	$C0
12892 2D8B                        C6            .byte	$C6
12893 2D8C                        7C            .byte	$7C
12894 2D8D                        00            .byte	0
12895 2D8E                        00            .byte	0
12896 2D8F                        00            .byte	0
12897 2D90                        00            .byte	0
12898                                           ! 1499  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12899 2D91                        00            .byte	0
12900 2D92                        10            .byte	$10
12901 2D93                        38            .byte	$38
12902 2D94                        6C            .byte	$6C
12903 2D95                        00            .byte	0
12904 2D96                        78            .byte	$78
12905 2D97                        0C            .byte	$C
12906 2D98                        7C            .byte	$7C
12907 2D99                        CC            .byte	$CC
12908 2D9A                        CC            .byte	$CC
12909 2D9B                        CC            .byte	$CC
12910 2D9C                        76            .byte	$76
12911 2D9D                        00            .byte	0
12912 2D9E                        00            .byte	0
12913 2D9F                        00            .byte	0
12914 2DA0                        00            .byte	0
12915                                           ! 1500  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12916 2DA1                        00            .byte	0
12917 2DA2                        00            .byte	0
12918 2DA3                        CC            .byte	$CC
12919 2DA4                        00            .byte	0
12920 2DA5                        00            .byte	0
12921 2DA6                        78            .byte	$78
12922 2DA7                        0C            .byte	$C
12923 2DA8                        7C            .byte	$7C
12924 2DA9                        CC            .byte	$CC
12925 2DAA                        CC            .byte	$CC
12926 2DAB                        CC            .byte	$CC
12927 2DAC                        76            .byte	$76
12928 2DAD                        00            .byte	0
12929 2DAE                        00            .byte	0
12930 2DAF                        00            .byte	0
12931 2DB0                        00            .byte	0
12932                                           ! 1501  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12933 2DB1                        00            .byte	0
12934 2DB2                        60            .byte	$60
12935 2DB3                        30            .byte	$30
12936 2DB4                        18            .byte	$18
12937 2DB5                        00            .byte	0
12938 2DB6                        78            .byte	$78
12939 2DB7                        0C            .byte	$C
12940 2DB8                        7C            .byte	$7C
12941 2DB9                        CC            .byte	$CC
12942 2DBA                        CC            .byte	$CC
12943 2DBB                        CC            .byte	$CC
12944 2DBC                        76            .byte	$76
12945 2DBD                        00            .byte	0
12946 2DBE                        00            .byte	0
12947 2DBF                        00            .byte	0
12948 2DC0                        00            .byte	0
12949                                           ! 1502  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12950 2DC1                        00            .byte	0
12951 2DC2                        38            .byte	$38
12952 2DC3                        6C            .byte	$6C
12953 2DC4                        38            .byte	$38
12954 2DC5                        00            .byte	0
12955 2DC6                        78            .byte	$78
12956 2DC7                        0C            .byte	$C
12957 2DC8                        7C            .byte	$7C
12958 2DC9                        CC            .byte	$CC
12959 2DCA                        CC            .byte	$CC
12960 2DCB                        CC            .byte	$CC
12961 2DCC                        76            .byte	$76
12962 2DCD                        00            .byte	0
12963 2DCE                        00            .byte	0
12964 2DCF                        00            .byte	0
12965 2DD0                        00            .byte	0
12966                                           ! 1503  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12967 2DD1                        00            .byte	0
12968 2DD2                        00            .byte	0
12969 2DD3                        00            .byte	0
12970 2DD4                        00            .byte	0
12971 2DD5                        3C            .byte	$3C
12972 2DD6                        66            .byte	$66
12973 2DD7                        60            .byte	$60
12974 2DD8                        60            .byte	$60
12975 2DD9                        66            .byte	$66
12976 2DDA                        3C            .byte	$3C
12977 2DDB                        0C            .byte	$C
12978 2DDC                        06            .byte	6
12979 2DDD                        3C            .byte	$3C
12980 2DDE                        00            .byte	0
12981 2DDF                        00            .byte	0
12982 2DE0                        00            .byte	0
12983                                           ! 1504  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12984 2DE1                        00            .byte	0
12985 2DE2                        10            .byte	$10
12986 2DE3                        38            .byte	$38
12987 2DE4                        6C            .byte	$6C
12988 2DE5                        00            .byte	0
12989 2DE6                        7C            .byte	$7C
12990 2DE7                        C6            .byte	$C6
12991 2DE8                        FE            .byte	$FE
12992 2DE9                        C0            .byte	$C0
12993 2DEA                        C0            .byte	$C0
12994 2DEB                        C6            .byte	$C6
12995 2DEC                        7C            .byte	$7C
12996 2DED                        00            .byte	0
12997 2DEE                        00            .byte	0
12998 2DEF                        00            .byte	0
12999 2DF0                        00            .byte	0
13000                                           ! 1505  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13001 2DF1                        00            .byte	0
13002 2DF2                        00            .byte	0
13003 2DF3                        C6            .byte	$C6
13004 2DF4                        00            .byte	0
13005 2DF5                        00            .byte	0
13006 2DF6                        7C            .byte	$7C
13007 2DF7                        C6            .byte	$C6
13008 2DF8                        FE            .byte	$FE
13009 2DF9                        C0            .byte	$C0
13010 2DFA                        C0            .byte	$C0
13011 2DFB                        C6            .byte	$C6
13012 2DFC                        7C            .byte	$7C
13013 2DFD                        00            .byte	0
13014 2DFE                        00            .byte	0
13015 2DFF                        00            .byte	0
13016 2E00                        00            .byte	0
13017                                           ! 1506  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13018 2E01                        00            .byte	0
13019 2E02                        60            .byte	$60
13020 2E03                        30            .byte	$30
13021 2E04                        18            .byte	$18
13022 2E05                        00            .byte	0
13023 2E06                        7C            .byte	$7C
13024 2E07                        C6            .byte	$C6
13025 2E08                        FE            .byte	$FE
13026 2E09                        C0            .byte	$C0
13027 2E0A                        C0            .byte	$C0
13028 2E0B                        C6            .byte	$C6
13029 2E0C                        7C            .byte	$7C
13030 2E0D                        00            .byte	0
13031 2E0E                        00            .byte	0
13032 2E0F                        00            .byte	0
13033 2E10                        00            .byte	0
13034                                           ! 1507  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 
13035 2E11                        00            .byte	0
13036 2E12                        00            .byte	0
13037 2E13                        66            .byte	$66
13038 2E14                        00            .byte	0
13039 2E15                        00            .byte	0
13040 2E16                        38            .byte	$38
13041 2E17                        18            .byte	$18
13042 2E18                        18            .byte	$18
13043 2E19                        18            .byte	$18
13044 2E1A                        18            .byte	$18
13045 2E1B                        18            .byte	$18
13046                                           ! 1507 0x3c, 0x00, 0x00, 0x00, 0x00,
13047 2E1C                        3C            .byte	$3C
13048 2E1D                        00            .byte	0
13049 2E1E                        00            .byte	0
13050 2E1F                        00            .byte	0
13051 2E20                        00            .byte	0
13052                                           ! 1508  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13053 2E21                        00            .byte	0
13054 2E22                        18            .byte	$18
13055 2E23                        3C            .byte	$3C
13056 2E24                        66            .byte	$66
13057 2E25                        00            .byte	0
13058 2E26                        38            .byte	$38
13059 2E27                        18            .byte	$18
13060 2E28                        18            .byte	$18
13061 2E29                        18            .byte	$18
13062 2E2A                        18            .byte	$18
13063 2E2B                        18            .byte	$18
13064 2E2C                        3C            .byte	$3C
13065 2E2D                        00            .byte	0
13066 2E2E                        00            .byte	0
13067 2E2F                        00            .byte	0
13068 2E30                        00            .byte	0
13069                                           ! 1509  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13070 2E31                        00            .byte	0
13071 2E32                        60            .byte	$60
13072 2E33                        30            .byte	$30
13073 2E34                        18            .byte	$18
13074 2E35                        00            .byte	0
13075 2E36                        38            .byte	$38
13076 2E37                        18            .byte	$18
13077 2E38                        18            .byte	$18
13078 2E39                        18            .byte	$18
13079 2E3A                        18            .byte	$18
13080 2E3B                        18            .byte	$18
13081 2E3C                        3C            .byte	$3C
13082 2E3D                        00            .byte	0
13083 2E3E                        00            .byte	0
13084 2E3F                        00            .byte	0
13085 2E40                        00            .byte	0
13086                                           ! 1510  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13087 2E41                        00            .byte	0
13088 2E42                        C6            .byte	$C6
13089 2E43                        00            .byte	0
13090 2E44                        10            .byte	$10
13091 2E45                        38            .byte	$38
13092 2E46                        6C            .byte	$6C
13093 2E47                        C6            .byte	$C6
13094 2E48                        C6            .byte	$C6
13095 2E49                        FE            .byte	$FE
13096 2E4A                        C6            .byte	$C6
13097 2E4B                        C6            .byte	$C6
13098 2E4C                        C6            .byte	$C6
13099 2E4D                        00            .byte	0
13100 2E4E                        00            .byte	0
13101 2E4F                        00            .byte	0
13102 2E50                        00            .byte	0
13103                                           ! 1511  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13104 2E51                        38            .byte	$38
13105 2E52                        6C            .byte	$6C
13106 2E53                        38            .byte	$38
13107 2E54                        00            .byte	0
13108 2E55                        38            .byte	$38
13109 2E56                        6C            .byte	$6C
13110 2E57                        C6            .byte	$C6
13111 2E58                        C6            .byte	$C6
13112 2E59                        FE            .byte	$FE
13113 2E5A                        C6            .byte	$C6
13114 2E5B                        C6            .byte	$C6
13115 2E5C                        C6            .byte	$C6
13116 2E5D                        00            .byte	0
13117 2E5E                        00            .byte	0
13118 2E5F                        00            .byte	0
13119 2E60                        00            .byte	0
13120                                           ! 1512  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
13121 2E61                        18            .byte	$18
13122 2E62                        30            .byte	$30
13123 2E63                        60            .byte	$60
13124 2E64                        00            .byte	0
13125 2E65                        FE            .byte	$FE
13126 2E66                        66            .byte	$66
13127 2E67                        60            .byte	$60
13128 2E68                        7C            .byte	$7C
13129 2E69                        60            .byte	$60
13130 2E6A                        60            .byte	$60
13131 2E6B                        66            .byte	$66
13132 2E6C                        FE            .byte	$FE
13133 2E6D                        00            .byte	0
13134 2E6E                        00            .byte	0
13135 2E6F                        00            .byte	0
13136 2E70                        00            .byte	0
13137                                           ! 1513  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
13138 2E71                        00            .byte	0
13139 2E72                        00            .byte	0
13140 2E73                        00            .byte	0
13141 2E74                        00            .byte	0
13142 2E75                        00            .byte	0
13143 2E76                        6E            .byte	$6E
13144 2E77                        3B            .byte	$3B
13145 2E78                        1B            .byte	$1B
13146 2E79                        7E            .byte	$7E
13147 2E7A                        D8            .byte	$D8
13148 2E7B                        DC            .byte	$DC
13149 2E7C                        77            .byte	$77
13150 2E7D                        00            .byte	0
13151 2E7E                        00            .byte	0
13152 2E7F                        00            .byte	0
13153 2E80                        00            .byte	0
13154                                           ! 1514  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
13155 2E81                        00            .byte	0
13156 2E82                        00            .byte	0
13157 2E83                        3E            .byte	$3E
13158 2E84                        6C            .byte	$6C
13159 2E85                        CC            .byte	$CC
13160 2E86                        CC            .byte	$CC
13161 2E87                        FE            .byte	$FE
13162 2E88                        CC            .byte	$CC
13163 2E89                        CC            .byte	$CC
13164 2E8A                        CC            .byte	$CC
13165 2E8B                        CC            .byte	$CC
13166 2E8C                        CE            .byte	$CE
13167 2E8D                        00            .byte	0
13168 2E8E                        00            .byte	0
13169 2E8F                        00            .byte	0
13170 2E90                        00            .byte	0
13171                                           ! 1515  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13172 2E91                        00            .byte	0
13173 2E92                        10            .byte	$10
13174 2E93                        38            .byte	$38
13175 2E94                        6C            .byte	$6C
13176 2E95                        00            .byte	0
13177 2E96                        7C            .byte	$7C
13178 2E97                        C6            .byte	$C6
13179 2E98                        C6            .byte	$C6
13180 2E99                        C6            .byte	$C6
13181 2E9A                        C6            .byte	$C6
13182 2E9B                        C6            .byte	$C6
13183 2E9C                        7C            .byte	$7C
13184 2E9D                        00            .byte	0
13185 2E9E                        00            .byte	0
13186 2E9F                        00            .byte	0
13187 2EA0                        00            .byte	0
13188                                           ! 1516  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13189 2EA1                        00            .byte	0
13190 2EA2                        00            .byte	0
13191 2EA3                        C6            .byte	$C6
13192 2EA4                        00            .byte	0
13193 2EA5                        00            .byte	0
13194 2EA6                        7C            .byte	$7C
13195 2EA7                        C6            .byte	$C6
13196 2EA8                        C6            .byte	$C6
13197 2EA9                        C6            .byte	$C6
13198 2EAA                        C6            .byte	$C6
13199 2EAB                        C6            .byte	$C6
13200 2EAC                        7C            .byte	$7C
13201 2EAD                        00            .byte	0
13202 2EAE                        00            .byte	0
13203 2EAF                        00            .byte	0
13204 2EB0                        00            .byte	0
13205                                           ! 1517  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13206 2EB1                        00            .byte	0
13207 2EB2                        60            .byte	$60
13208 2EB3                        30            .byte	$30
13209 2EB4                        18            .byte	$18
13210 2EB5                        00            .byte	0
13211 2EB6                        7C            .byte	$7C
13212 2EB7                        C6            .byte	$C6
13213 2EB8                        C6            .byte	$C6
13214 2EB9                        C6            .byte	$C6
13215 2EBA                        C6            .byte	$C6
13216 2EBB                        C6            .byte	$C6
13217 2EBC                        7C            .byte	$7C
13218 2EBD                        00            .byte	0
13219 2EBE                        00            .byte	0
13220 2EBF                        00            .byte	0
13221 2EC0                        00            .byte	0
13222                                           ! 1518  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13223 2EC1                        00            .byte	0
13224 2EC2                        30            .byte	$30
13225 2EC3                        78            .byte	$78
13226 2EC4                        CC            .byte	$CC
13227 2EC5                        00            .byte	0
13228 2EC6                        CC            .byte	$CC
13229 2EC7                        CC            .byte	$CC
13230 2EC8                        CC            .byte	$CC
13231 2EC9                        CC            .byte	$CC
13232 2ECA                        CC            .byte	$CC
13233 2ECB                        CC            .byte	$CC
13234 2ECC                        76            .byte	$76
13235 2ECD                        00            .byte	0
13236 2ECE                        00            .byte	0
13237 2ECF                        00            .byte	0
13238 2ED0                        00            .byte	0
13239                                           ! 1519  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13240 2ED1                        00            .byte	0
13241 2ED2                        60            .byte	$60
13242 2ED3                        30            .byte	$30
13243 2ED4                        18            .byte	$18
13244 2ED5                        00            .byte	0
13245 2ED6                        CC            .byte	$CC
13246 2ED7                        CC            .byte	$CC
13247 2ED8                        CC            .byte	$CC
13248 2ED9                        CC            .byte	$CC
13249 2EDA                        CC            .byte	$CC
13250 2EDB                        CC            .byte	$CC
13251 2EDC                        76            .byte	$76
13252 2EDD                        00            .byte	0
13253 2EDE                        00            .byte	0
13254 2EDF                        00            .byte	0
13255 2EE0                        00            .byte	0
13256                                           ! 1520  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13257 2EE1                        00            .byte	0
13258 2EE2                        00            .byte	0
13259 2EE3                        C6            .byte	$C6
13260 2EE4                        00            .byte	0
13261 2EE5                        00            .byte	0
13262 2EE6                        C6            .byte	$C6
13263 2EE7                        C6            .byte	$C6
13264 2EE8                        C6            .byte	$C6
13265 2EE9                        C6            .byte	$C6
13266 2EEA                        C6            .byte	$C6
13267 2EEB                        C6            .byte	$C6
13268 2EEC                        7E            .byte	$7E
13269 2EED                        06            .byte	6
13270 2EEE                        0C            .byte	$C
13271 2EEF                        78            .byte	$78
13272 2EF0                        00            .byte	0
13273                                           ! 1521  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13274 2EF1                        00            .byte	0
13275 2EF2                        C6            .byte	$C6
13276 2EF3                        00            .byte	0
13277 2EF4                        7C            .byte	$7C
13278 2EF5                        C6            .byte	$C6
13279 2EF6                        C6            .byte	$C6
13280 2EF7                        C6            .byte	$C6
13281 2EF8                        C6            .byte	$C6
13282 2EF9                        C6            .byte	$C6
13283 2EFA                        C6            .byte	$C6
13284 2EFB                        C6            .byte	$C6
13285 2EFC                        7C            .byte	$7C
13286 2EFD                        00            .byte	0
13287 2EFE                        00            .byte	0
13288 2EFF                        00            .byte	0
13289 2F00                        00            .byte	0
13290                                           ! 1522  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13291 2F01                        00            .byte	0
13292 2F02                        C6            .byte	$C6
13293 2F03                        00            .byte	0
13294 2F04                        C6            .byte	$C6
13295 2F05                        C6            .byte	$C6
13296 2F06                        C6            .byte	$C6
13297 2F07                        C6            .byte	$C6
13298 2F08                        C6            .byte	$C6
13299 2F09                        C6            .byte	$C6
13300 2F0A                        C6            .byte	$C6
13301 2F0B                        C6            .byte	$C6
13302 2F0C                        7C            .byte	$7C
13303 2F0D                        00            .byte	0
13304 2F0E                        00            .byte	0
13305 2F0F                        00            .byte	0
13306 2F10                        00            .byte	0
13307                                           ! 1523  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13308 2F11                        00            .byte	0
13309 2F12                        18            .byte	$18
13310 2F13                        18            .byte	$18
13311 2F14                        7E            .byte	$7E
13312 2F15                        C3            .byte	$C3
13313 2F16                        C0            .byte	$C0
13314 2F17                        C0            .byte	$C0
13315 2F18                        C0            .byte	$C0
13316 2F19                        C3            .byte	$C3
13317 2F1A                        7E            .byte	$7E
13318 2F1B                        18            .byte	$18
13319 2F1C                        18            .byte	$18
13320 2F1D                        00            .byte	0
13321 2F1E                        00            .byte	0
13322 2F1F                        00            .byte	0
13323 2F20                        00            .byte	0
13324                                           ! 1524  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13325 2F21                        00            .byte	0
13326 2F22                        38            .byte	$38
13327 2F23                        6C            .byte	$6C
13328 2F24                        64            .byte	$64
13329 2F25                        60            .byte	$60
13330 2F26                        F0            .byte	$F0
13331 2F27                        60            .byte	$60
13332 2F28                        60            .byte	$60
13333 2F29                        60            .byte	$60
13334 2F2A                        60            .byte	$60
13335 2F2B                        E6            .byte	$E6
13336 2F2C                        FC            .byte	$FC
13337 2F2D                        00            .byte	0
13338 2F2E                        00            .byte	0
13339 2F2F                        00            .byte	0
13340 2F30                        00            .byte	0
13341                                           ! 1525  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13342 2F31                        00            .byte	0
13343 2F32                        00            .byte	0
13344 2F33                        C3            .byte	$C3
13345 2F34                        66            .byte	$66
13346 2F35                        3C            .byte	$3C
13347 2F36                        18            .byte	$18
13348 2F37                        FF            .byte	$FF
13349 2F38                        18            .byte	$18
13350 2F39                        FF            .byte	$FF
13351 2F3A                        18            .byte	$18
13352 2F3B                        18            .byte	$18
13353 2F3C                        18            .byte	$18
13354 2F3D                        00            .byte	0
13355 2F3E                        00            .byte	0
13356 2F3F                        00            .byte	0
13357 2F40                        00            .byte	0
13358                                           ! 1526  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13359 2F41                        00            .byte	0
13360 2F42                        FC            .byte	$FC
13361 2F43                        66            .byte	$66
13362 2F44                        66            .byte	$66
13363 2F45                        7C            .byte	$7C
13364 2F46                        62            .byte	$62
13365 2F47                        66            .byte	$66
13366 2F48                        6F            .byte	$6F
13367 2F49                        66            .byte	$66
13368 2F4A                        66            .byte	$66
13369 2F4B                        66            .byte	$66
13370 2F4C                        F3            .byte	$F3
13371 2F4D                        00            .byte	0
13372 2F4E                        00            .byte	0
13373 2F4F                        00            .byte	0
13374 2F50                        00            .byte	0
13375                                           ! 1527  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13376 2F51                        00            .byte	0
13377 2F52                        0E            .byte	$E
13378 2F53                        1B            .byte	$1B
13379 2F54                        18            .byte	$18
13380 2F55                        18            .byte	$18
13381 2F56                        18            .byte	$18
13382 2F57                        7E            .byte	$7E
13383 2F58                        18            .byte	$18
13384 2F59                        18            .byte	$18
13385 2F5A                        18            .byte	$18
13386 2F5B                        18            .byte	$18
13387 2F5C                        18            .byte	$18
13388 2F5D                        D8            .byte	$D8
13389 2F5E                        70            .byte	$70
13390 2F5F                        00            .byte	0
13391 2F60                        00            .byte	0
13392                                           ! 1528  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
13393 2F61                        00            .byte	0
13394 2F62                        18            .byte	$18
13395 2F63                        30            .byte	$30
13396 2F64                        60            .byte	$60
13397 2F65                        00            .byte	0
13398 2F66                        78            .byte	$78
13399 2F67                        0C            .byte	$C
13400 2F68                        7C            .byte	$7C
13401 2F69                        CC            .byte	$CC
13402 2F6A                        CC            .byte	$CC
13403 2F6B                        CC            .byte	$CC
13404 2F6C                        76            .byte	$76
13405                                           ! 1528  0x00, 0x00, 0x00,
13406 2F6D                        00            .byte	0
13407 2F6E                        00            .byte	0
13408 2F6F                        00            .byte	0
13409 2F70                        00            .byte	0
13410                                           ! 1529  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13411 2F71                        00            .byte	0
13412 2F72                        0C            .byte	$C
13413 2F73                        18            .byte	$18
13414 2F74                        30            .byte	$30
13415 2F75                        00            .byte	0
13416 2F76                        38            .byte	$38
13417 2F77                        18            .byte	$18
13418 2F78                        18            .byte	$18
13419 2F79                        18            .byte	$18
13420 2F7A                        18            .byte	$18
13421 2F7B                        18            .byte	$18
13422 2F7C                        3C            .byte	$3C
13423 2F7D                        00            .byte	0
13424 2F7E                        00            .byte	0
13425 2F7F                        00            .byte	0
13426 2F80                        00            .byte	0
13427                                           ! 1530  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13428 2F81                        00            .byte	0
13429 2F82                        18            .byte	$18
13430 2F83                        30            .byte	$30
13431 2F84                        60            .byte	$60
13432 2F85                        00            .byte	0
13433 2F86                        7C            .byte	$7C
13434 2F87                        C6            .byte	$C6
13435 2F88                        C6            .byte	$C6
13436 2F89                        C6            .byte	$C6
13437 2F8A                        C6            .byte	$C6
13438 2F8B                        C6            .byte	$C6
13439 2F8C                        7C            .byte	$7C
13440 2F8D                        00            .byte	0
13441 2F8E                        00            .byte	0
13442 2F8F                        00            .byte	0
13443 2F90                        00            .byte	0
13444                                           ! 1531  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13445 2F91                        00            .byte	0
13446 2F92                        18            .byte	$18
13447 2F93                        30            .byte	$30
13448 2F94                        60            .byte	$60
13449 2F95                        00            .byte	0
13450 2F96                        CC            .byte	$CC
13451 2F97                        CC            .byte	$CC
13452 2F98                        CC            .byte	$CC
13453 2F99                        CC            .byte	$CC
13454 2F9A                        CC            .byte	$CC
13455 2F9B                        CC            .byte	$CC
13456 2F9C                        76            .byte	$76
13457 2F9D                        00            .byte	0
13458 2F9E                        00            .byte	0
13459 2F9F                        00            .byte	0
13460 2FA0                        00            .byte	0
13461                                           ! 1532  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13462 2FA1                        00            .byte	0
13463 2FA2                        00            .byte	0
13464 2FA3                        76            .byte	$76
13465 2FA4                        DC            .byte	$DC
13466 2FA5                        00            .byte	0
13467 2FA6                        DC            .byte	$DC
13468 2FA7                        66            .byte	$66
13469 2FA8                        66            .byte	$66
13470 2FA9                        66            .byte	$66
13471 2FAA                        66            .byte	$66
13472 2FAB                        66            .byte	$66
13473 2FAC                        66            .byte	$66
13474 2FAD                        00            .byte	0
13475 2FAE                        00            .byte	0
13476 2FAF                        00            .byte	0
13477 2FB0                        00            .byte	0
13478                                           ! 1533  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13479 2FB1                        76            .byte	$76
13480 2FB2                        DC            .byte	$DC
13481 2FB3                        00            .byte	0
13482 2FB4                        C6            .byte	$C6
13483 2FB5                        E6            .byte	$E6
13484 2FB6                        F6            .byte	$F6
13485 2FB7                        FE            .byte	$FE
13486 2FB8                        DE            .byte	$DE
13487 2FB9                        CE            .byte	$CE
13488 2FBA                        C6            .byte	$C6
13489 2FBB                        C6            .byte	$C6
13490 2FBC                        C6            .byte	$C6
13491 2FBD                        00            .byte	0
13492 2FBE                        00            .byte	0
13493 2FBF                        00            .byte	0
13494 2FC0                        00            .byte	0
13495                                           ! 1534  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13496 2FC1                        00            .byte	0
13497 2FC2                        3C            .byte	$3C
13498 2FC3                        6C            .byte	$6C
13499 2FC4                        6C            .byte	$6C
13500 2FC5                        3E            .byte	$3E
13501 2FC6                        00            .byte	0
13502 2FC7                        7E            .byte	$7E
13503 2FC8                        00            .byte	0
13504 2FC9                        00            .byte	0
13505 2FCA                        00            .byte	0
13506 2FCB                        00            .byte	0
13507 2FCC                        00            .byte	0
13508 2FCD                        00            .byte	0
13509 2FCE                        00            .byte	0
13510 2FCF                        00            .byte	0
13511 2FD0                        00            .byte	0
13512                                           ! 1535  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13513 2FD1                        00            .byte	0
13514 2FD2                        38            .byte	$38
13515 2FD3                        6C            .byte	$6C
13516 2FD4                        6C            .byte	$6C
13517 2FD5                        38            .byte	$38
13518 2FD6                        00            .byte	0
13519 2FD7                        7C            .byte	$7C
13520 2FD8                        00            .byte	0
13521 2FD9                        00            .byte	0
13522 2FDA                        00            .byte	0
13523 2FDB                        00            .byte	0
13524 2FDC                        00            .byte	0
13525 2FDD                        00            .byte	0
13526 2FDE                        00            .byte	0
13527 2FDF                        00            .byte	0
13528 2FE0                        00            .byte	0
13529                                           ! 1536  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13530 2FE1                        00            .byte	0
13531 2FE2                        00            .byte	0
13532 2FE3                        30            .byte	$30
13533 2FE4                        30            .byte	$30
13534 2FE5                        00            .byte	0
13535 2FE6                        30            .byte	$30
13536 2FE7                        30            .byte	$30
13537 2FE8                        60            .byte	$60
13538 2FE9                        C0            .byte	$C0
13539 2FEA                        C6            .byte	$C6
13540 2FEB                        C6            .byte	$C6
13541 2FEC                        7C            .byte	$7C
13542 2FED                        00            .byte	0
13543 2FEE                        00            .byte	0
13544 2FEF                        00            .byte	0
13545 2FF0                        00            .byte	0
13546                                           ! 1537  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13547 2FF1                        00            .byte	0
13548 2FF2                        00            .byte	0
13549 2FF3                        00            .byte	0
13550 2FF4                        00            .byte	0
13551 2FF5                        00            .byte	0
13552 2FF6                        00            .byte	0
13553 2FF7                        FE            .byte	$FE
13554 2FF8                        C0            .byte	$C0
13555 2FF9                        C0            .byte	$C0
13556 2FFA                        C0            .byte	$C0
13557 2FFB                        C0            .byte	$C0
13558 2FFC                        00            .byte	0
13559 2FFD                        00            .byte	0
13560 2FFE                        00            .byte	0
13561 2FFF                        00            .byte	0
13562 3000                        00            .byte	0
13563                                           ! 1538  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13564 3001                        00            .byte	0
13565 3002                        00            .byte	0
13566 3003                        00            .byte	0
13567 3004                        00            .byte	0
13568 3005                        00            .byte	0
13569 3006                        00            .byte	0
13570 3007                        FE            .byte	$FE
13571 3008                        06            .byte	6
13572 3009                        06            .byte	6
13573 300A                        06            .byte	6
13574 300B                        06            .byte	6
13575 300C                        00            .byte	0
13576 300D                        00            .byte	0
13577 300E                        00            .byte	0
13578 300F                        00            .byte	0
13579 3010                        00            .byte	0
13580                                           ! 1539  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13581 3011                        00            .byte	0
13582 3012                        C0            .byte	$C0
13583 3013                        C0            .byte	$C0
13584 3014                        C2            .byte	$C2
13585 3015                        C6            .byte	$C6
13586 3016                        CC            .byte	$CC
13587 3017                        18            .byte	$18
13588 3018                        30            .byte	$30
13589 3019                        60            .byte	$60
13590 301A                        CE            .byte	$CE
13591 301B                        9B            .byte	$9B
13592 301C                        06            .byte	6
13593 301D                        0C            .byte	$C
13594 301E                        1F            .byte	$1F
13595 301F                        00            .byte	0
13596 3020                        00            .byte	0
13597                                           ! 1540  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13598 3021                        00            .byte	0
13599 3022                        C0            .byte	$C0
13600 3023                        C0            .byte	$C0
13601 3024                        C2            .byte	$C2
13602 3025                        C6            .byte	$C6
13603 3026                        CC            .byte	$CC
13604 3027                        18            .byte	$18
13605 3028                        30            .byte	$30
13606 3029                        66            .byte	$66
13607 302A                        CE            .byte	$CE
13608 302B                        96            .byte	$96
13609 302C                        3E            .byte	$3E
13610 302D                        06            .byte	6
13611 302E                        06            .byte	6
13612 302F                        00            .byte	0
13613 3030                        00            .byte	0
13614                                           ! 1541  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13615 3031                        00            .byte	0
13616 3032                        00            .byte	0
13617 3033                        18            .byte	$18
13618 3034                        18            .byte	$18
13619 3035                        00            .byte	0
13620 3036                        18            .byte	$18
13621 3037                        18            .byte	$18
13622 3038                        18            .byte	$18
13623 3039                        3C            .byte	$3C
13624 303A                        3C            .byte	$3C
13625 303B                        3C            .byte	$3C
13626 303C                        18            .byte	$18
13627 303D                        00            .byte	0
13628 303E                        00            .byte	0
13629 303F                        00            .byte	0
13630 3040                        00            .byte	0
13631                                           ! 1542  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13632 3041                        00            .byte	0
13633 3042                        00            .byte	0
13634 3043                        00            .byte	0
13635 3044                        00            .byte	0
13636 3045                        00            .byte	0
13637 3046                        36            .byte	$36
13638 3047                        6C            .byte	$6C
13639 3048                        D8            .byte	$D8
13640 3049                        6C            .byte	$6C
13641 304A                        36            .byte	$36
13642 304B                        00            .byte	0
13643 304C                        00            .byte	0
13644 304D                        00            .byte	0
13645 304E                        00            .byte	0
13646 304F                        00            .byte	0
13647 3050                        00            .byte	0
13648                                           ! 1543  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13649 3051                        00            .byte	0
13650 3052                        00            .byte	0
13651 3053                        00            .byte	0
13652 3054                        00            .byte	0
13653 3055                        00            .byte	0
13654 3056                        D8            .byte	$D8
13655 3057                        6C            .byte	$6C
13656 3058                        36            .byte	$36
13657 3059                        6C            .byte	$6C
13658 305A                        D8            .byte	$D8
13659 305B                        00            .byte	0
13660 305C                        00            .byte	0
13661 305D                        00            .byte	0
13662 305E                        00            .byte	0
13663 305F                        00            .byte	0
13664 3060                        00            .byte	0
13665                                           ! 1544  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13666 3061                        11            .byte	$11
13667 3062                        44            .byte	$44
13668 3063                        11            .byte	$11
13669 3064                        44            .byte	$44
13670 3065                        11            .byte	$11
13671 3066                        44            .byte	$44
13672 3067                        11            .byte	$11
13673 3068                        44            .byte	$44
13674 3069                        11            .byte	$11
13675 306A                        44            .byte	$44
13676 306B                        11            .byte	$11
13677 306C                        44            .byte	$44
13678 306D                        11            .byte	$11
13679 306E                        44            .byte	$44
13680 306F                        11            .byte	$11
13681 3070                        44            .byte	$44
13682                                           ! 1545  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13683 3071                        55            .byte	$55
13684 3072                        AA            .byte	$AA
13685 3073                        55            .byte	$55
13686 3074                        AA            .byte	$AA
13687 3075                        55            .byte	$55
13688 3076                        AA            .byte	$AA
13689 3077                        55            .byte	$55
13690 3078                        AA            .byte	$AA
13691 3079                        55            .byte	$55
13692 307A                        AA            .byte	$AA
13693 307B                        55            .byte	$55
13694 307C                        AA            .byte	$AA
13695 307D                        55            .byte	$55
13696 307E                        AA            .byte	$AA
13697 307F                        55            .byte	$55
13698 3080                        AA            .byte	$AA
13699                                           ! 1546  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13700 3081                        DD            .byte	$DD
13701 3082                        77            .byte	$77
13702 3083                        DD            .byte	$DD
13703 3084                        77            .byte	$77
13704 3085                        DD            .byte	$DD
13705 3086                        77            .byte	$77
13706 3087                        DD            .byte	$DD
13707 3088                        77            .byte	$77
13708 3089                        DD            .byte	$DD
13709 308A                        77            .byte	$77
13710 308B                        DD            .byte	$DD
13711 308C                        77            .byte	$77
13712 308D                        DD            .byte	$DD
13713 308E                        77            .byte	$77
13714 308F                        DD            .byte	$DD
13715 3090                        77            .byte	$77
13716                                           ! 1547  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13717 3091                        18            .byte	$18
13718 3092                        18            .byte	$18
13719 3093                        18            .byte	$18
13720 3094                        18            .byte	$18
13721 3095                        18            .byte	$18
13722 3096                        18            .byte	$18
13723 3097                        18            .byte	$18
13724 3098                        18            .byte	$18
13725 3099                        18            .byte	$18
13726 309A                        18            .byte	$18
13727 309B                        18            .byte	$18
13728 309C                        18            .byte	$18
13729 309D                        18            .byte	$18
13730 309E                        18            .byte	$18
13731 309F                        18            .byte	$18
13732 30A0                        18            .byte	$18
13733                                           ! 1548  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13734 30A1                        18            .byte	$18
13735 30A2                        18            .byte	$18
13736 30A3                        18            .byte	$18
13737 30A4                        18            .byte	$18
13738 30A5                        18            .byte	$18
13739 30A6                        18            .byte	$18
13740 30A7                        18            .byte	$18
13741 30A8                        F8            .byte	$F8
13742 30A9                        18            .byte	$18
13743 30AA                        18            .byte	$18
13744 30AB                        18            .byte	$18
13745 30AC                        18            .byte	$18
13746 30AD                        18            .byte	$18
13747 30AE                        18            .byte	$18
13748 30AF                        18            .byte	$18
13749 30B0                        18            .byte	$18
13750                                           ! 1549  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18
13751 30B1                        18            .byte	$18
13752 30B2                        18            .byte	$18
13753 30B3                        18            .byte	$18
13754 30B4                        18            .byte	$18
13755 30B5                        18            .byte	$18
13756 30B6                        F8            .byte	$F8
13757 30B7                        18            .byte	$18
13758 30B8                        F8            .byte	$F8
13759 30B9                        18            .byte	$18
13760 30BA                        18            .byte	$18
13761 30BB                        18            .byte	$18
13762 30BC                        18            .byte	$18
13763 30BD                        18            .byte	$18
13764 30BE                        18            .byte	$18
13765                                           ! 1549 , 0x18,
13766 30BF                        18            .byte	$18
13767 30C0                        18            .byte	$18
13768                                           ! 1550  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13769 30C1                        36            .byte	$36
13770 30C2                        36            .byte	$36
13771 30C3                        36            .byte	$36
13772 30C4                        36            .byte	$36
13773 30C5                        36            .byte	$36
13774 30C6                        36            .byte	$36
13775 30C7                        36            .byte	$36
13776 30C8                        F6            .byte	$F6
13777 30C9                        36            .byte	$36
13778 30CA                        36            .byte	$36
13779 30CB                        36            .byte	$36
13780 30CC                        36            .byte	$36
13781 30CD                        36            .byte	$36
13782 30CE                        36            .byte	$36
13783 30CF                        36            .byte	$36
13784 30D0                        36            .byte	$36
13785                                           ! 1551  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13786 30D1                        00            .byte	0
13787 30D2                        00            .byte	0
13788 30D3                        00            .byte	0
13789 30D4                        00            .byte	0
13790 30D5                        00            .byte	0
13791 30D6                        00            .byte	0
13792 30D7                        00            .byte	0
13793 30D8                        FE            .byte	$FE
13794 30D9                        36            .byte	$36
13795 30DA                        36            .byte	$36
13796 30DB                        36            .byte	$36
13797 30DC                        36            .byte	$36
13798 30DD                        36            .byte	$36
13799 30DE                        36            .byte	$36
13800 30DF                        36            .byte	$36
13801 30E0                        36            .byte	$36
13802                                           ! 1552  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13803 30E1                        00            .byte	0
13804 30E2                        00            .byte	0
13805 30E3                        00            .byte	0
13806 30E4                        00            .byte	0
13807 30E5                        00            .byte	0
13808 30E6                        F8            .byte	$F8
13809 30E7                        18            .byte	$18
13810 30E8                        F8            .byte	$F8
13811 30E9                        18            .byte	$18
13812 30EA                        18            .byte	$18
13813 30EB                        18            .byte	$18
13814 30EC                        18            .byte	$18
13815 30ED                        18            .byte	$18
13816 30EE                        18            .byte	$18
13817 30EF                        18            .byte	$18
13818 30F0                        18            .byte	$18
13819                                           ! 1553  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13820 30F1                        36            .byte	$36
13821 30F2                        36            .byte	$36
13822 30F3                        36            .byte	$36
13823 30F4                        36            .byte	$36
13824 30F5                        36            .byte	$36
13825 30F6                        F6            .byte	$F6
13826 30F7                        06            .byte	6
13827 30F8                        F6            .byte	$F6
13828 30F9                        36            .byte	$36
13829 30FA                        36            .byte	$36
13830 30FB                        36            .byte	$36
13831 30FC                        36            .byte	$36
13832 30FD                        36            .byte	$36
13833 30FE                        36            .byte	$36
13834 30FF                        36            .byte	$36
13835 3100                        36            .byte	$36
13836                                           ! 1554  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13837 3101                        36            .byte	$36
13838 3102                        36            .byte	$36
13839 3103                        36            .byte	$36
13840 3104                        36            .byte	$36
13841 3105                        36            .byte	$36
13842 3106                        36            .byte	$36
13843 3107                        36            .byte	$36
13844 3108                        36            .byte	$36
13845 3109                        36            .byte	$36
13846 310A                        36            .byte	$36
13847 310B                        36            .byte	$36
13848 310C                        36            .byte	$36
13849 310D                        36            .byte	$36
13850 310E                        36            .byte	$36
13851 310F                        36            .byte	$36
13852 3110                        36            .byte	$36
13853                                           ! 1555  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13854 3111                        00            .byte	0
13855 3112                        00            .byte	0
13856 3113                        00            .byte	0
13857 3114                        00            .byte	0
13858 3115                        00            .byte	0
13859 3116                        FE            .byte	$FE
13860 3117                        06            .byte	6
13861 3118                        F6            .byte	$F6
13862 3119                        36            .byte	$36
13863 311A                        36            .byte	$36
13864 311B                        36            .byte	$36
13865 311C                        36            .byte	$36
13866 311D                        36            .byte	$36
13867 311E                        36            .byte	$36
13868 311F                        36            .byte	$36
13869 3120                        36            .byte	$36
13870                                           ! 1556  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13871 3121                        36            .byte	$36
13872 3122                        36            .byte	$36
13873 3123                        36            .byte	$36
13874 3124                        36            .byte	$36
13875 3125                        36            .byte	$36
13876 3126                        F6            .byte	$F6
13877 3127                        06            .byte	6
13878 3128                        FE            .byte	$FE
13879 3129                        00            .byte	0
13880 312A                        00            .byte	0
13881 312B                        00            .byte	0
13882 312C                        00            .byte	0
13883 312D                        00            .byte	0
13884 312E                        00            .byte	0
13885 312F                        00            .byte	0
13886 3130                        00            .byte	0
13887                                           ! 1557  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13888 3131                        36            .byte	$36
13889 3132                        36            .byte	$36
13890 3133                        36            .byte	$36
13891 3134                        36            .byte	$36
13892 3135                        36            .byte	$36
13893 3136                        36            .byte	$36
13894 3137                        36            .byte	$36
13895 3138                        FE            .byte	$FE
13896 3139                        00            .byte	0
13897 313A                        00            .byte	0
13898 313B                        00            .byte	0
13899 313C                        00            .byte	0
13900 313D                        00            .byte	0
13901 313E                        00            .byte	0
13902 313F                        00            .byte	0
13903 3140                        00            .byte	0
13904                                           ! 1558  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13905 3141                        18            .byte	$18
13906 3142                        18            .byte	$18
13907 3143                        18            .byte	$18
13908 3144                        18            .byte	$18
13909 3145                        18            .byte	$18
13910 3146                        F8            .byte	$F8
13911 3147                        18            .byte	$18
13912 3148                        F8            .byte	$F8
13913 3149                        00            .byte	0
13914 314A                        00            .byte	0
13915 314B                        00            .byte	0
13916 314C                        00            .byte	0
13917 314D                        00            .byte	0
13918 314E                        00            .byte	0
13919 314F                        00            .byte	0
13920 3150                        00            .byte	0
13921                                           ! 1559  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13922 3151                        00            .byte	0
13923 3152                        00            .byte	0
13924 3153                        00            .byte	0
13925 3154                        00            .byte	0
13926 3155                        00            .byte	0
13927 3156                        00            .byte	0
13928 3157                        00            .byte	0
13929 3158                        F8            .byte	$F8
13930 3159                        18            .byte	$18
13931 315A                        18            .byte	$18
13932 315B                        18            .byte	$18
13933 315C                        18            .byte	$18
13934 315D                        18            .byte	$18
13935 315E                        18            .byte	$18
13936 315F                        18            .byte	$18
13937 3160                        18            .byte	$18
13938                                           ! 1560  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13939 3161                        18            .byte	$18
13940 3162                        18            .byte	$18
13941 3163                        18            .byte	$18
13942 3164                        18            .byte	$18
13943 3165                        18            .byte	$18
13944 3166                        18            .byte	$18
13945 3167                        18            .byte	$18
13946 3168                        1F            .byte	$1F
13947 3169                        00            .byte	0
13948 316A                        00            .byte	0
13949 316B                        00            .byte	0
13950 316C                        00            .byte	0
13951 316D                        00            .byte	0
13952 316E                        00            .byte	0
13953 316F                        00            .byte	0
13954 3170                        00            .byte	0
13955                                           ! 1561  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13956 3171                        18            .byte	$18
13957 3172                        18            .byte	$18
13958 3173                        18            .byte	$18
13959 3174                        18            .byte	$18
13960 3175                        18            .byte	$18
13961 3176                        18            .byte	$18
13962 3177                        18            .byte	$18
13963 3178                        FF            .byte	$FF
13964 3179                        00            .byte	0
13965 317A                        00            .byte	0
13966 317B                        00            .byte	0
13967 317C                        00            .byte	0
13968 317D                        00            .byte	0
13969 317E                        00            .byte	0
13970 317F                        00            .byte	0
13971 3180                        00            .byte	0
13972                                           ! 1562  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13973 3181                        00            .byte	0
13974 3182                        00            .byte	0
13975 3183                        00            .byte	0
13976 3184                        00            .byte	0
13977 3185                        00            .byte	0
13978 3186                        00            .byte	0
13979 3187                        00            .byte	0
13980 3188                        FF            .byte	$FF
13981 3189                        18            .byte	$18
13982 318A                        18            .byte	$18
13983 318B                        18            .byte	$18
13984 318C                        18            .byte	$18
13985 318D                        18            .byte	$18
13986 318E                        18            .byte	$18
13987 318F                        18            .byte	$18
13988 3190                        18            .byte	$18
13989                                           ! 1563  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13990 3191                        18            .byte	$18
13991 3192                        18            .byte	$18
13992 3193                        18            .byte	$18
13993 3194                        18            .byte	$18
13994 3195                        18            .byte	$18
13995 3196                        18            .byte	$18
13996 3197                        18            .byte	$18
13997 3198                        1F            .byte	$1F
13998 3199                        18            .byte	$18
13999 319A                        18            .byte	$18
14000 319B                        18            .byte	$18
14001 319C                        18            .byte	$18
14002 319D                        18            .byte	$18
14003 319E                        18            .byte	$18
14004 319F                        18            .byte	$18
14005 31A0                        18            .byte	$18
14006                                           ! 1564  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14007 31A1                        00            .byte	0
14008 31A2                        00            .byte	0
14009 31A3                        00            .byte	0
14010 31A4                        00            .byte	0
14011 31A5                        00            .byte	0
14012 31A6                        00            .byte	0
14013 31A7                        00            .byte	0
14014 31A8                        FF            .byte	$FF
14015 31A9                        00            .byte	0
14016 31AA                        00            .byte	0
14017 31AB                        00            .byte	0
14018 31AC                        00            .byte	0
14019 31AD                        00            .byte	0
14020 31AE                        00            .byte	0
14021 31AF                        00            .byte	0
14022 31B0                        00            .byte	0
14023                                           ! 1565  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14024 31B1                        18            .byte	$18
14025 31B2                        18            .byte	$18
14026 31B3                        18            .byte	$18
14027 31B4                        18            .byte	$18
14028 31B5                        18            .byte	$18
14029 31B6                        18            .byte	$18
14030 31B7                        18            .byte	$18
14031 31B8                        FF            .byte	$FF
14032 31B9                        18            .byte	$18
14033 31BA                        18            .byte	$18
14034 31BB                        18            .byte	$18
14035 31BC                        18            .byte	$18
14036 31BD                        18            .byte	$18
14037 31BE                        18            .byte	$18
14038 31BF                        18            .byte	$18
14039 31C0                        18            .byte	$18
14040                                           ! 1566  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14041 31C1                        18            .byte	$18
14042 31C2                        18            .byte	$18
14043 31C3                        18            .byte	$18
14044 31C4                        18            .byte	$18
14045 31C5                        18            .byte	$18
14046 31C6                        1F            .byte	$1F
14047 31C7                        18            .byte	$18
14048 31C8                        1F            .byte	$1F
14049 31C9                        18            .byte	$18
14050 31CA                        18            .byte	$18
14051 31CB                        18            .byte	$18
14052 31CC                        18            .byte	$18
14053 31CD                        18            .byte	$18
14054 31CE                        18            .byte	$18
14055 31CF                        18            .byte	$18
14056 31D0                        18            .byte	$18
14057                                           ! 1567  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14058 31D1                        36            .byte	$36
14059 31D2                        36            .byte	$36
14060 31D3                        36            .byte	$36
14061 31D4                        36            .byte	$36
14062 31D5                        36            .byte	$36
14063 31D6                        36            .byte	$36
14064 31D7                        36            .byte	$36
14065 31D8                        37            .byte	$37
14066 31D9                        36            .byte	$36
14067 31DA                        36            .byte	$36
14068 31DB                        36            .byte	$36
14069 31DC                        36            .byte	$36
14070 31DD                        36            .byte	$36
14071 31DE                        36            .byte	$36
14072 31DF                        36            .byte	$36
14073 31E0                        36            .byte	$36
14074                                           ! 1568  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14075 31E1                        36            .byte	$36
14076 31E2                        36            .byte	$36
14077 31E3                        36            .byte	$36
14078 31E4                        36            .byte	$36
14079 31E5                        36            .byte	$36
14080 31E6                        37            .byte	$37
14081 31E7                        30            .byte	$30
14082 31E8                        3F            .byte	$3F
14083 31E9                        00            .byte	0
14084 31EA                        00            .byte	0
14085 31EB                        00            .byte	0
14086 31EC                        00            .byte	0
14087 31ED                        00            .byte	0
14088 31EE                        00            .byte	0
14089 31EF                        00            .byte	0
14090 31F0                        00            .byte	0
14091                                           ! 1569  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14092 31F1                        00            .byte	0
14093 31F2                        00            .byte	0
14094 31F3                        00            .byte	0
14095 31F4                        00            .byte	0
14096 31F5                        00            .byte	0
14097 31F6                        3F            .byte	$3F
14098 31F7                        30            .byte	$30
14099 31F8                        37            .byte	$37
14100 31F9                        36            .byte	$36
14101 31FA                        36            .byte	$36
14102 31FB                        36            .byte	$36
14103 31FC                        36            .byte	$36
14104 31FD                        36            .byte	$36
14105 31FE                        36            .byte	$36
14106 31FF                        36            .byte	$36
14107 3200                        36            .byte	$36
14108                                           ! 1570  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14109 3201                        36            .byte	$36
14110 3202                        36            .byte	$36
14111 3203                        36            .byte	$36
14112 3204                        36            .byte	$36
14113 3205                        36            .byte	$36
14114 3206                        F7            .byte	$F7
14115 3207                        00            .byte	0
14116 3208                        FF            .byte	$FF
14117 3209                        00            .byte	0
14118 320A                        00            .byte	0
14119 320B                        00            .byte	0
14120 320C                        00            .byte	0
14121 320D                        00            .byte	0
14122 320E                        00            .byte	0
14123 320F                        00            .byte	0
14124 3210                        00            .byte	0
14125                                           ! 1571  0x
14126                                           ! 1571 00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14127 3211                        00            .byte	0
14128 3212                        00            .byte	0
14129 3213                        00            .byte	0
14130 3214                        00            .byte	0
14131 3215                        00            .byte	0
14132 3216                        FF            .byte	$FF
14133 3217                        00            .byte	0
14134 3218                        F7            .byte	$F7
14135 3219                        36            .byte	$36
14136 321A                        36            .byte	$36
14137 321B                        36            .byte	$36
14138 321C                        36            .byte	$36
14139 321D                        36            .byte	$36
14140 321E                        36            .byte	$36
14141 321F                        36            .byte	$36
14142 3220                        36            .byte	$36
14143                                           ! 1572  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14144 3221                        36            .byte	$36
14145 3222                        36            .byte	$36
14146 3223                        36            .byte	$36
14147 3224                        36            .byte	$36
14148 3225                        36            .byte	$36
14149 3226                        37            .byte	$37
14150 3227                        30            .byte	$30
14151 3228                        37            .byte	$37
14152 3229                        36            .byte	$36
14153 322A                        36            .byte	$36
14154 322B                        36            .byte	$36
14155 322C                        36            .byte	$36
14156 322D                        36            .byte	$36
14157 322E                        36            .byte	$36
14158 322F                        36            .byte	$36
14159 3230                        36            .byte	$36
14160                                           ! 1573  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14161 3231                        00            .byte	0
14162 3232                        00            .byte	0
14163 3233                        00            .byte	0
14164 3234                        00            .byte	0
14165 3235                        00            .byte	0
14166 3236                        FF            .byte	$FF
14167 3237                        00            .byte	0
14168 3238                        FF            .byte	$FF
14169 3239                        00            .byte	0
14170 323A                        00            .byte	0
14171 323B                        00            .byte	0
14172 323C                        00            .byte	0
14173 323D                        00            .byte	0
14174 323E                        00            .byte	0
14175 323F                        00            .byte	0
14176 3240                        00            .byte	0
14177                                           ! 1574  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14178 3241                        36            .byte	$36
14179 3242                        36            .byte	$36
14180 3243                        36            .byte	$36
14181 3244                        36            .byte	$36
14182 3245                        36            .byte	$36
14183 3246                        F7            .byte	$F7
14184 3247                        00            .byte	0
14185 3248                        F7            .byte	$F7
14186 3249                        36            .byte	$36
14187 324A                        36            .byte	$36
14188 324B                        36            .byte	$36
14189 324C                        36            .byte	$36
14190 324D                        36            .byte	$36
14191 324E                        36            .byte	$36
14192 324F                        36            .byte	$36
14193 3250                        36            .byte	$36
14194                                           ! 1575  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14195 3251                        18            .byte	$18
14196 3252                        18            .byte	$18
14197 3253                        18            .byte	$18
14198 3254                        18            .byte	$18
14199 3255                        18            .byte	$18
14200 3256                        FF            .byte	$FF
14201 3257                        00            .byte	0
14202 3258                        FF            .byte	$FF
14203 3259                        00            .byte	0
14204 325A                        00            .byte	0
14205 325B                        00            .byte	0
14206 325C                        00            .byte	0
14207 325D                        00            .byte	0
14208 325E                        00            .byte	0
14209 325F                        00            .byte	0
14210 3260                        00            .byte	0
14211                                           ! 1576  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14212 3261                        36            .byte	$36
14213 3262                        36            .byte	$36
14214 3263                        36            .byte	$36
14215 3264                        36            .byte	$36
14216 3265                        36            .byte	$36
14217 3266                        36            .byte	$36
14218 3267                        36            .byte	$36
14219 3268                        FF            .byte	$FF
14220 3269                        00            .byte	0
14221 326A                        00            .byte	0
14222 326B                        00            .byte	0
14223 326C                        00            .byte	0
14224 326D                        00            .byte	0
14225 326E                        00            .byte	0
14226 326F                        00            .byte	0
14227 3270                        00            .byte	0
14228                                           ! 1577  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14229 3271                        00            .byte	0
14230 3272                        00            .byte	0
14231 3273                        00            .byte	0
14232 3274                        00            .byte	0
14233 3275                        00            .byte	0
14234 3276                        FF            .byte	$FF
14235 3277                        00            .byte	0
14236 3278                        FF            .byte	$FF
14237 3279                        18            .byte	$18
14238 327A                        18            .byte	$18
14239 327B                        18            .byte	$18
14240 327C                        18            .byte	$18
14241 327D                        18            .byte	$18
14242 327E                        18            .byte	$18
14243 327F                        18            .byte	$18
14244 3280                        18            .byte	$18
14245                                           ! 1578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14246 3281                        00            .byte	0
14247 3282                        00            .byte	0
14248 3283                        00            .byte	0
14249 3284                        00            .byte	0
14250 3285                        00            .byte	0
14251 3286                        00            .byte	0
14252 3287                        00            .byte	0
14253 3288                        FF            .byte	$FF
14254 3289                        36            .byte	$36
14255 328A                        36            .byte	$36
14256 328B                        36            .byte	$36
14257 328C                        36            .byte	$36
14258 328D                        36            .byte	$36
14259 328E                        36            .byte	$36
14260 328F                        36            .byte	$36
14261 3290                        36            .byte	$36
14262                                           ! 1579  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14263 3291                        36            .byte	$36
14264 3292                        36            .byte	$36
14265 3293                        36            .byte	$36
14266 3294                        36            .byte	$36
14267 3295                        36            .byte	$36
14268 3296                        36            .byte	$36
14269 3297                        36            .byte	$36
14270 3298                        3F            .byte	$3F
14271 3299                        00            .byte	0
14272 329A                        00            .byte	0
14273 329B                        00            .byte	0
14274 329C                        00            .byte	0
14275 329D                        00            .byte	0
14276 329E                        00            .byte	0
14277 329F                        00            .byte	0
14278 32A0                        00            .byte	0
14279                                           ! 1580  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14280 32A1                        18            .byte	$18
14281 32A2                        18            .byte	$18
14282 32A3                        18            .byte	$18
14283 32A4                        18            .byte	$18
14284 32A5                        18            .byte	$18
14285 32A6                        1F            .byte	$1F
14286 32A7                        18            .byte	$18
14287 32A8                        1F            .byte	$1F
14288 32A9                        00            .byte	0
14289 32AA                        00            .byte	0
14290 32AB                        00            .byte	0
14291 32AC                        00            .byte	0
14292 32AD                        00            .byte	0
14293 32AE                        00            .byte	0
14294 32AF                        00            .byte	0
14295 32B0                        00            .byte	0
14296                                           ! 1581  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14297 32B1                        00            .byte	0
14298 32B2                        00            .byte	0
14299 32B3                        00            .byte	0
14300 32B4                        00            .byte	0
14301 32B5                        00            .byte	0
14302 32B6                        1F            .byte	$1F
14303 32B7                        18            .byte	$18
14304 32B8                        1F            .byte	$1F
14305 32B9                        18            .byte	$18
14306 32BA                        18            .byte	$18
14307 32BB                        18            .byte	$18
14308 32BC                        18            .byte	$18
14309 32BD                        18            .byte	$18
14310 32BE                        18            .byte	$18
14311 32BF                        18            .byte	$18
14312 32C0                        18            .byte	$18
14313                                           ! 1582  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14314 32C1                        00            .byte	0
14315 32C2                        00            .byte	0
14316 32C3                        00            .byte	0
14317 32C4                        00            .byte	0
14318 32C5                        00            .byte	0
14319 32C6                        00            .byte	0
14320 32C7                        00            .byte	0
14321 32C8                        3F            .byte	$3F
14322 32C9                        36            .byte	$36
14323 32CA                        36            .byte	$36
14324 32CB                        36            .byte	$36
14325 32CC                        36            .byte	$36
14326 32CD                        36            .byte	$36
14327 32CE                        36            .byte	$36
14328 32CF                        36            .byte	$36
14329 32D0                        36            .byte	$36
14330                                           ! 1583  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14331 32D1                        36            .byte	$36
14332 32D2                        36            .byte	$36
14333 32D3                        36            .byte	$36
14334 32D4                        36            .byte	$36
14335 32D5                        36            .byte	$36
14336 32D6                        36            .byte	$36
14337 32D7                        36            .byte	$36
14338 32D8                        FF            .byte	$FF
14339 32D9                        36            .byte	$36
14340 32DA                        36            .byte	$36
14341 32DB                        36            .byte	$36
14342 32DC                        36            .byte	$36
14343 32DD                        36            .byte	$36
14344 32DE                        36            .byte	$36
14345 32DF                        36            .byte	$36
14346 32E0                        36            .byte	$36
14347                                           ! 1584  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14348 32E1                        18            .byte	$18
14349 32E2                        18            .byte	$18
14350 32E3                        18            .byte	$18
14351 32E4                        18            .byte	$18
14352 32E5                        18            .byte	$18
14353 32E6                        FF            .byte	$FF
14354 32E7                        18            .byte	$18
14355 32E8                        FF            .byte	$FF
14356 32E9                        18            .byte	$18
14357 32EA                        18            .byte	$18
14358 32EB                        18            .byte	$18
14359 32EC                        18            .byte	$18
14360 32ED                        18            .byte	$18
14361 32EE                        18            .byte	$18
14362 32EF                        18            .byte	$18
14363 32F0                        18            .byte	$18
14364                                           ! 1585  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14365 32F1                        18            .byte	$18
14366 32F2                        18            .byte	$18
14367 32F3                        18            .byte	$18
14368 32F4                        18            .byte	$18
14369 32F5                        18            .byte	$18
14370 32F6                        18            .byte	$18
14371 32F7                        18            .byte	$18
14372 32F8                        F8            .byte	$F8
14373 32F9                        00            .byte	0
14374 32FA                        00            .byte	0
14375 32FB                        00            .byte	0
14376 32FC                        00            .byte	0
14377 32FD                        00            .byte	0
14378 32FE                        00            .byte	0
14379 32FF                        00            .byte	0
14380 3300                        00            .byte	0
14381                                           ! 1586  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14382 3301                        00            .byte	0
14383 3302                        00            .byte	0
14384 3303                        00            .byte	0
14385 3304                        00            .byte	0
14386 3305                        00            .byte	0
14387 3306                        00            .byte	0
14388 3307                        00            .byte	0
14389 3308                        1F            .byte	$1F
14390 3309                        18            .byte	$18
14391 330A                        18            .byte	$18
14392 330B                        18            .byte	$18
14393 330C                        18            .byte	$18
14394 330D                        18            .byte	$18
14395 330E                        18            .byte	$18
14396 330F                        18            .byte	$18
14397 3310                        18            .byte	$18
14398                                           ! 1587  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14399 3311                        FF            .byte	$FF
14400 3312                        FF            .byte	$FF
14401 3313                        FF            .byte	$FF
14402 3314                        FF            .byte	$FF
14403 3315                        FF            .byte	$FF
14404 3316                        FF            .byte	$FF
14405 3317                        FF            .byte	$FF
14406 3318                        FF            .byte	$FF
14407 3319                        FF            .byte	$FF
14408 331A                        FF            .byte	$FF
14409 331B                        FF            .byte	$FF
14410 331C                        FF            .byte	$FF
14411 331D                        FF            .byte	$FF
14412 331E                        FF            .byte	$FF
14413 331F                        FF            .byte	$FF
14414 3320                        FF            .byte	$FF
14415                                           ! 1588  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14416 3321                        00            .byte	0
14417 3322                        00            .byte	0
14418 3323                        00            .byte	0
14419 3324                        00            .byte	0
14420 3325                        00            .byte	0
14421 3326                        00            .byte	0
14422 3327                        00            .byte	0
14423 3328                        FF            .byte	$FF
14424 3329                        FF            .byte	$FF
14425 332A                        FF            .byte	$FF
14426 332B                        FF            .byte	$FF
14427 332C                        FF            .byte	$FF
14428 332D                        FF            .byte	$FF
14429 332E                        FF            .byte	$FF
14430 332F                        FF            .byte	$FF
14431 3330                        FF            .byte	$FF
14432                                           ! 1589  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14433 3331                        F0            .byte	$F0
14434 3332                        F0            .byte	$F0
14435 3333                        F0            .byte	$F0
14436 3334                        F0            .byte	$F0
14437 3335                        F0            .byte	$F0
14438 3336                        F0            .byte	$F0
14439 3337                        F0            .byte	$F0
14440 3338                        F0            .byte	$F0
14441 3339                        F0            .byte	$F0
14442 333A                        F0            .byte	$F0
14443 333B                        F0            .byte	$F0
14444 333C                        F0            .byte	$F0
14445 333D                        F0            .byte	$F0
14446 333E                        F0            .byte	$F0
14447 333F                        F0            .byte	$F0
14448 3340                        F0            .byte	$F0
14449                                           ! 1590  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14450 3341                        0F            .byte	$F
14451 3342                        0F            .byte	$F
14452 3343                        0F            .byte	$F
14453 3344                        0F            .byte	$F
14454 3345                        0F            .byte	$F
14455 3346                        0F            .byte	$F
14456 3347                        0F            .byte	$F
14457 3348                        0F            .byte	$F
14458 3349                        0F            .byte	$F
14459 334A                        0F            .byte	$F
14460 334B                        0F            .byte	$F
14461 334C                        0F            .byte	$F
14462 334D                        0F            .byte	$F
14463 334E                        0F            .byte	$F
14464 334F                        0F            .byte	$F
14465 3350                        0F            .byte	$F
14466                                           ! 1591  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14467 3351                        FF            .byte	$FF
14468 3352                        FF            .byte	$FF
14469 3353                        FF            .byte	$FF
14470 3354                        FF            .byte	$FF
14471 3355                        FF            .byte	$FF
14472 3356                        FF            .byte	$FF
14473 3357                        FF            .byte	$FF
14474 3358                        00            .byte	0
14475 3359                        00            .byte	0
14476 335A                        00            .byte	0
14477 335B                        00            .byte	0
14478 335C                        00            .byte	0
14479 335D                        00            .byte	0
14480 335E                        00            .byte	0
14481 335F                        00            .byte	0
14482 3360                        00            .byte	0
14483                                           ! 1592  0x00, 0x00, 0
14484 3361                        00            .byte	0
14485 3362                        00            .byte	0
14486                                           ! 1592 x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14487 3363                        00            .byte	0
14488 3364                        00            .byte	0
14489 3365                        00            .byte	0
14490 3366                        76            .byte	$76
14491 3367                        DC            .byte	$DC
14492 3368                        D8            .byte	$D8
14493 3369                        D8            .byte	$D8
14494 336A                        D8            .byte	$D8
14495 336B                        DC            .byte	$DC
14496 336C                        76            .byte	$76
14497 336D                        00            .byte	0
14498 336E                        00            .byte	0
14499 336F                        00            .byte	0
14500 3370                        00            .byte	0
14501                                           ! 1593  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14502 3371                        00            .byte	0
14503 3372                        00            .byte	0
14504 3373                        78            .byte	$78
14505 3374                        CC            .byte	$CC
14506 3375                        CC            .byte	$CC
14507 3376                        CC            .byte	$CC
14508 3377                        D8            .byte	$D8
14509 3378                        CC            .byte	$CC
14510 3379                        C6            .byte	$C6
14511 337A                        C6            .byte	$C6
14512 337B                        C6            .byte	$C6
14513 337C                        CC            .byte	$CC
14514 337D                        00            .byte	0
14515 337E                        00            .byte	0
14516 337F                        00            .byte	0
14517 3380                        00            .byte	0
14518                                           ! 1594  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14519 3381                        00            .byte	0
14520 3382                        00            .byte	0
14521 3383                        FE            .byte	$FE
14522 3384                        C6            .byte	$C6
14523 3385                        C6            .byte	$C6
14524 3386                        C0            .byte	$C0
14525 3387                        C0            .byte	$C0
14526 3388                        C0            .byte	$C0
14527 3389                        C0            .byte	$C0
14528 338A                        C0            .byte	$C0
14529 338B                        C0            .byte	$C0
14530 338C                        C0            .byte	$C0
14531 338D                        00            .byte	0
14532 338E                        00            .byte	0
14533 338F                        00            .byte	0
14534 3390                        00            .byte	0
14535                                           ! 1595  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14536 3391                        00            .byte	0
14537 3392                        00            .byte	0
14538 3393                        00            .byte	0
14539 3394                        00            .byte	0
14540 3395                        FE            .byte	$FE
14541 3396                        6C            .byte	$6C
14542 3397                        6C            .byte	$6C
14543 3398                        6C            .byte	$6C
14544 3399                        6C            .byte	$6C
14545 339A                        6C            .byte	$6C
14546 339B                        6C            .byte	$6C
14547 339C                        6C            .byte	$6C
14548 339D                        00            .byte	0
14549 339E                        00            .byte	0
14550 339F                        00            .byte	0
14551 33A0                        00            .byte	0
14552                                           ! 1596  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14553 33A1                        00            .byte	0
14554 33A2                        00            .byte	0
14555 33A3                        00            .byte	0
14556 33A4                        FE            .byte	$FE
14557 33A5                        C6            .byte	$C6
14558 33A6                        60            .byte	$60
14559 33A7                        30            .byte	$30
14560 33A8                        18            .byte	$18
14561 33A9                        30            .byte	$30
14562 33AA                        60            .byte	$60
14563 33AB                        C6            .byte	$C6
14564 33AC                        FE            .byte	$FE
14565 33AD                        00            .byte	0
14566 33AE                        00            .byte	0
14567 33AF                        00            .byte	0
14568 33B0                        00            .byte	0
14569                                           ! 1597  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14570 33B1                        00            .byte	0
14571 33B2                        00            .byte	0
14572 33B3                        00            .byte	0
14573 33B4                        00            .byte	0
14574 33B5                        00            .byte	0
14575 33B6                        7E            .byte	$7E
14576 33B7                        D8            .byte	$D8
14577 33B8                        D8            .byte	$D8
14578 33B9                        D8            .byte	$D8
14579 33BA                        D8            .byte	$D8
14580 33BB                        D8            .byte	$D8
14581 33BC                        70            .byte	$70
14582 33BD                        00            .byte	0
14583 33BE                        00            .byte	0
14584 33BF                        00            .byte	0
14585 33C0                        00            .byte	0
14586                                           ! 1598  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14587 33C1                        00            .byte	0
14588 33C2                        00            .byte	0
14589 33C3                        00            .byte	0
14590 33C4                        00            .byte	0
14591 33C5                        66            .byte	$66
14592 33C6                        66            .byte	$66
14593 33C7                        66            .byte	$66
14594 33C8                        66            .byte	$66
14595 33C9                        66            .byte	$66
14596 33CA                        7C            .byte	$7C
14597 33CB                        60            .byte	$60
14598 33CC                        60            .byte	$60
14599 33CD                        C0            .byte	$C0
14600 33CE                        00            .byte	0
14601 33CF                        00            .byte	0
14602 33D0                        00            .byte	0
14603                                           ! 1599  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14604 33D1                        00            .byte	0
14605 33D2                        00            .byte	0
14606 33D3                        00            .byte	0
14607 33D4                        00            .byte	0
14608 33D5                        76            .byte	$76
14609 33D6                        DC            .byte	$DC
14610 33D7                        18            .byte	$18
14611 33D8                        18            .byte	$18
14612 33D9                        18            .byte	$18
14613 33DA                        18            .byte	$18
14614 33DB                        18            .byte	$18
14615 33DC                        18            .byte	$18
14616 33DD                        00            .byte	0
14617 33DE                        00            .byte	0
14618 33DF                        00            .byte	0
14619 33E0                        00            .byte	0
14620                                           ! 1600  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14621 33E1                        00            .byte	0
14622 33E2                        00            .byte	0
14623 33E3                        00            .byte	0
14624 33E4                        7E            .byte	$7E
14625 33E5                        18            .byte	$18
14626 33E6                        3C            .byte	$3C
14627 33E7                        66            .byte	$66
14628 33E8                        66            .byte	$66
14629 33E9                        66            .byte	$66
14630 33EA                        3C            .byte	$3C
14631 33EB                        18            .byte	$18
14632 33EC                        7E            .byte	$7E
14633 33ED                        00            .byte	0
14634 33EE                        00            .byte	0
14635 33EF                        00            .byte	0
14636 33F0                        00            .byte	0
14637                                           ! 1601  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14638 33F1                        00            .byte	0
14639 33F2                        00            .byte	0
14640 33F3                        00            .byte	0
14641 33F4                        38            .byte	$38
14642 33F5                        6C            .byte	$6C
14643 33F6                        C6            .byte	$C6
14644 33F7                        C6            .byte	$C6
14645 33F8                        FE            .byte	$FE
14646 33F9                        C6            .byte	$C6
14647 33FA                        C6            .byte	$C6
14648 33FB                        6C            .byte	$6C
14649 33FC                        38            .byte	$38
14650 33FD                        00            .byte	0
14651 33FE                        00            .byte	0
14652 33FF                        00            .byte	0
14653 3400                        00            .byte	0
14654                                           ! 1602  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14655 3401                        00            .byte	0
14656 3402                        00            .byte	0
14657 3403                        38            .byte	$38
14658 3404                        6C            .byte	$6C
14659 3405                        C6            .byte	$C6
14660 3406                        C6            .byte	$C6
14661 3407                        C6            .byte	$C6
14662 3408                        6C            .byte	$6C
14663 3409                        6C            .byte	$6C
14664 340A                        6C            .byte	$6C
14665 340B                        6C            .byte	$6C
14666 340C                        EE            .byte	$EE
14667 340D                        00            .byte	0
14668 340E                        00            .byte	0
14669 340F                        00            .byte	0
14670 3410                        00            .byte	0
14671                                           ! 1603  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14672 3411                        00            .byte	0
14673 3412                        00            .byte	0
14674 3413                        1E            .byte	$1E
14675 3414                        30            .byte	$30
14676 3415                        18            .byte	$18
14677 3416                        0C            .byte	$C
14678 3417                        3E            .byte	$3E
14679 3418                        66            .byte	$66
14680 3419                        66            .byte	$66
14681 341A                        66            .byte	$66
14682 341B                        66            .byte	$66
14683 341C                        3C            .byte	$3C
14684 341D                        00            .byte	0
14685 341E                        00            .byte	0
14686 341F                        00            .byte	0
14687 3420                        00            .byte	0
14688                                           ! 1604  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14689 3421                        00            .byte	0
14690 3422                        00            .byte	0
14691 3423                        00            .byte	0
14692 3424                        00            .byte	0
14693 3425                        00            .byte	0
14694 3426                        7E            .byte	$7E
14695 3427                        DB            .byte	$DB
14696 3428                        DB            .byte	$DB
14697 3429                        DB            .byte	$DB
14698 342A                        7E            .byte	$7E
14699 342B                        00            .byte	0
14700 342C                        00            .byte	0
14701 342D                        00            .byte	0
14702 342E                        00            .byte	0
14703 342F                        00            .byte	0
14704 3430                        00            .byte	0
14705                                           ! 1605  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14706 3431                        00            .byte	0
14707 3432                        00            .byte	0
14708 3433                        00            .byte	0
14709 3434                        03            .byte	3
14710 3435                        06            .byte	6
14711 3436                        7E            .byte	$7E
14712 3437                        DB            .byte	$DB
14713 3438                        DB            .byte	$DB
14714 3439                        F3            .byte	$F3
14715 343A                        7E            .byte	$7E
14716 343B                        60            .byte	$60
14717 343C                        C0            .byte	$C0
14718 343D                        00            .byte	0
14719 343E                        00            .byte	0
14720 343F                        00            .byte	0
14721 3440                        00            .byte	0
14722                                           ! 1606  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14723 3441                        00            .byte	0
14724 3442                        00            .byte	0
14725 3443                        1C            .byte	$1C
14726 3444                        30            .byte	$30
14727 3445                        60            .byte	$60
14728 3446                        60            .byte	$60
14729 3447                        7C            .byte	$7C
14730 3448                        60            .byte	$60
14731 3449                        60            .byte	$60
14732 344A                        60            .byte	$60
14733 344B                        30            .byte	$30
14734 344C                        1C            .byte	$1C
14735 344D                        00            .byte	0
14736 344E                        00            .byte	0
14737 344F                        00            .byte	0
14738 3450                        00            .byte	0
14739                                           ! 1607  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14740 3451                        00            .byte	0
14741 3452                        00            .byte	0
14742 3453                        00            .byte	0
14743 3454                        7C            .byte	$7C
14744 3455                        C6            .byte	$C6
14745 3456                        C6            .byte	$C6
14746 3457                        C6            .byte	$C6
14747 3458                        C6            .byte	$C6
14748 3459                        C6            .byte	$C6
14749 345A                        C6            .byte	$C6
14750 345B                        C6            .byte	$C6
14751 345C                        C6            .byte	$C6
14752 345D                        00            .byte	0
14753 345E                        00            .byte	0
14754 345F                        00            .byte	0
14755 3460                        00            .byte	0
14756                                           ! 1608  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14757 3461                        00            .byte	0
14758 3462                        00            .byte	0
14759 3463                        00            .byte	0
14760 3464                        00            .byte	0
14761 3465                        FE            .byte	$FE
14762 3466                        00            .byte	0
14763 3467                        00            .byte	0
14764 3468                        FE            .byte	$FE
14765 3469                        00            .byte	0
14766 346A                        00            .byte	0
14767 346B                        FE            .byte	$FE
14768 346C                        00            .byte	0
14769 346D                        00            .byte	0
14770 346E                        00            .byte	0
14771 346F                        00            .byte	0
14772 3470                        00            .byte	0
14773                                           ! 1609  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14774 3471                        00            .byte	0
14775 3472                        00            .byte	0
14776 3473                        00            .byte	0
14777 3474                        00            .byte	0
14778 3475                        18            .byte	$18
14779 3476                        18            .byte	$18
14780 3477                        7E            .byte	$7E
14781 3478                        18            .byte	$18
14782 3479                        18            .byte	$18
14783 347A                        00            .byte	0
14784 347B                        00            .byte	0
14785 347C                        FF            .byte	$FF
14786 347D                        00            .byte	0
14787 347E                        00            .byte	0
14788 347F                        00            .byte	0
14789 3480                        00            .byte	0
14790                                           ! 1610  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14791 3481                        00            .byte	0
14792 3482                        00            .byte	0
14793 3483                        00            .byte	0
14794 3484                        30            .byte	$30
14795 3485                        18            .byte	$18
14796 3486                        0C            .byte	$C
14797 3487                        06            .byte	6
14798 3488                        0C            .byte	$C
14799 3489                        18            .byte	$18
14800 348A                        30            .byte	$30
14801 348B                        00            .byte	0
14802 348C                        7E            .byte	$7E
14803 348D                        00            .byte	0
14804 348E                        00            .byte	0
14805 348F                        00            .byte	0
14806 3490                        00            .byte	0
14807                                           ! 1611  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14808 3491                        00            .byte	0
14809 3492                        00            .byte	0
14810 3493                        00            .byte	0
14811 3494                        0C            .byte	$C
14812 3495                        18            .byte	$18
14813 3496                        30            .byte	$30
14814 3497                        60            .byte	$60
14815 3498                        30            .byte	$30
14816 3499                        18            .byte	$18
14817 349A                        0C            .byte	$C
14818 349B                        00            .byte	0
14819 349C                        7E            .byte	$7E
14820 349D                        00            .byte	0
14821 349E                        00            .byte	0
14822 349F                        00            .byte	0
14823 34A0                        00            .byte	0
14824                                           ! 1612  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14825 34A1                        00            .byte	0
14826 34A2                        00            .byte	0
14827 34A3                        0E            .byte	$E
14828 34A4                        1B            .byte	$1B
14829 34A5                        1B            .byte	$1B
14830 34A6                        18            .byte	$18
14831 34A7                        18            .byte	$18
14832 34A8                        18            .byte	$18
14833 34A9                        18            .byte	$18
14834 34AA                        18            .byte	$18
14835 34AB                        18            .byte	$18
14836 34AC                        18            .byte	$18
14837 34AD                        18            .byte	$18
14838 34AE                        18            .byte	$18
14839 34AF                        18            .byte	$18
14840 34B0                        18            .byte	$18
14841                                           ! 1613  0x18, 0x18, 0x18, 0x18, 
14842 34B1                        18            .byte	$18
14843 34B2                        18            .byte	$18
14844 34B3                        18            .byte	$18
14845 34B4                        18            .byte	$18
14846                                           ! 1613 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14847 34B5                        18            .byte	$18
14848 34B6                        18            .byte	$18
14849 34B7                        18            .byte	$18
14850 34B8                        18            .byte	$18
14851 34B9                        D8            .byte	$D8
14852 34BA                        D8            .byte	$D8
14853 34BB                        D8            .byte	$D8
14854 34BC                        70            .byte	$70
14855 34BD                        00            .byte	0
14856 34BE                        00            .byte	0
14857 34BF                        00            .byte	0
14858 34C0                        00            .byte	0
14859                                           ! 1614  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14860 34C1                        00            .byte	0
14861 34C2                        00            .byte	0
14862 34C3                        00            .byte	0
14863 34C4                        00            .byte	0
14864 34C5                        18            .byte	$18
14865 34C6                        18            .byte	$18
14866 34C7                        00            .byte	0
14867 34C8                        7E            .byte	$7E
14868 34C9                        00            .byte	0
14869 34CA                        18            .byte	$18
14870 34CB                        18            .byte	$18
14871 34CC                        00            .byte	0
14872 34CD                        00            .byte	0
14873 34CE                        00            .byte	0
14874 34CF                        00            .byte	0
14875 34D0                        00            .byte	0
14876                                           ! 1615  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14877 34D1                        00            .byte	0
14878 34D2                        00            .byte	0
14879 34D3                        00            .byte	0
14880 34D4                        00            .byte	0
14881 34D5                        00            .byte	0
14882 34D6                        76            .byte	$76
14883 34D7                        DC            .byte	$DC
14884 34D8                        00            .byte	0
14885 34D9                        76            .byte	$76
14886 34DA                        DC            .byte	$DC
14887 34DB                        00            .byte	0
14888 34DC                        00            .byte	0
14889 34DD                        00            .byte	0
14890 34DE                        00            .byte	0
14891 34DF                        00            .byte	0
14892 34E0                        00            .byte	0
14893                                           ! 1616  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14894 34E1                        00            .byte	0
14895 34E2                        38            .byte	$38
14896 34E3                        6C            .byte	$6C
14897 34E4                        6C            .byte	$6C
14898 34E5                        38            .byte	$38
14899 34E6                        00            .byte	0
14900 34E7                        00            .byte	0
14901 34E8                        00            .byte	0
14902 34E9                        00            .byte	0
14903 34EA                        00            .byte	0
14904 34EB                        00            .byte	0
14905 34EC                        00            .byte	0
14906 34ED                        00            .byte	0
14907 34EE                        00            .byte	0
14908 34EF                        00            .byte	0
14909 34F0                        00            .byte	0
14910                                           ! 1617  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14911 34F1                        00            .byte	0
14912 34F2                        00            .byte	0
14913 34F3                        00            .byte	0
14914 34F4                        00            .byte	0
14915 34F5                        00            .byte	0
14916 34F6                        00            .byte	0
14917 34F7                        00            .byte	0
14918 34F8                        18            .byte	$18
14919 34F9                        18            .byte	$18
14920 34FA                        00            .byte	0
14921 34FB                        00            .byte	0
14922 34FC                        00            .byte	0
14923 34FD                        00            .byte	0
14924 34FE                        00            .byte	0
14925 34FF                        00            .byte	0
14926 3500                        00            .byte	0
14927                                           ! 1618  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14928 3501                        00            .byte	0
14929 3502                        00            .byte	0
14930 3503                        00            .byte	0
14931 3504                        00            .byte	0
14932 3505                        00            .byte	0
14933 3506                        00            .byte	0
14934 3507                        00            .byte	0
14935 3508                        00            .byte	0
14936 3509                        18            .byte	$18
14937 350A                        00            .byte	0
14938 350B                        00            .byte	0
14939 350C                        00            .byte	0
14940 350D                        00            .byte	0
14941 350E                        00            .byte	0
14942 350F                        00            .byte	0
14943 3510                        00            .byte	0
14944                                           ! 1619  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14945 3511                        00            .byte	0
14946 3512                        0F            .byte	$F
14947 3513                        0C            .byte	$C
14948 3514                        0C            .byte	$C
14949 3515                        0C            .byte	$C
14950 3516                        0C            .byte	$C
14951 3517                        0C            .byte	$C
14952 3518                        EC            .byte	$EC
14953 3519                        6C            .byte	$6C
14954 351A                        6C            .byte	$6C
14955 351B                        3C            .byte	$3C
14956 351C                        1C            .byte	$1C
14957 351D                        00            .byte	0
14958 351E                        00            .byte	0
14959 351F                        00            .byte	0
14960 3520                        00            .byte	0
14961                                           ! 1620  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14962 3521                        00            .byte	0
14963 3522                        D8            .byte	$D8
14964 3523                        6C            .byte	$6C
14965 3524                        6C            .byte	$6C
14966 3525                        6C            .byte	$6C
14967 3526                        6C            .byte	$6C
14968 3527                        6C            .byte	$6C
14969 3528                        00            .byte	0
14970 3529                        00            .byte	0
14971 352A                        00            .byte	0
14972 352B                        00            .byte	0
14973 352C                        00            .byte	0
14974 352D                        00            .byte	0
14975 352E                        00            .byte	0
14976 352F                        00            .byte	0
14977 3530                        00            .byte	0
14978                                           ! 1621  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14979 3531                        00            .byte	0
14980 3532                        70            .byte	$70
14981 3533                        D8            .byte	$D8
14982 3534                        30            .byte	$30
14983 3535                        60            .byte	$60
14984 3536                        C8            .byte	$C8
14985 3537                        F8            .byte	$F8
14986 3538                        00            .byte	0
14987 3539                        00            .byte	0
14988 353A                        00            .byte	0
14989 353B                        00            .byte	0
14990 353C                        00            .byte	0
14991 353D                        00            .byte	0
14992 353E                        00            .byte	0
14993 353F                        00            .byte	0
14994 3540                        00            .byte	0
14995                                           ! 1622  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
14996 3541                        00            .byte	0
14997 3542                        00            .byte	0
14998 3543                        00            .byte	0
14999 3544                        00            .byte	0
15000 3545                        7C            .byte	$7C
15001 3546                        7C            .byte	$7C
15002 3547                        7C            .byte	$7C
15003 3548                        7C            .byte	$7C
15004 3549                        7C            .byte	$7C
15005 354A                        7C            .byte	$7C
15006 354B                        7C            .byte	$7C
15007 354C                        00            .byte	0
15008 354D                        00            .byte	0
15009 354E                        00            .byte	0
15010 354F                        00            .byte	0
15011 3550                        00            .byte	0
15012                                           ! 1623  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
15013 3551                        00            .byte	0
15014 3552                        00            .byte	0
15015 3553                        00            .byte	0
15016 3554                        00            .byte	0
15017 3555                        00            .byte	0
15018 3556                        00            .byte	0
15019 3557                        00            .byte	0
15020 3558                        00            .byte	0
15021 3559                        00            .byte	0
15022 355A                        00            .byte	0
15023 355B                        00            .byte	0
15024 355C                        00            .byte	0
15025 355D                        00            .byte	0
15026 355E                        00            .byte	0
15027 355F                        00            .byte	0
15028                                           ! 1624 };
15029 3560                        00            .byte	0
15030                                           !BCC_EOS
15031                                           ! 1625 static Bit8u vgafont14alt[1]={0x00};
15032                       00003561            _vgafont14alt:
15033 3561                        00            .byte	0
15034                                           !BCC_EOS
15035                                           ! 1626 static Bit8u vgafont16alt[1]={0x00};
15036                       00003562            _vgafont16alt:
15037 3562                        00            .byte	0
15038                                           !BCC_EOS
15039                                           ! 1627 #asm
15040                                           !BCC_ASM
15041                       00003563            init_vga_card:
15042                                           ;; switch to color mode and enable CPU access 480 lines
15043 3563           BA                   03C2    mov dx, #0x3C2
15044 3566           B0                     C3    mov al, #0xC3
15045 3568           EE                           outb dx,al
15046                                           ;; more than 64k 3C4/04
15047 3569           BA                   03C4    mov dx, #0x3C4
15048 356C           B0                     04    mov al, #0x04
15049 356E           EE                           outb dx,al
15050 356F           BA                   03C5    mov dx, #0x3C5
15051 3572           B0                     02    mov al, #0x02
15052 3574           EE                           outb dx,al
15053 3575           BB                   357F    mov bx, #msg_vga_init
15054 3578           53                           push bx
15055 3579           E8         46FE              call _printf
15056 357C           44                           inc sp
15057 357D           44                           inc sp
15058 357E           C3                           ret
15059                       0000357F            msg_vga_init:
15060 357F                        56            .ascii "VGABios $Id: vgabios.c,v 1.69 2009/04/07 18:18:20 vruppert Exp $"
15061 35BF                        0D            .byte 0x0d,0x0a,0x00
15062                                           ! 1649 endasm
15063                                           !BCC_ENDASM
15064                                           ! 1650 #asm
15065                                           !BCC_ASM
15066                       000035C2            init_bios_area:
15067 35C2           1E                           push ds
15068 35C3           B8                   0040    mov ax, # 0x40
15069 35C6           8ED8                         mov ds, ax
15070                                           ;; init detected hardware BIOS Area
15071 35C8           BB                   0010    mov bx, # 0x10
15072 35CB           8B07                         mov ax, [bx]
15073 35CD           25                   FFCF    and ax, #0xffcf
15074                                           ;; set 80x25 color (not clear from RBIL but usual)
15075 35D0           0D                   0020    or ax, #0x0020
15076 35D3           8907                         mov [bx], ax
15077                                           ;; Just for the first int10 find its children
15078                                           ;; the default char height
15079 35D5           BB                   0085    mov bx, # 0x85
15080 35D8           B0                     10    mov al, #0x10
15081 35DA           8807                         mov [bx], al
15082                                           ;; Clear the screen
15083 35DC           BB                   0087    mov bx, # 0x87
15084 35DF           B0                     60    mov al, #0x60
15085 35E1           8807                         mov [bx], al
15086                                           ;; Set the basic screen we have
15087 35E3           BB                   0088    mov bx, # 0x88
15088 35E6           B0                     F9    mov al, #0xf9
15089 35E8           8807                         mov [bx], al
15090                                           ;; Set the basic modeset options
15091 35EA           BB                   0089    mov bx, # 0x89
15092 35ED           B0                     51    mov al, #0x51
15093 35EF           8807                         mov [bx], al
15094                                           ;; Set the default MSR
15095 35F1           BB                   0065    mov bx, # 0x65
15096 35F4           B0                     09    mov al, #0x09
15097 35F6           8807                         mov [bx], al
15098 35F8           1F                           pop ds
15099 35F9           C3                           ret
15100                       000035FA            _video_save_pointer_table:
15101 35FA                      0291              .word _video_param_table
15102 35FC                      C000              .word 0xc000
15103 35FE                      0000              .word 0
15104 3600                      0000              .word 0
15105 3602                      0000              .word 0
15106 3604                      0000              .word 0
15107 3606                      0000              .word 0
15108 3608                      0000              .word 0
15109 360A                      0000              .word 0
15110 360C                      0000              .word 0
15111 360E                      0000              .word 0
15112 3610                      0000              .word 0
15113 3612                      0000              .word 0
15114 3614                      0000              .word 0
15115                                           ! 1700 endasm
15116                                           !BCC_ENDASM
15117                                           ! 1701 static void display_splash_screen()
15118                                           ! 1702 {
15119                                           
15120                       00003616            _display_splash_screen:
15121                                           ! 1703 }
15122 3616           C3                         ret
15123                                           ! 1704 static void display_info()
15124                                           ! 1705 {
15125                       00003617            _display_info:
15126                                           ! 1706 #asm
15127                                           !BCC_ASM
15128 3617           B8                   C000   mov ax,#0xc000
15129 361A           8ED8                        mov ds,ax
15130 361C           BE                   0022   mov si,#vgabios_name
15131 361F           E8         0013             call _display_string
15132 3622           BE                   0038   mov si,#vgabios_version
15133 3625           E8         000D             call _display_string
15134                                            ;;mov si,#vgabios_copyright
15135                                            ;;call _display_string
15136                                            ;;mov si,#crlf
15137                                            ;;call _display_string
15138 3628           BE                   007E   mov si,#vgabios_license
15139 362B           E8         0007             call _display_string
15140 362E           BE                   00B3   mov si,#vgabios_website
15141 3631           E8         0001             call _display_string
15142                                           ! 1721 endasm
15143                                           !BCC_ENDASM
15144                                           ! 1722 }
15145 3634           C3                         ret
15146                                           ! 1723 static void display_string()
15147                                           ! 1724 {
15148                       00003635            _display_string:
15149                                           ! 1725 #asm
15150                                           !BCC_ASM
15151 3635           8CD8                        mov ax,ds
15152 3637           8EC0                        mov es,ax
15153 3639           89F7                        mov di,si
15154 363B           31C9                        xor cx,cx
15155 363D           F7D1                        not cx
15156 363F           30C0                        xor al,al
15157 3641           FC                          cld
15158 3642           F2                          repne
15159 3643           AE                           scasb
15160 3644           F7D1                        not cx
15161 3646           49                          dec cx
15162 3647           51                          push cx
15163 3648           B8                   0300   mov ax,#0x0300
15164 364B           BB                   0000   mov bx,#0x0000
15165 364E           CD                     10   int #0x10
15166 3650           59                          pop cx
15167 3651           B8                   1301   mov ax,#0x1301
15168 3654           BB                   000B   mov bx,#0x000b
15169 3657           89F5                        mov bp,si
15170 3659           CD                     10   int #0x10
15171                                           ! 1746 endasm
15172                                           !BCC_ENDASM
15173                                           ! 1747 }
15174 365B           C3                         ret
15175                                           ! 1748 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15176                                           ! 1749   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15177                       0000365C            _int10_func:
15178                                           !BCC_EOS
15179                                           ! 1750 {
15180                                           ! 1751  switch(( AX >> 8 ))
15181 365C           55                         push	bp
15182 365D           89E5                       mov	bp,sp
15183                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15184 365F           8B46         12            mov	ax,$12[bp]
15185 3662           88E0                       mov	al,ah
15186 3664           30E4                       xor	ah,ah
15187                                           ! 1752   {
15188 3666           E9         04D8            br 	.3
15189                                           ! 1753    case 0x00:
15190                                           ! 1754      biosfn_set_video_mode(( AX & 0x00ff ));
15191                       00003669            .4:
15192                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15193 3669           8A46         12            mov	al,$12[bp]
15194                                           ! Debug: list unsigned char = al+0 (used reg = )
15195 366C           30E4                       xor	ah,ah
15196 366E           50                         push	ax
15197                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
15198 366F           E8         0525            call	_biosfn_set_video_mode
15199 3672           44                         inc	sp
15200 3673           44                         inc	sp
15201                                           !BCC_EOS
15202                                           ! 1755      switch(( AX & 0x00ff )&0x7F)
15203                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15204 3674           8A46         12            mov	al,$12[bp]
15205                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15206 3677           24                     7F  and	al,*$7F
15207                                           ! 1756       {case 6:
15208 3679           EB           24            jmp .7
15209                                           ! 1757         AX = ((AX & 0xff00) | (0x3F));
15210                       0000367B            .8:
15211                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15212 367B           8B46         12            mov	ax,$12[bp]
15213 367E           30C0                       xor	al,al
15214                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15215 3680           0C                     3F  or	al,*$3F
15216                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15217 3682           8946         12            mov	$12[bp],ax
15218                                           !BCC_EOS
15219                                           ! 1758         break;
15220 3685           EB           3D            jmp .5
15221                                           !BCC_EOS
15222                                           ! 1759        case 0:
15223                                           ! 1760        case 1:
15224                       00003687            .9:
15225                                           ! 1761        case 2:
15226                       00003687            .A:
15227                                           ! 1762        case 3:
15228                       00003687            .B:
15229                                           ! 1763        case 4:
15230                       00003687            .C:
15231                                           ! 1764        case 5:
15232                       00003687            .D:
15233                                           ! 1765        case 7:
15234                       00003687            .E:
15235                                           ! 1766         AX = ((AX & 0xff00) | (0x30));
15236                       00003687            .F:
15237                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15238 3687           8B46         12            mov	ax,$12[bp]
15239 368A           30C0                       xor	al,al
15240                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15241 368C           0C                     30  or	al,*$30
15242                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15243 368E           8946         12            mov	$12[bp],ax
15244                                           !BCC_EOS
15245                                           ! 1767         break;
15246 3691           EB           31            jmp .5
15247                                           !BCC_EOS
15248                                           ! 1768       default:
15249                                           ! 1769         AX = ((AX & 0xff00) | (0x20));
15250                       00003693            .10:
15251                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15252 3693           8B46         12            mov	ax,$12[bp]
15253 3696           30C0                       xor	al,al
15254                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15255 3698           0C                     20  or	al,*$20
15256                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15257 369A           8946         12            mov	$12[bp],ax
15258                                           !BCC_EOS
15259                                           ! 1770       }
15260                                           ! 1771      break;
15261 369D           EB           25            jmp .5
15262                       0000369F            .7:
15263 369F           2C                     00  sub	al,*0
15264 36A1           72           F0            jb 	.10
15265 36A3           3C                     07  cmp	al,*7
15266 36A5           77           1B            ja  	.11
15267 36A7           30E4                       xor	ah,ah
15268 36A9           D1E0                       shl	ax,*1
15269 36AB           89C3                       mov	bx,ax
15270 36AD           2E                         seg	cs
15271 36AE           FFA7       36B2            br	.12[bx]
15272                       000036B2            .12:
15273 36B2                      3687            .word	.9
15274 36B4                      3687            .word	.A
15275 36B6                      3687            .word	.B
15276 36B8                      3687            .word	.C
15277 36BA                      3687            .word	.D
15278 36BC                      3687            .word	.E
15279 36BE                      367B            .word	.8
15280 36C0                      3687            .word	.F
15281                       000036C2            .11:
15282 36C2           EB           CF            jmp	.10
15283                       000036C4            .5:
15284 36C4           E9         04CE            br 	.1
15285                                           !BCC_EOS
15286                                           ! 1772    case 0x01:
15287                                           ! 1773      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15288                       000036C7            .13:
15289                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15290 36C7           8A46         10            mov	al,$10[bp]
15291                                           ! Debug: list unsigned char = al+0 (used reg = )
15292 36CA           30E4                       xor	ah,ah
15293 36CC           50                         push	ax
15294                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15295 36CD           8B46         10            mov	ax,$10[bp]
15296 36D0           88E0                       mov	al,ah
15297 36D2           30E4                       xor	ah,ah
15298                                           ! Debug: list unsigned int = ax+0 (used reg = )
15299 36D4           50                         push	ax
15300                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15301 36D5           E8         0B57            call	_biosfn_set_cursor_shape
15302 36D8           83C4                   04  add	sp,*4
15303                                           !BCC_EOS
15304                                           ! 1774      break;
15305 36DB           E9         04B7            br 	.1
15306                                           !BCC_EOS
15307                                           ! 1775    case 0x02:
15308                                           ! 1776      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15309                       000036DE            .14:
15310                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15311 36DE           FF76         0E            push	$E[bp]
15312                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15313 36E1           8B46         0C            mov	ax,$C[bp]
15314 36E4           88E0                       mov	al,ah
15315 36E6           30E4                       xor	ah,ah
15316                                           ! Debug: list unsigned int = ax+0 (used reg = )
15317 36E8           50                         push	ax
15318                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15319 36E9           E8         0C5E            call	_biosfn_set_cursor_pos
15320 36EC           83C4                   04  add	sp,*4
15321                                           !BCC_EOS
15322                                           ! 1777      break;
15323 36EF           E9         04A3            br 	.1
15324                                           !BCC_EOS
15325                                           ! 1778    case 0x03:
15326                                           ! 1779      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15327                       000036F2            .15:
15328                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15329 36F2           8D5E         0E            lea	bx,$E[bp]
15330 36F5           53                         push	bx
15331                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15332 36F6           8D5E         10            lea	bx,$10[bp]
15333 36F9           53                         push	bx
15334                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15335 36FA           8B46         0C            mov	ax,$C[bp]
15336 36FD           88E0                       mov	al,ah
15337 36FF           30E4                       xor	ah,ah
15338                                           ! Debug: list unsigned int = ax+0 (used reg = )
15339 3701           50                         push	ax
15340                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15341 3702           E8         0D45            call	_biosfn_get_cursor_pos
15342 3705           83C4                   06  add	sp,*6
15343                                           !BCC_EOS
15344                                           ! 1780      break;
15345 3708           E9         048A            br 	.1
15346                                           !BCC_EOS
15347                                           ! 1781    case 0x04:
15348                                           ! 1782      AX=0x00;
15349                       0000370B            .16:
15350                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15351 370B           31C0                       xor	ax,ax
15352 370D           8946         12            mov	$12[bp],ax
15353                                           !BCC_EOS
15354                                           ! 1783      BX=0x00;
15355                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15356 3710           31C0                       xor	ax,ax
15357 3712           8946         0C            mov	$C[bp],ax
15358                                           !BCC_EOS
15359                                           ! 1784      CX=0x00;
15360                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15361 3715           31C0                       xor	ax,ax
15362 3717           8946         10            mov	$10[bp],ax
15363                                           !BCC_EOS
15364                                           ! 1785      DX=0x00;
15365                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15366 371A           31C0                       xor	ax,ax
15367 371C           8946         0E            mov	$E[bp],ax
15368                                           !BCC_EOS
15369                                           ! 1786      break;
15370 371F           E9         0473            br 	.1
15371                                           !BCC_EOS
15372                                           ! 1787    case 0x05:
15373                                           ! 1788      biosfn_set_active_page(( AX & 0x00ff ));
15374                       00003722            .17:
15375                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15376 3722           8A46         12            mov	al,$12[bp]
15377                                           ! Debug: list unsigned char = al+0 (used reg = )
15378 3725           30E4                       xor	ah,ah
15379 3727           50                         push	ax
15380                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15381 3728           E8         0D94            call	_biosfn_set_active_page
15382 372B           44                         inc	sp
15383 372C           44                         inc	sp
15384                                           !BCC_EOS
15385                                           ! 1789      break;
15386 372D           E9         0465            br 	.1
15387                                           !BCC_EOS
15388                                           ! 1790    case 0x06:
15389                                           ! 1791      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX &
15390                       00003730            .18:
15391                                           ! 1791  0x00ff ),0xFF,1);
15392                                           ! Debug: list int = const 1 (used reg = )
15393 3730           B8                   0001  mov	ax,*1
15394 3733           50                         push	ax
15395                                           ! Debug: list int = const $FF (used reg = )
15396 3734           B8                   00FF  mov	ax,#$FF
15397 3737           50                         push	ax
15398                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15399 3738           8A46         0E            mov	al,$E[bp]
15400                                           ! Debug: list unsigned char = al+0 (used reg = )
15401 373B           30E4                       xor	ah,ah
15402 373D           50                         push	ax
15403                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15404 373E           8B46         0E            mov	ax,$E[bp]
15405 3741           88E0                       mov	al,ah
15406 3743           30E4                       xor	ah,ah
15407                                           ! Debug: list unsigned int = ax+0 (used reg = )
15408 3745           50                         push	ax
15409                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15410 3746           8A46         10            mov	al,$10[bp]
15411                                           ! Debug: list unsigned char = al+0 (used reg = )
15412 3749           30E4                       xor	ah,ah
15413 374B           50                         push	ax
15414                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15415 374C           8B46         10            mov	ax,$10[bp]
15416 374F           88E0                       mov	al,ah
15417 3751           30E4                       xor	ah,ah
15418                                           ! Debug: list unsigned int = ax+0 (used reg = )
15419 3753           50                         push	ax
15420                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15421 3754           8B46         0C            mov	ax,$C[bp]
15422 3757           88E0                       mov	al,ah
15423 3759           30E4                       xor	ah,ah
15424                                           ! Debug: list unsigned int = ax+0 (used reg = )
15425 375B           50                         push	ax
15426                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15427 375C           8A46         12            mov	al,$12[bp]
15428                                           ! Debug: list unsigned char = al+0 (used reg = )
15429 375F           30E4                       xor	ah,ah
15430 3761           50                         push	ax
15431                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15432 3762           E8         11DD            call	_biosfn_scroll
15433 3765           83C4                   10  add	sp,*$10
15434                                           !BCC_EOS
15435                                           ! 1792      break;
15436 3768           E9         042A            br 	.1
15437                                           !BCC_EOS
15438                                           ! 1793    case 0x07:
15439                                           ! 1794      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15440                       0000376B            .19:
15441                                           ! Debug: list int = const 0 (used reg = )
15442 376B           31C0                       xor	ax,ax
15443 376D           50                         push	ax
15444                                           ! Debug: list int = const $FF (used reg = )
15445 376E           B8                   00FF  mov	ax,#$FF
15446 3771           50                         push	ax
15447                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15448 3772           8A46         0E            mov	al,$E[bp]
15449                                           ! Debug: list unsigned char = al+0 (used reg = )
15450 3775           30E4                       xor	ah,ah
15451 3777           50                         push	ax
15452                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15453 3778           8B46         0E            mov	ax,$E[bp]
15454 377B           88E0                       mov	al,ah
15455 377D           30E4                       xor	ah,ah
15456                                           ! Debug: list unsigned int = ax+0 (used reg = )
15457 377F           50                         push	ax
15458                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15459 3780           8A46         10            mov	al,$10[bp]
15460                                           ! Debug: list unsigned char = al+0 (used reg = )
15461 3783           30E4                       xor	ah,ah
15462 3785           50                         push	ax
15463                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15464 3786           8B46         10            mov	ax,$10[bp]
15465 3789           88E0                       mov	al,ah
15466 378B           30E4                       xor	ah,ah
15467                                           ! Debug: list unsigned int = ax+0 (used reg = )
15468 378D           50                         push	ax
15469                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15470 378E           8B46         0C            mov	ax,$C[bp]
15471 3791           88E0                       mov	al,ah
15472 3793           30E4                       xor	ah,ah
15473                                           ! Debug: list unsigned int = ax+0 (used reg = )
15474 3795           50                         push	ax
15475                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15476 3796           8A46         12            mov	al,$12[bp]
15477                                           ! Debug: list unsigned char = al+0 (used reg = )
15478 3799           30E4                       xor	ah,ah
15479 379B           50                         push	ax
15480                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15481 379C           E8         11A3            call	_biosfn_scroll
15482 379F           83C4                   10  add	sp,*$10
15483                                           !BCC_EOS
15484                                           ! 1795      break;
15485 37A2           E9         03F0            br 	.1
15486                                           !BCC_EOS
15487                                           ! 1796    case 0x08:
15488                                           ! 1797      biosfn_read_char_attr(( BX >> 8 ),&AX);
15489                       000037A5            .1A:
15490                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15491 37A5           8D5E         12            lea	bx,$12[bp]
15492 37A8           53                         push	bx
15493                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15494 37A9           8B46         0C            mov	ax,$C[bp]
15495 37AC           88E0                       mov	al,ah
15496 37AE           30E4                       xor	ah,ah
15497                                           ! Debug: list unsigned int = ax+0 (used reg = )
15498 37B0           50                         push	ax
15499                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15500 37B1           E8         1894            call	_biosfn_read_char_attr
15501 37B4           83C4                   04  add	sp,*4
15502                                           !BCC_EOS
15503                                           ! 1798      break;
15504 37B7           E9         03DB            br 	.1
15505                                           !BCC_EOS
15506                                           ! 1799    case 0x09:
15507                                           ! 1800      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15508                       000037BA            .1B:
15509                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15510 37BA           FF76         10            push	$10[bp]
15511                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15512 37BD           8A46         0C            mov	al,$C[bp]
15513                                           ! Debug: list unsigned char = al+0 (used reg = )
15514 37C0           30E4                       xor	ah,ah
15515 37C2           50                         push	ax
15516                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15517 37C3           8B46         0C            mov	ax,$C[bp]
15518 37C6           88E0                       mov	al,ah
15519 37C8           30E4                       xor	ah,ah
15520                                           ! Debug: list unsigned int = ax+0 (used reg = )
15521 37CA           50                         push	ax
15522                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15523 37CB           8A46         12            mov	al,$12[bp]
15524                                           ! Debug: list unsigned char = al+0 (used reg = )
15525 37CE           30E4                       xor	ah,ah
15526 37D0           50                         push	ax
15527                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15528 37D1           E8         1DB9            call	_biosfn_write_char_attr
15529 37D4           83C4                   08  add	sp,*8
15530                                           !BCC_EOS
15531                                           ! 1801      break;
15532 37D7           E9         03BB            br 	.1
15533                                           !BCC_EOS
15534                                           ! 1802    case 0x0A:
15535                                           ! 1803      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15536                       000037DA            .1C:
15537                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15538 37DA           FF76         10            push	$10[bp]
15539                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15540 37DD           8A46         0C            mov	al,$C[bp]
15541                                           ! Debug: list unsigned char = al+0 (used reg = )
15542 37E0           30E4                       xor	ah,ah
15543 37E2           50                         push	ax
15544                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15545 37E3           8B46         0C            mov	ax,$C[bp]
15546 37E6           88E0                       mov	al,ah
15547 37E8           30E4                       xor	ah,ah
15548                                           ! Debug: list unsigned int = ax+0 (used reg = )
15549 37EA           50                         push	ax
15550                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15551 37EB           8A46         12            mov	al,$12[bp]
15552                                           ! Debug: list unsigned char = al+0 (used reg = )
15553 37EE           30E4                       xor	ah,ah
15554 37F0           50                         push	ax
15555                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15556 37F1           E8         1F8E            call	_biosfn_write_char_only
15557 37F4           83C4                   08  add	sp,*8
15558                                           !BCC_EOS
15559                                           ! 1804      break;
15560 37F7           E9         039B            br 	.1
15561                                           !BCC_EOS
15562                                           ! 1805    case 0x0C:
15563                                           ! 1806      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15564                       000037FA            .1D:
15565                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15566 37FA           FF76         0E            push	$E[bp]
15567                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15568 37FD           FF76         10            push	$10[bp]
15569                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15570 3800           8A46         12            mov	al,$12[bp]
15571                                           ! Debug: list unsigned char = al+0 (used reg = )
15572 3803           30E4                       xor	ah,ah
15573 3805           50                         push	ax
15574                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15575 3806           8B46         0C            mov	ax,$C[bp]
15576 3809           88E0                       mov	al,ah
15577 380B           30E4                       xor	ah,ah
15578                                           ! Debug: list unsigned int = ax+0 (used reg = )
15579 380D           50                         push	ax
15580                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15581 380E           E8         21DF            call	_biosfn_write_pixel
15582 3811           83C4                   08  add	sp,*8
15583                                           !BCC_EOS
15584                                           ! 1807      break;
15585 3814           E9         037E            br 	.1
15586                                           !BCC_EOS
15587                                           ! 1808    case 0x0D:
15588                                           ! 1809      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15589                       00003817            .1E:
15590                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15591 3817           8D5E         12            lea	bx,$12[bp]
15592 381A           53                         push	bx
15593                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15594 381B           FF76         0E            push	$E[bp]
15595                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15596 381E           FF76         10            push	$10[bp]
15597                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15598 3821           8B46         0C            mov	ax,$C[bp]
15599 3824           88E0                       mov	al,ah
15600 3826           30E4                       xor	ah,ah
15601                                           ! Debug: list unsigned int = ax+0 (used reg = )
15602 3828           50                         push	ax
15603                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15604 3829           E8         2460            call	_biosfn_read_pixel
15605 382C           83C4                   08  add	sp,*8
15606                                           !BCC_EOS
15607                                           ! 1810      break;
15608 382F           E9         0363            br 	.1
15609                                           !BCC_EOS
15610                                           ! 1811    case 0x0E:
15611                                           ! 1812      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15612                       00003832            .1F:
15613                                           ! Debug: list int = const 2 (used reg = )
15614 3832           B8                   0002  mov	ax,*2
15615 3835           50                         push	ax
15616                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15617 3836           8A46         0C            mov	al,$C[bp]
15618                                           ! Debug: list unsigned char = al+0 (used reg = )
15619 3839           30E4                       xor	ah,ah
15620 383B           50                         push	ax
15621                                           ! Debug: list int = const $FF (used reg = )
15622 383C           B8                   00FF  mov	ax,#$FF
15623 383F           50                         push	ax
15624                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15625 3840           8A46         12            mov	al,$12[bp]
15626                                           ! Debug: list unsigned char = al+0 (used reg = )
15627 3843           30E4                       xor	ah,ah
15628 3845           50                         push	ax
15629                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15630 3846           E8         264B            call	_biosfn_write_teletype
15631 3849           83C4                   08  add	sp,*8
15632                                           !BCC_EOS
15633                                           ! 1813      break;
15634 384C           E9         0346            br 	.1
15635                                           !BCC_EOS
15636                                           ! 1814    case 0x10:
15637                                           ! 1815      biosfn_perform_gray_scale_summing(BX,CX);
15638                       0000384F            .20:
15639                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15640 384F           FF76         10            push	$10[bp]
15641                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15642 3852           FF76         0C            push	$C[bp]
15643                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15644 3855           E8         2C8C            call	_biosfn_perform_gray_scale_summing
15645 3858           83C4                   04  add	sp,*4
15646                                           !BCC_EOS
15647                                           ! 1816      break;
15648 385B           E9         0337            br 	.1
15649                                           !BCC_EOS
15650                                           ! 1817    case 0x11:
15651                                           ! 1818      switch(( AX & 0x00ff ))
15652                       0000385E            .21:
15653                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15654 385E           8A46         12            mov	al,$12[bp]
15655                                           ! 1819       {
15656 3861           E9         00E1            br 	.24
15657                                           ! 1820        case 0x00:
15658                                           ! 1821        case 0x10:
15659                       00003864            .25:
15660                                           ! 1822         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15661                       00003864            .26:
15662                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15663 3864           8B46         0C            mov	ax,$C[bp]
15664 3867           88E0                       mov	al,ah
15665 3869           30E4                       xor	ah,ah
15666                                           ! Debug: list unsigned int = ax+0 (used reg = )
15667 386B           50                         push	ax
15668                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15669 386C           8A46         0C            mov	al,$C[bp]
15670                                           ! Debug: list unsigned char = al+0 (used reg = )
15671 386F           30E4                       xor	ah,ah
15672 3871           50                         push	ax
15673                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15674 3872           FF76         0E            push	$E[bp]
15675                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15676 3875           FF76         10            push	$10[bp]
15677                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15678 3878           FF76         08            push	8[bp]
15679                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15680 387B           FF76         16            push	$16[bp]
15681                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15682 387E           8A46         12            mov	al,$12[bp]
15683                                           ! Debug: list unsigned char = al+0 (used reg = )
15684 3881           30E4                       xor	ah,ah
15685 3883           50                         push	ax
15686                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15687 3884           E8         2F04            call	_biosfn_load_text_user_pat
15688 3887           83C4                   0E  add	sp,*$E
15689                                           !BCC_EOS
15690                                           ! 1823         break;
15691 388A           E9         010C            br 	.22
15692                                           !BCC_EOS
15693                                           ! 1824        case 0x01:
15694                                           ! 1825        case 0x11:
15695                       0000388D            .27:
15696                                           ! 1826         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15697                       0000388D            .28:
15698                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15699 388D           8A46         0C            mov	al,$C[bp]
15700                                           ! Debug: list unsigned char = al+0 (used reg = )
15701 3890           30E4                       xor	ah,ah
15702 3892           50                         push	ax
15703                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15704 3893           8A46         12            mov	al,$12[bp]
15705                                           ! Debug: list unsigned char = al+0 (used reg = )
15706 3896           30E4                       xor	ah,ah
15707 3898           50                         push	ax
15708                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15709 3899           E8         2F8B            call	_biosfn_load_text_8_14_pat
15710 389C           83C4                   04  add	sp,*4
15711                                           !BCC_EOS
15712                                           ! 1827         break;
15713 389F           E9         00F7            br 	.22
15714                                           !BCC_EOS
15715                                           ! 1828        case 0x02:
15716                                           ! 1829        case 0x12:
15717                       000038A2            .29:
15718                                           ! 1830         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15719                       000038A2            .2A:
15720                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15721 38A2           8A46         0C            mov	al,$C[bp]
15722                                           ! Debug: list unsigned char = al+0 (used reg = )
15723 38A5           30E4                       xor	ah,ah
15724 38A7           50                         push	ax
15725                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15726 38A8           8A46         12            mov	al,$12[bp]
15727                                           ! Debug: list unsigned char = al+0 (used reg = )
15728 38AB           30E4                       xor	ah,ah
15729 38AD           50                         push	ax
15730                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15731 38AE           E8         300D            call	_biosfn_load_text_8_8_pat
15732 38B1           83C4                   04  add	sp,*4
15733                                           !BCC_EOS
15734                                           ! 1831         break;
15735 38B4           E9         00E2            br 	.22
15736                                           !BCC_EOS
15737                                           ! 1832        case 0x04:
15738                                           ! 1833        case 0x14:
15739                       000038B7            .2B:
15740                                           ! 1834         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15741                       000038B7            .2C:
15742                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15743 38B7           8A46         0C            mov	al,$C[bp]
15744                                           ! Debug: list unsigned char = al+0 (used reg = )
15745 38BA           30E4                       xor	ah,ah
15746 38BC           50                         push	ax
15747                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15748 38BD           8A46         12            mov	al,$12[bp]
15749                                           ! Debug: list unsigned char = al+0 (used reg = )
15750 38C0           30E4                       xor	ah,ah
15751 38C2           50                         push	ax
15752                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15753 38C3           E8         3096            call	_biosfn_load_text_8_16_pat
15754 38C6           83C4                   04  add	sp,*4
15755                                           !BCC_EOS
15756                                           ! 1835         break;
15757 38C9           E9         00CD            br 	.22
15758                                           !BCC_EOS
15759                                           ! 1836        case 0x20:
15760                                           ! 1837         biosfn_load_gfx_8_8_chars(ES,BP);
15761                       000038CC            .2D:
15762                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15763 38CC           FF76         08            push	8[bp]
15764                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15765 38CF           FF76         16            push	$16[bp]
15766                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15767 38D2           E8         3118            call	_biosfn_load_gfx_8_8_chars
15768 38D5           83C4                   04  add	sp,*4
15769                                           !BCC_EOS
15770                                           ! 1838         break;
15771 38D8           E9         00BE            br 	.22
15772                                           !BCC_EOS
15773                                           ! 1839        case 0x21:
15774                                           ! 1840         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15775                       000038DB            .2E:
15776                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15777 38DB           8A46         0E            mov	al,$E[bp]
15778                                           ! Debug: list unsigned char = al+0 (used reg = )
15779 38DE           30E4                       xor	ah,ah
15780 38E0           50                         push	ax
15781                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15782 38E1           8A46         0C            mov	al,$C[bp]
15783                                           ! Debug: list unsigned char = al+0 (used reg = )
15784 38E4           30E4                       xor	ah,ah
15785 38E6           50                         push	ax
15786                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15787 38E7           FF76         10            push	$10[bp]
15788                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15789 38EA           FF76         08            push	8[bp]
15790                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15791 38ED           FF76         16            push	$16[bp]
15792                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15793 38F0           E8         30FB            call	_biosfn_load_gfx_user_chars
15794 38F3           83C4                   0A  add	sp,*$A
15795                                           !BCC_EOS
15796                                           ! 1841         break;
15797 38F6           E9         00A0            br 	.22
15798                                           !BCC_EOS
15799                                           ! 1842        case 0x22:
15800                                           ! 1843         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15801                       000038F9            .2F:
15802                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15803 38F9           8A46         0C            mov	al,$C[bp]
15804                                           ! Debug: list unsigned char = al+0 (used reg = )
15805 38FC           30E4                       xor	ah,ah
15806 38FE           50                         push	ax
15807                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15808 38FF           E8         30ED            call	_biosfn_load_gfx_8_14_chars
15809 3902           44                         inc	sp
15810 3903           44                         inc	sp
15811                                           !BCC_EOS
15812                                           ! 1844         break;
15813 3904           E9         0092            br 	.22
15814                                           !BCC_EOS
15815                                           ! 1845        case 0x23:
15816                                           ! 1846         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15817                       00003907            .30:
15818                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15819 3907           8A46         0C            mov	al,$C[bp]
15820                                           ! Debug: list unsigned char = al+0 (used reg = )
15821 390A           30E4                       xor	ah,ah
15822 390C           50                         push	ax
15823                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15824 390D           E8         30E0            call	_biosfn_load_gfx_8_8_dd_chars
15825 3910           44                         inc	sp
15826 3911           44                         inc	sp
15827                                           !BCC_EOS
15828                                           ! 1847         break;
15829 3912           E9         0084            br 	.22
15830                                           !BCC_EOS
15831                                           ! 1848        case 0x24:
15832                                           ! 1849         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15833                       00003915            .31:
15834                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15835 3915           8A46         0C            mov	al,$C[bp]
15836                                           ! Debug: list unsigned char = al+0 (used reg = )
15837 3918           30E4                       xor	ah,ah
15838 391A           50                         push	ax
15839                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15840 391B           E8         30D3            call	_biosfn_load_gfx_8_16_chars
15841 391E           44                         inc	sp
15842 391F           44                         inc	sp
15843                                           !BCC_EOS
15844                                           ! 1850         break;
15845 3920           E9         0076            br 	.22
15846                                           !BCC_EOS
15847                                           ! 1851        case 0x30:
15848                                           ! 1852         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15849                       00003923            .32:
15850                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15851 3923           8D5E         0E            lea	bx,$E[bp]
15852 3926           53                         push	bx
15853                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15854 3927           8D5E         10            lea	bx,$10[bp]
15855 392A           53                         push	bx
15856                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15857 392B           8D5E         08            lea	bx,8[bp]
15858 392E           53                         push	bx
15859                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15860 392F           8D5E         16            lea	bx,$16[bp]
15861 3932           53                         push	bx
15862                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15863 3933           8B46         0C            mov	ax,$C[bp]
15864 3936           88E0                       mov	al,ah
15865 3938           30E4                       xor	ah,ah
15866                                           ! Debug: list unsigned int = ax+0 (used reg = )
15867 393A           50                         push	ax
15868                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15869 393B           E8         30B4            call	_biosfn_get_font_info
15870 393E           83C4                   0A  add	sp,*$A
15871                                           !BCC_EOS
15872                                           ! 1853         break;
15873 3941           EB           56            jmp .22
15874                                           !BCC_EOS
15875                                           ! 1854       }
15876                                           ! 1855      break;
15877 3943           EB           54            jmp .22
15878                       00003945            .24:
15879 3945           2C                     00  sub	al,*0
15880 3947         0F84         FF19            beq 	.25
15881 394B           2C                     01  sub	al,*1
15882 394D         0F84         FF3C            beq 	.27
15883 3951           2C                     01  sub	al,*1
15884 3953         0F84         FF4B            beq 	.29
15885 3957           2C                     02  sub	al,*2
15886 3959         0F84         FF5A            beq 	.2B
15887 395D           2C                     0C  sub	al,*$C
15888 395F         0F84         FF01            beq 	.26
15889 3963           2C                     01  sub	al,*1
15890 3965         0F84         FF24            beq 	.28
15891 3969           2C                     01  sub	al,*1
15892 396B         0F84         FF33            beq 	.2A
15893 396F           2C                     02  sub	al,*2
15894 3971         0F84         FF42            beq 	.2C
15895 3975           2C                     0C  sub	al,*$C
15896 3977         0F84         FF51            beq 	.2D
15897 397B           2C                     01  sub	al,*1
15898 397D         0F84         FF5A            beq 	.2E
15899 3981           2C                     01  sub	al,*1
15900 3983         0F84         FF72            beq 	.2F
15901 3987           2C                     01  sub	al,*1
15902 3989         0F84         FF7A            beq 	.30
15903 398D           2C                     01  sub	al,*1
15904 398F         0F84         FF82            beq 	.31
15905 3993           2C                     0C  sub	al,*$C
15906 3995         0F84         FF8A            beq 	.32
15907                       00003999            .22:
15908 3999           E9         01F9            br 	.1
15909                                           !BCC_EOS
15910                                           ! 1856    case 0x12:
15911                                           ! 1857      switch(( BX & 0x00ff ))
15912                       0000399C            .33:
15913                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15914 399C           8A46         0C            mov	al,$C[bp]
15915                                           ! 1858       {
15916 399F           EB           3C            jmp .36
15917                                           ! 1859        case 0x20:
15918                                           ! 1860         biosfn_alternate_prtsc();
15919                       000039A1            .37:
15920                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15921 39A1           E8         3228            call	_biosfn_alternate_prtsc
15922                                           !BCC_EOS
15923                                           ! 1861         break;
15924 39A4           EB           43            jmp .34
15925                                           !BCC_EOS
15926                                           ! 1862        case 0x35:
15927                                           ! 1863         biosfn_switch_video_inte
15928                                           ! 1863 rface(( AX & 0x00ff ),ES,DX);
15929                       000039A6            .38:
15930                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15931 39A6           FF76         0E            push	$E[bp]
15932                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15933 39A9           FF76         16            push	$16[bp]
15934                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15935 39AC           8A46         12            mov	al,$12[bp]
15936                                           ! Debug: list unsigned char = al+0 (used reg = )
15937 39AF           30E4                       xor	ah,ah
15938 39B1           50                         push	ax
15939                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15940 39B2           E8         32F1            call	_biosfn_switch_video_interface
15941 39B5           83C4                   06  add	sp,*6
15942                                           !BCC_EOS
15943                                           ! 1864         AX = ((AX & 0xff00) | (0x12));
15944                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15945 39B8           8B46         12            mov	ax,$12[bp]
15946 39BB           30C0                       xor	al,al
15947                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15948 39BD           0C                     12  or	al,*$12
15949                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15950 39BF           8946         12            mov	$12[bp],ax
15951                                           !BCC_EOS
15952                                           ! 1865         break;
15953 39C2           EB           25            jmp .34
15954                                           !BCC_EOS
15955                                           ! 1866        case 0x36:
15956                                           ! 1867         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15957                       000039C4            .39:
15958                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15959 39C4           8A46         12            mov	al,$12[bp]
15960                                           ! Debug: list unsigned char = al+0 (used reg = )
15961 39C7           30E4                       xor	ah,ah
15962 39C9           50                         push	ax
15963                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15964 39CA           E8         32DA            call	_biosfn_enable_video_refresh_control
15965 39CD           44                         inc	sp
15966 39CE           44                         inc	sp
15967                                           !BCC_EOS
15968                                           ! 1868         AX = ((AX & 0xff00) | (0x12));
15969                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15970 39CF           8B46         12            mov	ax,$12[bp]
15971 39D2           30C0                       xor	al,al
15972                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15973 39D4           0C                     12  or	al,*$12
15974                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15975 39D6           8946         12            mov	$12[bp],ax
15976                                           !BCC_EOS
15977                                           ! 1869         break;
15978 39D9           EB           0E            jmp .34
15979                                           !BCC_EOS
15980                                           ! 1870       }
15981                                           ! 1871      break;
15982 39DB           EB           0C            jmp .34
15983                       000039DD            .36:
15984 39DD           2C                     20  sub	al,*$20
15985 39DF           74           C0            je 	.37
15986 39E1           2C                     15  sub	al,*$15
15987 39E3           74           C1            je 	.38
15988 39E5           2C                     01  sub	al,*1
15989 39E7           74           DB            je 	.39
15990                       000039E9            .34:
15991 39E9           E9         01A9            br 	.1
15992                                           !BCC_EOS
15993                                           ! 1872    case 0x13:
15994                                           ! 1873      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
15995                       000039EC            .3A:
15996                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15997 39EC           FF76         08            push	8[bp]
15998                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15999 39EF           FF76         16            push	$16[bp]
16000                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
16001 39F2           8A46         0E            mov	al,$E[bp]
16002                                           ! Debug: list unsigned char = al+0 (used reg = )
16003 39F5           30E4                       xor	ah,ah
16004 39F7           50                         push	ax
16005                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
16006 39F8           8B46         0E            mov	ax,$E[bp]
16007 39FB           88E0                       mov	al,ah
16008 39FD           30E4                       xor	ah,ah
16009                                           ! Debug: list unsigned int = ax+0 (used reg = )
16010 39FF           50                         push	ax
16011                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
16012 3A00           FF76         10            push	$10[bp]
16013                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
16014 3A03           8A46         0C            mov	al,$C[bp]
16015                                           ! Debug: list unsigned char = al+0 (used reg = )
16016 3A06           30E4                       xor	ah,ah
16017 3A08           50                         push	ax
16018                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
16019 3A09           8B46         0C            mov	ax,$C[bp]
16020 3A0C           88E0                       mov	al,ah
16021 3A0E           30E4                       xor	ah,ah
16022                                           ! Debug: list unsigned int = ax+0 (used reg = )
16023 3A10           50                         push	ax
16024                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
16025 3A11           8A46         12            mov	al,$12[bp]
16026                                           ! Debug: list unsigned char = al+0 (used reg = )
16027 3A14           30E4                       xor	ah,ah
16028 3A16           50                         push	ax
16029                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
16030 3A17           E8         328E            call	_biosfn_write_string
16031 3A1A           83C4                   10  add	sp,*$10
16032                                           !BCC_EOS
16033                                           ! 1874      break;
16034 3A1D           E9         0175            br 	.1
16035                                           !BCC_EOS
16036                                           ! 1875    case 0x1B:
16037                                           ! 1876      biosfn_read_state_info(BX,ES,DI);
16038                       00003A20            .3B:
16039                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16040 3A20           FF76         04            push	4[bp]
16041                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16042 3A23           FF76         16            push	$16[bp]
16043                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16044 3A26           FF76         0C            push	$C[bp]
16045                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
16046 3A29           E8         3388            call	_biosfn_read_state_info
16047 3A2C           83C4                   06  add	sp,*6
16048                                           !BCC_EOS
16049                                           ! 1877      AX = ((AX & 0xff00) | (0x1B));
16050                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16051 3A2F           8B46         12            mov	ax,$12[bp]
16052 3A32           30C0                       xor	al,al
16053                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
16054 3A34           0C                     1B  or	al,*$1B
16055                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16056 3A36           8946         12            mov	$12[bp],ax
16057                                           !BCC_EOS
16058                                           ! 1878      break;
16059 3A39           E9         0159            br 	.1
16060                                           !BCC_EOS
16061                                           ! 1879    case 0x1C:
16062                                           ! 1880      switch(( AX & 0x00ff ))
16063                       00003A3C            .3C:
16064                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16065 3A3C           8A46         12            mov	al,$12[bp]
16066                                           ! 1881       {
16067 3A3F           E9         0033            br 	.3F
16068                                           ! 1882        case 0x00:
16069                                           ! 1883         biosfn_read_video_state_size(CX,&BX);
16070                       00003A42            .40:
16071                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16072 3A42           8D5E         0C            lea	bx,$C[bp]
16073 3A45           53                         push	bx
16074                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
16075 3A46           FF76         10            push	$10[bp]
16076                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
16077 3A49           E8         34E7            call	_biosfn_read_video_state_size
16078 3A4C           83C4                   04  add	sp,*4
16079                                           !BCC_EOS
16080                                           ! 1884         break;
16081 3A4F           EB           30            jmp .3D
16082                                           !BCC_EOS
16083                                           ! 1885        case 0x01:
16084                                           ! 1886         biosfn_save_video_state(CX,ES,BX);
16085                       00003A51            .41:
16086                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16087 3A51           FF76         0C            push	$C[bp]
16088                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16089 3A54           FF76         16            push	$16[bp]
16090                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16091 3A57           FF76         10            push	$10[bp]
16092                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
16093 3A5A           E8         34FA            call	_biosfn_save_video_state
16094 3A5D           83C4                   06  add	sp,*6
16095                                           !BCC_EOS
16096                                           ! 1887         break;
16097 3A60           EB           1F            jmp .3D
16098                                           !BCC_EOS
16099                                           ! 1888        case 0x02:
16100                                           ! 1889         biosfn_restore_video_state(CX,ES,BX);
16101                       00003A62            .42:
16102                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16103 3A62           FF76         0C            push	$C[bp]
16104                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16105 3A65           FF76         16            push	$16[bp]
16106                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16107 3A68           FF76         10            push	$10[bp]
16108                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
16109 3A6B           E8         3AB3            call	_biosfn_restore_video_state
16110 3A6E           83C4                   06  add	sp,*6
16111                                           !BCC_EOS
16112                                           ! 1890         break;
16113 3A71           EB           0E            jmp .3D
16114                                           !BCC_EOS
16115                                           ! 1891       }
16116                                           ! 1892      AX = ((AX & 0xff00) | (0x1C));
16117 3A73           EB           0C            jmp .3D
16118                       00003A75            .3F:
16119 3A75           2C                     00  sub	al,*0
16120 3A77           74           C9            je 	.40
16121 3A79           2C                     01  sub	al,*1
16122 3A7B           74           D4            je 	.41
16123 3A7D           2C                     01  sub	al,*1
16124 3A7F           74           E1            je 	.42
16125                       00003A81            .3D:
16126                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16127 3A81           8B46         12            mov	ax,$12[bp]
16128 3A84           30C0                       xor	al,al
16129                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
16130 3A86           0C                     1C  or	al,*$1C
16131                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16132 3A88           8946         12            mov	$12[bp],ax
16133                                           !BCC_EOS
16134                                           ! 1893      break;
16135 3A8B           E9         0107            br 	.1
16136                                           !BCC_EOS
16137                                           ! 1894    case 0x4f:
16138                                           ! 1895      if (vbe_has_vbe_display()) {
16139                       00003A8E            .43:
16140                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16141 3A8E           E8         5931            call	_vbe_has_vbe_display
16142 3A91           85C0                       test	ax,ax
16143 3A93         0F84         00A0            beq 	.44
16144                       00003A97            .45:
16145                                           ! 1896        switch(( AX & 0x00ff ))
16146                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16147 3A97           8A46         12            mov	al,$12[bp]
16148                                           ! 1897        {
16149 3A9A           EB           6E            jmp .48
16150                                           ! 1898          case 0x00:
16151                                           ! 1899           vbe_biosfn_return_controller_information(&AX,ES,DI);
16152                       00003A9C            .49:
16153                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16154 3A9C           FF76         04            push	4[bp]
16155                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16156 3A9F           FF76         16            push	$16[bp]
16157                                           ! Debug: list * unsigned short AX = S+6+$10 (used reg = )
16158 3AA2           8D5E         12            lea	bx,$12[bp]
16159 3AA5           53                         push	bx
16160                                           ! Debug: func () void = vbe_biosfn_return_controller_information+0 (used reg = )
16161 3AA6           E8         5990            call	_vbe_biosfn_return_controller_information
16162 3AA9           83C4                   06  add	sp,*6
16163                                           !BCC_EOS
16164                                           ! 1900           break;
16165 3AAC           E9         0086            br 	.46
16166                                           !BCC_EOS
16167                                           ! 1901          case 0x01:
16168                                           ! 1902           vbe_biosfn_return_mode_information(&AX,CX,ES,DI);
16169                       00003AAF            .4A:
16170                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16171 3AAF           FF76         04            push	4[bp]
16172                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16173 3AB2           FF76         16            push	$16[bp]
16174                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16175 3AB5           FF76         10            push	$10[bp]
16176                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16177 3AB8           8D5E         12            lea	bx,$12[bp]
16178 3ABB           53                         push	bx
16179                                           ! Debug: func () void = vbe_biosfn_return_mode_information+0 (used reg = )
16180 3ABC           E8         5BD2            call	_vbe_biosfn_return_mode_information
16181 3ABF           83C4                   08  add	sp,*8
16182                                           !BCC_EOS
16183                                           ! 1903           break;
16184 3AC2           EB           71            jmp .46
16185                                           !BCC_EOS
16186                                           ! 1904          case 0x02:
16187                                           ! 1905           vbe_biosfn_set_mode(&AX,BX,ES,DI);
16188                       00003AC4            .4B:
16189                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16190 3AC4           FF76         04            push	4[bp]
16191                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16192 3AC7           FF76         16            push	$16[bp]
16193                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16194 3ACA           FF76         0C            push	$C[bp]
16195                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16196 3ACD           8D5E         12            lea	bx,$12[bp]
16197 3AD0           53                         push	bx
16198                                           ! Debug: func () void = vbe_biosfn_set_mode+0 (used reg = )
16199 3AD1           E8         5CD9            call	_vbe_biosfn_set_mode
16200 3AD4           83C4                   08  add	sp,*8
16201                                           !BCC_EOS
16202                                           ! 1906           break;
16203 3AD7           EB           5C            jmp .46
16204                                           !BCC_EOS
16205                                           ! 1907          case 0x04:
16206                                           ! 1908           vbe_biosfn_save_restore_state(&AX, CX, DX, ES, &BX);
16207                       00003AD9            .4C:
16208                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16209 3AD9           8D5E         0C            lea	bx,$C[bp]
16210 3ADC           53                         push	bx
16211                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16212 3ADD           FF76         16            push	$16[bp]
16213                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
16214 3AE0           FF76         0E            push	$E[bp]
16215                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
16216 3AE3           FF76         10            push	$10[bp]
16217                                           ! Debug: list * unsigned short AX = S+$A+$10 (used reg = )
16218 3AE6           8D5E         12            lea	bx,$12[bp]
16219 3AE9           53                         push	bx
16220                                           ! Debug: func () void = vbe_biosfn_save_restore_state+0 (used reg = )
16221 3AEA           E8         5FF4            call	_vbe_biosfn_save_restore_state
16222 3AED           83C4                   0A  add	sp,*$A
16223                                           !BCC_EOS
16224                                           ! 1909           break;
16225 3AF0           EB           43            jmp .46
16226                                           !BCC_EOS
16227                                           ! 1910          case 0x09:
16228                                           ! 1911           AX=0x100;
16229                       00003AF2            .4D:
16230                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16231 3AF2           B8                   0100  mov	ax,#$100
16232 3AF5           8946         12            mov	$12[bp],ax
16233                                           !BCC_EOS
16234                                           ! 1912           break;
16235 3AF8           EB           3B            jmp .46
16236                                           !BCC_EOS
16237                                           ! 1913          case 0x0A:
16238                                           ! 1914           AX=0x100;
16239                       00003AFA            .4E:
16240                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16241 3AFA           B8                   0100  mov	ax,#$100
16242 3AFD           8946         12            mov	$12[bp],ax
16243                                           !BCC_EOS
16244                                           ! 1915           break;
16245 3B00           EB           33            jmp .46
16246                                           !BCC_EOS
16247                                           ! 1916          default:
16248                                           ! 1917           AX=0x100;
16249                       00003B02            .4F:
16250                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16251 3B02           B8                   0100  mov	ax,#$100
16252 3B05           8946         12            mov	$12[bp],ax
16253                                           !BCC_EOS
16254                                           ! 1918           }
16255                                           ! 1919         }
16256 3B08           EB           2B            jmp .46
16257                       00003B0A            .48:
16258 3B0A           2C                     00  sub	al,*0
16259 3B0C           72           F4            jb 	.4F
16260 3B0E           3C                     0A  cmp	al,*$A
16261 3B10           77           21            ja  	.50
16262 3B12           30E4                       xor	ah,ah
16263 3B14           D1E0                       shl	ax,*1
16264 3B16           89C3                       mov	bx,ax
16265 3B18           2E                         seg	cs
16266 3B19           FFA7       3B1D            br	.51[bx]
16267                       00003B1D            .51:
16268 3B1D                      3A9C            .word	.49
16269 3B1F                      3AAF            .word	.4A
16270 3B21                      3AC4            .word	.4B
16271 3B23                      3B02            .word	.4F
16272 3B25                      3AD9            .word	.4C
16273 3B27                      3B02            .word	.4F
16274 3B29                      3B02            .word	.4F
16275 3B2B                      3B02            .word	.4F
16276 3B2D                      3B02            .word	.4F
16277 3B2F                      3AF2            .word	.4D
16278 3B31                      3AFA            .word	.4E
16279                       00003B33            .50:
16280 3B33           EB           CD            jmp	.4F
16281                       00003B35            .46:
16282                                           ! 1920         else {
16283 3B35           EB           06            jmp .52
16284                       00003B37            .44:
16285                                           ! 1921           AX=0x0100;
16286                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16287 3B37           B8                   0100  mov	ax,#$100
16288 3B3A           8946         12            mov	$12[bp],ax
16289                                           !BCC_EOS
16290                                           ! 1922           }
16291                                           ! 1923         break;
16292                       00003B3D            .52:
16293 3B3D           EB           56            jmp .1
16294                                           !BCC_EOS
16295                                           ! 1924   }
16296                                           ! 1925 }
16297 3B3F           EB           54            jmp .1
16298                       00003B41            .3:
16299 3B41           2D                   0000  sub	ax,*0
16300 3B44           7C           4F            jl  	.1
16301 3B46           3D                   001C  cmp	ax,*$1C
16302 3B49           77           43            ja  	.53
16303 3B4B           D1E0                       shl	ax,*1
16304 3B4D           89C3                       mov	bx,ax
16305 3B4F           2E                         seg	cs
16306 3B50           FFA7       3B54            br	.54[bx]
16307                       00003B54            .54:
16308 3B54                      3669            .word	.4
16309 3B56                      36C7            .word	.13
16310 3B58                      36DE            .word	.14
16311 3B5A                      36F2            .word	.15
16312 3B5C                      370B            .word	.16
16313 3B5E                      3722            .word	.17
16314 3B60                      3730            .word	.18
16315 3B62                      376B            .word	.19
16316 3B64                      37A5            .word	.1A
16317 3B66                      37BA            .word	.1B
16318 3B68                      37DA            .word	.1C
16319 3B6A                      3B95            .word	.1
16320 3B6C                      37FA            .word	.1D
16321 3B6E                      3817            .word	.1E
16322 3B70                      3832            .word	.1F
16323 3B72                      3B95            .word	.1
16324 3B74                      384F            .word	.20
16325 3B76                      385E            .word	.21
16326 3B78                      399C            .word	.33
16327 3B7A                      39EC            .word	.3A
16328 3B7C                      3B95            .word	.1
16329 3B7E                      3B95            .word	.1
16330 3B80                      3B95            .word	.1
16331 3B82                      3B95            .word	.1
16332 3B84                      3B95            .word	.1
16333 3B86                      3B95            .word	.1
16334 3B88                      3B95            .word	.1
16335 3B8A                      3A20            .word	.3B
16336 3B8C                      3A3C            .word	.3C
16337                       00003B8E            .53:
16338 3B8E           2D                   004F  sub	ax,*$4F
16339 3B91         0F84         FEF9            beq 	.43
16340                       00003B95            .1:
16341                       FFFFFFFE            ..FFFF	=	-2
16342 3B95           5D                         pop	bp
16343 3B96           C3                         ret
16344                                           ! 1926 static void biosfn_set_video_mode(mode) Bit8u mode;
16345                                           ! Register BX used in function int10_func
16346                       00003B97            _biosfn_set_video_mode:
16347                                           !BCC_EOS
16348                                           ! 1927 {
16349                                           ! 1928  Bit8u noclearmem=mode&0x80;
16350 3B97           55                         push	bp
16351 3B98           89E5                       mov	bp,sp
16352 3B9A           4C                         dec	sp
16353                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16354 3B9B           8A46         04            mov	al,4[bp]
16355 3B9E           24                     80  and	al,#$80
16356                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16357 3BA0           8846         FF            mov	-1[bp],al
16358                                           !BCC_EOS
16359                                           ! 1929  Bit8u line,mmask,*palette,vpti;
16360                                           !BCC_EOS
16361                                           ! 1930  Bit16u i,twidth,theightm1,cheight;
16362                                           !BCC_EOS
16363                                           ! 1931  Bit8u modeset_ctl,video_ctl,vga_switches;
16364                                           !BCC_EOS
16365                                           ! 1932  Bit16u crtc_addr;
16366                                           !BCC_EOS
16367                                           ! 1933  if (vbe_has_vbe_display()) {
16368 3BA3           83C4                   EB  add	sp,*-$15
16369                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16370 3BA6           E8         5819            call	_vbe_has_vbe_display
16371 3BA9           85C0                       test	ax,ax
16372 3BAB           74           08            je  	.55
16373                       00003BAD            .56:
16374                                           ! 1934    dispi_set_enable(0x00);
16375                                           ! Debug: list int = const 0 (used reg = )
16376 3BAD           31C0                       xor	ax,ax
16377 3BAF           50                         push	ax
16378                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
16379 3BB0           E8         55DC            call	_dispi_set_enable
16380 3BB3           44                         inc	sp
16381 3BB4           44                         inc	sp
16382                                           !BCC_EOS
16383                                           ! 1935   }
16384                                           ! 1936  mode=mode&0x7f;
16385                       00003BB5            .55:
16386                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16387 3BB5           8A46         04            mov	al,4[bp]
16388 3BB8           24                     7F  and	al,*$7F
16389                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16390 3BBA           8846         04            mov	4[bp],al
16391                                           !BCC_EOS
16392                                           ! 1937  line=find_vga_entry(mode);
16393                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16394 3BBD           8A46         04            mov	al,4[bp]
16395 3BC0           30E4                       xor	ah,ah
16396 3BC2           50                         push	ax
16397                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16398 3BC3           E8         3F39            call	_find_vga_entry
16399 3BC6           44                         inc	sp
16400 3BC7           44                         inc	sp
16401                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16402 3BC8           8846         FE            mov	-2[bp],al
16403                                           !BCC_EOS
16404                                           ! 1938  if(line==0xFF)
16405                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16406 3BCB           8A46         FE            mov	al,-2[bp]
16407 3BCE           3C                     FF  cmp	al,#$FF
16408 3BD0           75           04            jne 	.57
16409                       00003BD2            .58:
16410                                           ! 1939   return;
16411 3BD2           89EC                       mov	sp,bp
16412 3BD4           5D                         pop	bp
16413 3BD5           C3                         ret
16414                                           !BCC_EOS
16415                                           ! 1940  vpti=line_to_vpti[line];
16416                       00003BD6            .57:
16417                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
16418 3BD6           8A46         FE            mov	al,-2[bp]
16419 3BD9           30E4                       xor	ah,ah
16420 3BDB           89C3                       mov	bx,ax
16421                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16422 3BDD           8A87       027D            mov	al,_line_to_vpti[bx]
16423 3BE1           8846         F9            mov	-7[bp],al
16424                                           !BCC_EOS
16425                                           ! 1941  twidth=video_param_table[vpti].twidth;
16426                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16427 3BE4           8A46         F9            mov	al,-7[bp]
16428 3BE7           30E4                       xor	ah,ah
16429 3BE9           B1                     06  mov	cl,*6
16430 3BEB           D3E0                       shl	ax,cl
16431 3BED           89C3                       mov	bx,ax
16432                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16433 3BEF           8A87       0291            mov	al,_video_param_table[bx]
16434 3BF3           30E4                       xor	ah,ah
16435 3BF5           8946         F4            mov	-$C[bp],ax
16436                                           !BCC_EOS
16437                                           ! 1942  theightm1=video_param_table[vpti].theightm1;
16438                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16439 3BF8           8A46         F9            mov	al,-7[bp]
16440 3BFB           30E4                       xor	ah,ah
16441 3BFD           B1                     06  mov	cl,*6
16442 3BFF           D3E0                       shl	ax,cl
16443 3C01           89C3                       mov	bx,ax
16444 3C03           81C3                 0291  add	bx,#_video_param_table
16445                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16446 3C07           8A47         01            mov	al,1[bx]
16447 3C0A           30E4                       xor	ah,ah
16448 3C0C           8946         F2            mov	-$E[bp],ax
16449                                           !BCC_EOS
16450                                           ! 1943  cheight=video_param_table[vpti].cheight;
16451                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16452 3C0F           8A46         F9            mov	al,-7[bp]
16453 3C12           30E4                       xor	ah,ah
16454 3C14           B1                     06  mov	cl,*6
16455 3C16           D3E0                       shl	ax,cl
16456 3C18           89C3                       mov	bx,ax
16457 3C1A           81C3                 0291  add	bx,#_video_param_table
16458                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16459 3C1E           8A47         02            mov	al,2[bx]
16460 3C21           30E4                       xor	ah,ah
16461 3C23           8946         F0            mov	-$10[bp],ax
16462                                           !BCC_EOS
16463                                           ! 1944  video_ctl=read_byte(0x4
16464                                           ! 1944 0,0x87);
16465                                           ! Debug: list int = const $87 (used reg = )
16466 3C26           B8                   0087  mov	ax,#$87
16467 3C29           50                         push	ax
16468                                           ! Debug: list int = const $40 (used reg = )
16469 3C2A           B8                   0040  mov	ax,*$40
16470 3C2D           50                         push	ax
16471                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16472 3C2E           E8         3FBA            call	_read_byte
16473 3C31           83C4                   04  add	sp,*4
16474                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16475 3C34           8846         EE            mov	-$12[bp],al
16476                                           !BCC_EOS
16477                                           ! 1945  vga_switches=read_byte(0x40,0x88);
16478                                           ! Debug: list int = const $88 (used reg = )
16479 3C37           B8                   0088  mov	ax,#$88
16480 3C3A           50                         push	ax
16481                                           ! Debug: list int = const $40 (used reg = )
16482 3C3B           B8                   0040  mov	ax,*$40
16483 3C3E           50                         push	ax
16484                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16485 3C3F           E8         3FA9            call	_read_byte
16486 3C42           83C4                   04  add	sp,*4
16487                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16488 3C45           8846         ED            mov	-$13[bp],al
16489                                           !BCC_EOS
16490                                           ! 1946  modeset_ctl=read_byte(0x40,0x89);
16491                                           ! Debug: list int = const $89 (used reg = )
16492 3C48           B8                   0089  mov	ax,#$89
16493 3C4B           50                         push	ax
16494                                           ! Debug: list int = const $40 (used reg = )
16495 3C4C           B8                   0040  mov	ax,*$40
16496 3C4F           50                         push	ax
16497                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16498 3C50           E8         3F98            call	_read_byte
16499 3C53           83C4                   04  add	sp,*4
16500                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16501 3C56           8846         EF            mov	-$11[bp],al
16502                                           !BCC_EOS
16503                                           ! 1947  if((modeset_ctl&0x08)==0)
16504                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16505 3C59           8A46         EF            mov	al,-$11[bp]
16506 3C5C           24                     08  and	al,*8
16507                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16508 3C5E           84C0                       test	al,al
16509 3C60         0F85         0145            bne 	.59
16510                       00003C64            .5A:
16511                                           ! 1948   {
16512                                           ! 1949    outb(0x3c6,vga_modes[line].pelmask);
16513                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16514 3C64           8A46         FE            mov	al,-2[bp]
16515 3C67           30E4                       xor	ah,ah
16516 3C69           B1                     03  mov	cl,*3
16517 3C6B           D3E0                       shl	ax,cl
16518 3C6D           89C3                       mov	bx,ax
16519 3C6F           81C3                 01FD  add	bx,#_vga_modes
16520                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16521 3C73           8A47         06            mov	al,6[bx]
16522 3C76           30E4                       xor	ah,ah
16523 3C78           50                         push	ax
16524                                           ! Debug: list int = const $3C6 (used reg = )
16525 3C79           B8                   03C6  mov	ax,#$3C6
16526 3C7C           50                         push	ax
16527                                           ! Debug: func () void = outb+0 (used reg = )
16528 3C7D           E8         3FD7            call	_outb
16529 3C80           83C4                   04  add	sp,*4
16530                                           !BCC_EOS
16531                                           ! 1950    outb(0x3c8,0x00);
16532                                           ! Debug: list int = const 0 (used reg = )
16533 3C83           31C0                       xor	ax,ax
16534 3C85           50                         push	ax
16535                                           ! Debug: list int = const $3C8 (used reg = )
16536 3C86           B8                   03C8  mov	ax,#$3C8
16537 3C89           50                         push	ax
16538                                           ! Debug: func () void = outb+0 (used reg = )
16539 3C8A           E8         3FCA            call	_outb
16540 3C8D           83C4                   04  add	sp,*4
16541                                           !BCC_EOS
16542                                           ! 1951    switch(vga_modes[line].dacmodel)
16543                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16544 3C90           8A46         FE            mov	al,-2[bp]
16545 3C93           30E4                       xor	ah,ah
16546 3C95           B1                     03  mov	cl,*3
16547 3C97           D3E0                       shl	ax,cl
16548 3C99           89C3                       mov	bx,ax
16549 3C9B           81C3                 01FD  add	bx,#_vga_modes
16550 3C9F           8A47         07            mov	al,7[bx]
16551                                           ! 1952     {case 0:
16552 3CA2           EB           22            jmp .5D
16553                                           ! 1953       palette=&palette0;
16554                       00003CA4            .5E:
16555                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16556 3CA4           BB                   0A11  mov	bx,#_palette0
16557 3CA7           895E         FA            mov	-6[bp],bx
16558                                           !BCC_EOS
16559                                           ! 1954       break;
16560 3CAA           EB           2A            jmp .5B
16561                                           !BCC_EOS
16562                                           ! 1955      case 1:
16563                                           ! 1956       palette=&palette1;
16564                       00003CAC            .5F:
16565                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16566 3CAC           BB                   0AD1  mov	bx,#_palette1
16567 3CAF           895E         FA            mov	-6[bp],bx
16568                                           !BCC_EOS
16569                                           ! 1957       break;
16570 3CB2           EB           22            jmp .5B
16571                                           !BCC_EOS
16572                                           ! 1958      case 2:
16573                                           ! 1959       palette=&palette2;
16574                       00003CB4            .60:
16575                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16576 3CB4           BB                   0B91  mov	bx,#_palette2
16577 3CB7           895E         FA            mov	-6[bp],bx
16578                                           !BCC_EOS
16579                                           ! 1960       break;
16580 3CBA           EB           1A            jmp .5B
16581                                           !BCC_EOS
16582                                           ! 1961      case 3:
16583                                           ! 1962       palette=&palette3;
16584                       00003CBC            .61:
16585                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16586 3CBC           BB                   0C51  mov	bx,#_palette3
16587 3CBF           895E         FA            mov	-6[bp],bx
16588                                           !BCC_EOS
16589                                           ! 1963       break;
16590 3CC2           EB           12            jmp .5B
16591                                           !BCC_EOS
16592                                           ! 1964     }
16593                                           ! 1965    for(i=0;i<0x0100;i++)
16594 3CC4           EB           10            jmp .5B
16595                       00003CC6            .5D:
16596 3CC6           2C                     00  sub	al,*0
16597 3CC8           74           DA            je 	.5E
16598 3CCA           2C                     01  sub	al,*1
16599 3CCC           74           DE            je 	.5F
16600 3CCE           2C                     01  sub	al,*1
16601 3CD0           74           E2            je 	.60
16602 3CD2           2C                     01  sub	al,*1
16603 3CD4           74           E6            je 	.61
16604                       00003CD6            .5B:
16605                       FFFFFFE8            ..FFFE	=	-$18
16606                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16607 3CD6           31C0                       xor	ax,ax
16608 3CD8           8946         F6            mov	-$A[bp],ax
16609                                           !BCC_EOS
16610                                           !BCC_EOS
16611                                           ! 1966     {if(i<=dac_regs[vga_modes[line].dacmodel])
16612 3CDB           E9         00AB            br 	.64
16613                       00003CDE            .65:
16614                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16615 3CDE           8A46         FE            mov	al,-2[bp]
16616 3CE1           30E4                       xor	ah,ah
16617 3CE3           B1                     03  mov	cl,*3
16618 3CE5           D3E0                       shl	ax,cl
16619 3CE7           89C3                       mov	bx,ax
16620 3CE9           81C3                 01FD  add	bx,#_vga_modes
16621                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16622 3CED           8A47         07            mov	al,7[bx]
16623 3CF0           30E4                       xor	ah,ah
16624 3CF2           89C3                       mov	bx,ax
16625                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16626 3CF4           8A87       028D            mov	al,_dac_regs[bx]
16627 3CF8           30E4                       xor	ah,ah
16628 3CFA           3B46         F6            cmp	ax,-$A[bp]
16629 3CFD           72           5C            jb  	.66
16630                       00003CFF            .67:
16631                                           ! 1967       {outb(0x3c9,palette[(i*3)+0]);
16632                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16633 3CFF           8B46         F6            mov	ax,-$A[bp]
16634 3D02           89C2                       mov	dx,ax
16635 3D04           D1E0                       shl	ax,*1
16636 3D06           01D0                       add	ax,dx
16637                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16638                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16639 3D08           0346         FA            add	ax,-6[bp]
16640 3D0B           89C3                       mov	bx,ax
16641                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16642 3D0D           8A07                       mov	al,[bx]
16643 3D0F           30E4                       xor	ah,ah
16644 3D11           50                         push	ax
16645                                           ! Debug: list int = const $3C9 (used reg = )
16646 3D12           B8                   03C9  mov	ax,#$3C9
16647 3D15           50                         push	ax
16648                                           ! Debug: func () void = outb+0 (used reg = )
16649 3D16           E8         3F3E            call	_outb
16650 3D19           83C4                   04  add	sp,*4
16651                                           !BCC_EOS
16652                                           ! 1968        outb(0x3c9,palette[(i*3)+1]);
16653                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16654 3D1C           8B46         F6            mov	ax,-$A[bp]
16655 3D1F           89C2                       mov	dx,ax
16656 3D21           D1E0                       shl	ax,*1
16657 3D23           01D0                       add	ax,dx
16658                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16659                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16660 3D25           40                         inc	ax
16661 3D26           0346         FA            add	ax,-6[bp]
16662 3D29           89C3                       mov	bx,ax
16663                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16664 3D2B           8A07                       mov	al,[bx]
16665 3D2D           30E4                       xor	ah,ah
16666 3D2F           50                         push	ax
16667                                           ! Debug: list int = const $3C9 (used reg = )
16668 3D30           B8                   03C9  mov	ax,#$3C9
16669 3D33           50                         push	ax
16670                                           ! Debug: func () void = outb+0 (used reg = )
16671 3D34           E8         3F20            call	_outb
16672 3D37           83C4                   04  add	sp,*4
16673                                           !BCC_EOS
16674                                           ! 1969        outb(0x3c9,palette[(i*3)+2]);
16675                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16676 3D3A           8B46         F6            mov	ax,-$A[bp]
16677 3D3D           89C2                       mov	dx,ax
16678 3D3F           D1E0                       shl	ax,*1
16679 3D41           01D0                       add	ax,dx
16680                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16681                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16682 3D43           40                         inc	ax
16683 3D44           40                         inc	ax
16684 3D45           0346         FA            add	ax,-6[bp]
16685 3D48           89C3                       mov	bx,ax
16686                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16687 3D4A           8A07                       mov	al,[bx]
16688 3D4C           30E4                       xor	ah,ah
16689 3D4E           50                         push	ax
16690                                           ! Debug: list int = const $3C9 (used reg = )
16691 3D4F           B8                   03C9  mov	ax,#$3C9
16692 3D52           50                         push	ax
16693                                           ! Debug: func () void = outb+0 (used reg = )
16694 3D53           E8         3F01            call	_outb
16695 3D56           83C4                   04  add	sp,*4
16696                                           !BCC_EOS
16697                                           ! 1970       }
16698                                           ! 1971      else
16699                                           ! 1972       {outb(0x3c9,0);
16700 3D59           EB           27            jmp .68
16701                       00003D5B            .66:
16702                                           ! Debug: list int = const 0 (used reg = )
16703 3D5B           31C0                       xor	ax,ax
16704 3D5D           50                         push	ax
16705                                           ! Debug: list int = const $3C9 (used reg = )
16706 3D5E           B8                   03C9  mov	ax,#$3C9
16707 3D61           50                         push	ax
16708                                           ! Debug: func () void = outb+0 (used reg = )
16709 3D62           E8         3EF2            call	_outb
16710 3D65           83C4                   04  add	sp,*4
16711                                           !BCC_EOS
16712                                           ! 1973        outb(0x3c9,0);
16713                                           ! Debug: list int = const 0 (used reg = )
16714 3D68           31C0                       xor	ax,ax
16715 3D6A           50                         push	ax
16716                                           ! Debug: list int = const $3C9 (used reg = )
16717 3D6B           B8                   03C9  mov	ax,#$3C9
16718 3D6E           50                         push	ax
16719                                           ! Debug: func () void = outb+0 (used reg = )
16720 3D6F           E8         3EE5            call	_outb
16721 3D72           83C4                   04  add	sp,*4
16722                                           !BCC_EOS
16723                                           ! 1974        outb(0x3c9,0);
16724                                           ! Debug: list int = const 0 (used reg = )
16725 3D75           31C0                       xor	ax,ax
16726 3D77           50                         push	ax
16727                                           ! Debug: list int = const $3C9 (used reg = )
16728 3D78           B8                   03C9  mov	ax,#$3C9
16729 3D7B           50                         push	ax
16730                                           ! Debug: func () void = outb+0 (used reg = )
16731 3D7C           E8         3ED8            call	_outb
16732 3D7F           83C4                   04  add	sp,*4
16733                                           !BCC_EOS
16734                                           ! 1975       }
16735                                           ! 1976     }
16736                       00003D82            .68:
16737                                           ! 1977    if((modeset_ctl&0x02)==0x02)
16738                       00003D82            .63:
16739                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16740 3D82           8B46         F6            mov	ax,-$A[bp]
16741 3D85           40                         inc	ax
16742 3D86           8946         F6            mov	-$A[bp],ax
16743                       00003D89            .64:
16744                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16745 3D89           8B46         F6            mov	ax,-$A[bp]
16746 3D8C           3D                   0100  cmp	ax,#$100
16747 3D8F         0F82         FF4B            blo 	.65
16748                       00003D93            .69:
16749                       00003D93            .62:
16750                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16751 3D93           8A46         EF            mov	al,-$11[bp]
16752 3D96           24                     02  and	al,*2
16753                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16754 3D98           3C                     02  cmp	al,*2
16755 3D9A           75           0D            jne 	.6A
16756                       00003D9C            .6B:
16757                                           ! 1978     {
16758                                           ! 1979      biosfn_perform_gray_scale_summing(0x00, 0x100);
16759                                           ! Debug: list int = const $100 (used reg = )
16760 3D9C           B8                   0100  mov	ax,#$100
16761 3D9F           50                         push	ax
16762                                           ! Debug: list int = const 0 (used reg = )
16763 3DA0           31C0                       xor	ax,ax
16764 3DA2           50                         push	ax
16765                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16766 3DA3           E8         273E            call	_biosfn_perform_gray_scale_summing
16767 3DA6           83C4                   04  add	sp,*4
16768                                           !BCC_EOS
16769                                           ! 1980     }
16770                                           ! 1981   }
16771                       00003DA9            .6A:
16772                                           ! 1982  inb(0x3da);
16773                       00003DA9            .59:
16774                                           ! Debug: list int = const $3DA (used reg = )
16775 3DA9           B8                   03DA  mov	ax,#$3DA
16776 3DAC           50                         push	ax
16777                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16778 3DAD           E8         3E91            call	_inb
16779 3DB0           44                         inc	sp
16780 3DB1           44                         inc	sp
16781                                           !BCC_EOS
16782                                           ! 1983  for(i=0;i<=0x13;i++)
16783                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16784 3DB2           31C0                       xor	ax,ax
16785 3DB4           8946         F6            mov	-$A[bp],ax
16786                                           !BCC_EOS
16787                                           !BCC_EOS
16788                                           ! 1984   {outb(0x3c0,i);
16789 3DB7           EB           38            jmp .6E
16790                       00003DB9            .6F:
16791                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16792 3DB9           FF76         F6            push	-$A[bp]
16793                                           ! Debug: list int = const $3C0 (used reg = )
16794 3DBC           B8                   03C0  mov	ax,#$3C0
16795 3DBF           50                         push	ax
16796                                           ! Debug: func () void = outb+0 (used reg = )
16797 3DC0           E8         3E94            call	_outb
16798 3DC3           83C4                   04  add	sp,*4
16799                                           !BCC_EOS
16800                                           ! 1985    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16801                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16802 3DC6           8A46         F9            mov	al,-7[bp]
16803 3DC9           30E4                       xor	ah,ah
16804 3DCB           B1                     06  mov	cl,*6
16805 3DCD           D3E0                       shl	ax,cl
16806 3DCF           89C3                       mov	bx,ax
16807 3DD1           81C3                 0291  add	bx,#_video_param_table
16808                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16809 3DD5           8B46         F6            mov	ax,-$A[bp]
16810 3DD8           01C3                       add	bx,ax
16811                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16812 3DDA           8A47         23            mov	al,$23[bx]
16813 3DDD           30E4                       xor	ah,ah
16814 3DDF           50                         push	ax
16815                                           ! Debug: list int = const $3C0 (used reg = )
16816 3DE0           B8                   03C0  mov	ax,#$3C0
16817 3DE3           50                         push	ax
16818                                           ! Debug: func () void = outb+0 (used reg = )
16819 3DE4           E8         3E70            call	_outb
16820 3DE7           83C4                   04  add	sp,*4
16821                                           !BCC_EOS
16822                                           ! 1986   }
16823                                           ! 1987  outb(0x3c0,0x14);
16824                       00003DEA            .6D:
16825                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16826 3DEA           8B46         F6            mov	ax,-$A[bp]
16827 3DED           40                         inc	ax
16828 3DEE           8946         F6            mov	-$A[bp],ax
16829                       00003DF1            .6E:
16830                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16831 3DF1           8B46         F6            mov	ax,-$A[bp]
16832 3DF4           3D                   0013  cmp	ax,*$13
16833 3DF7           76           C0            jbe	.6F
16834                       00003DF9            .70:
16835                       00003DF9            .6C:
16836                                           ! Debug: list int = const $14 (used reg = )
16837 3DF9           B8                   0014  mov	ax,*$14
16838 3DFC           50                         push	ax
16839                                           ! Debug: list int = const $3C0 (used reg = )
16840 3DFD           B8                   03C0  mov	ax,#$3C0
16841 3E00           50                         push	ax
16842                                           ! Debug: func () void = outb+0 (used reg = )
16843 3E01           E8         3E53            call	_outb
16844 3E04           83C4                   04  add	sp,*4
16845                                           !BCC_EOS
16846                                           ! 1988  outb(0x3c0,0x00);
16847                                           ! Debug: list int = const 0 (used reg = )
16848 3E07           31C0                       xor	ax,ax
16849 3E09           50                         push	ax
16850                                           ! Debug: list int = const $3C0 (used reg = )
16851 3E0A           B8                   03C0  mov	ax,#$3C0
16852 3E0D           50                         push	ax
16853                                           ! Debug: func () void = outb+0 (used reg = )
16854 3E0E           E8         3E46            call	_outb
16855 3E11           83C4                   04  add	sp,*4
16856                                           !BCC_EOS
16857                                           ! 1989  outb(0x3c4,0);
16858                                           ! Debug: list int = const 0 (used reg = )
16859 3E14           31C0                       xor	ax,ax
16860 3E16           50                         push	ax
16861                                           ! Debug: list int = const $3C4 (used reg = )
16862 3E17           B8                   03C4  mov	ax,#$3C4
16863 3E1A           50                         push	ax
16864                                           ! Debug: func () void = outb+0 (used reg = )
16865 3E1B           E8         3E39            call	_outb
16866 3E1E           83C4                   04  add	sp,*4
16867                                           !BCC_EOS
16868                                           ! 1990  outb(0x3c5,0x03);
16869                                           ! Debug: list int = const 3 (used reg = )
16870 3E21           B8                   0003  mov	ax,*3
16871 3E24           50                         push	ax
16872                                           ! Debug: list int = const $3C5 (used reg = )
16873 3E25           B8                   03C5  mov	ax,#$3C5
16874 3E28           50                         push	ax
16875                                           ! Debug: func () void = outb+0 (used reg = )
16876 3E29           E8         3E2B            call	_outb
16877 3E2C           83C4                   04  add	sp,*4
16878                                           !BCC_EOS
16879                                           ! 1991  for(i=1;i<=4;i++)
16880                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16881 3E2F           B8                   0001  mov	ax,*1
16882 3E32           8946         F6            mov	-$A[bp],ax
16883                                           !BCC_EOS
16884                                           !BCC_EOS
16885                                           ! 1992   {outb(0x3c4,i);
16886 3E35           EB           3F            jmp .73
16887                       00003E37            .74:
16888                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16889 3E37           FF76         F6            push	-$A[bp]
16890                                           ! Debug: list int = const $3C4 (used reg = )
16891 3E3A           B8                   03C4  mov	ax,#$3C4
16892 3E3D           50                         push	ax
16893                                           ! Debug: func () void = outb+0 (used reg = )
16894 3E3E           E8         3E16            call	_outb
16895 3E41           83C4                   04  add	sp,*4
16896                                           !BCC_EOS
16897                                           ! 1993    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16898                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16899 3E44           8B46         F6            mov	ax,-$A[bp]
16900 3E47           48                         dec	ax
16901 3E48           50                         push	ax
16902                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16903 3E49           8A46         F9            mov	al,-7[bp]
16904 3E4C           30E4                       xor	ah,ah
16905 3E4E           B1                     06  mov	cl,*6
16906 3E50           D3E0                       shl	ax,cl
16907 3E52           89C3                       mov	bx,ax
16908 3E54           81C3                 0291  add	bx,#_video_param_table
16909                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16910 3E58           8B46         E8            mov	ax,-$18[bp]
16911 3E5B           01C3                       add	bx,ax
16912 3E5D           44                         inc	sp
16913 3E5E           44                         inc	sp
16914                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16915 3E5F           8A47         05            mov	al,5[bx]
16916 3E62           30E4                       xor	ah,ah
16917 3E64           50                         push	ax
16918                                           ! Debug: list int = const $3C5 (used reg = )
16919 3E65           B8                   03C5  mov	ax,#$3C5
16920 3E68           50                         push	ax
16921                                           ! Debug: func () void = outb+0 (used reg = )
16922 3E69           E8         3DEB            call	_outb
16923 3E6C           83C4                   04  add	sp,*4
16924                                           !BCC_EOS
16925                                           ! 1994   }
16926                                           ! 1995  for(i=0;i<=8;i++)
16927                       00003E6F            .72:
16928                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16929 3E6F           8B46         F6            mov	ax,-$A[bp]
16930 3E72           40                         inc	ax
16931 3E73           8946         F6            mov	-$A[bp],ax
16932                       00003E76            .73:
16933                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16934 3E76           8B46         F6            mov	ax,-$A[bp]
16935 3E79           3D                   0004  cmp	ax,*4
16936 3E7C           76           B9            jbe	.74
16937                       00003E7E            .75:
16938                       00003E7E            .71:
16939                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16940 3E7E           31C0                       xor	ax,ax
16941 3E80           8946         F6            mov	-$A[bp],ax
16942                                           !BCC_EOS
16943                                           !BCC_EOS
16944                                           ! 1996   {outb(0x3ce,i);
16945 3E83           EB           38            jmp .78
16946                       00003E85            .79:
16947                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16948 3E85           FF76         F6            push	-$A[bp]
16949                                           ! Debug: list int = const $3CE (used reg = )
16950 3E88           B8                   03CE  mov	ax,#$3CE
16951 3E8B           50                         push	ax
16952                                           ! Debug: func () void = outb+0 (used reg = )
16953 3E8C           E8         3DC8            call	_outb
16954 3E8F           83C4                   04  add	sp,*4
16955                                           !BCC_EOS
16956                                           ! 1997    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16957                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16958 3E92           8A46         F9            mov	al,-7[bp]
16959 3E95           30E4                       xor	ah,ah
16960 3E97           B1                     06  mov	cl,*6
16961 3E99           D3E0                       shl	ax,cl
16962 3E9B           89C3                       mov	bx,ax
16963 3E9D           81C3                 0291  add	bx,#_video_param_table
16964                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16965 3EA1           8B46         F6            mov	ax,-$A[bp]
16966 3EA4           01C3                       add	bx,ax
16967                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16968 3EA6           8A47         37            mov	al,$37[bx]
16969 3EA9           30E4                       xor	ah,ah
16970 3EAB           50                         push	ax
16971                                           ! Debug: list int = const $3CF (used reg = )
16972 3EAC           B8                   03CF  mov	ax,#$3CF
16973 3EAF           50                         push	ax
16974                                           ! Debug: func () void = outb+0 (used reg = )
16975 3EB0           E8         3DA4            call	_outb
16976 3EB3           83C4                   04  add	sp,*4
16977                                           !BCC_EOS
16978                                           ! 1998   }
16979                                           ! 1999  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
16980                       00003EB6            .77:
16981                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16982 3EB6           8B46         F6            mov	ax,-$A[bp]
16983 3EB9           40                         inc	ax
16984 3EBA           8946         F6            mov	-$A[bp],ax
16985                       00003EBD            .78:
16986                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
16987 3EBD           8B46         F6            mov	ax,-$A[bp]
16988 3EC0           3D                   0008  cmp	ax,*8
16989 3EC3           76           C0            jbe	.79
16990                       00003EC5            .7A:
16991                       00003EC5            .76:
16992                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16993 3EC5           8A46         FE            mov	al,-2[bp]
16994 3EC8           30E4                       xor	ah,ah
16995 3ECA           B1                     03  mov	cl,*3
16996 3ECC           D3E0                       shl	ax,cl
16997 3ECE           89C3                       mov	bx,ax
16998 3ED0           81C3                 01FD  add	bx,#_vga_modes
16999                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
17000 3ED4           8A47         02            mov	al,2[bx]
17001 3ED7           3C                     01  cmp	al,*1
17002 3ED9           75           05            jne 	.7B
17003                       00003EDB            .7C:
17004 3EDB           B8                   03B4  mov	ax,#$3B4
17005 3EDE           EB           03            jmp .7D
17006                       00003EE0            .7B:
17007 3EE0           B8                   03D4  mov	ax,#$3D4
17008                       00003EE3            .7D:
17009                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
17010 3EE3           8946         EA            mov	-$16[bp],ax
17011                                           !BCC_EOS
17012                                           ! 2000  outw(crtc_addr,0x0011);
17013                                           ! Debug: list int = const $11 (used reg = )
17014 3EE6           B8                   0011  mov	ax,*$11
17015 3EE9           50                         push	ax
17016                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17017 3EEA           FF76         EA            push	-$16[bp]
17018                                           ! Debug: func () void = outw+0 (used reg = )
17019 3EED           E8         3D77            call	_outw
17020 3EF0           83C4                   04  add	sp,*4
17021                                           !BCC_EOS
17022                                           ! 2001  for(i=0;i<=0x18;i++)
17023                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17024 3EF3           31C0                       xor	ax,ax
17025 3EF5           8946         F6            mov	-$A[bp],ax
17026                                           !BCC_EOS
17027                                           !BCC_EOS
17028                                           ! 2002   {outb(crtc_addr,i);
17029 3EF8           EB           38            jmp .80
17030                       00003EFA            .81:
17031                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17032 3EFA           FF76         F6            push	-$A[bp]
17033                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17034 3EFD           FF76         EA            push	-$16[bp]
17035                                           ! Debug: func () void = outb+0 (used reg = )
17036 3F00           E8         3D54            call	_outb
17037 3F03           83C4                   04  add	sp,*4
17038                                           !BCC_EOS
17039                                           ! 2003    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
17040                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17041 3F06           8A46         F9            mov	al,-7[bp]
17042 3F09           30E4                       xor	ah,ah
17043 3F0B           B1                     06  mov	cl,*6
17044 3F0D           D3E0                       shl	ax,cl
17045 3F0F           89C3                       mov	bx,ax
17046 3F11           81C3                 0291  add	bx,#_video_param_table
17047                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
17048 3F15           8B46         F6            mov	ax,-$A[bp]
17049 3F18           01C3                       add	bx,ax
17050                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
17051 3F1A           8A47         0A            mov	al,$A[bx]
17052 3F1D           30E4                       xor	ah,ah
17053 3F1F           50                         push	ax
17054                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17055 3F20           8B46         EA            mov	ax,-$16[bp]
17056                                           ! Debug: list unsigned int = ax+1 (used reg = )
17057 3F23           40                         inc	ax
17058 3F24           50                         push	ax
17059                                           ! Debug: func () void = outb+0 (used reg = )
17060 3F25           E8         3D2F            call	_outb
17061 3F28           83C4                   04  add	sp,*4
17062                                           !BCC_EOS
17063                                           ! 2004   }
17064                                           ! 2005  outb(0x3c2,video_param_table[vpti].miscreg);
17065                       00003F2B            .7F:
17066                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17067 3F2B           8B46         F6            mov	ax,-$A[bp]
17068 3F2E           40                         inc	ax
17069 3F2F           8946         F6            mov	-$A[bp],ax
17070                       00003F32            .80:
17071                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
17072 3F32           8B46         F6            mov	ax,-$A[bp]
17073 3F35           3D                   0018  cmp	ax,*$18
17074 3F38           76           C0            jbe	.81
17075                       00003F3A            .82:
17076                       00003F3A            .7E:
17077                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17078 3F3A           8A46         F9            mov	al,-7[bp]
17079 3F3D           30E4                       xor	ah,ah
17080 3F3F           B1                     06  mov	cl,*6
17081 3F41           D3E0                       shl	ax,cl
17082 3F43           89C3                       mov	bx,ax
17083 3F45           81C3                 0291  add	bx,#_video_param_table
17084                                           ! Debug: list unsigned char = [bx+9] (used reg = )
17085 3F49           8A47         09            mov	al,9[bx]
17086 3F4C           30E4                       xor	ah,ah
17087 3F4E           50                         push	ax
17088                                           ! Debug: list int = const $3C2 (used reg = )
17089 3F4F           B8                   03C2  mov	ax,#$3C2
17090 3F52           50                         push	ax
17091                                           ! Debug: func () void = outb+0 (used reg = )
17092 3F53           E8         3D01            call	_outb
17093 3F56           83C4                   04  add	sp,*4
17094                                           !BCC_EOS
17095                                           ! 2006  outb(0x3c0,0x20);
17096                                           ! Debug: list int = const $20 (used reg = )
17097 3F59           B8                   0020  mov	ax,*$20
17098 3F5C           50                         push	ax
17099                                           ! Debug: list int = const $3C0 (used reg = )
17100 3F5D           B8                   03C0  mov	ax,#$3C0
17101 3F60           50                         push	ax
17102                                           ! Debug: func () void = outb+0 (used reg = )
17103 3F61           E8         3CF3            call	_outb
17104 3F64           83C4                   04  add	sp,*4
17105                                           !BCC_EOS
17106                                           ! 2007  inb(0x3da);
17107                                           ! Debug: list int = const $3DA (used reg = )
17108 3F67           B8                   03DA  mov	ax,#$3DA
17109 3F6A           50                         push	ax
17110                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17111 3F6B           E8         3CD3            call	_inb
17112 3F6E           44                         inc	sp
17113 3F6F           44                         inc	sp
17114                                           !BCC_EOS
17115                                           ! 2008  if(noclearmem==0x00)
17116                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
17117 3F70           8A46         FF            mov	al,-1[bp]
17118 3F73           84C0                       test	al,al
17119 3F75         0F85         00C1            bne 	.83
17120                       00003F79            .84:
17121                                           ! 2009   {
17122                                           ! 2010    if(vga_modes[line].class==0x00)
17123                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17124 3F79           8A46         FE            mov	al,-2[bp]
17125 3F7C           30E4                       xor	ah,ah
17126 3F7E           B1                     03  mov	cl,*3
17127 3F80           D3E0                       shl	ax,cl
17128 3F82           89C3                       mov	bx,ax
17129 3F84           81C3                 01FD  add	bx,#_vga_modes
17130                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17131 3F88           8A47         01            mov	al,1[bx]
17132 3F8B           84C0                       test	al,al
17133 3F8D           75           26            jne 	.85
17134                       00003F8F            .86:
17135                                           ! 2011     {
17136                                           ! 2012      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
17137                                           ! Debug: list int = const $4000 (used reg = )
17138 3F8F           B8                   4000  mov	ax,#$4000
17139 3F92           50                         push	ax
17140                                           ! Debug: list int = const $720 (used reg = )
17141 3F93           B8                   0720  mov	ax,#$720
17142 3F96           50                         push	ax
17143                                           ! Debug: list int = const 0 (used reg = )
17144 3F97           31C0                       xor	ax,ax
17145 3F99           50                         push	ax
17146                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17147 3F9A           8A46         FE            mov	al,-2[bp]
17148 3F9D           30E4                       xor	ah,ah
17149 3F9F           B1                     03  mov	cl,*3
17150 3FA1           D3E0                       shl	ax,cl
17151 3FA3           89C3                       mov	bx,ax
17152 3FA5           81C3                 01FD  add	bx,#_vga_modes
17153                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17154 3FA9           FF77         04            push	4[bx]
17155                                           ! Debug: func () void = memsetw+0 (used reg = )
17156 3FAC           E8         3BB7            call	_memsetw
17157 3FAF           83C4                   08  add	sp,*8
17158                                           !BCC_EOS
17159                                           ! 2013     }
17160                                           ! 2014    else
17161                                           ! 2015     {
17162 3FB2           E9         0085            br 	.87
17163                       00003FB5            .85:
17164                                           ! 2016      if(mode<0x0d)
17165                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
17166 3FB5           8A46         04            mov	al,4[bp]
17167 3FB8           3C                     0D  cmp	al,*$D
17168 3FBA           73           24            jae 	.88
17169                       00003FBC            .89:
17170                                           ! 2017       {
17171                                           ! 2018        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
17172                                           ! Debug: list int = const $4000 (used reg = )
17173 3FBC           B8                   4000  mov	ax,#$4000
17174 3FBF           50                         push	ax
17175                                           ! Debug: list int = const 0 (used reg = )
17176 3FC0           31C0                       xor	ax,ax
17177 3FC2           50                         push	ax
17178                                           ! Debug: list int = const 0 (used reg = )
17179 3FC3           31C0                       xor	ax,ax
17180 3FC5           50                         push	ax
17181                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17182 3FC6           8A46         FE            mov	al,-2[bp]
17183 3FC9           30E4                       xor	ah,ah
17184 3FCB           B1                     03  mov	cl,*3
17185 3FCD           D3E0                       shl	ax,cl
17186 3FCF           89C3                       mov	bx,ax
17187 3FD1           81C3                 01FD  add	bx,#_vga_modes
17188                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17189 3FD5           FF77         04            push	4[bx]
17190                                           ! Debug: func () void = memsetw+0 (used reg = )
17191 3FD8           E8         3B8B            call	_memsetw
17192 3FDB           83C4                   08  add	sp,*8
17193                                           !BCC_EOS
17194                                           ! 2019       }
17195                                           ! 2020      else
17196                                           ! 2021       {
17197 3FDE           EB           5A            jmp .8A
17198                       00003FE0            .88:
17199                                           ! 2022        outb( 0x3c4, 0x02 );
17200                                           ! Debug: list int = const 2 (used reg = )
17201 3FE0           B8                   0002  mov	ax,*2
17202 3FE3           50                         push	ax
17203                                           ! Debug: list int = const $3C4 (used reg = )
17204 3FE4           B8                   03C4  mov	ax,#$3C4
17205 3FE7           50                         push	ax
17206                                           ! Debug: func () void = outb+0 (used reg = )
17207 3FE8           E8         3C6C            call	_outb
17208 3FEB           83C4                   04  add	sp,*4
17209                                           !BCC_EOS
17210                                           ! 2023        mmask = inb( 0x3c5 );
17211                                           ! Debug: list int = const $3C5 (used reg = )
17212 3FEE           B8                   03C5  mov	ax,#$3C5
17213 3FF1           50                         push	ax
17214                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17215 3FF2           E8         3C4C            call	_inb
17216 3FF5           44                         inc	sp
17217 3FF6           44                         inc	sp
17218                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
17219 3FF7           8846         FD            mov	-3[bp],al
17220                                           !BCC_EOS
17221                                           ! 2024        outb( 0x3c5, 0x0f );
17222                                           ! Debug: list int = const $F (used reg = )
17223 3FFA           B8                   000F  mov	ax,*$F
17224 3FFD           50                         push	ax
17225                                           ! Debug: list int = const $3C5 (used reg = )
17226 3FFE           B8                   03C5  mov	ax,#$3C5
17227 4001           50                         push	ax
17228                                           ! Debug: func () void = outb+0 (used reg = )
17229 4002           E8         3C52            call	_outb
17230 4005           83C4                   04  add	sp,*4
17231                                           !BCC_EOS
17232                                           ! 2025        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
17233                                           ! Debug: list unsigned int = const $8000 (used reg = )
17234 4008           B8                   8000  mov	ax,#$8000
17235 400B           50                         push	ax
17236                                           ! Debug: list int = const 0 (used reg = )
17237 400C           31C0                       xor	ax,ax
17238 400E           50                         push	ax
17239                                           ! Debug: list int = const 0 (used reg = )
17240 400F           31C0                       xor	ax,ax
17241 4011           50                         push	ax
17242                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17243 4012           8A46         FE            mov	al,-2[bp]
17244 4015           30E4                       xor	ah,ah
17245 4017           B1                     03  mov	cl,*3
17246 4019           D3E0                       shl	ax,cl
17247 401B           89C3                       mov	bx,ax
17248 401D           81C3                 01FD  add	bx,#_vga_modes
17249                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17250 4021           FF77         04            push	4[bx]
17251                                           ! Debug: func () void = memsetw+0 (used reg = )
17252 4024           E8         3B3F            call	_memsetw
17253 4027           83C4                   08  add	sp,*8
17254                                           !BCC_EOS
17255                                           ! 2026        outb( 0x3c5, mmask );
17256                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
17257 402A           8A46         FD            mov	al,-3[bp]
17258 402D           30E4                       xor	ah,ah
17259 402F           50                         push	ax
17260                                           ! Debug: list int = const $3C5 (used reg = )
17261 4030           B8                   03C5  mov	ax,#$3C5
17262 4033           50                         push	ax
17263                                           ! Debug: func () void = outb+0 (used reg = )
17264 4034           E8         3C20            call	_outb
17265 4037           83C4                   04  add	sp,*4
17266                                           !BCC_EOS
17267                                           ! 2027       }
17268                                           ! 2028     }
17269                       0000403A            .8A:
17270                                           ! 2029   }
17271                       0000403A            .87:
17272                                           ! 2030  write_byte(0x40,0x49,mode);
17273                       0000403A            .83:
17274                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
17275 403A           8A46         04            mov	al,4[bp]
17276 403D           30E4                       xor	ah,ah
17277 403F           50                         push	ax
17278                                           ! Debug: list int = const $49 (used reg = )
17279 4040           B8                   0049  mov	ax,*$49
17280 4043           50                         push	ax
17281                                           ! Debug: list int = const $40 (used reg = )
17282 4044           B8                   0040  mov	ax,*$40
17283 4047           50                         push	ax
17284                                           ! Debug: func () void = write_byte+0 (used reg = )
17285 4048           E8         3BC6            call	_write_byte
17286 404B           83C4                   06  add	sp,*6
17287                                           !BCC_EOS
17288                                           ! 2031  write_word(0x40,0x4A,twidth);
17289                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
17290 404E           FF76         F4            push	-$C[bp]
17291                                           ! Debug: list int = const $4A (used reg = )
17292 4051           B8                   004A  mov	ax,*$4A
17293 4054           50                         push	ax
17294                                           ! Debug: list int = const $40 (used reg = )
17295 4055           B8                   0040  mov	ax,*$40
17296 4058           50                         push	ax
17297                                           ! Debug: func () void = write_word+0 (used reg = )
17298 4059           E8         3BCD            call	_write_word
17299 405C           83C4                   06  add	sp,*6
17300                                           !BCC_EOS
17301                                           ! 2032  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
17302                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17303 405F           8A46         F9            mov	al,-7[bp]
17304 4062           30E4                       xor	ah,ah
17305 4064           B1                     06  mov	cl,*6
17306 4066           D3E0                       shl	ax,cl
17307 4068           89C3                       mov	bx,ax
17308 406A           81C3                 0291  add	bx,#_video_param_table
17309                                           ! Debug: address unsigned char = [bx+3] (used reg = )
17310                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
17311                                           ! Debug: list unsigned short = [bx+3] (used reg = )
17312 406E           FF77         03            push	3[bx]
17313                                           ! Debug: list int = const $4C (used reg = )
17314 4071           B8                   004C  mov	ax,*$4C
17315 4074           50                         push	ax
17316                                           ! Debug: list int = const $40 (used reg = )
17317 4075           B8                   0040  mov	ax,*$40
17318 4078           50                         push	ax
17319                                           ! Debug: func () void = write_word+0 (used reg = )
17320 4079           E8         3BAD            call	_write_word
17321 407C           83C4                   06  add	sp,*6
17322                                           !BCC_EOS
17323                                           ! 2033  write_word(0x40,0x63,crtc_addr);
17324                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
17325 407F           FF76         EA            push	-$16[bp]
17326                                           ! Debug: list int = const $63 (used reg = )
17327 4082           B8                   0063  mov	ax,*$63
17328 4085           50                         push	ax
17329                                           ! Debug: list int = const $40 (used reg = )
17330 4086           B8                   0040  mov	ax,*$40
17331 4089           50                         push	ax
17332                                           ! Debug: func () void = write_word+0 (used reg = )
17333 408A           E8         3B9C            call	_write_word
17334 408D           83C4                   06  add	sp,*6
17335                                           !BCC_EOS
17336                                           ! 2034  write
17337                                           ! 2034 _byte(0x40,0x84,theightm1);
17338                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17339 4090           FF76         F2            push	-$E[bp]
17340                                           ! Debug: list int = const $84 (used reg = )
17341 4093           B8                   0084  mov	ax,#$84
17342 4096           50                         push	ax
17343                                           ! Debug: list int = const $40 (used reg = )
17344 4097           B8                   0040  mov	ax,*$40
17345 409A           50                         push	ax
17346                                           ! Debug: func () void = write_byte+0 (used reg = )
17347 409B           E8         3B73            call	_write_byte
17348 409E           83C4                   06  add	sp,*6
17349                                           !BCC_EOS
17350                                           ! 2035  write_word(0x40,0x85,cheight);
17351                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17352 40A1           FF76         F0            push	-$10[bp]
17353                                           ! Debug: list int = const $85 (used reg = )
17354 40A4           B8                   0085  mov	ax,#$85
17355 40A7           50                         push	ax
17356                                           ! Debug: list int = const $40 (used reg = )
17357 40A8           B8                   0040  mov	ax,*$40
17358 40AB           50                         push	ax
17359                                           ! Debug: func () void = write_word+0 (used reg = )
17360 40AC           E8         3B7A            call	_write_word
17361 40AF           83C4                   06  add	sp,*6
17362                                           !BCC_EOS
17363                                           ! 2036  write_byte(0x40,0x87,(0x60|noclearmem));
17364                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17365                                           ! Debug: expression subtree swapping
17366 40B2           8A46         FF            mov	al,-1[bp]
17367 40B5           0C                     60  or	al,*$60
17368                                           ! Debug: list unsigned char = al+0 (used reg = )
17369 40B7           30E4                       xor	ah,ah
17370 40B9           50                         push	ax
17371                                           ! Debug: list int = const $87 (used reg = )
17372 40BA           B8                   0087  mov	ax,#$87
17373 40BD           50                         push	ax
17374                                           ! Debug: list int = const $40 (used reg = )
17375 40BE           B8                   0040  mov	ax,*$40
17376 40C1           50                         push	ax
17377                                           ! Debug: func () void = write_byte+0 (used reg = )
17378 40C2           E8         3B4C            call	_write_byte
17379 40C5           83C4                   06  add	sp,*6
17380                                           !BCC_EOS
17381                                           ! 2037  write_byte(0x40,0x88,0xF9);
17382                                           ! Debug: list int = const $F9 (used reg = )
17383 40C8           B8                   00F9  mov	ax,#$F9
17384 40CB           50                         push	ax
17385                                           ! Debug: list int = const $88 (used reg = )
17386 40CC           B8                   0088  mov	ax,#$88
17387 40CF           50                         push	ax
17388                                           ! Debug: list int = const $40 (used reg = )
17389 40D0           B8                   0040  mov	ax,*$40
17390 40D3           50                         push	ax
17391                                           ! Debug: func () void = write_byte+0 (used reg = )
17392 40D4           E8         3B3A            call	_write_byte
17393 40D7           83C4                   06  add	sp,*6
17394                                           !BCC_EOS
17395                                           ! 2038  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17396                                           ! Debug: list int = const $89 (used reg = )
17397 40DA           B8                   0089  mov	ax,#$89
17398 40DD           50                         push	ax
17399                                           ! Debug: list int = const $40 (used reg = )
17400 40DE           B8                   0040  mov	ax,*$40
17401 40E1           50                         push	ax
17402                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17403 40E2           E8         3B06            call	_read_byte
17404 40E5           83C4                   04  add	sp,*4
17405                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17406 40E8           24                     7F  and	al,*$7F
17407                                           ! Debug: list unsigned char = al+0 (used reg = )
17408 40EA           30E4                       xor	ah,ah
17409 40EC           50                         push	ax
17410                                           ! Debug: list int = const $89 (used reg = )
17411 40ED           B8                   0089  mov	ax,#$89
17412 40F0           50                         push	ax
17413                                           ! Debug: list int = const $40 (used reg = )
17414 40F1           B8                   0040  mov	ax,*$40
17415 40F4           50                         push	ax
17416                                           ! Debug: func () void = write_byte+0 (used reg = )
17417 40F5           E8         3B19            call	_write_byte
17418 40F8           83C4                   06  add	sp,*6
17419                                           !BCC_EOS
17420                                           ! 2039  write_byte(0x40,0x8A,0x08);
17421                                           ! Debug: list int = const 8 (used reg = )
17422 40FB           B8                   0008  mov	ax,*8
17423 40FE           50                         push	ax
17424                                           ! Debug: list int = const $8A (used reg = )
17425 40FF           B8                   008A  mov	ax,#$8A
17426 4102           50                         push	ax
17427                                           ! Debug: list int = const $40 (used reg = )
17428 4103           B8                   0040  mov	ax,*$40
17429 4106           50                         push	ax
17430                                           ! Debug: func () void = write_byte+0 (used reg = )
17431 4107           E8         3B07            call	_write_byte
17432 410A           83C4                   06  add	sp,*6
17433                                           !BCC_EOS
17434                                           ! 2040  write_word(0x40,0xA8, video_save_pointer_table);
17435                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17436 410D           BB                   35FA  mov	bx,#_video_save_pointer_table
17437 4110           53                         push	bx
17438                                           ! Debug: list int = const $A8 (used reg = )
17439 4111           B8                   00A8  mov	ax,#$A8
17440 4114           50                         push	ax
17441                                           ! Debug: list int = const $40 (used reg = )
17442 4115           B8                   0040  mov	ax,*$40
17443 4118           50                         push	ax
17444                                           ! Debug: func () void = write_word+0 (used reg = )
17445 4119           E8         3B0D            call	_write_word
17446 411C           83C4                   06  add	sp,*6
17447                                           !BCC_EOS
17448                                           ! 2041  write_word(0x40,0xA8 +2, 0xc000);
17449                                           ! Debug: list unsigned int = const $C000 (used reg = )
17450 411F           B8                   C000  mov	ax,#$C000
17451 4122           50                         push	ax
17452                                           ! Debug: list int = const $AA (used reg = )
17453 4123           B8                   00AA  mov	ax,#$AA
17454 4126           50                         push	ax
17455                                           ! Debug: list int = const $40 (used reg = )
17456 4127           B8                   0040  mov	ax,*$40
17457 412A           50                         push	ax
17458                                           ! Debug: func () void = write_word+0 (used reg = )
17459 412B           E8         3AFB            call	_write_word
17460 412E           83C4                   06  add	sp,*6
17461                                           !BCC_EOS
17462                                           ! 2042  write_byte(0x40,0x65,0x00);
17463                                           ! Debug: list int = const 0 (used reg = )
17464 4131           31C0                       xor	ax,ax
17465 4133           50                         push	ax
17466                                           ! Debug: list int = const $65 (used reg = )
17467 4134           B8                   0065  mov	ax,*$65
17468 4137           50                         push	ax
17469                                           ! Debug: list int = const $40 (used reg = )
17470 4138           B8                   0040  mov	ax,*$40
17471 413B           50                         push	ax
17472                                           ! Debug: func () void = write_byte+0 (used reg = )
17473 413C           E8         3AD2            call	_write_byte
17474 413F           83C4                   06  add	sp,*6
17475                                           !BCC_EOS
17476                                           ! 2043  write_byte(0x40,0x66,0x00);
17477                                           ! Debug: list int = const 0 (used reg = )
17478 4142           31C0                       xor	ax,ax
17479 4144           50                         push	ax
17480                                           ! Debug: list int = const $66 (used reg = )
17481 4145           B8                   0066  mov	ax,*$66
17482 4148           50                         push	ax
17483                                           ! Debug: list int = const $40 (used reg = )
17484 4149           B8                   0040  mov	ax,*$40
17485 414C           50                         push	ax
17486                                           ! Debug: func () void = write_byte+0 (used reg = )
17487 414D           E8         3AC1            call	_write_byte
17488 4150           83C4                   06  add	sp,*6
17489                                           !BCC_EOS
17490                                           ! 2044  if(vga_modes[line].class==0x00)
17491                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17492 4153           8A46         FE            mov	al,-2[bp]
17493 4156           30E4                       xor	ah,ah
17494 4158           B1                     03  mov	cl,*3
17495 415A           D3E0                       shl	ax,cl
17496 415C           89C3                       mov	bx,ax
17497 415E           81C3                 01FD  add	bx,#_vga_modes
17498                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17499 4162           8A47         01            mov	al,1[bx]
17500 4165           84C0                       test	al,al
17501 4167           75           0E            jne 	.8B
17502                       00004169            .8C:
17503                                           ! 2045   {
17504                                           ! 2046    biosfn_set_cursor_shape(0x06,0x07);
17505                                           ! Debug: list int = const 7 (used reg = )
17506 4169           B8                   0007  mov	ax,*7
17507 416C           50                         push	ax
17508                                           ! Debug: list int = const 6 (used reg = )
17509 416D           B8                   0006  mov	ax,*6
17510 4170           50                         push	ax
17511                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17512 4171           E8         00BB            call	_biosfn_set_cursor_shape
17513 4174           83C4                   04  add	sp,*4
17514                                           !BCC_EOS
17515                                           ! 2047   }
17516                                           ! 2048  for(i=0;i<8;i++)
17517                       00004177            .8B:
17518                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17519 4177           31C0                       xor	ax,ax
17520 4179           8946         F6            mov	-$A[bp],ax
17521                                           !BCC_EOS
17522                                           !BCC_EOS
17523                                           ! 2049   biosfn_set_cursor_pos(i,0x0000);
17524 417C           EB           13            jmp .8F
17525                       0000417E            .90:
17526                                           ! Debug: list int = const 0 (used reg = )
17527 417E           31C0                       xor	ax,ax
17528 4180           50                         push	ax
17529                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17530 4181           FF76         F6            push	-$A[bp]
17531                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17532 4184           E8         01C3            call	_biosfn_set_cursor_pos
17533 4187           83C4                   04  add	sp,*4
17534                                           !BCC_EOS
17535                                           ! 2050  biosfn_set_active_page(0x00);
17536                       0000418A            .8E:
17537                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17538 418A           8B46         F6            mov	ax,-$A[bp]
17539 418D           40                         inc	ax
17540 418E           8946         F6            mov	-$A[bp],ax
17541                       00004191            .8F:
17542                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17543 4191           8B46         F6            mov	ax,-$A[bp]
17544 4194           3D                   0008  cmp	ax,*8
17545 4197           72           E5            jb 	.90
17546                       00004199            .91:
17547                       00004199            .8D:
17548                                           ! Debug: list int = const 0 (used reg = )
17549 4199           31C0                       xor	ax,ax
17550 419B           50                         push	ax
17551                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17552 419C           E8         0320            call	_biosfn_set_active_page
17553 419F           44                         inc	sp
17554 41A0           44                         inc	sp
17555                                           !BCC_EOS
17556                                           ! 2051  if(vga_modes[line].class==0x00)
17557                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17558 41A1           8A46         FE            mov	al,-2[bp]
17559 41A4           30E4                       xor	ah,ah
17560 41A6           B1                     03  mov	cl,*3
17561 41A8           D3E0                       shl	ax,cl
17562 41AA           89C3                       mov	bx,ax
17563 41AC           81C3                 01FD  add	bx,#_vga_modes
17564                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17565 41B0           8A47         01            mov	al,1[bx]
17566 41B3           84C0                       test	al,al
17567 41B5           75           0E            jne 	.92
17568                       000041B7            .93:
17569                                           ! 2052   {
17570                                           ! 2053 #asm
17571                                           !BCC_EOS
17572                                           !BCC_ASM
17573                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17574                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17575                       00000008            _biosfn_set_video_mode.theightm1	set	8
17576                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17577                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17578                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17579                       00000014            _biosfn_set_video_mode.line	set	$14
17580                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17581                       00000006            _biosfn_set_video_mode.cheight	set	6
17582                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17583                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17584                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17585                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17586                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17587                       0000000C            _biosfn_set_video_mode.i	set	$C
17588                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17589                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17590                       00000004            .biosfn_set_video_mode.mode	set	4
17591                       00000010            _biosfn_set_video_mode.palette	set	$10
17592                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17593                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17594                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17595                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17596                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17597                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17598                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17599                       00000013            _biosfn_set_video_mode.mmask	set	$13
17600                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17601                                             ;; copy and activate 8x16 font
17602 41B7           B8                   1104    mov ax, #0x1104
17603 41BA           B3                     00    mov bl, #0x00
17604 41BC           CD                     10    int #0x10
17605 41BE           B8                   1103    mov ax, #0x1103
17606 41C1           B3                     00    mov bl, #0x00
17607 41C3           CD                     10    int #0x10
17608                                           ! 2061 endasm
17609                                           !BCC_ENDASM
17610                                           !BCC_EOS
17611                                           ! 2062   }
17612                                           ! 2063 #asm
17613                       000041C5            .92:
17614                                           !BCC_EOS
17615                                           !BCC_ASM
17616                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17617                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17618                       00000008            _biosfn_set_video_mode.theightm1	set	8
17619                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17620                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17621                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17622                       00000014            _biosfn_set_video_mode.line	set	$14
17623                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17624                       00000006            _biosfn_set_video_mode.cheight	set	6
17625                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17626                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17627                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17628                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17629                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17630                       0000000C            _biosfn_set_video_mode.i	set	$C
17631                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17632                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17633                       00000004            .biosfn_set_video_mode.mode	set	4
17634                       00000010            _biosfn_set_video_mode.palette	set	$10
17635                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17636                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17637                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17638                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17639                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17640                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17641                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17642                       00000013            _biosfn_set_video_mode.mmask	set	$13
17643                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17644                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   41C5           1E                           push ds
 +a   41C6           31C0                         xor ax, ax
 +a   41C8           8ED8                         mov ds, ax
 +a   41CA           B8                   1361    mov ax,  #_vgafont8+128*8
 +a   41CD           A3         007C              mov 0x1f*4, ax
 +a   41D0           B8                   C000    mov ax,  #0xC000
 +a   41D3           A3         007E              mov 0x1f*4+2, ax
 +a   41D6           1F                           pop ds
17645                                           ! 2065 endasm
17646                                           !BCC_ENDASM
17647                                           !BCC_EOS
17648                                           ! 2066   switch(cheight)
17649 41D7           8B46         F0            mov	ax,-$10[bp]
17650                                           ! 2067    {case 8:
17651 41DA           E9         003F            br 	.96
17652                                           ! 2068 #asm
17653                       000041DD            .97:
17654                                           !BCC_EOS
17655                                           !BCC_ASM
17656                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17657                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17658                       00000008            _biosfn_set_video_mode.theightm1	set	8
17659                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17660                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17661                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17662                       00000014            _biosfn_set_video_mode.line	set	$14
17663                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17664                       00000006            _biosfn_set_video_mode.cheight	set	6
17665                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17666                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17667                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17668                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17669                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17670                       0000000C            _biosfn_set_video_mode.i	set	$C
17671                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17672                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17673                       00000004            .biosfn_set_video_mode.mode	set	4
17674                       00000010            _biosfn_set_video_mode.palette	set	$10
17675                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17676                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17677                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17678                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17679                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17680                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17681                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17682                       00000013            _biosfn_set_video_mode.mmask	set	$13
17683                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17684                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   41DD           1E                           push ds
 +a   41DE           31C0                         xor ax, ax
 +a   41E0           8ED8                         mov ds, ax
 +a   41E2           B8                   0F61    mov ax,  #_vgafont8
 +a   41E5           A3         010C              mov 0x43*4, ax
 +a   41E8           B8                   C000    mov ax,  #0xC000
 +a   41EB           A3         010E              mov 0x43*4+2, ax
 +a   41EE           1F                           pop ds
17685                                           ! 2070 endasm
17686                                           !BCC_ENDASM
17687                                           !BCC_EOS
17688                                           ! 2071      break;
17689 41EF           E9         0039            br 	.94
17690                                           !BCC_EOS
17691                                           ! 2072     case 14:
17692                                           ! 2073 #asm
17693                       000041F2            .98:
17694                                           !BCC_EOS
17695                                           !BCC_ASM
17696                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17697                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17698                       00000008            _biosfn_set_video_mode.theightm1	set	8
17699                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17700                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17701                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17702                       00000014            _biosfn_set_video_mode.line	set	$14
17703                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17704                       00000006            _biosfn_set_video_mode.cheight	set	6
17705                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17706                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17707                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17708                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17709                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17710                       0000000C            _biosfn_set_video_mode.i	set	$C
17711                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17712                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17713                       00000004            .biosfn_set_video_mode.mode	set	4
17714                       00000010            _biosfn_set_video_mode.palette	set	$10
17715                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17716                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17717                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17718                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17719                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17720                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17721                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17722                       00000013            _biosfn_set_video_mode.mmask	set	$13
17723                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17724                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   41F2           1E                           push ds
 +a   41F3           31C0                         xor ax, ax
 +a   41F5           8ED8                         mov ds, ax
 +a   41F7           B8                   1761    mov ax,  #_vgafont14
 +a   41FA           A3         010C              mov 0x43*4, ax
 +a   41FD           B8                   C000    mov ax,  #0xC000
 +a   4200           A3         010E              mov 0x43*4+2, ax
 +a   4203           1F                           pop ds
17725                                           ! 2075 endasm
17726                                           !BCC_ENDASM
17727                                           !BCC_EOS
17728                                           ! 2076      break;
17729 4204           EB           25            jmp .94
17730                                           !BCC_EOS
17731                                           ! 2077     case 16:
17732                                           ! 2078 #asm
17733                       00004206            .99:
17734                                           !BCC_EOS
17735                                           !BCC_ASM
17736                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17737                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17738                       00000008            _biosfn_set_video_mode.theightm1	set	8
17739                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17740                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17741                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17742                       00000014            _biosfn_set_video_mode.line	set	$14
17743                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17744                       00000006            _biosfn_set_video_mode.cheight	set	6
17745                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17746                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17747                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17748                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17749                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17750                       0000000C            _biosfn_set_video_mode.i	set	$C
17751                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17752                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17753                       00000004            .biosfn_set_video_mode.mode	set	4
17754                       00000010            _biosfn_set_video_mode.palette	set	$10
17755                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17756                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17757                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17758                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17759                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17760                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17761                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17762                       00000013            _biosfn_set_video_mode.mmask	set	$13
17763                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17764                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4206           1E                           push ds
 +a   4207           31C0                         xor ax, ax
 +a   4209           8ED8                         mov ds, ax
 +a   420B           B8                   2561    mov ax,  #_vgafont16
 +a   420E           A3         010C              mov 0x43*4, ax
 +a   4211           B8                   C000    mov ax,  #0xC000
 +a   4214           A3         010E              mov 0x43*4+2, ax
 +a   4217           1F                           pop ds
17765                                           ! 2080 endasm
17766                                           !BCC_ENDASM
17767                                           !BCC_EOS
17768                                           ! 2081      break;
17769 4218           EB           11            jmp .94
17770                                           !BCC_EOS
17771                                           ! 2082    }
17772                                           ! 2083 }
17773 421A           EB           0F            jmp .94
17774                       0000421C            .96:
17775 421C           2D                   0008  sub	ax,*8
17776 421F           74           BC            je 	.97
17777 4221           2D                   0006  sub	ax,*6
17778 4224           74           CC            je 	.98
17779 4226           2D                   0002  sub	ax,*2
17780 4229           74           DB            je 	.99
17781                       0000422B            .94:
17782                       FFFFFFE8            ..FFFD	=	-$18
17783 422B           89EC                       mov	sp,bp
17784 422D           5D                         pop	bp
17785 422E           C3                         ret
17786                                           ! 2084 static void biosfn_set_cursor_shape (CH,CL)
17787                                           ! Register BX used in function biosfn_set_video_mode
17788                                           ! 2085 Bit8u CH;Bit8u CL;
17789                       0000422F            _biosfn_set_cursor_shape:
17790                                           !BCC_EOS
17791                                           !BCC_EOS
17792                                           ! 2086 {Bit16u cheight,curs,crtc_addr;
17793                                           !BCC_EOS
17794                                           ! 2087  Bit8u modeset_ctl;
17795                                           !BCC_EOS
17796                                           ! 2088  CH&=0x3f;
17797 422F           55                         push	bp
17798 4230           89E5                       mov	bp,sp
17799 4232           83C4                   F8  add	sp,*-8
17800                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17801 4235           8A46         04            mov	al,4[bp]
17802 4238           24                     3F  and	al,*$3F
17803 423A           8846         04            mov	4[bp],al
17804                                           !BCC_EOS
17805                                           ! 2089  CL&=0x1f;
17806                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17807 423D           8A46         06            mov	al,6[bp]
17808 4240           24                     1F  and	al,*$1F
17809 4242           8846         06            mov	6[bp],al
17810                                           !BCC_EOS
17811                                           ! 2090  curs=(CH<<8)+CL;
17812                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17813 4245           8A46         04            mov	al,4[bp]
17814 4248           30E4                       xor	ah,ah
17815 424A           88C4                       mov	ah,al
17816 424C           30C0                       xor	al,al
17817                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17818 424E           0246         06            add	al,6[bp]
17819 4251           80D4                   00  adc	ah,*0
17820                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17821 4254           8946         FC            mov	-4[bp],ax
17822                                           !BCC_EOS
17823                                           ! 2091  write_word(0x40,0x60,curs);
17824                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17825 4257           FF76         FC            push	-4[bp]
17826                                           ! Debug: list int = const $60 (used reg = )
17827 425A           B8                   0060  mov	ax,*$60
17828 425D           50                         push	ax
17829                                           ! Debug: list int = const $40 (used reg = )
17830 425E           B8                   0040  mov	ax,*$40
17831 4261           50                         push	ax
17832                                           ! Debug: func () void = write_word+0 (used reg = )
17833 4262           E8         39C4            call	_write_word
17834 4265           83C4                   06  add	sp,*6
17835                                           !BCC_EOS
17836                                           ! 2092  modeset_ctl=read_byte(0x40,0x89);
17837                                           ! Debug: list int = const $89 (used reg = )
17838 4268           B8                   0089  mov	ax,#$89
17839 426B           50                         push	ax
17840                                           ! Debug: list int = const $40 (used reg = )
17841 426C           B8                   0040  mov	ax,*$40
17842 426F           50                         push	ax
17843                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17844 4270           E8         3978            call	_read_byte
17845 4273           83C4                   04  add	sp,*4
17846                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17847 4276           8846         F9            mov	-7[bp],al
17848                                           !BCC_EOS
17849                                           ! 2093  cheight = read_word(0x40,0x85);
17850                                           ! Debug: list int = const $85 (used reg = )
17851 4279           B8                   0085  mov	ax,#$85
17852 427C           50                         push	ax
17853                                           ! Debug: list int = const $40 (used reg = )
17854 427D           B8                   0040  mov	ax,*$40
17855 4280           50                         push	ax
17856                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17857 4281           E8         397A            call	_read_word
17858 4284           83C4                   04  add	sp,*4
17859                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17860 4287           8946         FE            mov	-2[bp],ax
17861                                           !BCC_EOS
17862                                           ! 2094  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17863                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17864 428A           8A46         F9            mov	al,-7[bp]
17865 428D           24                     01  and	al,*1
17866 428F           84C0                       test	al,al
17867 4291           74           66            je  	.9A
17868                       00004293            .9E:
17869                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17870 4293           8B46         FE            mov	ax,-2[bp]
17871 4296           3D                   0008  cmp	ax,*8
17872 4299           76           5E            jbe 	.9A
17873                       0000429B            .9D:
17874                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17875 429B           8A46         06            mov	al,6[bp]
17876 429E           3C                     08  cmp	al,*8
17877 42A0           73           57            jae 	.9A
17878                       000042A2            .9C:
17879                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17880 42A2           8A46         04            mov	al,4[bp]
17881 42A5           3C                     20  cmp	al,*$20
17882 42A7           73           50            jae 	.9A
17883                       000042A9            .9B:
17884                                           ! 2095   {
17885                                           ! 2096    if(CL!=(CH+1))
17886                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17887 42A9           8A46         04            mov	al,4[bp]
17888 42AC           30E4                       xor	ah,ah
17889                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17890                                           ! Debug: expression subtree swapping
17891 42AE           40                         inc	ax
17892 42AF           50                         push	ax
17893 42B0           8A46         06            mov	al,6[bp]
17894 42B3           30E4                       xor	ah,ah
17895 42B5           3B46         F6            cmp	ax,-$A[bp]
17896 42B8           8D66         F8            lea	sp,-8[bp]
17897 42BB           74           15            je  	.9F
17898                       000042BD            .A0:
17899                                           ! 2097     {
17900                                           ! 2098      CH = ((CH+1) * cheight / 8) -1;
17901                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17902 42BD           8A46         04            mov	al,4[bp]
17903 42C0           30E4                       xor	ah,ah
17904                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17905 42C2           40                         inc	ax
17906 42C3           8B4E         FE            mov	cx,-2[bp]
17907 42C6           F7E9                       imul	cx
17908                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17909 42C8           B1                     03  mov	cl,*3
17910 42CA           D3E8                       shr	ax,cl
17911                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17912                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17913 42CC           48                         dec	ax
17914 42CD           8846         04            mov	4[bp],al
17915                                           !BCC_EOS
17916                                           ! 2099     }
17917                                           ! 2100    else
17918                                           ! 2101     {
17919 42D0           EB           14            jmp .A1
17920                       000042D2            .9F:
17921                                           ! 2102      CH = ((CL+1) * cheight / 8) - 2;
17922                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17923 42D2           8A46         06            mov	al,6[bp]
17924 42D5           30E4                       xor	ah,ah
17925                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17926 42D7           40                         inc	ax
17927 42D8           8B4E         FE            mov	cx,-2[bp]
17928 42DB           F7E9                       imul	cx
17929                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17930 42DD           B1                     03  mov	cl,*3
17931 42DF           D3E8                       shr	ax,cl
17932                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17933                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17934 42E1           48                         dec	ax
17935 42E2           48                         dec	ax
17936 42E3           8846         04            mov	4[bp],al
17937                                           !BCC_EOS
17938                                           ! 2103     }
17939                                           ! 2104    CL = ((CL+1) * cheight / 8) - 1;
17940                       000042E6            .A1:
17941                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17942 42E6           8A46         06            mov	al,6[bp]
17943 42E9           30E4                       xor	ah,ah
17944                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17945 42EB           40                         inc	ax
17946 42EC           8B4E         FE            mov	cx,-2[bp]
17947 42EF           F7E9                       imul	cx
17948                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17949 42F1           B1                     03  mov	cl,*3
17950 42F3           D3E8                       shr	ax,cl
17951                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17952                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17953 42F5           48                         dec	ax
17954 42F6           8846         06            mov	6[bp],al
17955                                           !BCC_EOS
17956                                           ! 2105   }
17957                                           ! 2106  crtc_addr=read_word(0x40,0x63);
17958                       000042F9            .9A:
17959                                           ! Debug: list int = const $63 (used reg = )
17960 42F9           B8                   0063  mov	ax,*$63
17961 42FC           50                         push	ax
17962                                           ! Debug: list int = const $40 (used reg = )
17963 42FD           B8                   0040  mov	ax,*$40
17964 4300           50                         push	ax
17965                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17966 4301           E8         38FA            call	_read_word
17967 4304           83C4                   04  add	sp,*4
17968                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17969 4307           8946         FA            mov	-6[bp],ax
17970                                           !BCC_EOS
17971                                           ! 2107  outb(crtc_addr,0x0a);
17972                                           ! Debug: list int = const $A (used reg = )
17973 430A           B8                   000A  mov	ax,*$A
17974 430D           50                         push	ax
17975                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17976 430E           FF76         FA            push	-6[bp]
17977                                           ! Debug: func () void = outb+0 (used reg = )
17978 4311           E8         3943            call	_outb
17979 4314           83C4                   04  add	sp,*4
17980                                           !BCC_EOS
17981                                           ! 2108  outb(crtc_addr+1,CH);
17982                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
17983 4317           8A46         04            mov	al,4[bp]
17984 431A           30E4                       xor	ah,ah
17985 431C           50                         push	ax
17986                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17987 431D           8B46         FA            mov	ax,-6[bp]
17988                                           ! Debug: list unsigned int = ax+1 (used reg = )
17989 4320           40                         inc	ax
17990 4321           50                         push	ax
17991                                           ! Debug: func () void = outb+0 (used reg = )
17992 4322           E8         3932            call	_outb
17993 4325           83C4                   04  add	sp,*4
17994                                           !BCC_EOS
17995                                           ! 2109  outb(crtc_addr,0x0b);
17996                                           ! Debug: list int = const $B (used reg = )
17997 4328           B8                   000B  mov	ax,*$B
17998 432B           50                         push	ax
17999                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18000 432C           FF76         FA            push	-6[bp]
18001                                           ! Debug: func () void = outb+0 (used reg = )
18002 432F           E8         3925            call	_outb
18003 4332           83C4                   04  add	sp,*4
18004                                           !BCC_EOS
18005                                           ! 2110  outb(crtc_addr+1,CL);
18006                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
18007 4335           8A46         06            mov	al,6[bp]
18008 4338           30E4                       xor	ah,ah
18009 433A           50                         push	ax
18010                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18011 433B           8B46         FA            mov	ax,-6[bp]
18012                                           ! Debug: list unsigned int = ax+1 (used reg = )
18013 433E           40                         inc	ax
18014 433F           50                         push	ax
18015                                           ! Debug: func () void = outb+0 (used reg = )
18016 4340           E8         3914            call	_outb
18017 4343           83C4                   04  add	sp,*4
18018                                           !BCC_EOS
18019                                           ! 2111 }
18020 4346           89EC                       mov	sp,bp
18021 4348           5D                         pop	bp
18022 4349           C3                         ret
18023                                           ! 2112 static void biosfn_set_cursor_pos (page, cursor)
18024                                           ! 2113 Bit8u page;Bit16u cursor;
18025                       0000434A            _biosfn_set_cursor_pos:
18026                                           !BCC_EOS
18027                                           !BCC_EOS
18028                                           ! 2114 {
18029                                           ! 2115  Bit8u xcurs,ycurs,current;
18030                                           !BCC_EOS
18031                                           ! 2116  Bit16u nbcols,nbrows,address,crtc_addr;
18032                                           !BCC_EOS
18033                                           ! 2117  if(page>7)return;
18034 434A           55                         push	bp
18035 434B           89E5                       mov	bp,sp
18036 434D           83C4                   F4  add	sp,*-$C
18037                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
18038 4350           8A46         04            mov	al,4[bp]
18039 4353           3C                     07  cmp	al,*7
18040 4355           76           04            jbe 	.A2
18041                       00004357            .A3:
18042 4357           89EC                       mov	sp,bp
18043 4359           5D                         pop	bp
18044 435A           C3                         ret
18045                                           !BCC_EOS
18046                                           ! 2118  write_word(0x40, 0x50 +2*page, cursor);
18047                       0000435B            .A2:
18048                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
18049 435B           FF76         06            push	6[bp]
18050                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
18051                                           ! Debug: expression subtree swapping
18052 435E           8A46         04            mov	al,4[bp]
18053 4361           30E4                       xor	ah,ah
18054 4363           D1E0                       shl	ax,*1
18055                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18056                                           ! Debug: expression subtree swapping
18057                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18058 4365           05                   0050  add	ax,*$50
18059 4368           50                         push	ax
18060                                           ! Debug: list int = const $40 (used reg = )
18061 4369           B8                   0040  mov	ax,*$40
18062 436C           50                         push	ax
18063                                           ! Debug: func () void = write_word+0 (used reg = )
18064 436D           E8         38B9            call	_write_word
18065 4370           83C4                   06  add	sp,*6
18066                                           !BCC_EOS
18067                                           ! 2119  current=read_byte(0x40,0x62);
18068                                           ! Debug: list int = const $62 (used reg = )
18069 4373           B8                   0062  mov	ax,*$62
18070 4376           50                         push	ax
18071                                           ! Debug: list int = const $40 (used reg = )
18072 4377           B8                   0040  mov	ax,*$40
18073 437A           50                         push	ax
18074                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18075 437B           E8         386D            call	_read_byte
18076 437E           83C4                   04  add	sp,*4
18077                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
18078 4381           8846         FD            mov	-3[bp],al
18079                                           !BCC_EOS
18080                                           ! 2120  if(page==current)
18081                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
18082 4384           8A46         04            mov	al,4[bp]
18083 4387           3A46         FD            cmp	al,-3[bp]
18084 438A         0F85         00B8            bne 	.A4
18085                       0000438E            .A5:
18086                                           ! 2121   {
18087                                           ! 2122    nbcols=read_word(0x40,0x4A);
18088                                           ! Debug: list int = const $4A (used reg = )
18089 438E           B8                   004A  mov	ax,*$4A
18090 4391           50                         push	ax
18091                                           ! Debug: list int = const $40 (used reg = )
18092 4392           B8                   0040  mov	ax,*$40
18093 4395           50                         push	ax
18094                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18095 4396           E8         3865            call	_read_word
18096 4399           83C4                   04  add	sp,*4
18097                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
18098 439C           8946         FA            mov	-6[bp],ax
18099                                           !BCC_EOS
18100                                           ! 2123    nbrows=read_byte(0x40,0x84)+1;
18101                                           ! Debug: list int = const $84 (used reg = )
18102 439F           B8                   0084  mov	ax,#$84
18103 43A2           50                         push	ax
18104                                           ! Debug: list int = const $40 (used reg = )
18105 43A3           B8                   0040  mov	ax,*$40
18106 43A6           50                         push	ax
18107                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18108 43A7           E8         3841            call	_read_byte
18109 43AA           83C4                   04  add	sp,*4
18110                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18111 43AD           30E4                       xor	ah,ah
18112                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
18113 43AF           40                         inc	ax
18114 43B0           8946         F8            mov	-8[bp],ax
18115                                           !BCC_EOS
18116                                           ! 2124    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
18117                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
18118 43B3           8A46         06            mov	al,6[bp]
18119                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
18120 43B6           8846         FF            mov	-1[bp],al
18121                                           !BCC_EOS
18122                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
18123 43B9           8B46         06            mov	ax,6[bp]
18124 43BC           30C0                       xor	al,al
18125                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18126 43BE           88E0                       mov	al,ah
18127 43C0           30E4                       xor	ah,ah
18128                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
18129 43C2           8846         FE            mov	-2[bp],al
18130                                           !BCC_EOS
18131                                           ! 2125    address=((((nbcols*nb
18132                                           ! 2125 rows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
18133                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
18134 43C5           8A46         FE            mov	al,-2[bp]
18135 43C8           30E4                       xor	ah,ah
18136 43CA           8B4E         FA            mov	cx,-6[bp]
18137 43CD           F7E9                       imul	cx
18138 43CF           50                         push	ax
18139                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
18140 43D0           8B46         FA            mov	ax,-6[bp]
18141 43D3           8B4E         F8            mov	cx,-8[bp]
18142 43D6           F7E9                       imul	cx
18143                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18144 43D8           0C                     FF  or	al,#$FF
18145                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18146                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18147 43DA           89C3                       mov	bx,ax
18148 43DC           8A46         04            mov	al,4[bp]
18149 43DF           30E4                       xor	ah,ah
18150 43E1           93                         xchg	ax,bx
18151 43E2           40                         inc	ax
18152 43E3           89D9                       mov	cx,bx
18153 43E5           F7E9                       imul	cx
18154                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
18155 43E7           0246         FF            add	al,-1[bp]
18156 43EA           80D4                   00  adc	ah,*0
18157                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
18158 43ED           0346         F2            add	ax,-$E[bp]
18159 43F0           44                         inc	sp
18160 43F1           44                         inc	sp
18161                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
18162 43F2           8946         F6            mov	-$A[bp],ax
18163                                           !BCC_EOS
18164                                           ! 2126    crtc_addr=read_word(0x40,0x63);
18165                                           ! Debug: list int = const $63 (used reg = )
18166 43F5           B8                   0063  mov	ax,*$63
18167 43F8           50                         push	ax
18168                                           ! Debug: list int = const $40 (used reg = )
18169 43F9           B8                   0040  mov	ax,*$40
18170 43FC           50                         push	ax
18171                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18172 43FD           E8         37FE            call	_read_word
18173 4400           83C4                   04  add	sp,*4
18174                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
18175 4403           8946         F4            mov	-$C[bp],ax
18176                                           !BCC_EOS
18177                                           ! 2127    outb(crtc_addr,0x0e);
18178                                           ! Debug: list int = const $E (used reg = )
18179 4406           B8                   000E  mov	ax,*$E
18180 4409           50                         push	ax
18181                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18182 440A           FF76         F4            push	-$C[bp]
18183                                           ! Debug: func () void = outb+0 (used reg = )
18184 440D           E8         3847            call	_outb
18185 4410           83C4                   04  add	sp,*4
18186                                           !BCC_EOS
18187                                           ! 2128    outb(crtc_addr+1,(address&0xff00)>>8);
18188                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
18189 4413           8B46         F6            mov	ax,-$A[bp]
18190 4416           30C0                       xor	al,al
18191                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18192 4418           88E0                       mov	al,ah
18193 441A           30E4                       xor	ah,ah
18194                                           ! Debug: list unsigned int = ax+0 (used reg = )
18195 441C           50                         push	ax
18196                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18197 441D           8B46         F4            mov	ax,-$C[bp]
18198                                           ! Debug: list unsigned int = ax+1 (used reg = )
18199 4420           40                         inc	ax
18200 4421           50                         push	ax
18201                                           ! Debug: func () void = outb+0 (used reg = )
18202 4422           E8         3832            call	_outb
18203 4425           83C4                   04  add	sp,*4
18204                                           !BCC_EOS
18205                                           ! 2129    outb(crtc_addr,0x0f);
18206                                           ! Debug: list int = const $F (used reg = )
18207 4428           B8                   000F  mov	ax,*$F
18208 442B           50                         push	ax
18209                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18210 442C           FF76         F4            push	-$C[bp]
18211                                           ! Debug: func () void = outb+0 (used reg = )
18212 442F           E8         3825            call	_outb
18213 4432           83C4                   04  add	sp,*4
18214                                           !BCC_EOS
18215                                           ! 2130    outb(crtc_addr+1,address&0x00ff);
18216                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
18217 4435           8A46         F6            mov	al,-$A[bp]
18218                                           ! Debug: list unsigned char = al+0 (used reg = )
18219 4438           30E4                       xor	ah,ah
18220 443A           50                         push	ax
18221                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18222 443B           8B46         F4            mov	ax,-$C[bp]
18223                                           ! Debug: list unsigned int = ax+1 (used reg = )
18224 443E           40                         inc	ax
18225 443F           50                         push	ax
18226                                           ! Debug: func () void = outb+0 (used reg = )
18227 4440           E8         3814            call	_outb
18228 4443           83C4                   04  add	sp,*4
18229                                           !BCC_EOS
18230                                           ! 2131   }
18231                                           ! 2132 }
18232                       00004446            .A4:
18233 4446           89EC                       mov	sp,bp
18234 4448           5D                         pop	bp
18235 4449           C3                         ret
18236                                           ! 2133 static void biosfn_get_cursor_pos (page,shape, pos)
18237                                           ! Register BX used in function biosfn_set_cursor_pos
18238                                           ! 2134 Bit8u page;Bit16u *shape;Bit16u *pos;
18239                       0000444A            _biosfn_get_cursor_pos:
18240                                           !BCC_EOS
18241                                           !BCC_EOS
18242                                           !BCC_EOS
18243                                           ! 2135 {
18244                                           ! 2136  Bit16u ss=get_SS();
18245 444A           55                         push	bp
18246 444B           89E5                       mov	bp,sp
18247 444D           4C                         dec	sp
18248 444E           4C                         dec	sp
18249                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
18250 444F           E8         3825            call	_get_SS
18251                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
18252 4452           8946         FE            mov	-2[bp],ax
18253                                           !BCC_EOS
18254                                           ! 2137  write_word(ss, shape, 0);
18255                                           ! Debug: list int = const 0 (used reg = )
18256 4455           31C0                       xor	ax,ax
18257 4457           50                         push	ax
18258                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18259 4458           FF76         06            push	6[bp]
18260                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18261 445B           FF76         FE            push	-2[bp]
18262                                           ! Debug: func () void = write_word+0 (used reg = )
18263 445E           E8         37C8            call	_write_word
18264 4461           83C4                   06  add	sp,*6
18265                                           !BCC_EOS
18266                                           ! 2138  write_word(ss, pos, 0);
18267                                           ! Debug: list int = const 0 (used reg = )
18268 4464           31C0                       xor	ax,ax
18269 4466           50                         push	ax
18270                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18271 4467           FF76         08            push	8[bp]
18272                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18273 446A           FF76         FE            push	-2[bp]
18274                                           ! Debug: func () void = write_word+0 (used reg = )
18275 446D           E8         37B9            call	_write_word
18276 4470           83C4                   06  add	sp,*6
18277                                           !BCC_EOS
18278                                           ! 2139  if(page>7)return;
18279                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
18280 4473           8A46         04            mov	al,4[bp]
18281 4476           3C                     07  cmp	al,*7
18282 4478           76           04            jbe 	.A6
18283                       0000447A            .A7:
18284 447A           89EC                       mov	sp,bp
18285 447C           5D                         pop	bp
18286 447D           C3                         ret
18287                                           !BCC_EOS
18288                                           ! 2140  write_word(ss,shape,read_word(0x40,0x60));
18289                       0000447E            .A6:
18290                                           ! Debug: list int = const $60 (used reg = )
18291 447E           B8                   0060  mov	ax,*$60
18292 4481           50                         push	ax
18293                                           ! Debug: list int = const $40 (used reg = )
18294 4482           B8                   0040  mov	ax,*$40
18295 4485           50                         push	ax
18296                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18297 4486           E8         3775            call	_read_word
18298 4489           83C4                   04  add	sp,*4
18299                                           ! Debug: list unsigned short = ax+0 (used reg = )
18300 448C           50                         push	ax
18301                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18302 448D           FF76         06            push	6[bp]
18303                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18304 4490           FF76         FE            push	-2[bp]
18305                                           ! Debug: func () void = write_word+0 (used reg = )
18306 4493           E8         3793            call	_write_word
18307 4496           83C4                   06  add	sp,*6
18308                                           !BCC_EOS
18309                                           ! 2141  write_word(ss,pos,read_word(0x40,0x50 +page*2));
18310                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
18311 4499           8A46         04            mov	al,4[bp]
18312 449C           30E4                       xor	ah,ah
18313 449E           D1E0                       shl	ax,*1
18314                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18315                                           ! Debug: expression subtree swapping
18316                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18317 44A0           05                   0050  add	ax,*$50
18318 44A3           50                         push	ax
18319                                           ! Debug: list int = const $40 (used reg = )
18320 44A4           B8                   0040  mov	ax,*$40
18321 44A7           50                         push	ax
18322                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18323 44A8           E8         3753            call	_read_word
18324 44AB           83C4                   04  add	sp,*4
18325                                           ! Debug: list unsigned short = ax+0 (used reg = )
18326 44AE           50                         push	ax
18327                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18328 44AF           FF76         08            push	8[bp]
18329                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18330 44B2           FF76         FE            push	-2[bp]
18331                                           ! Debug: func () void = write_word+0 (used reg = )
18332 44B5           E8         3771            call	_write_word
18333 44B8           83C4                   06  add	sp,*6
18334                                           !BCC_EOS
18335                                           ! 2142 }
18336 44BB           89EC                       mov	sp,bp
18337 44BD           5D                         pop	bp
18338 44BE           C3                         ret
18339                                           ! 2143 static void biosfn_set_active_page (page)
18340                                           ! 2144 Bit8u page;
18341                       000044BF            _biosfn_set_active_page:
18342                                           !BCC_EOS
18343                                           ! 2145 {
18344                                           ! 2146  Bit16u cursor,dummy,crtc_addr;
18345                                           !BCC_EOS
18346                                           ! 2147  Bit16u nbcols,nbrows,address;
18347                                           !BCC_EOS
18348                                           ! 2148  Bit8u mode,line;
18349                                           !BCC_EOS
18350                                           ! 2149  if(page>7)return;
18351 44BF           55                         push	bp
18352 44C0           89E5                       mov	bp,sp
18353 44C2           83C4                   F2  add	sp,*-$E
18354                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18355 44C5           8A46         04            mov	al,4[bp]
18356 44C8           3C                     07  cmp	al,*7
18357 44CA           76           04            jbe 	.A8
18358                       000044CC            .A9:
18359 44CC           89EC                       mov	sp,bp
18360 44CE           5D                         pop	bp
18361 44CF           C3                         ret
18362                                           !BCC_EOS
18363                                           ! 2150  mode=read_byte(0x40,0x49);
18364                       000044D0            .A8:
18365                                           ! Debug: list int = const $49 (used reg = )
18366 44D0           B8                   0049  mov	ax,*$49
18367 44D3           50                         push	ax
18368                                           ! Debug: list int = const $40 (used reg = )
18369 44D4           B8                   0040  mov	ax,*$40
18370 44D7           50                         push	ax
18371                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18372 44D8           E8         3710            call	_read_byte
18373 44DB           83C4                   04  add	sp,*4
18374                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18375 44DE           8846         F3            mov	-$D[bp],al
18376                                           !BCC_EOS
18377                                           ! 2151  line=find_vga_entry(mode);
18378                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18379 44E1           8A46         F3            mov	al,-$D[bp]
18380 44E4           30E4                       xor	ah,ah
18381 44E6           50                         push	ax
18382                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18383 44E7           E8         3615            call	_find_vga_entry
18384 44EA           44                         inc	sp
18385 44EB           44                         inc	sp
18386                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18387 44EC           8846         F2            mov	-$E[bp],al
18388                                           !BCC_EOS
18389                                           ! 2152  if(line==0xFF)return;
18390                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18391 44EF           8A46         F2            mov	al,-$E[bp]
18392 44F2           3C                     FF  cmp	al,#$FF
18393 44F4           75           04            jne 	.AA
18394                       000044F6            .AB:
18395 44F6           89EC                       mov	sp,bp
18396 44F8           5D                         pop	bp
18397 44F9           C3                         ret
18398                                           !BCC_EOS
18399                                           ! 2153  biosfn_get_cursor_pos(page,&dummy,&cursor);
18400                       000044FA            .AA:
18401                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18402 44FA           8D5E         FE            lea	bx,-2[bp]
18403 44FD           53                         push	bx
18404                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18405 44FE           8D5E         FC            lea	bx,-4[bp]
18406 4501           53                         push	bx
18407                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18408 4502           8A46         04            mov	al,4[bp]
18409 4505           30E4                       xor	ah,ah
18410 4507           50                         push	ax
18411                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18412 4508           E8         FF3F            call	_biosfn_get_cursor_pos
18413 450B           83C4                   06  add	sp,*6
18414                                           !BCC_EOS
18415                                           ! 2154  if(vga_modes[line].class==0x00)
18416                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
18417 450E           8A46         F2            mov	al,-$E[bp]
18418 4511           30E4                       xor	ah,ah
18419 4513           B1                     03  mov	cl,*3
18420 4515           D3E0                       shl	ax,cl
18421 4517           89C3                       mov	bx,ax
18422 4519           81C3                 01FD  add	bx,#_vga_modes
18423                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18424 451D           8A47         01            mov	al,1[bx]
18425 4520           84C0                       test	al,al
18426 4522           75           6E            jne 	.AC
18427                       00004524            .AD:
18428                                           ! 2155   {
18429                                           ! 2156    nbcols=read_word(0x40,0x4A);
18430                                           ! Debug: list int = const $4A (used reg = )
18431 4524           B8                   004A  mov	ax,*$4A
18432 4527           50                         push	ax
18433                                           ! Debug: list int = const $40 (used reg = )
18434 4528           B8                   0040  mov	ax,*$40
18435 452B           50                         push	ax
18436                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18437 452C           E8         36CF            call	_read_word
18438 452F           83C4                   04  add	sp,*4
18439                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18440 4532           8946         F8            mov	-8[bp],ax
18441                                           !BCC_EOS
18442                                           ! 2157    nbrows=read_byte(0x40,0x84)+1;
18443                                           ! Debug: list int = const $84 (used reg = )
18444 4535           B8                   0084  mov	ax,#$84
18445 4538           50                         push	ax
18446                                           ! Debug: list int = const $40 (used reg = )
18447 4539           B8                   0040  mov	ax,*$40
18448 453C           50                         push	ax
18449                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18450 453D           E8         36AB            call	_read_byte
18451 4540           83C4                   04  add	sp,*4
18452                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18453 4543           30E4                       xor	ah,ah
18454                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18455 4545           40                         inc	ax
18456 4546           8946         F6            mov	-$A[bp],ax
18457                                           !BCC_EOS
18458                                           ! 2158    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18459                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18460 4549           8B46         F8            mov	ax,-8[bp]
18461 454C           8B4E         F6            mov	cx,-$A[bp]
18462 454F           F7E9                       imul	cx
18463                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18464 4551           D1E0                       shl	ax,*1
18465                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18466 4553           0C                     FF  or	al,#$FF
18467                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18468                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18469 4555           89C3                       mov	bx,ax
18470 4557           8A46         04            mov	al,4[bp]
18471 455A           30E4                       xor	ah,ah
18472 455C           93                         xchg	ax,bx
18473 455D           40                         inc	ax
18474 455E           89D9                       mov	cx,bx
18475 4560           F7E9                       imul	cx
18476                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18477 4562           8946         F4            mov	-$C[bp],ax
18478                                           !BCC_EOS
18479                                           ! 2159    write_word(0x40,0x4E,address);
18480                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18481 4565           FF76         F4            push	-$C[bp]
18482                                           ! Debug: list int = const $4E (used reg = )
18483 4568           B8                   004E  mov	ax,*$4E
18484 456B           50                         push	ax
18485                                           ! Debug: list int = const $40 (used reg = )
18486 456C           B8                   0040  mov	ax,*$40
18487 456F           50                         push	ax
18488                                           ! Debug: func () void = write_word+0 (used reg = )
18489 4570           E8         36B6            call	_write_word
18490 4573           83C4                   06  add	sp,*6
18491                                           !BCC_EOS
18492                                           ! 2160    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18493                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18494 4576           8B46         F8            mov	ax,-8[bp]
18495 4579           8B4E         F6            mov	cx,-$A[bp]
18496 457C           F7E9                       imul	cx
18497                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18498 457E           0C                     FF  or	al,#$FF
18499                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18500                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18501 4580           89C3                       mov	bx,ax
18502 4582           8A46         04            mov	al,4[bp]
18503 4585           30E4                       xor	ah,ah
18504 4587           93                         xchg	ax,bx
18505 4588           40                         inc	ax
18506 4589           89D9                       mov	cx,bx
18507 458B           F7E9                       imul	cx
18508                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18509 458D           8946         F4            mov	-$C[bp],ax
18510                                           !BCC_EOS
18511                                           ! 2161   }
18512                                           ! 2162  else
18513                                           ! 2163   {
18514 4590           EB           24            jmp .AE
18515                       00004592            .AC:
18516                                           ! 2164    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18517                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18518 4592           8A46         F2            mov	al,-$E[bp]
18519 4595           30E4                       xor	ah,ah
18520 4597           89C3                       mov	bx,ax
18521                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18522 4599           8A87       027D            mov	al,_line_to_vpti[bx]
18523 459D           30E4                       xor	ah,ah
18524 459F           B1                     06  mov	cl,*6
18525 45A1           D3E0                       shl	ax,cl
18526 45A3           89C3                       mov	bx,ax
18527 45A5           81C3                 0291  add	bx,#_video_param_table
18528                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18529                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18530                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18531 45A9           8A46         04            mov	al,4[bp]
18532 45AC           30E4                       xor	ah,ah
18533 45AE           8B4F         03            mov	cx,3[bx]
18534 45B1           F7E9                       imul	cx
18535                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18536 45B3           8946         F4            mov	-$C[bp],ax
18537                                           !BCC_EOS
18538                                           ! 2165   }
18539                                           ! 2166  crtc_addr=read_word(0x40,0x63);
18540                       000045B6            .AE:
18541                                           ! Debug: list int = const $63 (used reg = )
18542 45B6           B8                   0063  mov	ax,*$63
18543 45B9           50                         push	ax
18544                                           ! Debug: list int = const $40 (used reg = )
18545 45BA           B8                   0040  mov	ax,*$40
18546 45BD           50                         push	ax
18547                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18548 45BE           E8         363D            call	_read_word
18549 45C1           83C4                   04  add	sp,*4
18550                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18551 45C4           8946         FA            mov	-6[bp],ax
18552                                           !BCC_EOS
18553                                           ! 2167  outb(crtc_addr,0x0c);
18554                                           ! Debug: list int = const $C (used reg = )
18555 45C7           B8                   000C  mov	ax,*$C
18556 45CA           50                         push	ax
18557                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18558 45CB           FF76         FA            push	-6[bp]
18559                                           ! Debug: func () void = outb+0 (used reg = )
18560 45CE           E8         3686            call	_outb
18561 45D1           83C4                   04  add	sp,*4
18562                                           !BCC_EOS
18563                                           ! 2168  outb(crtc_addr+1,(address&0xff00)>>8);
18564                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18565 45D4           8B46         F4            mov	ax,-$C[bp]
18566 45D7           30C0                       xor	al,al
18567                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18568 45D9           88E0                       mov	al,ah
18569 45DB           30E4                       xor	ah,ah
18570                                           ! Debug: list unsigned int = ax+0 (used reg = )
18571 45DD           50                         push	ax
18572                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18573 45DE           8B46         FA            mov	ax,-6[bp]
18574                                           ! Debug: list unsigned int = ax+1 (used reg = )
18575 45E1           40                         inc	ax
18576 45E2           50                         push	ax
18577                                           ! Debug: func () void = outb+0 (used reg = )
18578 45E3           E8         3671            call	_outb
18579 45E6           83C4                   04  add	sp,*4
18580                                           !BCC_EOS
18581                                           ! 2169  outb(crtc_addr,0x0d);
18582                                           ! Debug: list int = const $D (used reg = )
18583 45E9           B8                   000D  mov	ax,*$D
18584 45EC           50                         push	ax
18585                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18586 45ED           FF76         FA            push	-6[bp]
18587                                           ! Debug: func () void = outb+0 (used reg = )
18588 45F0           E8         3664            call	_outb
18589 45F3           83C4                   04  add	sp,*4
18590                                           !BCC_EOS
18591                                           ! 2170  outb(crtc_addr+1,address&0x00ff);
18592                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18593 45F6           8A46         F4            mov	al,-$C[bp]
18594                                           ! Debug: list unsigned char = al+0 (used reg = )
18595 45F9           30E4                       xor	ah,ah
18596 45FB           50                         push	ax
18597                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18598 45FC           8B46         FA            mov	ax,-6[bp]
18599                                           ! Debug: list unsigned int = ax+1 (used reg = )
18600 45FF           40                         inc	ax
18601 4600           50                         push	ax
18602                                           ! Debug: func () void = outb+0 (used reg = )
18603 4601           E8         3653            call	_outb
18604 4604           83C4                   04  add	sp,*4
18605                                           !BCC_EOS
18606                                           ! 2171  write_byte(0x40,0x62,page);
18607                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18608 4607           8A46         04            mov	al,4[bp]
18609 460A           30E4                       xor	ah,ah
18610 460C           50                         push	ax
18611                                           ! Debug: list int = const $62 (used reg = )
18612 460D           B8                   0062  mov	ax,*$62
18613 4610           50                         push	ax
18614                                           ! Debug: list int = const $40 (used reg = )
18615 4611           B8                   0040  mov	ax,*$40
18616 4614           50                         push	ax
18617                                           ! Debug: func () void = write_byte+0 (used reg = )
18618 4615           E8         35F9            call	_write_byte
18619 4618           83C4                   06  add	sp,*6
18620                                           !BCC_EOS
18621                                           ! 2172  biosfn_set_cursor_pos(page,cursor);
18622                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18623 461B           FF76         FE            push	-2[bp]
18624                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18625 461E           8A46         04            mov	al,4[bp]
18626 4621           30E4                       xor	ah,ah
18627 4623           50                         push	ax
18628                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18629 4624           E8         FD23            call	_biosfn_set_cursor_pos
18630 4627           83C4                   04  add	sp,*4
18631                                           !BCC_EOS
18632                                           ! 2173 }
18633 462A           89EC                       mov	sp,bp
18634 462C           5D                         pop	bp
18635 462D           C3                         ret
18636                                           ! 2174 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18637                                           ! Register BX used in function biosfn_set_active_page
18638                                           ! 2175 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18639                       0000462E            _vgamem_copy_pl4:
18640                                           !BCC_EOS
18641                                           !BCC_EOS
18642                                           !BCC_EOS
18643                                           !BCC_EOS
18644                                           !BCC_EOS
18645                                           !BCC_EOS
18646                                           ! 2176 {
18647                                           ! 2177  Bit16u src,dest;
18648                                           !BCC_EOS
18649                                           ! 2178  Bit8u i;
18650                                           !BCC_EOS
18651                                           ! 2179  src=ysrc*cheight*nbcols+xstart;
18652 462E           55                         push	bp
18653 462F           89E5                       mov	bp,sp
18654 4631           83C4                   FA  add	sp,*-6
18655                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18656 4634           8A46         0E            mov	al,$E[bp]
18657 4637           30E4                       xor	ah,ah
18658 4639           89C3                       mov	bx,ax
18659 463B           8A46         06            mov	al,6[bp]
18660 463E           30E4                       xor	ah,ah
18661 4640           89D9                       mov	cx,bx
18662 4642           F7E9                       imul	cx
18663                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18664 4644           89C3                       mov	bx,ax
18665 4646           8A46         0C            mov	al,$C[bp]
18666 4649           30E4                       xor	ah,ah
18667 464B           93                         xchg	ax,bx
18668 464C           89D9                       mov	cx,bx
18669 464E           F7E9                       imul	cx
18670                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18671 4650           0246         04            add	al,4[bp]
18672 4653           80D4                   00  adc	ah,*0
18673                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18674 4656           8946         FE            mov	-2[bp],ax
18675                                           !BCC_EOS
18676                                           ! 2180  dest=ydest*cheight*nbcols+xstart;
18677                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18678 4659           8A46         0E            mov	al,$E[bp]
18679 465C           30E4                       xor	ah,ah
18680 465E           89C3                       mov	bx,ax
18681 4660           8A46         08            mov	al,8[bp]
18682 4663           30E4                       xor	ah,ah
18683 4665           89D9                       mov	cx,bx
18684 4667           F7E9                       imul	cx
18685                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18686 4669           89C3                       mov	bx,ax
18687 466B           8A46         0C            mov	al,$C[bp]
18688 466E           30E4                       xor	ah,ah
18689 4670           93                         xchg	ax,bx
18690 4671           89D9                       mov	cx,bx
18691 4673           F7E9                       imul	cx
18692                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18693 4675           0246         04            add	al,4[bp]
18694 4678           80D4                   00  adc	ah,*0
18695                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18696 467B           8946         FC            mov	-4[bp],ax
18697                                           !BCC_EOS
18698                                           ! 2181  outw(0x3ce, 0x0105);
18699                                           ! Debug: list int = const $105 (used reg = )
18700 467E           B8                   0105  mov	ax,#$105
18701 4681           50                         push	ax
18702                                           ! Debug: list int = const $3CE (used reg = )
18703 4682           B8                   03CE  mov	ax,#$3CE
18704 4685           50                         push	ax
18705                                           ! Debug: func () void = outw+0 (used reg = )
18706 4686           E8         35DE            call	_outw
18707 4689           83C4                   04  add	sp,*4
18708                                           !BCC_EOS
18709                                           ! 2182  for(i=0;i<cheight;i++)
18710                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18711 468C           30C0                       xor	al,al
18712 468E           8846         FB            mov	-5[bp],al
18713                                           !BCC_EOS
18714                                           !BCC_EOS
18715                                           ! 2183   {
18716 4691           EB           43            jmp .B1
18717                       00004693            .B2:
18718                                           ! 2184    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18719                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18720 4693           8A46         0A            mov	al,$A[bp]
18721 4696           30E4                       xor	ah,ah
18722 4698           50                         push	ax
18723                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18724 4699           8A46         0C            mov	al,$C[bp]
18725 469C           30E4                       xor	ah,ah
18726 469E           89C3                       mov	bx,ax
18727 46A0           8A46         FB            mov	al,-5[bp]
18728 46A3           30E4                       xor	ah,ah
18729 46A5           89D9                       mov	cx,bx
18730 46A7           F7E9                       imul	cx
18731                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18732                                           ! Debug: expression subtree swapping
18733 46A9           0346         FE            add	ax,-2[bp]
18734                                           ! Debug: list unsigned int = ax+0 (used reg = )
18735 46AC           50                         push	ax
18736                                           ! Debug: list unsigned int = const $A000 (used reg = )
18737 46AD           B8                   A000  mov	ax,#$A000
18738 46B0           50                         push	ax
18739                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18740 46B1           8A46         0C            mov	al,$C[bp]
18741 46B4           30E4                       xor	ah,ah
18742 46B6           89C3                       mov	bx,ax
18743 46B8           8A46         FB            mov	al,-5[bp]
18744 46BB           30E4                       xor	ah,ah
18745 46BD           89D9                       mov	cx,bx
18746 46BF           F7E9                       imul	cx
18747                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18748                                           ! Debug: expression subtree swapping
18749 46C1           0346         FC            add	ax,-4[bp]
18750                                           ! Debug: list unsigned int = ax+0 (used reg = )
18751 46C4           50                         push	ax
18752                                           ! Debug: list unsigned int = const $A000 (used reg = )
18753 46C5           B8                   A000  mov	ax,#$A000
18754 46C8           50                         push	ax
18755                                           ! Debug: func () void = memcpyb+0 (used reg = )
18756 46C9           E8         34BF            call	_memcpyb
18757 46CC           83C4                   0A  add	sp,*$A
18758                                           !BCC_EOS
18759                                           ! 2185   }
18760                                           ! 2186  outw(0x3ce, 0x0005);
18761                       000046CF            .B0:
18762                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18763 46CF           8A46         FB            mov	al,-5[bp]
18764 46D2           40                         inc	ax
18765 46D3           8846         FB            mov	-5[bp],al
18766                       000046D6            .B1:
18767                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18768 46D6           8A46         FB            mov	al,-5[bp]
18769 46D9           3A46         0E            cmp	al,$E[bp]
18770 46DC           72           B5            jb 	.B2
18771                       000046DE            .B3:
18772                       000046DE            .AF:
18773                                           ! Debug: list int = const 5 (used reg = )
18774 46DE           B8                   0005  mov	ax,*5
18775 46E1           50                         push	ax
18776                                           ! Debug: list int = const $3CE (used reg = )
18777 46E2           B8                   03CE  mov	ax,#$3CE
18778 46E5           50                         push	ax
18779                                           ! Debug: func () void = outw+0 (used reg = )
18780 46E6           E8         357E            call	_outw
18781 46E9           83C4                   04  add	sp,*4
18782                                           !BCC_EOS
18783                                           ! 2187 }
18784 46EC           89EC                       mov	sp,bp
18785 46EE           5D                         pop	bp
18786 46EF           C3                         ret
18787                                           ! 2188 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18788                                           ! Register BX used in function vgamem_copy_pl4
18789                                           ! 2189 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18790                       000046F0            _vgamem_fill_pl4:
18791                                           !BCC_EOS
18792                                           !BCC_EOS
18793                                           !BCC_EOS
18794                                           !BCC_EOS
18795                                           !BCC_EOS
18796                                           !BCC_EOS
18797                                           ! 2190 {
18798                                           ! 2191  Bit16u dest;
18799                                           !BCC_EOS
18800                                           ! 2192  Bit8u i;
18801                                           !BCC_EOS
18802                                           ! 2193  dest=ystart*cheight*nbcols+xstart;
18803 46F0           55                         push	bp
18804 46F1           89E5                       mov	bp,sp
18805 46F3           83C4                   FC  add	sp,*-4
18806                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18807 46F6           8A46         0C            mov	al,$C[bp]
18808 46F9           30E4                       xor	ah,ah
18809 46FB           89C3                       mov	bx,ax
18810 46FD           8A46         06            mov	al,6[bp]
18811 4700           30E4                       xor	ah,ah
18812 4702           89D9                       mov	cx,bx
18813 4704           F7E9                       imul	cx
18814                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18815 4706           89C3                       mov	bx,ax
18816 4708           8A46         0A            mov	al,$A[bp]
18817 470B           30E4                       xor	ah,ah
18818 470D           93                         xchg	ax,bx
18819 470E           89D9                       mov	cx,bx
18820 4710           F7E9                       imul	cx
18821                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18822 4712           0246         04            add	al,4[bp]
18823 4715           80D4                   00  adc	ah,*0
18824                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18825 4718           8946         FE            mov	-2[bp],ax
18826                                           !BCC_EOS
18827                                           ! 2194  outw(0x3ce, 0x0205);
18828                                           ! Debug: list int = const $205 (used reg = )
18829 471B           B8                   0205  mov	ax,#$205
18830 471E           50                         push	ax
18831                                           ! Debug: list int = const $3CE (used reg = )
18832 471F           B8                   03CE  mov	ax,#$3CE
18833 4722           50                         push	ax
18834                                           ! Debug: func () void = outw+0 (used reg = )
18835 4723           E8         3541            call	_outw
18836 4726           83C4                   04  add	sp,*4
18837                                           !BCC_EOS
18838                                           ! 2195  for(i=0;i<cheight;i++)
18839                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18840 4729           30C0                       xor	al,al
18841 472B           8846         FD            mov	-3[bp],al
18842                                           !BCC_EOS
18843                                           !BCC_EOS
18844                                           ! 2196   {
18845 472E           EB           31            jmp .B6
18846                       00004730            .B7:
18847                                           ! 2197    memsetb(0xa000,dest+i*nbcols,attr,cols);
18848                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18849 4730           8A46         08            mov	al,8[bp]
18850 4733           30E4                       xor	ah,ah
18851 4735           50                         push	ax
18852                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18853 4736           8A46         0E            mov	al,$E[bp]
18854 4739           30E4                       xor	ah,ah
18855 473B           50                         push	ax
18856                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18857 473C           8A46         0A            mov	al,$A[bp]
18858 473F           30E4                       xor	ah,ah
18859 4741           89C3                       mov	bx,ax
18860 4743           8A46         FD            mov	al,-3[bp]
18861 4746           30E4                       xor	ah,ah
18862 4748           89D9                       mov	cx,bx
18863 474A           F7E9                       imul	cx
18864                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18865                                           ! Debug: expression subtree swapping
18866 474C           0346         FE            add	ax,-2[bp]
18867                                           ! Debug: list unsigned int = ax+0 (used reg = )
18868 474F           50                         push	ax
18869                                           ! Debug: list unsigned int = const $A000 (used reg = )
18870 4750           B8                   A000  mov	ax,#$A000
18871 4753           50                         push	ax
18872                                           ! Debug: func () void = memsetb+0 (used reg = )
18873 4754           E8         33EA            call	_memsetb
18874 4757           83C4                   08  add	sp,*8
18875                                           !BCC_EOS
18876                                           ! 2198   }
18877                                           ! 2199  outw(0x3ce, 0x0005);
18878                       0000475A            .B5:
18879                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18880 475A           8A46         FD            mov	al,-3[bp]
18881 475D           40                         inc	ax
18882 475E           8846         FD            mov	-3[bp],al
18883                       00004761            .B6:
18884                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18885 4761           8A46         FD            mov	al,-3[bp]
18886 4764           3A46         0C            cmp	al,$C[bp]
18887 4767           72           C7            jb 	.B7
18888                       00004769            .B8:
18889                       00004769            .B4:
18890                                           ! Debug: list int = const 5 (used reg = )
18891 4769           B8                   0005  mov	ax,*5
18892 476C           50                         push	ax
18893                                           ! Debug: list int = const $3CE (used reg = )
18894 476D           B8                   03CE  mov	ax,#$3CE
18895 4770           50                         push	ax
18896                                           ! Debug: func () void = outw+0 (used reg = )
18897 4771           E8         34F3            call	_outw
18898 4774           83C4                   04  add	sp,*4
18899                                           !BCC_EOS
18900                                           ! 2200 }
18901 4777           89EC                       mov	sp,bp
18902 4779           5D                         pop	bp
18903 477A           C3                         ret
18904                                           ! 2201 static void 
18905                                           ! Register BX used in function vgamem_fill_pl4
18906                                           ! 2201 vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18907                                           ! 2202 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18908                       0000477B            _vgamem_copy_cga:
18909                                           !BCC_EOS
18910                                           !BCC_EOS
18911                                           !BCC_EOS
18912                                           !BCC_EOS
18913                                           !BCC_EOS
18914                                           !BCC_EOS
18915                                           ! 2203 {
18916                                           ! 2204  Bit16u src,dest;
18917                                           !BCC_EOS
18918                                           ! 2205  Bit8u i;
18919                                           !BCC_EOS
18920                                           ! 2206  src=((ysrc*cheight*nbcols)>>1)+xstart;
18921 477B           55                         push	bp
18922 477C           89E5                       mov	bp,sp
18923 477E           83C4                   FA  add	sp,*-6
18924                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18925 4781           8A46         0E            mov	al,$E[bp]
18926 4784           30E4                       xor	ah,ah
18927 4786           89C3                       mov	bx,ax
18928 4788           8A46         06            mov	al,6[bp]
18929 478B           30E4                       xor	ah,ah
18930 478D           89D9                       mov	cx,bx
18931 478F           F7E9                       imul	cx
18932                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18933 4791           89C3                       mov	bx,ax
18934 4793           8A46         0C            mov	al,$C[bp]
18935 4796           30E4                       xor	ah,ah
18936 4798           93                         xchg	ax,bx
18937 4799           89D9                       mov	cx,bx
18938 479B           F7E9                       imul	cx
18939                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18940 479D           D1E8                       shr	ax,*1
18941                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18942 479F           0246         04            add	al,4[bp]
18943 47A2           80D4                   00  adc	ah,*0
18944                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18945 47A5           8946         FE            mov	-2[bp],ax
18946                                           !BCC_EOS
18947                                           ! 2207  dest=((ydest*cheight*nbcols)>>1)+xstart;
18948                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18949 47A8           8A46         0E            mov	al,$E[bp]
18950 47AB           30E4                       xor	ah,ah
18951 47AD           89C3                       mov	bx,ax
18952 47AF           8A46         08            mov	al,8[bp]
18953 47B2           30E4                       xor	ah,ah
18954 47B4           89D9                       mov	cx,bx
18955 47B6           F7E9                       imul	cx
18956                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18957 47B8           89C3                       mov	bx,ax
18958 47BA           8A46         0C            mov	al,$C[bp]
18959 47BD           30E4                       xor	ah,ah
18960 47BF           93                         xchg	ax,bx
18961 47C0           89D9                       mov	cx,bx
18962 47C2           F7E9                       imul	cx
18963                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18964 47C4           D1E8                       shr	ax,*1
18965                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18966 47C6           0246         04            add	al,4[bp]
18967 47C9           80D4                   00  adc	ah,*0
18968                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18969 47CC           8946         FC            mov	-4[bp],ax
18970                                           !BCC_EOS
18971                                           ! 2208  for(i=0;i<cheight;i++)
18972                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18973 47CF           30C0                       xor	al,al
18974 47D1           8846         FB            mov	-5[bp],al
18975                                           !BCC_EOS
18976                                           !BCC_EOS
18977                                           ! 2209   {
18978 47D4           E9         00A8            br 	.BB
18979                       000047D7            .BC:
18980                                           ! 2210    if (i & 1)
18981                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
18982 47D7           8A46         FB            mov	al,-5[bp]
18983 47DA           24                     01  and	al,*1
18984 47DC           84C0                       test	al,al
18985 47DE           74           56            je  	.BD
18986                       000047E0            .BE:
18987                                           ! 2211      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
18988                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18989 47E0           8A46         0A            mov	al,$A[bp]
18990 47E3           30E4                       xor	ah,ah
18991 47E5           50                         push	ax
18992                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18993 47E6           8A46         FB            mov	al,-5[bp]
18994 47E9           30E4                       xor	ah,ah
18995 47EB           D1E8                       shr	ax,*1
18996                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18997 47ED           89C3                       mov	bx,ax
18998 47EF           8A46         0C            mov	al,$C[bp]
18999 47F2           30E4                       xor	ah,ah
19000 47F4           93                         xchg	ax,bx
19001 47F5           89D9                       mov	cx,bx
19002 47F7           F7E9                       imul	cx
19003 47F9           50                         push	ax
19004                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
19005                                           ! Debug: expression subtree swapping
19006 47FA           8B46         FE            mov	ax,-2[bp]
19007                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19008 47FD           05                   2000  add	ax,#$2000
19009 4800           0346         F6            add	ax,-$A[bp]
19010 4803           44                         inc	sp
19011 4804           44                         inc	sp
19012                                           ! Debug: list unsigned int = ax+0 (used reg = )
19013 4805           50                         push	ax
19014                                           ! Debug: list unsigned int = const $B800 (used reg = )
19015 4806           B8                   B800  mov	ax,#$B800
19016 4809           50                         push	ax
19017                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19018 480A           8A46         FB            mov	al,-5[bp]
19019 480D           30E4                       xor	ah,ah
19020 480F           D1E8                       shr	ax,*1
19021                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19022 4811           89C3                       mov	bx,ax
19023 4813           8A46         0C            mov	al,$C[bp]
19024 4816           30E4                       xor	ah,ah
19025 4818           93                         xchg	ax,bx
19026 4819           89D9                       mov	cx,bx
19027 481B           F7E9                       imul	cx
19028 481D           50                         push	ax
19029                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
19030                                           ! Debug: expression subtree swapping
19031 481E           8B46         FC            mov	ax,-4[bp]
19032                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
19033 4821           05                   2000  add	ax,#$2000
19034 4824           0346         F2            add	ax,-$E[bp]
19035 4827           44                         inc	sp
19036 4828           44                         inc	sp
19037                                           ! Debug: list unsigned int = ax+0 (used reg = )
19038 4829           50                         push	ax
19039                                           ! Debug: list unsigned int = const $B800 (used reg = )
19040 482A           B8                   B800  mov	ax,#$B800
19041 482D           50                         push	ax
19042                                           ! Debug: func () void = memcpyb+0 (used reg = )
19043 482E           E8         335A            call	_memcpyb
19044 4831           83C4                   0A  add	sp,*$A
19045                                           !BCC_EOS
19046                                           ! 2212    else
19047                                           ! 2213      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
19048 4834           EB           42            jmp .BF
19049                       00004836            .BD:
19050                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19051 4836           8A46         0A            mov	al,$A[bp]
19052 4839           30E4                       xor	ah,ah
19053 483B           50                         push	ax
19054                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19055 483C           8A46         FB            mov	al,-5[bp]
19056 483F           30E4                       xor	ah,ah
19057 4841           D1E8                       shr	ax,*1
19058                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19059 4843           89C3                       mov	bx,ax
19060 4845           8A46         0C            mov	al,$C[bp]
19061 4848           30E4                       xor	ah,ah
19062 484A           93                         xchg	ax,bx
19063 484B           89D9                       mov	cx,bx
19064 484D           F7E9                       imul	cx
19065                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
19066                                           ! Debug: expression subtree swapping
19067 484F           0346         FE            add	ax,-2[bp]
19068                                           ! Debug: list unsigned int = ax+0 (used reg = )
19069 4852           50                         push	ax
19070                                           ! Debug: list unsigned int = const $B800 (used reg = )
19071 4853           B8                   B800  mov	ax,#$B800
19072 4856           50                         push	ax
19073                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19074 4857           8A46         FB            mov	al,-5[bp]
19075 485A           30E4                       xor	ah,ah
19076 485C           D1E8                       shr	ax,*1
19077                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19078 485E           89C3                       mov	bx,ax
19079 4860           8A46         0C            mov	al,$C[bp]
19080 4863           30E4                       xor	ah,ah
19081 4865           93                         xchg	ax,bx
19082 4866           89D9                       mov	cx,bx
19083 4868           F7E9                       imul	cx
19084                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
19085                                           ! Debug: expression subtree swapping
19086 486A           0346         FC            add	ax,-4[bp]
19087                                           ! Debug: list unsigned int = ax+0 (used reg = )
19088 486D           50                         push	ax
19089                                           ! Debug: list unsigned int = const $B800 (used reg = )
19090 486E           B8                   B800  mov	ax,#$B800
19091 4871           50                         push	ax
19092                                           ! Debug: func () void = memcpyb+0 (used reg = )
19093 4872           E8         3316            call	_memcpyb
19094 4875           83C4                   0A  add	sp,*$A
19095                                           !BCC_EOS
19096                                           ! 2214   }
19097                       00004878            .BF:
19098                                           ! 2215 }
19099                       00004878            .BA:
19100                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
19101 4878           8A46         FB            mov	al,-5[bp]
19102 487B           40                         inc	ax
19103 487C           8846         FB            mov	-5[bp],al
19104                       0000487F            .BB:
19105                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
19106 487F           8A46         FB            mov	al,-5[bp]
19107 4882           3A46         0E            cmp	al,$E[bp]
19108 4885         0F82         FF4E            blo 	.BC
19109                       00004889            .C0:
19110                       00004889            .B9:
19111 4889           89EC                       mov	sp,bp
19112 488B           5D                         pop	bp
19113 488C           C3                         ret
19114                                           ! 2216 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
19115                                           ! Register BX used in function vgamem_copy_cga
19116                                           ! 2217 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
19117                       0000488D            _vgamem_fill_cga:
19118                                           !BCC_EOS
19119                                           !BCC_EOS
19120                                           !BCC_EOS
19121                                           !BCC_EOS
19122                                           !BCC_EOS
19123                                           !BCC_EOS
19124                                           ! 2218 {
19125                                           ! 2219  Bit16u dest;
19126                                           !BCC_EOS
19127                                           ! 2220  Bit8u i;
19128                                           !BCC_EOS
19129                                           ! 2221  dest=((ystart*cheight*nbcols)>>1)+xstart;
19130 488D           55                         push	bp
19131 488E           89E5                       mov	bp,sp
19132 4890           83C4                   FC  add	sp,*-4
19133                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19134 4893           8A46         0C            mov	al,$C[bp]
19135 4896           30E4                       xor	ah,ah
19136 4898           89C3                       mov	bx,ax
19137 489A           8A46         06            mov	al,6[bp]
19138 489D           30E4                       xor	ah,ah
19139 489F           89D9                       mov	cx,bx
19140 48A1           F7E9                       imul	cx
19141                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19142 48A3           89C3                       mov	bx,ax
19143 48A5           8A46         0A            mov	al,$A[bp]
19144 48A8           30E4                       xor	ah,ah
19145 48AA           93                         xchg	ax,bx
19146 48AB           89D9                       mov	cx,bx
19147 48AD           F7E9                       imul	cx
19148                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19149 48AF           D1E8                       shr	ax,*1
19150                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19151 48B1           0246         04            add	al,4[bp]
19152 48B4           80D4                   00  adc	ah,*0
19153                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19154 48B7           8946         FE            mov	-2[bp],ax
19155                                           !BCC_EOS
19156                                           ! 2222  for(i=0;i<cheight;i++)
19157                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19158 48BA           30C0                       xor	al,al
19159 48BC           8846         FD            mov	-3[bp],al
19160                                           !BCC_EOS
19161                                           !BCC_EOS
19162                                           ! 2223   {
19163 48BF           EB           75            jmp .C3
19164                       000048C1            .C4:
19165                                           ! 2224    if (i & 1)
19166                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
19167 48C1           8A46         FD            mov	al,-3[bp]
19168 48C4           24                     01  and	al,*1
19169 48C6           84C0                       test	al,al
19170 48C8           74           38            je  	.C5
19171                       000048CA            .C6:
19172                                           ! 2225      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
19173                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19174 48CA           8A46         08            mov	al,8[bp]
19175 48CD           30E4                       xor	ah,ah
19176 48CF           50                         push	ax
19177                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19178 48D0           8A46         0E            mov	al,$E[bp]
19179 48D3           30E4                       xor	ah,ah
19180 48D5           50                         push	ax
19181                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19182 48D6           8A46         FD            mov	al,-3[bp]
19183 48D9           30E4                       xor	ah,ah
19184 48DB           D1E8                       shr	ax,*1
19185                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19186 48DD           89C3                       mov	bx,ax
19187 48DF           8A46         0A            mov	al,$A[bp]
19188 48E2           30E4                       xor	ah,ah
19189 48E4           93                         xchg	ax,bx
19190 48E5           89D9                       mov	cx,bx
19191 48E7           F7E9                       imul	cx
19192 48E9           50                         push	ax
19193                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
19194                                           ! Debug: expression subtree swapping
19195 48EA           8B46         FE            mov	ax,-2[bp]
19196                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19197 48ED           05                   2000  add	ax,#$2000
19198 48F0           0346         F6            add	ax,-$A[bp]
19199 48F3           44                         inc	sp
19200 48F4           44                         inc	sp
19201                                           ! Debug: list unsigned int = ax+0 (used reg = )
19202 48F5           50                         push	ax
19203                                           ! Debug: list unsigned int = const $B800 (used reg = )
19204 48F6           B8                   B800  mov	ax,#$B800
19205 48F9           50                         push	ax
19206                                           ! Debug: func () void = memsetb+0 (used reg = )
19207 48FA           E8         3244            call	_memsetb
19208 48FD           83C4                   08  add	sp,*8
19209                                           !BCC_EOS
19210                                           ! 2226    else
19211                                           ! 2227      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
19212 4900           EB           2D            jmp .C7
19213                       00004902            .C5:
19214                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19215 4902           8A46         08            mov	al,8[bp]
19216 4905           30E4                       xor	ah,ah
19217 4907           50                         push	ax
19218                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19219 4908           8A46         0E            mov	al,$E[bp]
19220 490B           30E4                       xor	ah,ah
19221 490D           50                         push	ax
19222                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19223 490E           8A46         FD            mov	al,-3[bp]
19224 4911           30E4                       xor	ah,ah
19225 4913           D1E8                       shr	ax,*1
19226                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19227 4915           89C3                       mov	bx,ax
19228 4917           8A46         0A            mov	al,$A[bp]
19229 491A           30E4                       xor	ah,ah
19230 491C           93                         xchg	ax,bx
19231 491D           89D9                       mov	cx,bx
19232 491F           F7E9                       imul	cx
19233                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19234                                           ! Debug: expression subtree swapping
19235 4921           0346         FE            add	ax,-2[bp]
19236                                           ! Debug: list unsigned int = ax+0 (used reg = )
19237 4924           50                         push	ax
19238                                           ! Debug: list unsigned int = const $B800 (used reg = )
19239 4925           B8                   B800  mov	ax,#$B800
19240 4928           50                         push	ax
19241                                           ! Debug: func () void = memsetb+0 (used reg = )
19242 4929           E8         3215            call	_memsetb
19243 492C           83C4                   08  add	sp,*8
19244                                           !BCC_EOS
19245                                           ! 2228   }
19246                       0000492F            .C7:
19247                                           ! 2229 }
19248                       0000492F            .C2:
19249                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19250 492F           8A46         FD            mov	al,-3[bp]
19251 4932           40                         inc	ax
19252 4933           8846         FD            mov	-3[bp],al
19253                       00004936            .C3:
19254                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19255 4936           8A46         FD            mov	al,-3[bp]
19256 4939           3A46         0C            cmp	al,$C[bp]
19257 493C           72           83            jb 	.C4
19258                       0000493E            .C8:
19259                       0000493E            .C1:
19260 493E           89EC                       mov	sp,bp
19261 4940           5D                         pop	bp
19262 4941           C3                         ret
19263                                           ! 2230 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
19264                                           ! Register BX used in function vgamem_fill_cga
19265                                           ! 2231 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
19266                       00004942            _biosfn_scroll:
19267                                           !BCC_EOS
19268                                           !BCC_EOS
19269                                           !BCC_EOS
19270                                           !BCC_EOS
19271                                           !BCC_EOS
19272                                           !BCC_EOS
19273                                           !BCC_EOS
19274                                           !BCC_EOS
19275                                           ! 2232 {
19276                                           ! 2233  Bit8u mode,line,cheight,bpp,cols;
19277                                           !BCC_EOS
19278                                           ! 2234  Bit16u nbcols,nbrows,i;
19279                                           !BCC_EOS
19280                                           ! 2235  Bit16u address;
19281                                           !BCC_EOS
19282                                           ! 2236  if(rul>rlr)return;
19283 4942           55                         push	bp
19284 4943           89E5                       mov	bp,sp
19285 4945           83C4                   F2  add	sp,*-$E
19286                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
19287 4948           8A46         08            mov	al,8[bp]
19288 494B           3A46         0C            cmp	al,$C[bp]
19289 494E           76           04            jbe 	.C9
19290                       00004950            .CA:
19291 4950           89EC                       mov	sp,bp
19292 4952           5D                         pop	bp
19293 4953           C3                         ret
19294                                           !BCC_EOS
19295                                           ! 2237  if(cul>clr)return;
19296                       00004954            .C9:
19297                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
19298 4954           8A46         0A            mov	al,$A[bp]
19299 4957           3A46         0E            cmp	al,$E[bp]
19300 495A           76           04            jbe 	.CB
19301                       0000495C            .CC:
19302 495C           89EC                       mov	sp,bp
19303 495E           5D                         pop	bp
19304 495F           C3                         ret
19305                                           !BCC_EOS
19306                                           ! 2238  mode=read_byte(0x40,0x49);
19307                       00004960            .CB:
19308                                           ! Debug: list int = const $49 (used reg = )
19309 4960           B8                   0049  mov	ax,*$49
19310 4963           50                         push	ax
19311                                           ! Debug: list int = const $40 (used reg = )
19312 4964           B8                   0040  mov	ax,*$40
19313 4967           50                         push	ax
19314                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19315 4968           E8         3280            call	_read_byte
19316 496B           83C4                   04  add	sp,*4
19317                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19318 496E           8846         FF            mov	-1[bp],al
19319                                           !BCC_EOS
19320                                           ! 2239  line=find_vga_entry(mode);
19321                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19322 4971           8A46         FF            mov	al,-1[bp]
19323 4974           30E4                       xor	ah,ah
19324 4976           50                         push	ax
19325                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19326 4977           E8         3185            call	_find_vga_entry
19327 497A           44                         inc	sp
19328 497B           44                         inc	sp
19329                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19330 497C           8846         FE            mov	-2[bp],al
19331                                           !BCC_EOS
19332                                           ! 2240  if(line==0xFF)return;
19333                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19334 497F           8A46         FE            mov	al,-2[bp]
19335 4982           3C                     FF  cmp	al,#$FF
19336 4984           75           04            jne 	.CD
19337                       00004986            .CE:
19338 4986           89EC                       mov	sp,bp
19339 4988           5D                         pop	bp
19340 4989           C3                         ret
19341                                           !BCC_EOS
19342                                           ! 2241  nbrows=read_byte(0x40,0x84)+1;
19343                       0000498A            .CD:
19344                                           ! Debug: list int = const $84 (used reg = )
19345 498A           B8                   0084  mov	ax,#$84
19346 498D           50                         push	ax
19347                                           ! Debug: list int = const $40 (used reg = )
19348 498E           B8                   0040  mov	ax,*$40
19349 4991           50                         push	ax
19350                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19351 4992           E8         3256            call	_read_byte
19352 4995           83C4                   04  add	sp,*4
19353                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19354 4998           30E4                       xor	ah,ah
19355                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19356 499A           40                         inc	ax
19357 499B           8946         F6            mov	-$A[bp],ax
19358                                           !BCC_EOS
19359                                           ! 2242  nbcols=read_word(0x40,0x4A);
19360                                           ! Debug: list int = const $4A (used reg = )
19361 499E           B8                   004A  mov	ax,*$4A
19362 49A1           50                         push	ax
19363                                           ! Debug: list int = const $40 (used reg = )
19364 49A2           B8                   0040  mov	ax,*$40
19365 49A5           50                         push	ax
19366                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19367 49A6           E8         3255            call	_read_word
19368 49A9           83C4                   04  add	sp,*4
19369                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19370 49AC           8946         F8            mov	-8[bp],ax
19371                                           !BCC_EOS
19372                                           ! 2243  if(page==0xFF)
19373                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19374 49AF           8A46         10            mov	al,$10[bp]
19375 49B2           3C                     FF  cmp	al,#$FF
19376 49B4           75           11            jne 	.CF
19377                       000049B6            .D0:
19378                                           ! 2244   page=read_byte(0x40,0x62);
19379                                           ! Debug: list int = const $62 (used reg = )
19380 49B6           B8                   0062  mov	ax,*$62
19381 49B9           50                         push	ax
19382                                           ! Debug: list int = const $40 (used reg = )
19383 49BA           B8                   0040  mov	ax,*$40
19384 49BD           50                         push	ax
19385                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19386 49BE           E8         322A            call	_read_byte
19387 49C1           83C4                   04  add	sp,*4
19388                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19389 49C4           8846         10            mov	$10[bp],al
19390                                           !BCC_EOS
19391                                           ! 2245  if(rlr>=nbrows)rlr=nbrows-1;
19392                       000049C7            .CF:
19393                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19394 49C7           8A46         0C            mov	al,$C[bp]
19395 49CA           30E4                       xor	ah,ah
19396 49CC           3B46         F6            cmp	ax,-$A[bp]
19397 49CF           72           07            jb  	.D1
19398                       000049D1            .D2:
19399                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19400 49D1           8B46         F6            mov	ax,-$A[bp]
19401                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19402 49D4           48                         dec	ax
19403 49D5           8846         0C            mov	$C[bp],al
19404                                           !BCC_EOS
19405                                           ! 2246  if(clr>=nbcols)clr=nbcols-1;
19406                       000049D8            .D1:
19407                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19408 49D8           8A46         0E            mov	al,$E[bp]
19409 49DB           30E4                       xor	ah,ah
19410 49DD           3B46         F8            cmp	ax,-8[bp]
19411 49E0           72           07            jb  	.D3
19412                       000049E2            .D4:
19413                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19414 49E2           8B46         F8            mov	ax,-8[bp]
19415                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19416 49E5           48                         dec	ax
19417 49E6           8846         0E            mov	$E[bp],al
19418                                           !BCC_EOS
19419                                           ! 2247  if(nblines>nbrows)nblines=0;
19420                       000049E9            .D3:
19421                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19422 49E9           8A46         04            mov	al,4[bp]
19423 49EC           30E4                       xor	ah,ah
19424 49EE           3B46         F6            cmp	ax,-$A[bp]
19425 49F1           76           05            jbe 	.D5
19426                       000049F3            .D6:
19427                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19428 49F3           30C0                       xor	al,al
19429 49F5           8846         04            mov	4[bp],al
19430                                           !BCC_EOS
19431                                           ! 2248  cols=clr-cul+1;
19432                       000049F8            .D5:
19433                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19434 49F8           8A46         0E            mov	al,$E[bp]
19435 49FB           30E4                       xor	ah,ah
19436 49FD           2A46         0A            sub	al,$A[bp]
19437 4A00           80DC                   00  sbb	ah,*0
19438                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19439                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19440 4A03           40                         inc	ax
19441 4A04           8846         FB            mov	-5[bp],al
19442                                           !BCC_EOS
19443                                           ! 2249  if(vga_modes[line].class==0x00)
19444                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19445 4A07           8A46         FE            mov	al,-2[bp]
19446 4A0A           30E4                       xor	ah,ah
19447 4A0C           B1                     03  mov	cl,*3
19448 4A0E           D3E0                       shl	ax,cl
19449 4A10           89C3                       mov	bx,ax
19450 4A12           81C3                 01FD  add	bx,#_vga_modes
19451                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19452 4A16           8A47         01            mov	al,1[bx]
19453 4A19           84C0                       test	al,al
19454 4A1B         0F85         0250            bne 	.D7
19455                       00004A1F            .D8:
19456                                           ! 2250   {
19457                                           ! 2251    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19458                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19459 4A1F           8B46         F8            mov	ax,-8[bp]
19460 4A22           8B4E         F6            mov	cx,-$A[bp]
19461 4A25           F7E9                       imul	cx
19462                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19463 4A27           D1E0                       shl	ax,*1
19464                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19465 4A29           0C                     FF  or	al,#$FF
19466                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19467                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19468 4A2B           89C3                       mov	bx,ax
19469 4A2D           8A46         10            mov	al,$10[bp]
19470 4A30           30E4                       xor	ah,ah
19471 4A32           93                         xchg	ax,bx
19472 4A33           40                         inc	ax
19473 4A34           89D9                       mov	cx,bx
19474 4A36           F7E9                       imul	cx
19475                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19476 4A38           8946         F2            mov	-$E[bp],ax
19477                                           !BCC_EOS
19478                                           ! 2252    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19479                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19480 4A3B           8A46         04            mov	al,4[bp]
19481 4A3E           84C0                       test	al,al
19482 4A40           75           67            jne 	.D9
19483                       00004A42            .DE:
19484                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19485 4A42           8A46         08            mov	al,8[bp]
19486 4A45           84C0                       test	al,al
19487 4A47           75           60            jne 	.D9
19488                       00004A49            .DD:
19489                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19490 4A49           8A46         0A            mov	al,$A[bp]
19491 4A4C           84C0                       test	al,al
19492 4A4E           75           59            jne 	.D9
19493                       00004A50            .DC:
19494                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19495 4A50           8B46         F6            mov	ax,-$A[bp]
19496                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19497                                           ! Debug: expression subtree swapping
19498 4A53           48                         dec	ax
19499 4A54           50                         push	ax
19500 4A55           8A46         0C            mov	al,$C[bp]
19501 4A58           30E4                       xor	ah,ah
19502 4A5A           3B46         F0            cmp	ax,-$10[bp]
19503 4A5D           8D66         F2            lea	sp,-$E[bp]
19504 4A60           75           47            jne 	.D9
19505                       00004A62            .DB:
19506                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19507 4A62           8B46         F8            mov	ax,-8[bp]
19508                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19509                                           ! Debug: expression subtree swapping
19510 4A65           48                         dec	ax
19511 4A66           50                         push	ax
19512 4A67           8A46         0E            mov	al,$E[bp]
19513 4A6A           30E4                       xor	ah,ah
19514 4A6C           3B46         F0            cmp	ax,-$10[bp]
19515 4A6F           8D66         F2            lea	sp,-$E[bp]
19516 4A72           75           35            jne 	.D9
19517                       00004A74            .DA:
19518                                           ! 2253     {
19519                                           ! 2254      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19520                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19521 4A74           8B46         F6            mov	ax,-$A[bp]
19522 4A77           8B4E         F8            mov	cx,-8[bp]
19523 4A7A           F7E9                       imul	cx
19524                                           ! Debug: list unsigned int = ax+0 (used reg = )
19525 4A7C           50                         push	ax
19526                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19527 4A7D           8A46         06            mov	al,6[bp]
19528 4A80           30E4                       xor	ah,ah
19529                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19530 4A82           B9                   0100  mov	cx,#$100
19531 4A85           F7E9                       imul	cx
19532                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19533                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19534 4A87           05                   0020  add	ax,*$20
19535 4A8A           50                         push	ax
19536                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19537 4A8B           FF76         F2            push	-$E[bp]
19538                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19539 4A8E           8A46         FE            mov	al,-2[bp]
19540 4A91           30E4                       xor	ah,ah
19541 4A93           B1                     03  mov	cl,*3
19542 4A95           D3E0                       shl	ax,cl
19543 4A97           89C3                       mov	bx,ax
19544 4A99           81C3                 01FD  add	bx,#_vga_modes
19545                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19546 4A9D           FF77         04            push	4[bx]
19547                                           ! Debug: func () void = memsetw+0 (used reg = )
19548 4AA0           E8         30C3            call	_memsetw
19549 4AA3           83C4                   08  add	sp,*8
19550                                           !BCC_EOS
19551                                           ! 2255     }
19552                                           ! 2256    else
19553                                           ! 2257     {
19554 4AA6           E9         01C3            br 	.DF
19555                       00004AA9            .D9:
19556                                           ! 2258      if(dir==1)
19557                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19558 4AA9           8A46         12            mov	al,$12[bp]
19559 4AAC           3C                     01  cmp	al,*1
19560 4AAE         0F85         00DC            bne 	.E0
19561                       00004AB2            .E1:
19562                                           ! 2259       {for(i=rul;i<=rlr;i++)
19563                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19564 4AB2           8A46         08            mov	al,8[bp]
19565 4AB5           30E4                       xor	ah,ah
19566 4AB7           8946         F4            mov	-$C[bp],ax
19567                                           !BCC_EOS
19568                                           !BCC_EOS
19569                                           ! 2260         {
19570 4ABA           E9         00C2            br 	.E4
19571                       00004ABD            .E5:
19572                                           ! 2261          if((i+nblines>rlr)||(nblines==0))
19573                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19574 4ABD           8B46         F4            mov	ax,-$C[bp]
19575 4AC0           0246         04            add	al,4[bp]
19576 4AC3           80D4                   00  adc	ah,*0
19577                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19578 4AC6           50                         push	ax
19579 4AC7           8A46         0C            mov	al,$C[bp]
19580 4ACA           30E4                       xor	ah,ah
19581 4ACC           3B46         F0            cmp	ax,-$10[bp]
19582 4ACF           8D66         F2            lea	sp,-$E[bp]
19583 4AD2           72           07            jb  	.E7
19584                       00004AD4            .E8:
19585                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19586 4AD4           8A46         04            mov	al,4[bp]
19587 4AD7           84C0                       test	al,al
19588 4AD9           75           42            jne 	.E6
19589                       00004ADB            .E7:
19590                                           ! 2262           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19591                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19592 4ADB           8A46         FB            mov	al,-5[bp]
19593 4ADE           30E4                       xor	ah,ah
19594 4AE0           50                         push	ax
19595                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19596 4AE1           8A46         06            mov	al,6[bp]
19597 4AE4           30E4                       xor	ah,ah
19598                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19599 4AE6           B9                   0100  mov	cx,#$100
19600 4AE9           F7E9                       imul	cx
19601                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19602                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19603 4AEB           05                   0020  add	ax,*$20
19604 4AEE           50                         push	ax
19605                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19606 4AEF           8B46         F4            mov	ax,-$C[bp]
19607 4AF2           8B4E         F8            mov	cx,-8[bp]
19608 4AF5           F7E9                       imul	cx
19609                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19610 4AF7           0246         0A            add	al,$A[bp]
19611 4AFA           80D4                   00  adc	ah,*0
19612                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19613 4AFD           D1E0                       shl	ax,*1
19614                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19615                                           ! Debug: expression subtree swapping
19616 4AFF           0346         F2            add	ax,-$E[bp]
19617                                           ! Debug: list unsigned int = ax+0 (used reg = )
19618 4B02           50                         push	ax
19619                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19620 4B03           8A46         FE            mov	al,-2[bp]
19621 4B06           30E4                       xor	ah,ah
19622 4B08           B1                     03  mov	cl,*3
19623 4B0A           D3E0                       shl	ax,cl
19624 4B0C           89C3                       mov	bx,ax
19625 4B0E           81C3                 01FD  add	bx,#_vga_modes
19626                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19627 4B12           FF77         04            push	4[bx]
19628                                           ! Debug: func () void = memsetw+0 (used reg = )
19629 4B15           E8         304E            call	_memsetw
19630 4B18           83C4                   08  add	sp,*8
19631                                           !BCC_EOS
19632                                           ! 2263          else
19633                                           ! 2264           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19634 4B1B           EB           5B            jmp .E9
19635                       00004B1D            .E6:
19636                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19637 4B1D           8A46         FB            mov	al,-5[bp]
19638 4B20           30E4                       xor	ah,ah
19639 4B22           50                         push	ax
19640                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19641 4B23           8B46         F4            mov	ax,-$C[bp]
19642 4B26           0246         04            add	al,4[bp]
19643 4B29           80D4                   00  adc	ah,*0
19644                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19645 4B2C           8B4E         F8            mov	cx,-8[bp]
19646 4B2F           F7E9                       imul	cx
19647                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19648 4B31           0246         0A            add	al,$A[bp]
19649 4B34           80D4                   00  adc	ah,*0
19650                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19651 4B37           D1E0                       shl	ax,*1
19652                                           ! Debug: list unsigned int = ax+0 (used reg = )
19653 4B39           50                         push	ax
19654                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19655 4B3A           8A46         FE            mov	al,-2[bp]
19656 4B3D           30E4                       xor	ah,ah
19657 4B3F           B1                     03  mov	cl,*3
19658 4B41           D3E0                       shl	ax,cl
19659 4B43           89C3                       mov	bx,ax
19660 4B45           81C3                 01FD  add	bx,#_vga_modes
19661                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19662 4B49           FF77         04            push	4[bx]
19663                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19664 4B4C           8B46         F4            mov	ax,-$C[bp]
19665 4B4F           8B4E         F8            mov	cx,-8[bp]
19666 4B52           F7E9                       imul	cx
19667                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19668 4B54           0246         0A            add	al,$A[bp]
19669 4B57           80D4                   00  adc	ah,*0
19670                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19671 4B5A           D1E0                       shl	ax,*1
19672                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19673                                           ! Debug: expression subtree swapping
19674 4B5C           0346         F2            add	ax,-$E[bp]
19675                                           ! Debug: list unsigned int = ax+0 (used reg = )
19676 4B5F           50                         push	ax
19677                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19678 4B60           8A46         FE            mov	al,-2[bp]
19679 4B63           30E4                       xor	ah,ah
19680 4B65           B1                     03  mov	cl,*3
19681 4B67           D3E0                       shl	ax,cl
19682 4B69           89C3                       mov	bx,ax
19683 4B6B           81C3                 01FD  add	bx,#_vga_modes
19684                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19685 4B6F           FF77         04            push	4[bx]
19686                                           ! Debug: func () void = memcpyw+0 (used reg = )
19687 4B72           E8         3046            call	_memcpyw
19688 4B75           83C4                   0A  add	sp,*$A
19689                                           !BCC_EOS
19690                                           ! 2265         }
19691                       00004B78            .E9:
19692                                           ! 2266       }
19693                       00004B78            .E3:
19694                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19695 4B78           8B46         F4            mov	ax,-$C[bp]
19696 4B7B           40                         inc	ax
19697 4B7C           8946         F4            mov	-$C[bp],ax
19698                       00004B7F            .E4:
19699                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19700 4B7F           8A46         0C            mov	al,$C[bp]
19701 4B82           30E4                       xor	ah,ah
19702 4B84           3B46         F4            cmp	ax,-$C[bp]
19703 4B87         0F83         FF32            bhis	.E5
19704                       00004B8B            .EA:
19705                       00004B8B            .E2:
19706                                           ! 2267      else
19707                                           ! 2268       {for(i=rlr;i>=rul;i--)
19708 4B8B           E9         00DE            br 	.EB
19709                       00004B8E            .E0:
19710                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19711 4B8E           8A46         0C            mov	al,$C[bp]
19712 4B91           30E4                       xor	ah,ah
19713 4B93           8946         F4            mov	-$C[bp],ax
19714                                           !BCC_EOS
19715                                           !BCC_EOS
19716                                           ! 2269    
19717                                           ! 2269      {
19718 4B96           E9         00C7            br 	.EE
19719                       00004B99            .EF:
19720                                           ! 2270          if((i<rul+nblines)||(nblines==0))
19721                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19722 4B99           8A46         08            mov	al,8[bp]
19723 4B9C           30E4                       xor	ah,ah
19724 4B9E           0246         04            add	al,4[bp]
19725 4BA1           80D4                   00  adc	ah,*0
19726                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19727 4BA4           3B46         F4            cmp	ax,-$C[bp]
19728 4BA7           77           07            ja  	.F1
19729                       00004BA9            .F2:
19730                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19731 4BA9           8A46         04            mov	al,4[bp]
19732 4BAC           84C0                       test	al,al
19733 4BAE           75           42            jne 	.F0
19734                       00004BB0            .F1:
19735                                           ! 2271           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19736                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19737 4BB0           8A46         FB            mov	al,-5[bp]
19738 4BB3           30E4                       xor	ah,ah
19739 4BB5           50                         push	ax
19740                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19741 4BB6           8A46         06            mov	al,6[bp]
19742 4BB9           30E4                       xor	ah,ah
19743                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19744 4BBB           B9                   0100  mov	cx,#$100
19745 4BBE           F7E9                       imul	cx
19746                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19747                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19748 4BC0           05                   0020  add	ax,*$20
19749 4BC3           50                         push	ax
19750                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19751 4BC4           8B46         F4            mov	ax,-$C[bp]
19752 4BC7           8B4E         F8            mov	cx,-8[bp]
19753 4BCA           F7E9                       imul	cx
19754                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19755 4BCC           0246         0A            add	al,$A[bp]
19756 4BCF           80D4                   00  adc	ah,*0
19757                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19758 4BD2           D1E0                       shl	ax,*1
19759                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19760                                           ! Debug: expression subtree swapping
19761 4BD4           0346         F2            add	ax,-$E[bp]
19762                                           ! Debug: list unsigned int = ax+0 (used reg = )
19763 4BD7           50                         push	ax
19764                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19765 4BD8           8A46         FE            mov	al,-2[bp]
19766 4BDB           30E4                       xor	ah,ah
19767 4BDD           B1                     03  mov	cl,*3
19768 4BDF           D3E0                       shl	ax,cl
19769 4BE1           89C3                       mov	bx,ax
19770 4BE3           81C3                 01FD  add	bx,#_vga_modes
19771                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19772 4BE7           FF77         04            push	4[bx]
19773                                           ! Debug: func () void = memsetw+0 (used reg = )
19774 4BEA           E8         2F79            call	_memsetw
19775 4BED           83C4                   08  add	sp,*8
19776                                           !BCC_EOS
19777                                           ! 2272          else
19778                                           ! 2273           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19779 4BF0           EB           5B            jmp .F3
19780                       00004BF2            .F0:
19781                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19782 4BF2           8A46         FB            mov	al,-5[bp]
19783 4BF5           30E4                       xor	ah,ah
19784 4BF7           50                         push	ax
19785                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19786 4BF8           8B46         F4            mov	ax,-$C[bp]
19787 4BFB           2A46         04            sub	al,4[bp]
19788 4BFE           80DC                   00  sbb	ah,*0
19789                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19790 4C01           8B4E         F8            mov	cx,-8[bp]
19791 4C04           F7E9                       imul	cx
19792                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19793 4C06           0246         0A            add	al,$A[bp]
19794 4C09           80D4                   00  adc	ah,*0
19795                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19796 4C0C           D1E0                       shl	ax,*1
19797                                           ! Debug: list unsigned int = ax+0 (used reg = )
19798 4C0E           50                         push	ax
19799                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19800 4C0F           8A46         FE            mov	al,-2[bp]
19801 4C12           30E4                       xor	ah,ah
19802 4C14           B1                     03  mov	cl,*3
19803 4C16           D3E0                       shl	ax,cl
19804 4C18           89C3                       mov	bx,ax
19805 4C1A           81C3                 01FD  add	bx,#_vga_modes
19806                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19807 4C1E           FF77         04            push	4[bx]
19808                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19809 4C21           8B46         F4            mov	ax,-$C[bp]
19810 4C24           8B4E         F8            mov	cx,-8[bp]
19811 4C27           F7E9                       imul	cx
19812                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19813 4C29           0246         0A            add	al,$A[bp]
19814 4C2C           80D4                   00  adc	ah,*0
19815                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19816 4C2F           D1E0                       shl	ax,*1
19817                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19818                                           ! Debug: expression subtree swapping
19819 4C31           0346         F2            add	ax,-$E[bp]
19820                                           ! Debug: list unsigned int = ax+0 (used reg = )
19821 4C34           50                         push	ax
19822                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19823 4C35           8A46         FE            mov	al,-2[bp]
19824 4C38           30E4                       xor	ah,ah
19825 4C3A           B1                     03  mov	cl,*3
19826 4C3C           D3E0                       shl	ax,cl
19827 4C3E           89C3                       mov	bx,ax
19828 4C40           81C3                 01FD  add	bx,#_vga_modes
19829                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19830 4C44           FF77         04            push	4[bx]
19831                                           ! Debug: func () void = memcpyw+0 (used reg = )
19832 4C47           E8         2F71            call	_memcpyw
19833 4C4A           83C4                   0A  add	sp,*$A
19834                                           !BCC_EOS
19835                                           ! 2274          if (i>rlr) break;
19836                       00004C4D            .F3:
19837                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19838 4C4D           8A46         0C            mov	al,$C[bp]
19839 4C50           30E4                       xor	ah,ah
19840 4C52           3B46         F4            cmp	ax,-$C[bp]
19841 4C55           73           02            jae 	.F4
19842                       00004C57            .F5:
19843 4C57           EB           13            jmp .EC
19844                                           !BCC_EOS
19845                                           ! 2275         }
19846                       00004C59            .F4:
19847                                           ! 2276       }
19848                       00004C59            .ED:
19849                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19850 4C59           8B46         F4            mov	ax,-$C[bp]
19851 4C5C           48                         dec	ax
19852 4C5D           8946         F4            mov	-$C[bp],ax
19853                       00004C60            .EE:
19854                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19855 4C60           8A46         08            mov	al,8[bp]
19856 4C63           30E4                       xor	ah,ah
19857 4C65           3B46         F4            cmp	ax,-$C[bp]
19858 4C68         0F86         FF2D            blos	.EF
19859                       00004C6C            .F6:
19860                       00004C6C            .EC:
19861                                           ! 2277     }
19862                       00004C6C            .EB:
19863                                           ! 2278   }
19864                       00004C6C            .DF:
19865                                           ! 2279  else
19866                                           ! 2280   {
19867 4C6C           E9         03D5            br 	.F7
19868                       00004C6F            .D7:
19869                                           ! 2281    cheight=video_param_table[line_to_vpti[line]].cheight;
19870                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19871 4C6F           8A46         FE            mov	al,-2[bp]
19872 4C72           30E4                       xor	ah,ah
19873 4C74           89C3                       mov	bx,ax
19874                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19875 4C76           8A87       027D            mov	al,_line_to_vpti[bx]
19876 4C7A           30E4                       xor	ah,ah
19877 4C7C           B1                     06  mov	cl,*6
19878 4C7E           D3E0                       shl	ax,cl
19879 4C80           89C3                       mov	bx,ax
19880 4C82           81C3                 0291  add	bx,#_video_param_table
19881                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19882 4C86           8A47         02            mov	al,2[bx]
19883 4C89           8846         FD            mov	-3[bp],al
19884                                           !BCC_EOS
19885                                           ! 2282    switch(vga_modes[line].memmodel)
19886                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19887 4C8C           8A46         FE            mov	al,-2[bp]
19888 4C8F           30E4                       xor	ah,ah
19889 4C91           B1                     03  mov	cl,*3
19890 4C93           D3E0                       shl	ax,cl
19891 4C95           89C3                       mov	bx,ax
19892 4C97           81C3                 01FD  add	bx,#_vga_modes
19893 4C9B           8A47         02            mov	al,2[bx]
19894                                           ! 2283     {
19895 4C9E           E9         0391            br 	.FA
19896                                           ! 2284      case 0x04:
19897                                           ! 2285      case 0x03:
19898                       00004CA1            .FB:
19899                                           ! 2286        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19900                       00004CA1            .FC:
19901                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19902 4CA1           8A46         04            mov	al,4[bp]
19903 4CA4           84C0                       test	al,al
19904 4CA6         0F85         0089            bne 	.FD
19905                       00004CAA            .102:
19906                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19907 4CAA           8A46         08            mov	al,8[bp]
19908 4CAD           84C0                       test	al,al
19909 4CAF         0F85         0080            bne 	.FD
19910                       00004CB3            .101:
19911                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19912 4CB3           8A46         0A            mov	al,$A[bp]
19913 4CB6           84C0                       test	al,al
19914 4CB8           75           79            jne 	.FD
19915                       00004CBA            .100:
19916                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19917 4CBA           8B46         F6            mov	ax,-$A[bp]
19918                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19919                                           ! Debug: expression subtree swapping
19920 4CBD           48                         dec	ax
19921 4CBE           50                         push	ax
19922 4CBF           8A46         0C            mov	al,$C[bp]
19923 4CC2           30E4                       xor	ah,ah
19924 4CC4           3B46         F0            cmp	ax,0+..FFFC[bp]
19925 4CC7           8D66         F2            lea	sp,2+..FFFC[bp]
19926 4CCA           75           67            jne 	.FD
19927                       00004CCC            .FF:
19928                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19929 4CCC           8B46         F8            mov	ax,-8[bp]
19930                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19931                                           ! Debug: expression subtree swapping
19932 4CCF           48                         dec	ax
19933 4CD0           50                         push	ax
19934 4CD1           8A46         0E            mov	al,$E[bp]
19935 4CD4           30E4                       xor	ah,ah
19936 4CD6           3B46         F0            cmp	ax,0+..FFFC[bp]
19937 4CD9           8D66         F2            lea	sp,2+..FFFC[bp]
19938 4CDC           75           55            jne 	.FD
19939                       00004CDE            .FE:
19940                                           ! 2287         {
19941                                           ! 2288          outw(0x3ce, 0x0205);
19942                                           ! Debug: list int = const $205 (used reg = )
19943 4CDE           B8                   0205  mov	ax,#$205
19944 4CE1           50                         push	ax
19945                                           ! Debug: list int = const $3CE (used reg = )
19946 4CE2           B8                   03CE  mov	ax,#$3CE
19947 4CE5           50                         push	ax
19948                                           ! Debug: func () void = outw+0 (used reg = )
19949 4CE6           E8         2F7E            call	_outw
19950 4CE9           83C4                   04  add	sp,*4
19951                                           !BCC_EOS
19952                                           ! 2289          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
19953                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19954 4CEC           8B46         F6            mov	ax,-$A[bp]
19955 4CEF           8B4E         F8            mov	cx,-8[bp]
19956 4CF2           F7E9                       imul	cx
19957                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19958 4CF4           89C3                       mov	bx,ax
19959 4CF6           8A46         FD            mov	al,-3[bp]
19960 4CF9           30E4                       xor	ah,ah
19961 4CFB           93                         xchg	ax,bx
19962 4CFC           89D9                       mov	cx,bx
19963 4CFE           F7E9                       imul	cx
19964                                           ! Debug: list unsigned int = ax+0 (used reg = )
19965 4D00           50                         push	ax
19966                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19967 4D01           8A46         06            mov	al,6[bp]
19968 4D04           30E4                       xor	ah,ah
19969 4D06           50                         push	ax
19970                                           ! Debug: list int = const 0 (used reg = )
19971 4D07           31C0                       xor	ax,ax
19972 4D09           50                         push	ax
19973                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19974 4D0A           8A46         FE            mov	al,-2[bp]
19975 4D0D           30E4                       xor	ah,ah
19976 4D0F           B1                     03  mov	cl,*3
19977 4D11           D3E0                       shl	ax,cl
19978 4D13           89C3                       mov	bx,ax
19979 4D15           81C3                 01FD  add	bx,#_vga_modes
19980                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19981 4D19           FF77         04            push	4[bx]
19982                                           ! Debug: func () void = memsetb+0 (used reg = )
19983 4D1C           E8         2E22            call	_memsetb
19984 4D1F           83C4                   08  add	sp,*8
19985                                           !BCC_EOS
19986                                           ! 2290          outw(0x3ce, 0x0005);
19987                                           ! Debug: list int = const 5 (used reg = )
19988 4D22           B8                   0005  mov	ax,*5
19989 4D25           50                         push	ax
19990                                           ! Debug: list int = const $3CE (used reg = )
19991 4D26           B8                   03CE  mov	ax,#$3CE
19992 4D29           50                         push	ax
19993                                           ! Debug: func () void = outw+0 (used reg = )
19994 4D2A           E8         2F3A            call	_outw
19995 4D2D           83C4                   04  add	sp,*4
19996                                           !BCC_EOS
19997                                           ! 2291         }
19998                                           ! 2292        else
19999                                           ! 2293         {
20000 4D30           E9         0121            br 	.103
20001                       00004D33            .FD:
20002                                           ! 2294          if(dir==1)
20003                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20004 4D33           8A46         12            mov	al,$12[bp]
20005 4D36           3C                     01  cmp	al,*1
20006 4D38         0F85         008A            bne 	.104
20007                       00004D3C            .105:
20008                                           ! 2295           {for(i=rul;i<=rlr;i++)
20009                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20010 4D3C           8A46         08            mov	al,8[bp]
20011 4D3F           30E4                       xor	ah,ah
20012 4D41           8946         F4            mov	-$C[bp],ax
20013                                           !BCC_EOS
20014                                           !BCC_EOS
20015                                           ! 2296             {
20016 4D44           EB           73            jmp .108
20017                       00004D46            .109:
20018                                           ! 2297              if((i+nblines>rlr)||(nblines==0))
20019                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20020 4D46           8B46         F4            mov	ax,-$C[bp]
20021 4D49           0246         04            add	al,4[bp]
20022 4D4C           80D4                   00  adc	ah,*0
20023                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20024 4D4F           50                         push	ax
20025 4D50           8A46         0C            mov	al,$C[bp]
20026 4D53           30E4                       xor	ah,ah
20027 4D55           3B46         F0            cmp	ax,0+..FFFC[bp]
20028 4D58           8D66         F2            lea	sp,2+..FFFC[bp]
20029 4D5B           72           07            jb  	.10B
20030                       00004D5D            .10C:
20031                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20032 4D5D           8A46         04            mov	al,4[bp]
20033 4D60           84C0                       test	al,al
20034 4D62           75           26            jne 	.10A
20035                       00004D64            .10B:
20036                                           ! 2298               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20037                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20038 4D64           8A46         06            mov	al,6[bp]
20039 4D67           30E4                       xor	ah,ah
20040 4D69           50                         push	ax
20041                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20042 4D6A           8A46         FD            mov	al,-3[bp]
20043 4D6D           30E4                       xor	ah,ah
20044 4D6F           50                         push	ax
20045                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20046 4D70           FF76         F8            push	-8[bp]
20047                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20048 4D73           8A46         FB            mov	al,-5[bp]
20049 4D76           30E4                       xor	ah,ah
20050 4D78           50                         push	ax
20051                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20052 4D79           FF76         F4            push	-$C[bp]
20053                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20054 4D7C           8A46         0A            mov	al,$A[bp]
20055 4D7F           30E4                       xor	ah,ah
20056 4D81           50                         push	ax
20057                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20058 4D82           E8         F96B            call	_vgamem_fill_pl4
20059 4D85           83C4                   0C  add	sp,*$C
20060                                           !BCC_EOS
20061                                           ! 2299              else
20062                                           ! 2300               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
20063 4D88           EB           28            jmp .10D
20064                       00004D8A            .10A:
20065                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20066 4D8A           8A46         FD            mov	al,-3[bp]
20067 4D8D           30E4                       xor	ah,ah
20068 4D8F           50                         push	ax
20069                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20070 4D90           FF76         F8            push	-8[bp]
20071                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20072 4D93           8A46         FB            mov	al,-5[bp]
20073 4D96           30E4                       xor	ah,ah
20074 4D98           50                         push	ax
20075                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20076 4D99           FF76         F4            push	-$C[bp]
20077                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20078 4D9C           8B46         F4            mov	ax,-$C[bp]
20079 4D9F           0246         04            add	al,4[bp]
20080 4DA2           80D4                   00  adc	ah,*0
20081                                           ! Debug: list unsigned int = ax+0 (used reg = )
20082 4DA5           50                         push	ax
20083                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20084 4DA6           8A46         0A            mov	al,$A[bp]
20085 4DA9           30E4                       xor	ah,ah
20086 4DAB           50                         push	ax
20087                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20088 4DAC           E8         F87F            call	_vgamem_copy_pl4
20089 4DAF           83C4                   0C  add	sp,*$C
20090                                           !BCC_EOS
20091                                           ! 2301             }
20092                       00004DB2            .10D:
20093                                           ! 2302           }
20094                       00004DB2            .107:
20095                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20096 4DB2           8B46         F4            mov	ax,-$C[bp]
20097 4DB5           40                         inc	ax
20098 4DB6           8946         F4            mov	-$C[bp],ax
20099                       00004DB9            .108:
20100                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20101 4DB9           8A46         0C            mov	al,$C[bp]
20102 4DBC           30E4                       xor	ah,ah
20103 4DBE           3B46         F4            cmp	ax,-$C[bp]
20104 4DC1           73           83            jae	.109
20105                       00004DC3            .10E:
20106                       00004DC3            .106:
20107                                           ! 2303          else
20108                                           ! 2304           {for(i=rlr;i>=rul;i--)
20109 4DC3           E9         008E            br 	.10F
20110                       00004DC6            .104:
20111                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20112 4DC6           8A46         0C            mov	al,$C[bp]
20113 4DC9           30E4                       xor	ah,ah
20114 4DCB           8946         F4            mov	-$C[bp],ax
20115                                           !BCC_EOS
20116                                           !BCC_EOS
20117                                           ! 2305             {
20118 4DCE           EB           78            jmp .112
20119                       00004DD0            .113:
20120                                           ! 2306              if((i<rul+nblines)||(nblines==0))
20121                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20122 4DD0           8A46         08            mov	al,8[bp]
20123 4DD3           30E4                       xor	ah,ah
20124 4DD5           0246         04            add	al,4[bp]
20125 4DD8           80D4                   00  adc	ah,*0
20126                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20127 4DDB           3B46         F4            cmp	ax,-$C[bp]
20128 4DDE           77           07            ja  	.115
20129                       00004DE0            .116:
20130                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20131 4DE0           8A46         04            mov	al,4[bp]
20132 4DE3           84C0                       test	al,al
20133 4DE5           75           26            jne 	.114
20134                       00004DE7            .115:
20135                                           ! 2307               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20136                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20137 4DE7           8A46         06            mov	al,6[bp]
20138 4DEA           30E4                       xor	ah,ah
20139 4DEC           50                         push	ax
20140                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20141 4DED           8A46         FD            mov	al,-3[bp]
20142 4DF0           30E4                       xor	ah,ah
20143 4DF2           50                         push	ax
20144                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20145 4DF3           FF76         F8            push	-8[bp]
20146                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20147 4DF6           8A46         FB            mov	al,-5[bp]
20148 4DF9           30E4                       xor	ah,ah
20149 4DFB           50                         push	ax
20150                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20151 4DFC           FF76         F4            push	-$C[bp]
20152                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20153 4DFF           8A46         0A            mov	al,$A[bp]
20154 4E02           30E4                       xor	ah,ah
20155 4E04           50                         push	ax
20156                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20157 4E05           E8         F8E8            call	_vgamem_fill_pl4
20158 4E08           83C4                   0C  add	sp,*$C
20159                                           !BCC_EOS
20160                                           ! 2308              else
20161                                           ! 2309               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
20162 4E0B           EB           28            jmp .117
20163                       00004E0D            .114:
20164                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20165 4E0D           8A46         FD            mov	al,-3[bp]
20166 4E10           30E4                       xor	ah,ah
20167 4E12           50                         push	ax
20168                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20169 4E13           FF76         F8            push	-8[bp]
20170                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20171 4E16           8A46         FB            mov	al,-5[bp]
20172 4E19           30E4                       xor	ah,ah
20173 4E1B           50                         push	ax
20174                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20175 4E1C           8B46         F4            mov	ax,-$C[bp]
20176 4E1F           2A46         04            sub	al,4[bp]
20177 4E22           80DC                   00  sbb	ah,*0
20178                                           ! Debug: list unsigned int = ax+0 (used reg = )
20179 4E25           50                         push	ax
20180                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20181 4E26           FF76         F4            push	-$C[bp]
20182                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20183 4E29           8A46         0A            mov	al,$A[bp]
20184 4E2C           30E4                       xor	ah,ah
20185 4E2E           50                         push	ax
20186                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20187 4E2F           E8         F7FC            call	_vgamem_copy_pl4
20188 4E32           83C4                   0C  add	sp,*$C
20189                                           !BCC_EOS
20190                                           ! 2310              if (i>rlr) break;
20191                       00004E35            .117:
20192                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20193 4E35           8A46         0C            mov	al,$C[bp]
20194 4E38           30E4                       xor	ah,ah
20195 4E3A           3B46         F4            cmp	ax,-$C[bp]
20196 4E3D           73           02            jae 	.118
20197                       00004E3F            .119:
20198 4E3F           EB           13            jmp .110
20199                                           !BCC_EOS
20200                                           ! 2311             }
20201                       00004E41            .118:
20202                                           ! 2312           }
20203                       00004E41            .111:
20204                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20205 4E41           8B46         F4            mov	ax,-$C[bp]
20206 4E44           48                         dec	ax
20207 4E45           8946         F4            mov	-$C[bp],ax
20208                       00004E48            .112:
20209                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20210 4E48           8A46         08            mov	al,8[bp]
20211 4E4B           30E4                       xor	ah,ah
20212 4E4D           3B46         F4            cmp	ax,-$C[bp]
20213 4E50         0F86         FF7C            blos	.113
20214                       00004E54            .11A:
20215                       00004E54            .110:
20216                                           ! 2313         }
20217                       00004E54            .10F:
20218                                           ! 2314        break;
20219                       00004E54            .103:
20220 4E54           E9         01ED            br 	.F8
20221                                           !BCC_EOS
20222                                           ! 2315      case 0x02:
20223                                           ! 2316        bpp=vga_modes[line].pixbits;
20224                       00004E57            .11B:
20225                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20226 4E57           8A46         FE            mov	al,-2[bp]
20227 4E5A           30E4                       xor	ah,ah
20228 4E5C           B1                     03  mov	cl,*3
20229 4E5E           D3E0                       shl	ax,cl
20230 4E60           89C3                       mov	bx,ax
20231 4E62           81C3                 01FD  add	bx,#_vga_modes
20232                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
20233 4E66           8A47         03            mov	al,3[bx]
20234 4E69           8846         FC            mov	-4[bp],al
20235                                           !BCC_EOS
20236                                           ! 2317        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20237                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20238 4E6C           8A46         04            mov	al,4[bp]
20239 4E6F           84C0                       test	al,al
20240 4E71           75           77            jne 	.11C
20241                       00004E73            .121:
20242                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20243 4E73           8A46         08            mov	al,8[bp]
20244 4E76           84C0                       test	al,al
20245 4E78           75           70            jne 	.11C
20246                       00004E7A            .120:
20247                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20248 4E7A           8A46         0A            mov	al,$A[bp]
20249 4E7D           84C0                       test	al,al
20250 4E7F           75           69            jne 	.11C
20251                       00004E81            .11F:
20252                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20253 4E81           8B46         F6            mov	ax,-$A[bp]
20254                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20255                                           ! Debug: expression subtree swapping
20256 4E84           48                         dec	ax
20257 4E85           50                         push	ax
20258 4E86           8A46         0C            mov	al,$C[bp]
20259 4E89           30E4                       xor	ah,ah
20260 4E8B           3B46         F0            cmp	ax,0+..FFFC[bp]
20261 4E8E           8D66         F2            lea	sp,2+..FFFC[bp]
20262 4E91           75           57            jne 	.11C
20263                       00004E93            .11E:
20264                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20265 4E93           8B46         F8            mov	ax,-8[bp]
20266                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20267                                           ! Debug: expression subtree swapping
20268 4E96           48                         dec	ax
20269 4E97           50                         push	ax
20270 4E98           8A46         0E            mov	al,$E[bp]
20271 4E9B           30E4                       xor	ah,ah
20272 4E9D           3B46         F0            cmp	ax,0+..FFFC[bp]
20273 4EA0           8D66         F2            lea	sp,2+..FFFC[bp]
20274 4EA3           75           45            jne 	.11C
20275                       00004EA5            .11D:
20276                                           ! 2318         {
20277                                           ! 2319          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
20278                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20279 4EA5           8B46         F6            mov	ax,-$A[bp]
20280 4EA8           8B4E         F8            mov	cx,-8[bp]
20281 4EAB           F7E9                       imul	cx
20282                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20283 4EAD           89C3                       mov	bx,ax
20284 4EAF           8A46         FD            mov	al,-3[bp]
20285 4EB2           30E4                       xor	ah,ah
20286 4EB4           93                         xchg	ax,bx
20287 4EB5           89D9                       mov	cx,bx
20288 4EB7           F7E9                       imul	cx
20289                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
20290 4EB9           89C3                       mov	bx,ax
20291 4EBB           8A46         FC            mov	al,-4[bp]
20292 4EBE           30E4                       xor	ah,ah
20293 4EC0           93                         xchg	ax,bx
20294 4EC1           89D9                       mov	cx,bx
20295 4EC3           F7E9                       imul	cx
20296                                           ! Debug: list unsigned int = ax+0 (used reg = )
20297 4EC5           50                         push	ax
20298                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20299 4EC6           8A46         06            mov	al,6[bp]
20300 4EC9           30E4                       xor	ah,ah
20301 4ECB           50                         push	ax
20302                                           ! Debug: list int = const 0 (used reg = )
20303 4ECC           31C0                       xor	ax,ax
20304 4ECE           50                         push	ax
20305                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20306 4ECF           8A46         FE            mov	al,-2[bp]
20307 4ED2           30E4                       xor	ah,ah
20308 4ED4           B1                     03  mov	cl,*3
20309 4ED6           D3E0                       shl	ax,cl
20310 4ED8           89C3                       mov	bx,ax
20311 4EDA           81C3                 01FD  add	bx,#_vga_modes
20312                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20313 4EDE           FF77         04            push	4[bx]
20314                                           ! Debug: func () void = memsetb+0 (used reg = )
20315 4EE1           E8         2C5D            call	_memsetb
20316 4EE4           83C4                   08  add	sp,*8
20317                                           !BCC_EOS
20318                                           ! 2320         }
20319                                           ! 2321        else
20320                                           ! 2322         {
20321 4EE7           E9         0144            br 	.122
20322                       00004EEA            .11C:
20323                                           ! 2323          if(bpp==2)
20324                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20325 4EEA           8A46         FC            mov	al,-4[bp]
20326 4EED           3C                     02  cmp	al,*2
20327 4EEF           75           1C            jne 	.123
20328                       00004EF1            .124:
20329                                           ! 2324           {
20330                                           ! 2325            cul<<=1;
20331                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20332 4EF1           8A46         0A            mov	al,$A[bp]
20333 4EF4           30E4                       xor	ah,ah
20334 4EF6           D1E0                       shl	ax,*1
20335 4EF8           8846         0A            mov	$A[bp],al
20336                                           !BCC_EOS
20337                                           ! 2326            cols<<=1;
20338                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20339 4EFB           8A46         FB            mov	al,-5[bp]
20340 4EFE           30E4                       xor	ah,ah
20341 4F00           D1E0                       shl	ax,*1
20342 4F02           8846         FB            mov	-5[bp],al
20343                                           !BCC_EOS
20344                                           ! 2327            nbcols<<=1;
20345                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20346 4F05           8B46         F8            mov	ax,-8[bp]
20347 4F08           D1E0                       shl	ax,*1
20348 4F0A           8946         F8            mov	-8[bp],ax
20349                                           !BCC_EOS
20350                                           ! 2328           }
20351                                           ! 2329          if(dir==1)
20352                       00004F0D            .123:
20353                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20354 4F0D           8A46         12            mov	al,$12[bp]
20355 4F10           3C                     01  cmp	al,*1
20356 4F12         0F85         008A            bne 	.125
20357                       00004F16            .126:
20358                                           ! 2330           {for(i=rul;i<=rlr;i++)
20359                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20360 4F16           8A46         08            mov	al,8[bp]
20361 4F19           30E4                       xor	ah,ah
20362 4F1B           8946         F4            mov	-$C[bp],ax
20363                                           !BCC_EOS
20364                                           !BCC_EOS
20365                                           ! 2331             {
20366 4F1E           EB           73            jmp .129
20367                       00004F20            .12A:
20368                                           ! 2332              if((i+nblines>rlr)||(nblines==0))
20369                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20370 4F20           8B46         F4            mov	ax,-$C[bp]
20371 4F23           0246         04            add	al,4[bp]
20372 4F26           80D4                   00  adc	ah,*0
20373                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20374 4F29           50                         push	ax
20375 4F2A           8A46         0C            mov	al,$C[bp]
20376 4F2D           30E4                       xor	ah,ah
20377 4F2F           3B46         F0            cmp	ax,0+..FFFC[bp]
20378 4F32           8D66         F2            lea	sp,2+..FFFC[bp]
20379 4F35           72           07            jb  	.12C
20380                       00004F37            .12D:
20381                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20382 4F37           8A46         04            mov	al,4[bp]
20383 4F3A           84C0                       test	al,al
20384 4F3C           75           26            jne 	.12B
20385                       00004F3E            .12C:
20386                                           ! 2333               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20387                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20388 4F3E           8A46         06            mov	al,6[bp]
20389 4F41           30E4                       xor	ah,ah
20390 4F43           50                         push	ax
20391                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20392 4F44           8A46         FD            mov	al,-3[bp]
20393 4F47           30E4                       xor	ah,ah
20394 4F49           50                         push	ax
20395                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20396 4F4A           FF76         F8            push	-8[bp]
20397                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20398 4F4D           8A46         FB            mov	al,-5[bp]
20399 4F50           30E4                       xor	ah,ah
20400 4F52           50                         push	ax
20401                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20402 4F53           FF76         F4            push	-$C[bp]
20403                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20404 4F56           8A46         0A            mov	al,$A[bp]
20405 4F59           30E4                       xor	ah,ah
20406 4F5B           50                         push	ax
20407                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20408 4F5C           E8         F92E            call	_vgamem_fill_cga
20409 4F5F           83C4                   0C  add	sp,*$C
20410                                           !BCC_EOS
20411                                           ! 2334              else
20412                                           ! 2335               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20413 4F62           EB           28            jmp .12E
20414                       00004F64            .12B:
20415                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20416 4F64           8A46         FD            mov	al,-3[bp]
20417 4F67           30E4                       xor	ah,ah
20418 4F69           50                         push	ax
20419                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20420 4F6A           FF76         F8            push	-8[bp]
20421                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20422 4F6D           8A46         FB            mov	al,-5[bp]
20423 4F70           30E4                       xor	ah,ah
20424 4F72           50                         push	ax
20425                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20426 4F73           FF76         F4            push	-$C[bp]
20427                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20428 4F76           8B46         F4            mov	ax,-$C[bp]
20429 4F79           0246         04            add	al,4[bp]
20430 4F7C           80D4                   00  adc	ah,*0
20431                                           ! Debug: list unsigned int = ax+0 (used reg = )
20432 4F7F           50                         push	ax
20433                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20434 4F80           8A46         0A            mov	al,$A[bp]
20435 4F83           30E4                       xor	ah,ah
20436 4F85           50                         push	ax
20437                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20438 4F86           E8         F7F2            call	_vgamem_copy_cga
20439 4F89           83C4                   0C  add	sp,*$C
20440                                           !BCC_EOS
20441                                           ! 2336             }
20442                       00004F8C            .12E:
20443                                           ! 2337           }
20444                       00004F8C            .128:
20445                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20446 4F8C           8B46         F4            mov	ax,-$C[bp]
20447 4F8F           40                         inc	ax
20448 4F90           8946         F4            mov	-$C[bp],ax
20449                       00004F93            .129:
20450                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20451 4F93           8A46         0C            mov	al,$C[bp]
20452 4F96           30E4                       xor	ah,ah
20453 4F98           3B46         F4            cmp	ax,-$C[bp]
20454 4F9B           73           83            jae	.12A
20455                       00004F9D            .12F:
20456                       00004F9D            .127:
20457                                           ! 2338          else
20458                                           ! 2339           {for(i=rlr;i>=rul;i--)
20459 4F9D           E9         008E            br 	.130
20460                       00004FA0            .125:
20461                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20462 4FA0           8A46         0C            mov	al,$C[bp]
20463 4FA3           30E4                       xor	ah,ah
20464 4FA5           8946         F4            mov	-$C[bp],ax
20465                                           !BCC_EOS
20466                                           !BCC_EOS
20467                                           ! 2340             {
20468 4FA8           EB           78            jmp .133
20469                       00004FAA            .134:
20470                                           ! 2341      
20471                                           ! 2341         if((i<rul+nblines)||(nblines==0))
20472                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20473 4FAA           8A46         08            mov	al,8[bp]
20474 4FAD           30E4                       xor	ah,ah
20475 4FAF           0246         04            add	al,4[bp]
20476 4FB2           80D4                   00  adc	ah,*0
20477                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20478 4FB5           3B46         F4            cmp	ax,-$C[bp]
20479 4FB8           77           07            ja  	.136
20480                       00004FBA            .137:
20481                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20482 4FBA           8A46         04            mov	al,4[bp]
20483 4FBD           84C0                       test	al,al
20484 4FBF           75           26            jne 	.135
20485                       00004FC1            .136:
20486                                           ! 2342               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20487                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20488 4FC1           8A46         06            mov	al,6[bp]
20489 4FC4           30E4                       xor	ah,ah
20490 4FC6           50                         push	ax
20491                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20492 4FC7           8A46         FD            mov	al,-3[bp]
20493 4FCA           30E4                       xor	ah,ah
20494 4FCC           50                         push	ax
20495                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20496 4FCD           FF76         F8            push	-8[bp]
20497                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20498 4FD0           8A46         FB            mov	al,-5[bp]
20499 4FD3           30E4                       xor	ah,ah
20500 4FD5           50                         push	ax
20501                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20502 4FD6           FF76         F4            push	-$C[bp]
20503                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20504 4FD9           8A46         0A            mov	al,$A[bp]
20505 4FDC           30E4                       xor	ah,ah
20506 4FDE           50                         push	ax
20507                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20508 4FDF           E8         F8AB            call	_vgamem_fill_cga
20509 4FE2           83C4                   0C  add	sp,*$C
20510                                           !BCC_EOS
20511                                           ! 2343              else
20512                                           ! 2344               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20513 4FE5           EB           28            jmp .138
20514                       00004FE7            .135:
20515                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20516 4FE7           8A46         FD            mov	al,-3[bp]
20517 4FEA           30E4                       xor	ah,ah
20518 4FEC           50                         push	ax
20519                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20520 4FED           FF76         F8            push	-8[bp]
20521                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20522 4FF0           8A46         FB            mov	al,-5[bp]
20523 4FF3           30E4                       xor	ah,ah
20524 4FF5           50                         push	ax
20525                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20526 4FF6           8B46         F4            mov	ax,-$C[bp]
20527 4FF9           2A46         04            sub	al,4[bp]
20528 4FFC           80DC                   00  sbb	ah,*0
20529                                           ! Debug: list unsigned int = ax+0 (used reg = )
20530 4FFF           50                         push	ax
20531                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20532 5000           FF76         F4            push	-$C[bp]
20533                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20534 5003           8A46         0A            mov	al,$A[bp]
20535 5006           30E4                       xor	ah,ah
20536 5008           50                         push	ax
20537                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20538 5009           E8         F76F            call	_vgamem_copy_cga
20539 500C           83C4                   0C  add	sp,*$C
20540                                           !BCC_EOS
20541                                           ! 2345              if (i>rlr) break;
20542                       0000500F            .138:
20543                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20544 500F           8A46         0C            mov	al,$C[bp]
20545 5012           30E4                       xor	ah,ah
20546 5014           3B46         F4            cmp	ax,-$C[bp]
20547 5017           73           02            jae 	.139
20548                       00005019            .13A:
20549 5019           EB           13            jmp .131
20550                                           !BCC_EOS
20551                                           ! 2346             }
20552                       0000501B            .139:
20553                                           ! 2347           }
20554                       0000501B            .132:
20555                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20556 501B           8B46         F4            mov	ax,-$C[bp]
20557 501E           48                         dec	ax
20558 501F           8946         F4            mov	-$C[bp],ax
20559                       00005022            .133:
20560                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20561 5022           8A46         08            mov	al,8[bp]
20562 5025           30E4                       xor	ah,ah
20563 5027           3B46         F4            cmp	ax,-$C[bp]
20564 502A         0F86         FF7C            blos	.134
20565                       0000502E            .13B:
20566                       0000502E            .131:
20567                                           ! 2348         }
20568                       0000502E            .130:
20569                                           ! 2349        break;
20570                       0000502E            .122:
20571 502E           EB           14            jmp .F8
20572                                           !BCC_EOS
20573                                           ! 2350     }
20574                                           ! 2351   }
20575 5030           EB           12            jmp .F8
20576                       00005032            .FA:
20577 5032           2C                     02  sub	al,*2
20578 5034         0F84         FE1F            beq 	.11B
20579 5038           2C                     01  sub	al,*1
20580 503A         0F84         FC63            beq 	.FC
20581 503E           2C                     01  sub	al,*1
20582 5040         0F84         FC5D            beq 	.FB
20583                       00005044            .F8:
20584                       FFFFFFF0            ..FFFC	=	-$10
20585                                           ! 2352 }
20586                       00005044            .F7:
20587 5044           89EC                       mov	sp,bp
20588 5046           5D                         pop	bp
20589 5047           C3                         ret
20590                                           ! 2353 static void biosfn_read_char_attr (page,car)
20591                                           ! Register BX used in function biosfn_scroll
20592                                           ! 2354 Bit8u page;Bit16u *car;
20593                       00005048            _biosfn_read_char_attr:
20594                                           !BCC_EOS
20595                                           !BCC_EOS
20596                                           ! 2355 {Bit16u ss=get_SS();
20597 5048           55                         push	bp
20598 5049           89E5                       mov	bp,sp
20599 504B           4C                         dec	sp
20600 504C           4C                         dec	sp
20601                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20602 504D           E8         2C27            call	_get_SS
20603                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20604 5050           8946         FE            mov	-2[bp],ax
20605                                           !BCC_EOS
20606                                           ! 2356  Bit8u xcurs,ycurs,mode,line;
20607                                           !BCC_EOS
20608                                           ! 2357  Bit16u nbcols,nbrows,address;
20609                                           !BCC_EOS
20610                                           ! 2358  Bit16u cursor,dummy;
20611                                           !BCC_EOS
20612                                           ! 2359  mode=read_byte(0x40,0x49);
20613 5053           83C4                   F2  add	sp,*-$E
20614                                           ! Debug: list int = const $49 (used reg = )
20615 5056           B8                   0049  mov	ax,*$49
20616 5059           50                         push	ax
20617                                           ! Debug: list int = const $40 (used reg = )
20618 505A           B8                   0040  mov	ax,*$40
20619 505D           50                         push	ax
20620                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20621 505E           E8         2B8A            call	_read_byte
20622 5061           83C4                   04  add	sp,*4
20623                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20624 5064           8846         FB            mov	-5[bp],al
20625                                           !BCC_EOS
20626                                           ! 2360  line=find_vga_entry(mode);
20627                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20628 5067           8A46         FB            mov	al,-5[bp]
20629 506A           30E4                       xor	ah,ah
20630 506C           50                         push	ax
20631                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20632 506D           E8         2A8F            call	_find_vga_entry
20633 5070           44                         inc	sp
20634 5071           44                         inc	sp
20635                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20636 5072           8846         FA            mov	-6[bp],al
20637                                           !BCC_EOS
20638                                           ! 2361  if(line==0xFF)return;
20639                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20640 5075           8A46         FA            mov	al,-6[bp]
20641 5078           3C                     FF  cmp	al,#$FF
20642 507A           75           04            jne 	.13C
20643                       0000507C            .13D:
20644 507C           89EC                       mov	sp,bp
20645 507E           5D                         pop	bp
20646 507F           C3                         ret
20647                                           !BCC_EOS
20648                                           ! 2362  biosfn_get_cursor_pos(page,&dummy,&cursor);
20649                       00005080            .13C:
20650                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20651 5080           8D5E         F2            lea	bx,-$E[bp]
20652 5083           53                         push	bx
20653                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20654 5084           8D5E         F0            lea	bx,-$10[bp]
20655 5087           53                         push	bx
20656                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20657 5088           8A46         04            mov	al,4[bp]
20658 508B           30E4                       xor	ah,ah
20659 508D           50                         push	ax
20660                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20661 508E           E8         F3B9            call	_biosfn_get_cursor_pos
20662 5091           83C4                   06  add	sp,*6
20663                                           !BCC_EOS
20664                                           ! 2363  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20665                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20666 5094           8A46         F2            mov	al,-$E[bp]
20667                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20668 5097           8846         FD            mov	-3[bp],al
20669                                           !BCC_EOS
20670                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20671 509A           8B46         F2            mov	ax,-$E[bp]
20672 509D           30C0                       xor	al,al
20673                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20674 509F           88E0                       mov	al,ah
20675 50A1           30E4                       xor	ah,ah
20676                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20677 50A3           8846         FC            mov	-4[bp],al
20678                                           !BCC_EOS
20679                                           ! 2364  nbrows=read_byte(0x40,0x84)+1;
20680                                           ! Debug: list int = const $84 (used reg = )
20681 50A6           B8                   0084  mov	ax,#$84
20682 50A9           50                         push	ax
20683                                           ! Debug: list int = const $40 (used reg = )
20684 50AA           B8                   0040  mov	ax,*$40
20685 50AD           50                         push	ax
20686                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20687 50AE           E8         2B3A            call	_read_byte
20688 50B1           83C4                   04  add	sp,*4
20689                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20690 50B4           30E4                       xor	ah,ah
20691                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20692 50B6           40                         inc	ax
20693 50B7           8946         F6            mov	-$A[bp],ax
20694                                           !BCC_EOS
20695                                           ! 2365  nbcols=read_word(0x40,0x4A);
20696                                           ! Debug: list int = const $4A (used reg = )
20697 50BA           B8                   004A  mov	ax,*$4A
20698 50BD           50                         push	ax
20699                                           ! Debug: list int = const $40 (used reg = )
20700 50BE           B8                   0040  mov	ax,*$40
20701 50C1           50                         push	ax
20702                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20703 50C2           E8         2B39            call	_read_word
20704 50C5           83C4                   04  add	sp,*4
20705                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20706 50C8           8946         F8            mov	-8[bp],ax
20707                                           !BCC_EOS
20708                                           ! 2366  if(vga_modes[line].class==0x00)
20709                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20710 50CB           8A46         FA            mov	al,-6[bp]
20711 50CE           30E4                       xor	ah,ah
20712 50D0           B1                     03  mov	cl,*3
20713 50D2           D3E0                       shl	ax,cl
20714 50D4           89C3                       mov	bx,ax
20715 50D6           81C3                 01FD  add	bx,#_vga_modes
20716                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20717 50DA           8A47         01            mov	al,1[bx]
20718 50DD           84C0                       test	al,al
20719 50DF           75           5E            jne 	.13E
20720                       000050E1            .13F:
20721                                           ! 2367   {
20722                                           ! 2368    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20723                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20724 50E1           8A46         FC            mov	al,-4[bp]
20725 50E4           30E4                       xor	ah,ah
20726 50E6           8B4E         F8            mov	cx,-8[bp]
20727 50E9           F7E9                       imul	cx
20728                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20729                                           ! Debug: expression subtree swapping
20730 50EB           0246         FD            add	al,-3[bp]
20731 50EE           80D4                   00  adc	ah,*0
20732                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20733 50F1           D1E0                       shl	ax,*1
20734 50F3           50                         push	ax
20735                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20736 50F4           8B46         F8            mov	ax,-8[bp]
20737 50F7           8B4E         F6            mov	cx,-$A[bp]
20738 50FA           F7E9                       imul	cx
20739                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20740 50FC           D1E0                       shl	ax,*1
20741                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20742 50FE           0C                     FF  or	al,#$FF
20743                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20744                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20745 5100           89C3                       mov	bx,ax
20746 5102           8A46         04            mov	al,4[bp]
20747 5105           30E4                       xor	ah,ah
20748 5107           93                         xchg	ax,bx
20749 5108           40                         inc	ax
20750 5109           89D9                       mov	cx,bx
20751 510B           F7E9                       imul	cx
20752                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20753 510D           0346         EE            add	ax,-$12[bp]
20754 5110           44                         inc	sp
20755 5111           44                         inc	sp
20756                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20757 5112           8946         F4            mov	-$C[bp],ax
20758                                           !BCC_EOS
20759                                           ! 2369    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20760                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20761 5115           FF76         F4            push	-$C[bp]
20762                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20763 5118           8A46         FA            mov	al,-6[bp]
20764 511B           30E4                       xor	ah,ah
20765 511D           B1                     03  mov	cl,*3
20766 511F           D3E0                       shl	ax,cl
20767 5121           89C3                       mov	bx,ax
20768 5123           81C3                 01FD  add	bx,#_vga_modes
20769                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20770 5127           FF77         04            push	4[bx]
20771                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20772 512A           E8         2AD1            call	_read_word
20773 512D           83C4                   04  add	sp,*4
20774                                           ! Debug: list unsigned short = ax+0 (used reg = )
20775 5130           50                         push	ax
20776                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20777 5131           FF76         06            push	6[bp]
20778                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20779 5134           FF76         FE            push	-2[bp]
20780                                           ! Debug: func () void = write_word+0 (used reg = )
20781 5137           E8         2AEF            call	_write_word
20782 513A           83C4                   06  add	sp,*6
20783                                           !BCC_EOS
20784                                           ! 2370   }
20785                                           ! 2371  else
20786                                           ! 2372   {
20787 513D           EB           00            jmp .140
20788                       0000513F            .13E:
20789                                           ! 2373   }
20790                                           ! 2374 }
20791                       0000513F            .140:
20792 513F           89EC                       mov	sp,bp
20793 5141           5D                         pop	bp
20794 5142           C3                         ret
20795                                           ! 2375 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20796                                           ! Register BX used in function biosfn_read_char_attr
20797                                           ! 2376 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20798                       00005143            _write_gfx_char_pl4:
20799                                           !BCC_EOS
20800                                           !BCC_EOS
20801                                           !BCC_EOS
20802                                           !BCC_EOS
20803                                           !BCC_EOS
20804                                           !BCC_EOS
20805                                           ! 2377 {
20806                                           ! 2378  Bit8u i,j,mask;
20807                                           !BCC_EOS
20808                                           ! 2379  Bit8u *fdata;
20809                                           !BCC_EOS
20810                                           ! 2380  Bit16u addr,dest,src;
20811                                           !BCC_EOS
20812                                           ! 2381  switch(cheight)
20813 5143           55                         push	bp
20814 5144           89E5                       mov	bp,sp
20815 5146           83C4                   F4  add	sp,*-$C
20816 5149           8A46         0E            mov	al,$E[bp]
20817                                           ! 2382   {case 14:
20818 514C           EB           18            jmp .143
20819                                           ! 2383     fdata = &vgafont14;
20820                       0000514E            .144:
20821                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20822 514E           BB                   1761  mov	bx,#_vgafont14
20823 5151           895E         FA            mov	-6[bp],bx
20824                                           !BCC_EOS
20825                                           ! 2384     break;
20826 5154           EB           1A            jmp .141
20827                                           !BCC_EOS
20828                                           ! 2385    case 16:
20829                                           ! 2386     fdata = &vgafont16;
20830                       00005156            .145:
20831                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20832 5156           BB                   2561  mov	bx,#_vgafont16
20833 5159           895E         FA            mov	-6[bp],bx
20834                                           !BCC_EOS
20835                                           ! 2387     break;
20836 515C           EB           12            jmp .141
20837                                           !BCC_EOS
20838                                           ! 2388    default:
20839                                           ! 2389     fdata = &vgafont8;
20840                       0000515E            .146:
20841                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20842 515E           BB                   0F61  mov	bx,#_vgafont8
20843 5161           895E         FA            mov	-6[bp],bx
20844                                           !BCC_EOS
20845                                           ! 2390   }
20846                                           ! 2391  addr=xcurs+ycurs*cheight*nbcols;
20847 5164           EB           0A            jmp .141
20848                       00005166            .143:
20849 5166           2C                     0E  sub	al,*$E
20850 5168           74           E4            je 	.144
20851 516A           2C                     02  sub	al,*2
20852 516C           74           E8            je 	.145
20853 516E           EB           EE            jmp	.146
20854                       00005170            .141:
20855                       FFFFFFF2            ..FFFB	=	-$E
20856                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20857 5170           8A46         0E            mov	al,$E[bp]
20858 5173           30E4                       xor	ah,ah
20859 5175           89C3                       mov	bx,ax
20860 5177           8A46         0A            mov	al,$A[bp]
20861 517A           30E4                       xor	ah,ah
20862 517C           89D9                       mov	cx,bx
20863 517E           F7E9                       imul	cx
20864                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20865 5180           89C3                       mov	bx,ax
20866 5182           8A46         0C            mov	al,$C[bp]
20867 5185           30E4                       xor	ah,ah
20868 5187           93                         xchg	ax,bx
20869 5188           89D9                       mov	cx,bx
20870 518A           F7E9                       imul	cx
20871                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20872                                           ! Debug: expression subtree swapping
20873 518C           0246         08            add	al,8[bp]
20874 518F           80D4                   00  adc	ah,*0
20875                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20876 5192           8946         F8            mov	-8[bp],ax
20877                                           !BCC_EOS
20878                                           ! 2392  src = car * cheight;
20879                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20880 5195           8A46         0E            mov	al,$E[bp]
20881 5198           30E4                       xor	ah,ah
20882 519A           89C3                       mov	bx,ax
20883 519C           8A46         04            mov	al,4[bp]
20884 519F           30E4                       xor	ah,ah
20885 51A1           89D9                       mov	cx,bx
20886 51A3           F7E9                       imul	cx
20887                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20888 51A5           8946         F4            mov	-$C[bp],ax
20889                                           !BCC_EOS
20890                                           ! 2393  outw(0x3c4, 0x0f02);
20891                                           ! Debug: list int = const $F02 (used reg = )
20892 51A8           B8                   0F02  mov	ax,#$F02
20893 51AB           50                         push	ax
20894                                           ! Debug: list int = const $3C4 (used reg = )
20895 51AC           B8                   03C4  mov	ax,#$3C4
20896 51AF           50                         push	ax
20897                                           ! Debug: func () void = outw+0 (used reg = )
20898 51B0           E8         2AB4            call	_outw
20899 51B3           83C4                   04  add	sp,*4
20900                                           !BCC_EOS
20901                                           ! 2394  outw(0x3ce, 0x0205);
20902                                           ! Debug: list int = const $205 (used reg = )
20903 51B6           B8                   0205  mov	ax,#$205
20904 51B9           50                         push	ax
20905                                           ! Debug: list int = const $3CE (used reg = )
20906 51BA           B8                   03CE  mov	ax,#$3CE
20907 51BD           50                         push	ax
20908                                           ! Debug: func () void = outw+0 (used reg = )
20909 51BE           E8         2AA6            call	_outw
20910 51C1           83C4                   04  add	sp,*4
20911                                           !BCC_EOS
20912                                           ! 2395  if(attr&0x80)
20913                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20914 51C4           8A46         06            mov	al,6[bp]
20915 51C7           24                     80  and	al,#$80
20916 51C9           84C0                       test	al,al
20917 51CB           74           10            je  	.147
20918                       000051CD            .148:
20919                                           ! 2396   {
20920                                           ! 2397    outw(0x3ce, 0x1803);
20921                                           ! Debug: list int = const $1803 (used reg = )
20922 51CD           B8                   1803  mov	ax,#$1803
20923 51D0           50                         push	ax
20924                                           ! Debug: list int = const $3CE (used reg = )
20925 51D1           B8                   03CE  mov	ax,#$3CE
20926 51D4           50                         push	ax
20927                                           ! Debug: func () void = outw+0 (used reg = )
20928 51D5           E8         2A8F            call	_outw
20929 51D8           83C4                   04  add	sp,*4
20930                                           !BCC_EOS
20931                                           ! 2398   }
20932                                           ! 2399  else
20933                                           ! 2400   {
20934 51DB           EB           0E            jmp .149
20935                       000051DD            .147:
20936                                           ! 2401    outw(0x3ce, 0x0003);
20937                                           ! Debug: list int = const 3 (used reg = )
20938 51DD           B8                   0003  mov	ax,*3
20939 51E0           50                         push	ax
20940                                           ! Debug: list int = const $3CE (used reg = )
20941 51E1           B8                   03CE  mov	ax,#$3CE
20942 51E4           50                         push	ax
20943                                           ! Debug: func () void = outw+0 (used reg = )
20944 51E5           E8         2A7F            call	_outw
20945 51E8           83C4                   04  add	sp,*4
20946                                           !BCC_EOS
20947                                           ! 2402   }
20948                                           ! 2403  for(i=0;i<cheight;i++)
20949                       000051EB            .149:
20950                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20951 51EB           30C0                       xor	al,al
20952 51ED           8846         FF            mov	-1[bp],al
20953                                           !BCC_EOS
20954                                           !BCC_EOS
20955                                           ! 2404   {
20956 51F0           E9         00A6            br 	.14C
20957                       000051F3            .14D:
20958                                           ! 2405    dest=addr+i*nbcols;
20959                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20960 51F3           8A46         0C            mov	al,$C[bp]
20961 51F6           30E4                       xor	ah,ah
20962 51F8           89C3                       mov	bx,ax
20963 51FA           8A46         FF            mov	al,-1[bp]
20964 51FD           30E4                       xor	ah,ah
20965 51FF           89D9                       mov	cx,bx
20966 5201           F7E9                       imul	cx
20967                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20968                                           ! Debug: expression subtree swapping
20969 5203           0346         F8            add	ax,-8[bp]
20970                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20971 5206           8946         F6            mov	-$A[bp],ax
20972                                           !BCC_EOS
20973                                           ! 2406    for(j=0;j<8;j++)
20974                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20975 5209           30C0                       xor	al,al
20976 520B           8846         FE            mov	-2[bp],al
20977                                           !BCC_EOS
20978                                           !BCC_EOS
20979                                           ! 2407     {
20980 520E           EB           79            jmp .150
20981                       00005210            .151:
20982                                           ! 2408      mask=0x80>>j;
20983                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
20984 5210           8A46         FE            mov	al,-2[bp]
20985 5213           30E4                       xor	ah,ah
20986 5215           89C3                       mov	bx,ax
20987 5217           B8                   0080  mov	ax,#$80
20988 521A           89D9                       mov	cx,bx
20989 521C           D3F8                       sar	ax,cl
20990                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
20991 521E           8846         FD            mov	-3[bp],al
20992                                           !BCC_EOS
20993                                           ! 2409      outw(0x3ce, (mask << 8) | 0x08);
20994                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
20995 5221           8A46         FD            mov	al,-3[bp]
20996 5224           30E4                       xor	ah,ah
20997 5226           88C4                       mov	ah,al
20998 5228           30C0                       xor	al,al
20999                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
21000 522A           0C                     08  or	al,*8
21001                                           ! Debug: list unsigned int = ax+0 (used reg = )
21002 522C           50                         push	ax
21003                                           ! Debug: list int = const $3CE (used reg = )
21004 522D           B8                   03CE  mov	ax,#$3CE
21005 5230           50                         push	ax
21006                                           ! Debug: func () void = outw+0 (used reg = )
21007 5231           E8         2A33            call	_outw
21008 5234           83C4                   04  add	sp,*4
21009                                           !BCC_EOS
21010                                           ! 2410      read_byte(0xa000,dest);
21011                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21012 5237           FF76         F6            push	-$A[bp]
21013                                           ! Debug: list unsigned int = const $A000 (used reg = )
21014 523A           B8                   A000  mov	ax,#$A000
21015 523D           50                         push	ax
21016                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21017 523E           E8         29AA            call	_read_byte
21018 5241           83C4                   04  add	sp,*4
21019                                           !BCC_EOS
21020                                           ! 2411      if(fdata[src+i]&mask)
21021                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21022 5244           8B46         F4            mov	ax,-$C[bp]
21023 5247           0246         FF            add	al,-1[bp]
21024 524A           80D4                   00  adc	ah,*0
21025                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21026 524D           0346         FA            add	ax,-6[bp]
21027 5250           89C3                       mov	bx,ax
21028                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21029 5252           8A07                       mov	al,[bx]
21030 5254           2246         FD            and	al,-3[bp]
21031 5257           84C0                       test	al,al
21032 5259           74           17            je  	.152
21033                       0000525B            .153:
21034                                           ! 2412       {
21035                                           ! 2413        write_byte(0xa000,dest,attr&0x0f);
21036                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
21037 525B           8A46         06            mov	al,6[bp]
21038 525E           24                     0F  and	al,*$F
21039                                           ! Debug: list unsigned char = al+0 (used reg = )
21040 5260           30E4                       xor	ah,ah
21041 5262           50                         push	ax
21042                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21043 5263           FF76         F6            push	-$A[bp]
21044                                           ! Debug: list unsigned int = const $A000 (used reg = )
21045 5266           B8                   A000  mov	ax,#$A000
21046 5269           50                         push	ax
21047                                           ! Debug: func () void = write_byte+0 (used reg = )
21048 526A           E8         29A4            call	_write_byte
21049 526D           83C4                   06  add	sp,*6
21050                                           !BCC_EOS
21051                                           ! 2414       }
21052                                           ! 2415      else
21053                                           ! 2416       {
21054 5270           EB           10            jmp .154
21055                       00005272            .152:
21056                                           ! 2417        write_byte(0xa000,dest,0x00);
21057                                           ! Debug: list int = const 0 (used reg = )
21058 5272           31C0                       xor	ax,ax
21059 5274           50                         push	ax
21060                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21061 5275           FF76         F6            push	-$A[bp]
21062                                           ! Debug: list unsigned int = const $A000 (used reg = )
21063 5278           B8                   A000  mov	ax,#$A000
21064 527B           50                         push	ax
21065                                           ! Debug: func () void = write_byte+0 (used reg = )
21066 527C           E8         2992            call	_write_byte
21067 527F           83C4                   06  add	sp,*6
21068                                           !BCC_EOS
21069                                           ! 2418       }
21070                                           ! 2419     }
21071                       00005282            .154:
21072                                           ! 2420   }
21073                       00005282            .14F:
21074                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21075 5282           8A46         FE            mov	al,-2[bp]
21076 5285           40                         inc	ax
21077 5286           8846         FE            mov	-2[bp],al
21078                       00005289            .150:
21079                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21080 5289           8A46         FE            mov	al,-2[bp]
21081 528C           3C                     08  cmp	al,*8
21082 528E         0F82         FF7E            blo 	.151
21083                       00005292            .155:
21084                       00005292            .14E:
21085                                           ! 2421 #asm
21086                       00005292            .14B:
21087                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21088 5292           8A46         FF            mov	al,-1[bp]
21089 5295           40                         inc	ax
21090 5296           8846         FF            mov	-1[bp],al
21091                       00005299            .14C:
21092                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
21093 5299           8A46         FF            mov	al,-1[bp]
21094 529C           3A46         0E            cmp	al,$E[bp]
21095 529F         0F82         FF50            blo 	.14D
21096                       000052A3            .156:
21097                       000052A3            .14A:
21098                                           !BCC_EOS
21099                                           !BCC_ASM
21100                       0000000A            _write_gfx_char_pl4.j	set	$A
21101                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
21102                       00000006            _write_gfx_char_pl4.fdata	set	6
21103                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
21104                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
21105                       0000000E            .write_gfx_char_pl4.cheight	set	$E
21106                       00000018            _write_gfx_char_pl4.nbcols	set	$18
21107                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
21108                       0000000B            _write_gfx_char_pl4.i	set	$B
21109                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
21110                       00000016            _write_gfx_char_pl4.ycurs	set	$16
21111                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
21112                       00000009            _write_gfx_char_pl4.mask	set	9
21113                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
21114                       00000002            _write_gfx_char_pl4.dest	set	2
21115                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
21116                       00000014            _write_gfx_char_pl4.xcurs	set	$14
21117                       00000008            .write_gfx_char_pl4.xcurs	set	8
21118                       00000000            _write_gfx_char_pl4.src	set	0
21119                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
21120                       00000012            _write_gfx_char_pl4.attr	set	$12
21121                       00000006            .write_gfx_char_pl4.attr	set	6
21122                       00000010            _write_gfx_char_pl4.car	set	$10
21123                       00000004            .write_gfx_char_pl4.car	set	4
21124                       00000004            _write_gfx_char_pl4.addr	set	4
21125                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
21126 52A3           BA                   03CE    mov dx, # 0x3ce
21127 52A6           B8                   FF08    mov ax, #0xff08
21128 52A9           EF                           out dx, ax
21129 52AA           B8                   0005    mov ax, #0x0005
21130 52AD           EF                           out dx, ax
21131 52AE           B8                   0003    mov ax, #0x0003
21132 52B1           EF                           out dx, ax
21133                                           ! 2429 endasm
21134                                           !BCC_ENDASM
21135                                           !BCC_EOS
21136                                           ! 2430 }
21137 52B2           89EC                       mov	sp,bp
21138 52B4           5D                         pop	bp
21139 52B5           C3                         ret
21140                                           ! 2431 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
21141                                           ! Register BX used in function write_gfx_char_pl4
21142                                           ! 2432 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
21143                       000052B6            _write_gfx_char_cga:
21144                                           !BCC_EOS
21145                                           !BCC_EOS
21146                                           !BCC_EOS
21147                                           !BCC_EOS
21148                                           !BCC_EOS
21149                                           !BCC_EOS
21150                                           ! 2433 {
21151                                           ! 2434  Bit8u i,j,mask,data;
21152                                           !BCC_EOS
21153                                           ! 2435  Bit8u *fdata;
21154                                           !BCC_EOS
21155                                           ! 2436  Bit16u add
21156                                           ! 2436 r,dest,src;
21157                                           !BCC_EOS
21158                                           ! 2437  fdata = &vgafont8;
21159 52B6           55                         push	bp
21160 52B7           89E5                       mov	bp,sp
21161 52B9           83C4                   F4  add	sp,*-$C
21162                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21163 52BC           BB                   0F61  mov	bx,#_vgafont8
21164 52BF           895E         FA            mov	-6[bp],bx
21165                                           !BCC_EOS
21166                                           ! 2438  addr=(xcurs*bpp)+ycurs*320;
21167                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
21168 52C2           8A46         0A            mov	al,$A[bp]
21169 52C5           30E4                       xor	ah,ah
21170 52C7           B9                   0140  mov	cx,#$140
21171 52CA           F7E9                       imul	cx
21172 52CC           50                         push	ax
21173                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
21174 52CD           8A46         0E            mov	al,$E[bp]
21175 52D0           30E4                       xor	ah,ah
21176 52D2           89C3                       mov	bx,ax
21177 52D4           8A46         08            mov	al,8[bp]
21178 52D7           30E4                       xor	ah,ah
21179 52D9           89D9                       mov	cx,bx
21180 52DB           F7E9                       imul	cx
21181                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21182 52DD           0346         F2            add	ax,-$E[bp]
21183 52E0           44                         inc	sp
21184 52E1           44                         inc	sp
21185                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21186 52E2           8946         F8            mov	-8[bp],ax
21187                                           !BCC_EOS
21188                                           ! 2439  src = car * 8;
21189                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21190 52E5           8A46         04            mov	al,4[bp]
21191 52E8           30E4                       xor	ah,ah
21192 52EA           B1                     03  mov	cl,*3
21193 52EC           D3E0                       shl	ax,cl
21194                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21195 52EE           8946         F4            mov	-$C[bp],ax
21196                                           !BCC_EOS
21197                                           ! 2440  for(i=0;i<8;i++)
21198                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21199 52F1           30C0                       xor	al,al
21200 52F3           8846         FF            mov	-1[bp],al
21201                                           !BCC_EOS
21202                                           !BCC_EOS
21203                                           ! 2441   {
21204 52F6           E9         01B3            br 	.159
21205                       000052F9            .15A:
21206                                           ! 2442    dest=addr+(i>>1)*80;
21207                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21208 52F9           8A46         FF            mov	al,-1[bp]
21209 52FC           30E4                       xor	ah,ah
21210 52FE           D1E8                       shr	ax,*1
21211                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
21212 5300           B9                   0050  mov	cx,*$50
21213 5303           F7E9                       imul	cx
21214                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21215                                           ! Debug: expression subtree swapping
21216 5305           0346         F8            add	ax,-8[bp]
21217                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21218 5308           8946         F6            mov	-$A[bp],ax
21219                                           !BCC_EOS
21220                                           ! 2443    if (i & 1) dest += 0x2000;
21221                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21222 530B           8A46         FF            mov	al,-1[bp]
21223 530E           24                     01  and	al,*1
21224 5310           84C0                       test	al,al
21225 5312           74           09            je  	.15B
21226                       00005314            .15C:
21227                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
21228 5314           8B46         F6            mov	ax,-$A[bp]
21229 5317           05                   2000  add	ax,#$2000
21230 531A           8946         F6            mov	-$A[bp],ax
21231                                           !BCC_EOS
21232                                           ! 2444    mask = 0x80;
21233                       0000531D            .15B:
21234                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21235 531D           B0                     80  mov	al,#$80
21236 531F           8846         FD            mov	-3[bp],al
21237                                           !BCC_EOS
21238                                           ! 2445    if (bpp == 1)
21239                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
21240 5322           8A46         0E            mov	al,$E[bp]
21241 5325           3C                     01  cmp	al,*1
21242 5327         0F85         00B3            bne 	.15D
21243                       0000532B            .15E:
21244                                           ! 2446     {
21245                                           ! 2447      if (attr & 0x80)
21246                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21247 532B           8A46         06            mov	al,6[bp]
21248 532E           24                     80  and	al,#$80
21249 5330           84C0                       test	al,al
21250 5332           74           12            je  	.15F
21251                       00005334            .160:
21252                                           ! 2448       {
21253                                           ! 2449        data = read_byte(0xb800,dest);
21254                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21255 5334           FF76         F6            push	-$A[bp]
21256                                           ! Debug: list unsigned int = const $B800 (used reg = )
21257 5337           B8                   B800  mov	ax,#$B800
21258 533A           50                         push	ax
21259                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21260 533B           E8         28AD            call	_read_byte
21261 533E           83C4                   04  add	sp,*4
21262                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21263 5341           8846         FC            mov	-4[bp],al
21264                                           !BCC_EOS
21265                                           ! 2450       }
21266                                           ! 2451      else
21267                                           ! 2452       {
21268 5344           EB           05            jmp .161
21269                       00005346            .15F:
21270                                           ! 2453        data = 0x00;
21271                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21272 5346           30C0                       xor	al,al
21273 5348           8846         FC            mov	-4[bp],al
21274                                           !BCC_EOS
21275                                           ! 2454       }
21276                                           ! 2455      for(j=0;j<8;j++)
21277                       0000534B            .161:
21278                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21279 534B           30C0                       xor	al,al
21280 534D           8846         FE            mov	-2[bp],al
21281                                           !BCC_EOS
21282                                           !BCC_EOS
21283                                           ! 2456       {
21284 5350           EB           6F            jmp .164
21285                       00005352            .165:
21286                                           ! 2457        if (fdata[src+i] & mask)
21287                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21288 5352           8B46         F4            mov	ax,-$C[bp]
21289 5355           0246         FF            add	al,-1[bp]
21290 5358           80D4                   00  adc	ah,*0
21291                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21292 535B           0346         FA            add	ax,-6[bp]
21293 535E           89C3                       mov	bx,ax
21294                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21295 5360           8A07                       mov	al,[bx]
21296 5362           2246         FD            and	al,-3[bp]
21297 5365           84C0                       test	al,al
21298 5367           74           47            je  	.166
21299                       00005369            .167:
21300                                           ! 2458         {
21301                                           ! 2459          if (attr & 0x80)
21302                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21303 5369           8A46         06            mov	al,6[bp]
21304 536C           24                     80  and	al,#$80
21305 536E           84C0                       test	al,al
21306 5370           74           20            je  	.168
21307                       00005372            .169:
21308                                           ! 2460           {
21309                                           ! 2461            data ^= (attr & 0x01) << (7-j);
21310                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21311 5372           B8                   0007  mov	ax,*7
21312 5375           2A46         FE            sub	al,-2[bp]
21313 5378           80DC                   00  sbb	ah,*0
21314 537B           50                         push	ax
21315                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21316 537C           8A46         06            mov	al,6[bp]
21317 537F           24                     01  and	al,*1
21318                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21319 5381           30E4                       xor	ah,ah
21320 5383           8B4E         F2            mov	cx,-$E[bp]
21321 5386           D3E0                       shl	ax,cl
21322 5388           44                         inc	sp
21323 5389           44                         inc	sp
21324                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21325 538A           3246         FC            xor	al,-4[bp]
21326 538D           8846         FC            mov	-4[bp],al
21327                                           !BCC_EOS
21328                                           ! 2462           }
21329                                           ! 2463          else
21330                                           ! 2464           {
21331 5390           EB           1E            jmp .16A
21332                       00005392            .168:
21333                                           ! 2465            data |= (attr & 0x01) << (7-j);
21334                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21335 5392           B8                   0007  mov	ax,*7
21336 5395           2A46         FE            sub	al,-2[bp]
21337 5398           80DC                   00  sbb	ah,*0
21338 539B           50                         push	ax
21339                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21340 539C           8A46         06            mov	al,6[bp]
21341 539F           24                     01  and	al,*1
21342                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21343 53A1           30E4                       xor	ah,ah
21344 53A3           8B4E         F2            mov	cx,-$E[bp]
21345 53A6           D3E0                       shl	ax,cl
21346 53A8           44                         inc	sp
21347 53A9           44                         inc	sp
21348                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21349 53AA           0A46         FC            or	al,-4[bp]
21350 53AD           8846         FC            mov	-4[bp],al
21351                                           !BCC_EOS
21352                                           ! 2466           }
21353                                           ! 2467         }
21354                       000053B0            .16A:
21355                                           ! 2468        mask >>= 1;
21356                       000053B0            .166:
21357                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21358 53B0           8A46         FD            mov	al,-3[bp]
21359 53B3           30E4                       xor	ah,ah
21360 53B5           D1E8                       shr	ax,*1
21361 53B7           8846         FD            mov	-3[bp],al
21362                                           !BCC_EOS
21363                                           ! 2469       }
21364                                           ! 2470      write_byte(0xb800,dest,data);
21365                       000053BA            .163:
21366                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21367 53BA           8A46         FE            mov	al,-2[bp]
21368 53BD           40                         inc	ax
21369 53BE           8846         FE            mov	-2[bp],al
21370                       000053C1            .164:
21371                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21372 53C1           8A46         FE            mov	al,-2[bp]
21373 53C4           3C                     08  cmp	al,*8
21374 53C6           72           8A            jb 	.165
21375                       000053C8            .16B:
21376                       000053C8            .162:
21377                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21378 53C8           8A46         FC            mov	al,-4[bp]
21379 53CB           30E4                       xor	ah,ah
21380 53CD           50                         push	ax
21381                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21382 53CE           FF76         F6            push	-$A[bp]
21383                                           ! Debug: list unsigned int = const $B800 (used reg = )
21384 53D1           B8                   B800  mov	ax,#$B800
21385 53D4           50                         push	ax
21386                                           ! Debug: func () void = write_byte+0 (used reg = )
21387 53D5           E8         2839            call	_write_byte
21388 53D8           83C4                   06  add	sp,*6
21389                                           !BCC_EOS
21390                                           ! 2471     }
21391                                           ! 2472    else
21392                                           ! 2473     {
21393 53DB           E9         00C7            br 	.16C
21394                       000053DE            .15D:
21395                                           ! 2474      while (mask > 0)
21396                                           ! 2475       {
21397 53DE           E9         00BB            br 	.16E
21398                       000053E1            .16F:
21399                                           ! 2476        if (attr & 0x80)
21400                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21401 53E1           8A46         06            mov	al,6[bp]
21402 53E4           24                     80  and	al,#$80
21403 53E6           84C0                       test	al,al
21404 53E8           74           12            je  	.170
21405                       000053EA            .171:
21406                                           ! 2477         {
21407                                           ! 2478          data = read_byte(0xb800,dest);
21408                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21409 53EA           FF76         F6            push	-$A[bp]
21410                                           ! Debug: list unsigned int = const $B800 (used reg = )
21411 53ED           B8                   B800  mov	ax,#$B800
21412 53F0           50                         push	ax
21413                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21414 53F1           E8         27F7            call	_read_byte
21415 53F4           83C4                   04  add	sp,*4
21416                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21417 53F7           8846         FC            mov	-4[bp],al
21418                                           !BCC_EOS
21419                                           ! 2479         }
21420                                           ! 2480        else
21421                                           ! 2481         {
21422 53FA           EB           05            jmp .172
21423                       000053FC            .170:
21424                                           ! 2482          data = 0x00;
21425                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21426 53FC           30C0                       xor	al,al
21427 53FE           8846         FC            mov	-4[bp],al
21428                                           !BCC_EOS
21429                                           ! 2483         }
21430                                           ! 2484        for(j=0;j<4;j++)
21431                       00005401            .172:
21432                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21433 5401           30C0                       xor	al,al
21434 5403           8846         FE            mov	-2[bp],al
21435                                           !BCC_EOS
21436                                           !BCC_EOS
21437                                           ! 2485         {
21438 5406           EB           73            jmp .175
21439                       00005408            .176:
21440                                           ! 2486          if (fdata[src+i] & mask)
21441                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21442 5408           8B46         F4            mov	ax,-$C[bp]
21443 540B           0246         FF            add	al,-1[bp]
21444 540E           80D4                   00  adc	ah,*0
21445                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21446 5411           0346         FA            add	ax,-6[bp]
21447 5414           89C3                       mov	bx,ax
21448                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21449 5416           8A07                       mov	al,[bx]
21450 5418           2246         FD            and	al,-3[bp]
21451 541B           84C0                       test	al,al
21452 541D           74           4B            je  	.177
21453                       0000541F            .178:
21454                                           ! 2487           {
21455                                           ! 2488            if (attr & 0x80)
21456                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21457 541F           8A46         06            mov	al,6[bp]
21458 5422           24                     80  and	al,#$80
21459 5424           84C0                       test	al,al
21460 5426           74           22            je  	.179
21461                       00005428            .17A:
21462                                           ! 2489             {
21463                                           ! 2490              data ^= (attr & 0x03) << ((3-j)*2);
21464                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21465 5428           B8                   0003  mov	ax,*3
21466 542B           2A46         FE            sub	al,-2[bp]
21467 542E           80DC                   00  sbb	ah,*0
21468                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21469 5431           D1E0                       shl	ax,*1
21470 5433           50                         push	ax
21471                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21472 5434           8A46         06            mov	al,6[bp]
21473 5437           24                     03  and	al,*3
21474                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21475 5439           30E4                       xor	ah,ah
21476 543B           8B4E         F2            mov	cx,-$E[bp]
21477 543E           D3E0                       shl	ax,cl
21478 5440           44                         inc	sp
21479 5441           44                         inc	sp
21480                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21481 5442           3246         FC            xor	al,-4[bp]
21482 5445           8846         FC            mov	-4[bp],al
21483                                           !BCC_EOS
21484                                           ! 2491             }
21485                                           ! 2492            else
21486                                           ! 2493             {
21487 5448           EB           20            jmp .17B
21488                       0000544A            .179:
21489                                           ! 2494              data |= (attr & 0x03) << ((3-j)*2);
21490                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21491 544A           B8                   0003  mov	ax,*3
21492 544D           2A46         FE            sub	al,-2[bp]
21493 5450           80DC                   00  sbb	ah,*0
21494                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21495 5453           D1E0                       shl	ax,*1
21496 5455           50                         push	ax
21497                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21498 5456           8A46         06            mov	al,6[bp]
21499 5459           24                     03  and	al,*3
21500                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21501 545B           30E4                       xor	ah,ah
21502 545D           8B4E         F2            mov	cx,-$E[bp]
21503 5460           D3E0                       shl	ax,cl
21504 5462           44                         inc	sp
21505 5463           44                         inc	sp
21506                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21507 5464           0A46         FC            or	al,-4[bp]
21508 5467           8846         FC            mov	-4[bp],al
21509                                           !BCC_EOS
21510                                           ! 2495             }
21511                                           ! 2496           }
21512                       0000546A            .17B:
21513                                           ! 2497          mask >>= 1;
21514                       0000546A            .177:
21515                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21516 546A           8A46         FD            mov	al,-3[bp]
21517 546D           30E4                       xor	ah,ah
21518 546F           D1E8                       shr	ax,*1
21519 5471           8846         FD            mov	-3[bp],al
21520                                           !BCC_EOS
21521                                           ! 2498         }
21522                                           ! 2499        write_byte(0xb800,dest,data);
21523                       00005474            .174:
21524                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21525 5474           8A46         FE            mov	al,-2[bp]
21526 5477           40                         inc	ax
21527 5478           8846         FE            mov	-2[bp],al
21528                       0000547B            .175:
21529                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21530 547B           8A46         FE            mov	al,-2[bp]
21531 547E           3C                     04  cmp	al,*4
21532 5480           72           86            jb 	.176
21533                       00005482            .17C:
21534                       00005482            .173:
21535                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21536 5482           8A46         FC            mov	al,-4[bp]
21537 5485           30E4                       xor	ah,ah
21538 5487           50                         push	ax
21539                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21540 5488           FF76         F6            push	-$A[bp]
21541                                           ! Debug: list unsigned int = const $B800 (used reg = )
21542 548B           B8                   B800  mov	ax,#$B800
21543 548E           50                         push	ax
21544                                           ! Debug: func () void = write_byte+0 (used reg = )
21545 548F           E8         277F            call	_write_byte
21546 5492           83C4                   06  add	sp,*6
21547                                           !BCC_EOS
21548                                           ! 2500        dest += 1;
21549                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21550 5495           8B46         F6            mov	ax,-$A[bp]
21551 5498           40                         inc	ax
21552 5499           8946         F6            mov	-$A[bp],ax
21553                                           !BCC_EOS
21554                                           ! 2501       }
21555                                           ! 2502     }
21556                       0000549C            .16E:
21557                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21558 549C           8A46         FD            mov	al,-3[bp]
21559 549F           84C0                       test	al,al
21560 54A1         0F85         FF3C            bne 	.16F
21561                       000054A5            .17D:
21562                       000054A5            .16D:
21563                                           ! 2503   }
21564                       000054A5            .16C:
21565                                           ! 2504 }
21566                       000054A5            .158:
21567                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21568 54A5           8A46         FF            mov	al,-1[bp]
21569 54A8           40                         inc	ax
21570 54A9           8846         FF            mov	-1[bp],al
21571                       000054AC            .159:
21572                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21573 54AC           8A46         FF            mov	al,-1[bp]
21574 54AF           3C                     08  cmp	al,*8
21575 54B1         0F82         FE44            blo 	.15A
21576                       000054B5            .17E:
21577                       000054B5            .157:
21578 54B5           89EC                       mov	sp,bp
21579 54B7           5D                         pop	bp
21580 54B8           C3                         ret
21581                                           ! 2505 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21582                                           ! Register BX used in function write_gfx_char_cga
21583                                           ! 2506 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21584                       000054B9            _write_gfx_char_lin:
21585                                           !BCC_EOS
21586                                           !BCC_EOS
21587                                           !BCC_EOS
21588                                           !BCC_EOS
21589                                           !BCC_EOS
21590                                           ! 2507 {
21591                                           ! 2508  Bit8u i,j,mask,data;
21592                                           !BCC_EOS
21593                                           ! 2509  Bit8u *fdata;
21594                                           !BCC_EOS
21595                                           ! 2510  Bit16u addr,dest,src;
21596                                           !BCC_EOS
21597                                           ! 2511  fdata = &vgafont8;
21598 54B9           55                         push	bp
21599 54BA           89E5                       mov	bp,sp
21600 54BC           83C4                   F4  add	sp,*-$C
21601                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21602 54BF           BB                   0F61  mov	bx,#_vgafont8
21603 54C2           895E         FA            mov	-6[bp],bx
21604                                           !BCC_EOS
21605                                           ! 2512  addr=xcurs*8+ycurs*nbcols*64;
21606                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21607 54C5           8A46         0C            mov	al,$C[bp]
21608 54C8           30E4                       xor	ah,ah
21609 54CA           89C3                       mov	bx,ax
21610 54CC           8A46         0A            mov	al,$A[bp]
21611 54CF           30E4                       xor	ah,ah
21612 54D1           89D9                       mov	cx,bx
21613 54D3           F7E9                       imul	cx
21614                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21615 54D5           B1                     06  mov	cl,*6
21616 54D7           D3E0                       shl	ax,cl
21617 54D9           50                         push	ax
21618                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21619 54DA           8A46         08            mov	al,8[bp]
21620 54DD           30E4                       xor	ah,ah
21621 54DF           B1                     03  mov	cl,*3
21622 54E1           D3E0                       shl	ax,cl
21623                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21624 54E3           0346         F2            add	ax,-$E[bp]
21625 54E6           44                         inc	sp
21626 54E7           44                         inc	sp
21627                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21628 54E8           8946         F8            mov	-8[bp],ax
21629                                           !BCC_EOS
21630                                           ! 2513  src = car * 8;
21631                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21632 54EB           8A46         04            mov	al,4[bp]
21633 54EE           30E4                       xor	ah,ah
21634 54F0           B1                     03  mov	cl,*3
21635 54F2           D3E0                       shl	ax,cl
21636                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21637 54F4           8946         F4            mov	-$C[bp],ax
21638                                           !BCC_EOS
21639                                           ! 2514  for(i=0;i<8;i++)
21640                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21641 54F7           30C0                       xor	al,al
21642 54F9           8846         FF            mov	-1[bp],al
21643                                           !BCC_EOS
21644                                           !BCC_EOS
21645                                           ! 2515   {
21646 54FC           E9         0081            br 	.181
21647                       000054FF            .182:
21648                                           ! 2516    dest=addr+i*nbcols*8;
21649                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21650 54FF           8A46         0C            mov	al,$C[bp]
21651 5502           30E4                       xor	ah,ah
21652 5504           89C3                       mov	bx,ax
21653 5506           8A46         FF            mov	al,-1[bp]
21654 5509           30E4                       xor	ah,ah
21655 550B           89D9                       mov	cx,bx
21656 550D           F7E9                       imul	cx
21657                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21658 550F           B1                     03  mov	cl,*3
21659 5511           D3E0                       shl	ax,cl
21660                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21661                                           ! Debug: expression subtree swapping
21662 5513           0346         F8            add	ax,-8[bp]
21663                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21664 5516           8946         F6            mov	-$A[bp],ax
21665                                           !BCC_EOS
21666                                           ! 2517    mask = 0x80;
21667                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21668 5519           B0                     80  mov	al,#$80
21669 551B           8846         FD            mov	-3[bp],al
21670                                           !BCC_EOS
21671                                           ! 2518    for(j=0;j<8;j++)
21672                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21673 551E           30C0                       xor	al,al
21674 5520           8846         FE            mov	-2[bp],al
21675                                           !BCC_EOS
21676                                           !BCC_EOS
21677                                           ! 2519     {
21678 5523           EB           4D            jmp .185
21679                       00005525            .186:
21680                                           ! 2520      data = 0x00;
21681                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21682 5525           30C0                       xor	al,al
21683 5527           8846         FC            mov	-4[bp],al
21684                                           !BCC_EOS
21685                                           ! 2521      if (fdata[src+i] & mask)
21686                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21687 552A           8B46         F4            mov	ax,-$C[bp]
21688 552D           0246         FF            add	al,-1[bp]
21689 5530           80D4                   00  adc	ah,*0
21690                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21691 5533           0346         FA            add	ax,-6[bp]
21692 5536           89C3                       mov	bx,ax
21693                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21694 5538           8A07                       mov	al,[bx]
21695 553A           2246         FD            and	al,-3[bp]
21696 553D           84C0                       test	al,al
21697 553F           74           06            je  	.187
21698                       00005541            .188:
21699                                           ! 2522       {
21700                                           ! 2523        data = attr;
21701                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21702 5541           8A46         06            mov	al,6[bp]
21703 5544           8846         FC            mov	-4[bp],al
21704                                           !BCC_EOS
21705                                           ! 2524       }
21706                                           ! 2525      write_byte(0xa000,dest+j,data);
21707                       00005547            .187:
21708                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21709 5547           8A46         FC            mov	al,-4[bp]
21710 554A           30E4                       xor	ah,ah
21711 554C           50                         push	ax
21712                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21713 554D           8B46         F6            mov	ax,-$A[bp]
21714 5550           0246         FE            add	al,-2[bp]
21715 5553           80D4                   00  adc	ah,*0
21716                                           ! Debug: list unsigned int = ax+0 (used reg = )
21717 5556           50                         push	ax
21718                                           ! Debug: list unsigned int = const $A000 (used reg = )
21719 5557           B8                   A000  mov	ax,#$A000
21720 555A           50                         push	ax
21721                                           ! Debug: func () void = write_byte+0 (used reg = )
21722 555B           E8         26B3            call	_write_byte
21723 555E           83C4                   06  add	sp,*6
21724                                           !BCC_EOS
21725                                           ! 2526      mask >>= 1;
21726                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21727 5561           8A46         FD            mov	al,-3[bp]
21728 5564           30E4                       xor	ah,ah
21729 5566           D1E8                       shr	ax,*1
21730 5568           8846         FD            mov	-3[bp],al
21731                                           !BCC_EOS
21732                                           ! 2527     }
21733                                           ! 2528   }
21734                       0000556B            .184:
21735                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21736 556B           8A46         FE            mov	al,-2[bp]
21737 556E           40                         inc	ax
21738 556F           8846         FE            mov	-2[bp],al
21739                       00005572            .185:
21740                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21741 5572           8A46         FE            mov	al,-2[bp]
21742 5575           3C                     08  cmp	al,*8
21743 5577           72           AC            jb 	.186
21744                       00005579            .189:
21745                       00005579            .183:
21746                                           ! 2529 }
21747                       00005579            .180:
21748                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21749 5579           8A46         FF            mov	al,-1[bp]
21750 557C           40                         inc	ax
21751 557D           8846         FF            mov	-1[bp],al
21752                       00005580            .181:
21753                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21754 5580           8A46         FF            mov	al,-1[bp]
21755 5583           3C                     08  cmp	al,*8
21756 5585         0F82         FF76            blo 	.182
21757                       00005589            .18A:
21758                       00005589            .17F:
21759 5589           89EC                       mov	sp,bp
21760 558B           5D                         pop	bp
21761 558C           C3                         ret
21762                                           ! 2530 static void biosfn_write_char_attr (car,page,attr,count)
21763                                           ! Register BX used in function write_gfx_char_lin
21764                                           ! 2531 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21765                       0000558D            _biosfn_write_char_attr:
21766                                           !BCC_EOS
21767                                           !BCC_EOS
21768                                           !BCC_EOS
21769                                           !BCC_EOS
21770                                           ! 2532 {
21771                                           ! 2533  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21772                                           !BCC_EOS
21773                                           ! 2534  Bit16u nbcols,nbrows,address;
21774                                           !BCC_EOS
21775                                           ! 2535  Bit16u cursor,dummy;
21776                                           !BCC_EOS
21777                                           ! 2536  mode=read_byte(0x40,0x49);
21778 558D           55                         push	bp
21779 558E           89E5                       mov	bp,sp
21780 5590           83C4                   F0  add	sp,*-$10
21781                                           ! Debug: list int = const $49 (used reg = )
21782 5593           B8                   0049  mov	ax,*$49
21783 5596           50                         push	ax
21784                                           ! Debug: list int = const $40 (used reg = )
21785 5597           B8                   0040  mov	ax,*$40
21786 559A           50                         push	ax
21787                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21788 559B           E8         264D            call	_read_byte
21789 559E           83C4                   04  add	sp,*4
21790                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21791 55A1           8846         FC            mov	-4[bp],al
21792                                           !BCC_EOS
21793                                           ! 2537  line=find_vga_entry(mode);
21794                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21795 55A4           8A46         FC            mov	al,-4[bp]
21796 55A7           30E4                       xor	ah,ah
21797 55A9           50                         push	ax
21798                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21799 55AA           E8         2552            call	_find_vga_entry
21800 55AD           44                         inc	sp
21801 55AE           44                         inc	sp
21802                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21803 55AF           8846         FB            mov	-5[bp],al
21804                                           !BCC_EOS
21805                                           ! 2538  if(line==0xFF)return;
21806                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21807 55B2           8A46         FB            mov	al,-5[bp]
21808 55B5           3C                     FF  cmp	al,#$FF
21809 55B7           75           04            jne 	.18B
21810                       000055B9            .18C:
21811 55B9           89EC                       mov	sp,bp
21812 55BB           5D                         pop	bp
21813 55BC           C3                         ret
21814                                           !BCC_EOS
21815                                           ! 2539  biosfn_get_cursor_pos(page,&dummy,&cursor);
21816                       000055BD            .18B:
21817                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21818 55BD           8D5E         F2            lea	bx,-$E[bp]
21819 55C0           53                         push	bx
21820                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21821 55C1           8D5E         F0            lea	bx,-$10[bp]
21822 55C4           53                         push	bx
21823                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21824 55C5           8A46         06            mov	al,6[bp]
21825 55C8           30E4                       xor	ah,ah
21826 55CA           50                         push	ax
21827                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21828 55CB           E8         EE7C            call	_biosfn_get_cursor_pos
21829 55CE           83C4                   06  add	sp,*6
21830                                           !BCC_EOS
21831                                           ! 2540  xcurs=cursor&0x00ff;
21832                                           ! 2540 ycurs=(cursor&0xff00)>>8;
21833                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21834 55D1           8A46         F2            mov	al,-$E[bp]
21835                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21836 55D4           8846         FE            mov	-2[bp],al
21837                                           !BCC_EOS
21838                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21839 55D7           8B46         F2            mov	ax,-$E[bp]
21840 55DA           30C0                       xor	al,al
21841                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21842 55DC           88E0                       mov	al,ah
21843 55DE           30E4                       xor	ah,ah
21844                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21845 55E0           8846         FD            mov	-3[bp],al
21846                                           !BCC_EOS
21847                                           ! 2541  nbrows=read_byte(0x40,0x84)+1;
21848                                           ! Debug: list int = const $84 (used reg = )
21849 55E3           B8                   0084  mov	ax,#$84
21850 55E6           50                         push	ax
21851                                           ! Debug: list int = const $40 (used reg = )
21852 55E7           B8                   0040  mov	ax,*$40
21853 55EA           50                         push	ax
21854                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21855 55EB           E8         25FD            call	_read_byte
21856 55EE           83C4                   04  add	sp,*4
21857                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21858 55F1           30E4                       xor	ah,ah
21859                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21860 55F3           40                         inc	ax
21861 55F4           8946         F6            mov	-$A[bp],ax
21862                                           !BCC_EOS
21863                                           ! 2542  nbcols=read_word(0x40,0x4A);
21864                                           ! Debug: list int = const $4A (used reg = )
21865 55F7           B8                   004A  mov	ax,*$4A
21866 55FA           50                         push	ax
21867                                           ! Debug: list int = const $40 (used reg = )
21868 55FB           B8                   0040  mov	ax,*$40
21869 55FE           50                         push	ax
21870                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21871 55FF           E8         25FC            call	_read_word
21872 5602           83C4                   04  add	sp,*4
21873                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21874 5605           8946         F8            mov	-8[bp],ax
21875                                           !BCC_EOS
21876                                           ! 2543  if(vga_modes[line].class==0x00)
21877                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21878 5608           8A46         FB            mov	al,-5[bp]
21879 560B           30E4                       xor	ah,ah
21880 560D           B1                     03  mov	cl,*3
21881 560F           D3E0                       shl	ax,cl
21882 5611           89C3                       mov	bx,ax
21883 5613           81C3                 01FD  add	bx,#_vga_modes
21884                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21885 5617           8A47         01            mov	al,1[bx]
21886 561A           84C0                       test	al,al
21887 561C         0F85         006A            bne 	.18D
21888                       00005620            .18E:
21889                                           ! 2544   {
21890                                           ! 2545    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21891                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21892 5620           8A46         FD            mov	al,-3[bp]
21893 5623           30E4                       xor	ah,ah
21894 5625           8B4E         F8            mov	cx,-8[bp]
21895 5628           F7E9                       imul	cx
21896                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21897                                           ! Debug: expression subtree swapping
21898 562A           0246         FE            add	al,-2[bp]
21899 562D           80D4                   00  adc	ah,*0
21900                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21901 5630           D1E0                       shl	ax,*1
21902 5632           50                         push	ax
21903                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21904 5633           8B46         F8            mov	ax,-8[bp]
21905 5636           8B4E         F6            mov	cx,-$A[bp]
21906 5639           F7E9                       imul	cx
21907                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21908 563B           D1E0                       shl	ax,*1
21909                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21910 563D           0C                     FF  or	al,#$FF
21911                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21912                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21913 563F           89C3                       mov	bx,ax
21914 5641           8A46         06            mov	al,6[bp]
21915 5644           30E4                       xor	ah,ah
21916 5646           93                         xchg	ax,bx
21917 5647           40                         inc	ax
21918 5648           89D9                       mov	cx,bx
21919 564A           F7E9                       imul	cx
21920                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21921 564C           0346         EE            add	ax,-$12[bp]
21922 564F           44                         inc	sp
21923 5650           44                         inc	sp
21924                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21925 5651           8946         F4            mov	-$C[bp],ax
21926                                           !BCC_EOS
21927                                           ! 2546    dummy=((Bit16u)attr<<8)+car;
21928                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21929 5654           8A46         08            mov	al,8[bp]
21930 5657           30E4                       xor	ah,ah
21931                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21932 5659           88C4                       mov	ah,al
21933 565B           30C0                       xor	al,al
21934                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21935 565D           0246         04            add	al,4[bp]
21936 5660           80D4                   00  adc	ah,*0
21937                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21938 5663           8946         F0            mov	-$10[bp],ax
21939                                           !BCC_EOS
21940                                           ! 2547    memsetw(vga_modes[line].sstart,address,dummy,count);
21941                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21942 5666           FF76         0A            push	$A[bp]
21943                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21944 5669           FF76         F0            push	-$10[bp]
21945                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21946 566C           FF76         F4            push	-$C[bp]
21947                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21948 566F           8A46         FB            mov	al,-5[bp]
21949 5672           30E4                       xor	ah,ah
21950 5674           B1                     03  mov	cl,*3
21951 5676           D3E0                       shl	ax,cl
21952 5678           89C3                       mov	bx,ax
21953 567A           81C3                 01FD  add	bx,#_vga_modes
21954                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21955 567E           FF77         04            push	4[bx]
21956                                           ! Debug: func () void = memsetw+0 (used reg = )
21957 5681           E8         24E2            call	_memsetw
21958 5684           83C4                   08  add	sp,*8
21959                                           !BCC_EOS
21960                                           ! 2548   }
21961                                           ! 2549  else
21962                                           ! 2550   {
21963 5687           E9         00F4            br 	.18F
21964                       0000568A            .18D:
21965                                           ! 2551    cheight=video_param_table[line_to_vpti[line]].cheight;
21966                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21967 568A           8A46         FB            mov	al,-5[bp]
21968 568D           30E4                       xor	ah,ah
21969 568F           89C3                       mov	bx,ax
21970                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21971 5691           8A87       027D            mov	al,_line_to_vpti[bx]
21972 5695           30E4                       xor	ah,ah
21973 5697           B1                     06  mov	cl,*6
21974 5699           D3E0                       shl	ax,cl
21975 569B           89C3                       mov	bx,ax
21976 569D           81C3                 0291  add	bx,#_video_param_table
21977                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21978 56A1           8A47         02            mov	al,2[bx]
21979 56A4           8846         FF            mov	-1[bp],al
21980                                           !BCC_EOS
21981                                           ! 2552    bpp=vga_modes[line].pixbits;
21982                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21983 56A7           8A46         FB            mov	al,-5[bp]
21984 56AA           30E4                       xor	ah,ah
21985 56AC           B1                     03  mov	cl,*3
21986 56AE           D3E0                       shl	ax,cl
21987 56B0           89C3                       mov	bx,ax
21988 56B2           81C3                 01FD  add	bx,#_vga_modes
21989                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21990 56B6           8A47         03            mov	al,3[bx]
21991 56B9           8846         FA            mov	-6[bp],al
21992                                           !BCC_EOS
21993                                           ! 2553    while((count-->0) && (xcurs<nbcols))
21994                                           ! 2554     {
21995 56BC           E9         00A7            br 	.191
21996                       000056BF            .192:
21997                                           ! 2555      switch(vga_modes[line].memmodel)
21998                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21999 56BF           8A46         FB            mov	al,-5[bp]
22000 56C2           30E4                       xor	ah,ah
22001 56C4           B1                     03  mov	cl,*3
22002 56C6           D3E0                       shl	ax,cl
22003 56C8           89C3                       mov	bx,ax
22004 56CA           81C3                 01FD  add	bx,#_vga_modes
22005 56CE           8A47         02            mov	al,2[bx]
22006                                           ! 2556       {
22007 56D1           EB           78            jmp .195
22008                                           ! 2557        case 0x04:
22009                                           ! 2558        case 0x03:
22010                       000056D3            .196:
22011                                           ! 2559          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22012                       000056D3            .197:
22013                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22014 56D3           8A46         FF            mov	al,-1[bp]
22015 56D6           30E4                       xor	ah,ah
22016 56D8           50                         push	ax
22017                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22018 56D9           FF76         F8            push	-8[bp]
22019                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22020 56DC           8A46         FD            mov	al,-3[bp]
22021 56DF           30E4                       xor	ah,ah
22022 56E1           50                         push	ax
22023                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22024 56E2           8A46         FE            mov	al,-2[bp]
22025 56E5           30E4                       xor	ah,ah
22026 56E7           50                         push	ax
22027                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22028 56E8           8A46         08            mov	al,8[bp]
22029 56EB           30E4                       xor	ah,ah
22030 56ED           50                         push	ax
22031                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22032 56EE           8A46         04            mov	al,4[bp]
22033 56F1           30E4                       xor	ah,ah
22034 56F3           50                         push	ax
22035                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22036 56F4           E8         FA4C            call	_write_gfx_char_pl4
22037 56F7           83C4                   0C  add	sp,*$C
22038                                           !BCC_EOS
22039                                           ! 2560          break;
22040 56FA           E9         0062            br 	.193
22041                                           !BCC_EOS
22042                                           ! 2561        case 0x02:
22043                                           ! 2562          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22044                       000056FD            .198:
22045                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22046 56FD           8A46         FA            mov	al,-6[bp]
22047 5700           30E4                       xor	ah,ah
22048 5702           50                         push	ax
22049                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22050 5703           FF76         F8            push	-8[bp]
22051                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22052 5706           8A46         FD            mov	al,-3[bp]
22053 5709           30E4                       xor	ah,ah
22054 570B           50                         push	ax
22055                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22056 570C           8A46         FE            mov	al,-2[bp]
22057 570F           30E4                       xor	ah,ah
22058 5711           50                         push	ax
22059                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22060 5712           8A46         08            mov	al,8[bp]
22061 5715           30E4                       xor	ah,ah
22062 5717           50                         push	ax
22063                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22064 5718           8A46         04            mov	al,4[bp]
22065 571B           30E4                       xor	ah,ah
22066 571D           50                         push	ax
22067                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22068 571E           E8         FB95            call	_write_gfx_char_cga
22069 5721           83C4                   0C  add	sp,*$C
22070                                           !BCC_EOS
22071                                           ! 2563          break;
22072 5724           EB           39            jmp .193
22073                                           !BCC_EOS
22074                                           ! 2564        case 0x05:
22075                                           ! 2565          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22076                       00005726            .199:
22077                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22078 5726           FF76         F8            push	-8[bp]
22079                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22080 5729           8A46         FD            mov	al,-3[bp]
22081 572C           30E4                       xor	ah,ah
22082 572E           50                         push	ax
22083                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22084 572F           8A46         FE            mov	al,-2[bp]
22085 5732           30E4                       xor	ah,ah
22086 5734           50                         push	ax
22087                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22088 5735           8A46         08            mov	al,8[bp]
22089 5738           30E4                       xor	ah,ah
22090 573A           50                         push	ax
22091                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22092 573B           8A46         04            mov	al,4[bp]
22093 573E           30E4                       xor	ah,ah
22094 5740           50                         push	ax
22095                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22096 5741           E8         FD75            call	_write_gfx_char_lin
22097 5744           83C4                   0A  add	sp,*$A
22098                                           !BCC_EOS
22099                                           ! 2566          break;
22100 5747           EB           16            jmp .193
22101                                           !BCC_EOS
22102                                           ! 2567       }
22103                                           ! 2568      xcurs++;
22104 5749           EB           14            jmp .193
22105                       0000574B            .195:
22106 574B           2C                     02  sub	al,*2
22107 574D           74           AE            je 	.198
22108 574F           2C                     01  sub	al,*1
22109 5751         0F84         FF7E            beq 	.197
22110 5755           2C                     01  sub	al,*1
22111 5757         0F84         FF78            beq 	.196
22112 575B           2C                     01  sub	al,*1
22113 575D           74           C7            je 	.199
22114                       0000575F            .193:
22115                       FFFFFFEE            ..FFFA	=	-$12
22116                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22117 575F           8A46         FE            mov	al,-2[bp]
22118 5762           40                         inc	ax
22119 5763           8846         FE            mov	-2[bp],al
22120                                           !BCC_EOS
22121                                           ! 2569     }
22122                                           ! 2570   }
22123                       00005766            .191:
22124                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22125 5766           8B46         0A            mov	ax,$A[bp]
22126 5769           48                         dec	ax
22127 576A           8946         0A            mov	$A[bp],ax
22128                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22129 576D           3D                   FFFF  cmp	ax,*-1
22130 5770           74           0C            je  	.19A
22131                       00005772            .19B:
22132                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22133 5772           8A46         FE            mov	al,-2[bp]
22134 5775           30E4                       xor	ah,ah
22135 5777           3B46         F8            cmp	ax,-8[bp]
22136 577A         0F82         FF41            blo 	.192
22137                       0000577E            .19A:
22138                       0000577E            .190:
22139                                           ! 2571 }
22140                       0000577E            .18F:
22141 577E           89EC                       mov	sp,bp
22142 5780           5D                         pop	bp
22143 5781           C3                         ret
22144                                           ! 2572 static void biosfn_write_char_only (car,page,attr,count)
22145                                           ! Register BX used in function biosfn_write_char_attr
22146                                           ! 2573 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22147                       00005782            _biosfn_write_char_only:
22148                                           !BCC_EOS
22149                                           !BCC_EOS
22150                                           !BCC_EOS
22151                                           !BCC_EOS
22152                                           ! 2574 {
22153                                           ! 2575  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22154                                           !BCC_EOS
22155                                           ! 2576  Bit16u nbcols,nbrows,address;
22156                                           !BCC_EOS
22157                                           ! 2577  Bit16u cursor,dummy;
22158                                           !BCC_EOS
22159                                           ! 2578  mode=read_byte(0x40,0x49);
22160 5782           55                         push	bp
22161 5783           89E5                       mov	bp,sp
22162 5785           83C4                   F0  add	sp,*-$10
22163                                           ! Debug: list int = const $49 (used reg = )
22164 5788           B8                   0049  mov	ax,*$49
22165 578B           50                         push	ax
22166                                           ! Debug: list int = const $40 (used reg = )
22167 578C           B8                   0040  mov	ax,*$40
22168 578F           50                         push	ax
22169                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22170 5790           E8         2458            call	_read_byte
22171 5793           83C4                   04  add	sp,*4
22172                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22173 5796           8846         FC            mov	-4[bp],al
22174                                           !BCC_EOS
22175                                           ! 2579  line=find_vga_entry(mode);
22176                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22177 5799           8A46         FC            mov	al,-4[bp]
22178 579C           30E4                       xor	ah,ah
22179 579E           50                         push	ax
22180                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22181 579F           E8         235D            call	_find_vga_entry
22182 57A2           44                         inc	sp
22183 57A3           44                         inc	sp
22184                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22185 57A4           8846         FB            mov	-5[bp],al
22186                                           !BCC_EOS
22187                                           ! 2580  if(line==0xFF)return;
22188                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22189 57A7           8A46         FB            mov	al,-5[bp]
22190 57AA           3C                     FF  cmp	al,#$FF
22191 57AC           75           04            jne 	.19C
22192                       000057AE            .19D:
22193 57AE           89EC                       mov	sp,bp
22194 57B0           5D                         pop	bp
22195 57B1           C3                         ret
22196                                           !BCC_EOS
22197                                           ! 2581  biosfn_get_cursor_pos(page,&dummy,&cursor);
22198                       000057B2            .19C:
22199                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22200 57B2           8D5E         F2            lea	bx,-$E[bp]
22201 57B5           53                         push	bx
22202                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22203 57B6           8D5E         F0            lea	bx,-$10[bp]
22204 57B9           53                         push	bx
22205                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22206 57BA           8A46         06            mov	al,6[bp]
22207 57BD           30E4                       xor	ah,ah
22208 57BF           50                         push	ax
22209                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22210 57C0           E8         EC87            call	_biosfn_get_cursor_pos
22211 57C3           83C4                   06  add	sp,*6
22212                                           !BCC_EOS
22213                                           ! 2582  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22214                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22215 57C6           8A46         F2            mov	al,-$E[bp]
22216                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22217 57C9           8846         FE            mov	-2[bp],al
22218                                           !BCC_EOS
22219                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22220 57CC           8B46         F2            mov	ax,-$E[bp]
22221 57CF           30C0                       xor	al,al
22222                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22223 57D1           88E0                       mov	al,ah
22224 57D3           30E4                       xor	ah,ah
22225                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22226 57D5           8846         FD            mov	-3[bp],al
22227                                           !BCC_EOS
22228                                           ! 2583  nbrows=read_byte(0x40,0x84)+1;
22229                                           ! Debug: list int = const $84 (used reg = )
22230 57D8           B8                   0084  mov	ax,#$84
22231 57DB           50                         push	ax
22232                                           ! Debug: list int = const $40 (used reg = )
22233 57DC           B8                   0040  mov	ax,*$40
22234 57DF           50                         push	ax
22235                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22236 57E0           E8         2408            call	_read_byte
22237 57E3           83C4                   04  add	sp,*4
22238                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22239 57E6           30E4                       xor	ah,ah
22240                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22241 57E8           40                         inc	ax
22242 57E9           8946         F6            mov	-$A[bp],ax
22243                                           !BCC_EOS
22244                                           ! 2584  nbcols=read_word(0x40,0x4A);
22245                                           ! Debug: list int = const $4A (used reg = )
22246 57EC           B8                   004A  mov	ax,*$4A
22247 57EF           50                         push	ax
22248                                           ! Debug: list int = const $40 (used reg = )
22249 57F0           B8                   0040  mov	ax,*$40
22250 57F3           50                         push	ax
22251                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22252 57F4           E8         2407            call	_read_word
22253 57F7           83C4                   04  add	sp,*4
22254                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22255 57FA           8946         F8            mov	-8[bp],ax
22256                                           !BCC_EOS
22257                                           ! 2585  if(vga_modes[line].class==0x00)
22258                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22259 57FD           8A46         FB            mov	al,-5[bp]
22260 5800           30E4                       xor	ah,ah
22261 5802           B1                     03  mov	cl,*3
22262 5804           D3E0                       shl	ax,cl
22263 5806           89C3                       mov	bx,ax
22264 5808           81C3                 01FD  add	bx,#_vga_modes
22265                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22266 580C           8A47         01            mov	al,1[bx]
22267 580F           84C0                       test	al,al
22268 5811           75           6E            jne 	.19E
22269                       00005813            .19F:
22270                                           ! 2586   {
22271                                           ! 2587    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22272                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22273 5813           8A46         FD            mov	al,-3[bp]
22274 5816           30E4                       xor	ah,ah
22275 5818           8B4E         F8            mov	cx,-8[bp]
22276 581B           F7E9                       imul	cx
22277                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22278                                           ! Debug: expression subtree swapping
22279 581D           0246         FE            add	al,-2[bp]
22280 5820           80D4                   00  adc	ah,*0
22281                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22282 5823           D1E0                       shl	ax,*1
22283 5825           50                         push	ax
22284                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22285 5826           8B46         F8            mov	ax,-8[bp]
22286 5829           8B4E         F6            mov	cx,-$A[bp]
22287 582C           F7E9                       imul	cx
22288                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22289 582E           D1E0                       shl	ax,*1
22290                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22291 5830           0C                     FF  or	al,#$FF
22292                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22293                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22294 5832           89C3                       mov	bx,ax
22295 5834           8A46         06            mov	al,6[bp]
22296 5837           30E4                       xor	ah,ah
22297 5839           93                         xchg	ax,bx
22298 583A           40                         inc	ax
22299 583B           89D9                       mov	cx,bx
22300 583D           F7E9                       imul	cx
22301                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22302 583F           0346         EE            add	ax,-$12[bp]
22303 5842           44                         inc	sp
22304 5843           44                         inc	sp
22305                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22306 5844           8946         F4            mov	-$C[bp],ax
22307                                           !BCC_EOS
22308                                           ! 2588    while(count-->0)
22309                                           ! 2589     {write_byte(vga_modes[line].sstart,address,car);
22310 5847           EB           29            jmp .1A1
22311                       00005849            .1A2:
22312                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22313 5849           8A46         04            mov	al,4[bp]
22314 584C           30E4                       xor	ah,ah
22315 584E           50                         push	ax
22316                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22317 584F           FF76         F4            push	-$C[bp]
22318                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
22319 5852           8A46         FB            mov	al,-5[bp]
22320 5855           30E4                       xor	ah,ah
22321 5857           B1                     03  mov	cl,*3
22322 5859           D3E0                       shl	ax,cl
22323 585B           89C3                       mov	bx,ax
22324 585D           81C3                 01FD  add	bx,#_vga_modes
22325                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22326 5861           FF77         04            push	4[bx]
22327                                           ! Debug: func () void = write_byte+0 (used reg = )
22328 5864           E8         23AA            call	_write_byte
22329 5867           83C4                   06  add	sp,*6
22330                                           !BCC_EOS
22331                                           ! 2590      address+=2;
22332                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22333 586A           8B46         F4            mov	ax,-$C[bp]
22334 586D           40                         inc	ax
22335 586E           40                         inc	ax
22336 586F           8946         F4            mov	-$C[bp],ax
22337                                           !BCC_EOS
22338                                           ! 2591     }
22339                                           ! 2592   }
22340                       00005872            .1A1:
22341                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22342 5872           8B46         0A            mov	ax,$A[bp]
22343 5875           48                         dec	ax
22344 5876           8946         0A            mov	$A[bp],ax
22345                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22346 5879           3D                   FFFF  cmp	ax,*-1
22347 587C           75           CB            jne	.1A2
22348                       0000587E            .1A3:
22349                       0000587E            .1A0:
22350                                           ! 2593  else
22351                                           ! 2594   {
22352 587E           E9         00F3            br 	.1A4
22353                       00005881            .19E:
22354                                           ! 2595    cheight=video_param_table[line_to_vpti[line]].cheight;
22355                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22356 5881           8A46         FB            mov	al,-5[bp]
22357 5884           30E4                       xor	ah,ah
22358 5886           89C3                       mov	bx,ax
22359                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22360 5888           8A87       027D            mov	al,_line_to_vpti[bx]
22361 588C           30E4                       xor	ah,ah
22362 588E           B1                     06  mov	cl,*6
22363 5890           D3E0                       shl	ax,cl
22364 5892           89C3                       mov	bx,ax
22365 5894           81C3                 0291  add	bx,#_video_param_table
22366                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22367 5898           8A47         02            mov	al,2[bx]
22368 589B           8846         FF            mov	-1[bp],al
22369                                           !BCC_EOS
22370                                           ! 2596    bpp=vga_modes[line].pixbits;
22371                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22372 589E           8A46         FB            mov	al,-5[bp]
22373 58A1           30E4                       xor	ah,ah
22374 58A3           B1                     03  mov	cl,*3
22375 58A5           D3E0                       shl	ax,cl
22376 58A7           89C3                       mov	bx,ax
22377 58A9           81C3                 01FD  add	bx,#_vga_modes
22378                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22379 58AD           8A47         03            mov	al,3[bx]
22380 58B0           8846         FA            mov	-6[bp],al
22381                                           !BCC_EOS
22382                                           ! 2597    while((count-->0) && (xcurs<nbcols))
22383                                           ! 2598     {
22384 58B3           E9         00A6            br 	.1A6
22385                       000058B6            .1A7:
22386                                           ! 2599      switch(vga_modes[line].memmodel)
22387                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22388 58B6           8A46         FB            mov	al,-5[bp]
22389 58B9           30E4                       xor	ah,ah
22390 58BB           B1                     03  mov	cl,*3
22391 58BD           D3E0                       shl	ax,cl
22392 58BF           89C3                       mov	bx,ax
22393 58C1           81C3                 01FD  add	bx,#_vga_modes
22394 58C5           8A47         02            mov	al,2[bx]
22395                                           ! 2600       {
22396 58C8           EB           77            jmp .1AA
22397                                           ! 2601        case 0x04:
22398                                           ! 2602        case 0x03:
22399                       000058CA            .1AB:
22400                                           ! 2603          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22401                       000058CA            .1AC:
22402                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22403 58CA           8A46         FF            mov	al,-1[bp]
22404 58CD           30E4                       xor	ah,ah
22405 58CF           50                         push	ax
22406                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22407 58D0           FF76         F8            push	-8[bp]
22408                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22409 58D3           8A46         FD            mov	al,-3[bp]
22410 58D6           30E4                       xor	ah,ah
22411 58D8           50                         push	ax
22412                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22413 58D9           8A46         FE            mov	al,-2[bp]
22414 58DC           30E4                       xor	ah,ah
22415 58DE           50                         push	ax
22416                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22417 58DF           8A46         08            mov	al,8[bp]
22418 58E2           30E4                       xor	ah,ah
22419 58E4           50                         push	ax
22420                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22421 58E5           8A46         04            mov	al,4[bp]
22422 58E8           30E4                       xor	ah,ah
22423 58EA           50                         push	ax
22424                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22425 58EB           E8         F855            call	_write_gfx_char_pl4
22426 58EE           83C4                   0C  add	sp,*$C
22427                                           !BCC_EOS
22428                                           ! 2604          break;
22429 58F1           EB           62            jmp .1A8
22430                                           !BCC_EOS
22431                                           ! 2605        case 0x02:
22432                                           ! 2606          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22433                       000058F3            .1AD:
22434                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22435 58F3           8A46         FA            mov	al,-6[bp]
22436 58F6           30E4                       xor	ah,ah
22437 58F8           50                         push	ax
22438                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22439 58F9           FF76         F8            push	-8[bp]
22440                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22441 58FC           8A46         FD            mov	al,-3[bp]
22442 58FF           30E4                       xor	ah,ah
22443 5901           50                         push	ax
22444                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22445 5902           8A46         FE            mov	al,-2[bp]
22446 5905           30E4                       xor	ah,ah
22447 5907           50                         push	ax
22448                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22449 5908           8A46         08            mov	al,8[bp]
22450 590B           30E4                       xor	ah,ah
22451 590D           50                         push	ax
22452                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22453 590E           8A46         04            mov	al,4[bp]
22454 5911           30E4                       xor	ah,ah
22455 5913           50                         push	ax
22456                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22457 5914           E8         F99F            call	_write_gfx_char_cga
22458 5917           83C4                   0C  add	sp,*$C
22459                                           !BCC_EOS
22460                                           ! 2607          break;
22461 591A           EB           39            jmp .1A8
22462                                           !BCC_EOS
22463                                           ! 2608        case 0x05:
22464                                           ! 2609          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22465                       0000591C            .1AE:
22466                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22467 591C           FF76         F8            push	-8[bp]
22468                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22469 591F           8A46         FD            mov	al,-3[bp]
22470 5922           30E4                       xor	ah,ah
22471 5924           50                         push	ax
22472                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22473 5925           8A46         FE            mov	al,-2[bp]
22474 5928           30E4                       xor	ah,ah
22475 592A           50                         push	ax
22476                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22477 592B           8A46         08            mov	al,8[bp]
22478 592E           30E4                       xor	ah,ah
22479 5930           50                         push	ax
22480                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22481 5931           8A46         04            mov	al,4[bp]
22482 5934           30E4                       xor	ah,ah
22483 5936           50                         push	ax
22484                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22485 5937           E8         FB7F            call	_write_gfx_char_lin
22486 593A           83C4                   0A  add	sp,*$A
22487                                           !BCC_EOS
22488                                           ! 2610          break;
22489 593D           EB           16            jmp .1A8
22490                                           !BCC_EOS
22491                                           ! 2611       }
22492                                           ! 2612      xcurs++;
22493 593F           EB           14            jmp .1A8
22494                       00005941            .1AA:
22495 5941           2C                     02  sub	al,*2
22496 5943           74           AE            je 	.1AD
22497 5945           2C                     01  sub	al,*1
22498 5947         0F84         FF7F            beq 	.1AC
22499 594B           2C                     01  sub	al,*1
22500 594D         0F84         FF79            beq 	.1AB
22501 5951           2C                     01  sub	al,*1
22502 5953           74           C7            je 	.1AE
22503                       00005955            .1A8:
22504                       FFFFFFEE            ..FFF9	=	-$12
22505                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22506 5955           8A46         FE            mov	al,-2[bp]
22507 5958           40                         inc	ax
22508 5959           8846         FE            mov	-2[bp],al
22509                                           !BCC_EOS
22510                                           ! 2613     }
22511                                           ! 2614   }
22512                       0000595C            .1A6:
22513                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22514 595C           8B46         0A            mov	ax,$A[bp]
22515 595F           48                         dec	ax
22516 5960           8946         0A            mov	$A[bp],ax
22517                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22518 5963           3D                   FFFF  cmp	ax,*-1
22519 5966           74           0C            je  	.1AF
22520                       00005968            .1B0:
22521                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22522 5968           8A46         FE            mov	al,-2[bp]
22523 596B           30E4                       xor	ah,ah
22524 596D           3B46         F8            cmp	ax,-8[bp]
22525 5970         0F82         FF42            blo 	.1A7
22526                       00005974            .1AF:
22527                       00005974            .1A5:
22528                                           ! 2615 }
22529                       00005974            .1A4:
22530 5974           89EC                       mov	sp,bp
22531 5976           5D                         pop	bp
22532 5977           C3                         ret
22533                                           ! 2616 #asm
22534                                           !BCC_ASM
22535                       00000008            _biosfn_write_char_only.count	set	8
22536                       00000006            _biosfn_write_char_only.attr	set	6
22537                       00000004            _biosfn_write_char_only.page	set	4
22538                       00000002            _biosfn_write_char_only.car	set	2
22539                       00005978            biosfn_group_0B:
22540 5978           80FF                   00    cmp bh, #0x00
22541 597B           74           06              je biosfn_set_border_color
22542 597D           80FF                   01    cmp bh, #0x01
22543 5980           74           40              je biosfn_set_palette
22544 5982           C3                           ret
22545                       00005983            biosfn_set_border_color:
22546 5983           50                           push ax
22547 5984           53                           push bx
22548 5985           51                           push cx
22549 5986           52                           push dx
22550 5987           BA                   03DA    mov dx, # 0x3da
22551 598A           EC                           in al, dx
22552 598B           BA                   03C0    mov dx, # 0x3c0
22553 598E           B0                     00    mov al, #0x00
22554 5990           EE                           out dx, al
22555 5991           88D8                         mov al, bl
22556 5993           24                     0F    and al, #0x0f
22557 5995           A8                     08    test al, #0x08
22558 5997           74           02              jz set_low_border
22559 5999           04                     08    add al, #0x08
22560                       0000599B            set_low_border:
22561 599B           EE                           out dx, al
22562 599C           B1                     01    mov cl, #0x01
22563 599E           80E3                   10    and bl, #0x10
22564                       000059A1            set_intensity_loop:
22565 59A1           BA                   03C0    mov dx, # 0x3c0
22566 59A4           88C8                         mov al, cl
22567 59A6           EE                           out dx, al
22568 59A7           BA                   03C1    mov dx, # 0x3c1
22569 59AA           EC                           in al, dx
22570 59AB           24                     EF    and al, #0xef
22571 59AD           08D8                         or al, bl
22572 59AF           BA                   03C0    mov dx, # 0x3c0
22573 59B2           EE                           out dx, al
22574 59B3           FEC1                         inc cl
22575 59B5           80F9                   04    cmp cl, #0x04
22576 59B8           75           E7              jne set_intensity_loop
22577 59BA           B0                     20    mov al, #0x20
22578 59BC           EE                           out dx, al
22579 59BD           5A                           pop dx
22580 59BE           59                           pop cx
22581 59BF           5B                           pop bx
22582 59C0           58                           pop ax
22583 59C1           C3                           ret
22584                       000059C2            biosfn_set_palette:
22585 59C2           50                           push ax
22586 59C3           53                           push bx
22587 59C4           51                           push cx
22588 59C5           52                           push dx
22589 59C6           BA                   03DA    mov dx, # 0x3da
22590 59C9           EC                           in al, dx
22591 59CA           B1                     01    mov cl, #0x01
22592 59CC           80E3                   01    and bl, #0x01
22593                       000059CF            set_cga_palette_loop:
22594 59CF           BA                   03C0    mov dx, # 0x3c0
22595 59D2           88C8                         mov al, cl
22596 59D4           EE                           out dx, al
22597 59D5           BA                   03C1    mov dx, # 0x3c1
22598 59D8           EC                           in al, dx
22599 59D9           24                     FE    and al, #0xfe
22600 59DB           08D8                         or al, bl
22601 59DD           BA                   03C0    mov dx, # 0x3c0
22602 59E0           EE                           out dx, al
22603 59E1           FEC1                         inc cl
22604 59E3           80F9                   04    cmp cl, #0x04
22605 59E6           75           E7              jne set_cga_palette_loop
22606 59E8           B0                     20    mov al, #0x20
22607 59EA           EE                           out dx, al
22608 59EB           5A                           pop dx
22609 59EC           59                           pop cx
22610 59ED           5B                           pop bx
22611 59EE           58                           pop ax
22612 59EF           C3                           ret
22613                                           ! 2691 endasm
22614                                           !BCC_ENDASM
22615                                           ! 2692 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22616                                           ! Register BX used in function biosfn_write_char_only
22617                       000059F0            _biosfn_write_pixel:
22618                                           !BCC_EOS
22619                                           !BCC_EOS
22620                                           !BCC_EOS
22621                                           !BCC_EOS
22622                                           ! 2693 {
22623                                           ! 2694  Bit8u mode,line,mask,attr,data;
22624                                           !BCC_EOS
22625                                           ! 2695  Bit16u addr;
22626                                           !BCC_EOS
22627                                           ! 2696  mode=read_byte(0x40,0x49);
22628 59F0           55                         push	bp
22629 59F1           89E5                       mov	bp,sp
22630 59F3           83C4                   F8  add	sp,*-8
22631                                           ! Debug: list int = const $49 (used reg = )
22632 59F6           B8                   0049  mov	ax,*$49
22633 59F9           50                         push	ax
22634                                           ! Debug: list int = const $40 (used reg = )
22635 59FA           B8                   0040  mov	ax,*$40
22636 59FD           50                         push	ax
22637                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22638 59FE           E8         21EA            call	_read_byte
22639 5A01           83C4                   04  add	sp,*4
22640                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22641 5A04           8846         FF            mov	-1[bp],al
22642                                           !BCC_EOS
22643                                           ! 2697  line=find_vga_entry(mode);
22644                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22645 5A07           8A46         FF            mov	al,-1[bp]
22646 5A0A           30E4                       xor	ah,ah
22647 5A0C           50                         push	ax
22648                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22649 5A0D           E8         20EF            call	_find_vga_entry
22650 5A10           44                         inc	sp
22651 5A11           44                         inc	sp
22652                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22653 5A12           8846         FE            mov	-2[bp],al
22654                                           !BCC_EOS
22655                                           ! 2698  if(line==0xFF)return;
22656                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22657 5A15           8A46         FE            mov	al,-2[bp]
22658 5A18           3C                     FF  cmp	al,#$FF
22659 5A1A           75           04            jne 	.1B1
22660                       00005A1C            .1B2:
22661 5A1C           89EC                       mov	sp,bp
22662 5A1E           5D                         pop	bp
22663 5A1F           C3                         ret
22664                                           !BCC_EOS
22665                                           ! 2699  if(vga_modes[line].class==0x00)return;
22666                       00005A20            .1B1:
22667                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22668 5A20           8A46         FE            mov	al,-2[bp]
22669 5A23           30E4                       xor	ah,ah
22670 5A25           B1                     03  mov	cl,*3
22671 5A27           D3E0                       shl	ax,cl
22672 5A29           89C3                       mov	bx,ax
22673 5A2B           81C3                 01FD  add	bx,#_vga_modes
22674                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22675 5A2F           8A47         01            mov	al,1[bx]
22676 5A32           84C0                       test	al,al
22677 5A34           75           04            jne 	.1B3
22678                       00005A36            .1B4:
22679 5A36           89EC                       mov	sp,bp
22680 5A38           5D                         pop	bp
22681 5A39           C3                         ret
22682                                           !BCC_EOS
22683                                           ! 2700  switch(vga_modes[line].memmodel)
22684                       00005A3A            .1B3:
22685                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22686 5A3A           8A46         FE            mov	al,-2[bp]
22687 5A3D           30E4                       xor	ah,ah
22688 5A3F           B1                     03  mov	cl,*3
22689 5A41           D3E0                       shl	ax,cl
22690 5A43           89C3                       mov	bx,ax
22691 5A45           81C3                 01FD  add	bx,#_vga_modes
22692 5A49           8A47         02            mov	al,2[bx]
22693                                           ! 2701   {
22694 5A4C           E9         0223            br 	.1B7
22695                                           ! 2702    case 0x04:
22696                                           ! 2703    case 0x03:
22697                       00005A4F            .1B8:
22698                                           ! 2704      addr = CX/8+DX*read_word(0x40,0x4A);
22699                       00005A4F            .1B9:
22700                                           ! Debug: list int = const $4A (used reg = )
22701 5A4F           B8                   004A  mov	ax,*$4A
22702 5A52           50                         push	ax
22703                                           ! Debug: list int = const $40 (used reg = )
22704 5A53           B8                   0040  mov	ax,*$40
22705 5A56           50                         push	ax
22706                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22707 5A57           E8         21A4            call	_read_word
22708 5A5A           83C4                   04  add	sp,*4
22709                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22710                                           ! Debug: expression subtree swapping
22711 5A5D           8B4E         0A            mov	cx,$A[bp]
22712 5A60           F7E9                       imul	cx
22713 5A62           50                         push	ax
22714                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22715 5A63           8B46         08            mov	ax,8[bp]
22716 5A66           B1                     03  mov	cl,*3
22717 5A68           D3E8                       shr	ax,cl
22718                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22719 5A6A           0346         F6            add	ax,0+..FFF8[bp]
22720 5A6D           44                         inc	sp
22721 5A6E           44                         inc	sp
22722                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22723 5A6F           8946         F8            mov	-8[bp],ax
22724                                           !BCC_EOS
22725                                           ! 2705      mask = 0x80 >> (CX & 0x07);
22726                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22727 5A72           8A46         08            mov	al,8[bp]
22728 5A75           24                     07  and	al,*7
22729                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22730 5A77           30E4                       xor	ah,ah
22731 5A79           89C3                       mov	bx,ax
22732 5A7B           B8                   0080  mov	ax,#$80
22733 5A7E           89D9                       mov	cx,bx
22734 5A80           D3F8                       sar	ax,cl
22735                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22736 5A82           8846         FD            mov	-3[bp],al
22737                                           !BCC_EOS
22738                                           ! 2706      outw(0x3ce, (mask << 8) | 0x08);
22739                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22740 5A85           8A46         FD            mov	al,-3[bp]
22741 5A88           30E4                       xor	ah,ah
22742 5A8A           88C4                       mov	ah,al
22743 5A8C           30C0                       xor	al,al
22744                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22745 5A8E           0C                     08  or	al,*8
22746                                           ! Debug: list unsigned int = ax+0 (used reg = )
22747 5A90           50                         push	ax
22748                                           ! Debug: list int = const $3CE (used reg = )
22749 5A91           B8                   03CE  mov	ax,#$3CE
22750 5A94           50                         push	ax
22751                                           ! Debug: func () void = outw+0 (used reg = )
22752 5A95           E8         21CF            call	_outw
22753 5A98           83C4                   04  add	sp,*4
22754                                           !BCC_EOS
22755                                           ! 2707      outw(0x3ce, 0x0205);
22756                                           ! Debug: list int = const $205 (used reg = )
22757 5A9B           B8                   0205  mov	ax,#$205
22758 5A9E           50                         push	ax
22759                                           ! Debug: list int = const $3CE (used reg = )
22760 5A9F           B8                   03CE  mov	ax,#$3CE
22761 5AA2           50                         push	ax
22762                                           ! Debug: func () void = outw+0 (used reg = )
22763 5AA3           E8         21C1            call	_outw
22764 5AA6           83C4                   04  add	sp,*4
22765                                           !BCC_EOS
22766                                           ! 2708      data = read_byte(0xa000,addr);
22767                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22768 5AA9           FF76         F8            push	-8[bp]
22769                                           ! Debug: list unsigned int = const $A000 (used reg = )
22770 5AAC           B8                   A000  mov	ax,#$A000
22771 5AAF           50                         push	ax
22772                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22773 5AB0           E8         2138            call	_read_byte
22774 5AB3           83C4                   04  add	sp,*4
22775                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22776 5AB6           8846         FB            mov	-5[bp],al
22777                                           !BCC_EOS
22778                                           ! 2709      if (AL & 0x80)
22779                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22780 5AB9           8A46         06            mov	al,6[bp]
22781 5ABC           24                     80  and	al,#$80
22782 5ABE           84C0                       test	al,al
22783 5AC0           74           0E            je  	.1BA
22784                       00005AC2            .1BB:
22785                                           ! 2710       {
22786                                           ! 2711        outw(0x3ce, 0x1803);
22787                                           ! Debug: list int = const $1803 (used reg = )
22788 5AC2           B8                   1803  mov	ax,#$1803
22789 5AC5           50                         push	ax
22790                                           ! Debug: list int = const $3CE (used reg = )
22791 5AC6           B8                   03CE  mov	ax,#$3CE
22792 5AC9           50                         push	ax
22793                                           ! Debug: func () void = outw+0 (used reg = )
22794 5ACA           E8         219A            call	_outw
22795 5ACD           83C4                   04  add	sp,*4
22796                                           !BCC_EOS
22797                                           ! 2712       }
22798                                           ! 2713      write_byte(0xa000,addr,AL);
22799                       00005AD0            .1BA:
22800                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22801 5AD0           8A46         06            mov	al,6[bp]
22802 5AD3           30E4                       xor	ah,ah
22803 5AD5           50                         push	ax
22804                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22805 5AD6           FF76         F8            push	-8[bp]
22806                                           ! Debug: list unsigned int = const $A000 (used reg = )
22807 5AD9           B8                   A000  mov	ax,#$A000
22808 5ADC           50                         push	ax
22809                                           ! Debug: func () void = write_byte+0 (used reg = )
22810 5ADD           E8         2131            call	_write_byte
22811 5AE0           83C4                   06  add	sp,*6
22812                                           !BCC_EOS
22813                                           ! 2714 #asm
22814                                           !BCC_EOS
22815                                           !BCC_ASM
22816                       0000000C            _biosfn_write_pixel.BH	set	$C
22817                       00000004            .biosfn_write_pixel.BH	set	4
22818                       00000010            _biosfn_write_pixel.CX	set	$10
22819                       00000008            .biosfn_write_pixel.CX	set	8
22820                       00000006            _biosfn_write_pixel.line	set	6
22821                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22822                       0000000E            _biosfn_write_pixel.AL	set	$E
22823                       00000006            .biosfn_write_pixel.AL	set	6
22824                       00000003            _biosfn_write_pixel.data	set	3
22825                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22826                       00000012            _biosfn_write_pixel.DX	set	$12
22827                       0000000A            .biosfn_write_pixel.DX	set	$A
22828                       00000005            _biosfn_write_pixel.mask	set	5
22829                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22830                       00000004            _biosfn_write_pixel.attr	set	4
22831                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22832                       00000007            _biosfn_write_pixel.mode	set	7
22833                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22834                       00000000            _biosfn_write_pixel.addr	set	0
22835                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22836 5AE3           BA                   03CE       mov dx, # 0x3ce
22837 5AE6           B8                   FF08       mov ax, #0xff08
22838 5AE9           EF                              out dx, ax
22839 5AEA           B8                   0005       mov ax, #0x0005
22840 5AED           EF                              out dx, ax
22841 5AEE           B8                   0003       mov ax, #0x0003
22842 5AF1           EF                              out dx, ax
22843                                           ! 2722 endasm
22844                                           !BCC_ENDASM
22845                                           !BCC_EOS
22846                                           ! 2723      break;
22847 5AF2           E9         0193            br 	.1B5
22848                                           !BCC_EOS
22849                                           ! 2724    case 0x02:
22850                                           ! 2725      if(vga_modes[line].pixbits==2)
22851                       00005AF5            .1BC:
22852                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22853 5AF5           8A46         FE            mov	al,-2[bp]
22854 5AF8           30E4                       xor	ah,ah
22855 5AFA           B1                     03  mov	cl,*3
22856 5AFC           D3E0                       shl	ax,cl
22857 5AFE           89C3                       mov	bx,ax
22858 5B00           81C3                 01FD  add	bx,#_vga_modes
22859                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22860 5B04           8A47         03            mov	al,3[bx]
22861 5B07           3C                     02  cmp	al,*2
22862 5B09           75           1C            jne 	.1BD
22863                       00005B0B            .1BE:
22864                                           ! 2726       {
22865                                           ! 2727        addr=(CX>>2)+(DX>>1)*80;
22866                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22867 5B0B           8B46         0A            mov	ax,$A[bp]
22868 5B0E           D1E8                       shr	ax,*1
22869                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22870 5B10           B9                   0050  mov	cx,*$50
22871 5B13           F7E9                       imul	cx
22872 5B15           50                         push	ax
22873                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22874 5B16           8B46         08            mov	ax,8[bp]
22875 5B19           D1E8                       shr	ax,*1
22876 5B1B           D1E8                       shr	ax,*1
22877                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22878 5B1D           0346         F6            add	ax,0+..FFF8[bp]
22879 5B20           44                         inc	sp
22880 5B21           44                         inc	sp
22881                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22882 5B22           8946         F8            mov	-8[bp],ax
22883                                           !BCC_EOS
22884                                           ! 2728       }
22885                                           ! 2729      else
22886                                           ! 2730       {
22887 5B25           EB           1A            jmp .1BF
22888                       00005B27            .1BD:
22889                                           ! 2731        addr=(CX>>3)+(DX>>1)*80;
22890                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22891 5B27           8B46         0A            mov	ax,$A[bp]
22892 5B2A           D1E8                       shr	ax,*1
22893                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22894 5B2C           B9                   0050  mov	cx,*$50
22895 5B2F           F7E9                       imul	cx
22896 5B31           50                         push	ax
22897                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22898 5B32           8B46         08            mov	ax,8[bp]
22899 5B35           B1                     03  mov	cl,*3
22900 5B37           D3E8                       shr	ax,cl
22901                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22902 5B39           0346         F6            add	ax,0+..FFF8[bp]
22903 5B3C           44                         inc	sp
22904 5B3D           44                         inc	sp
22905                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22906 5B3E           8946         F8            mov	-8[bp],ax
22907                                           !BCC_EOS
22908                                           ! 2732       }
22909                                           ! 2733      if (DX & 1) addr += 0x2000;
22910                       00005B41            .1BF:
22911                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22912 5B41           8A46         0A            mov	al,$A[bp]
22913 5B44           24                     01  and	al,*1
22914 5B46           84C0                       test	al,al
22915 5B48           74           09            je  	.1C0
22916                       00005B4A            .1C1:
22917                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22918 5B4A           8B46         F8            mov	ax,-8[bp]
22919 5B4D           05                   2000  add	ax,#$2000
22920 5B50           8946         F8            mov	-8[bp],ax
22921                                           !BCC_EOS
22922                                           ! 2734      data = read_byte(0xb800,addr);
22923                       00005B53            .1C0:
22924                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22925 5B53           FF76         F8            push	-8[bp]
22926                                           ! Debug: list unsigned int = const $B800 (used reg = )
22927 5B56           B8                   B800  mov	ax,#$B800
22928 5B59           50                         push	ax
22929                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22930 5B5A           E8         208E            call	_read_byte
22931 5B5D           83C4                   04  add	sp,*4
22932                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22933 5B60           8846         FB            mov	-5[bp],al
22934                                           !BCC_EOS
22935                                           ! 2735      if(vga_modes[line].pixbits==2)
22936                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22937 5B63           8A46         FE            mov	al,-2[bp]
22938 5B66           30E4                       xor	ah,ah
22939 5B68           B1                     03  mov	cl,*3
22940 5B6A           D3E0                       shl	ax,cl
22941 5B6C           89C3                       mov	bx,ax
22942 5B6E           81C3                 01FD  add	bx,#_vga_modes
22943                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22944 5B72           8A47         03            mov	al,3[bx]
22945 5B75           3C                     02  cmp	al,*2
22946 5B77           75           46            jne 	.1C2
22947                       00005B79            .1C3:
22948                                           ! 2736       {
22949                                           ! 2737    
22950                                           ! 2737     attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22951                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22952 5B79           8A46         08            mov	al,8[bp]
22953 5B7C           24                     03  and	al,*3
22954                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22955 5B7E           50                         push	ax
22956 5B7F           B8                   0003  mov	ax,*3
22957 5B82           2A46         F6            sub	al,0+..FFF8[bp]
22958 5B85           80DC                   00  sbb	ah,*0
22959 5B88           44                         inc	sp
22960 5B89           44                         inc	sp
22961                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22962 5B8A           D1E0                       shl	ax,*1
22963 5B8C           50                         push	ax
22964                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22965 5B8D           8A46         06            mov	al,6[bp]
22966 5B90           24                     03  and	al,*3
22967                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22968 5B92           30E4                       xor	ah,ah
22969 5B94           8B4E         F6            mov	cx,0+..FFF8[bp]
22970 5B97           D3E0                       shl	ax,cl
22971 5B99           44                         inc	sp
22972 5B9A           44                         inc	sp
22973                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22974 5B9B           8846         FC            mov	-4[bp],al
22975                                           !BCC_EOS
22976                                           ! 2738        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
22977                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22978 5B9E           8A46         08            mov	al,8[bp]
22979 5BA1           24                     03  and	al,*3
22980                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22981 5BA3           50                         push	ax
22982 5BA4           B8                   0003  mov	ax,*3
22983 5BA7           2A46         F6            sub	al,0+..FFF8[bp]
22984 5BAA           80DC                   00  sbb	ah,*0
22985 5BAD           44                         inc	sp
22986 5BAE           44                         inc	sp
22987                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22988 5BAF           D1E0                       shl	ax,*1
22989                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
22990 5BB1           89C3                       mov	bx,ax
22991 5BB3           B8                   0003  mov	ax,*3
22992 5BB6           89D9                       mov	cx,bx
22993 5BB8           D3E0                       shl	ax,cl
22994                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22995 5BBA           8846         FD            mov	-3[bp],al
22996                                           !BCC_EOS
22997                                           ! 2739       }
22998                                           ! 2740      else
22999                                           ! 2741       {
23000 5BBD           EB           40            jmp .1C4
23001                       00005BBF            .1C2:
23002                                           ! 2742        attr = (AL & 0x01) << (7 - (CX & 0x07));
23003                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23004 5BBF           8A46         08            mov	al,8[bp]
23005 5BC2           24                     07  and	al,*7
23006                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23007 5BC4           50                         push	ax
23008 5BC5           B8                   0007  mov	ax,*7
23009 5BC8           2A46         F6            sub	al,0+..FFF8[bp]
23010 5BCB           80DC                   00  sbb	ah,*0
23011 5BCE           44                         inc	sp
23012 5BCF           44                         inc	sp
23013 5BD0           50                         push	ax
23014                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
23015 5BD1           8A46         06            mov	al,6[bp]
23016 5BD4           24                     01  and	al,*1
23017                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23018 5BD6           30E4                       xor	ah,ah
23019 5BD8           8B4E         F6            mov	cx,0+..FFF8[bp]
23020 5BDB           D3E0                       shl	ax,cl
23021 5BDD           44                         inc	sp
23022 5BDE           44                         inc	sp
23023                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23024 5BDF           8846         FC            mov	-4[bp],al
23025                                           !BCC_EOS
23026                                           ! 2743        mask = 0x01 << (7 - (CX & 0x07));
23027                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23028 5BE2           8A46         08            mov	al,8[bp]
23029 5BE5           24                     07  and	al,*7
23030                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23031 5BE7           50                         push	ax
23032 5BE8           B8                   0007  mov	ax,*7
23033 5BEB           2A46         F6            sub	al,0+..FFF8[bp]
23034 5BEE           80DC                   00  sbb	ah,*0
23035 5BF1           44                         inc	sp
23036 5BF2           44                         inc	sp
23037                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
23038 5BF3           89C3                       mov	bx,ax
23039 5BF5           B8                   0001  mov	ax,*1
23040 5BF8           89D9                       mov	cx,bx
23041 5BFA           D3E0                       shl	ax,cl
23042                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23043 5BFC           8846         FD            mov	-3[bp],al
23044                                           !BCC_EOS
23045                                           ! 2744       }
23046                                           ! 2745      if (AL & 0x80)
23047                       00005BFF            .1C4:
23048                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23049 5BFF           8A46         06            mov	al,6[bp]
23050 5C02           24                     80  and	al,#$80
23051 5C04           84C0                       test	al,al
23052 5C06           74           0B            je  	.1C5
23053                       00005C08            .1C6:
23054                                           ! 2746       {
23055                                           ! 2747        data ^= attr;
23056                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23057 5C08           8A46         FB            mov	al,-5[bp]
23058 5C0B           3246         FC            xor	al,-4[bp]
23059 5C0E           8846         FB            mov	-5[bp],al
23060                                           !BCC_EOS
23061                                           ! 2748       }
23062                                           ! 2749      else
23063                                           ! 2750       {
23064 5C11           EB           16            jmp .1C7
23065                       00005C13            .1C5:
23066                                           ! 2751        data &= ~mask;
23067                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
23068 5C13           8A46         FD            mov	al,-3[bp]
23069 5C16           30E4                       xor	ah,ah
23070 5C18           F7D0                       not	ax
23071                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
23072 5C1A           2246         FB            and	al,-5[bp]
23073 5C1D           8846         FB            mov	-5[bp],al
23074                                           !BCC_EOS
23075                                           ! 2752        data |= attr;
23076                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23077 5C20           8A46         FB            mov	al,-5[bp]
23078 5C23           0A46         FC            or	al,-4[bp]
23079 5C26           8846         FB            mov	-5[bp],al
23080                                           !BCC_EOS
23081                                           ! 2753       }
23082                                           ! 2754      write_byte(0xb800,addr,data);
23083                       00005C29            .1C7:
23084                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
23085 5C29           8A46         FB            mov	al,-5[bp]
23086 5C2C           30E4                       xor	ah,ah
23087 5C2E           50                         push	ax
23088                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23089 5C2F           FF76         F8            push	-8[bp]
23090                                           ! Debug: list unsigned int = const $B800 (used reg = )
23091 5C32           B8                   B800  mov	ax,#$B800
23092 5C35           50                         push	ax
23093                                           ! Debug: func () void = write_byte+0 (used reg = )
23094 5C36           E8         1FD8            call	_write_byte
23095 5C39           83C4                   06  add	sp,*6
23096                                           !BCC_EOS
23097                                           ! 2755      break;
23098 5C3C           EB           4A            jmp .1B5
23099                                           !BCC_EOS
23100                                           ! 2756    case 0x05:
23101                                           ! 2757      addr=CX+DX*(read_word(0x40,0x4A)*8);
23102                       00005C3E            .1C8:
23103                                           ! Debug: list int = const $4A (used reg = )
23104 5C3E           B8                   004A  mov	ax,*$4A
23105 5C41           50                         push	ax
23106                                           ! Debug: list int = const $40 (used reg = )
23107 5C42           B8                   0040  mov	ax,*$40
23108 5C45           50                         push	ax
23109                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23110 5C46           E8         1FB5            call	_read_word
23111 5C49           83C4                   04  add	sp,*4
23112                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23113 5C4C           B1                     03  mov	cl,*3
23114 5C4E           D3E0                       shl	ax,cl
23115                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
23116                                           ! Debug: expression subtree swapping
23117 5C50           8B4E         0A            mov	cx,$A[bp]
23118 5C53           F7E9                       imul	cx
23119                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
23120                                           ! Debug: expression subtree swapping
23121 5C55           0346         08            add	ax,8[bp]
23122                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23123 5C58           8946         F8            mov	-8[bp],ax
23124                                           !BCC_EOS
23125                                           ! 2758      write_byte(0xa000,addr,AL);
23126                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23127 5C5B           8A46         06            mov	al,6[bp]
23128 5C5E           30E4                       xor	ah,ah
23129 5C60           50                         push	ax
23130                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23131 5C61           FF76         F8            push	-8[bp]
23132                                           ! Debug: list unsigned int = const $A000 (used reg = )
23133 5C64           B8                   A000  mov	ax,#$A000
23134 5C67           50                         push	ax
23135                                           ! Debug: func () void = write_byte+0 (used reg = )
23136 5C68           E8         1FA6            call	_write_byte
23137 5C6B           83C4                   06  add	sp,*6
23138                                           !BCC_EOS
23139                                           ! 2759      break;
23140 5C6E           EB           18            jmp .1B5
23141                                           !BCC_EOS
23142                                           ! 2760   }
23143                                           ! 2761 }
23144 5C70           EB           16            jmp .1B5
23145                       00005C72            .1B7:
23146 5C72           2C                     02  sub	al,*2
23147 5C74         0F84         FE7D            beq 	.1BC
23148 5C78           2C                     01  sub	al,*1
23149 5C7A         0F84         FDD1            beq 	.1B9
23150 5C7E           2C                     01  sub	al,*1
23151 5C80         0F84         FDCB            beq 	.1B8
23152 5C84           2C                     01  sub	al,*1
23153 5C86           74           B6            je 	.1C8
23154                       00005C88            .1B5:
23155                       FFFFFFF6            ..FFF8	=	-$A
23156 5C88           89EC                       mov	sp,bp
23157 5C8A           5D                         pop	bp
23158 5C8B           C3                         ret
23159                                           ! 2762 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
23160                                           ! Register BX used in function biosfn_write_pixel
23161                       00005C8C            _biosfn_read_pixel:
23162                                           !BCC_EOS
23163                                           !BCC_EOS
23164                                           !BCC_EOS
23165                                           !BCC_EOS
23166                                           ! 2763 {
23167                                           ! 2764  Bit8u mode,line,mask,attr,data,i;
23168                                           !BCC_EOS
23169                                           ! 2765  Bit16u addr;
23170                                           !BCC_EOS
23171                                           ! 2766  Bit16u ss=get_SS();
23172 5C8C           55                         push	bp
23173 5C8D           89E5                       mov	bp,sp
23174 5C8F           83C4                   F6  add	sp,*-$A
23175                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
23176 5C92           E8         1FE2            call	_get_SS
23177                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
23178 5C95           8946         F6            mov	-$A[bp],ax
23179                                           !BCC_EOS
23180                                           ! 2767  mode=read_byte(0x40,0x49);
23181                                           ! Debug: list int = const $49 (used reg = )
23182 5C98           B8                   0049  mov	ax,*$49
23183 5C9B           50                         push	ax
23184                                           ! Debug: list int = const $40 (used reg = )
23185 5C9C           B8                   0040  mov	ax,*$40
23186 5C9F           50                         push	ax
23187                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23188 5CA0           E8         1F48            call	_read_byte
23189 5CA3           83C4                   04  add	sp,*4
23190                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
23191 5CA6           8846         FF            mov	-1[bp],al
23192                                           !BCC_EOS
23193                                           ! 2768  line=find_vga_entry(mode);
23194                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
23195 5CA9           8A46         FF            mov	al,-1[bp]
23196 5CAC           30E4                       xor	ah,ah
23197 5CAE           50                         push	ax
23198                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23199 5CAF           E8         1E4D            call	_find_vga_entry
23200 5CB2           44                         inc	sp
23201 5CB3           44                         inc	sp
23202                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
23203 5CB4           8846         FE            mov	-2[bp],al
23204                                           !BCC_EOS
23205                                           ! 2769  if(line==0xFF)return;
23206                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
23207 5CB7           8A46         FE            mov	al,-2[bp]
23208 5CBA           3C                     FF  cmp	al,#$FF
23209 5CBC           75           04            jne 	.1C9
23210                       00005CBE            .1CA:
23211 5CBE           89EC                       mov	sp,bp
23212 5CC0           5D                         pop	bp
23213 5CC1           C3                         ret
23214                                           !BCC_EOS
23215                                           ! 2770  if(vga_modes[line].class==0x00)return;
23216                       00005CC2            .1C9:
23217                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23218 5CC2           8A46         FE            mov	al,-2[bp]
23219 5CC5           30E4                       xor	ah,ah
23220 5CC7           B1                     03  mov	cl,*3
23221 5CC9           D3E0                       shl	ax,cl
23222 5CCB           89C3                       mov	bx,ax
23223 5CCD           81C3                 01FD  add	bx,#_vga_modes
23224                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23225 5CD1           8A47         01            mov	al,1[bx]
23226 5CD4           84C0                       test	al,al
23227 5CD6           75           04            jne 	.1CB
23228                       00005CD8            .1CC:
23229 5CD8           89EC                       mov	sp,bp
23230 5CDA           5D                         pop	bp
23231 5CDB           C3                         ret
23232                                           !BCC_EOS
23233                                           ! 2771  switch(vga_modes[line].memmodel)
23234                       00005CDC            .1CB:
23235                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23236 5CDC           8A46         FE            mov	al,-2[bp]
23237 5CDF           30E4                       xor	ah,ah
23238 5CE1           B1                     03  mov	cl,*3
23239 5CE3           D3E0                       shl	ax,cl
23240 5CE5           89C3                       mov	bx,ax
23241 5CE7           81C3                 01FD  add	bx,#_vga_modes
23242 5CEB           8A47         02            mov	al,2[bx]
23243                                           ! 2772   {
23244 5CEE           E9         0169            br 	.1CF
23245                                           ! 2773    case 0x04:
23246                                           ! 2774    case 0x03:
23247                       00005CF1            .1D0:
23248                                           ! 2775      addr = CX/8+DX*read_word(0x40,0x4A);
23249                       00005CF1            .1D1:
23250                                           ! Debug: list int = const $4A (used reg = )
23251 5CF1           B8                   004A  mov	ax,*$4A
23252 5CF4           50                         push	ax
23253                                           ! Debug: list int = const $40 (used reg = )
23254 5CF5           B8                   0040  mov	ax,*$40
23255 5CF8           50                         push	ax
23256                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23257 5CF9           E8         1F02            call	_read_word
23258 5CFC           83C4                   04  add	sp,*4
23259                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23260                                           ! Debug: expression subtree swapping
23261 5CFF           8B4E         08            mov	cx,8[bp]
23262 5D02           F7E9                       imul	cx
23263 5D04           50                         push	ax
23264                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23265 5D05           8B46         06            mov	ax,6[bp]
23266 5D08           B1                     03  mov	cl,*3
23267 5D0A           D3E8                       shr	ax,cl
23268                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23269 5D0C           0346         F4            add	ax,0+..FFF7[bp]
23270 5D0F           44                         inc	sp
23271 5D10           44                         inc	sp
23272                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23273 5D11           8946         F8            mov	-8[bp],ax
23274                                           !BCC_EOS
23275                                           ! 2776      mask = 0x80 >> (CX & 0x07);
23276                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23277 5D14           8A46         06            mov	al,6[bp]
23278 5D17           24                     07  and	al,*7
23279                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23280 5D19           30E4                       xor	ah,ah
23281 5D1B           89C3                       mov	bx,ax
23282 5D1D           B8                   0080  mov	ax,#$80
23283 5D20           89D9                       mov	cx,bx
23284 5D22           D3F8                       sar	ax,cl
23285                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23286 5D24           8846         FD            mov	-3[bp],al
23287                                           !BCC_EOS
23288                                           ! 2777      attr = 0x00;
23289                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23290 5D27           30C0                       xor	al,al
23291 5D29           8846         FC            mov	-4[bp],al
23292                                           !BCC_EOS
23293                                           ! 2778      for(i=0;i<4;i++)
23294                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23295 5D2C           30C0                       xor	al,al
23296 5D2E           8846         FA            mov	-6[bp],al
23297                                           !BCC_EOS
23298                                           !BCC_EOS
23299                                           ! 2779       {
23300 5D31           EB           4B            jmp .1D4
23301                       00005D33            .1D5:
23302                                           ! 2780        outw(0x3ce, (i << 8) | 0x04);
23303                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23304 5D33           8A46         FA            mov	al,-6[bp]
23305 5D36           30E4                       xor	ah,ah
23306 5D38           88C4                       mov	ah,al
23307 5D3A           30C0                       xor	al,al
23308                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23309 5D3C           0C                     04  or	al,*4
23310                                           ! Debug: list unsigned int = ax+0 (used reg = )
23311 5D3E           50                         push	ax
23312                                           ! Debug: list int = const $3CE (used reg = )
23313 5D3F           B8                   03CE  mov	ax,#$3CE
23314 5D42           50                         push	ax
23315                                           ! Debug: func () void = outw+0 (used reg = )
23316 5D43           E8         1F21            call	_outw
23317 5D46           83C4                   04  add	sp,*4
23318                                           !BCC_EOS
23319                                           ! 2781        data = read_byte(0xa000,addr) & mask;
23320                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23321 5D49           FF76         F8            push	-8[bp]
23322                                           ! Debug: list unsigned int = const $A000 (used reg = )
23323 5D4C           B8                   A000  mov	ax,#$A000
23324 5D4F           50                         push	ax
23325                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23326 5D50           E8         1E98            call	_read_byte
23327 5D53           83C4                   04  add	sp,*4
23328                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23329 5D56           2246         FD            and	al,-3[bp]
23330                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23331 5D59           8846         FB            mov	-5[bp],al
23332                                           !BCC_EOS
23333                                           ! 2782        if (data > 0) attr |= (0x01 << i);
23334                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23335 5D5C           8A46         FB            mov	al,-5[bp]
23336 5D5F           84C0                       test	al,al
23337 5D61           74           14            je  	.1D6
23338                       00005D63            .1D7:
23339                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23340 5D63           8A46         FA            mov	al,-6[bp]
23341 5D66           30E4                       xor	ah,ah
23342 5D68           89C3                       mov	bx,ax
23343 5D6A           B8                   0001  mov	ax,*1
23344 5D6D           89D9                       mov	cx,bx
23345 5D6F           D3E0                       shl	ax,cl
23346                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23347 5D71           0A46         FC            or	al,-4[bp]
23348 5D74           8846         FC            mov	-4[bp],al
23349                                           !BCC_EOS
23350                                           ! 2783       }
23351                       00005D77            .1D6:
23352                                           ! 2784      break;
23353                       00005D77            .1D3:
23354                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23355 5D77           8A46         FA            mov	al,-6[bp]
23356 5D7A           40                         inc	ax
23357 5D7B           8846         FA            mov	-6[bp],al
23358                       00005D7E            .1D4:
23359                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23360 5D7E           8A46         FA            mov	al,-6[bp]
23361 5D81           3C                     04  cmp	al,*4
23362 5D83           72           AE            jb 	.1D5
23363                       00005D85            .1D8:
23364                       00005D85            .1D2:
23365 5D85           E9         00EA            br 	.1CD
23366                                           !BCC_EOS
23367                                           ! 2785    case 0x02:
23368                                           ! 2786      addr=(CX>>2)+(DX>>1)*80;
23369                       00005D88            .1D9:
23370                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23371 5D88           8B46         08            mov	ax,8[bp]
23372 5D8B           D1E8                       shr	ax,*1
23373                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23374 5D8D           B9                   0050  mov	cx,*$50
23375 5D90           F7E9                       imul	cx
23376 5D92           50                         push	ax
23377                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23378 5D93           8B46         06            mov	ax,6[bp]
23379 5D96           D1E8                       shr	ax,*1
23380 5D98           D1E8                       shr	ax,*1
23381                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23382 5D9A           0346         F4            add	ax,0+..FFF7[bp]
23383 5D9D           44                         inc	sp
23384 5D9E           44                         inc	sp
23385                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23386 5D9F           8946         F8            mov	-8[bp],ax
23387                                           !BCC_EOS
23388                                           ! 2787      if (DX & 1) addr += 0x2000;
23389                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23390 5DA2           8A46         08            mov	al,8[bp]
23391 5DA5           24                     01  and	al,*1
23392 5DA7           84C0                       test	al,al
23393 5DA9           74           09            je  	.1DA
23394                       00005DAB            .1DB:
23395                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23396 5DAB           8B46         F8            mov	ax,-8[bp]
23397 5DAE           05                   2000  add	ax,#$2000
23398 5DB1           8946         F8            mov	-8[bp],ax
23399                                           !BCC_EOS
23400                                           ! 2788      data = read_byte(0xb800,addr);
23401                       00005DB4            .1DA:
23402                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23403 5DB4           FF76         F8            push	-8[bp]
23404                                           ! Debug: list unsigned int = const $B800 (used reg = )
23405 5DB7           B8                   B800  mov	ax,#$B800
23406 5DBA           50                         push	ax
23407                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23408 5DBB           E8         1E2D            call	_read_byte
23409 5DBE           83C4                   04  add	sp,*4
23410                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23411 5DC1           8846         FB            mov	-5[bp],al
23412                                           !BCC_EOS
23413                                           ! 2789      if(vga_modes[line].pixbits==2)
23414                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23415 5DC4           8A46         FE            mov	al,-2[bp]
23416 5DC7           30E4                       xor	ah,ah
23417 5DC9           B1                     03  mov	cl,*3
23418 5DCB           D3E0                       shl	ax,cl
23419 5DCD           89C3                       mov	bx,ax
23420 5DCF           81C3                 01FD  add	bx,#_vga_modes
23421                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23422 5DD3           8A47         03            mov	al,3[bx]
23423 5DD6           3C                     02  cmp	al,*2
23424 5DD8         0F85         0025            bne 	.1DC
23425                       00005DDC            .1DD:
23426                                           ! 2790       {
23427                                           ! 2791        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23428                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23429 5DDC           8A46         06            mov	al,6[bp]
23430 5DDF           24                     03  and	al,*3
23431                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23432 5DE1           50                         push	ax
23433 5DE2           B8                   0003  mov	ax,*3
23434 5DE5           2A46         F4            sub	al,0+..FFF7[bp]
23435 5DE8           80DC                   00  sbb	ah,*0
23436 5DEB           44                         inc	sp
23437 5DEC           44                         inc	sp
23438                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23439 5DED           D1E0                       shl	ax,*1
23440                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23441 5DEF           89C3                       mov	bx,ax
23442 5DF1           8A46         FB            mov	al,-5[bp]
23443 5DF4           30E4                       xor	ah,ah
23444 5DF6           89D9                       mov	cx,bx
23445 5DF8           D3E8                       shr	ax,cl
23446                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23447 5DFA           24                     03  and	al,*3
23448                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23449 5DFC           8846         FC            mov	-4[bp],al
23450                                           !BCC_EOS
23451                                           ! 2792       }
23452                                           ! 2793      else
23453                                           ! 2794       {
23454 5DFF           EB           21            jmp .1DE
23455                       00005E01            .1DC:
23456                                           ! 2795        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23457                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23458 5E01           8A46         06            mov	al,6[bp]
23459 5E04           24                     07  and	al,*7
23460                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23461 5E06           50                         push	ax
23462 5E07           B8                   0007  mov	ax,*7
23463 5E0A           2A46         F4            sub	al,0+..FFF7[bp]
23464 5E0D           80DC                   00  sbb	ah,*0
23465 5E10           44                         inc	sp
23466 5E11           44                         inc	sp
23467                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23468 5E12           89C3                       mov	bx,ax
23469 5E14           8A46         FB            mov	al,-5[bp]
23470 5E17           30E4                       xor	ah,ah
23471 5E19           89D9                       mov	cx,bx
23472 5E1B           D3E8                       shr	ax,cl
23473                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23474 5E1D           24                     01  and	al,*1
23475                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23476 5E1F           8846         FC            mov	-4[bp],al
23477                                           !BCC_EOS
23478                                           ! 2796       }
23479                                           ! 2797      break;
23480                       00005E22            .1DE:
23481 5E22           EB           4E            jmp .1CD
23482                                           !BCC_EOS
23483                                           ! 2798    case 0x05:
23484                                           ! 2799      addr=CX+DX*(read_word(0x40,0x4A)*8);
23485                       00005E24            .1DF:
23486                                           ! Debug: list int = const $4A (used reg = )
23487 5E24           B8                   004A  mov	ax,*$4A
23488 5E27           50                         push	ax
23489                                           ! Debug: list int = const $40 (used reg = )
23490 5E28           B8                   0040  mov	ax,*$40
23491 5E2B           50                         push	ax
23492                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23493 5E2C           E8         1DCF            call	_read_word
23494 5E2F           83C4                   04  add	sp,*4
23495                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23496 5E32           B1                     03  mov	cl,*3
23497 5E34           D3E0                       shl	ax,cl
23498                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23499                                           ! Debug: expression subtree swapping
23500 5E36           8B4E         08            mov	cx,8[bp]
23501 5E39           F7E9                       imul	cx
23502                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23503                                           ! Debug: expression subtree swapping
23504 5E3B           0346         06            add	ax,6[bp]
23505                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23506 5E3E           8946         F8            mov	-8[bp],ax
23507                                           !BCC_EOS
23508                                           ! 2800      attr=read_byte(0xa000,addr);
23509                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23510 5E41           FF76         F8            push	-8[bp]
23511                                           ! Debug: list unsigned int = const $A000 (used reg = )
23512 5E44           B8                   A000  mov	ax,#$A000
23513 5E47           50                         push	ax
23514                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23515 5E48           E8         1DA0            call	_read_byte
23516 5E4B           83C4                   04  add	sp,*4
23517                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23518 5E4E           8846         FC            mov	-4[bp],al
23519                                           !BCC_EOS
23520                                           ! 2801      break;
23521 5E51           EB           1F            jmp .1CD
23522                                           !BCC_EOS
23523                                           ! 2802    default:
23524                                           ! 2803      attr = 0;
23525                       00005E53            .1E0:
23526                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23527 5E53           30C0                       xor	al,al
23528 5E55           8846         FC            mov	-4[bp],al
23529                                           !BCC_EOS
23530                                           ! 2804   }
23531                                           ! 2805  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23532 5E58           EB           18            jmp .1CD
23533                       00005E5A            .1CF:
23534 5E5A           2C                     02  sub	al,*2
23535 5E5C         0F84         FF28            beq 	.1D9
23536 5E60           2C                     01  sub	al,*1
23537 5E62         0F84         FE8B            beq 	.1D1
23538 5E66           2C                     01  sub	al,*1
23539 5E68         0F84         FE85            beq 	.1D0
23540 5E6C           2C                     01  sub	al,*1
23541 5E6E           74           B4            je 	.1DF
23542 5E70           EB           E1            jmp	.1E0
23543                       00005E72            .1CD:
23544                       FFFFFFF4            ..FFF7	=	-$C
23545                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23546 5E72           FF76         0A            push	$A[bp]
23547                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23548 5E75           FF76         F6            push	-$A[bp]
23549                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23550 5E78           E8         1D83            call	_read_word
23551 5E7B           83C4                   04  add	sp,*4
23552                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23553 5E7E           30C0                       xor	al,al
23554                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23555 5E80           0A46         FC            or	al,-4[bp]
23556                                           ! Debug: list unsigned int = ax+0 (used reg = )
23557 5E83           50                         push	ax
23558                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23559 5E84           FF76         0A            push	$A[bp]
23560                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23561 5E87           FF76         F6            push	-$A[bp]
23562                                           ! Debug: func () void = write_word+0 (used reg = )
23563 5E8A           E8         1D9C            call	_write_word
23564 5E8D           83C4                   06  add	sp,*6
23565                                           !BCC_EOS
23566                                           ! 2806 }
23567 5E90           89EC                       mov	sp,bp
23568 5E92           5D                         pop	bp
23569 5E93           C3                         ret
23570                                           ! 2807 static void biosfn_write_teletype (car, page, attr, flag)
23571                                           ! Register BX used in function biosfn_read_pixel
23572                                           ! 2808 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23573                       00005E94            _biosfn_write_teletype:
23574                                           !BCC_EOS
23575                                           !BCC_EOS
23576                                           !BCC_EOS
23577                                           !BCC_EOS
23578                                           ! 2809 {
23579                                           ! 2810  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23580                                           !BCC_EOS
23581                                           ! 2811  Bit16u nbcols,nbrows,address;
23582                                           !BCC_EOS
23583                                           ! 2812  Bit16u cursor,dummy;
23584                                           !BCC_EOS
23585                                           ! 2813  if(page==0xff)
23586 5E94           55                         push	bp
23587 5E95           89E5                       mov	bp,sp
23588 5E97           83C4                   F0  add	sp,*-$10
23589                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23590 5E9A           8A46         06            mov	al,6[bp]
23591 5E9D           3C                     FF  cmp	al,#$FF
23592 5E9F           75           11            jne 	.1E1
23593                       00005EA1            .1E2:
23594                                           ! 2814   page=read_byte(0x40,0x62);
23595                                           ! Debug: list int = const $62 (used reg = )
23596 5EA1           B8                   0062  mov	ax,*$62
23597 5EA4           50                         push	ax
23598                                           ! Debug: list int = const $40 (used reg = )
23599 5EA5           B8                   0040  mov	ax,*$40
23600 5EA8           50                         push	ax
23601                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23602 5EA9           E8         1D3F            call	_read_byte
23603 5EAC           83C4                   04  add	sp,*4
23604                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23605 5EAF           8846         06            mov	6[bp],al
23606                                           !BCC_EOS
23607                                           ! 2815  mode=read_byte(0x40,0x49);
23608                       00005EB2            .1E1:
23609                                           ! Debug: list int = const $49 (used reg = )
23610 5EB2           B8                   0049  mov	ax,*$49
23611 5EB5           50                         push	ax
23612                                           ! Debug: list int = const $40 (used reg = )
23613 5EB6           B8                   0040  mov	ax,*$40
23614 5EB9           50                         push	ax
23615                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23616 5EBA           E8         1D2E            call	_read_byte
23617 5EBD           83C4                   04  add	sp,*4
23618                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23619 5EC0           8846         FC            mov	-4[bp],al
23620                                           !BCC_EOS
23621                                           ! 2816  line=find_vga_entry(mode);
23622                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23623 5EC3           8A46         FC            mov	al,-4[bp]
23624 5EC6           30E4                       xor	ah,ah
23625 5EC8           50                         push	ax
23626                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23627 5EC9           E8         1C33            call	_find_vga_entry
23628 5ECC           44                         inc	sp
23629 5ECD           44                         inc	sp
23630                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23631 5ECE           8846         FB            mov	-5[bp],al
23632                                           !BCC_EOS
23633                                           ! 2817  if(line==0xFF)return;
23634                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23635 5ED1           8A46         FB            mov	al,-5[bp]
23636 5ED4           3C                     FF  cmp	al,#$FF
23637 5ED6           75           04            jne 	.1E3
23638                       00005ED8            .1E4:
23639 5ED8           89EC                       mov	sp,bp
23640 5EDA           5D                         pop	bp
23641 5EDB           C3                         ret
23642                                           !BCC_EOS
23643                                           ! 2818  biosfn_get_cursor_pos(page,&dummy,&cursor);
23644                       00005EDC            .1E3:
23645                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23646 5EDC           8D5E         F2            lea	bx,-$E[bp]
23647 5EDF           53                         push	bx
23648                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23649 5EE0           8D5E         F0            lea	bx,-$10[bp]
23650 5EE3           53                         push	bx
23651                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23652 5EE4           8A46         06            mov	al,6[bp]
23653 5EE7           30E4                       xor	ah,ah
23654 5EE9           50                         push	ax
23655                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23656 5EEA           E8         E55D            call	_biosfn_get_cursor_pos
23657 5EED           83C4                   06  add	sp,*6
23658                                           !BCC_EOS
23659                                           ! 2819  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23660                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23661 5EF0           8A46         F2            mov	al,-$E[bp]
23662                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23663 5EF3           8846         FE            mov	-2[bp],al
23664                                           !BCC_EOS
23665                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23666 5EF6           8B46         F2            mov	ax,-$E[bp]
23667 5EF9           30C0                       xor	al,al
23668                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23669 5EFB           88E0                       mov	al,ah
23670 5EFD           30E4                       xor	ah,ah
23671                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23672 5EFF           8846         FD            mov	-3[bp],al
23673                                           !BCC_EOS
23674                                           ! 2820  nbrows=read_byte(0x40,0
23675                                           ! 2820 x84)+1;
23676                                           ! Debug: list int = const $84 (used reg = )
23677 5F02           B8                   0084  mov	ax,#$84
23678 5F05           50                         push	ax
23679                                           ! Debug: list int = const $40 (used reg = )
23680 5F06           B8                   0040  mov	ax,*$40
23681 5F09           50                         push	ax
23682                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23683 5F0A           E8         1CDE            call	_read_byte
23684 5F0D           83C4                   04  add	sp,*4
23685                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23686 5F10           30E4                       xor	ah,ah
23687                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23688 5F12           40                         inc	ax
23689 5F13           8946         F6            mov	-$A[bp],ax
23690                                           !BCC_EOS
23691                                           ! 2821  nbcols=read_word(0x40,0x4A);
23692                                           ! Debug: list int = const $4A (used reg = )
23693 5F16           B8                   004A  mov	ax,*$4A
23694 5F19           50                         push	ax
23695                                           ! Debug: list int = const $40 (used reg = )
23696 5F1A           B8                   0040  mov	ax,*$40
23697 5F1D           50                         push	ax
23698                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23699 5F1E           E8         1CDD            call	_read_word
23700 5F21           83C4                   04  add	sp,*4
23701                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23702 5F24           8946         F8            mov	-8[bp],ax
23703                                           !BCC_EOS
23704                                           ! 2822  switch(car)
23705 5F27           8A46         04            mov	al,4[bp]
23706                                           ! 2823   {
23707 5F2A           E9         01EA            br 	.1E7
23708                                           ! 2824    case 7:
23709                                           ! 2825     break;
23710                       00005F2D            .1E8:
23711 5F2D           E9         0208            br 	.1E5
23712                                           !BCC_EOS
23713                                           ! 2826    case 8:
23714                                           ! 2827     if(xcurs>0)xcurs--;
23715                       00005F30            .1E9:
23716                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23717 5F30           8A46         FE            mov	al,-2[bp]
23718 5F33           84C0                       test	al,al
23719 5F35           74           07            je  	.1EA
23720                       00005F37            .1EB:
23721                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23722 5F37           8A46         FE            mov	al,-2[bp]
23723 5F3A           48                         dec	ax
23724 5F3B           8846         FE            mov	-2[bp],al
23725                                           !BCC_EOS
23726                                           ! 2828     break;
23727                       00005F3E            .1EA:
23728 5F3E           E9         01F7            br 	.1E5
23729                                           !BCC_EOS
23730                                           ! 2829    case '\r':
23731                                           ! 2830     xcurs=0;
23732                       00005F41            .1EC:
23733                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23734 5F41           30C0                       xor	al,al
23735 5F43           8846         FE            mov	-2[bp],al
23736                                           !BCC_EOS
23737                                           ! 2831     break;
23738 5F46           E9         01EF            br 	.1E5
23739                                           !BCC_EOS
23740                                           ! 2832    case '\n':
23741                                           ! 2833     ycurs++;
23742                       00005F49            .1ED:
23743                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23744 5F49           8A46         FD            mov	al,-3[bp]
23745 5F4C           40                         inc	ax
23746 5F4D           8846         FD            mov	-3[bp],al
23747                                           !BCC_EOS
23748                                           ! 2834     break;
23749 5F50           E9         01E5            br 	.1E5
23750                                           !BCC_EOS
23751                                           ! 2835    case '\t':
23752                                           ! 2836     do
23753                       00005F53            .1EE:
23754                                           ! 2837      {
23755                       00005F53            .1F1:
23756                                           ! 2838       biosfn_write_teletype(' ',page,attr,flag);
23757                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23758 5F53           8A46         0A            mov	al,$A[bp]
23759 5F56           30E4                       xor	ah,ah
23760 5F58           50                         push	ax
23761                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23762 5F59           8A46         08            mov	al,8[bp]
23763 5F5C           30E4                       xor	ah,ah
23764 5F5E           50                         push	ax
23765                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23766 5F5F           8A46         06            mov	al,6[bp]
23767 5F62           30E4                       xor	ah,ah
23768 5F64           50                         push	ax
23769                                           ! Debug: list int = const $20 (used reg = )
23770 5F65           B8                   0020  mov	ax,*$20
23771 5F68           50                         push	ax
23772                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23773 5F69           E8         FF28            call	_biosfn_write_teletype
23774 5F6C           83C4                   08  add	sp,*8
23775                                           !BCC_EOS
23776                                           ! 2839       biosfn_get_cursor_pos(page,&dummy,&cursor);
23777                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23778 5F6F           8D5E         F2            lea	bx,-$E[bp]
23779 5F72           53                         push	bx
23780                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23781 5F73           8D5E         F0            lea	bx,-$10[bp]
23782 5F76           53                         push	bx
23783                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23784 5F77           8A46         06            mov	al,6[bp]
23785 5F7A           30E4                       xor	ah,ah
23786 5F7C           50                         push	ax
23787                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23788 5F7D           E8         E4CA            call	_biosfn_get_cursor_pos
23789 5F80           83C4                   06  add	sp,*6
23790                                           !BCC_EOS
23791                                           ! 2840       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23792                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23793 5F83           8A46         F2            mov	al,-$E[bp]
23794                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23795 5F86           8846         FE            mov	-2[bp],al
23796                                           !BCC_EOS
23797                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23798 5F89           8B46         F2            mov	ax,-$E[bp]
23799 5F8C           30C0                       xor	al,al
23800                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23801 5F8E           88E0                       mov	al,ah
23802 5F90           30E4                       xor	ah,ah
23803                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23804 5F92           8846         FD            mov	-3[bp],al
23805                                           !BCC_EOS
23806                                           ! 2841      }while(xcurs%8==0);
23807                       00005F95            .1F0:
23808                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23809 5F95           8A46         FE            mov	al,-2[bp]
23810 5F98           30E4                       xor	ah,ah
23811 5F9A           24                     07  and	al,*7
23812                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23813 5F9C           84C0                       test	al,al
23814 5F9E           74           B3            je 	.1F1
23815                       00005FA0            .1F2:
23816                                           !BCC_EOS
23817                                           ! 2842     break;
23818                       00005FA0            .1EF:
23819 5FA0           E9         0195            br 	.1E5
23820                                           !BCC_EOS
23821                                           ! 2843    default:
23822                                           ! 2844     if(vga_modes[line].class==0x00)
23823                       00005FA3            .1F3:
23824                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23825 5FA3           8A46         FB            mov	al,-5[bp]
23826 5FA6           30E4                       xor	ah,ah
23827 5FA8           B1                     03  mov	cl,*3
23828 5FAA           D3E0                       shl	ax,cl
23829 5FAC           89C3                       mov	bx,ax
23830 5FAE           81C3                 01FD  add	bx,#_vga_modes
23831                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23832 5FB2           8A47         01            mov	al,1[bx]
23833 5FB5           84C0                       test	al,al
23834 5FB7         0F85         0082            bne 	.1F4
23835                       00005FBB            .1F5:
23836                                           ! 2845      {
23837                                           ! 2846       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23838                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23839 5FBB           8A46         FD            mov	al,-3[bp]
23840 5FBE           30E4                       xor	ah,ah
23841 5FC0           8B4E         F8            mov	cx,-8[bp]
23842 5FC3           F7E9                       imul	cx
23843                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23844                                           ! Debug: expression subtree swapping
23845 5FC5           0246         FE            add	al,-2[bp]
23846 5FC8           80D4                   00  adc	ah,*0
23847                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23848 5FCB           D1E0                       shl	ax,*1
23849 5FCD           50                         push	ax
23850                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23851 5FCE           8B46         F8            mov	ax,-8[bp]
23852 5FD1           8B4E         F6            mov	cx,-$A[bp]
23853 5FD4           F7E9                       imul	cx
23854                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23855 5FD6           D1E0                       shl	ax,*1
23856                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23857 5FD8           0C                     FF  or	al,#$FF
23858                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23859                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23860 5FDA           89C3                       mov	bx,ax
23861 5FDC           8A46         06            mov	al,6[bp]
23862 5FDF           30E4                       xor	ah,ah
23863 5FE1           93                         xchg	ax,bx
23864 5FE2           40                         inc	ax
23865 5FE3           89D9                       mov	cx,bx
23866 5FE5           F7E9                       imul	cx
23867                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23868 5FE7           0346         EE            add	ax,0+..FFF6[bp]
23869 5FEA           44                         inc	sp
23870 5FEB           44                         inc	sp
23871                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23872 5FEC           8946         F4            mov	-$C[bp],ax
23873                                           !BCC_EOS
23874                                           ! 2847       write_byte(vga_modes[line].sstart,address,car);
23875                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23876 5FEF           8A46         04            mov	al,4[bp]
23877 5FF2           30E4                       xor	ah,ah
23878 5FF4           50                         push	ax
23879                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23880 5FF5           FF76         F4            push	-$C[bp]
23881                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23882 5FF8           8A46         FB            mov	al,-5[bp]
23883 5FFB           30E4                       xor	ah,ah
23884 5FFD           B1                     03  mov	cl,*3
23885 5FFF           D3E0                       shl	ax,cl
23886 6001           89C3                       mov	bx,ax
23887 6003           81C3                 01FD  add	bx,#_vga_modes
23888                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23889 6007           FF77         04            push	4[bx]
23890                                           ! Debug: func () void = write_byte+0 (used reg = )
23891 600A           E8         1C04            call	_write_byte
23892 600D           83C4                   06  add	sp,*6
23893                                           !BCC_EOS
23894                                           ! 2848       if(flag==3)
23895                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23896 6010           8A46         0A            mov	al,$A[bp]
23897 6013           3C                     03  cmp	al,*3
23898 6015           75           23            jne 	.1F6
23899                       00006017            .1F7:
23900                                           ! 2849        write_byte(vga_modes[line].sstart,address+1,attr);
23901                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23902 6017           8A46         08            mov	al,8[bp]
23903 601A           30E4                       xor	ah,ah
23904 601C           50                         push	ax
23905                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23906 601D           8B46         F4            mov	ax,-$C[bp]
23907                                           ! Debug: list unsigned int = ax+1 (used reg = )
23908 6020           40                         inc	ax
23909 6021           50                         push	ax
23910                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23911 6022           8A46         FB            mov	al,-5[bp]
23912 6025           30E4                       xor	ah,ah
23913 6027           B1                     03  mov	cl,*3
23914 6029           D3E0                       shl	ax,cl
23915 602B           89C3                       mov	bx,ax
23916 602D           81C3                 01FD  add	bx,#_vga_modes
23917                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23918 6031           FF77         04            push	4[bx]
23919                                           ! Debug: func () void = write_byte+0 (used reg = )
23920 6034           E8         1BDA            call	_write_byte
23921 6037           83C4                   06  add	sp,*6
23922                                           !BCC_EOS
23923                                           ! 2850      }
23924                       0000603A            .1F6:
23925                                           ! 2851     else
23926                                           ! 2852      {
23927 603A           E9         00D1            br 	.1F8
23928                       0000603D            .1F4:
23929                                           ! 2853       cheight=video_param_table[line_to_vpti[line]].cheight;
23930                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23931 603D           8A46         FB            mov	al,-5[bp]
23932 6040           30E4                       xor	ah,ah
23933 6042           89C3                       mov	bx,ax
23934                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23935 6044           8A87       027D            mov	al,_line_to_vpti[bx]
23936 6048           30E4                       xor	ah,ah
23937 604A           B1                     06  mov	cl,*6
23938 604C           D3E0                       shl	ax,cl
23939 604E           89C3                       mov	bx,ax
23940 6050           81C3                 0291  add	bx,#_video_param_table
23941                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23942 6054           8A47         02            mov	al,2[bx]
23943 6057           8846         FF            mov	-1[bp],al
23944                                           !BCC_EOS
23945                                           ! 2854       bpp=vga_modes[line].pixbits;
23946                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23947 605A           8A46         FB            mov	al,-5[bp]
23948 605D           30E4                       xor	ah,ah
23949 605F           B1                     03  mov	cl,*3
23950 6061           D3E0                       shl	ax,cl
23951 6063           89C3                       mov	bx,ax
23952 6065           81C3                 01FD  add	bx,#_vga_modes
23953                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23954 6069           8A47         03            mov	al,3[bx]
23955 606C           8846         FA            mov	-6[bp],al
23956                                           !BCC_EOS
23957                                           ! 2855       switch(vga_modes[line].memmodel)
23958                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23959 606F           8A46         FB            mov	al,-5[bp]
23960 6072           30E4                       xor	ah,ah
23961 6074           B1                     03  mov	cl,*3
23962 6076           D3E0                       shl	ax,cl
23963 6078           89C3                       mov	bx,ax
23964 607A           81C3                 01FD  add	bx,#_vga_modes
23965 607E           8A47         02            mov	al,2[bx]
23966                                           ! 2856        {
23967 6081           EB           77            jmp .1FB
23968                                           ! 2857         case 0x04:
23969                                           ! 2858         case 0x03:
23970                       00006083            .1FC:
23971                                           ! 2859           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
23972                       00006083            .1FD:
23973                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
23974 6083           8A46         FF            mov	al,-1[bp]
23975 6086           30E4                       xor	ah,ah
23976 6088           50                         push	ax
23977                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23978 6089           FF76         F8            push	-8[bp]
23979                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23980 608C           8A46         FD            mov	al,-3[bp]
23981 608F           30E4                       xor	ah,ah
23982 6091           50                         push	ax
23983                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23984 6092           8A46         FE            mov	al,-2[bp]
23985 6095           30E4                       xor	ah,ah
23986 6097           50                         push	ax
23987                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23988 6098           8A46         08            mov	al,8[bp]
23989 609B           30E4                       xor	ah,ah
23990 609D           50                         push	ax
23991                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23992 609E           8A46         04            mov	al,4[bp]
23993 60A1           30E4                       xor	ah,ah
23994 60A3           50                         push	ax
23995                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
23996 60A4           E8         F09C            call	_write_gfx_char_pl4
23997 60A7           83C4                   0C  add	sp,*$C
23998                                           !BCC_EOS
23999                                           ! 2860           break;
24000 60AA           EB           62            jmp .1F9
24001                                           !BCC_EOS
24002                                           ! 2861         case 0x02:
24003                                           ! 2862           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
24004                       000060AC            .1FE:
24005                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
24006 60AC           8A46         FA            mov	al,-6[bp]
24007 60AF           30E4                       xor	ah,ah
24008 60B1           50                         push	ax
24009                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24010 60B2           FF76         F8            push	-8[bp]
24011                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24012 60B5           8A46         FD            mov	al,-3[bp]
24013 60B8           30E4                       xor	ah,ah
24014 60BA           50                         push	ax
24015                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24016 60BB           8A46         FE            mov	al,-2[bp]
24017 60BE           30E4                       xor	ah,ah
24018 60C0           50                         push	ax
24019                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24020 60C1           8A46         08            mov	al,8[bp]
24021 60C4           30E4                       xor	ah,ah
24022 60C6           50                         push	ax
24023                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24024 60C7           8A46         04            mov	al,4[bp]
24025 60CA           30E4                       xor	ah,ah
24026 60CC           50                         push	ax
24027                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
24028 60CD           E8         F1E6            call	_write_gfx_char_cga
24029 60D0           83C4                   0C  add	sp,*$C
24030                                           !BCC_EOS
24031                                           ! 2863           break;
24032 60D3           EB           39            jmp .1F9
24033                                           !BCC_EOS
24034                                           ! 2864         case 0x05:
24035                                           ! 2865           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
24036                       000060D5            .1FF:
24037                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
24038 60D5           FF76         F8            push	-8[bp]
24039                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
24040 60D8           8A46         FD            mov	al,-3[bp]
24041 60DB           30E4                       xor	ah,ah
24042 60DD           50                         push	ax
24043                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
24044 60DE           8A46         FE            mov	al,-2[bp]
24045 60E1           30E4                       xor	ah,ah
24046 60E3           50                         push	ax
24047                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
24048 60E4           8A46         08            mov	al,8[bp]
24049 60E7           30E4                       xor	ah,ah
24050 60E9           50                         push	ax
24051                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
24052 60EA           8A46         04            mov	al,4[bp]
24053 60ED           30E4                       xor	ah,ah
24054 60EF           50                         push	ax
24055                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
24056 60F0           E8         F3C6            call	_write_gfx_char_lin
24057 60F3           83C4                   0A  add	sp,*$A
24058                                           !BCC_EOS
24059                                           ! 2866           break;
24060 60F6           EB           16            jmp .1F9
24061                                           !BCC_EOS
24062                                           ! 2867        }
24063                                           ! 2868      }
24064 60F8           EB           14            jmp .1F9
24065                       000060FA            .1FB:
24066 60FA           2C                     02  sub	al,*2
24067 60FC           74           AE            je 	.1FE
24068 60FE           2C                     01  sub	al,*1
24069 6100         0F84         FF7F            beq 	.1FD
24070 6104           2C                     01  sub	al,*1
24071 6106         0F84         FF79            beq 	.1FC
24072 610A           2C                     01  sub	al,*1
24073 610C           74           C7            je 	.1FF
24074                       0000610E            .1F9:
24075                                           ! 2869     xcurs++;
24076                       0000610E            .1F8:
24077                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
24078 610E           8A46         FE            mov	al,-2[bp]
24079 6111           40                         inc	ax
24080 6112           8846         FE            mov	-2[bp],al
24081                                           !BCC_EOS
24082                                           ! 2870   }
24083                                           ! 2871  if(xcurs==nbcols)
24084 6115           EB           21            jmp .1E5
24085                       00006117            .1E7:
24086 6117           2C                     07  sub	al,*7
24087 6119         0F84         FE10            beq 	.1E8
24088 611D           2C                     01  sub	al,*1
24089 611F         0F84         FE0D            beq 	.1E9
24090 6123           2C                     01  sub	al,*1
24091 6125         0F84         FE2A            beq 	.1EE
24092 6129           2C                     01  sub	al,*1
24093 612B         0F84         FE1A            beq 	.1ED
24094 612F           2C                     03  sub	al,*3
24095 6131         0F84         FE0C            beq 	.1EC
24096 6135           E9         FE6B            br 	.1F3
24097                       00006138            .1E5:
24098                       FFFFFFEE            ..FFF6	=	-$12
24099                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
24100 6138           8A46         FE            mov	al,-2[bp]
24101 613B           30E4                       xor	ah,ah
24102 613D           3B46         F8            cmp	ax,-8[bp]
24103 6140           75           0C            jne 	.200
24104                       00006142            .201:
24105                                           ! 2872   {xcurs=0;
24106                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
24107 6142           30C0                       xor	al,al
24108 6144           8846         FE            mov	-2[bp],al
24109                                           !BCC_EOS
24110                                           ! 2873    ycurs++;
24111                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24112 6147           8A46         FD            mov	al,-3[bp]
24113 614A           40                         inc	ax
24114 614B           8846         FD            mov	-3[bp],al
24115                                           !BCC_EOS
24116                                           ! 2874   }
24117                                           ! 2875  if(ycurs==nbrows)
24118                       0000614E            .200:
24119                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
24120 614E           8A46         FD            mov	al,-3[bp]
24121 6151           30E4                       xor	ah,ah
24122 6153           3B46         F6            cmp	ax,-$A[bp]
24123 6156         0F85         00C9            bne 	.202
24124                       0000615A            .203:
24125                                           ! 2876   {
24126                                           ! 2877    if(vga_modes[line].class==0x00)
24127                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24128 615A           8A46         FB            mov	al,-5[bp]
24129 615D           30E4                       xor	ah,ah
24130 615F           B1                     03  mov	cl,*3
24131 6161           D3E0                       shl	ax,cl
24132 6163           89C3                       mov	bx,ax
24133 6165           81C3                 01FD  add	bx,#_vga_modes
24134                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24135 6169           8A47         01            mov	al,1[bx]
24136 616C           84C0                       test	al,al
24137 616E         0F85         0081            bne 	.204
24138                       00006172            .205:
24139                                           ! 2878     {
24140                                           ! 2879      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
24141                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24142 6172           8A46         FD            mov	al,-3[bp]
24143 6175           30E4                       xor	ah,ah
24144                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
24145 6177           48                         dec	ax
24146 6178           8B4E         F8            mov	cx,-8[bp]
24147 617B           F7E9                       imul	cx
24148                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24149                                           ! Debug: expression subtree swapping
24150 617D           0246         FE            add	al,-2[bp]
24151 6180           80D4                   00  adc	ah,*0
24152                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24153 6183           D1E0                       shl	ax,*1
24154 6185           50                         push	ax
24155                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24156 6186           8B46         F8            mov	ax,-8[bp]
24157 6189           8B4E         F6            mov	cx,-$A[bp]
24158 618C           F7E9                       imul	cx
24159                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24160 618E           D1E0                       shl	ax,*1
24161                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24162 6190           0C                     FF  or	al,#$FF
24163                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24164                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24165 6192           89C3                       mov	bx,ax
24166 6194           8A46         06            mov	al,6[bp]
24167 6197           30E4                       xor	ah,ah
24168 6199           93                         xchg	ax,bx
24169 619A           40                         inc	ax
24170 619B           89D9                       mov	cx,bx
24171 619D           F7E9                       imul	cx
24172                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24173 619F           0346         EE            add	ax,-$12[bp]
24174 61A2           44                         inc	sp
24175 61A3           44                         inc	sp
24176                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24177 61A4           8946         F4            mov	-$C[bp],ax
24178                                           !BCC_EOS
24179                                           ! 2880      attr=read_byte(vga_modes[line].sstart,address+1);
24180                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
24181 61A7           8B46         F4            mov	ax,-$C[bp]
24182                                           ! Debug: list unsigned int = ax+1 (used reg = )
24183 61AA           40                         inc	ax
24184 61AB           50                         push	ax
24185                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$10] struct  = vga_modes+0 (used reg = )
24186 61AC           8A46         FB            mov	al,-5[bp]
24187 61AF           30E4                       xor	ah,ah
24188 61B1           B1                     03  mov	cl,*3
24189 61B3           D3E0                       shl	ax,cl
24190 61B5           89C3                       mov	bx,ax
24191 61B7           81C3                 01FD  add	bx,#_vga_modes
24192                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24193 61BB           FF77         04            push	4[bx]
24194                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
24195 61BE           E8         1A2A            call	_read_byte
24196 61C1           83C4                   04  add	sp,*4
24197                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
24198 61C4           8846         08            mov	8[bp],al
24199                                           !BCC_EOS
24200                                           ! 2881      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
24201                                           ! Debug: list int = const 1 (used reg = )
24202 61C7           B8                   0001  mov	ax,*1
24203 61CA           50                         push	ax
24204                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24205 61CB           8A46         06            mov	al,6[bp]
24206 61CE           30E4                       xor	ah,ah
24207 61D0           50                         push	ax
24208                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24209 61D1           8B46         F8            mov	ax,-8[bp]
24210                                           ! Debug: list unsigned int = ax-1 (used reg = )
24211 61D4           48                         dec	ax
24212 61D5           50                         push	ax
24213                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24214 61D6           8B46         F6            mov	ax,-$A[bp]
24215                                           ! Debug: list unsigned int = ax-1 (used reg = )
24216 61D9           48                         dec	ax
24217 61DA           50                         push	ax
24218                                           ! Debug: list int = const 0 (used reg = )
24219 61DB           31C0                       xor	ax,ax
24220 61DD           50                         push	ax
24221                                           ! Debug: list int = const 0 (used reg = )
24222 61DE           31C0                       xor	ax,ax
24223 61E0           50                         push	ax
24224                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
24225 61E1           8A46         08            mov	al,8[bp]
24226 61E4           30E4                       xor	ah,ah
24227 61E6           50                         push	ax
24228                                           ! Debug: list int = const 1 (used reg = )
24229 61E7           B8                   0001  mov	ax,*1
24230 61EA           50                         push	ax
24231                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24232 61EB           E8         E754            call	_biosfn_scroll
24233 61EE           83C4                   10  add	sp,*$10
24234                                           !BCC_EOS
24235                                           ! 2882     }
24236                                           ! 2883    else
24237                                           ! 2884     {
24238 61F1           EB           27            jmp .206
24239                       000061F3            .204:
24240                                           ! 2885      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24241                                           ! Debug: list int = const 1 (used reg = )
24242 61F3           B8                   0001  mov	ax,*1
24243 61F6           50                         push	ax
24244                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24245 61F7           8A46         06            mov	al,6[bp]
24246 61FA           30E4                       xor	ah,ah
24247 61FC           50                         push	ax
24248                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24249 61FD           8B46         F8            mov	ax,-8[bp]
24250                                           ! Debug: list unsigned int = ax-1 (used reg = )
24251 6200           48                         dec	ax
24252 6201           50                         push	ax
24253                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24254 6202           8B46         F6            mov	ax,-$A[bp]
24255                                           ! Debug: list unsigned int = ax-1 (used reg = )
24256 6205           48                         dec	ax
24257 6206           50                         push	ax
24258                                           ! Debug: list int = const 0 (used reg = )
24259 6207           31C0                       xor	ax,ax
24260 6209           50                         push	ax
24261                                           ! Debug: list int = const 0 (used reg = )
24262 620A           31C0                       xor	ax,ax
24263 620C           50                         push	ax
24264                                           ! Debug: list int = const 0 (used reg = )
24265 620D           31C0                       xor	ax,ax
24266 620F           50                         push	ax
24267                                           ! Debug: list int = const 1 (used reg = )
24268 6210           B8                   0001  mov	ax,*1
24269 6213           50                         push	ax
24270                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24271 6214           E8         E72B            call	_biosfn_scroll
24272 6217           83C4                   10  add	sp,*$10
24273                                           !BCC_EOS
24274                                           ! 2886     }
24275                                           ! 2887    ycurs-=1;
24276                       0000621A            .206:
24277                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24278 621A           8A46         FD            mov	al,-3[bp]
24279 621D           30E4                       xor	ah,ah
24280 621F           48                         dec	ax
24281 6220           8846         FD            mov	-3[bp],al
24282                                           !BCC_EOS
24283                                           ! 2888   }
24284                                           ! 2889  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24285                       00006223            .202:
24286                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24287 6223           8A46         FD            mov	al,-3[bp]
24288 6226           30E4                       xor	ah,ah
24289 6228           8946         F2            mov	-$E[bp],ax
24290                                           !BCC_EOS
24291                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24292 622B           8B46         F2            mov	ax,-$E[bp]
24293 622E           88C4                       mov	ah,al
24294 6230           30C0                       xor	al,al
24295 6232           8946         F2            mov	-$E[bp],ax
24296                                           !BCC_EOS
24297                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24298 6235           8B46         F2            mov	ax,-$E[bp]
24299 6238           0246         FE            add	al,-2[bp]
24300 623B           80D4                   00  adc	ah,*0
24301 623E           8946         F2            mov	-$E[bp],ax
24302                                           !BCC_EOS
24303                                           ! 2890  biosfn_set_cursor_pos(page,cursor);
24304                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24305 6241           FF76         F2            push	-$E[bp]
24306                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24307 6244           8A46         06            mov	al,6[bp]
24308 6247           30E4                       xor	ah,ah
24309 6249           50                         push	ax
24310                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24311 624A           E8         E0FD            call	_biosfn_set_cursor_pos
24312 624D           83C4                   04  add	sp,*4
24313                                           !BCC_EOS
24314                                           ! 2891 }
24315 6250           89EC                       mov	sp,bp
24316 6252           5D                         pop	bp
24317 6253           C3                         ret
24318                                           ! 2892 #asm
24319                                           !BCC_ASM
24320                       00000008            _biosfn_write_teletype.flag	set	8
24321                       00000006            _biosfn_write_teletype.attr	set	6
24322                       00000004            _biosfn_write_teletype.page	set	4
24323                       00000002            _biosfn_write_teletype.car	set	2
24324                       00006254            biosfn_get_video_mode:
24325 6254           1E                           push ds
24326 6255           B8                   0040    mov ax, # 0x40
24327 6258           8ED8                         mov ds, ax
24328 625A           53                           push bx
24329 625B           BB                   0062    mov bx, # 0x62
24330 625E           8A07                         mov al, [bx]
24331 6260           5B                           pop bx
24332 6261           88C7                         mov bh, al
24333 6263           53                           push bx
24334 6264           BB                   0087    mov bx, # 0x87
24335 6267           8A27                         mov ah, [bx]
24336 6269           80E4                   80    and ah, #0x80
24337 626C           BB                   0049    mov bx, # 0x49
24338 626F           8A07                         mov al, [bx]
24339 6271           08E0                         or al, ah
24340 6273           BB                   004A    mov bx, # 0x4A
24341 6276           8A27                         mov ah, [bx]
24342 6278           5B                           pop bx
24343 6279           1F                           pop ds
24344 627A           C3                           ret
24345                                           ! 2914 endasm
24346                                           !BCC_ENDASM
24347                                           ! 2915 #asm
24348                                           !BCC_ASM
24349                       00000008            _biosfn_write_teletype.flag	set	8
24350                       00000006            _biosfn_write_teletype.attr	set	6
24351                       00000004            _biosfn_write_teletype.page	set	4
24352                       00000002            _biosfn_write_teletype.car	set	2
24353                       0000627B            biosfn_group_10:
24354 627B           3C                     00    cmp al, #0x00
24355 627D           75           02              jne int10_test_1001
24356 627F           EB           61              jmp biosfn_set_single_palette_reg
24357                       00006281            int10_test_1001:
24358 6281           3C                     01    cmp al, #0x01
24359 6283           75           02              jne int10_test_1002
24360 6285           EB           75              jmp biosfn_set_overscan_border_color
24361                       00006287            int10_test_1002:
24362 6287           3C                     02    cmp al, #0x02
24363 6289           75           02              jne int10_test_1003
24364 628B           EB           77              jmp biosfn_set_all_palette_reg
24365                       0000628D            int10_test_1003:
24366 628D           3C                     03    cmp al, #0x03
24367 628F           75           03              jne int10_test_1007
24368 6291           E9         009D              jmp biosfn_toggle_intensity
24369                       00006294            int10_test_1007:
24370 6294           3C                     07    cmp al, #0x07
24371 6296           75           03              jne int10_test_1008
24372 6298           E9         00BC              jmp biosfn_get_single_palette_reg
24373                       0000629B            int10_test_1008:
24374 629B           3C                     08    cmp al, #0x08
24375 629D           75           03              jne int10_test_1009
24376 629F           E9         00D9              jmp biosfn_read_overscan_border_color
24377                       000062A2            int10_test_1009:
24378 62A2           3C                     09    cmp al, #0x09
24379 62A4           75           03              jne int10_test_1010
24380 62A6           E9         00E0              jmp biosfn_get_all_palette_reg
24381                       000062A9            int10_test_1010:
24382 62A9           3C                     10    cmp al, #0x10
24383 62AB           75           03              jne int10_test_1012
24384 62AD           E9         011A              jmp biosfn_set_single_dac_reg
24385                       000062B0            int10_test_1012:
24386 62B0           3C                     12    cmp al, #0x12
24387 62B2           75           03              jne int10_test_1013
24388 62B4           E9         012C              jmp biosfn_set_all_dac_reg
24389                       000062B7            int10_test_1013:
24390 62B7           3C                     13    cmp al, #0x13
24391 62B9           75           03              jne int10_test_1015
24392 62BB           E9         014D              jmp biosfn_select_video_dac_color_page
24393                       000062BE            int10_test_1015:
24394 62BE           3C                     15    cmp al, #0x15
24395 62C0           75           03              jne int10_test_1017
24396 62C2           E9         0189              jmp biosfn_read_single_dac_reg
24397                       000062C5            int10_test_1017:
24398 62C5           3C                     17    cmp al, #0x17
24399 62C7           75           03              jne int10_test_1018
24400 62C9           E9         019D              jmp biosfn_read_all_dac_reg
24401                       000062CC            int10_test_1018:
24402 62CC           3C                     18    cmp al, #0x18
24403 62CE           75           03              jne int10_test_1019
24404 62D0           E9         01BE              jmp biosfn_set_pel_mask
24405                       000062D3            int10_test_1019:
24406 62D3           3C                     19    cmp al, #0x19
24407 62D5           75           03              jne int10_test_101A
24408 62D7           E9         01C2              jmp biosfn_read_pel_mask
24409                       000062DA            int10_test_101A:
24410 62DA           3C                     1A    cmp al, #0x1a
24411 62DC           75           03              jne int10_group_10_unknown
24412 62DE           E9         01C6              jmp biosfn_read_video_dac_state
24413                       000062E1            int10_group_10_unknown:
24414 62E1           C3                           ret
24415                       000062E2            biosfn_set_single_palette_reg:
24416 62E2           80FB                   14    cmp bl, #0x14
24417 62E5           77           14              ja no_actl_reg1
24418 62E7           50                           push ax
24419 62E8           52                           push dx
24420 62E9           BA                   03DA    mov dx, # 0x3da
24421 62EC           EC                           in al, dx
24422 62ED           BA                   03C0    mov dx, # 0x3c0
24423 62F0           88D8                         mov al, bl
24424 62F2           EE                           out dx, al
24425 62F3           88F8                         mov al, bh
24426 62F5           EE                           out dx, al
24427 62F6           B0                     20    mov al, #0x20
24428 62F8           EE                           out dx, al
24429 62F9           5A                           pop dx
24430 62FA           58                           pop ax
24431                       000062FB            no_actl_reg1:
24432 62FB           C3                           ret
24433                                           ! 2996 endasm
24434                                           !BCC_ENDASM
24435                                           ! 2997 #asm
24436                                           !BCC_ASM
24437                       00000008            _biosfn_write_teletype.flag	set	8
24438                       00000006            _biosfn_write_teletype.attr	set	6
24439                       00000004            _biosfn_write_teletype.page	set	4
24440                       00000002            _biosfn_write_teletype.car	set	2
24441                       000062FC            biosfn_set_overscan_border_color:
24442 62FC           53                           push bx
24443 62FD           B3                     11    mov bl, #0x11
24444 62FF           E8         FFE0              call biosfn_set_single_palette_reg
24445 6302           5B                           pop bx
24446 6303           C3                           ret
24447                                           ! 3004 endasm
24448                                           !BCC_ENDASM
24449                                           ! 3005 #asm
24450                                           !BCC_ASM
24451                       00000008            _biosfn_write_teletype.flag	set	8
24452                       00000006            _biosfn_write_teletype.attr	set	6
24453                       00000004            _biosfn_write_teletype.page	set	4
24454                       00000002            _biosfn_write_teletype.car	set	2
24455                       00006304            biosfn_set_all_palette_reg:
24456 6304           50                           push ax
24457 6305           53                           push bx
24458 6306           51                           push cx
24459 6307           52                           push dx
24460 6308           89D3                         mov bx, dx
24461 630A           BA                   03DA    mov dx, # 0x3da
24462 630D           EC                           in al, dx
24463 630E           B1                     00    mov cl, #0x00
24464 6310           BA                   03C0    mov dx, # 0x3c0
24465                       00006313            set_palette_loop:
24466 6313           88C8                         mov al, cl
24467 6315           EE                           out dx, al
24468 6316           26                           seg es
24469 6317           8A07                         mov al, [bx]
24470 6319           EE                           out dx, al
24471 631A           43                           inc bx
24472 631B           FEC1                         inc cl
24473 631D           80F9                   10    cmp cl, #0x10
24474 6320           75           F1              jne set_palette_loop
24475 6322           B0                     11    mov al, #0x11
24476 6324           EE                           out dx, al
24477 6325           26                           seg es
24478 6326           8A07                         mov al, [bx]
24479 6328           EE                           out dx, al
24480 6329           B0                     20    mov al, #0x20
24481 632B           EE                           out dx, al
24482 632C           5A                           pop dx
24483 632D           59                           pop cx
24484 632E           5B                           pop bx
24485 632F           58                           pop ax
24486 6330           C3                           ret
24487                                           ! 3038 endasm
24488                                           !BCC_ENDASM
24489                                           ! 3039 #asm
24490                                           !BCC_ASM
24491                       00000008            _biosfn_write_teletype.flag	set	8
24492                       00000006            _biosfn_write_teletype.attr	set	6
24493                       00000004            _biosfn_write_teletype.page	set	4
24494                       00000002            _biosfn_write_teletype.car	set	2
24495                       00006331            biosfn_toggle_intensity:
24496 6331           50                           push ax
24497 6332           53                           push bx
24498 6333           52                           push dx
24499 6334           BA                   03DA    mov dx, # 0x3da
24500 6337           EC                           in al, dx
24501 6338           BA                   03C0    mov dx, # 0x3c0
24502 633B           B0                     10    mov al, #0x10
24503 633D           EE                           out dx, al
24504 633E           BA                   03C1    mov dx, # 0x3c1
24505 6341           EC                           in al, dx
24506 6342           24                     F7    and al, #0xf7
24507 6344           80E3                   01    and bl, #0x01
24508 6347           C0E3                   03    shl bl, 3
24509 634A           08D8                         or al, bl
24510 634C           BA                   03C0    mov dx, # 0x3c0
24511 634F           EE                           out dx, al
24512 6350           B0                     20    mov al, #0x20
24513 6352           EE                           out dx, al
24514 6353           5A                           pop dx
24515 6354           5B                           pop bx
24516 6355           58                           pop ax
24517 6356           C3                           ret
24518                                           ! 3063 endasm
24519                                           !BCC_ENDASM
24520                                           ! 3064 #asm
24521                                           !BCC_ASM
24522                       00000008            _biosfn_write_teletype.flag	set	8
24523                       00000006            _biosfn_write_teletype.attr	set	6
24524                       00000004            _biosfn_write_teletype.page	set	4
24525                       00000002            _biosfn_write_teletype.car	set	2
24526                       00006357            biosfn_get_single_palette_reg:
24527 6357           80FB                   14    cmp bl, #0x14
24528 635A           77           1E              ja no_actl_reg2
24529 635C           50                           push ax
24530 635D           52                           push dx
24531 635E           BA                   03DA    mov dx, # 0x3da
24532 6361           EC                           in al, dx
24533 6362           BA                   03C0    mov dx, # 0x3c0
24534 6365           88D8                         mov al, bl
24535 6367           EE                           out dx, al
24536 6368           BA                   03C1    mov dx, # 0x3c1
24537 636B           EC                           in al, dx
24538 636C           88C7                         mov bh, al
24539 636E           BA                   03DA    mov dx, # 0x3da
24540 6371           EC                           in al, dx
24541 6372           BA                   03C0    mov dx, # 0x3c0
24542 6375           B0                     20    mov al, #0x20
24543 6377           EE                           out dx, al
24544 6378           5A                           pop dx
24545 6379           58                           pop ax
24546                       0000637A            no_actl_reg2:
24547 637A           C3                           ret
24548                                           ! 3087 endasm
24549                                           !BCC_ENDASM
24550                                           ! 3088 #asm
24551                                           !BCC_ASM
24552                       00000008            _biosfn_write_teletype.flag	set	8
24553                       00000006            _biosfn_write_teletype.attr	set	6
24554                       00000004            _biosfn_write_teletype.page	set	4
24555                       00000002            _biosfn_write_teletype.car	set	2
24556                       0000637B            biosfn_read_overscan_border_color:
24557 637B           50                           push ax
24558 637C           53                           push bx
24559 637D           B3                     11    mov bl, #0x11
24560 637F           E8         FFD5              call biosfn_get_single_palette_reg
24561 6382           88F8                         mov al, bh
24562 6384           5B                           pop bx
24563 6385           88C7                         mov bh, al
24564 6387           58                           pop ax
24565 6388           C3                           ret
24566                                           ! 3099 endasm
24567                                           !BCC_ENDASM
24568                                           ! 3100 #asm
24569                                           !BCC_ASM
24570                       00000008            _biosfn_write_teletype.flag	set	8
24571                       00000006            _biosfn_write_teletype.attr	set	6
24572                       00000004            _biosfn_write_teletype.page	set	4
24573                       00000002            _biosfn_write_teletype.car	set	2
24574                       00006389            biosfn_get_all_palette_reg:
24575 6389           50                           push ax
24576 638A           53                           push bx
24577 638B           51                           push cx
24578 638C           52                           push dx
24579 638D           89D3                         mov bx, dx
24580 638F           B1                     00    mov cl, #0x00
24581                       00006391            get_palette_loop:
24582 6391           BA                   03DA    mov dx, # 0x3da
24583 6394           EC                           in al, dx
24584 6395           BA                   03C0    mov dx, # 0x3c0
24585 6398           88C8                         mov al, cl
24586 639A           EE                           out dx, al
24587 639B           BA                   03C1    mov dx, # 0x3c1
24588 639E           EC                           in al, dx
24589 639F           26                           seg es
24590 63A0           8807                         mov [bx], al
24591 63A2           43                           inc bx
24592 63A3           FEC1                         inc cl
24593 63A5           80F9                   10    cmp cl, #0x10
24594 63A8           75           E7              jne get_palette_loop
24595 63AA           BA                   03DA    mov dx, # 0x3da
24596 63AD           EC                           in al, dx
24597 63AE           BA                   03C0    mov dx, # 0x3c0
24598 63B1           B0                     11    mov al, #0x11
24599 63B3           EE                           out dx, al
24600 63B4           BA                   03C1    mov dx, # 0x3c1
24601 63B7           EC                           in al, dx
24602 63B8           26                           seg es
24603 63B9           8807                         mov [bx], al
24604 63BB           BA                   03DA    mov dx, # 0x3da
24605 63BE           EC                           in al, dx
24606 63BF           BA                   03C0    mov dx, # 0x3c0
24607 63C2           B0                     20    mov al, #0x20
24608 63C4           EE                           out dx, al
24609 63C5           5A                           pop dx
24610 63C6           59                           pop cx
24611 63C7           5B                           pop bx
24612 63C8           58                           pop ax
24613 63C9           C3                           ret
24614                                           ! 3141 endasm
24615                                           !BCC_ENDASM
24616                                           ! 3142 #asm
24617                                           !BCC_ASM
24618                       00000008            _biosfn_write_teletype.flag	set	8
24619                       00000006            _biosfn_write_teletype.attr	set	6
24620                       00000004            _biosfn_write_teletype.page	set	4
24621                       00000002            _biosfn_write_teletype.car	set	2
24622                       000063CA            biosfn_set_single_dac_reg:
24623 63CA           50                           push ax
24624 63CB           52                           push dx
24625 63CC           BA                   03C8    mov dx, # 0x3c8
24626 63CF           88D8                         mov al, bl
24627 63D1           EE                           out dx, al
24628 63D2           BA                   03C9    mov dx, # 0x3c9
24629 63D5           58                           pop ax
24630 63D6           50                           push ax
24631 63D7           88E0                         mov al, ah
24632 63D9           EE                           out dx, al
24633 63DA           88E8                         mov al, ch
24634 63DC           EE                           out dx, al
24635 63DD           88C8                         mov al, cl
24636 63DF           EE                           out dx, al
24637 63E0           5A                           pop dx
24638 63E1           58                           pop ax
24639 63E2           C3                           ret
24640                                           ! 3161 endasm
24641                                           !BCC_ENDASM
24642                                           ! 3162 #asm
24643                                           !BCC_ASM
24644                       00000008            _biosfn_write_teletype.flag	set	8
24645                       00000006            _biosfn_write_teletype.attr	set	6
24646                       00000004            _biosfn_write_teletype.page	set	4
24647                       00000002            _biosfn_write_teletype.car	set	2
24648                       000063E3            biosfn_set_all_dac_reg:
24649 63E3           50                           push ax
24650 63E4           53                           push bx
24651 63E5           51                           push cx
24652 63E6           52                           push dx
24653 63E7           BA                   03C8    mov dx, # 0x3c8
24654 63EA           88D8                         mov al, bl
24655 63EC           EE                           out dx, al
24656 63ED           5A                           pop dx
24657 63EE           52                           push dx
24658 63EF           89D3                         mov bx, dx
24659 63F1           BA                   03C9    mov dx, # 0x3c9
24660                       000063F4            set_dac_loop:
24661 63F4           26                           seg es
24662 63F5           8A07                         mov al, [bx]
24663 63F7           EE                           out dx, al
24664 63F8           43                           inc bx
24665 63F9           26                           seg es
24666 63FA           8A07                         mov al, [bx]
24667 63FC           EE                           out dx, al
24668 63FD           43                           inc bx
24669 63FE           26                           seg es
24670 63FF           8A07                         mov al, [bx]
24671 6401           EE                           out dx, al
24672 6402           43                           inc bx
24673 6403           49                           dec cx
24674 6404           75           EE              jnz set_dac_loop
24675 6406           5A                           pop dx
24676 6407           59                           pop cx
24677 6408           5B                           pop bx
24678 6409           58                           pop ax
24679 640A           C3                           ret
24680                                           ! 3195 endasm
24681                                           !BCC_ENDASM
24682                                           ! 3196 #asm
24683                                           !BCC_ASM
24684                       00000008            _biosfn_write_teletype.flag	set	8
24685                       00000006            _biosfn_write_teletype.attr	set	6
24686                       00000004            _biosfn_write_teletype.page	set	4
24687                       00000002            _biosfn_write_teletype.car	set	2
24688                       0000640B            biosfn_select_video_dac_color_page:
24689 640B           50                           push ax
24690 640C           53                           push bx
24691 640D           52                           push dx
24692 640E           BA                   03DA    mov dx, # 0x3da
24693 6411           EC                           in al, dx
24694 6412           BA                   03C0    mov dx, # 0x3c0
24695 6415           B0                     10    mov al, #0x10
24696 6417           EE                           out dx, al
24697 6418           BA                   03C1    mov dx, # 0x3c1
24698 641B           EC                           in al, dx
24699 641C           80E3                   01    and bl, #0x01
24700 641F           75           0D              jnz set_dac_page
24701 6421           24                     7F    and al, #0x7f
24702 6423           C0E7                   07    shl bh, 7
24703 6426           08F8                         or al, bh
24704 6428           BA                   03C0    mov dx, # 0x3c0
24705 642B           EE                           out dx, al
24706 642C           EB           19              jmp set_actl_normal
24707                       0000642E            set_dac_page:
24708 642E           50                           push ax
24709 642F           BA                   03DA    mov dx, # 0x3da
24710 6432           EC                           in al, dx
24711 6433           BA                   03C0    mov dx, # 0x3c0
24712 6436           B0                     14    mov al, #0x14
24713 6438           EE                           out dx, al
24714 6439           58                           pop ax
24715 643A           24                     80    and al, #0x80
24716 643C           75           03              jnz set_dac_16_page
24717 643E           C0E7                   02    shl bh, 2
24718                       00006441            set_dac_16_page:
24719 6441           80E7                   0F    and bh, #0x0f
24720 6444           88F8                         mov al, bh
24721 6446           EE                           out dx, al
24722                       00006447            set_actl_normal:
24723 6447           B0                     20    mov al, #0x20
24724 6449           EE                           out dx, al
24725 644A           5A                           pop dx
24726 644B           5B                           pop bx
24727 644C           58                           pop ax
24728 644D           C3                           ret
24729                                           ! 3238 endasm
24730                                           !BCC_ENDASM
24731                                           ! 3239 #asm
24732                                           !BCC_ASM
24733                       00000008            _biosfn_write_teletype.flag	set	8
24734                       00000006            _biosfn_write_teletype.attr	set	6
24735                       00000004            _biosfn_write_teletype.page	set	4
24736                       00000002            _biosfn_write_teletype.car	set	2
24737                       0000644E            biosfn_read_single_dac_reg:
24738 644E           50                           push ax
24739 644F           52                           push dx
24740 6450           BA                   03C7    mov dx, # 0x3c7
24741 6453           88D8                         mov al, bl
24742 6455           EE                           out dx, al
24743 6456           58                           pop ax
24744 6457           88C4                         mov ah, al
24745 6459           BA                   03C9    mov dx, # 0x3c9
24746 645C           EC                           in al, dx
24747 645D           86E0                         xchg al, ah
24748 645F           50                           push ax
24749 6460           EC                           in al, dx
24750 6461           88C5                         mov ch, al
24751 6463           EC                           in al, dx
24752 6464           88C1                         mov cl, al
24753 6466           5A                           pop dx
24754 6467           58                           pop ax
24755 6468           C3                           ret
24756                                           ! 3259 endasm
24757                                           !BCC_ENDASM
24758                                           ! 3260 #asm
24759                                           !BCC_ASM
24760                       00000008            _biosfn_write_teletype.flag	set	8
24761                       00000006            _biosfn_write_teletype.attr	set	6
24762                       00000004            _biosfn_write_teletype.page	set	4
24763                       00000002            _biosfn_write_teletype.car	set	2
24764                       00006469            biosfn_read_all_dac_reg:
24765 6469           50                           push ax
24766 646A           53                           push bx
24767 646B           51                           push cx
24768 646C           52                           push dx
24769 646D           BA                   03C7    mov dx, # 0x3c7
24770 6470           88D8                         mov al, bl
24771 6472           EE                           out dx, al
24772 6473           5A                           pop dx
24773 6474           52                           push dx
24774 6475           89D3                         mov bx, dx
24775 6477           BA                   03C9    mov dx, # 0x3c9
24776                       0000647A            read_dac_loop:
24777 647A           EC                           in al, dx
24778 647B           26                           seg es
24779 647C           8807                         mov [bx], al
24780 647E           43                           inc bx
24781 647F           EC                           in al, dx
24782 6480           26                           seg es
24783 6481           8807                         mov [bx], al
24784 6483           43                           inc bx
24785 6484           EC                           in al, dx
24786 6485           26                           seg es
24787 6486           8807                         mov [bx], al
24788 6488           43                           inc bx
24789 6489           49                           dec cx
24790 648A           75           EE              jnz read_dac_loop
24791 648C           5A                           pop dx
24792 648D           59                           pop cx
24793 648E           5B                           pop bx
24794 648F           58                           pop ax
24795 6490           C3                           ret
24796                                           ! 3293 endasm
24797                                           !BCC_ENDASM
24798                                           ! 3294 #asm
24799                                           !BCC_ASM
24800                       00000008            _biosfn_write_teletype.flag	set	8
24801                       00000006            _biosfn_write_teletype.attr	set	6
24802                       00000004            _biosfn_write_teletype.page	set	4
24803                       00000002            _biosfn_write_teletype.car	set	2
24804                       00006491            biosfn_set_pel_mask:
24805 6491           50                           push ax
24806 6492           52                           push dx
24807 6493           BA                   03C6    mov dx, # 0x3c6
24808 6496           88D8                         mov al, bl
24809 6498           EE                           out dx, al
24810 6499           5A                           pop dx
24811 649A           58                           pop ax
24812 649B           C3                           ret
24813                                           ! 3304 endasm
24814                                           !BCC_ENDASM
24815                                           ! 3305 #asm
24816                                           !BCC_ASM
24817                       00000008            _biosfn_write_teletype.flag	set	8
24818                       00000006            _biosfn_write_teletype.attr	set	6
24819                       00000004            _biosfn_write_teletype.page	set	4
24820                       00000002            _biosfn_write_teletype.car	set	2
24821                       0000649C            biosfn_read_pel_mask:
24822 649C           50                           push ax
24823 649D           52                           push dx
24824 649E           BA                   03C6    mov dx, # 0x3c6
24825 64A1           EC                           in al, dx
24826 64A2           88C3                         mov bl, al
24827 64A4           5A                           pop dx
24828 64A5           58                           pop ax
24829 64A6           C3                           ret
24830                                           ! 3315 endasm
24831                                           !BCC_ENDASM
24832                                           ! 3316 #asm
24833                                           !BCC_ASM
24834                       00000008            _biosfn_write_teletype.flag	set	8
24835                       00000006            _biosfn_write_teletype.attr	set	6
24836                       00000004            _biosfn_write_teletype.page	set	4
24837                       00000002            _biosfn_write_teletype.car	set	2
24838                       000064A7            biosfn_read_video_dac_state:
24839 64A7           50                           push ax
24840 64A8           52                           push dx
24841 64A9           BA                   03DA    mov dx, # 0x3da
24842 64AC           EC                           in al, dx
24843 64AD           BA                   03C0    mov dx, # 0x3c0
24844 64B0           B0                     10    mov al, #0x10
24845 64B2           EE                           out dx, al
24846 64B3           BA                   03C1    mov dx, # 0x3c1
24847 64B6           EC                           in al, dx
24848 64B7           88C3                         mov bl, al
24849 64B9           C0EB                   07    shr bl, 7
24850 64BC           BA                   03DA    mov dx, # 0x3da
24851 64BF           EC                           in al, dx
24852 64C0           BA                   03C0    mov dx, # 0x3c0
24853 64C3           B0                     14    mov al, #0x14
24854 64C5           EE                           out dx, al
24855 64C6           BA                   03C1    mov dx, # 0x3c1
24856 64C9           EC                           in al, dx
24857 64CA           88C7                         mov bh, al
24858 64CC           80E7                   0F    and bh, #0x0f
24859 64CF           F6C3                   01    test bl, #0x01
24860 64D2           75           03              jnz get_dac_16_page
24861 64D4           C0EF                   02    shr bh, 2
24862                       000064D7            get_dac_16_page:
24863 64D7           BA                   03DA    mov dx, # 0x3da
24864 64DA           EC                           in al, dx
24865 64DB           BA                   03C0    mov dx, # 0x3c0
24866 64DE           B0                     20    mov al, #0x20
24867 64E0           EE                           out dx, al
24868 64E1           5A                           pop dx
24869 64E2           58                           pop ax
24870 64E3           C3                           ret
24871                                           ! 3350 endasm
24872                                           !BCC_ENDASM
24873                                           ! 3351 sta
24874                                           ! 3351 tic void biosfn_perform_gray_scale_summing (start,count)
24875                                           ! Register BX used in function biosfn_write_teletype
24876                                           ! 3352 Bit16u start;Bit16u count;
24877                       000064E4            _biosfn_perform_gray_scale_summing:
24878                                           !BCC_EOS
24879                                           !BCC_EOS
24880                                           ! 3353 {Bit8u r,g,b;
24881                                           !BCC_EOS
24882                                           ! 3354  Bit16u i;
24883                                           !BCC_EOS
24884                                           ! 3355  Bit16u index;
24885                                           !BCC_EOS
24886                                           ! 3356  inb(0x3da);
24887 64E4           55                         push	bp
24888 64E5           89E5                       mov	bp,sp
24889 64E7           83C4                   F8  add	sp,*-8
24890                                           ! Debug: list int = const $3DA (used reg = )
24891 64EA           B8                   03DA  mov	ax,#$3DA
24892 64ED           50                         push	ax
24893                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24894 64EE           E8         1750            call	_inb
24895 64F1           44                         inc	sp
24896 64F2           44                         inc	sp
24897                                           !BCC_EOS
24898                                           ! 3357  outb(0x3c0,0x00);
24899                                           ! Debug: list int = const 0 (used reg = )
24900 64F3           31C0                       xor	ax,ax
24901 64F5           50                         push	ax
24902                                           ! Debug: list int = const $3C0 (used reg = )
24903 64F6           B8                   03C0  mov	ax,#$3C0
24904 64F9           50                         push	ax
24905                                           ! Debug: func () void = outb+0 (used reg = )
24906 64FA           E8         175A            call	_outb
24907 64FD           83C4                   04  add	sp,*4
24908                                           !BCC_EOS
24909                                           ! 3358  for( index = 0; index < count; index++ )
24910                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24911 6500           31C0                       xor	ax,ax
24912 6502           8946         F8            mov	-8[bp],ax
24913                                           !BCC_EOS
24914                                           !BCC_EOS
24915                                           ! 3359   {
24916 6505           E9         00BE            br 	.209
24917                       00006508            .20A:
24918                                           ! 3360    outb(0x3c7,start);
24919                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24920 6508           FF76         04            push	4[bp]
24921                                           ! Debug: list int = const $3C7 (used reg = )
24922 650B           B8                   03C7  mov	ax,#$3C7
24923 650E           50                         push	ax
24924                                           ! Debug: func () void = outb+0 (used reg = )
24925 650F           E8         1745            call	_outb
24926 6512           83C4                   04  add	sp,*4
24927                                           !BCC_EOS
24928                                           ! 3361    r=inb( 0x3c9 );
24929                                           ! Debug: list int = const $3C9 (used reg = )
24930 6515           B8                   03C9  mov	ax,#$3C9
24931 6518           50                         push	ax
24932                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24933 6519           E8         1725            call	_inb
24934 651C           44                         inc	sp
24935 651D           44                         inc	sp
24936                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24937 651E           8846         FF            mov	-1[bp],al
24938                                           !BCC_EOS
24939                                           ! 3362    g=inb( 0x3c9 );
24940                                           ! Debug: list int = const $3C9 (used reg = )
24941 6521           B8                   03C9  mov	ax,#$3C9
24942 6524           50                         push	ax
24943                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24944 6525           E8         1719            call	_inb
24945 6528           44                         inc	sp
24946 6529           44                         inc	sp
24947                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24948 652A           8846         FE            mov	-2[bp],al
24949                                           !BCC_EOS
24950                                           ! 3363    b=inb( 0x3c9 );
24951                                           ! Debug: list int = const $3C9 (used reg = )
24952 652D           B8                   03C9  mov	ax,#$3C9
24953 6530           50                         push	ax
24954                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24955 6531           E8         170D            call	_inb
24956 6534           44                         inc	sp
24957 6535           44                         inc	sp
24958                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24959 6536           8846         FD            mov	-3[bp],al
24960                                           !BCC_EOS
24961                                           ! 3364    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24962                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24963                                           ! Debug: expression subtree swapping
24964 6539           8A46         FD            mov	al,-3[bp]
24965 653C           30E4                       xor	ah,ah
24966 653E           B9                   001C  mov	cx,*$1C
24967 6541           F7E9                       imul	cx
24968 6543           50                         push	ax
24969                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
24970                                           ! Debug: expression subtree swapping
24971 6544           8A46         FE            mov	al,-2[bp]
24972 6547           30E4                       xor	ah,ah
24973 6549           B9                   0097  mov	cx,#$97
24974 654C           F7E9                       imul	cx
24975 654E           50                         push	ax
24976                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
24977                                           ! Debug: expression subtree swapping
24978 654F           8A46         FF            mov	al,-1[bp]
24979 6552           30E4                       xor	ah,ah
24980 6554           B9                   004D  mov	cx,*$4D
24981 6557           F7E9                       imul	cx
24982                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
24983 6559           0346         F4            add	ax,-$C[bp]
24984 655C           44                         inc	sp
24985 655D           44                         inc	sp
24986                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24987 655E           0346         F6            add	ax,-$A[bp]
24988 6561           44                         inc	sp
24989 6562           44                         inc	sp
24990                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
24991                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
24992 6563           05                   0080  add	ax,#$80
24993 6566           88E0                       mov	al,ah
24994 6568           30E4                       xor	ah,ah
24995                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
24996 656A           8946         FA            mov	-6[bp],ax
24997                                           !BCC_EOS
24998                                           ! 3365    if(i>0x3f)i=0x3f;
24999                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25000 656D           8B46         FA            mov	ax,-6[bp]
25001 6570           3D                   003F  cmp	ax,*$3F
25002 6573           76           06            jbe 	.20B
25003                       00006575            .20C:
25004                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25005 6575           B8                   003F  mov	ax,*$3F
25006 6578           8946         FA            mov	-6[bp],ax
25007                                           !BCC_EOS
25008                                           ! 3366    outb(0x3c8,start);
25009                       0000657B            .20B:
25010                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25011 657B           FF76         04            push	4[bp]
25012                                           ! Debug: list int = const $3C8 (used reg = )
25013 657E           B8                   03C8  mov	ax,#$3C8
25014 6581           50                         push	ax
25015                                           ! Debug: func () void = outb+0 (used reg = )
25016 6582           E8         16D2            call	_outb
25017 6585           83C4                   04  add	sp,*4
25018                                           !BCC_EOS
25019                                           ! 3367    outb( 0x3c9, i&0xff );
25020                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25021 6588           8A46         FA            mov	al,-6[bp]
25022                                           ! Debug: list unsigned char = al+0 (used reg = )
25023 658B           30E4                       xor	ah,ah
25024 658D           50                         push	ax
25025                                           ! Debug: list int = const $3C9 (used reg = )
25026 658E           B8                   03C9  mov	ax,#$3C9
25027 6591           50                         push	ax
25028                                           ! Debug: func () void = outb+0 (used reg = )
25029 6592           E8         16C2            call	_outb
25030 6595           83C4                   04  add	sp,*4
25031                                           !BCC_EOS
25032                                           ! 3368    outb( 0x3c9, i&0xff );
25033                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25034 6598           8A46         FA            mov	al,-6[bp]
25035                                           ! Debug: list unsigned char = al+0 (used reg = )
25036 659B           30E4                       xor	ah,ah
25037 659D           50                         push	ax
25038                                           ! Debug: list int = const $3C9 (used reg = )
25039 659E           B8                   03C9  mov	ax,#$3C9
25040 65A1           50                         push	ax
25041                                           ! Debug: func () void = outb+0 (used reg = )
25042 65A2           E8         16B2            call	_outb
25043 65A5           83C4                   04  add	sp,*4
25044                                           !BCC_EOS
25045                                           ! 3369    outb( 0x3c9, i&0xff );
25046                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25047 65A8           8A46         FA            mov	al,-6[bp]
25048                                           ! Debug: list unsigned char = al+0 (used reg = )
25049 65AB           30E4                       xor	ah,ah
25050 65AD           50                         push	ax
25051                                           ! Debug: list int = const $3C9 (used reg = )
25052 65AE           B8                   03C9  mov	ax,#$3C9
25053 65B1           50                         push	ax
25054                                           ! Debug: func () void = outb+0 (used reg = )
25055 65B2           E8         16A2            call	_outb
25056 65B5           83C4                   04  add	sp,*4
25057                                           !BCC_EOS
25058                                           ! 3370    start++;
25059                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
25060 65B8           8B46         04            mov	ax,4[bp]
25061 65BB           40                         inc	ax
25062 65BC           8946         04            mov	4[bp],ax
25063                                           !BCC_EOS
25064                                           ! 3371   }
25065                                           ! 3372  inb(0x3da);
25066                       000065BF            .208:
25067                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
25068 65BF           8B46         F8            mov	ax,-8[bp]
25069 65C2           40                         inc	ax
25070 65C3           8946         F8            mov	-8[bp],ax
25071                       000065C6            .209:
25072                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
25073 65C6           8B46         F8            mov	ax,-8[bp]
25074 65C9           3B46         06            cmp	ax,6[bp]
25075 65CC         0F82         FF38            blo 	.20A
25076                       000065D0            .20D:
25077                       000065D0            .207:
25078                                           ! Debug: list int = const $3DA (used reg = )
25079 65D0           B8                   03DA  mov	ax,#$3DA
25080 65D3           50                         push	ax
25081                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25082 65D4           E8         166A            call	_inb
25083 65D7           44                         inc	sp
25084 65D8           44                         inc	sp
25085                                           !BCC_EOS
25086                                           ! 3373  outb(0x3c0,0x20);
25087                                           ! Debug: list int = const $20 (used reg = )
25088 65D9           B8                   0020  mov	ax,*$20
25089 65DC           50                         push	ax
25090                                           ! Debug: list int = const $3C0 (used reg = )
25091 65DD           B8                   03C0  mov	ax,#$3C0
25092 65E0           50                         push	ax
25093                                           ! Debug: func () void = outb+0 (used reg = )
25094 65E1           E8         1673            call	_outb
25095 65E4           83C4                   04  add	sp,*4
25096                                           !BCC_EOS
25097                                           ! 3374 }
25098 65E7           89EC                       mov	sp,bp
25099 65E9           5D                         pop	bp
25100 65EA           C3                         ret
25101                                           ! 3375 static void get_font_access()
25102                                           ! 3376 {
25103                       000065EB            _get_font_access:
25104                                           ! 3377 #asm
25105                                           !BCC_ASM
25106 65EB           BA                   03C4   mov dx, # 0x3c4
25107 65EE           B8                   0100   mov ax, #0x0100
25108 65F1           EF                          out dx, ax
25109 65F2           B8                   0402   mov ax, #0x0402
25110 65F5           EF                          out dx, ax
25111 65F6           B8                   0704   mov ax, #0x0704
25112 65F9           EF                          out dx, ax
25113 65FA           B8                   0300   mov ax, #0x0300
25114 65FD           EF                          out dx, ax
25115 65FE           BA                   03CE   mov dx, # 0x3ce
25116 6601           B8                   0204   mov ax, #0x0204
25117 6604           EF                          out dx, ax
25118 6605           B8                   0005   mov ax, #0x0005
25119 6608           EF                          out dx, ax
25120 6609           B8                   0406   mov ax, #0x0406
25121 660C           EF                          out dx, ax
25122                                           ! 3394 endasm
25123                                           !BCC_ENDASM
25124                                           ! 3395 }
25125 660D           C3                         ret
25126                                           ! 3396 static void release_font_access()
25127                                           ! 3397 {
25128                       0000660E            _release_font_access:
25129                                           ! 3398 #asm
25130                                           !BCC_ASM
25131 660E           BA                   03C4   mov dx, # 0x3c4
25132 6611           B8                   0100   mov ax, #0x0100
25133 6614           EF                          out dx, ax
25134 6615           B8                   0302   mov ax, #0x0302
25135 6618           EF                          out dx, ax
25136 6619           B8                   0304   mov ax, #0x0304
25137 661C           EF                          out dx, ax
25138 661D           B8                   0300   mov ax, #0x0300
25139 6620           EF                          out dx, ax
25140 6621           BA                   03CC   mov dx, # 0x3cc
25141 6624           EC                          in al, dx
25142 6625           24                     01   and al, #0x01
25143 6627           C0E0                   02   shl al, 2
25144 662A           0C                     0A   or al, #0x0a
25145 662C           88C4                        mov ah, al
25146 662E           B0                     06   mov al, #0x06
25147 6630           BA                   03CE   mov dx, # 0x3ce
25148 6633           EF                          out dx, ax
25149 6634           B8                   0004   mov ax, #0x0004
25150 6637           EF                          out dx, ax
25151 6638           B8                   1005   mov ax, #0x1005
25152 663B           EF                          out dx, ax
25153                                           ! 3421 endasm
25154                                           !BCC_ENDASM
25155                                           ! 3422 }
25156 663C           C3                         ret
25157                                           ! 3423 #asm
25158                                           !BCC_ASM
25159                       0000663D            idiv_u:
25160 663D           31D2                         xor dx,dx
25161 663F           F7F3                         div bx
25162 6641           C3                           ret
25163                                           ! 3428 endasm
25164                                           !BCC_ENDASM
25165                                           ! 3429 static void set_scan_lines(lines) Bit8u lines;
25166                       00006642            _set_scan_lines:
25167                                           !BCC_EOS
25168                                           ! 3430 {
25169                                           ! 3431  Bit16u crtc_addr,cols,page,vde;
25170                                           !BCC_EOS
25171                                           ! 3432  Bit8u crtc_r9,ovl,rows;
25172                                           !BCC_EOS
25173                                           ! 3433  crtc_addr = read_word(0x40,0x63);
25174 6642           55                         push	bp
25175 6643           89E5                       mov	bp,sp
25176 6645           83C4                   F4  add	sp,*-$C
25177                                           ! Debug: list int = const $63 (used reg = )
25178 6648           B8                   0063  mov	ax,*$63
25179 664B           50                         push	ax
25180                                           ! Debug: list int = const $40 (used reg = )
25181 664C           B8                   0040  mov	ax,*$40
25182 664F           50                         push	ax
25183                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25184 6650           E8         15AB            call	_read_word
25185 6653           83C4                   04  add	sp,*4
25186                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25187 6656           8946         FE            mov	-2[bp],ax
25188                                           !BCC_EOS
25189                                           ! 3434  outb(crtc_addr, 0x09);
25190                                           ! Debug: list int = const 9 (used reg = )
25191 6659           B8                   0009  mov	ax,*9
25192 665C           50                         push	ax
25193                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25194 665D           FF76         FE            push	-2[bp]
25195                                           ! Debug: func () void = outb+0 (used reg = )
25196 6660           E8         15F4            call	_outb
25197 6663           83C4                   04  add	sp,*4
25198                                           !BCC_EOS
25199                                           ! 3435  crtc_r9 = inb(crtc_addr+1);
25200                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25201 6666           8B46         FE            mov	ax,-2[bp]
25202                                           ! Debug: list unsigned int = ax+1 (used reg = )
25203 6669           40                         inc	ax
25204 666A           50                         push	ax
25205                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25206 666B           E8         15D3            call	_inb
25207 666E           44                         inc	sp
25208 666F           44                         inc	sp
25209                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25210 6670           8846         F7            mov	-9[bp],al
25211                                           !BCC_EOS
25212                                           ! 3436  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
25213                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
25214 6673           8A46         04            mov	al,4[bp]
25215 6676           30E4                       xor	ah,ah
25216 6678           48                         dec	ax
25217 6679           50                         push	ax
25218                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25219 667A           8A46         F7            mov	al,-9[bp]
25220 667D           24                     E0  and	al,#$E0
25221                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25222 667F           30E4                       xor	ah,ah
25223 6681           0B46         F2            or	ax,-$E[bp]
25224 6684           44                         inc	sp
25225 6685           44                         inc	sp
25226                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25227 6686           8846         F7            mov	-9[bp],al
25228                                           !BCC_EOS
25229                                           ! 3437  outb(crtc_addr+1, crtc_r9);
25230                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25231 6689           8A46         F7            mov	al,-9[bp]
25232 668C           30E4                       xor	ah,ah
25233 668E           50                         push	ax
25234                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25235 668F           8B46         FE            mov	ax,-2[bp]
25236                                           ! Debug: list unsigned int = ax+1 (used reg = )
25237 6692           40                         inc	ax
25238 6693           50                         push	ax
25239                                           ! Debug: func () void = outb+0 (used reg = )
25240 6694           E8         15C0            call	_outb
25241 6697           83C4                   04  add	sp,*4
25242                                           !BCC_EOS
25243                                           ! 3438  if(lines==8)
25244                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25245 669A           8A46         04            mov	al,4[bp]
25246 669D           3C                     08  cmp	al,*8
25247 669F           75           10            jne 	.20E
25248                       000066A1            .20F:
25249                                           ! 3439   {
25250                                           ! 3440    biosfn_set_cursor_shape(0x06,0x07);
25251                                           ! Debug: list int = const 7 (used reg = )
25252 66A1           B8                   0007  mov	ax,*7
25253 66A4           50                         push	ax
25254                                           ! Debug: list int = const 6 (used reg = )
25255 66A5           B8                   0006  mov	ax,*6
25256 66A8           50                         push	ax
25257                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25258 66A9           E8         DB83            call	_biosfn_set_cursor_shape
25259 66AC           83C4                   04  add	sp,*4
25260                                           !BCC_EOS
25261                                           ! 3441   }
25262                                           ! 3442  else
25263                                           ! 3443   {
25264 66AF           EB           18            jmp .210
25265                       000066B1            .20E:
25266                                           ! 3444    biosfn_set_cursor_shape(lines-4,lines-3);
25267                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25268 66B1           8A46         04            mov	al,4[bp]
25269 66B4           30E4                       xor	ah,ah
25270                                           ! Debug: list unsigned int = ax-3 (used reg = )
25271 66B6           05                   FFFD  add	ax,*-3
25272 66B9           50                         push	ax
25273                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25274 66BA           8A46         04            mov	al,4[bp]
25275 66BD           30E4                       xor	ah,ah
25276                                           ! Debug: list unsigned int = ax-4 (used reg = )
25277 66BF           05                   FFFC  add	ax,*-4
25278 66C2           50                         push	ax
25279                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25280 66C3           E8         DB69            call	_biosfn_set_cursor_shape
25281 66C6           83C4                   04  add	sp,*4
25282                                           !BCC_EOS
25283                                           ! 3445   }
25284                                           ! 3446  write_word(0x40,0x85, lines);
25285                       000066C9            .210:
25286                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25287 66C9           8A46         04            mov	al,4[bp]
25288 66CC           30E4                       xor	ah,ah
25289 66CE           50                         push	ax
25290                                           ! Debug: list int = const $85 (used reg = )
25291 66CF           B8                   0085  mov	ax,#$85
25292 66D2           50                         push	ax
25293                                           ! Debug: list int = const $40 (used reg = )
25294 66D3           B8                   0040  mov	ax,*$40
25295 66D6           50                         push	ax
25296                                           ! Debug: func () void = write_word+0 (used reg = )
25297 66D7           E8         154F            call	_write_word
25298 66DA           83C4                   06  add	sp,*6
25299                                           !BCC_EOS
25300                                           ! 3447  outb(crtc_addr, 0x12);
25301                                           ! Debug: list int = const $12 (used reg = )
25302 66DD           B8                   0012  mov	ax,*$12
25303 66E0           50                         push	ax
25304                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25305 66E1           FF76         FE            push	-2[bp]
25306                                           ! Debug: func () void = outb+0 (used reg = )
25307 66E4           E8         1570            call	_outb
25308 66E7           83C4                   04  add	sp,*4
25309                                           !BCC_EOS
25310                                           ! 3448  vde = inb(crtc_addr+1);
25311                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25312 66EA           8B46         FE            mov	ax,-2[bp]
25313                                           ! Debug: list unsigned int = ax+1 (used reg = )
25314 66ED           40                         inc	ax
25315 66EE           50                         push	ax
25316                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25317 66EF           E8         154F            call	_inb
25318 66F2           44                         inc	sp
25319 66F3           44                         inc	sp
25320                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25321 66F4           30E4                       xor	ah,ah
25322 66F6           8946         F8            mov	-8[bp],ax
25323                                           !BCC_EOS
25324                                           ! 3449  outb(crtc_addr, 0x07);
25325                                           ! Debug: list int = const 7 (used reg = )
25326 66F9           B8                   0007  mov	ax,*7
25327 66FC           50                         push	ax
25328                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25329 66FD           FF76         FE            push	-2[bp]
25330                                           ! Debug: func () void = outb+0 (used reg = )
25331 6700           E8         1554            call	_outb
25332 6703           83C4                   04  add	sp,*4
25333                                           !BCC_EOS
25334                                           ! 3450  ovl = inb(crtc_addr+1);
25335                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25336 6706           8B46         FE            mov	ax,-2[bp]
25337                                           ! Debug: list unsigned int = ax+1 (used reg = )
25338 6709           40                         inc	ax
25339 670A           50                         push	ax
25340                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25341 670B           E8         1533            call	_inb
25342 670E           44                         inc	sp
25343 670F           44                         inc	sp
25344                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25345 6710           8846         F6            mov	-$A[bp],al
25346                                           !BCC_EOS
25347                                           ! 3451  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25348                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25349 6713           8A46         F6            mov	al,-$A[bp]
25350 6716           24                     40  and	al,*$40
25351                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25352 6718           30E4                       xor	ah,ah
25353 671A           B1                     03  mov	cl,*3
25354 671C           D3E0                       shl	ax,cl
25355 671E           50                         push	ax
25356                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25357 671F           8A46         F6            mov	al,-$A[bp]
25358 6722           24                     02  and	al,*2
25359                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25360 6724           30E4                       xor	ah,ah
25361 6726           B1                     07  mov	cl,*7
25362 6728           D3E0                       shl	ax,cl
25363                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25364 672A           0346         F2            add	ax,-$E[bp]
25365 672D           44                         inc	sp
25366 672E           44                         inc	sp
25367                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25368                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25369 672F           40                         inc	ax
25370 6730           0346         F8            add	ax,-8[bp]
25371 6733           8946         F8            mov	-8[bp],ax
25372                                           !BCC_EOS
25373                                           ! 3452  rows = vde / lines;
25374                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25375 6736           8A46         04            mov	al,4[bp]
25376 6739           30E4                       xor	ah,ah
25377 673B           89C3                       mov	bx,ax
25378 673D           8B46         F8            mov	ax,-8[bp]
25379 6740           E8         FEFA            call	idiv_u
25380                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25381 6743           8846         F5            mov	-$B[bp],al
25382                                           !BCC_EOS
25383                                           ! 3453  write_byte(0x40,0x84, rows-1);
25384                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25385 6746           8A46         F5            mov	al,-$B[bp]
25386 6749           30E4                       xor	ah,ah
25387                                           ! Debug: list unsigned int = ax-1 (used reg = )
25388 674B           48                         dec	ax
25389 674C           50                         push	ax
25390                                           ! Debug: list int = const $84 (used reg = )
25391 674D           B8                   0084  mov	ax,#$84
25392 6750           50                         push	ax
25393                                           ! Debug: list int = const $40 (used reg = )
25394 6751           B8                   0040  mov	ax,*$40
25395 6754           50                         push	ax
25396                                           ! Debug: func () void = write_byte+0 (used reg = )
25397 6755           E8         14B9            call	_write_byte
25398 6758           83C4                   06  add	sp,*6
25399                                           !BCC_EOS
25400                                           ! 3454  cols = read_word(0x40,0x4A);
25401                                           ! Debug: list int = const $4A (used reg = )
25402 675B           B8                   004A  mov	ax,*$4A
25403 675E           50                         push	ax
25404                                           ! Debug: list int = const $40 (used reg = )
25405 675F           B8                   0040  mov	ax,*$40
25406 6762           50                         push	ax
25407                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25408 6763           E8         1498            call	_read_word
25409 6766           83C4                   04  add	sp,*4
25410                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25411 6769           8946         FC            mov	-4[bp],ax
25412                                           !BCC_EOS
25413                                           ! 3455  write_word(0x40,0x4C, rows * cols * 2);
25414                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25415 676C           8A46         F5            mov	al,-$B[bp]
25416 676F           30E4                       xor	ah,ah
25417 6771           8B4E         FC            mov	cx,-4[bp]
25418 6774           F7E9                       imul	cx
25419                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25420 6776           D1E0                       shl	ax,*1
25421                                           ! Debug: list unsigned int = ax+0 (used reg = )
25422 6778           50                         push	ax
25423                                           ! Debug: list int = const $4C (used reg = )
25424 6779           B8                   004C  mov	ax,*$4C
25425 677C           50                         push	ax
25426                                           ! Debug: list int = const $40 (used reg = )
25427 677D           B8                   0040  mov	ax,*$40
25428 6780           50                         push	ax
25429                                           ! Debug: func () void = write_word+0 (used reg = )
25430 6781           E8         14A5            call	_write_word
25431 6784           83C4                   06  add	sp,*6
25432                                           !BCC_EOS
25433                                           ! 3456 }
25434 6787           89EC                       mov	sp,bp
25435 6789           5D                         pop	bp
25436 678A           C3                         ret
25437                                           ! 3457 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25438                                           ! Register BX used in function set_scan_lines
25439                       0000678B            _biosfn_load_text_user_pat:
25440                                           !BCC_EOS
25441                                           !BCC_EOS
25442                                           !BCC_EOS
25443                                           !BCC_EOS
25444                                           !BCC_EOS
25445                                           !BCC_EOS
25446                                           !BCC_EOS
25447                                           ! 3458 {
25448                                           ! 3459  Bit16u blockaddr,de
25449                                           ! 3459 st,i,src;
25450                                           !BCC_EOS
25451                                           ! 3460  get_font_access();
25452 678B           55                         push	bp
25453 678C           89E5                       mov	bp,sp
25454 678E           83C4                   F8  add	sp,*-8
25455                                           ! Debug: func () void = get_font_access+0 (used reg = )
25456 6791           E8         FE57            call	_get_font_access
25457                                           !BCC_EOS
25458                                           ! 3461  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25459                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25460 6794           8A46         0E            mov	al,$E[bp]
25461 6797           24                     04  and	al,*4
25462                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25463 6799           30E4                       xor	ah,ah
25464 679B           88C4                       mov	ah,al
25465 679D           30C0                       xor	al,al
25466 679F           B1                     03  mov	cl,*3
25467 67A1           D3E0                       shl	ax,cl
25468 67A3           50                         push	ax
25469                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25470 67A4           8A46         0E            mov	al,$E[bp]
25471 67A7           24                     03  and	al,*3
25472                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25473 67A9           30E4                       xor	ah,ah
25474 67AB           88C4                       mov	ah,al
25475 67AD           30C0                       xor	al,al
25476 67AF           B1                     06  mov	cl,*6
25477 67B1           D3E0                       shl	ax,cl
25478                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25479 67B3           0346         F6            add	ax,-$A[bp]
25480 67B6           44                         inc	sp
25481 67B7           44                         inc	sp
25482                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25483 67B8           8946         FE            mov	-2[bp],ax
25484                                           !BCC_EOS
25485                                           ! 3462  for(i=0;i<CX;i++)
25486                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25487 67BB           31C0                       xor	ax,ax
25488 67BD           8946         FA            mov	-6[bp],ax
25489                                           !BCC_EOS
25490                                           !BCC_EOS
25491                                           ! 3463   {
25492 67C0           EB           44            jmp .213
25493                       000067C2            .214:
25494                                           ! 3464    src = BP + i * BH;
25495                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25496 67C2           8A46         10            mov	al,$10[bp]
25497 67C5           30E4                       xor	ah,ah
25498 67C7           89C3                       mov	bx,ax
25499 67C9           8B46         FA            mov	ax,-6[bp]
25500 67CC           89D9                       mov	cx,bx
25501 67CE           F7E9                       imul	cx
25502                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25503                                           ! Debug: expression subtree swapping
25504 67D0           0346         08            add	ax,8[bp]
25505                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25506 67D3           8946         F8            mov	-8[bp],ax
25507                                           !BCC_EOS
25508                                           ! 3465    dest = blockaddr + (DX + i) * 32;
25509                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25510 67D6           8B46         0C            mov	ax,$C[bp]
25511 67D9           0346         FA            add	ax,-6[bp]
25512                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25513 67DC           B1                     05  mov	cl,*5
25514 67DE           D3E0                       shl	ax,cl
25515                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25516                                           ! Debug: expression subtree swapping
25517 67E0           0346         FE            add	ax,-2[bp]
25518                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25519 67E3           8946         FC            mov	-4[bp],ax
25520                                           !BCC_EOS
25521                                           ! 3466    memcpyb(0xA000, dest, ES, src, BH);
25522                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25523 67E6           8A46         10            mov	al,$10[bp]
25524 67E9           30E4                       xor	ah,ah
25525 67EB           50                         push	ax
25526                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25527 67EC           FF76         F8            push	-8[bp]
25528                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25529 67EF           FF76         06            push	6[bp]
25530                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25531 67F2           FF76         FC            push	-4[bp]
25532                                           ! Debug: list unsigned int = const $A000 (used reg = )
25533 67F5           B8                   A000  mov	ax,#$A000
25534 67F8           50                         push	ax
25535                                           ! Debug: func () void = memcpyb+0 (used reg = )
25536 67F9           E8         138F            call	_memcpyb
25537 67FC           83C4                   0A  add	sp,*$A
25538                                           !BCC_EOS
25539                                           ! 3467   }
25540                                           ! 3468  release_font_access();
25541                       000067FF            .212:
25542                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25543 67FF           8B46         FA            mov	ax,-6[bp]
25544 6802           40                         inc	ax
25545 6803           8946         FA            mov	-6[bp],ax
25546                       00006806            .213:
25547                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25548 6806           8B46         FA            mov	ax,-6[bp]
25549 6809           3B46         0A            cmp	ax,$A[bp]
25550 680C           72           B4            jb 	.214
25551                       0000680E            .215:
25552                       0000680E            .211:
25553                                           ! Debug: func () void = release_font_access+0 (used reg = )
25554 680E           E8         FDFD            call	_release_font_access
25555                                           !BCC_EOS
25556                                           ! 3469  if(AL>=0x10)
25557                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25558 6811           8A46         04            mov	al,4[bp]
25559 6814           3C                     10  cmp	al,*$10
25560 6816           72           0B            jb  	.216
25561                       00006818            .217:
25562                                           ! 3470   {
25563                                           ! 3471    set_scan_lines(BH);
25564                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25565 6818           8A46         10            mov	al,$10[bp]
25566 681B           30E4                       xor	ah,ah
25567 681D           50                         push	ax
25568                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25569 681E           E8         FE21            call	_set_scan_lines
25570 6821           44                         inc	sp
25571 6822           44                         inc	sp
25572                                           !BCC_EOS
25573                                           ! 3472   }
25574                                           ! 3473 }
25575                       00006823            .216:
25576 6823           89EC                       mov	sp,bp
25577 6825           5D                         pop	bp
25578 6826           C3                         ret
25579                                           ! 3474 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25580                                           ! Register BX used in function biosfn_load_text_user_pat
25581                       00006827            _biosfn_load_text_8_14_pat:
25582                                           !BCC_EOS
25583                                           !BCC_EOS
25584                                           ! 3475 {
25585                                           ! 3476  Bit16u blockaddr,dest,i,src;
25586                                           !BCC_EOS
25587                                           ! 3477  get_font_access();
25588 6827           55                         push	bp
25589 6828           89E5                       mov	bp,sp
25590 682A           83C4                   F8  add	sp,*-8
25591                                           ! Debug: func () void = get_font_access+0 (used reg = )
25592 682D           E8         FDBB            call	_get_font_access
25593                                           !BCC_EOS
25594                                           ! 3478  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25595                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25596 6830           8A46         06            mov	al,6[bp]
25597 6833           24                     04  and	al,*4
25598                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25599 6835           30E4                       xor	ah,ah
25600 6837           88C4                       mov	ah,al
25601 6839           30C0                       xor	al,al
25602 683B           B1                     03  mov	cl,*3
25603 683D           D3E0                       shl	ax,cl
25604 683F           50                         push	ax
25605                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25606 6840           8A46         06            mov	al,6[bp]
25607 6843           24                     03  and	al,*3
25608                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25609 6845           30E4                       xor	ah,ah
25610 6847           88C4                       mov	ah,al
25611 6849           30C0                       xor	al,al
25612 684B           B1                     06  mov	cl,*6
25613 684D           D3E0                       shl	ax,cl
25614                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25615 684F           0346         F6            add	ax,-$A[bp]
25616 6852           44                         inc	sp
25617 6853           44                         inc	sp
25618                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25619 6854           8946         FE            mov	-2[bp],ax
25620                                           !BCC_EOS
25621                                           ! 3479  for(i=0;i<0x100;i++)
25622                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25623 6857           31C0                       xor	ax,ax
25624 6859           8946         FA            mov	-6[bp],ax
25625                                           !BCC_EOS
25626                                           !BCC_EOS
25627                                           ! 3480   {
25628 685C           EB           41            jmp .21A
25629                       0000685E            .21B:
25630                                           ! 3481    src = i * 14;
25631                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25632 685E           8B46         FA            mov	ax,-6[bp]
25633 6861           89C2                       mov	dx,ax
25634 6863           B1                     03  mov	cl,*3
25635 6865           D3E0                       shl	ax,cl
25636 6867           29D0                       sub	ax,dx
25637 6869           D1E0                       shl	ax,*1
25638                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25639 686B           8946         F8            mov	-8[bp],ax
25640                                           !BCC_EOS
25641                                           ! 3482    dest = blockaddr + i * 32;
25642                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25643 686E           8B46         FA            mov	ax,-6[bp]
25644 6871           B1                     05  mov	cl,*5
25645 6873           D3E0                       shl	ax,cl
25646                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25647                                           ! Debug: expression subtree swapping
25648 6875           0346         FE            add	ax,-2[bp]
25649                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25650 6878           8946         FC            mov	-4[bp],ax
25651                                           !BCC_EOS
25652                                           ! 3483    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25653                                           ! Debug: list int = const $E (used reg = )
25654 687B           B8                   000E  mov	ax,*$E
25655 687E           50                         push	ax
25656                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25657 687F           8B5E         F8            mov	bx,-8[bp]
25658                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25659                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25660 6882           81C3                 1761  add	bx,#_vgafont14
25661 6886           53                         push	bx
25662                                           ! Debug: list unsigned int = const $C000 (used reg = )
25663 6887           B8                   C000  mov	ax,#$C000
25664 688A           50                         push	ax
25665                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25666 688B           FF76         FC            push	-4[bp]
25667                                           ! Debug: list unsigned int = const $A000 (used reg = )
25668 688E           B8                   A000  mov	ax,#$A000
25669 6891           50                         push	ax
25670                                           ! Debug: func () void = memcpyb+0 (used reg = )
25671 6892           E8         12F6            call	_memcpyb
25672 6895           83C4                   0A  add	sp,*$A
25673                                           !BCC_EOS
25674                                           ! 3484   }
25675                                           ! 3485  release_font_access();
25676                       00006898            .219:
25677                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25678 6898           8B46         FA            mov	ax,-6[bp]
25679 689B           40                         inc	ax
25680 689C           8946         FA            mov	-6[bp],ax
25681                       0000689F            .21A:
25682                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25683 689F           8B46         FA            mov	ax,-6[bp]
25684 68A2           3D                   0100  cmp	ax,#$100
25685 68A5           72           B7            jb 	.21B
25686                       000068A7            .21C:
25687                       000068A7            .218:
25688                                           ! Debug: func () void = release_font_access+0 (used reg = )
25689 68A7           E8         FD64            call	_release_font_access
25690                                           !BCC_EOS
25691                                           ! 3486  if(AL>=0x10)
25692                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25693 68AA           8A46         04            mov	al,4[bp]
25694 68AD           3C                     10  cmp	al,*$10
25695 68AF           72           09            jb  	.21D
25696                       000068B1            .21E:
25697                                           ! 3487   {
25698                                           ! 3488    set_scan_lines(14);
25699                                           ! Debug: list int = const $E (used reg = )
25700 68B1           B8                   000E  mov	ax,*$E
25701 68B4           50                         push	ax
25702                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25703 68B5           E8         FD8A            call	_set_scan_lines
25704 68B8           44                         inc	sp
25705 68B9           44                         inc	sp
25706                                           !BCC_EOS
25707                                           ! 3489   }
25708                                           ! 3490 }
25709                       000068BA            .21D:
25710 68BA           89EC                       mov	sp,bp
25711 68BC           5D                         pop	bp
25712 68BD           C3                         ret
25713                                           ! 3491 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25714                                           ! Register BX used in function biosfn_load_text_8_14_pat
25715                       000068BE            _biosfn_load_text_8_8_pat:
25716                                           !BCC_EOS
25717                                           !BCC_EOS
25718                                           ! 3492 {
25719                                           ! 3493  Bit16u blockaddr,dest,i,src;
25720                                           !BCC_EOS
25721                                           ! 3494  get_font_access();
25722 68BE           55                         push	bp
25723 68BF           89E5                       mov	bp,sp
25724 68C1           83C4                   F8  add	sp,*-8
25725                                           ! Debug: func () void = get_font_access+0 (used reg = )
25726 68C4           E8         FD24            call	_get_font_access
25727                                           !BCC_EOS
25728                                           ! 3495  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25729                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25730 68C7           8A46         06            mov	al,6[bp]
25731 68CA           24                     04  and	al,*4
25732                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25733 68CC           30E4                       xor	ah,ah
25734 68CE           88C4                       mov	ah,al
25735 68D0           30C0                       xor	al,al
25736 68D2           B1                     03  mov	cl,*3
25737 68D4           D3E0                       shl	ax,cl
25738 68D6           50                         push	ax
25739                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25740 68D7           8A46         06            mov	al,6[bp]
25741 68DA           24                     03  and	al,*3
25742                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25743 68DC           30E4                       xor	ah,ah
25744 68DE           88C4                       mov	ah,al
25745 68E0           30C0                       xor	al,al
25746 68E2           B1                     06  mov	cl,*6
25747 68E4           D3E0                       shl	ax,cl
25748                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25749 68E6           0346         F6            add	ax,-$A[bp]
25750 68E9           44                         inc	sp
25751 68EA           44                         inc	sp
25752                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25753 68EB           8946         FE            mov	-2[bp],ax
25754                                           !BCC_EOS
25755                                           ! 3496  for(i=0;i<0x100;i++)
25756                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25757 68EE           31C0                       xor	ax,ax
25758 68F0           8946         FA            mov	-6[bp],ax
25759                                           !BCC_EOS
25760                                           !BCC_EOS
25761                                           ! 3497   {
25762 68F3           EB           3B            jmp .221
25763                       000068F5            .222:
25764                                           ! 3498    src = i * 8;
25765                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25766 68F5           8B46         FA            mov	ax,-6[bp]
25767 68F8           B1                     03  mov	cl,*3
25768 68FA           D3E0                       shl	ax,cl
25769                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25770 68FC           8946         F8            mov	-8[bp],ax
25771                                           !BCC_EOS
25772                                           ! 3499    dest = blockaddr + i * 32;
25773                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25774 68FF           8B46         FA            mov	ax,-6[bp]
25775 6902           B1                     05  mov	cl,*5
25776 6904           D3E0                       shl	ax,cl
25777                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25778                                           ! Debug: expression subtree swapping
25779 6906           0346         FE            add	ax,-2[bp]
25780                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25781 6909           8946         FC            mov	-4[bp],ax
25782                                           !BCC_EOS
25783                                           ! 3500    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25784                                           ! Debug: list int = const 8 (used reg = )
25785 690C           B8                   0008  mov	ax,*8
25786 690F           50                         push	ax
25787                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25788 6910           8B5E         F8            mov	bx,-8[bp]
25789                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25790                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25791 6913           81C3                 0F61  add	bx,#_vgafont8
25792 6917           53                         push	bx
25793                                           ! Debug: list unsigned int = const $C000 (used reg = )
25794 6918           B8                   C000  mov	ax,#$C000
25795 691B           50                         push	ax
25796                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25797 691C           FF76         FC            push	-4[bp]
25798                                           ! Debug: list unsigned int = const $A000 (used reg = )
25799 691F           B8                   A000  mov	ax,#$A000
25800 6922           50                         push	ax
25801                                           ! Debug: func () void = memcpyb+0 (used reg = )
25802 6923           E8         1265            call	_memcpyb
25803 6926           83C4                   0A  add	sp,*$A
25804                                           !BCC_EOS
25805                                           ! 3501   }
25806                                           ! 3502  release_font_access();
25807                       00006929            .220:
25808                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25809 6929           8B46         FA            mov	ax,-6[bp]
25810 692C           40                         inc	ax
25811 692D           8946         FA            mov	-6[bp],ax
25812                       00006930            .221:
25813                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25814 6930           8B46         FA            mov	ax,-6[bp]
25815 6933           3D                   0100  cmp	ax,#$100
25816 6936           72           BD            jb 	.222
25817                       00006938            .223:
25818                       00006938            .21F:
25819                                           ! Debug: func () void = release_font_access+0 (used reg = )
25820 6938           E8         FCD3            call	_release_font_access
25821                                           !BCC_EOS
25822                                           ! 3503  if(AL>=0x10)
25823                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25824 693B           8A46         04            mov	al,4[bp]
25825 693E           3C                     10  cmp	al,*$10
25826 6940           72           09            jb  	.224
25827                       00006942            .225:
25828                                           ! 3504   {
25829                                           ! 3505    set_scan_lines(8);
25830                                           ! Debug: list int = const 8 (used reg = )
25831 6942           B8                   0008  mov	ax,*8
25832 6945           50                         push	ax
25833                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25834 6946           E8         FCF9            call	_set_scan_lines
25835 6949           44                         inc	sp
25836 694A           44                         inc	sp
25837                                           !BCC_EOS
25838                                           ! 3506   }
25839                                           ! 3507 }
25840                       0000694B            .224:
25841 694B           89EC                       mov	sp,bp
25842 694D           5D                         pop	bp
25843 694E           C3                         ret
25844                                           ! 3508 #asm
25845                                           !BCC_ASM
25846                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25847                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25848                       0000694F            biosfn_set_text_block_specifier:
25849 694F           50                           push ax
25850 6950           52                           push dx
25851 6951           BA                   03C4    mov dx, # 0x3c4
25852 6954           88DC                         mov ah, bl
25853 6956           B0                     03    mov al, #0x03
25854 6958           EF                           out dx, ax
25855 6959           5A                           pop dx
25856 695A           58                           pop ax
25857 695B           C3                           ret
25858                                           ! 3519 endasm
25859                                           !BCC_ENDASM
25860                                           ! 3520 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25861                                           ! Register BX used in function biosfn_load_text_8_8_pat
25862                       0000695C            _biosfn_load_text_8_16_pat:
25863                                           !BCC_EOS
25864                                           !BCC_EOS
25865                                           ! 3521 {
25866                                           ! 3522  Bit16u blockaddr,dest,i,src;
25867                                           !BCC_EOS
25868                                           ! 3523  get_font_access();
25869 695C           55                         push	bp
25870 695D           89E5                       mov	bp,sp
25871 695F           83C4                   F8  add	sp,*-8
25872                                           ! Debug: func () void = get_font_access+0 (used reg = )
25873 6962           E8         FC86            call	_get_font_access
25874                                           !BCC_EOS
25875                                           ! 3524  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25876                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25877 6965           8A46         06            mov	al,6[bp]
25878 6968           24                     04  and	al,*4
25879                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25880 696A           30E4                       xor	ah,ah
25881 696C           88C4                       mov	ah,al
25882 696E           30C0                       xor	al,al
25883 6970           B1                     03  mov	cl,*3
25884 6972           D3E0                       shl	ax,cl
25885 6974           50                         push	ax
25886                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25887 6975           8A46         06            mov	al,6[bp]
25888 6978           24                     03  and	al,*3
25889                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25890 697A           30E4                       xor	ah,ah
25891 697C           88C4                       mov	ah,al
25892 697E           30C0                       xor	al,al
25893 6980           B1                     06  mov	cl,*6
25894 6982           D3E0                       shl	ax,cl
25895                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25896 6984           0346         F6            add	ax,-$A[bp]
25897 6987           44                         inc	sp
25898 6988           44                         inc	sp
25899                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25900 6989           8946         FE            mov	-2[bp],ax
25901                                           !BCC_EOS
25902                                           ! 3525  for(i=0;i<0x100;i++)
25903                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25904 698C           31C0                       xor	ax,ax
25905 698E           8946         FA            mov	-6[bp],ax
25906                                           !BCC_EOS
25907                                           !BCC_EOS
25908                                           ! 3526   {
25909 6991           EB           3B            jmp .228
25910                       00006993            .229:
25911                                           ! 3527    src = i * 16;
25912                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25913 6993           8B46         FA            mov	ax,-6[bp]
25914 6996           B1                     04  mov	cl,*4
25915 6998           D3E0                       shl	ax,cl
25916                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25917 699A           8946         F8            mov	-8[bp],ax
25918                                           !BCC_EOS
25919                                           ! 3528    dest = blockaddr + i * 32;
25920                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25921 699D           8B46         FA            mov	ax,-6[bp]
25922 69A0           B1                     05  mov	cl,*5
25923 69A2           D3E0                       shl	ax,cl
25924                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25925                                           ! Debug: expression subtree swapping
25926 69A4           0346         FE            add	ax,-2[bp]
25927                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25928 69A7           8946         FC            mov	-4[bp],ax
25929                                           !BCC_EOS
25930                                           ! 3529    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25931                                           ! Debug: list int = const $10 (used reg = )
25932 69AA           B8                   0010  mov	ax,*$10
25933 69AD           50                         push	ax
25934                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25935 69AE           8B5E         F8            mov	bx,-8[bp]
25936                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25937                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25938 69B1           81C3                 2561  add	bx,#_vgafont16
25939 69B5           53                         push	bx
25940                                           ! Debug: list unsigned int = const $C000 (used reg = )
25941 69B6           B8                   C000  mov	ax,#$C000
25942 69B9           50                         push	ax
25943                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25944 69BA           FF76         FC            push	-4[bp]
25945                                           ! Debug: list unsigned int = const $A000 (used reg = )
25946 69BD           B8                   A000  mov	ax,#$A000
25947 69C0           50                         push	ax
25948                                           ! Debug: func () void = memcpyb+0 (used reg = )
25949 69C1           E8         11C7            call	_memcpyb
25950 69C4           83C4                   0A  add	sp,*$A
25951                                           !BCC_EOS
25952                                           ! 3530   }
25953                                           ! 3531  release_font_access();
25954                       000069C7            .227:
25955                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25956 69C7           8B46         FA            mov	ax,-6[bp]
25957 69CA           40                         inc	ax
25958 69CB           8946         FA            mov	-6[bp],ax
25959                       000069CE            .228:
25960                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25961 69CE           8B46         FA            mov	ax,-6[bp]
25962 69D1           3D                   0100  cmp	ax,#$100
25963 69D4           72           BD            jb 	.229
25964                       000069D6            .22A:
25965                       000069D6            .226:
25966                                           ! Debug: func () void = release_font_access+0 (used reg = )
25967 69D6           E8         FC35            call	_release_font_access
25968                                           !BCC_EOS
25969                                           ! 3532  if(AL>=0x10)
25970                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25971 69D9           8A46         04            mov	al,4[bp]
25972 69DC           3C                     10  cmp	al,*$10
25973 69DE           72           09            jb  	.22B
25974                       000069E0            .22C:
25975                                           ! 3533   {
25976                                           ! 3534    set_scan_lines(16);
25977                                           ! Debug: list int = const $10 (used reg = )
25978 69E0           B8                   0010  mov	ax,*$10
25979 69E3           50                         push	ax
25980                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25981 69E4           E8         FC5B            call	_set_scan_lines
25982 69E7           44                         inc	sp
25983 69E8           44                         inc	sp
25984                                           !BCC_EOS
25985                                           ! 3535   }
25986                                           ! 3536 }
25987                       000069E9            .22B:
25988 69E9           89EC                       mov	sp,bp
25989 69EB           5D                         pop	bp
25990 69EC           C3                         ret
25991                                           ! 3537 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
25992                                           ! Register BX used in function biosfn_load_text_8_16_pat
25993                       000069ED            _biosfn_load_gfx_8_8_chars:
25994                                           !BCC_EOS
25995                                           !BCC_EOS
25996                                           ! 3538 {
25997                                           ! 3539 }
25998 69ED           C3                         ret
25999                                           ! 3540 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
26000                       000069EE            _biosfn_load_gfx_user_chars:
26001                                           !BCC_EOS
26002                                           !BCC_EOS
26003                                           !BCC_EOS
26004                                           !BCC_EOS
26005                                           !BCC_EOS
26006                                           ! 3541 {
26007                                           ! 3542 }
26008 69EE           C3                         ret
26009                                           ! 3543 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
26010                       000069EF            _biosfn_load_gfx_8_14_chars:
26011                                           !BCC_EOS
26012                                           ! 3544 {
26013                                           ! 3545 }
26014 69EF           C3                         ret
26015                                           ! 3546 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
26016                       000069F0            _biosfn_load_gfx_8_8_dd_chars:
26017                                           !BCC_EOS
26018                                           ! 3547 {
26019                                           ! 3548 }
26020 69F0           C3                         ret
26021                                           ! 3549 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
26022                       000069F1            _biosfn_load_gfx_8_16_chars:
26023                                           !BCC_EOS
26024                                           ! 3550 {
26025                                           ! 3551 }
26026 69F1           C3                         ret
26027                                           ! 3552 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
26028                                           ! 3553 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
26029                       000069F2            _biosfn_get_font_info:
26030                                           !BCC_EOS
26031                                           !BCC_EOS
26032                                           !BCC_EOS
26033                                           !BCC_EOS
26034                                           !BCC_EOS
26035                                           ! 3554 {Bit16u ss=get_SS();
26036 69F2           55                         push	bp
26037 69F3           89E5                       mov	bp,sp
26038 69F5           4C                         dec	sp
26039 69F6           4C                         dec	sp
26040                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26041 69F7           E8         127D            call	_get_SS
26042                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26043 69FA           8946         FE            mov	-2[bp],ax
26044                                           !BCC_EOS
26045                                           ! 3555  switch(BH)
26046 69FD           8A46         04            mov	al,4[bp]
26047                                           ! 3556   {cas
26048 6A00           E9         0143            br 	.22F
26049                                           ! 3556 e 0x00:
26050                                           ! 3557     write_word(ss,ES,read_word(0x00,0x1f*4));
26051                       00006A03            .230:
26052                                           ! Debug: list int = const $7C (used reg = )
26053 6A03           B8                   007C  mov	ax,*$7C
26054 6A06           50                         push	ax
26055                                           ! Debug: list int = const 0 (used reg = )
26056 6A07           31C0                       xor	ax,ax
26057 6A09           50                         push	ax
26058                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26059 6A0A           E8         11F1            call	_read_word
26060 6A0D           83C4                   04  add	sp,*4
26061                                           ! Debug: list unsigned short = ax+0 (used reg = )
26062 6A10           50                         push	ax
26063                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26064 6A11           FF76         06            push	6[bp]
26065                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26066 6A14           FF76         FE            push	-2[bp]
26067                                           ! Debug: func () void = write_word+0 (used reg = )
26068 6A17           E8         120F            call	_write_word
26069 6A1A           83C4                   06  add	sp,*6
26070                                           !BCC_EOS
26071                                           ! 3558     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
26072                                           ! Debug: list int = const $7E (used reg = )
26073 6A1D           B8                   007E  mov	ax,*$7E
26074 6A20           50                         push	ax
26075                                           ! Debug: list int = const 0 (used reg = )
26076 6A21           31C0                       xor	ax,ax
26077 6A23           50                         push	ax
26078                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26079 6A24           E8         11D7            call	_read_word
26080 6A27           83C4                   04  add	sp,*4
26081                                           ! Debug: list unsigned short = ax+0 (used reg = )
26082 6A2A           50                         push	ax
26083                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26084 6A2B           FF76         08            push	8[bp]
26085                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26086 6A2E           FF76         FE            push	-2[bp]
26087                                           ! Debug: func () void = write_word+0 (used reg = )
26088 6A31           E8         11F5            call	_write_word
26089 6A34           83C4                   06  add	sp,*6
26090                                           !BCC_EOS
26091                                           ! 3559     break;
26092 6A37           E9         0131            br 	.22D
26093                                           !BCC_EOS
26094                                           ! 3560    case 0x01:
26095                                           ! 3561     write_word(ss,ES,read_word(0x00,0x43*4));
26096                       00006A3A            .231:
26097                                           ! Debug: list int = const $10C (used reg = )
26098 6A3A           B8                   010C  mov	ax,#$10C
26099 6A3D           50                         push	ax
26100                                           ! Debug: list int = const 0 (used reg = )
26101 6A3E           31C0                       xor	ax,ax
26102 6A40           50                         push	ax
26103                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26104 6A41           E8         11BA            call	_read_word
26105 6A44           83C4                   04  add	sp,*4
26106                                           ! Debug: list unsigned short = ax+0 (used reg = )
26107 6A47           50                         push	ax
26108                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26109 6A48           FF76         06            push	6[bp]
26110                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26111 6A4B           FF76         FE            push	-2[bp]
26112                                           ! Debug: func () void = write_word+0 (used reg = )
26113 6A4E           E8         11D8            call	_write_word
26114 6A51           83C4                   06  add	sp,*6
26115                                           !BCC_EOS
26116                                           ! 3562     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26117                                           ! Debug: list int = const $10E (used reg = )
26118 6A54           B8                   010E  mov	ax,#$10E
26119 6A57           50                         push	ax
26120                                           ! Debug: list int = const 0 (used reg = )
26121 6A58           31C0                       xor	ax,ax
26122 6A5A           50                         push	ax
26123                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26124 6A5B           E8         11A0            call	_read_word
26125 6A5E           83C4                   04  add	sp,*4
26126                                           ! Debug: list unsigned short = ax+0 (used reg = )
26127 6A61           50                         push	ax
26128                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26129 6A62           FF76         08            push	8[bp]
26130                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26131 6A65           FF76         FE            push	-2[bp]
26132                                           ! Debug: func () void = write_word+0 (used reg = )
26133 6A68           E8         11BE            call	_write_word
26134 6A6B           83C4                   06  add	sp,*6
26135                                           !BCC_EOS
26136                                           ! 3563     break;
26137 6A6E           E9         00FA            br 	.22D
26138                                           !BCC_EOS
26139                                           ! 3564    case 0x02:
26140                                           ! 3565     write_word(ss,ES,0xC000);
26141                       00006A71            .232:
26142                                           ! Debug: list unsigned int = const $C000 (used reg = )
26143 6A71           B8                   C000  mov	ax,#$C000
26144 6A74           50                         push	ax
26145                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26146 6A75           FF76         06            push	6[bp]
26147                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26148 6A78           FF76         FE            push	-2[bp]
26149                                           ! Debug: func () void = write_word+0 (used reg = )
26150 6A7B           E8         11AB            call	_write_word
26151 6A7E           83C4                   06  add	sp,*6
26152                                           !BCC_EOS
26153                                           ! 3566     write_word(ss,BP,vgafont14);
26154                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26155 6A81           BB                   1761  mov	bx,#_vgafont14
26156 6A84           53                         push	bx
26157                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26158 6A85           FF76         08            push	8[bp]
26159                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26160 6A88           FF76         FE            push	-2[bp]
26161                                           ! Debug: func () void = write_word+0 (used reg = )
26162 6A8B           E8         119B            call	_write_word
26163 6A8E           83C4                   06  add	sp,*6
26164                                           !BCC_EOS
26165                                           ! 3567     break;
26166 6A91           E9         00D7            br 	.22D
26167                                           !BCC_EOS
26168                                           ! 3568    case 0x03:
26169                                           ! 3569     write_word(ss,ES,0xC000);
26170                       00006A94            .233:
26171                                           ! Debug: list unsigned int = const $C000 (used reg = )
26172 6A94           B8                   C000  mov	ax,#$C000
26173 6A97           50                         push	ax
26174                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26175 6A98           FF76         06            push	6[bp]
26176                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26177 6A9B           FF76         FE            push	-2[bp]
26178                                           ! Debug: func () void = write_word+0 (used reg = )
26179 6A9E           E8         1188            call	_write_word
26180 6AA1           83C4                   06  add	sp,*6
26181                                           !BCC_EOS
26182                                           ! 3570     write_word(ss,BP,vgafont8);
26183                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26184 6AA4           BB                   0F61  mov	bx,#_vgafont8
26185 6AA7           53                         push	bx
26186                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26187 6AA8           FF76         08            push	8[bp]
26188                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26189 6AAB           FF76         FE            push	-2[bp]
26190                                           ! Debug: func () void = write_word+0 (used reg = )
26191 6AAE           E8         1178            call	_write_word
26192 6AB1           83C4                   06  add	sp,*6
26193                                           !BCC_EOS
26194                                           ! 3571     break;
26195 6AB4           E9         00B4            br 	.22D
26196                                           !BCC_EOS
26197                                           ! 3572    case 0x04:
26198                                           ! 3573     write_word(ss,ES,0xC000);
26199                       00006AB7            .234:
26200                                           ! Debug: list unsigned int = const $C000 (used reg = )
26201 6AB7           B8                   C000  mov	ax,#$C000
26202 6ABA           50                         push	ax
26203                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26204 6ABB           FF76         06            push	6[bp]
26205                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26206 6ABE           FF76         FE            push	-2[bp]
26207                                           ! Debug: func () void = write_word+0 (used reg = )
26208 6AC1           E8         1165            call	_write_word
26209 6AC4           83C4                   06  add	sp,*6
26210                                           !BCC_EOS
26211                                           ! 3574     write_word(ss,BP,vgafont8+128*8);
26212                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26213 6AC7           BB                   1361  mov	bx,#_vgafont8+$400
26214 6ACA           53                         push	bx
26215                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26216 6ACB           FF76         08            push	8[bp]
26217                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26218 6ACE           FF76         FE            push	-2[bp]
26219                                           ! Debug: func () void = write_word+0 (used reg = )
26220 6AD1           E8         1155            call	_write_word
26221 6AD4           83C4                   06  add	sp,*6
26222                                           !BCC_EOS
26223                                           ! 3575     break;
26224 6AD7           E9         0091            br 	.22D
26225                                           !BCC_EOS
26226                                           ! 3576    case 0x05:
26227                                           ! 3577     write_word(ss,ES,0xC000);
26228                       00006ADA            .235:
26229                                           ! Debug: list unsigned int = const $C000 (used reg = )
26230 6ADA           B8                   C000  mov	ax,#$C000
26231 6ADD           50                         push	ax
26232                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26233 6ADE           FF76         06            push	6[bp]
26234                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26235 6AE1           FF76         FE            push	-2[bp]
26236                                           ! Debug: func () void = write_word+0 (used reg = )
26237 6AE4           E8         1142            call	_write_word
26238 6AE7           83C4                   06  add	sp,*6
26239                                           !BCC_EOS
26240                                           ! 3578     write_word(ss,BP,vgafont14alt);
26241                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26242 6AEA           BB                   3561  mov	bx,#_vgafont14alt
26243 6AED           53                         push	bx
26244                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26245 6AEE           FF76         08            push	8[bp]
26246                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26247 6AF1           FF76         FE            push	-2[bp]
26248                                           ! Debug: func () void = write_word+0 (used reg = )
26249 6AF4           E8         1132            call	_write_word
26250 6AF7           83C4                   06  add	sp,*6
26251                                           !BCC_EOS
26252                                           ! 3579     break;
26253 6AFA           EB           6F            jmp .22D
26254                                           !BCC_EOS
26255                                           ! 3580    case 0x06:
26256                                           ! 3581     write_word(ss,ES,0xC000);
26257                       00006AFC            .236:
26258                                           ! Debug: list unsigned int = const $C000 (used reg = )
26259 6AFC           B8                   C000  mov	ax,#$C000
26260 6AFF           50                         push	ax
26261                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26262 6B00           FF76         06            push	6[bp]
26263                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26264 6B03           FF76         FE            push	-2[bp]
26265                                           ! Debug: func () void = write_word+0 (used reg = )
26266 6B06           E8         1120            call	_write_word
26267 6B09           83C4                   06  add	sp,*6
26268                                           !BCC_EOS
26269                                           ! 3582     write_word(ss,BP,vgafont16);
26270                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26271 6B0C           BB                   2561  mov	bx,#_vgafont16
26272 6B0F           53                         push	bx
26273                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26274 6B10           FF76         08            push	8[bp]
26275                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26276 6B13           FF76         FE            push	-2[bp]
26277                                           ! Debug: func () void = write_word+0 (used reg = )
26278 6B16           E8         1110            call	_write_word
26279 6B19           83C4                   06  add	sp,*6
26280                                           !BCC_EOS
26281                                           ! 3583     break;
26282 6B1C           EB           4D            jmp .22D
26283                                           !BCC_EOS
26284                                           ! 3584    case 0x07:
26285                                           ! 3585     write_word(ss,ES,0xC000);
26286                       00006B1E            .237:
26287                                           ! Debug: list unsigned int = const $C000 (used reg = )
26288 6B1E           B8                   C000  mov	ax,#$C000
26289 6B21           50                         push	ax
26290                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26291 6B22           FF76         06            push	6[bp]
26292                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26293 6B25           FF76         FE            push	-2[bp]
26294                                           ! Debug: func () void = write_word+0 (used reg = )
26295 6B28           E8         10FE            call	_write_word
26296 6B2B           83C4                   06  add	sp,*6
26297                                           !BCC_EOS
26298                                           ! 3586     write_word(ss,BP,vgafont16alt);
26299                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26300 6B2E           BB                   3562  mov	bx,#_vgafont16alt
26301 6B31           53                         push	bx
26302                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26303 6B32           FF76         08            push	8[bp]
26304                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26305 6B35           FF76         FE            push	-2[bp]
26306                                           ! Debug: func () void = write_word+0 (used reg = )
26307 6B38           E8         10EE            call	_write_word
26308 6B3B           83C4                   06  add	sp,*6
26309                                           !BCC_EOS
26310                                           ! 3587     break;
26311 6B3E           EB           2B            jmp .22D
26312                                           !BCC_EOS
26313                                           ! 3588    default:
26314                                           ! 3589     return;
26315                       00006B40            .238:
26316 6B40           89EC                       mov	sp,bp
26317 6B42           5D                         pop	bp
26318 6B43           C3                         ret
26319                                           !BCC_EOS
26320                                           ! 3590   }
26321                                           ! 3591  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26322 6B44           EB           25            jmp .22D
26323                       00006B46            .22F:
26324 6B46           2C                     00  sub	al,*0
26325 6B48           72           F6            jb 	.238
26326 6B4A           3C                     07  cmp	al,*7
26327 6B4C           77           1B            ja  	.239
26328 6B4E           30E4                       xor	ah,ah
26329 6B50           D1E0                       shl	ax,*1
26330 6B52           89C3                       mov	bx,ax
26331 6B54           2E                         seg	cs
26332 6B55           FFA7       6B59            br	.23A[bx]
26333                       00006B59            .23A:
26334 6B59                      6A03            .word	.230
26335 6B5B                      6A3A            .word	.231
26336 6B5D                      6A71            .word	.232
26337 6B5F                      6A94            .word	.233
26338 6B61                      6AB7            .word	.234
26339 6B63                      6ADA            .word	.235
26340 6B65                      6AFC            .word	.236
26341 6B67                      6B1E            .word	.237
26342                       00006B69            .239:
26343 6B69           EB           D5            jmp	.238
26344                       00006B6B            .22D:
26345                       FFFFFFFC            ..FFF5	=	-4
26346                                           ! Debug: list int = const $85 (used reg = )
26347 6B6B           B8                   0085  mov	ax,#$85
26348 6B6E           50                         push	ax
26349                                           ! Debug: list int = const $40 (used reg = )
26350 6B6F           B8                   0040  mov	ax,*$40
26351 6B72           50                         push	ax
26352                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26353 6B73           E8         1075            call	_read_byte
26354 6B76           83C4                   04  add	sp,*4
26355                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26356 6B79           30E4                       xor	ah,ah
26357                                           ! Debug: list unsigned short = ax+0 (used reg = )
26358 6B7B           50                         push	ax
26359                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26360 6B7C           FF76         0A            push	$A[bp]
26361                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26362 6B7F           FF76         FE            push	-2[bp]
26363                                           ! Debug: func () void = write_word+0 (used reg = )
26364 6B82           E8         10A4            call	_write_word
26365 6B85           83C4                   06  add	sp,*6
26366                                           !BCC_EOS
26367                                           ! 3592  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26368                                           ! Debug: list int = const $84 (used reg = )
26369 6B88           B8                   0084  mov	ax,#$84
26370 6B8B           50                         push	ax
26371                                           ! Debug: list int = const $40 (used reg = )
26372 6B8C           B8                   0040  mov	ax,*$40
26373 6B8F           50                         push	ax
26374                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26375 6B90           E8         1058            call	_read_byte
26376 6B93           83C4                   04  add	sp,*4
26377                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26378 6B96           30E4                       xor	ah,ah
26379                                           ! Debug: list unsigned short = ax+0 (used reg = )
26380 6B98           50                         push	ax
26381                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26382 6B99           FF76         0C            push	$C[bp]
26383                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26384 6B9C           FF76         FE            push	-2[bp]
26385                                           ! Debug: func () void = write_word+0 (used reg = )
26386 6B9F           E8         1087            call	_write_word
26387 6BA2           83C4                   06  add	sp,*6
26388                                           !BCC_EOS
26389                                           ! 3593 }
26390 6BA5           89EC                       mov	sp,bp
26391 6BA7           5D                         pop	bp
26392 6BA8           C3                         ret
26393                                           ! 3594 #asm
26394                                           !BCC_ASM
26395                       00000006            _biosfn_get_font_info.BP	set	6
26396                       00000002            _biosfn_get_font_info.BH	set	2
26397                       00000008            _biosfn_get_font_info.CX	set	8
26398                       0000000A            _biosfn_get_font_info.DX	set	$A
26399                       00000004            _biosfn_get_font_info.ES	set	4
26400                       00006BA9            biosfn_get_ega_info:
26401 6BA9           1E                           push ds
26402 6BAA           50                           push ax
26403 6BAB           B8                   0040    mov ax, # 0x40
26404 6BAE           8ED8                         mov ds, ax
26405 6BB0           30ED                         xor ch, ch
26406 6BB2           BB                   0088    mov bx, # 0x88
26407 6BB5           8A0F                         mov cl, [bx]
26408 6BB7           80E1                   0F    and cl, #0x0f
26409 6BBA           BB                   0063    mov bx, # 0x63
26410 6BBD           8B07                         mov ax, [bx]
26411 6BBF           BB                   0003    mov bx, #0x0003
26412 6BC2           3D                   03B4    cmp ax, # 0x3b4
26413 6BC5           75           02              jne mode_ega_color
26414 6BC7           B7                     01    mov bh, #0x01
26415                       00006BC9            mode_ega_color:
26416 6BC9           58                           pop ax
26417 6BCA           1F                           pop ds
26418 6BCB           C3                           ret
26419                                           ! 3614 endasm
26420                                           !BCC_ENDASM
26421                                           ! 3615 static void biosfn_alternate_prtsc()
26422                                           ! Register BX used in function biosfn_get_font_info
26423                                           ! 3616 {
26424                       00006BCC            _biosfn_alternate_prtsc:
26425                                           ! 3617 }
26426 6BCC           C3                         ret
26427                                           ! 3618 #asm
26428                                           !BCC_ASM
26429                       00006BCD            biosfn_select_vert_res:
26430                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26431 6BCD           1E                           push ds
26432 6BCE           53                           push bx
26433 6BCF           52                           push dx
26434 6BD0           88C2                         mov dl, al
26435 6BD2           B8                   0040    mov ax, # 0x40
26436 6BD5           8ED8                         mov ds, ax
26437 6BD7           BB                   0089    mov bx, # 0x89
26438 6BDA           8A07                         mov al, [bx]
26439 6BDC           BB                   0088    mov bx, # 0x88
26440 6BDF           8A27                         mov ah, [bx]
26441 6BE1           80FA                   01    cmp dl, #0x01
26442 6BE4           74           15              je vert_res_350
26443 6BE6           72           1D              jb vert_res_200
26444 6BE8           80FA                   02    cmp dl, #0x02
26445 6BEB           74           02              je vert_res_400
26446 6BED           EB           2A              jmp set_retcode
26447                       00006BEF            vert_res_400:
26448                                             ; reset modeset ctl bit 7 and set bit 4
26449                                             ; set switches bit 3-0 to 0x09
26450 6BEF           24                     7F    and al, #0x7f
26451 6BF1           0C                     10    or al, #0x10
26452 6BF3           80E4                   F0    and ah, #0xf0
26453 6BF6           80CC                   09    or ah, #0x09
26454 6BF9           75           14              jnz set_vert_res
26455                       00006BFB            vert_res_350:
26456                                             ; reset modeset ctl bit 7 and bit 4
26457                                             ; set switches bit 3-0 to 0x09
26458 6BFB           24                     6F    and al, #0x6f
26459 6BFD           80E4                   F0    and ah, #0xf0
26460 6C00           80CC                   09    or ah, #0x09
26461 6C03           75           0A              jnz set_vert_res
26462                       00006C05            vert_res_200:
26463                                             ; set modeset ctl bit 7 and reset bit 4
26464                                             ; set switches bit 3-0 to 0x08
26465 6C05           24                     EF    and al, #0xef
26466 6C07           0C                     80    or al, #0x80
26467 6C09           80E4                   F0    and ah, #0xf0
26468 6C0C           80CC                   08    or ah, #0x08
26469                       00006C0F            set_vert_res:
26470 6C0F           BB                   0089    mov bx, # 0x89
26471 6C12           8807                         mov [bx], al
26472 6C14           BB                   0088    mov bx, # 0x88
26473 6C17           8827                         mov [bx], ah
26474                       00006C19            set_retcode:
26475 6C19           B8                   1212    mov ax, #0x1212
26476 6C1C           5A                           pop dx
26477 6C1D           5B                           pop bx
26478 6C1E           1F                           pop ds
26479 6C1F           C3                           ret
26480                       00006C20            biosfn_enable_default_palette_loading:
26481 6C20           1E                           push ds
26482 6C21           53                           push bx
26483 6C22           52                           push dx
26484 6C23           88C2                         mov dl, al
26485 6C25           80E2                   01    and dl, #0x01
26486 6C28           C0E2                   03    shl dl, 3
26487 6C2B           B8                   0040    mov ax, # 0x40
26488 6C2E           8ED8                         mov ds, ax
26489 6C30           BB                   0089    mov bx, # 0x89
26490 6C33           8A07                         mov al, [bx]
26491 6C35           24                     F7    and al, #0xf7
26492 6C37           08D0                         or al, dl
26493 6C39           8807                         mov [bx], al
26494 6C3B           B8                   1212    mov ax, #0x1212
26495 6C3E           5A                           pop dx
26496 6C3F           5B                           pop bx
26497 6C40           1F                           pop ds
26498 6C41           C3                           ret
26499                       00006C42            biosfn_enable_video_addressing:
26500 6C42           53                           push bx
26501 6C43           52                           push dx
26502 6C44           88C3                         mov bl, al
26503 6C46           80E3                   01    and bl, #0x01
26504 6C49           80F3                   01    xor bl, #0x01
26505 6C4C           D0E3                         shl bl, 1
26506 6C4E           BA                   03CC    mov dx, # 0x3cc
26507 6C51           EC                           in al, dx
26508 6C52           24                     FD    and al, #0xfd
26509 6C54           08D8                         or al, bl
26510 6C56           BA                   03C2    mov dx, # 0x3c2
26511 6C59           EE                           out dx, al
26512 6C5A           B8                   1212    mov ax, #0x1212
26513 6C5D           5A                           pop dx
26514 6C5E           5B                           pop bx
26515 6C5F           C3                           ret
26516                       00006C60            biosfn_enable_grayscale_summing:
26517 6C60           1E                           push ds
26518 6C61           53                           push bx
26519 6C62           52                           push dx
26520 6C63           88C2                         mov dl, al
26521 6C65           80E2                   01    and dl, #0x01
26522 6C68           80F2                   01    xor dl, #0x01
26523 6C6B           D0E2                         shl dl, 1
26524 6C6D           B8                   0040    mov ax, # 0x40
26525 6C70           8ED8                         mov ds, ax
26526 6C72           BB                   0089    mov bx, # 0x89
26527 6C75           8A07                         mov al, [bx]
26528 6C77           24                     FD    and al, #0xfd
26529 6C79           08D0                         or al, dl
26530 6C7B           8807                         mov [bx], al
26531 6C7D           B8                   1212    mov ax, #0x1212
26532 6C80           5A                           pop dx
26533 6C81           5B                           pop bx
26534 6C82           1F                           pop ds
26535 6C83           C3                           ret
26536                       00006C84            biosfn_enable_cursor_emulation:
26537 6C84           1E                           push ds
26538 6C85           53                           push bx
26539 6C86           52                           push dx
26540 6C87           88C2                         mov dl, al
26541 6C89           80E2                   01    and dl, #0x01
26542 6C8C           80F2                   01    xor dl, #0x01
26543 6C8F           B8                   0040    mov ax, # 0x40
26544 6C92           8ED8                         mov ds, ax
26545 6C94           BB                   0089    mov bx, # 0x89
26546 6C97           8A07                         mov al, [bx]
26547 6C99           24                     FE    and al, #0xfe
26548 6C9B           08D0                         or al, dl
26549 6C9D           8807                         mov [bx], al
26550 6C9F           B8                   1212    mov ax, #0x1212
26551 6CA2           5A                           pop dx
26552 6CA3           5B                           pop bx
26553 6CA4           1F                           pop ds
26554 6CA5           C3                           ret
26555                                           ! 3745 endasm
26556                                           !BCC_ENDASM
26557                                           ! 3746 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26558                       00006CA6            _biosfn_switch_video_interface:
26559                                           !BCC_EOS
26560                                           !BCC_EOS
26561                                           !BCC_EOS
26562                                           ! 3747 {
26563                                           ! 3748 }
26564 6CA6           C3                         ret
26565                                           ! 3749 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26566                       00006CA7            _biosfn_enable_video_refresh_control:
26567                                           !BCC_EOS
26568                                           ! 3750 {
26569                                           ! 3751 }
26570 6CA7           C3                         ret
26571                                           ! 3752 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26572                                           ! 3753 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26573                       00006CA8            _biosfn_write_string:
26574                                           !BCC_EOS
26575                                           !BCC_EOS
26576                                           !BCC_EOS
26577                                           !BCC_EOS
26578                                           !BCC_EOS
26579                                           !BCC_EOS
26580                                           !BCC_EOS
26581                                           !BCC_EOS
26582                                           ! 3754 {
26583                                           ! 3755  Bit16u newcurs,oldcurs,dummy;
26584                                           !BCC_EOS
26585                                           ! 3756  Bit8u car,carattr;
26586                                           !BCC_EOS
26587                                           ! 3757  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26588 6CA8           55                         push	bp
26589 6CA9           89E5                       mov	bp,sp
26590 6CAB           83C4                   F8  add	sp,*-8
26591                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26592 6CAE           8D5E         FC            lea	bx,-4[bp]
26593 6CB1           53                         push	bx
26594                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26595 6CB2           8D5E         FA            lea	bx,-6[bp]
26596 6CB5           53                         push	bx
26597                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26598 6CB6           8A46         06            mov	al,6[bp]
26599 6CB9           30E4                       xor	ah,ah
26600 6CBB           50                         push	ax
26601                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26602 6CBC           E8         D78B            call	_biosfn_get_cursor_pos
26603 6CBF           83C4                   06  add	sp,*6
26604                                           !BCC_EOS
26605                                           ! 3758  if(row==0xff)
26606                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26607 6CC2           8A46         0C            mov	al,$C[bp]
26608 6CC5           3C                     FF  cmp	al,#$FF
26609 6CC7           75           12            jne 	.23B
26610                       00006CC9            .23C:
26611                                           ! 3759   {col=oldcurs&0x00ff;
26612                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26613 6CC9           8A46         FC            mov	al,-4[bp]
26614                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26615 6CCC           8846         0E            mov	$E[bp],al
26616                                           !BCC_EOS
26617                                           ! 3760    row=(oldcurs&0xff00)>>8;
26618                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26619 6CCF           8B46         FC            mov	ax,-4[bp]
26620 6CD2           30C0                       xor	al,al
26621                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26622 6CD4           88E0                       mov	al,ah
26623 6CD6           30E4                       xor	ah,ah
26624                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26625 6CD8           8846         0C            mov	$C[bp],al
26626                                           !BCC_EOS
26627                                           ! 3761   }
26628                                           ! 3762  newcurs=row; newcurs<<=8; newcurs+=col;
26629                       00006CDB            .23B:
26630                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26631 6CDB           8A46         0C            mov	al,$C[bp]
26632 6CDE           30E4                       xor	ah,ah
26633 6CE0           8946         FE            mov	-2[bp],ax
26634                                           !BCC_EOS
26635                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26636 6CE3           8B46         FE            mov	ax,-2[bp]
26637 6CE6           88C4                       mov	ah,al
26638 6CE8           30C0                       xor	al,al
26639 6CEA           8946         FE            mov	-2[bp],ax
26640                                           !BCC_EOS
26641                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26642 6CED           8B46         FE            mov	ax,-2[bp]
26643 6CF0           0246         0E            add	al,$E[bp]
26644 6CF3           80D4                   00  adc	ah,*0
26645 6CF6           8946         FE            mov	-2[bp],ax
26646                                           !BCC_EOS
26647                                           ! 3763  biosfn_set_cursor_pos(page,newcurs);
26648                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26649 6CF9           FF76         FE            push	-2[bp]
26650                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26651 6CFC           8A46         06            mov	al,6[bp]
26652 6CFF           30E4                       xor	ah,ah
26653 6D01           50                         push	ax
26654                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26655 6D02           E8         D645            call	_biosfn_set_cursor_pos
26656 6D05           83C4                   04  add	sp,*4
26657                                           !BCC_EOS
26658                                           ! 3764  while(count--!=0)
26659                                           ! 3765   {
26660 6D08           EB           4F            jmp .23E
26661                       00006D0A            .23F:
26662                                           ! 3766    car=read_byte(seg,offset++);
26663                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26664 6D0A           8B46         12            mov	ax,$12[bp]
26665 6D0D           40                         inc	ax
26666 6D0E           8946         12            mov	$12[bp],ax
26667                                           ! Debug: list unsigned short = ax-1 (used reg = )
26668 6D11           48                         dec	ax
26669 6D12           50                         push	ax
26670                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26671 6D13           FF76         10            push	$10[bp]
26672                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26673 6D16           E8         0ED2            call	_read_byte
26674 6D19           83C4                   04  add	sp,*4
26675                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26676 6D1C           8846         F9            mov	-7[bp],al
26677                                           !BCC_EOS
26678                                           ! 3767    if((flag&0x02)!=0)
26679                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26680 6D1F           8A46         04            mov	al,4[bp]
26681 6D22           24                     02  and	al,*2
26682                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26683 6D24           84C0                       test	al,al
26684 6D26           74           15            je  	.240
26685                       00006D28            .241:
26686                                           ! 3768     attr=read_byte(seg,offset++);
26687                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26688 6D28           8B46         12            mov	ax,$12[bp]
26689 6D2B           40                         inc	ax
26690 6D2C           8946         12            mov	$12[bp],ax
26691                                           ! Debug: list unsigned short = ax-1 (used reg = )
26692 6D2F           48                         dec	ax
26693 6D30           50                         push	ax
26694                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26695 6D31           FF76         10            push	$10[bp]
26696                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26697 6D34           E8         0EB4            call	_read_byte
26698 6D37           83C4                   04  add	sp,*4
26699                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26700 6D3A           8846         08            mov	8[bp],al
26701                                           !BCC_EOS
26702                                           ! 3769    biosfn_write_teletype(car,page,attr,3);
26703                       00006D3D            .240:
26704                                           ! Debug: list int = const 3 (used reg = )
26705 6D3D           B8                   0003  mov	ax,*3
26706 6D40           50                         push	ax
26707                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26708 6D41           8A46         08            mov	al,8[bp]
26709 6D44           30E4                       xor	ah,ah
26710 6D46           50                         push	ax
26711                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26712 6D47           8A46         06            mov	al,6[bp]
26713 6D4A           30E4                       xor	ah,ah
26714 6D4C           50                         push	ax
26715                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26716 6D4D           8A46         F9            mov	al,-7[bp]
26717 6D50           30E4                       xor	ah,ah
26718 6D52           50                         push	ax
26719                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26720 6D53           E8         F13E            call	_biosfn_write_teletype
26721 6D56           83C4                   08  add	sp,*8
26722                                           !BCC_EOS
26723                                           ! 3770   }
26724                                           ! 3771  if((flag&0x01)==0)
26725                       00006D59            .23E:
26726                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26727 6D59           8B46         0A            mov	ax,$A[bp]
26728 6D5C           48                         dec	ax
26729 6D5D           8946         0A            mov	$A[bp],ax
26730                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26731 6D60           3D                   FFFF  cmp	ax,*-1
26732 6D63           75           A5            jne	.23F
26733                       00006D65            .242:
26734                       00006D65            .23D:
26735                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26736 6D65           8A46         04            mov	al,4[bp]
26737 6D68           24                     01  and	al,*1
26738                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26739 6D6A           84C0                       test	al,al
26740 6D6C           75           0F            jne 	.243
26741                       00006D6E            .244:
26742                                           ! 3772   biosfn_set_cursor_pos(page,oldcurs);
26743                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26744 6D6E           FF76         FC            push	-4[bp]
26745                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26746 6D71           8A46         06            mov	al,6[bp]
26747 6D74           30E4                       xor	ah,ah
26748 6D76           50                         push	ax
26749                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26750 6D77           E8         D5D0            call	_biosfn_set_cursor_pos
26751 6D7A           83C4                   04  add	sp,*4
26752                                           !BCC_EOS
26753                                           ! 3773 }
26754                       00006D7D            .243:
26755 6D7D           89EC                       mov	sp,bp
26756 6D7F           5D                         pop	bp
26757 6D80           C3                         ret
26758                                           ! 3774 #asm
26759                                           !BCC_ASM
26760                       00000008            _biosfn_write_string.count	set	8
26761                       0000000E            _biosfn_write_string.seg	set	$E
26762                       0000000C            _biosfn_write_string.col	set	$C
26763                       00000002            _biosfn_write_string.flag	set	2
26764                       00000006            _biosfn_write_string.attr	set	6
26765                       00000004            _biosfn_write_string.page	set	4
26766                       0000000A            _biosfn_write_string.row	set	$A
26767                       00000010            _biosfn_write_string.offset	set	$10
26768                       00006D81            biosfn_group_1A:
26769 6D81           3C                     00    cmp al, #0x00
26770 6D83           74           05              je biosfn_read_display_code
26771 6D85           3C                     01    cmp al, #0x01
26772 6D87           74           16              je biosfn_set_display_code
26773 6D89           C3                           ret
26774                       00006D8A            biosfn_read_display_code:
26775 6D8A           1E                           push ds
26776 6D8B           50                           push ax
26777 6D8C           B8                   0040    mov ax, # 0x40
26778 6D8F           8ED8                         mov ds, ax
26779 6D91           BB                   008A    mov bx, # 0x8A
26780 6D94           8A07                         mov al, [bx]
26781 6D96           88C3                         mov bl, al
26782 6D98           30FF                         xor bh, bh
26783 6D9A           58                           pop ax
26784 6D9B           88E0                         mov al, ah
26785 6D9D           1F                           pop ds
26786 6D9E           C3                           ret
26787                       00006D9F            biosfn_set_display_code:
26788 6D9F           1E                           push ds
26789 6DA0           50                           push ax
26790 6DA1           53                           push bx
26791 6DA2           B8                   0040    mov ax, # 0x40
26792 6DA5           8ED8                         mov ds, ax
26793 6DA7           89D8                         mov ax, bx
26794 6DA9           BB                   008A    mov bx, # 0x8A
26795 6DAC           8807                         mov [bx], al
26796 6DAE           5B                           pop bx
26797 6DAF           58                           pop ax
26798 6DB0           88E0                         mov al, ah
26799 6DB2           1F                           pop ds
26800 6DB3           C3                           ret
26801                                           ! 3808 endasm
26802                                           !BCC_ENDASM
26803                                           ! 3809 static void biosfn_read_state_info (BX,ES,DI)
26804                                           ! Register BX used in function biosfn_write_string
26805                                           ! 3810 Bit16u BX;Bit16u ES;Bit16u DI;
26806                       00006DB4            _biosfn_read_state_info:
26807                                           !BCC_EOS
26808                                           !BCC_EOS
26809                                           !BCC_EOS
26810                                           ! 3811 {
26811                                           ! 3812  write_word(ES,DI+0x00,&static_functionality);
26812 6DB4           55                         push	bp
26813 6DB5           89E5                       mov	bp,sp
26814                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26815 6DB7           BB                   0F51  mov	bx,#_static_functionality
26816 6DBA           53                         push	bx
26817                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26818 6DBB           8B46         08            mov	ax,8[bp]
26819                                           ! Debug: list unsigned int = ax+0 (used reg = )
26820 6DBE           50                         push	ax
26821                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26822 6DBF           FF76         06            push	6[bp]
26823                                           ! Debug: func () void = write_word+0 (used reg = )
26824 6DC2           E8         0E64            call	_write_word
26825 6DC5           89EC                       mov	sp,bp
26826                                           !BCC_EOS
26827                                           ! 3813  write_word(ES,DI+0x02,0xC000);
26828                                           ! Debug: list unsigned int = const $C000 (used reg = )
26829 6DC7           B8                   C000  mov	ax,#$C000
26830 6DCA           50                         push	ax
26831                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26832 6DCB           8B46         08            mov	ax,8[bp]
26833                                           ! Debug: list unsigned int = ax+2 (used reg = )
26834 6DCE           40                         inc	ax
26835 6DCF           40                         inc	ax
26836 6DD0           50                         push	ax
26837                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26838 6DD1           FF76         06            push	6[bp]
26839                                           ! Debug: func () void = write_word+0 (used reg = )
26840 6DD4           E8         0E52            call	_write_word
26841 6DD7           89EC                       mov	sp,bp
26842                                           !BCC_EOS
26843                                           ! 3814  memcpyb(ES,DI+0x04,0x40,0x49,30);
26844                                           ! Debug: list int = const $1E (used reg = )
26845 6DD9           B8                   001E  mov	ax,*$1E
26846 6DDC           50                         push	ax
26847                                           ! Debug: list int = const $49 (used reg = )
26848 6DDD           B8                   0049  mov	ax,*$49
26849 6DE0           50                         push	ax
26850                                           ! Debug: list int = const $40 (used reg = )
26851 6DE1           B8                   0040  mov	ax,*$40
26852 6DE4           50                         push	ax
26853                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26854 6DE5           8B46         08            mov	ax,8[bp]
26855                                           ! Debug: list unsigned int = ax+4 (used reg = )
26856 6DE8           05                   0004  add	ax,*4
26857 6DEB           50                         push	ax
26858                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26859 6DEC           FF76         06            push	6[bp]
26860                                           ! Debug: func () void = memcpyb+0 (used reg = )
26861 6DEF           E8         0D99            call	_memcpyb
26862 6DF2           89EC                       mov	sp,bp
26863                                           !BCC_EOS
26864                                           ! 3815  memcpyb(ES,DI+0x22,0x40,0x84,3);
26865                                           ! Debug: list int = const 3 (used reg = )
26866 6DF4           B8                   0003  mov	ax,*3
26867 6DF7           50                         push	ax
26868                                           ! Debug: list int = const $84 (used reg = )
26869 6DF8           B8                   0084  mov	ax,#$84
26870 6DFB           50                         push	ax
26871                                           ! Debug: list int = const $40 (used reg = )
26872 6DFC           B8                   0040  mov	ax,*$40
26873 6DFF           50                         push	ax
26874                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26875 6E00           8B46         08            mov	ax,8[bp]
26876                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26877 6E03           05                   0022  add	ax,*$22
26878 6E06           50                         push	ax
26879                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26880 6E07           FF76         06            push	6[bp]
26881                                           ! Debug: func () void = memcpyb+0 (used reg = )
26882 6E0A           E8         0D7E            call	_memcpyb
26883 6E0D           89EC                       mov	sp,bp
26884                                           !BCC_EOS
26885                                           ! 3816  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26886                                           ! Debug: list int = const $8A (used reg = )
26887 6E0F           B8                   008A  mov	ax,#$8A
26888 6E12           50                         push	ax
26889                                           ! Debug: list int = const $40 (used reg = )
26890 6E13           B8                   0040  mov	ax,*$40
26891 6E16           50                         push	ax
26892                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26893 6E17           E8         0DD1            call	_read_byte
26894 6E1A           89EC                       mov	sp,bp
26895                                           ! Debug: list unsigned char = al+0 (used reg = )
26896 6E1C           30E4                       xor	ah,ah
26897 6E1E           50                         push	ax
26898                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26899 6E1F           8B46         08            mov	ax,8[bp]
26900                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26901 6E22           05                   0025  add	ax,*$25
26902 6E25           50                         push	ax
26903                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26904 6E26           FF76         06            push	6[bp]
26905                                           ! Debug: func () void = write_byte+0 (used reg = )
26906 6E29           E8         0DE5            call	_write_byte
26907 6E2C           89EC                       mov	sp,bp
26908                                           !BCC_EOS
26909                                           ! 3817  write_byte(ES,DI+0x26,0);
26910                                           ! Debug: list int = const 0 (used reg = )
26911 6E2E           31C0                       xor	ax,ax
26912 6E30           50                         push	ax
26913                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26914 6E31           8B46         08            mov	ax,8[bp]
26915                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26916 6E34           05                   0026  add	ax,*$26
26917 6E37           50                         push	ax
26918                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26919 6E38           FF76         06            push	6[bp]
26920                                           ! Debug: func () void = write_byte+0 (used reg = )
26921 6E3B           E8         0DD3            call	_write_byte
26922 6E3E           89EC                       mov	sp,bp
26923                                           !BCC_EOS
26924                                           ! 3818  write_byte(ES,DI+0x27,16);
26925                                           ! Debug: list int = const $10 (used reg = )
26926 6E40           B8                   0010  mov	ax,*$10
26927 6E43           50                         push	ax
26928                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26929 6E44           8B46         08            mov	ax,8[bp]
26930                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26931 6E47           05                   0027  add	ax,*$27
26932 6E4A           50                         push	ax
26933                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26934 6E4B           FF76         06            push	6[bp]
26935                                           ! Debug: func () void = write_byte+0 (used reg = )
26936 6E4E           E8         0DC0            call	_write_byte
26937 6E51           89EC                       mov	sp,bp
26938                                           !BCC_EOS
26939                                           ! 3819  write_byte(ES,DI+0x28,0);
26940                                           ! Debug: list int = const 0 (used reg = )
26941 6E53           31C0                       xor	ax,ax
26942 6E55           50                         push	ax
26943                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26944 6E56           8B46         08            mov	ax,8[bp]
26945                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26946 6E59           05                   0028  add	ax,*$28
26947 6E5C           50                         push	ax
26948                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26949 6E5D           FF76         06            push	6[bp]
26950                                           ! Debug: func () void = write_byte+0 (used reg = )
26951 6E60           E8         0DAE            call	_write_byte
26952 6E63           89EC                       mov	sp,bp
26953                                           !BCC_EOS
26954                                           ! 3820  write_byte(ES,DI+0x29,8);
26955                                           ! Debug: list int = const 8 (used reg = )
26956 6E65           B8                   0008  mov	ax,*8
26957 6E68           50                         push	ax
26958                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26959 6E69           8B46         08            mov	ax,8[bp]
26960                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26961 6E6C           05                   0029  add	ax,*$29
26962 6E6F           50                         push	ax
26963                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26964 6E70           FF76         06            push	6[bp]
26965                                           ! Debug: func () void = write_byte+0 (used reg = )
26966 6E73           E8         0D9B            call	_write_byte
26967 6E76           89EC                       mov	sp,bp
26968                                           !BCC_EOS
26969                                           ! 3821  write_byte(ES,DI+0x2a,2);
26970                                           ! Debug: list int = const 2 (used reg = )
26971 6E78           B8                   0002  mov	ax,*2
26972 6E7B           50                         push	ax
26973                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
26974 6E7C           8B46         08            mov	ax,8[bp]
26975                                           ! Debug: list unsigned int = ax+$2A (used reg = )
26976 6E7F           05                   002A  add	ax,*$2A
26977 6E82           50                         push	ax
26978                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26979 6E83           FF76         06            push	6[bp]
26980                                           ! Debug: func () void = write_byte+0 (used reg = )
26981 6E86           E8         0D88            call	_write_byte
26982 6E89           89EC                       mov	sp,bp
26983                                           !BCC_EOS
26984                                           ! 3822  write_byte(ES,DI+0x2b,0);
26985                                           ! Debug: list int = const 0 (used reg = )
26986 6E8B           31C0                       xor	ax,ax
26987 6E8D           50                         push	ax
26988                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
26989 6E8E           8B46         08            mov	ax,8[bp]
26990                                           ! Debug: list unsigned int = ax+$2B (used reg = )
26991 6E91           05                   002B  add	ax,*$2B
26992 6E94           50                         push	ax
26993                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26994 6E95           FF76         06            push	6[bp]
26995                                           ! Debug: func () void = write_byte+0 (used reg = )
26996 6E98           E8         0D76            call	_write_byte
26997 6E9B           89EC                       mov	sp,bp
26998                                           !BCC_EOS
26999                                           ! 3823  write_byte(ES,DI+0x2c,0);
27000                                           ! Debug: list int = const 0 (used reg = )
27001 6E9D           31C0                       xor	ax,ax
27002 6E9F           50                         push	ax
27003                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
27004 6EA0           8B46         08            mov	ax,8[bp]
27005                                           ! Debug: list unsigned int = ax+$2C (used reg = )
27006 6EA3           05                   002C  add	ax,*$2C
27007 6EA6           50                         push	ax
27008                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27009 6EA7           FF76         06            push	6[bp]
27010                                           ! Debug: func () void = write_byte+0 (used reg = )
27011 6EAA           E8         0D64            call	_write_byte
27012 6EAD           89EC                       mov	sp,bp
27013                                           !BCC_EOS
27014                                           ! 3824  write_byte(ES,DI+0x31,3);
27015                                           ! Debug: list int = const 3 (used reg = )
27016 6EAF           B8                   0003  mov	ax,*3
27017 6EB2           50                         push	ax
27018                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
27019 6EB3           8B46         08            mov	ax,8[bp]
27020                                           ! Debug: list unsigned int = ax+$31 (used reg = )
27021 6EB6           05                   0031  add	ax,*$31
27022 6EB9           50                         push	ax
27023                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27024 6EBA           FF76         06            push	6[bp]
27025                                           ! Debug: func () void = write_byte+0 (used reg = )
27026 6EBD           E8         0D51            call	_write_byte
27027 6EC0           89EC                       mov	sp,bp
27028                                           !BCC_EOS
27029                                           ! 3825  write_byte(ES,DI+0x32,0);
27030                                           ! Debug: list int = const 0 (used reg = )
27031 6EC2           31C0                       xor	ax,ax
27032 6EC4           50                         push	ax
27033                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
27034 6EC5           8B46         08            mov	ax,8[bp]
27035                                           ! Debug: list unsigned int = ax+$32 (used reg = )
27036 6EC8           05                   0032  add	ax,*$32
27037 6ECB           50                         push	ax
27038                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27039 6ECC           FF76         06            push	6[bp]
27040                                           ! Debug: func () void = write_byte+0 (used reg = )
27041 6ECF           E8         0D3F            call	_write_byte
27042 6ED2           89EC                       mov	sp,bp
27043                                           !BCC_EOS
27044                                           ! 3826  memsetb(ES,DI+0x33,0,13);
27045                                           ! Debug: list int = const $D (used reg = )
27046 6ED4           B8                   000D  mov	ax,*$D
27047 6ED7           50                         push	ax
27048                                           ! Debug: list int = const 0 (used reg = )
27049 6ED8           31C0                       xor	ax,ax
27050 6EDA           50                         push	ax
27051                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
27052 6EDB           8B46         08            mov	ax,8[bp]
27053                                           ! Debug: list unsigned int = ax+$33 (used reg = )
27054 6EDE           05                   0033  add	ax,*$33
27055 6EE1           50                         push	ax
27056                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
27057 6EE2           FF76         06            push	6[bp]
27058                                           ! Debug: func () void = memsetb+0 (used reg = )
27059 6EE5           E8         0C59            call	_memsetb
27060 6EE8           89EC                       mov	sp,bp
27061                                           !BCC_EOS
27062                                           ! 3827 }
27063 6EEA           5D                         pop	bp
27064 6EEB           C3                         ret
27065                                           ! 3828 static Bit16u biosfn_read_video_state_size2 (CX)
27066                                           ! Register BX used in function biosfn_read_state_info
27067                                           ! 3829      Bit16u CX;
27068                       00006EEC            _biosfn_read_video_state_size2:
27069                                           !BCC_EOS
27070                                           ! 3830 {
27071                                           ! 3831     Bit16u size;
27072                                           !BCC_EOS
27073                                           ! 3832     size = 0;
27074 6EEC           55                         push	bp
27075 6EED           89E5                       mov	bp,sp
27076 6EEF           4C                         dec	sp
27077 6EF0           4C                         dec	sp
27078                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27079 6EF1           31C0                       xor	ax,ax
27080 6EF3           8946         FE            mov	-2[bp],ax
27081                                           !BCC_EOS
27082                                           ! 3833     if (CX & 1) {
27083                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27084 6EF6           8A46         04            mov	al,4[bp]
27085 6EF9           24                     01  and	al,*1
27086 6EFB           84C0                       test	al,al
27087 6EFD           74           09            je  	.245
27088                       00006EFF            .246:
27089                                           ! 3834         size += 0x46;
27090                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27091 6EFF           8B46         FE            mov	ax,-2[bp]
27092 6F02           05                   0046  add	ax,*$46
27093 6F05           8946         FE            mov	-2[bp],ax
27094                                           !BCC_EOS
27095                                           ! 3835     }
27096                                           ! 3836     if (CX & 2) {
27097                       00006F08            .245:
27098                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27099 6F08           8A46         04            mov	al,4[bp]
27100 6F0B           24                     02  and	al,*2
27101 6F0D           84C0                       test	al,al
27102 6F0F           74           09            je  	.247
27103                       00006F11            .248:
27104                                           ! 3837         size += (5 + 8 + 5) * 2 + 6;
27105                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27106 6F11           8B46         FE            mov	ax,-2[bp]
27107 6F14           05                   002A  add	ax,*$2A
27108 6F17           8946         FE            mov	-2[bp],ax
27109                                           !BCC_EOS
27110                                           ! 3838     }
27111                                           ! 3839     if (CX & 4) {
27112                       00006F1A            .247:
27113                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27114 6F1A           8A46         04            mov	al,4[bp]
27115 6F1D           24                     04  and	al,*4
27116 6F1F           84C0                       test	al,al
27117 6F21           74           09            je  	.249
27118                       00006F23            .24A:
27119                                           ! 3840         size += 3 + 256 * 3 + 1;
27120                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27121 6F23           8B46         FE            mov	ax,-2[bp]
27122 6F26           05                   0304  add	ax,#$304
27123 6F29           8946         FE            mov	-2[bp],ax
27124                                           !BCC_EOS
27125                                           ! 3841 }
27126                                           ! 3842     return size;
27127                       00006F2C            .249:
27128 6F2C           8B46         FE            mov	ax,-2[bp]
27129 6F2F           89EC                       mov	sp,bp
27130 6F31           5D                         pop	bp
27131 6F32           C3                         ret
27132                                           !BCC_EOS
27133                                           ! 3843 }
27134                                           ! 3844 static void biosfn_read_video_state_size (CX, BX)
27135                                           ! 3845      Bit16u CX; Bit16u *BX;
27136                       00006F33            _biosfn_read_video_state_size:
27137                                           !BCC_EOS
27138                                           !BCC_EOS
27139                                           ! 3846 {
27140                                           ! 3847     Bit16u ss=get_SS();
27141 6F33           55                         push	bp
27142 6F34           89E5                       mov	bp,sp
27143 6F36           4C                         dec	sp
27144 6F37           4C                         dec	sp
27145                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27146 6F38           E8         0D3C            call	_get_SS
27147                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27148 6F3B           8946         FE            mov	-2[bp],ax
27149                                           !BCC_EOS
27150                                           ! 3848     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27151                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27152 6F3E           FF76         04            push	4[bp]
27153                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27154 6F41           E8         FFA8            call	_biosfn_read_video_state_size2
27155 6F44           44                         inc	sp
27156 6F45           44                         inc	sp
27157                                           ! Debug: list unsigned short = ax+0 (used reg = )
27158 6F46           50                         push	ax
27159                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27160 6F47           FF76         06            push	6[bp]
27161                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27162 6F4A           FF76         FE            push	-2[bp]
27163                                           ! Debug: func () void = write_word+0 (used reg = )
27164 6F4D           E8         0CD9            call	_write_word
27165 6F50           83C4                   06  add	sp,*6
27166                                           !BCC_EOS
27167                                           ! 3849 }
27168 6F53           89EC                       mov	sp,bp
27169 6F55           5D                         pop	bp
27170 6F56           C3                         ret
27171                                           ! 3850 static Bit16u biosfn_save_video_state (CX,ES,BX)
27172                                           ! 3851      Bit16u CX;Bit16u ES;Bit16u BX;
27173                       00006F57            _biosfn_save_video_state:
27174                                           !BCC_EOS
27175                                           !BCC_EOS
27176                                           !BCC_EOS
27177                                           ! 3852 {
27178                                           ! 3853     Bit16u i, v, crtc_addr, ar_index;
27179                                           !BCC_EOS
27180                                           ! 3854     crtc_addr = read_word(0x40, 0x63);
27181 6F57           55                         push	bp
27182 6F58           89E5                       mov	bp,sp
27183 6F5A           83C4                   F8  add	sp,*-8
27184                                           ! Debug: list int = const $63 (used reg = )
27185 6F5D           B8                   0063  mov	ax,*$63
27186 6F60           50                         push	ax
27187                                           ! Debug: list int = const $40 (used reg = )
27188 6F61           B8                   0040  mov	ax,*$40
27189 6F64           50                         push	ax
27190                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27191 6F65           E8         0C96            call	_read_word
27192 6F68           83C4                   04  add	sp,*4
27193                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27194 6F6B           8946         FA            mov	-6[bp],ax
27195                                           !BCC_EOS
27196                                           ! 3855     if (CX & 1) {
27197                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27198 6F6E           8A46         04            mov	al,4[bp]
27199 6F71           24                     01  and	al,*1
27200 6F73           84C0                       test	al,al
27201 6F75         0F84         0266            beq 	.24B
27202                       00006F79            .24C:
27203                                           ! 3856         write_byte(ES, BX, inb(0x3c4)); BX++;
27204                                           ! Debug: list int = const $3C4 (used reg = )
27205 6F79           B8                   03C4  mov	ax,#$3C4
27206 6F7C           50                         push	ax
27207                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27208 6F7D           E8         0CC1            call	_inb
27209 6F80           44                         inc	sp
27210 6F81           44                         inc	sp
27211                                           ! Debug: list unsigned char = al+0 (used reg = )
27212 6F82           30E4                       xor	ah,ah
27213 6F84           50                         push	ax
27214                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27215 6F85           FF76         08            push	8[bp]
27216                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27217 6F88           FF76         06            push	6[bp]
27218                                           ! Debug: func () void = write_byte+0 (used reg = )
27219 6F8B           E8         0C83            call	_write_byte
27220 6F8E           83C4                   06  add	sp,*6
27221                                           !BCC_EOS
27222                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27223 6F91           8B46         08            mov	ax,8[bp]
27224 6F94           40                         inc	ax
27225 6F95           8946         08            mov	8[bp],ax
27226                                           !BCC_EOS
27227                                           ! 3857         write_byte(ES, BX, inb(crtc_addr)); BX++;
27228                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27229 6F98           FF76         FA            push	-6[bp]
27230                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27231 6F9B           E8         0CA3            call	_inb
27232 6F9E           44                         inc	sp
27233 6F9F           44                         inc	sp
27234                                           ! Debug: list unsigned char = al+0 (used reg = )
27235 6FA0           30E4                       xor	ah,ah
27236 6FA2           50                         push	ax
27237                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27238 6FA3           FF76         08            push	8[bp]
27239                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27240 6FA6           FF76         06            push	6[bp]
27241                                           ! Debug: func () void = write_byte+0 (used reg = )
27242 6FA9           E8         0C65            call	_write_byte
27243 6FAC           83C4                   06  add	sp,*6
27244                                           !BCC_EOS
27245                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27246 6FAF           8B46         08            mov	ax,8[bp]
27247 6FB2           40                         inc	ax
27248 6FB3           8946         08            mov	8[bp],ax
27249                                           !BCC_EOS
27250                                           ! 3858         write_byte(ES, BX, inb(0x3ce)); BX++;
27251                                           ! Debug: list int = const $3CE (used reg = )
27252 6FB6           B8                   03CE  mov	ax,#$3CE
27253 6FB9           50                         push	ax
27254                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27255 6FBA           E8         0C84            call	_inb
27256 6FBD           44                         inc	sp
27257 6FBE           44                         inc	sp
27258                                           ! Debug: list unsigned char = al+0 (used reg = )
27259 6FBF           30E4                       xor	ah,ah
27260 6FC1           50                         push	ax
27261                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27262 6FC2           FF76         08            push	8[bp]
27263                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27264 6FC5           FF76         06            push	6[bp]
27265                                           ! Debug: func () void = write_byte+0 (used reg = )
27266 6FC8           E8         0C46            call	_write_byte
27267 6FCB           83C4                   06  add	sp,*6
27268                                           !BCC_EOS
27269                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27270 6FCE           8B46         08            mov	ax,8[bp]
27271 6FD1           40                         inc	ax
27272 6FD2           8946         08            mov	8[bp],ax
27273                                           !BCC_EOS
27274                                           ! 3859         inb(0x3da);
27275                                           ! Debug: list int = const $3DA (used reg = )
27276 6FD5           B8                   03DA  mov	ax,#$3DA
27277 6FD8           50                         push	ax
27278                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27279 6FD9           E8         0C65            call	_inb
27280 6FDC           44                         inc	sp
27281 6FDD           44                         inc	sp
27282                                           !BCC_EOS
27283                                           ! 3860         ar_index = inb(0x3c0);
27284                                           ! Debug: list int = const $3C0 (used reg = )
27285 6FDE           B8                   03C0  mov	ax,#$3C0
27286 6FE1           50                         push	ax
27287                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27288 6FE2           E8         0C5C            call	_inb
27289 6FE5           44                         inc	sp
27290 6FE6           44                         inc	sp
27291                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27292 6FE7           30E4                       xor	ah,ah
27293 6FE9           8946         F8            mov	-8[bp],ax
27294                                           !BCC_EOS
27295                                           ! 3861         write_byte(ES, BX, ar_index); BX++;
27296                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27297 6FEC           FF76         F8            push	-8[bp]
27298                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27299 6FEF           FF76         08            push	8[bp]
27300                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27301 6FF2           FF76         06            push	6[bp]
27302                                           ! Debug: func () void = write_byte+0 (used reg = )
27303 6FF5           E8         0C19            call	_write_byte
27304 6FF8           83C4                   06  add	sp,*6
27305                                           !BCC_EOS
27306                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27307 6FFB           8B46         08            mov	ax,8[bp]
27308 6FFE           40                         inc	ax
27309 6FFF           8946         08            mov	8[bp],ax
27310                                           !BCC_EOS
27311                                           ! 3862         write_byte(ES, BX, inb(0x3ca)); BX++;
27312                                           ! Debug: list int = const $3CA (used reg = )
27313 7002           B8                   03CA  mov	ax,#$3CA
27314 7005           50                         push	ax
27315                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27316 7006           E8         0C38            call	_inb
27317 7009           44                         inc	sp
27318 700A           44                         inc	sp
27319                                           ! Debug: list unsigned char = al+0 (used reg = )
27320 700B           30E4                       xor	ah,ah
27321 700D           50                         push	ax
27322                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27323 700E           FF76         08            push	8[bp]
27324                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27325 7011           FF76         06            push	6[bp]
27326                                           ! Debug: func () void = write_byte+0 (used reg = )
27327 7014           E8         0BFA            call	_write_byte
27328 7017           83C4                   06  add	sp,*6
27329                                           !BCC_EOS
27330                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27331 701A           8B46         08            mov	ax,8[bp]
27332 701D           40                         inc	ax
27333 701E           8946         08            mov	8[bp],ax
27334                                           !BCC_EOS
27335                                           ! 3863         for(i=1;i<=4;i++){
27336                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27337 7021           B8                   0001  mov	ax,*1
27338 7024           8946         FE            mov	-2[bp],ax
27339                                           !BCC_EOS
27340                                           !BCC_EOS
27341 7027           EB           33            jmp .24F
27342                       00007029            .250:
27343                                           ! 3864             outb(0x3c4, i);
27344                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27345 7029           FF76         FE            push	-2[bp]
27346                                           ! Debug: list int = const $3C4 (used reg = )
27347 702C           B8                   03C4  mov	ax,#$3C4
27348 702F           50                         push	ax
27349                                           ! Debug: func () void = outb+0 (used reg = )
27350 7030           E8         0C24            call	_outb
27351 7033           83C4                   04  add	sp,*4
27352                                           !BCC_EOS
27353                                           ! 3865             write_byte(ES, BX, inb(0x3c5)); BX++;
27354                                           ! Debug: list int = const $3C5 (used reg = )
27355 7036           B8                   03C5  mov	ax,#$3C5
27356 7039           50                         push	ax
27357                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27358 703A           E8         0C04            call	_inb
27359 703D           44                         inc	sp
27360 703E           44                         inc	sp
27361                                           ! Debug: list unsigned char = al+0 (used reg = )
27362 703F           30E4                       xor	ah,ah
27363 7041           50                         push	ax
27364                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27365 7042           FF76         08            push	8[bp]
27366                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27367 7045           FF76         06            push	6[bp]
27368                                           ! Debug: func () void = write_byte+0 (used reg = )
27369 7048           E8         0BC6            call	_write_byte
27370 704B           83C4                   06  add	sp,*6
27371                                           !BCC_EOS
27372                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27373 704E           8B46         08            mov	ax,8[bp]
27374 7051           40                         inc	ax
27375 7052           8946         08            mov	8[bp],ax
27376                                           !BCC_EOS
27377                                           ! 3866         }
27378                                           ! 3867         outb(0x3c4, 0);
27379                       00007055            .24E:
27380                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27381 7055           8B46         FE            mov	ax,-2[bp]
27382 7058           40                         inc	ax
27383 7059           8946         FE            mov	-2[bp],ax
27384                       0000705C            .24F:
27385                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27386 705C           8B46         FE            mov	ax,-2[bp]
27387 705F           3D                   0004  cmp	ax,*4
27388 7062           76           C5            jbe	.250
27389                       00007064            .251:
27390                       00007064            .24D:
27391                                           ! Debug: list int = const 0 (used reg = )
27392 7064           31C0                       xor	ax,ax
27393 7066           50                         push	ax
27394                                           ! Debug: list int = const $3C4 (used reg = )
27395 7067           B8                   03C4  mov	ax,#$3C4
27396 706A           50                         push	ax
27397                                           ! Debug: func () void = outb+0 (used reg = )
27398 706B           E8         0BE9            call	_outb
27399 706E           83C4                   04  add	sp,*4
27400                                           !BCC_EOS
27401                                           ! 3868         write_byte(ES, BX, inb(0x3c5)); BX++;
27402                                           ! Debug: list int = const $3C5 (used reg = )
27403 7071           B8                   03C5  mov	ax,#$3C5
27404 7074           50                         push	ax
27405                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27406 7075           E8         0BC9            call	_inb
27407 7078           44                         inc	sp
27408 7079           44                         inc	sp
27409                                           ! Debug: list unsigned char = al+0 (used reg = )
27410 707A           30E4                       xor	ah,ah
27411 707C           50                         push	ax
27412                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27413 707D           FF76         08            push	8[bp]
27414                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27415 7080           FF76         06            push	6[bp]
27416                                           ! Debug: func () void = write_byte+0 (used reg = )
27417 7083           E8         0B8B            call	_write_byte
27418 7086           83C4                   06  add	sp,*6
27419                                           !BCC_EOS
27420                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27421 7089           8B46         08            mov	ax,8[bp]
27422 708C           40                         inc	ax
27423 708D           8946         08            mov	8[bp],ax
27424                                           !BCC_EOS
27425                                           ! 3869         for(i=0;i<=0x18;i+
27426                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27427 7090           31C0                       xor	ax,ax
27428 7092           8946         FE            mov	-2[bp],ax
27429                                           !BCC_EOS
27430                                           !BCC_EOS
27431                                           ! 3869 +) {
27432 7095           EB           33            jmp .254
27433                       00007097            .255:
27434                                           ! 3870             outb(crtc_addr,i);
27435                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27436 7097           FF76         FE            push	-2[bp]
27437                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27438 709A           FF76         FA            push	-6[bp]
27439                                           ! Debug: func () void = outb+0 (used reg = )
27440 709D           E8         0BB7            call	_outb
27441 70A0           83C4                   04  add	sp,*4
27442                                           !BCC_EOS
27443                                           ! 3871             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27444                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27445 70A3           8B46         FA            mov	ax,-6[bp]
27446                                           ! Debug: list unsigned int = ax+1 (used reg = )
27447 70A6           40                         inc	ax
27448 70A7           50                         push	ax
27449                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27450 70A8           E8         0B96            call	_inb
27451 70AB           44                         inc	sp
27452 70AC           44                         inc	sp
27453                                           ! Debug: list unsigned char = al+0 (used reg = )
27454 70AD           30E4                       xor	ah,ah
27455 70AF           50                         push	ax
27456                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27457 70B0           FF76         08            push	8[bp]
27458                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27459 70B3           FF76         06            push	6[bp]
27460                                           ! Debug: func () void = write_byte+0 (used reg = )
27461 70B6           E8         0B58            call	_write_byte
27462 70B9           83C4                   06  add	sp,*6
27463                                           !BCC_EOS
27464                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27465 70BC           8B46         08            mov	ax,8[bp]
27466 70BF           40                         inc	ax
27467 70C0           8946         08            mov	8[bp],ax
27468                                           !BCC_EOS
27469                                           ! 3872         }
27470                                           ! 3873         for(i=0;i<=0x13;i++) {
27471                       000070C3            .253:
27472                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27473 70C3           8B46         FE            mov	ax,-2[bp]
27474 70C6           40                         inc	ax
27475 70C7           8946         FE            mov	-2[bp],ax
27476                       000070CA            .254:
27477                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27478 70CA           8B46         FE            mov	ax,-2[bp]
27479 70CD           3D                   0018  cmp	ax,*$18
27480 70D0           76           C5            jbe	.255
27481                       000070D2            .256:
27482                       000070D2            .252:
27483                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27484 70D2           31C0                       xor	ax,ax
27485 70D4           8946         FE            mov	-2[bp],ax
27486                                           !BCC_EOS
27487                                           !BCC_EOS
27488 70D7           EB           44            jmp .259
27489                       000070D9            .25A:
27490                                           ! 3874             inb(0x3da);
27491                                           ! Debug: list int = const $3DA (used reg = )
27492 70D9           B8                   03DA  mov	ax,#$3DA
27493 70DC           50                         push	ax
27494                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27495 70DD           E8         0B61            call	_inb
27496 70E0           44                         inc	sp
27497 70E1           44                         inc	sp
27498                                           !BCC_EOS
27499                                           ! 3875             outb(0x3c0, i | (ar_index & 0x20));
27500                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27501 70E2           8A46         F8            mov	al,-8[bp]
27502 70E5           24                     20  and	al,*$20
27503                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27504                                           ! Debug: expression subtree swapping
27505 70E7           30E4                       xor	ah,ah
27506 70E9           0B46         FE            or	ax,-2[bp]
27507                                           ! Debug: list unsigned int = ax+0 (used reg = )
27508 70EC           50                         push	ax
27509                                           ! Debug: list int = const $3C0 (used reg = )
27510 70ED           B8                   03C0  mov	ax,#$3C0
27511 70F0           50                         push	ax
27512                                           ! Debug: func () void = outb+0 (used reg = )
27513 70F1           E8         0B63            call	_outb
27514 70F4           83C4                   04  add	sp,*4
27515                                           !BCC_EOS
27516                                           ! 3876             write_byte(ES, BX, inb(0x3c1)); BX++;
27517                                           ! Debug: list int = const $3C1 (used reg = )
27518 70F7           B8                   03C1  mov	ax,#$3C1
27519 70FA           50                         push	ax
27520                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27521 70FB           E8         0B43            call	_inb
27522 70FE           44                         inc	sp
27523 70FF           44                         inc	sp
27524                                           ! Debug: list unsigned char = al+0 (used reg = )
27525 7100           30E4                       xor	ah,ah
27526 7102           50                         push	ax
27527                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27528 7103           FF76         08            push	8[bp]
27529                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27530 7106           FF76         06            push	6[bp]
27531                                           ! Debug: func () void = write_byte+0 (used reg = )
27532 7109           E8         0B05            call	_write_byte
27533 710C           83C4                   06  add	sp,*6
27534                                           !BCC_EOS
27535                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27536 710F           8B46         08            mov	ax,8[bp]
27537 7112           40                         inc	ax
27538 7113           8946         08            mov	8[bp],ax
27539                                           !BCC_EOS
27540                                           ! 3877         }
27541                                           ! 3878         inb(0x3da);
27542                       00007116            .258:
27543                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27544 7116           8B46         FE            mov	ax,-2[bp]
27545 7119           40                         inc	ax
27546 711A           8946         FE            mov	-2[bp],ax
27547                       0000711D            .259:
27548                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27549 711D           8B46         FE            mov	ax,-2[bp]
27550 7120           3D                   0013  cmp	ax,*$13
27551 7123           76           B4            jbe	.25A
27552                       00007125            .25B:
27553                       00007125            .257:
27554                                           ! Debug: list int = const $3DA (used reg = )
27555 7125           B8                   03DA  mov	ax,#$3DA
27556 7128           50                         push	ax
27557                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27558 7129           E8         0B15            call	_inb
27559 712C           44                         inc	sp
27560 712D           44                         inc	sp
27561                                           !BCC_EOS
27562                                           ! 3879         for(i=0;i<=8;i++) {
27563                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27564 712E           31C0                       xor	ax,ax
27565 7130           8946         FE            mov	-2[bp],ax
27566                                           !BCC_EOS
27567                                           !BCC_EOS
27568 7133           EB           33            jmp .25E
27569                       00007135            .25F:
27570                                           ! 3880             outb(0x3ce,i);
27571                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27572 7135           FF76         FE            push	-2[bp]
27573                                           ! Debug: list int = const $3CE (used reg = )
27574 7138           B8                   03CE  mov	ax,#$3CE
27575 713B           50                         push	ax
27576                                           ! Debug: func () void = outb+0 (used reg = )
27577 713C           E8         0B18            call	_outb
27578 713F           83C4                   04  add	sp,*4
27579                                           !BCC_EOS
27580                                           ! 3881             write_byte(ES, BX, inb(0x3cf)); BX++;
27581                                           ! Debug: list int = const $3CF (used reg = )
27582 7142           B8                   03CF  mov	ax,#$3CF
27583 7145           50                         push	ax
27584                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27585 7146           E8         0AF8            call	_inb
27586 7149           44                         inc	sp
27587 714A           44                         inc	sp
27588                                           ! Debug: list unsigned char = al+0 (used reg = )
27589 714B           30E4                       xor	ah,ah
27590 714D           50                         push	ax
27591                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27592 714E           FF76         08            push	8[bp]
27593                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27594 7151           FF76         06            push	6[bp]
27595                                           ! Debug: func () void = write_byte+0 (used reg = )
27596 7154           E8         0ABA            call	_write_byte
27597 7157           83C4                   06  add	sp,*6
27598                                           !BCC_EOS
27599                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27600 715A           8B46         08            mov	ax,8[bp]
27601 715D           40                         inc	ax
27602 715E           8946         08            mov	8[bp],ax
27603                                           !BCC_EOS
27604                                           ! 3882         }
27605                                           ! 3883         write_word(ES, BX, crtc_addr); BX+= 2;
27606                       00007161            .25D:
27607                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27608 7161           8B46         FE            mov	ax,-2[bp]
27609 7164           40                         inc	ax
27610 7165           8946         FE            mov	-2[bp],ax
27611                       00007168            .25E:
27612                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27613 7168           8B46         FE            mov	ax,-2[bp]
27614 716B           3D                   0008  cmp	ax,*8
27615 716E           76           C5            jbe	.25F
27616                       00007170            .260:
27617                       00007170            .25C:
27618                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27619 7170           FF76         FA            push	-6[bp]
27620                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27621 7173           FF76         08            push	8[bp]
27622                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27623 7176           FF76         06            push	6[bp]
27624                                           ! Debug: func () void = write_word+0 (used reg = )
27625 7179           E8         0AAD            call	_write_word
27626 717C           83C4                   06  add	sp,*6
27627                                           !BCC_EOS
27628                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27629 717F           8B46         08            mov	ax,8[bp]
27630 7182           40                         inc	ax
27631 7183           40                         inc	ax
27632 7184           8946         08            mov	8[bp],ax
27633                                           !BCC_EOS
27634                                           ! 3884         write_byte(ES, BX, 0); BX++;
27635                                           ! Debug: list int = const 0 (used reg = )
27636 7187           31C0                       xor	ax,ax
27637 7189           50                         push	ax
27638                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27639 718A           FF76         08            push	8[bp]
27640                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27641 718D           FF76         06            push	6[bp]
27642                                           ! Debug: func () void = write_byte+0 (used reg = )
27643 7190           E8         0A7E            call	_write_byte
27644 7193           83C4                   06  add	sp,*6
27645                                           !BCC_EOS
27646                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27647 7196           8B46         08            mov	ax,8[bp]
27648 7199           40                         inc	ax
27649 719A           8946         08            mov	8[bp],ax
27650                                           !BCC_EOS
27651                                           ! 3885         write_byte(ES, BX, 0); BX++;
27652                                           ! Debug: list int = const 0 (used reg = )
27653 719D           31C0                       xor	ax,ax
27654 719F           50                         push	ax
27655                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27656 71A0           FF76         08            push	8[bp]
27657                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27658 71A3           FF76         06            push	6[bp]
27659                                           ! Debug: func () void = write_byte+0 (used reg = )
27660 71A6           E8         0A68            call	_write_byte
27661 71A9           83C4                   06  add	sp,*6
27662                                           !BCC_EOS
27663                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27664 71AC           8B46         08            mov	ax,8[bp]
27665 71AF           40                         inc	ax
27666 71B0           8946         08            mov	8[bp],ax
27667                                           !BCC_EOS
27668                                           ! 3886         write_byte(ES, BX, 0); BX++;
27669                                           ! Debug: list int = const 0 (used reg = )
27670 71B3           31C0                       xor	ax,ax
27671 71B5           50                         push	ax
27672                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27673 71B6           FF76         08            push	8[bp]
27674                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27675 71B9           FF76         06            push	6[bp]
27676                                           ! Debug: func () void = write_byte+0 (used reg = )
27677 71BC           E8         0A52            call	_write_byte
27678 71BF           83C4                   06  add	sp,*6
27679                                           !BCC_EOS
27680                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27681 71C2           8B46         08            mov	ax,8[bp]
27682 71C5           40                         inc	ax
27683 71C6           8946         08            mov	8[bp],ax
27684                                           !BCC_EOS
27685                                           ! 3887         write_byte(ES, BX, 0); BX++;
27686                                           ! Debug: list int = const 0 (used reg = )
27687 71C9           31C0                       xor	ax,ax
27688 71CB           50                         push	ax
27689                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27690 71CC           FF76         08            push	8[bp]
27691                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27692 71CF           FF76         06            push	6[bp]
27693                                           ! Debug: func () void = write_byte+0 (used reg = )
27694 71D2           E8         0A3C            call	_write_byte
27695 71D5           83C4                   06  add	sp,*6
27696                                           !BCC_EOS
27697                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27698 71D8           8B46         08            mov	ax,8[bp]
27699 71DB           40                         inc	ax
27700 71DC           8946         08            mov	8[bp],ax
27701                                           !BCC_EOS
27702                                           ! 3888     }
27703                                           ! 3889     if (CX & 2) {
27704                       000071DF            .24B:
27705                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27706 71DF           8A46         04            mov	al,4[bp]
27707 71E2           24                     02  and	al,*2
27708 71E4           84C0                       test	al,al
27709 71E6         0F84         0270            beq 	.261
27710                       000071EA            .262:
27711                                           ! 3890         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27712                                           ! Debug: list int = const $49 (used reg = )
27713 71EA           B8                   0049  mov	ax,*$49
27714 71ED           50                         push	ax
27715                                           ! Debug: list int = const $40 (used reg = )
27716 71EE           B8                   0040  mov	ax,*$40
27717 71F1           50                         push	ax
27718                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27719 71F2           E8         09F6            call	_read_byte
27720 71F5           83C4                   04  add	sp,*4
27721                                           ! Debug: list unsigned char = al+0 (used reg = )
27722 71F8           30E4                       xor	ah,ah
27723 71FA           50                         push	ax
27724                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27725 71FB           FF76         08            push	8[bp]
27726                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27727 71FE           FF76         06            push	6[bp]
27728                                           ! Debug: func () void = write_byte+0 (used reg = )
27729 7201           E8         0A0D            call	_write_byte
27730 7204           83C4                   06  add	sp,*6
27731                                           !BCC_EOS
27732                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27733 7207           8B46         08            mov	ax,8[bp]
27734 720A           40                         inc	ax
27735 720B           8946         08            mov	8[bp],ax
27736                                           !BCC_EOS
27737                                           ! 3891         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27738                                           ! Debug: list int = const $4A (used reg = )
27739 720E           B8                   004A  mov	ax,*$4A
27740 7211           50                         push	ax
27741                                           ! Debug: list int = const $40 (used reg = )
27742 7212           B8                   0040  mov	ax,*$40
27743 7215           50                         push	ax
27744                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27745 7216           E8         09E5            call	_read_word
27746 7219           83C4                   04  add	sp,*4
27747                                           ! Debug: list unsigned short = ax+0 (used reg = )
27748 721C           50                         push	ax
27749                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27750 721D           FF76         08            push	8[bp]
27751                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27752 7220           FF76         06            push	6[bp]
27753                                           ! Debug: func () void = write_word+0 (used reg = )
27754 7223           E8         0A03            call	_write_word
27755 7226           83C4                   06  add	sp,*6
27756                                           !BCC_EOS
27757                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27758 7229           8B46         08            mov	ax,8[bp]
27759 722C           40                         inc	ax
27760 722D           40                         inc	ax
27761 722E           8946         08            mov	8[bp],ax
27762                                           !BCC_EOS
27763                                           ! 3892         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27764                                           ! Debug: list int = const $4C (used reg = )
27765 7231           B8                   004C  mov	ax,*$4C
27766 7234           50                         push	ax
27767                                           ! Debug: list int = const $40 (used reg = )
27768 7235           B8                   0040  mov	ax,*$40
27769 7238           50                         push	ax
27770                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27771 7239           E8         09C2            call	_read_word
27772 723C           83C4                   04  add	sp,*4
27773                                           ! Debug: list unsigned short = ax+0 (used reg = )
27774 723F           50                         push	ax
27775                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27776 7240           FF76         08            push	8[bp]
27777                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27778 7243           FF76         06            push	6[bp]
27779                                           ! Debug: func () void = write_word+0 (used reg = )
27780 7246           E8         09E0            call	_write_word
27781 7249           83C4                   06  add	sp,*6
27782                                           !BCC_EOS
27783                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27784 724C           8B46         08            mov	ax,8[bp]
27785 724F           40                         inc	ax
27786 7250           40                         inc	ax
27787 7251           8946         08            mov	8[bp],ax
27788                                           !BCC_EOS
27789                                           ! 3893         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27790                                           ! Debug: list int = const $63 (used reg = )
27791 7254           B8                   0063  mov	ax,*$63
27792 7257           50                         push	ax
27793                                           ! Debug: list int = const $40 (used reg = )
27794 7258           B8                   0040  mov	ax,*$40
27795 725B           50                         push	ax
27796                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27797 725C           E8         099F            call	_read_word
27798 725F           83C4                   04  add	sp,*4
27799                                           ! Debug: list unsigned short = ax+0 (used reg = )
27800 7262           50                         push	ax
27801                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27802 7263           FF76         08            push	8[bp]
27803                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27804 7266           FF76         06            push	6[bp]
27805                                           ! Debug: func () void = write_word+0 (used reg = )
27806 7269           E8         09BD            call	_write_word
27807 726C           83C4                   06  add	sp,*6
27808                                           !BCC_EOS
27809                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27810 726F           8B46         08            mov	ax,8[bp]
27811 7272           40                         inc	ax
27812 7273           40                         inc	ax
27813 7274           8946         08            mov	8[bp],ax
27814                                           !BCC_EOS
27815                                           ! 3894         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27816                                           ! Debug: list int = const $84 (used reg = )
27817 7277           B8                   0084  mov	ax,#$84
27818 727A           50                         push	ax
27819                                           ! Debug: list int = const $40 (used reg = )
27820 727B           B8                   0040  mov	ax,*$40
27821 727E           50                         push	ax
27822                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27823 727F           E8         0969            call	_read_byte
27824 7282           83C4                   04  add	sp,*4
27825                                           ! Debug: list unsigned char = al+0 (used reg = )
27826 7285           30E4                       xor	ah,ah
27827 7287           50                         push	ax
27828                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27829 7288           FF76         08            push	8[bp]
27830                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27831 728B           FF76         06            push	6[bp]
27832                                           ! Debug: func () void = write_byte+0 (used reg = )
27833 728E           E8         0980            call	_write_byte
27834 7291           83C4                   06  add	sp,*6
27835                                           !BCC_EOS
27836                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27837 7294           8B46         08            mov	ax,8[bp]
27838 7297           40                         inc	ax
27839 7298           8946         08            mov	8[bp],ax
27840                                           !BCC_EOS
27841                                           ! 3895         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27842                                           ! Debug: list int = const $85 (used reg = )
27843 729B           B8                   0085  mov	ax,#$85
27844 729E           50                         push	ax
27845                                           ! Debug: list int = const $40 (used reg = )
27846 729F           B8                   0040  mov	ax,*$40
27847 72A2           50                         push	ax
27848                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27849 72A3           E8         0958            call	_read_word
27850 72A6           83C4                   04  add	sp,*4
27851                                           ! Debug: list unsigned short = ax+0 (used reg = )
27852 72A9           50                         push	ax
27853                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27854 72AA           FF76         08            push	8[bp]
27855                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27856 72AD           FF76         06            push	6[bp]
27857                                           ! Debug: func () void = write_word+0 (used reg = )
27858 72B0           E8         0976            call	_write_word
27859 72B3           83C4                   06  add	sp,*6
27860                                           !BCC_EOS
27861                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27862 72B6           8B46         08            mov	ax,8[bp]
27863 72B9           40                         inc	ax
27864 72BA           40                         inc	ax
27865 72BB           8946         08            mov	8[bp],ax
27866                                           !BCC_EOS
27867                                           ! 3896         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27868                                           ! Debug: list int = const $87 (used reg = )
27869 72BE           B8                   0087  mov	ax,#$87
27870 72C1           50                         push	ax
27871                                           ! Debug: list int = const $40 (used reg = )
27872 72C2           B8                   0040  mov	ax,*$40
27873 72C5           50                         push	ax
27874                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27875 72C6           E8         0922            call	_read_byte
27876 72C9           83C4                   04  add	sp,*4
27877                                           ! Debug: list unsigned char = al+0 (used reg = )
27878 72CC           30E4                       xor	ah,ah
27879 72CE           50                         push	ax
27880                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27881 72CF           FF76         08            push	8[bp]
27882                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27883 72D2           FF76         06            push	6[bp]
27884                                           ! Debug: func () void = write_byte+0 (used reg = )
27885 72D5           E8         0939            call	_write_byte
27886 72D8           83C4                   06  add	sp,*6
27887                                           !BCC_EOS
27888                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27889 72DB           8B46         08            mov	ax,8[bp]
27890 72DE           40                         inc	ax
27891 72DF           8946         08            mov	8[bp],ax
27892                                           !BCC_EOS
27893                                           ! 3897         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27894                                           ! Debug: list int = const $88 (used reg = )
27895 72E2           B8                   0088  mov	ax,#$88
27896 72E5           50                         push	ax
27897                                           ! Debug: list int = const $40 (used reg = )
27898 72E6           B8                   0040  mov	ax,*$40
27899 72E9           50                         push	ax
27900                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27901 72EA           E8         08FE            call	_read_byte
27902 72ED           83C4                   04  add	sp,*4
27903                                           ! Debug: list unsigned char = al+0 (used reg = )
27904 72F0           30E4                       xor	ah,ah
27905 72F2           50                         push	ax
27906                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27907 72F3           FF76         08            push	8[bp]
27908                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27909 72F6           FF76         06            push	6[bp]
27910                                           ! Debug: func () void = write_byte+0 (used reg = )
27911 72F9           E8         0915            call	_write_byte
27912 72FC           83C4                   06  add	sp,*6
27913                                           !BCC_EOS
27914                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27915 72FF           8B46         08            mov	ax,8[bp]
27916 7302           40                         inc	ax
27917 7303           8946         08            mov	8[bp],ax
27918                                           !BCC_EOS
27919                                           ! 3898         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27920                                           ! Debug: list int = const $89 (used reg = )
27921 7306           B8                   0089  mov	ax,#$89
27922 7309           50                         push	ax
27923                                           ! Debug: list int = const $40 (used reg = )
27924 730A           B8                   0040  mov	ax,*$40
27925 730D           50                         push	ax
27926                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27927 730E           E8         08DA            call	_read_byte
27928 7311           83C4                   04  add	sp,*4
27929                                           ! Debug: list unsigned char = al+0 (used reg = )
27930 7314           30E4                       xor	ah,ah
27931 7316           50                         push	ax
27932                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27933 7317           FF76         08            push	8[bp]
27934                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27935 731A           FF76         06            push	6[bp]
27936                                           ! Debug: func () void = write_byte+0 (used reg = )
27937 731D           E8         08F1            call	_write_byte
27938 7320           83C4                   06  add	sp,*6
27939                                           !BCC_EOS
27940                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27941 7323           8B46         08            mov	ax,8[bp]
27942 7326           40                         inc	ax
27943 7327           8946         08            mov	8[bp],ax
27944                                           !BCC_EOS
27945                                           ! 3899         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27946                                           ! Debug: list int = const $60 (used reg = )
27947 732A           B8                   0060  mov	ax,*$60
27948 732D           50                         push	ax
27949                                           ! Debug: list int = const $40 (used reg = )
27950 732E           B8                   0040  mov	ax,*$40
27951 7331           50                         push	ax
27952                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27953 7332           E8         08C9            call	_read_word
27954 7335           83C4                   04  add	sp,*4
27955                                           ! Debug: list unsigned short = ax+0 (used reg = )
27956 7338           50                         push	ax
27957                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27958 7339           FF76         08            push	8[bp]
27959                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27960 733C           FF76         06            push	6[bp]
27961                                           ! Debug: func () void = write_word+0 (used reg = )
27962 733F           E8         08E7            call	_write_word
27963 7342           83C4                   06  add	sp,*6
27964                                           !BCC_EOS
27965                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27966 7345           8B46         08            mov	ax,8[bp]
27967 7348           40                         inc	ax
27968 7349           40                         inc	ax
27969 734A           8946         08            mov	8[bp],ax
27970                                           !BCC_EOS
27971                                           ! 3900         for(i=0;i<8;i++) {
27972                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27973 734D           31C0                       xor	ax,ax
27974 734F           8946         FE            mov	-2[bp],ax
27975                                           !BCC_EOS
27976                                           !BCC_EOS
27977 7352           EB           2F            jmp .265
27978                       00007354            .266:
27979                                           ! 3901             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
27980                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
27981                                           ! Debug: expression subtree swapping
27982 7354           8B46         FE            mov	ax,-2[bp]
27983 7357           D1E0                       shl	ax,*1
27984                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
27985                                           ! Debug: expression subtree swapping
27986                                           ! Debug: list unsigned int = ax+$50 (used reg = )
27987 7359           05                   0050  add	ax,*$50
27988 735C           50                         push	ax
27989                                           ! Debug: list int = const $40 (used reg = )
27990 735D           B8                   0040  mov	ax,*$40
27991 7360           50                         push	ax
27992                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27993 7361           E8         089A            call	_read_word
27994 7364           83C4                   04  add	sp,*4
27995                                           ! Debug: list unsigned short = ax+0 (used reg = )
27996 7367           50                         push	ax
27997                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27998 7368           FF76         08            push	8[bp]
27999                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28000 736B           FF76         06            push	6[bp]
28001                                           ! Debug: func () void = write_word+0 (used reg = )
28002 736E           E8         08B8            call	_write_word
28003 7371           83C4                   06  add	sp,*6
28004                                           !BCC_EOS
28005                                           ! 3902             BX += 2;
28006                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28007 7374           8B46         08            mov	ax,8[bp]
28008 7377           40                         inc	ax
28009 7378           40                         inc	ax
28010 7379           8946         08            mov	8[bp],ax
28011                                           !BCC_EOS
28012                                           ! 3903         }
28013                                           ! 3904         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
28014                       0000737C            .264:
28015                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28016 737C           8B46         FE            mov	ax,-2[bp]
28017 737F           40                         inc	ax
28018 7380           8946         FE            mov	-2[bp],ax
28019                       00007383            .265:
28020                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
28021 7383           8B46         FE            mov	ax,-2[bp]
28022 7386           3D                   0008  cmp	ax,*8
28023 7389           72           C9            jb 	.266
28024                       0000738B            .267:
28025                       0000738B            .263:
28026                                           ! Debug: list int = const $4E (used reg = )
28027 738B           B8                   004E  mov	ax,*$4E
28028 738E           50                         push	ax
28029                                           ! Debug: list int = const $40 (used reg = )
28030 738F           B8                   0040  mov	ax,*$40
28031 7392           50                         push	ax
28032                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28033 7393           E8         0868            call	_read_word
28034 7396           83C4                   04  add	sp,*4
28035                                           ! Debug: list unsigned short = ax+0 (used reg = )
28036 7399           50                         push	ax
28037                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28038 739A           FF76         08            push	8[bp]
28039                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28040 739D           FF76         06            push	6[bp]
28041                                           ! Debug: func () void = write_word+0 (used reg = )
28042 73A0           E8         0886            call	_write_word
28043 73A3           83C4                   06  add	sp,*6
28044                                           !BCC_EOS
28045                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28046 73A6           8B46         08            mov	ax,8[bp]
28047 73A9           40                         inc	ax
28048 73AA           40                         inc	ax
28049 73AB           8946         08            mov	8[bp],ax
28050                                           !BCC_EOS
28051                                           ! 3905         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
28052                                           ! Debug: list int = const $62 (used reg = )
28053 73AE           B8                   0062  mov	ax,*$62
28054 73B1           50                         push	ax
28055                                           ! Debug: list int = const $40 (used reg = )
28056 73B2           B8                   0040  mov	ax,*$40
28057 73B5           50                         push	ax
28058                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28059 73B6           E8         0832            call	_read_byte
28060 73B9           83C4                   04  add	sp,*4
28061                                           ! Debug: list unsigned char = al+0 (used reg = )
28062 73BC           30E4                       xor	ah,ah
28063 73BE           50                         push	ax
28064                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28065 73BF           FF76         08            push	8[bp]
28066                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28067 73C2           FF76         06            push	6[bp]
28068                                           ! Debug: func () void = write_byte+0 (used reg = )
28069 73C5           E8         0849            call	_write_byte
28070 73C8           83C4                   06  add	sp,*6
28071                                           !BCC_EOS
28072                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28073 73CB           8B46         08            mov	ax,8[bp]
28074 73CE           40                         inc	ax
28075 73CF           8946         08            mov	8[bp],ax
28076                                           !BCC_EOS
28077                                           ! 3906         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28078                                           ! Debug: list int = const $7C (used reg = )
28079 73D2           B8                   007C  mov	ax,*$7C
28080 73D5           50                         push	ax
28081                                           ! Debug: list int = const 0 (used reg = )
28082 73D6           31C0                       xor	ax,ax
28083 73D8           50                         push	ax
28084                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28085 73D9           E8         0822            call	_read_word
28086 73DC           83C4                   04  add	sp,*4
28087                                           ! Debug: list unsigned short = ax+0 (used reg = )
28088 73DF           50                         push	ax
28089                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28090 73E0           FF76         08            push	8[bp]
28091                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28092 73E3           FF76         06            push	6[bp]
28093                                           ! Debug: func () void = write_word+0 (used reg = )
28094 73E6           E8         0840            call	_write_word
28095 73E9           83C4                   06  add	sp,*6
28096                                           !BCC_EOS
28097                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28098 73EC           8B46         08            mov	ax,8[bp]
28099 73EF           40                         inc	ax
28100 73F0           40                         inc	ax
28101 73F1           8946         08            mov	8[bp],ax
28102                                           !BCC_EOS
28103                                           ! 3907         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28104                                           ! Debug: list int = const $7E (used reg = )
28105 73F4           B8                   007E  mov	ax,*$7E
28106 73F7           50                         push	ax
28107                                           ! Debug: list int = const 0 (used reg = )
28108 73F8           31C0                       xor	ax,ax
28109 73FA           50                         push	ax
28110                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28111 73FB           E8         0800            call	_read_word
28112 73FE           83C4                   04  add	sp,*4
28113                                           ! Debug: list unsigned short = ax+0 (used reg = )
28114 7401           50                         push	ax
28115                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28116 7402           FF76         08            push	8[bp]
28117                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28118 7405           FF76         06            push	6[bp]
28119                                           ! Debug: func () void = write_word+0 (used reg = )
28120 7408           E8         081E            call	_write_word
28121 740B           83C4                   06  add	sp,*6
28122                                           !BCC_EOS
28123                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28124 740E           8B46         08            mov	ax,8[bp]
28125 7411           40                         inc	ax
28126 7412           40                         inc	ax
28127 7413           8946         08            mov	8[bp],ax
28128                                           !BCC_EOS
28129                                           ! 3908         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28130                                           ! Debug: list int = const $10C (used reg = )
28131 7416           B8                   010C  mov	ax,#$10C
28132 7419           50                         push	ax
28133                                           ! Debug: list int = const 0 (used reg = )
28134 741A           31C0                       xor	ax,ax
28135 741C           50                         push	ax
28136                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28137 741D           E8         07DE            call	_read_word
28138 7420           83C4                   04  add	sp,*4
28139                                           ! Debug: list unsigned short = ax+0 (used reg = )
28140 7423           50                         push	ax
28141                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28142 7424           FF76         08            push	8[bp]
28143                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28144 7427           FF76         06            push	6[bp]
28145                                           ! Debug: func () void = write_word+0 (used reg = )
28146 742A           E8         07FC            call	_write_word
28147 742D           83C4                   06  add	sp,*6
28148                                           !BCC_EOS
28149                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28150 7430           8B46         08            mov	ax,8[bp]
28151 7433           40                         inc	ax
28152 7434           40                         inc	ax
28153 7435           8946         08            mov	8[bp],ax
28154                                           !BCC_EOS
28155                                           ! 3909         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28156                                           ! Debug: list int = const $10E (used reg = )
28157 7438           B8                   010E  mov	ax,#$10E
28158 743B           50                         push	ax
28159                                           ! Debug: list int = const 0 (used reg = )
28160 743C           31C0                       xor	ax,ax
28161 743E           50                         push	ax
28162                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28163 743F           E8         07BC            call	_read_word
28164 7442           83C4                   04  add	sp,*4
28165                                           ! Debug: list unsigned short = ax+0 (used reg = )
28166 7445           50                         push	ax
28167                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28168 7446           FF76         08            push	8[bp]
28169                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28170 7449           FF76         06            push	6[bp]
28171                                           ! Debug: func () void = write_word+0 (used reg = )
28172 744C           E8         07DA            call	_write_word
28173 744F           83C4                   06  add	sp,*6
28174                                           !BCC_EOS
28175                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28176 7452           8B46         08            mov	ax,8[bp]
28177 7455           40                         inc	ax
28178 7456           40                         inc	ax
28179 7457           8946         08            mov	8[bp],ax
28180                                           !BCC_EOS
28181                                           ! 3910     }
28182                                           ! 3911     if (CX & 4) {
28183                       0000745A            .261:
28184                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28185 745A           8A46         04            mov	al,4[bp]
28186 745D           24                     04  and	al,*4
28187 745F           84C0                       test	al,al
28188 7461         0F84         00B5            beq 	.268
28189                       00007465            .269:
28190                                           ! 3912         write_byte(ES, BX, inb(0x3c7)); BX++;
28191                                           ! Debug: list int = const $3C7 (used reg = )
28192 7465           B8                   03C7  mov	ax,#$3C7
28193 7468           50                         push	ax
28194                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28195 7469           E8         07D5            call	_inb
28196 746C           44                         inc	sp
28197 746D           44                         inc	sp
28198                                           ! Debug: list unsigned char = al+0 (used reg = )
28199 746E           30E4                       xor	ah,ah
28200 7470           50                         push	ax
28201                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28202 7471           FF76         08            push	8[bp]
28203                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28204 7474           FF76         06            push	6[bp]
28205                                           ! Debug: func () void = write_byte+0 (used reg = )
28206 7477           E8         0797            call	_write_byte
28207 747A           83C4                   06  add	sp,*6
28208                                           !BCC_EOS
28209                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28210 747D           8B46         08            mov	ax,8[bp]
28211 7480           40                         inc	ax
28212 7481           8946         08            mov	8[bp],ax
28213                                           !BCC_EOS
28214                                           ! 3913         write_byte(ES, BX, inb(0x3c8)); BX++;
28215                                           ! Debug: list int = const $3C8 (used reg = )
28216 7484           B8                   03C8  mov	ax,#$3C8
28217 7487           50                         push	ax
28218                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28219 7488           E8         07B6            call	_inb
28220 748B           44                         inc	sp
28221 748C           44                         inc	sp
28222                                           ! Debug: list unsigned char = al+0 (used reg = )
28223 748D           30E4                       xor	ah,ah
28224 748F           50                         push	ax
28225                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28226 7490           FF76         08            push	8[bp]
28227                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28228 7493           FF76         06            push	6[bp]
28229                                           ! Debug: func () void = write_byte+0 (used reg = )
28230 7496           E8         0778            call	_write_byte
28231 7499           83C4                   06  add	sp,*6
28232                                           !BCC_EOS
28233                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28234 749C           8B46         08            mov	ax,8[bp]
28235 749F           40                         inc	ax
28236 74A0           8946         08            mov	8[bp],ax
28237                                           !BCC_EOS
28238                                           ! 3914         write_byte(ES, BX, inb(0x3c6)); BX++;
28239                                           ! Debug: list int = const $3C6 (used reg = )
28240 74A3           B8                   03C6  mov	ax,#$3C6
28241 74A6           50                         push	ax
28242                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28243 74A7           E8         0797            call	_inb
28244 74AA           44                         inc	sp
28245 74AB           44                         inc	sp
28246                                           ! Debug: list unsigned char = al+0 (used reg = )
28247 74AC           30E4                       xor	ah,ah
28248 74AE           50                         push	ax
28249                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28250 74AF           FF76         08            push	8[bp]
28251                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28252 74B2           FF76         06            push	6[bp]
28253                                           ! Debug: func () void = write_byte+0 (used reg = )
28254 74B5           E8         0759            call	_write_byte
28255 74B8           83C4                   06  add	sp,*6
28256                                           !BCC_EOS
28257                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28258 74BB           8B46         08            mov	ax,8[bp]
28259 74BE           40                         inc	ax
28260 74BF           8946         08            mov	8[bp],ax
28261                                           !BCC_EOS
28262                                           ! 3915         outb(0x3c8,0x00);
28263                                           ! Debug: list int = const 0 (used reg = )
28264 74C2           31C0                       xor	ax,ax
28265 74C4           50                         push	ax
28266                                           ! Debug: list int = const $3C8 (used reg = )
28267 74C5           B8                   03C8  mov	ax,#$3C8
28268 74C8           50                         push	ax
28269                                           ! Debug: func () void = outb+0 (used reg = )
28270 74C9           E8         078B            call	_outb
28271 74CC           83C4                   04  add	sp,*4
28272                                           !BCC_EOS
28273                                           ! 3916         for(i=0;i<256*3;i++) {
28274                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28275 74CF           31C0                       xor	ax,ax
28276 74D1           8946         FE            mov	-2[bp],ax
28277                                           !BCC_EOS
28278                                           !BCC_EOS
28279 74D4           EB           26            jmp .26C
28280                       000074D6            .26D:
28281                                           ! 3917             write_byte(ES, BX, inb(0x3c9)); BX++;
28282                                           ! Debug: list int = const $3C9 (used reg = )
28283 74D6           B8                   03C9  mov	ax,#$3C9
28284 74D9           50                         push	ax
28285                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28286 74DA           E8         0764            call	_inb
28287 74DD           44                         inc	sp
28288 74DE           44                         inc	sp
28289                                           ! Debug: list unsigned char = al+0 (used reg = )
28290 74DF           30E4                       xor	ah,ah
28291 74E1           50                         push	ax
28292                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28293 74E2           FF76         08            push	8[bp]
28294                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28295 74E5           FF76         06            push	6[bp]
28296                                           ! Debug: func () void = write_byte+0 (used reg = )
28297 74E8           E8         0726            call	_write_byte
28298 74EB           83C4                   06  add	sp,*6
28299                                           !BCC_EOS
28300                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28301 74EE           8B46         08            mov	ax,8[bp]
28302 74F1           40                         inc	ax
28303 74F2           8946         08            mov	8[bp],ax
28304                                           !BCC_EOS
28305                                           ! 3918         }
28306                                           ! 3919         write_byte(ES, BX, 0); BX++;
28307                       000074F5            .26B:
28308                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28309 74F5           8B46         FE            mov	ax,-2[bp]
28310 74F8           40                         inc	ax
28311 74F9           8946         FE            mov	-2[bp],ax
28312                       000074FC            .26C:
28313                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28314 74FC           8B46         FE            mov	ax,-2[bp]
28315 74FF           3D                   0300  cmp	ax,#$300
28316 7502           72           D2            jb 	.26D
28317                       00007504            .26E:
28318                       00007504            .26A:
28319                                           ! Debug: list int = const 0 (used reg = )
28320 7504           31C0                       xor	ax,ax
28321 7506           50                         push	ax
28322                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28323 7507           FF76         08            push	8[bp]
28324                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28325 750A           FF76         06            push	6[bp]
28326                                           ! Debug: func () void = write_byte+0 (used reg = )
28327 750D           E8         0701            call	_write_byte
28328 7510           83C4                   06  add	sp,*6
28329                                           !BCC_EOS
28330                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28331 7513           8B46         08            mov	ax,8[bp]
28332 7516           40                         inc	ax
28333 7517           8946         08            mov	8[bp],ax
28334                                           !BCC_EOS
28335                                           ! 3920     }
28336                                           ! 3921     return BX;
28337                       0000751A            .268:
28338 751A           8B46         08            mov	ax,8[bp]
28339 751D           89EC                       mov	sp,bp
28340 751F           5D                         pop	bp
28341 7520           C3                         ret
28342                                           !BCC_EOS
28343                                           ! 3922 }
28344                                           ! 3923 static Bit16u biosfn_restore_v
28345                                           ! 3923 ideo_state (CX,ES,BX)
28346                                           ! 3924      Bit16u CX;Bit16u ES;Bit16u BX;
28347                       00007521            _biosfn_restore_video_state:
28348                                           !BCC_EOS
28349                                           !BCC_EOS
28350                                           !BCC_EOS
28351                                           ! 3925 {
28352                                           ! 3926     Bit16u i, crtc_addr, v, addr1, ar_index;
28353                                           !BCC_EOS
28354                                           ! 3927     if (CX & 1) {
28355 7521           55                         push	bp
28356 7522           89E5                       mov	bp,sp
28357 7524           83C4                   F6  add	sp,*-$A
28358                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28359 7527           8A46         04            mov	al,4[bp]
28360 752A           24                     01  and	al,*1
28361 752C           84C0                       test	al,al
28362 752E         0F84         02AA            beq 	.26F
28363                       00007532            .270:
28364                                           ! 3928         inb(0x3da);
28365                                           ! Debug: list int = const $3DA (used reg = )
28366 7532           B8                   03DA  mov	ax,#$3DA
28367 7535           50                         push	ax
28368                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28369 7536           E8         0708            call	_inb
28370 7539           44                         inc	sp
28371 753A           44                         inc	sp
28372                                           !BCC_EOS
28373                                           ! 3929         crtc_addr = read_word(ES, BX + 0x40);
28374                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28375 753B           8B46         08            mov	ax,8[bp]
28376                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28377 753E           05                   0040  add	ax,*$40
28378 7541           50                         push	ax
28379                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28380 7542           FF76         06            push	6[bp]
28381                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28382 7545           E8         06B6            call	_read_word
28383 7548           83C4                   04  add	sp,*4
28384                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28385 754B           8946         FC            mov	-4[bp],ax
28386                                           !BCC_EOS
28387                                           ! 3930         addr1 = BX;
28388                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28389 754E           8B46         08            mov	ax,8[bp]
28390 7551           8946         F8            mov	-8[bp],ax
28391                                           !BCC_EOS
28392                                           ! 3931         BX += 5;
28393                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28394 7554           8B46         08            mov	ax,8[bp]
28395 7557           05                   0005  add	ax,*5
28396 755A           8946         08            mov	8[bp],ax
28397                                           !BCC_EOS
28398                                           ! 3932         for(i=1;i<=4;i++){
28399                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28400 755D           B8                   0001  mov	ax,*1
28401 7560           8946         FE            mov	-2[bp],ax
28402                                           !BCC_EOS
28403                                           !BCC_EOS
28404 7563           EB           34            jmp .273
28405                       00007565            .274:
28406                                           ! 3933             outb(0x3c4, i);
28407                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28408 7565           FF76         FE            push	-2[bp]
28409                                           ! Debug: list int = const $3C4 (used reg = )
28410 7568           B8                   03C4  mov	ax,#$3C4
28411 756B           50                         push	ax
28412                                           ! Debug: func () void = outb+0 (used reg = )
28413 756C           E8         06E8            call	_outb
28414 756F           83C4                   04  add	sp,*4
28415                                           !BCC_EOS
28416                                           ! 3934             outb(0x3c5, read_byte(ES, BX)); BX++;
28417                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28418 7572           FF76         08            push	8[bp]
28419                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28420 7575           FF76         06            push	6[bp]
28421                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28422 7578           E8         0670            call	_read_byte
28423 757B           83C4                   04  add	sp,*4
28424                                           ! Debug: list unsigned char = al+0 (used reg = )
28425 757E           30E4                       xor	ah,ah
28426 7580           50                         push	ax
28427                                           ! Debug: list int = const $3C5 (used reg = )
28428 7581           B8                   03C5  mov	ax,#$3C5
28429 7584           50                         push	ax
28430                                           ! Debug: func () void = outb+0 (used reg = )
28431 7585           E8         06CF            call	_outb
28432 7588           83C4                   04  add	sp,*4
28433                                           !BCC_EOS
28434                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28435 758B           8B46         08            mov	ax,8[bp]
28436 758E           40                         inc	ax
28437 758F           8946         08            mov	8[bp],ax
28438                                           !BCC_EOS
28439                                           ! 3935         }
28440                                           ! 3936         outb(0x3c4, 0);
28441                       00007592            .272:
28442                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28443 7592           8B46         FE            mov	ax,-2[bp]
28444 7595           40                         inc	ax
28445 7596           8946         FE            mov	-2[bp],ax
28446                       00007599            .273:
28447                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28448 7599           8B46         FE            mov	ax,-2[bp]
28449 759C           3D                   0004  cmp	ax,*4
28450 759F           76           C4            jbe	.274
28451                       000075A1            .275:
28452                       000075A1            .271:
28453                                           ! Debug: list int = const 0 (used reg = )
28454 75A1           31C0                       xor	ax,ax
28455 75A3           50                         push	ax
28456                                           ! Debug: list int = const $3C4 (used reg = )
28457 75A4           B8                   03C4  mov	ax,#$3C4
28458 75A7           50                         push	ax
28459                                           ! Debug: func () void = outb+0 (used reg = )
28460 75A8           E8         06AC            call	_outb
28461 75AB           83C4                   04  add	sp,*4
28462                                           !BCC_EOS
28463                                           ! 3937         outb(0x3c5, read_byte(ES, BX)); BX++;
28464                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28465 75AE           FF76         08            push	8[bp]
28466                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28467 75B1           FF76         06            push	6[bp]
28468                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28469 75B4           E8         0634            call	_read_byte
28470 75B7           83C4                   04  add	sp,*4
28471                                           ! Debug: list unsigned char = al+0 (used reg = )
28472 75BA           30E4                       xor	ah,ah
28473 75BC           50                         push	ax
28474                                           ! Debug: list int = const $3C5 (used reg = )
28475 75BD           B8                   03C5  mov	ax,#$3C5
28476 75C0           50                         push	ax
28477                                           ! Debug: func () void = outb+0 (used reg = )
28478 75C1           E8         0693            call	_outb
28479 75C4           83C4                   04  add	sp,*4
28480                                           !BCC_EOS
28481                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28482 75C7           8B46         08            mov	ax,8[bp]
28483 75CA           40                         inc	ax
28484 75CB           8946         08            mov	8[bp],ax
28485                                           !BCC_EOS
28486                                           ! 3938         outw(crtc_addr,0x0011);
28487                                           ! Debug: list int = const $11 (used reg = )
28488 75CE           B8                   0011  mov	ax,*$11
28489 75D1           50                         push	ax
28490                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28491 75D2           FF76         FC            push	-4[bp]
28492                                           ! Debug: func () void = outw+0 (used reg = )
28493 75D5           E8         068F            call	_outw
28494 75D8           83C4                   04  add	sp,*4
28495                                           !BCC_EOS
28496                                           ! 3939         for(i=0;i<=0x18;i++) {
28497                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28498 75DB           31C0                       xor	ax,ax
28499 75DD           8946         FE            mov	-2[bp],ax
28500                                           !BCC_EOS
28501                                           !BCC_EOS
28502 75E0           EB           3C            jmp .278
28503                       000075E2            .279:
28504                                           ! 3940             if (i != 0x11) {
28505                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28506 75E2           8B46         FE            mov	ax,-2[bp]
28507 75E5           3D                   0011  cmp	ax,*$11
28508 75E8           74           26            je  	.27A
28509                       000075EA            .27B:
28510                                           ! 3941                 outb(crtc_addr,i);
28511                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28512 75EA           FF76         FE            push	-2[bp]
28513                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28514 75ED           FF76         FC            push	-4[bp]
28515                                           ! Debug: func () void = outb+0 (used reg = )
28516 75F0           E8         0664            call	_outb
28517 75F3           83C4                   04  add	sp,*4
28518                                           !BCC_EOS
28519                                           ! 3942                 outb(crtc_addr+1, read_byte(ES, BX));
28520                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28521 75F6           FF76         08            push	8[bp]
28522                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28523 75F9           FF76         06            push	6[bp]
28524                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28525 75FC           E8         05EC            call	_read_byte
28526 75FF           83C4                   04  add	sp,*4
28527                                           ! Debug: list unsigned char = al+0 (used reg = )
28528 7602           30E4                       xor	ah,ah
28529 7604           50                         push	ax
28530                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28531 7605           8B46         FC            mov	ax,-4[bp]
28532                                           ! Debug: list unsigned int = ax+1 (used reg = )
28533 7608           40                         inc	ax
28534 7609           50                         push	ax
28535                                           ! Debug: func () void = outb+0 (used reg = )
28536 760A           E8         064A            call	_outb
28537 760D           83C4                   04  add	sp,*4
28538                                           !BCC_EOS
28539                                           ! 3943             }
28540                                           ! 3944             BX++;
28541                       00007610            .27A:
28542                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28543 7610           8B46         08            mov	ax,8[bp]
28544 7613           40                         inc	ax
28545 7614           8946         08            mov	8[bp],ax
28546                                           !BCC_EOS
28547                                           ! 3945         }
28548                                           ! 3946         v = inb(0x3cc) & ~0x01;
28549                       00007617            .277:
28550                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28551 7617           8B46         FE            mov	ax,-2[bp]
28552 761A           40                         inc	ax
28553 761B           8946         FE            mov	-2[bp],ax
28554                       0000761E            .278:
28555                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28556 761E           8B46         FE            mov	ax,-2[bp]
28557 7621           3D                   0018  cmp	ax,*$18
28558 7624           76           BC            jbe	.279
28559                       00007626            .27C:
28560                       00007626            .276:
28561                                           ! Debug: list int = const $3CC (used reg = )
28562 7626           B8                   03CC  mov	ax,#$3CC
28563 7629           50                         push	ax
28564                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28565 762A           E8         0614            call	_inb
28566 762D           44                         inc	sp
28567 762E           44                         inc	sp
28568                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28569 762F           24                     FE  and	al,#$FE
28570                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28571 7631           30E4                       xor	ah,ah
28572 7633           8946         FA            mov	-6[bp],ax
28573                                           !BCC_EOS
28574                                           ! 3947         if (crtc_addr = 0x3d4)
28575                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28576 7636           B8                   03D4  mov	ax,#$3D4
28577 7639           8946         FC            mov	-4[bp],ax
28578 763C           85C0                       test	ax,ax
28579 763E           74           08            je  	.27D
28580                       00007640            .27E:
28581                                           ! 3948             v |= 0x01;
28582                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28583 7640           8B46         FA            mov	ax,-6[bp]
28584 7643           0C                     01  or	al,*1
28585 7645           8946         FA            mov	-6[bp],ax
28586                                           !BCC_EOS
28587                                           ! 3949         outb(0x3c2, v);
28588                       00007648            .27D:
28589                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28590 7648           FF76         FA            push	-6[bp]
28591                                           ! Debug: list int = const $3C2 (used reg = )
28592 764B           B8                   03C2  mov	ax,#$3C2
28593 764E           50                         push	ax
28594                                           ! Debug: func () void = outb+0 (used reg = )
28595 764F           E8         0605            call	_outb
28596 7652           83C4                   04  add	sp,*4
28597                                           !BCC_EOS
28598                                           ! 3950         outb(crtc_addr, 0x11);
28599                                           ! Debug: list int = const $11 (used reg = )
28600 7655           B8                   0011  mov	ax,*$11
28601 7658           50                         push	ax
28602                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28603 7659           FF76         FC            push	-4[bp]
28604                                           ! Debug: func () void = outb+0 (used reg = )
28605 765C           E8         05F8            call	_outb
28606 765F           83C4                   04  add	sp,*4
28607                                           !BCC_EOS
28608                                           ! 3951         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28609                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28610 7662           8B46         08            mov	ax,8[bp]
28611                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28612                                           ! Debug: list unsigned int = ax-7 (used reg = )
28613 7665           05                   FFF9  add	ax,*-7
28614 7668           50                         push	ax
28615                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28616 7669           FF76         06            push	6[bp]
28617                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28618 766C           E8         057C            call	_read_byte
28619 766F           83C4                   04  add	sp,*4
28620                                           ! Debug: list unsigned char = al+0 (used reg = )
28621 7672           30E4                       xor	ah,ah
28622 7674           50                         push	ax
28623                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28624 7675           8B46         FC            mov	ax,-4[bp]
28625                                           ! Debug: list unsigned int = ax+1 (used reg = )
28626 7678           40                         inc	ax
28627 7679           50                         push	ax
28628                                           ! Debug: func () void = outb+0 (used reg = )
28629 767A           E8         05DA            call	_outb
28630 767D           83C4                   04  add	sp,*4
28631                                           !BCC_EOS
28632                                           ! 3952         ar_index = read_byte(ES, addr1 + 0x03);
28633                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28634 7680           8B46         F8            mov	ax,-8[bp]
28635                                           ! Debug: list unsigned int = ax+3 (used reg = )
28636 7683           05                   0003  add	ax,*3
28637 7686           50                         push	ax
28638                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28639 7687           FF76         06            push	6[bp]
28640                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28641 768A           E8         055E            call	_read_byte
28642 768D           83C4                   04  add	sp,*4
28643                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28644 7690           30E4                       xor	ah,ah
28645 7692           8946         F6            mov	-$A[bp],ax
28646                                           !BCC_EOS
28647                                           ! 3953         inb(0x3da);
28648                                           ! Debug: list int = const $3DA (used reg = )
28649 7695           B8                   03DA  mov	ax,#$3DA
28650 7698           50                         push	ax
28651                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28652 7699           E8         05A5            call	_inb
28653 769C           44                         inc	sp
28654 769D           44                         inc	sp
28655                                           !BCC_EOS
28656                                           ! 3954         for(i=0;i<=0x13;i++) {
28657                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28658 769E           31C0                       xor	ax,ax
28659 76A0           8946         FE            mov	-2[bp],ax
28660                                           !BCC_EOS
28661                                           !BCC_EOS
28662 76A3           EB           3C            jmp .281
28663                       000076A5            .282:
28664                                           ! 3955             outb(0x3c0, i | (ar_index & 0x20));
28665                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28666 76A5           8A46         F6            mov	al,-$A[bp]
28667 76A8           24                     20  and	al,*$20
28668                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28669                                           ! Debug: expression subtree swapping
28670 76AA           30E4                       xor	ah,ah
28671 76AC           0B46         FE            or	ax,-2[bp]
28672                                           ! Debug: list unsigned int = ax+0 (used reg = )
28673 76AF           50                         push	ax
28674                                           ! Debug: list int = const $3C0 (used reg = )
28675 76B0           B8                   03C0  mov	ax,#$3C0
28676 76B3           50                         push	ax
28677                                           ! Debug: func () void = outb+0 (used reg = )
28678 76B4           E8         05A0            call	_outb
28679 76B7           83C4                   04  add	sp,*4
28680                                           !BCC_EOS
28681                                           ! 3956             outb(0x3c0, read_byte(ES, BX)); BX++;
28682                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28683 76BA           FF76         08            push	8[bp]
28684                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28685 76BD           FF76         06            push	6[bp]
28686                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28687 76C0           E8         0528            call	_read_byte
28688 76C3           83C4                   04  add	sp,*4
28689                                           ! Debug: list unsigned char = al+0 (used reg = )
28690 76C6           30E4                       xor	ah,ah
28691 76C8           50                         push	ax
28692                                           ! Debug: list int = const $3C0 (used reg = )
28693 76C9           B8                   03C0  mov	ax,#$3C0
28694 76CC           50                         push	ax
28695                                           ! Debug: func () void = outb+0 (used reg = )
28696 76CD           E8         0587            call	_outb
28697 76D0           83C4                   04  add	sp,*4
28698                                           !BCC_EOS
28699                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28700 76D3           8B46         08            mov	ax,8[bp]
28701 76D6           40                         inc	ax
28702 76D7           8946         08            mov	8[bp],ax
28703                                           !BCC_EOS
28704                                           ! 3957         }
28705                                           ! 3958         outb(0x3c0, ar_index);
28706                       000076DA            .280:
28707                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28708 76DA           8B46         FE            mov	ax,-2[bp]
28709 76DD           40                         inc	ax
28710 76DE           8946         FE            mov	-2[bp],ax
28711                       000076E1            .281:
28712                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28713 76E1           8B46         FE            mov	ax,-2[bp]
28714 76E4           3D                   0013  cmp	ax,*$13
28715 76E7           76           BC            jbe	.282
28716                       000076E9            .283:
28717                       000076E9            .27F:
28718                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28719 76E9           FF76         F6            push	-$A[bp]
28720                                           ! Debug: list int = const $3C0 (used reg = )
28721 76EC           B8                   03C0  mov	ax,#$3C0
28722 76EF           50                         push	ax
28723                                           ! Debug: func () void = outb+0 (used reg = )
28724 76F0           E8         0564            call	_outb
28725 76F3           83C4                   04  add	sp,*4
28726                                           !BCC_EOS
28727                                           ! 3959         inb(0x3da);
28728                                           ! Debug: list int = const $3DA (used reg = )
28729 76F6           B8                   03DA  mov	ax,#$3DA
28730 76F9           50                         push	ax
28731                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28732 76FA           E8         0544            call	_inb
28733 76FD           44                         inc	sp
28734 76FE           44                         inc	sp
28735                                           !BCC_EOS
28736                                           ! 3960         for(i=0;i<=8;i++) {
28737                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28738 76FF           31C0                       xor	ax,ax
28739 7701           8946         FE            mov	-2[bp],ax
28740                                           !BCC_EOS
28741                                           !BCC_EOS
28742 7704           EB           34            jmp .286
28743                       00007706            .287:
28744                                           ! 3961             outb(0x3ce,i);
28745                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28746 7706           FF76         FE            push	-2[bp]
28747                                           ! Debug: list int = const $3CE (used reg = )
28748 7709           B8                   03CE  mov	ax,#$3CE
28749 770C           50                         push	ax
28750                                           ! Debug: func () void = outb+0 (used reg = )
28751 770D           E8         0547            call	_outb
28752 7710           83C4                   04  add	sp,*4
28753                                           !BCC_EOS
28754                                           ! 3962             outb(0x3cf, read_byte(ES, BX)); BX++;
28755                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28756 7713           FF76         08            push	8[bp]
28757                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28758 7716           FF76         06            push	6[bp]
28759                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28760 7719           E8         04CF            call	_read_byte
28761 771C           83C4                   04  add	sp,*4
28762                                           ! Debug: list unsigned char = al+0 (used reg = )
28763 771F           30E4                       xor	ah,ah
28764 7721           50                         push	ax
28765                                           ! Debug: list int = const $3CF (used reg = )
28766 7722           B8                   03CF  mov	ax,#$3CF
28767 7725           50                         push	ax
28768                                           ! Debug: func () void = outb+0 (used reg = )
28769 7726           E8         052E            call	_outb
28770 7729           83C4                   04  add	sp,*4
28771                                           !BCC_EOS
28772                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28773 772C           8B46         08            mov	ax,8[bp]
28774 772F           40                         inc	ax
28775 7730           8946         08            mov	8[bp],ax
28776                                           !BCC_EOS
28777                                           ! 3963         }
28778                                           ! 3964         BX += 2;
28779                       00007733            .285:
28780                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28781 7733           8B46         FE            mov	ax,-2[bp]
28782 7736           40                         inc	ax
28783 7737           8946         FE            mov	-2[bp],ax
28784                       0000773A            .286:
28785                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28786 773A           8B46         FE            mov	ax,-2[bp]
28787 773D           3D                   0008  cmp	ax,*8
28788 7740           76           C4            jbe	.287
28789                       00007742            .288:
28790                       00007742            .284:
28791                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28792 7742           8B46         08            mov	ax,8[bp]
28793 7745           40                         inc	ax
28794 7746           40                         inc	ax
28795 7747           8946         08            mov	8[bp],ax
28796                                           !BCC_EOS
28797                                           ! 3965         BX += 4;
28798                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28799 774A           8B46         08            mov	ax,8[bp]
28800 774D           05                   0004  add	ax,*4
28801 7750           8946         08            mov	8[bp],ax
28802                                           !BCC_EOS
28803                                           ! 3966         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28804                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28805 7753           FF76         F8            push	-8[bp]
28806                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28807 7756           FF76         06            push	6[bp]
28808                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28809 7759           E8         048F            call	_read_byte
28810 775C           83C4                   04  add	sp,*4
28811                                           ! Debug: list unsigned char = al+0 (used reg = )
28812 775F           30E4                       xor	ah,ah
28813 7761           50                         push	ax
28814                                           ! Debug: list int = const $3C4 (used reg = )
28815 7762           B8                   03C4  mov	ax,#$3C4
28816 7765           50                         push	ax
28817                                           ! Debug: func () void = outb+0 (used reg = )
28818 7766           E8         04EE            call	_outb
28819 7769           83C4                   04  add	sp,*4
28820                                           !BCC_EOS
28821                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28822 776C           8B46         F8            mov	ax,-8[bp]
28823 776F           40                         inc	ax
28824 7770           8946         F8            mov	-8[bp],ax
28825                                           !BCC_EOS
28826                                           ! 3967         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28827                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28828 7773           FF76         F8            push	-8[bp]
28829                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28830 7776           FF76         06            push	6[bp]
28831                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28832 7779           E8         046F            call	_read_byte
28833 777C           83C4                   04  add	sp,*4
28834                                           ! Debug: list unsigned char = al+0 (used reg = )
28835 777F           30E4                       xor	ah,ah
28836 7781           50                         push	ax
28837                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28838 7782           FF76         FC            push	-4[bp]
28839                                           ! Debug: func () void = outb+0 (used reg = )
28840 7785           E8         04CF            call	_outb
28841 7788           83C4                   04  add	sp,*4
28842                                           !BCC_EOS
28843                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28844 778B           8B46         F8            mov	ax,-8[bp]
28845 778E           40                         inc	ax
28846 778F           8946         F8            mov	-8[bp],ax
28847                                           !BCC_EOS
28848                                           ! 3968         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28849                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28850 7792           FF76         F8            push	-8[bp]
28851                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28852 7795           FF76         06            push	6[bp]
28853                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28854 7798           E8         0450            call	_read_byte
28855 779B           83C4                   04  add	sp,*4
28856                                           ! Debug: list unsigned char = al+0 (used reg = )
28857 779E           30E4                       xor	ah,ah
28858 77A0           50                         push	ax
28859                                           ! Debug: list int = const $3CE (used reg = )
28860 77A1           B8                   03CE  mov	ax,#$3CE
28861 77A4           50                         push	ax
28862                                           ! Debug: func () void = outb+0 (used reg = )
28863 77A5           E8         04AF            call	_outb
28864 77A8           83C4                   04  add	sp,*4
28865                                           !BCC_EOS
28866                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28867 77AB           8B46         F8            mov	ax,-8[bp]
28868 77AE           40                         inc	ax
28869 77AF           8946         F8            mov	-8[bp],ax
28870                                           !BCC_EOS
28871                                           ! 3969         addr1++;
28872                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28873 77B2           8B46         F8            mov	ax,-8[bp]
28874 77B5           40                         inc	ax
28875 77B6           8946         F8            mov	-8[bp],ax
28876                                           !BCC_EOS
28877                                           ! 3970         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28878                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28879 77B9           FF76         F8            push	-8[bp]
28880                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28881 77BC           FF76         06            push	6[bp]
28882                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28883 77BF           E8         0429            call	_read_byte
28884 77C2           83C4                   04  add	sp,*4
28885                                           ! Debug: list unsigned char = al+0 (used reg = )
28886 77C5           30E4                       xor	ah,ah
28887 77C7           50                         push	ax
28888                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28889 77C8           8B46         FC            mov	ax,-4[bp]
28890                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28891                                           ! Debug: list unsigned int = ax+6 (used reg = )
28892 77CB           05                   0006  add	ax,*6
28893 77CE           50                         push	ax
28894                                           ! Debug: func () void = outb+0 (used reg = )
28895 77CF           E8         0485            call	_outb
28896 77D2           83C4                   04  add	sp,*4
28897                                           !BCC_EOS
28898                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28899 77D5           8B46         F8            mov	ax,-8[bp]
28900 77D8           40                         inc	ax
28901 77D9           8946         F8            mov	-8[bp],ax
28902                                           !BCC_EOS
28903                                           ! 3971     }
28904                                           ! 3972     if (CX & 2) {
28905                       000077DC            .26F:
28906                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28907 77DC           8A46         04            mov	al,4[bp]
28908 77DF           24                     02  and	al,*2
28909 77E1           84C0                       test	al,al
28910 77E3         0F84         0270            beq 	.289
28911                       000077E7            .28A:
28912                                           ! 3973         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28913                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28914 77E7           FF76         08            push	8[bp]
28915                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28916 77EA           FF76         06            push	6[bp]
28917                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28918 77ED           E8         03FB            call	_read_byte
28919 77F0           83C4                   04  add	sp,*4
28920                                           ! Debug: list unsigned char = al+0 (used reg = )
28921 77F3           30E4                       xor	ah,ah
28922 77F5           50                         push	ax
28923                                           ! Debug: list int = const $49 (used reg = )
28924 77F6           B8                   0049  mov	ax,*$49
28925 77F9           50                         push	ax
28926                                           ! Debug: list int = const $40 (used reg = )
28927 77FA           B8                   0040  mov	ax,*$40
28928 77FD           50                         push	ax
28929                                           ! Debug: func () void = write_byte+0 (used reg = )
28930 77FE           E8         0410            call	_write_byte
28931 7801           83C4                   06  add	sp,*6
28932                                           !BCC_EOS
28933                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28934 7804           8B46         08            mov	ax,8[bp]
28935 7807           40                         inc	ax
28936 7808           8946         08            mov	8[bp],ax
28937                                           !BCC_EOS
28938                                           ! 3974         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28939                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28940 780B           FF76         08            push	8[bp]
28941                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28942 780E           FF76         06            push	6[bp]
28943                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28944 7811           E8         03EA            call	_read_word
28945 7814           83C4                   04  add	sp,*4
28946                                           ! Debug: list unsigned short = ax+0 (used reg = )
28947 7817           50                         push	ax
28948                                           ! Debug: list int = const $4A (used reg = )
28949 7818           B8                   004A  mov	ax,*$4A
28950 781B           50                         push	ax
28951                                           ! Debug: list int = const $40 (used reg = )
28952 781C           B8                   0040  mov	ax,*$40
28953 781F           50                         push	ax
28954                                           ! Debug: func () void = write_word+0 (used reg = )
28955 7820           E8         0406            call	_write_word
28956 7823           83C4                   06  add	sp,*6
28957                                           !BCC_EOS
28958                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28959 7826           8B46         08            mov	ax,8[bp]
28960 7829           40                         inc	ax
28961 782A           40                         inc	ax
28962 782B           8946         08            mov	8[bp],ax
28963                                           !BCC_EOS
28964                                           ! 3975         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28965                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28966 782E           FF76         08            push	8[bp]
28967                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28968 7831           FF76         06            push	6[bp]
28969                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28970 7834           E8         03C7            call	_read_word
28971 7837           83C4                   04  add	sp,*4
28972                                           ! Debug: list unsigned short = ax+0 (used reg = )
28973 783A           50                         push	ax
28974                                           ! Debug: list int = const $4C (used reg = )
28975 783B           B8                   004C  mov	ax,*$4C
28976 783E           50                         push	ax
28977                                           ! Debug: list int = const $40 (used reg = )
28978 783F           B8                   0040  mov	ax,*$40
28979 7842           50                         push	ax
28980                                           ! Debug: func () void = write_word+0 (used reg = )
28981 7843           E8         03E3            call	_write_word
28982 7846           83C4                   06  add	sp,*6
28983                                           !BCC_EOS
28984                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28985 7849           8B46         08            mov	ax,8[bp]
28986 784C           40                         inc	ax
28987 784D           40                         inc	ax
28988 784E           8946         08            mov	8[bp],ax
28989                                           !BCC_EOS
28990                                           ! 3976         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
28991                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28992 7851           FF76         08            push	8[bp]
28993                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28994 7854           FF76         06            push	6[bp]
28995                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28996 7857           E8         03A4            call	_read_word
28997 785A           83C4                   04  add	sp,*4
28998                                           ! Debug: list unsigned short = ax+0 (used reg = )
28999 785D           50                         push	ax
29000                                           ! Debug: list int = const $63 (used reg = )
29001 785E           B8                   0063  mov	ax,*$63
29002 7861           50                         push	ax
29003                                           ! Debug: list int = const $40 (used reg = )
29004 7862           B8                   0040  mov	ax,*$40
29005 7865           50                         push	ax
29006                                           ! Debug: func () void = write_word+0 (used reg = )
29007 7866           E8         03C0            call	_write_word
29008 7869           83C4                   06  add	sp,*6
29009                                           !BCC_EOS
29010                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29011 786C           8B46         08            mov	ax,8[bp]
29012 786F           40                         inc	ax
29013 7870           40                         inc	ax
29014 7871           8946         08            mov	8[bp],ax
29015                                           !BCC_EOS
29016                                           ! 3977         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
29017                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29018 7874           FF76         08            push	8[bp]
29019                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29020 7877           FF76         06            push	6[bp]
29021                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29022 787A           E8         036E            call	_read_byte
29023 787D           83C4                   04  add	sp,*4
29024                                           ! Debug: list unsigned char = al+0 (used reg = )
29025 7880           30E4                       xor	ah,ah
29026 7882           50                         push	ax
29027                                           ! Debug: list int = const $84 (used reg = )
29028 7883           B8                   0084  mov	ax,#$84
29029 7886           50                         push	ax
29030                                           ! Debug: list int = const $40 (used reg = )
29031 7887           B8                   0040  mov	ax,*$40
29032 788A           50                         push	ax
29033                                           ! Debug: func () void = write_byte+0 (used reg = )
29034 788B           E8         0383            call	_write_byte
29035 788E           83C4                   06  add	sp,*6
29036                                           !BCC_EOS
29037                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29038 7891           8B46         08            mov	ax,8[bp]
29039 7894           40                         inc	ax
29040 7895           8946         08            mov	8[bp],ax
29041                                           !BCC_EOS
29042                                           ! 3978         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
29043                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29044 7898           FF76         08            push	8[bp]
29045                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29046 789B           FF76         06            push	6[bp]
29047                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29048 789E           E8         035D            call	_read_word
29049 78A1           83C4                   04  add	sp,*4
29050                                           ! Debug: list unsigned short = ax+0 (used reg = )
29051 78A4           50                         push	ax
29052                                           ! Debug: list int = const $85 (used reg = )
29053 78A5           B8                   0085  mov	ax,#$85
29054 78A8           50                         push	ax
29055                                           ! Debug: list int = const $40 (used reg = )
29056 78A9           B8                   0040  mov	ax,*$40
29057 78AC           50                         push	ax
29058                                           ! Debug: func () void = write_word+0 (used reg = )
29059 78AD           E8         0379            call	_write_word
29060 78B0           83C4                   06  add	sp,*6
29061                                           !BCC_EOS
29062                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29063 78B3           8B46         08            mov	ax,8[bp]
29064 78B6           40                         inc	ax
29065 78B7           40                         inc	ax
29066 78B8           8946         08            mov	8[bp],ax
29067                                           !BCC_EOS
29068                                           ! 3979         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29069                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29070 78BB           FF76         08            push	8[bp]
29071                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29072 78BE           FF76         06            push	6[bp]
29073                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29074 78C1           E8         0327            call	_read_byte
29075 78C4           83C4                   04  add	sp,*4
29076                                           ! Debug: list unsigned char = al+0 (used reg = )
29077 78C7           30E4                       xor	ah,ah
29078 78C9           50                         push	ax
29079                                           ! Debug: list int = const $87 (used reg = )
29080 78CA           B8                   0087  mov	ax,#$87
29081 78CD           50                         push	ax
29082                                           ! Debug: list int = const $40 (used reg = )
29083 78CE           B8                   0040  mov	ax,*$40
29084 78D1           50                         push	ax
29085                                           ! Debug: func () void = write_byte+0 (used reg = )
29086 78D2           E8         033C            call	_write_byte
29087 78D5           83C4                   06  add	sp,*6
29088                                           !BCC_EOS
29089                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29090 78D8           8B46         08            mov	ax,8[bp]
29091 78DB           40                         inc	ax
29092 78DC           8946         08            mov	8[bp],ax
29093                                           !BCC_EOS
29094                                           ! 3980         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29095                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29096 78DF           FF76         08            push	8[bp]
29097                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29098 78E2           FF76         06            push	6[bp]
29099                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29100 78E5           E8         0303            call	_read_byte
29101 78E8           83C4                   04  add	sp,*4
29102                                           ! Debug: list unsigned char = al+0 (used reg = )
29103 78EB           30E4                       xor	ah,ah
29104 78ED           50                         push	ax
29105                                           ! Debug: list int = const $88 (used reg = )
29106 78EE           B8                   0088  mov	ax,#$88
29107 78F1           50                         push	ax
29108                                           ! Debug: list int = const $40 (used reg = )
29109 78F2           B8                   0040  mov	ax,*$40
29110 78F5           50                         push	ax
29111                                           ! Debug: func () void = write_byte+0 (used reg = )
29112 78F6           E8         0318            call	_write_byte
29113 78F9           83C4                   06  add	sp,*6
29114                                           !BCC_EOS
29115                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29116 78FC           8B46         08            mov	ax,8[bp]
29117 78FF           40                         inc	ax
29118 7900           8946         08            mov	8[bp],ax
29119                                           !BCC_EOS
29120                                           ! 3981         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
29121                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29122 7903           FF76         08            push	8[bp]
29123                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29124 7906           FF76         06            push	6[bp]
29125                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29126 7909           E8         02DF            call	_read_byte
29127 790C           83C4                   04  add	sp,*4
29128                                           ! Debug: list unsigned char = al+0 (used reg = )
29129 790F           30E4                       xor	ah,ah
29130 7911           50                         push	ax
29131                                           ! Debug: list int = const $89 (used reg = )
29132 7912           B8                   0089  mov	ax,#$89
29133 7915           50                         push	ax
29134                                           ! Debug: list int = const $40 (used reg = )
29135 7916           B8                   0040  mov	ax,*$40
29136 7919           50                         push	ax
29137                                           ! Debug: func () void = write_byte+0 (used reg = )
29138 791A           E8         02F4            call	_write_byte
29139 791D           83C4                   06  add	sp,*6
29140                                           !BCC_EOS
29141                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29142 7920           8B46         08            mov	ax,8[bp]
29143 7923           40                         inc	ax
29144 7924           8946         08            mov	8[bp],ax
29145                                           !BCC_EOS
29146                                           ! 3982         write_word(0x
29147                                           ! 3982 40,0x60, read_word(ES, BX)); BX += 2;
29148                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29149 7927           FF76         08            push	8[bp]
29150                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29151 792A           FF76         06            push	6[bp]
29152                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29153 792D           E8         02CE            call	_read_word
29154 7930           83C4                   04  add	sp,*4
29155                                           ! Debug: list unsigned short = ax+0 (used reg = )
29156 7933           50                         push	ax
29157                                           ! Debug: list int = const $60 (used reg = )
29158 7934           B8                   0060  mov	ax,*$60
29159 7937           50                         push	ax
29160                                           ! Debug: list int = const $40 (used reg = )
29161 7938           B8                   0040  mov	ax,*$40
29162 793B           50                         push	ax
29163                                           ! Debug: func () void = write_word+0 (used reg = )
29164 793C           E8         02EA            call	_write_word
29165 793F           83C4                   06  add	sp,*6
29166                                           !BCC_EOS
29167                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29168 7942           8B46         08            mov	ax,8[bp]
29169 7945           40                         inc	ax
29170 7946           40                         inc	ax
29171 7947           8946         08            mov	8[bp],ax
29172                                           !BCC_EOS
29173                                           ! 3983         for(i=0;i<8;i++) {
29174                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29175 794A           31C0                       xor	ax,ax
29176 794C           8946         FE            mov	-2[bp],ax
29177                                           !BCC_EOS
29178                                           !BCC_EOS
29179 794F           EB           2F            jmp .28D
29180                       00007951            .28E:
29181                                           ! 3984             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
29182                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29183 7951           FF76         08            push	8[bp]
29184                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29185 7954           FF76         06            push	6[bp]
29186                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29187 7957           E8         02A4            call	_read_word
29188 795A           83C4                   04  add	sp,*4
29189                                           ! Debug: list unsigned short = ax+0 (used reg = )
29190 795D           50                         push	ax
29191                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29192                                           ! Debug: expression subtree swapping
29193 795E           8B46         FE            mov	ax,-2[bp]
29194 7961           D1E0                       shl	ax,*1
29195                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29196                                           ! Debug: expression subtree swapping
29197                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29198 7963           05                   0050  add	ax,*$50
29199 7966           50                         push	ax
29200                                           ! Debug: list int = const $40 (used reg = )
29201 7967           B8                   0040  mov	ax,*$40
29202 796A           50                         push	ax
29203                                           ! Debug: func () void = write_word+0 (used reg = )
29204 796B           E8         02BB            call	_write_word
29205 796E           83C4                   06  add	sp,*6
29206                                           !BCC_EOS
29207                                           ! 3985             BX += 2;
29208                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29209 7971           8B46         08            mov	ax,8[bp]
29210 7974           40                         inc	ax
29211 7975           40                         inc	ax
29212 7976           8946         08            mov	8[bp],ax
29213                                           !BCC_EOS
29214                                           ! 3986         }
29215                                           ! 3987         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29216                       00007979            .28C:
29217                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29218 7979           8B46         FE            mov	ax,-2[bp]
29219 797C           40                         inc	ax
29220 797D           8946         FE            mov	-2[bp],ax
29221                       00007980            .28D:
29222                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29223 7980           8B46         FE            mov	ax,-2[bp]
29224 7983           3D                   0008  cmp	ax,*8
29225 7986           72           C9            jb 	.28E
29226                       00007988            .28F:
29227                       00007988            .28B:
29228                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29229 7988           FF76         08            push	8[bp]
29230                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29231 798B           FF76         06            push	6[bp]
29232                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29233 798E           E8         026D            call	_read_word
29234 7991           83C4                   04  add	sp,*4
29235                                           ! Debug: list unsigned short = ax+0 (used reg = )
29236 7994           50                         push	ax
29237                                           ! Debug: list int = const $4E (used reg = )
29238 7995           B8                   004E  mov	ax,*$4E
29239 7998           50                         push	ax
29240                                           ! Debug: list int = const $40 (used reg = )
29241 7999           B8                   0040  mov	ax,*$40
29242 799C           50                         push	ax
29243                                           ! Debug: func () void = write_word+0 (used reg = )
29244 799D           E8         0289            call	_write_word
29245 79A0           83C4                   06  add	sp,*6
29246                                           !BCC_EOS
29247                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29248 79A3           8B46         08            mov	ax,8[bp]
29249 79A6           40                         inc	ax
29250 79A7           40                         inc	ax
29251 79A8           8946         08            mov	8[bp],ax
29252                                           !BCC_EOS
29253                                           ! 3988         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29254                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29255 79AB           FF76         08            push	8[bp]
29256                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29257 79AE           FF76         06            push	6[bp]
29258                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29259 79B1           E8         0237            call	_read_byte
29260 79B4           83C4                   04  add	sp,*4
29261                                           ! Debug: list unsigned char = al+0 (used reg = )
29262 79B7           30E4                       xor	ah,ah
29263 79B9           50                         push	ax
29264                                           ! Debug: list int = const $62 (used reg = )
29265 79BA           B8                   0062  mov	ax,*$62
29266 79BD           50                         push	ax
29267                                           ! Debug: list int = const $40 (used reg = )
29268 79BE           B8                   0040  mov	ax,*$40
29269 79C1           50                         push	ax
29270                                           ! Debug: func () void = write_byte+0 (used reg = )
29271 79C2           E8         024C            call	_write_byte
29272 79C5           83C4                   06  add	sp,*6
29273                                           !BCC_EOS
29274                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29275 79C8           8B46         08            mov	ax,8[bp]
29276 79CB           40                         inc	ax
29277 79CC           8946         08            mov	8[bp],ax
29278                                           !BCC_EOS
29279                                           ! 3989         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29280                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29281 79CF           FF76         08            push	8[bp]
29282                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29283 79D2           FF76         06            push	6[bp]
29284                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29285 79D5           E8         0226            call	_read_word
29286 79D8           83C4                   04  add	sp,*4
29287                                           ! Debug: list unsigned short = ax+0 (used reg = )
29288 79DB           50                         push	ax
29289                                           ! Debug: list int = const $7C (used reg = )
29290 79DC           B8                   007C  mov	ax,*$7C
29291 79DF           50                         push	ax
29292                                           ! Debug: list int = const 0 (used reg = )
29293 79E0           31C0                       xor	ax,ax
29294 79E2           50                         push	ax
29295                                           ! Debug: func () void = write_word+0 (used reg = )
29296 79E3           E8         0243            call	_write_word
29297 79E6           83C4                   06  add	sp,*6
29298                                           !BCC_EOS
29299                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29300 79E9           8B46         08            mov	ax,8[bp]
29301 79EC           40                         inc	ax
29302 79ED           40                         inc	ax
29303 79EE           8946         08            mov	8[bp],ax
29304                                           !BCC_EOS
29305                                           ! 3990         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
29306                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29307 79F1           FF76         08            push	8[bp]
29308                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29309 79F4           FF76         06            push	6[bp]
29310                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29311 79F7           E8         0204            call	_read_word
29312 79FA           83C4                   04  add	sp,*4
29313                                           ! Debug: list unsigned short = ax+0 (used reg = )
29314 79FD           50                         push	ax
29315                                           ! Debug: list int = const $7E (used reg = )
29316 79FE           B8                   007E  mov	ax,*$7E
29317 7A01           50                         push	ax
29318                                           ! Debug: list int = const 0 (used reg = )
29319 7A02           31C0                       xor	ax,ax
29320 7A04           50                         push	ax
29321                                           ! Debug: func () void = write_word+0 (used reg = )
29322 7A05           E8         0221            call	_write_word
29323 7A08           83C4                   06  add	sp,*6
29324                                           !BCC_EOS
29325                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29326 7A0B           8B46         08            mov	ax,8[bp]
29327 7A0E           40                         inc	ax
29328 7A0F           40                         inc	ax
29329 7A10           8946         08            mov	8[bp],ax
29330                                           !BCC_EOS
29331                                           ! 3991         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29332                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29333 7A13           FF76         08            push	8[bp]
29334                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29335 7A16           FF76         06            push	6[bp]
29336                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29337 7A19           E8         01E2            call	_read_word
29338 7A1C           83C4                   04  add	sp,*4
29339                                           ! Debug: list unsigned short = ax+0 (used reg = )
29340 7A1F           50                         push	ax
29341                                           ! Debug: list int = const $10C (used reg = )
29342 7A20           B8                   010C  mov	ax,#$10C
29343 7A23           50                         push	ax
29344                                           ! Debug: list int = const 0 (used reg = )
29345 7A24           31C0                       xor	ax,ax
29346 7A26           50                         push	ax
29347                                           ! Debug: func () void = write_word+0 (used reg = )
29348 7A27           E8         01FF            call	_write_word
29349 7A2A           83C4                   06  add	sp,*6
29350                                           !BCC_EOS
29351                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29352 7A2D           8B46         08            mov	ax,8[bp]
29353 7A30           40                         inc	ax
29354 7A31           40                         inc	ax
29355 7A32           8946         08            mov	8[bp],ax
29356                                           !BCC_EOS
29357                                           ! 3992         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
29358                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29359 7A35           FF76         08            push	8[bp]
29360                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29361 7A38           FF76         06            push	6[bp]
29362                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29363 7A3B           E8         01C0            call	_read_word
29364 7A3E           83C4                   04  add	sp,*4
29365                                           ! Debug: list unsigned short = ax+0 (used reg = )
29366 7A41           50                         push	ax
29367                                           ! Debug: list int = const $10E (used reg = )
29368 7A42           B8                   010E  mov	ax,#$10E
29369 7A45           50                         push	ax
29370                                           ! Debug: list int = const 0 (used reg = )
29371 7A46           31C0                       xor	ax,ax
29372 7A48           50                         push	ax
29373                                           ! Debug: func () void = write_word+0 (used reg = )
29374 7A49           E8         01DD            call	_write_word
29375 7A4C           83C4                   06  add	sp,*6
29376                                           !BCC_EOS
29377                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29378 7A4F           8B46         08            mov	ax,8[bp]
29379 7A52           40                         inc	ax
29380 7A53           40                         inc	ax
29381 7A54           8946         08            mov	8[bp],ax
29382                                           !BCC_EOS
29383                                           ! 3993     }
29384                                           ! 3994     if (CX & 4) {
29385                       00007A57            .289:
29386                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29387 7A57           8A46         04            mov	al,4[bp]
29388 7A5A           24                     04  and	al,*4
29389 7A5C           84C0                       test	al,al
29390 7A5E         0F84         0096            beq 	.290
29391                       00007A62            .291:
29392                                           ! 3995         BX++;
29393                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29394 7A62           8B46         08            mov	ax,8[bp]
29395 7A65           40                         inc	ax
29396 7A66           8946         08            mov	8[bp],ax
29397                                           !BCC_EOS
29398                                           ! 3996         v = read_byte(ES, BX); BX++;
29399                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29400 7A69           FF76         08            push	8[bp]
29401                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29402 7A6C           FF76         06            push	6[bp]
29403                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29404 7A6F           E8         0179            call	_read_byte
29405 7A72           83C4                   04  add	sp,*4
29406                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29407 7A75           30E4                       xor	ah,ah
29408 7A77           8946         FA            mov	-6[bp],ax
29409                                           !BCC_EOS
29410                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29411 7A7A           8B46         08            mov	ax,8[bp]
29412 7A7D           40                         inc	ax
29413 7A7E           8946         08            mov	8[bp],ax
29414                                           !BCC_EOS
29415                                           ! 3997         outb(0x3c6, read_byte(ES, BX)); BX++;
29416                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29417 7A81           FF76         08            push	8[bp]
29418                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29419 7A84           FF76         06            push	6[bp]
29420                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29421 7A87           E8         0161            call	_read_byte
29422 7A8A           83C4                   04  add	sp,*4
29423                                           ! Debug: list unsigned char = al+0 (used reg = )
29424 7A8D           30E4                       xor	ah,ah
29425 7A8F           50                         push	ax
29426                                           ! Debug: list int = const $3C6 (used reg = )
29427 7A90           B8                   03C6  mov	ax,#$3C6
29428 7A93           50                         push	ax
29429                                           ! Debug: func () void = outb+0 (used reg = )
29430 7A94           E8         01C0            call	_outb
29431 7A97           83C4                   04  add	sp,*4
29432                                           !BCC_EOS
29433                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29434 7A9A           8B46         08            mov	ax,8[bp]
29435 7A9D           40                         inc	ax
29436 7A9E           8946         08            mov	8[bp],ax
29437                                           !BCC_EOS
29438                                           ! 3998         outb(0x3c8,0x00);
29439                                           ! Debug: list int = const 0 (used reg = )
29440 7AA1           31C0                       xor	ax,ax
29441 7AA3           50                         push	ax
29442                                           ! Debug: list int = const $3C8 (used reg = )
29443 7AA4           B8                   03C8  mov	ax,#$3C8
29444 7AA7           50                         push	ax
29445                                           ! Debug: func () void = outb+0 (used reg = )
29446 7AA8           E8         01AC            call	_outb
29447 7AAB           83C4                   04  add	sp,*4
29448                                           !BCC_EOS
29449                                           ! 3999         for(i=0;i<256*3;i++) {
29450                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29451 7AAE           31C0                       xor	ax,ax
29452 7AB0           8946         FE            mov	-2[bp],ax
29453                                           !BCC_EOS
29454                                           !BCC_EOS
29455 7AB3           EB           27            jmp .294
29456                       00007AB5            .295:
29457                                           ! 4000             outb(0x3c9, read_byte(ES, BX)); BX++;
29458                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29459 7AB5           FF76         08            push	8[bp]
29460                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29461 7AB8           FF76         06            push	6[bp]
29462                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29463 7ABB           E8         012D            call	_read_byte
29464 7ABE           83C4                   04  add	sp,*4
29465                                           ! Debug: list unsigned char = al+0 (used reg = )
29466 7AC1           30E4                       xor	ah,ah
29467 7AC3           50                         push	ax
29468                                           ! Debug: list int = const $3C9 (used reg = )
29469 7AC4           B8                   03C9  mov	ax,#$3C9
29470 7AC7           50                         push	ax
29471                                           ! Debug: func () void = outb+0 (used reg = )
29472 7AC8           E8         018C            call	_outb
29473 7ACB           83C4                   04  add	sp,*4
29474                                           !BCC_EOS
29475                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29476 7ACE           8B46         08            mov	ax,8[bp]
29477 7AD1           40                         inc	ax
29478 7AD2           8946         08            mov	8[bp],ax
29479                                           !BCC_EOS
29480                                           ! 4001         }
29481                                           ! 4002         BX++;
29482                       00007AD5            .293:
29483                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29484 7AD5           8B46         FE            mov	ax,-2[bp]
29485 7AD8           40                         inc	ax
29486 7AD9           8946         FE            mov	-2[bp],ax
29487                       00007ADC            .294:
29488                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29489 7ADC           8B46         FE            mov	ax,-2[bp]
29490 7ADF           3D                   0300  cmp	ax,#$300
29491 7AE2           72           D1            jb 	.295
29492                       00007AE4            .296:
29493                       00007AE4            .292:
29494                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29495 7AE4           8B46         08            mov	ax,8[bp]
29496 7AE7           40                         inc	ax
29497 7AE8           8946         08            mov	8[bp],ax
29498                                           !BCC_EOS
29499                                           ! 4003         outb(0x3c8, v);
29500                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29501 7AEB           FF76         FA            push	-6[bp]
29502                                           ! Debug: list int = const $3C8 (used reg = )
29503 7AEE           B8                   03C8  mov	ax,#$3C8
29504 7AF1           50                         push	ax
29505                                           ! Debug: func () void = outb+0 (used reg = )
29506 7AF2           E8         0162            call	_outb
29507 7AF5           83C4                   04  add	sp,*4
29508                                           !BCC_EOS
29509                                           ! 4004     }
29510                                           ! 4005     return BX;
29511                       00007AF8            .290:
29512 7AF8           8B46         08            mov	ax,8[bp]
29513 7AFB           89EC                       mov	sp,bp
29514 7AFD           5D                         pop	bp
29515 7AFE           C3                         ret
29516                                           !BCC_EOS
29517                                           ! 4006 }
29518                                           ! 4007 static Bit8u find_vga_entry(mode)
29519                                           ! 4008 Bit8u mode;
29520                       00007AFF            _find_vga_entry:
29521                                           !BCC_EOS
29522                                           ! 4009 {
29523                                           ! 4010  Bit8u i,line=0xFF;
29524 7AFF           55                         push	bp
29525 7B00           89E5                       mov	bp,sp
29526 7B02           4C                         dec	sp
29527 7B03           4C                         dec	sp
29528                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29529 7B04           B0                     FF  mov	al,#$FF
29530 7B06           8846         FE            mov	-2[bp],al
29531                                           !BCC_EOS
29532                                           ! 4011  for(i=0;i<=15;i++)
29533                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29534 7B09           30C0                       xor	al,al
29535 7B0B           8846         FF            mov	-1[bp],al
29536                                           !BCC_EOS
29537                                           !BCC_EOS
29538                                           ! 4012   if(vga_modes[i].svgamode==mode)
29539 7B0E           EB           23            jmp .299
29540                       00007B10            .29A:
29541                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29542 7B10           8A46         FF            mov	al,-1[bp]
29543 7B13           30E4                       xor	ah,ah
29544 7B15           B1                     03  mov	cl,*3
29545 7B17           D3E0                       shl	ax,cl
29546 7B19           89C3                       mov	bx,ax
29547                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29548 7B1B           8A87       01FD            mov	al,_vga_modes[bx]
29549 7B1F           3A46         04            cmp	al,4[bp]
29550 7B22           75           08            jne 	.29B
29551                       00007B24            .29C:
29552                                           ! 4013    {line=i;
29553                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29554 7B24           8A46         FF            mov	al,-1[bp]
29555 7B27           8846         FE            mov	-2[bp],al
29556                                           !BCC_EOS
29557                                           ! 4014     break;
29558 7B2A           EB           0E            jmp .297
29559                                           !BCC_EOS
29560                                           ! 4015    }
29561                                           ! 4016  return line;
29562                       00007B2C            .29B:
29563                       00007B2C            .298:
29564                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29565 7B2C           8A46         FF            mov	al,-1[bp]
29566 7B2F           40                         inc	ax
29567 7B30           8846         FF            mov	-1[bp],al
29568                       00007B33            .299:
29569                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29570 7B33           8A46         FF            mov	al,-1[bp]
29571 7B36           3C                     0F  cmp	al,*$F
29572 7B38           76           D6            jbe	.29A
29573                       00007B3A            .29D:
29574                       00007B3A            .297:
29575 7B3A           8A46         FE            mov	al,-2[bp]
29576 7B3D           89EC                       mov	sp,bp
29577 7B3F           5D                         pop	bp
29578 7B40           C3                         ret
29579                                           !BCC_EOS
29580                                           ! 4017 }
29581                                           ! 4018 static void memsetb(seg,offset,value,count)
29582                                           ! Register BX used in function find_vga_entry
29583                                           ! 4019   Bit16u seg;
29584                       00007B41            _memsetb:
29585                                           !BCC_EOS
29586                                           ! 4020   Bit16u offset;
29587                                           !BCC_EOS
29588                                           ! 4021   Bit16u value;
29589                                           !BCC_EOS
29590                                           ! 4022   Bit16u count;
29591                                           !BCC_EOS
29592                                           ! 4023 {
29593                                           ! 4024 #asm
29594                                           !BCC_ASM
29595                       00000008            _memsetb.count	set	8
29596                       00000002            _memsetb.seg	set	2
29597                       00000006            _memsetb.value	set	6
29598                       00000004            _memsetb.offset	set	4
29599 7B41           55                           push bp
29600 7B42           89E5                         mov bp, sp
29601 7B44           50                             push ax
29602 7B45           51                             push cx
29603 7B46           06                             push es
29604 7B47           57                             push di
29605 7B48           8B4E         0A                mov cx, 10[bp] ; count
29606 7B4B           83F9                   00      cmp cx, #0x00
29607 7B4E           74           10                je memsetb_end
29608 7B50           8B46         04                mov ax, 4[bp] ; segment
29609 7B53           8EC0                           mov es, ax
29610 7B55           8B46         06                mov ax, 6[bp] ; offset
29611 7B58           89C7                           mov di, ax
29612 7B5A           8A46         08                mov al, 8[bp] ; value
29613 7B5D           FC                             cld
29614 7B5E           F3                             rep
29615 7B5F           AA                              stosb
29616                       00007B60            memsetb_end:
29617 7B60           5F                             pop di
29618 7B61           07                             pop es
29619 7B62           59                             pop cx
29620 7B63           58                             pop ax
29621 7B64           5D                           pop bp
29622                                           ! 4048 endasm
29623                                           !BCC_ENDASM
29624                                           ! 4049 }
29625 7B65           C3                         ret
29626                                           ! 4050 static void memsetw(seg,offset,value,count)
29627                                           ! 4051   Bit16u seg;
29628                       00007B66            _memsetw:
29629                                           !BCC_EOS
29630                                           ! 4052   Bit16u offset;
29631                                           !BCC_EOS
29632                                           ! 4053   Bit16u value;
29633                                           !BCC_EOS
29634                                           ! 4054   Bit16u count;
29635                                           !BCC_EOS
29636                                           ! 4055 {
29637                                           ! 4056 #asm
29638                                           !BCC_ASM
29639                       00000008            _memsetw.count	set	8
29640                       00000002            _memsetw.seg	set	2
29641                       00000006            _memsetw.value	set	6
29642                       00000004            _memsetw.offset	set	4
29643 7B66           55                           push bp
29644 7B67           89E5                         mov bp, sp
29645 7B69           50                             push ax
29646 7B6A           51                             push cx
29647 7B6B           06                             push es
29648 7B6C           57                             push di
29649 7B6D           8B4E         0A                mov cx, 10[bp] ; count
29650 7B70           83F9                   00      cmp cx, #0x00
29651 7B73           74           10                je memsetw_end
29652 7B75           8B46         04                mov ax, 4[bp] ; segment
29653 7B78           8EC0                           mov es, ax
29654 7B7A           8B46         06                mov ax, 6[bp] ; offset
29655 7B7D           89C7                           mov di, ax
29656 7B7F           8B46         08                mov ax, 8[bp] ; value
29657 7B82           FC                             cld
29658 7B83           F3                             rep
29659 7B84           AB                              stosw
29660                       00007B85            memsetw_end:
29661 7B85           5F                             pop di
29662 7B86           07                             pop es
29663 7B87           59                             pop cx
29664 7B88           58                             pop ax
29665 7B89           5D                           pop bp
29666                                           ! 4080 endasm
29667                                           !BCC_ENDASM
29668                                           ! 4081 }
29669 7B8A           C3                         ret
29670                                           ! 4082 static void memcpyb(dseg,doffset,sseg,soffset,count)
29671                                           ! 4083   Bit16u dseg;
29672                       00007B8B            _memcpyb:
29673                                           !BCC_EOS
29674                                           ! 4084   Bit16u doffset;
29675                                           !BCC_EOS
29676                                           ! 4085   Bit16u sseg;
29677                                           !BCC_EOS
29678                                           ! 4086   Bit16u soffset;
29679                                           !BCC_EOS
29680                                           ! 4087   Bit16u count;
29681                                           ! 4087 
29682                                           !BCC_EOS
29683                                           ! 4088 {
29684                                           ! 4089 #asm
29685                                           !BCC_ASM
29686                       0000000A            _memcpyb.count	set	$A
29687                       00000006            _memcpyb.sseg	set	6
29688                       00000008            _memcpyb.soffset	set	8
29689                       00000002            _memcpyb.dseg	set	2
29690                       00000004            _memcpyb.doffset	set	4
29691 7B8B           55                           push bp
29692 7B8C           89E5                         mov bp, sp
29693 7B8E           50                             push ax
29694 7B8F           51                             push cx
29695 7B90           06                             push es
29696 7B91           57                             push di
29697 7B92           1E                             push ds
29698 7B93           56                             push si
29699 7B94           8B4E         0C                mov cx, 12[bp] ; count
29700 7B97           83F9                   00      cmp cx, #0x0000
29701 7B9A           74           17                je memcpyb_end
29702 7B9C           8B46         04                mov ax, 4[bp] ; dsegment
29703 7B9F           8EC0                           mov es, ax
29704 7BA1           8B46         06                mov ax, 6[bp] ; doffset
29705 7BA4           89C7                           mov di, ax
29706 7BA6           8B46         08                mov ax, 8[bp] ; ssegment
29707 7BA9           8ED8                           mov ds, ax
29708 7BAB           8B46         0A                mov ax, 10[bp] ; soffset
29709 7BAE           89C6                           mov si, ax
29710 7BB0           FC                             cld
29711 7BB1           F3                             rep
29712 7BB2           A4                              movsb
29713                       00007BB3            memcpyb_end:
29714 7BB3           5E                             pop si
29715 7BB4           1F                             pop ds
29716 7BB5           5F                             pop di
29717 7BB6           07                             pop es
29718 7BB7           59                             pop cx
29719 7BB8           58                             pop ax
29720 7BB9           5D                           pop bp
29721                                           ! 4120 endasm
29722                                           !BCC_ENDASM
29723                                           ! 4121 }
29724 7BBA           C3                         ret
29725                                           ! 4122 static void memcpyw(dseg,doffset,sseg,soffset,count)
29726                                           ! 4123   Bit16u dseg;
29727                       00007BBB            _memcpyw:
29728                                           !BCC_EOS
29729                                           ! 4124   Bit16u doffset;
29730                                           !BCC_EOS
29731                                           ! 4125   Bit16u sseg;
29732                                           !BCC_EOS
29733                                           ! 4126   Bit16u soffset;
29734                                           !BCC_EOS
29735                                           ! 4127   Bit16u count;
29736                                           !BCC_EOS
29737                                           ! 4128 {
29738                                           ! 4129 #asm
29739                                           !BCC_ASM
29740                       0000000A            _memcpyw.count	set	$A
29741                       00000006            _memcpyw.sseg	set	6
29742                       00000008            _memcpyw.soffset	set	8
29743                       00000002            _memcpyw.dseg	set	2
29744                       00000004            _memcpyw.doffset	set	4
29745 7BBB           55                           push bp
29746 7BBC           89E5                         mov bp, sp
29747 7BBE           50                             push ax
29748 7BBF           51                             push cx
29749 7BC0           06                             push es
29750 7BC1           57                             push di
29751 7BC2           1E                             push ds
29752 7BC3           56                             push si
29753 7BC4           8B4E         0C                mov cx, 12[bp] ; count
29754 7BC7           83F9                   00      cmp cx, #0x0000
29755 7BCA           74           17                je memcpyw_end
29756 7BCC           8B46         04                mov ax, 4[bp] ; dsegment
29757 7BCF           8EC0                           mov es, ax
29758 7BD1           8B46         06                mov ax, 6[bp] ; doffset
29759 7BD4           89C7                           mov di, ax
29760 7BD6           8B46         08                mov ax, 8[bp] ; ssegment
29761 7BD9           8ED8                           mov ds, ax
29762 7BDB           8B46         0A                mov ax, 10[bp] ; soffset
29763 7BDE           89C6                           mov si, ax
29764 7BE0           FC                             cld
29765 7BE1           F3                             rep
29766 7BE2           A5                              movsw
29767                       00007BE3            memcpyw_end:
29768 7BE3           5E                             pop si
29769 7BE4           1F                             pop ds
29770 7BE5           5F                             pop di
29771 7BE6           07                             pop es
29772 7BE7           59                             pop cx
29773 7BE8           58                             pop ax
29774 7BE9           5D                           pop bp
29775                                           ! 4160 endasm
29776                                           !BCC_ENDASM
29777                                           ! 4161 }
29778 7BEA           C3                         ret
29779                                           ! 4162 static Bit8u
29780                                           ! 4163 read_byte(seg, offset)
29781                                           ! 4164   Bit16u seg;
29782                       00007BEB            _read_byte:
29783                                           !BCC_EOS
29784                                           ! 4165   Bit16u offset;
29785                                           !BCC_EOS
29786                                           ! 4166 {
29787                                           ! 4167 #asm
29788                                           !BCC_ASM
29789                       00000002            _read_byte.seg	set	2
29790                       00000004            _read_byte.offset	set	4
29791 7BEB           55                           push bp
29792 7BEC           89E5                         mov bp, sp
29793 7BEE           53                             push bx
29794 7BEF           1E                             push ds
29795 7BF0           8B46         04                mov ax, 4[bp] ; segment
29796 7BF3           8ED8                           mov ds, ax
29797 7BF5           8B5E         06                mov bx, 6[bp] ; offset
29798 7BF8           8A07                           mov al, [bx]
29799                                               ;; al = return value (byte)
29800 7BFA           1F                             pop ds
29801 7BFB           5B                             pop bx
29802 7BFC           5D                           pop bp
29803                                           ! 4180 endasm
29804                                           !BCC_ENDASM
29805                                           ! 4181 }
29806 7BFD           C3                         ret
29807                                           ! 4182 static Bit16u
29808                                           ! 4183 read_word(seg, offset)
29809                                           ! 4184   Bit16u seg;
29810                       00007BFE            _read_word:
29811                                           !BCC_EOS
29812                                           ! 4185   Bit16u offset;
29813                                           !BCC_EOS
29814                                           ! 4186 {
29815                                           ! 4187 #asm
29816                                           !BCC_ASM
29817                       00000002            _read_word.seg	set	2
29818                       00000004            _read_word.offset	set	4
29819 7BFE           55                           push bp
29820 7BFF           89E5                         mov bp, sp
29821 7C01           53                             push bx
29822 7C02           1E                             push ds
29823 7C03           8B46         04                mov ax, 4[bp] ; segment
29824 7C06           8ED8                           mov ds, ax
29825 7C08           8B5E         06                mov bx, 6[bp] ; offset
29826 7C0B           8B07                           mov ax, [bx]
29827                                               ;; ax = return value (word)
29828 7C0D           1F                             pop ds
29829 7C0E           5B                             pop bx
29830 7C0F           5D                           pop bp
29831                                           ! 4200 endasm
29832                                           !BCC_ENDASM
29833                                           ! 4201 }
29834 7C10           C3                         ret
29835                                           ! 4202 static void
29836                                           ! 4203 write_byte(seg, offset, data)
29837                                           ! 4204   Bit16u seg;
29838                       00007C11            _write_byte:
29839                                           !BCC_EOS
29840                                           ! 4205   Bit16u offset;
29841                                           !BCC_EOS
29842                                           ! 4206   Bit8u data;
29843                                           !BCC_EOS
29844                                           ! 4207 {
29845                                           ! 4208 #asm
29846                                           !BCC_ASM
29847                       00000002            _write_byte.seg	set	2
29848                       00000006            _write_byte.data	set	6
29849                       00000004            _write_byte.offset	set	4
29850 7C11           55                           push bp
29851 7C12           89E5                         mov bp, sp
29852 7C14           50                             push ax
29853 7C15           53                             push bx
29854 7C16           1E                             push ds
29855 7C17           8B46         04                mov ax, 4[bp] ; segment
29856 7C1A           8ED8                           mov ds, ax
29857 7C1C           8B5E         06                mov bx, 6[bp] ; offset
29858 7C1F           8A46         08                mov al, 8[bp] ; data byte
29859 7C22           8807                           mov [bx], al ; write data byte
29860 7C24           1F                             pop ds
29861 7C25           5B                             pop bx
29862 7C26           58                             pop ax
29863 7C27           5D                           pop bp
29864                                           ! 4223 endasm
29865                                           !BCC_ENDASM
29866                                           ! 4224 }
29867 7C28           C3                         ret
29868                                           ! 4225 static void
29869                                           ! 4226 write_word(seg, offset, data)
29870                                           ! 4227   Bit16u seg;
29871                       00007C29            _write_word:
29872                                           !BCC_EOS
29873                                           ! 4228   Bit16u offset;
29874                                           !BCC_EOS
29875                                           ! 4229 
29876                                           ! 4229   Bit16u data;
29877                                           !BCC_EOS
29878                                           ! 4230 {
29879                                           ! 4231 #asm
29880                                           !BCC_ASM
29881                       00000002            _write_word.seg	set	2
29882                       00000006            _write_word.data	set	6
29883                       00000004            _write_word.offset	set	4
29884 7C29           55                           push bp
29885 7C2A           89E5                         mov bp, sp
29886 7C2C           50                             push ax
29887 7C2D           53                             push bx
29888 7C2E           1E                             push ds
29889 7C2F           8B46         04                mov ax, 4[bp] ; segment
29890 7C32           8ED8                           mov ds, ax
29891 7C34           8B5E         06                mov bx, 6[bp] ; offset
29892 7C37           8B46         08                mov ax, 8[bp] ; data word
29893 7C3A           8907                           mov [bx], ax ; write data word
29894 7C3C           1F                             pop ds
29895 7C3D           5B                             pop bx
29896 7C3E           58                             pop ax
29897 7C3F           5D                           pop bp
29898                                           ! 4246 endasm
29899                                           !BCC_ENDASM
29900                                           ! 4247 }
29901 7C40           C3                         ret
29902                                           ! 4248  Bit8u
29903                                           ! 4249 inb(port)
29904                                           ! 4250   Bit16u port;
29905                                           export	_inb
29906                       00007C41            _inb:
29907                                           !BCC_EOS
29908                                           ! 4251 {
29909                                           ! 4252 #asm
29910                                           !BCC_ASM
29911                       00000002            _inb.port	set	2
29912 7C41           55                           push bp
29913 7C42           89E5                         mov bp, sp
29914 7C44           52                             push dx
29915 7C45           8B56         04                mov dx, 4[bp]
29916 7C48           EC                             in al, dx
29917 7C49           5A                             pop dx
29918 7C4A           5D                           pop bp
29919                                           ! 4260 endasm
29920                                           !BCC_ENDASM
29921                                           ! 4261 }
29922 7C4B           C3                         ret
29923                                           ! 4262   Bit16u
29924                                           ! 4263 inw(port)
29925                                           ! 4264   Bit16u port;
29926                                           export	_inw
29927                       00007C4C            _inw:
29928                                           !BCC_EOS
29929                                           ! 4265 {
29930                                           ! 4266 #asm
29931                                           !BCC_ASM
29932                       00000002            _inw.port	set	2
29933 7C4C           55                           push bp
29934 7C4D           89E5                         mov bp, sp
29935 7C4F           52                             push dx
29936 7C50           8B56         04                mov dx, 4[bp]
29937 7C53           ED                             in ax, dx
29938 7C54           5A                             pop dx
29939 7C55           5D                           pop bp
29940                                           ! 4274 endasm
29941                                           !BCC_ENDASM
29942                                           ! 4275 }
29943 7C56           C3                         ret
29944                                           ! 4276   void
29945                                           ! 4277 outb(port, val)
29946                                           ! 4278   Bit16u port;
29947                                           export	_outb
29948                       00007C57            _outb:
29949                                           !BCC_EOS
29950                                           ! 4279   Bit8u val;
29951                                           !BCC_EOS
29952                                           ! 4280 {
29953                                           ! 4281 #asm
29954                                           !BCC_ASM
29955                       00000004            _outb.val	set	4
29956                       00000002            _outb.port	set	2
29957 7C57           55                           push bp
29958 7C58           89E5                         mov bp, sp
29959 7C5A           50                             push ax
29960 7C5B           52                             push dx
29961 7C5C           8B56         04                mov dx, 4[bp]
29962 7C5F           8A46         06                mov al, 6[bp]
29963 7C62           EE                             out dx, al
29964 7C63           5A                             pop dx
29965 7C64           58                             pop ax
29966 7C65           5D                           pop bp
29967                                           ! 4292 endasm
29968                                           !BCC_ENDASM
29969                                           ! 4293 }
29970 7C66           C3                         ret
29971                                           ! 4294   void
29972                                           ! 4295 outw(port, val)
29973                                           ! 4296   Bit16u port;
29974                                           export	_outw
29975                       00007C67            _outw:
29976                                           !BCC_EOS
29977                                           ! 4297   Bit16u val;
29978                                           !BCC_EOS
29979                                           ! 4298 {
29980                                           ! 4299 #asm
29981                                           !BCC_ASM
29982                       00000004            _outw.val	set	4
29983                       00000002            _outw.port	set	2
29984 7C67           55                           push bp
29985 7C68           89E5                         mov bp, sp
29986 7C6A           50                             push ax
29987 7C6B           52                             push dx
29988 7C6C           8B56         04                mov dx, 4[bp]
29989 7C6F           8B46         06                mov ax, 6[bp]
29990 7C72           EF                             out dx, ax
29991 7C73           5A                             pop dx
29992 7C74           58                             pop ax
29993 7C75           5D                           pop bp
29994                                           ! 4310 endasm
29995                                           !BCC_ENDASM
29996                                           ! 4311 }
29997 7C76           C3                         ret
29998                                           ! 4312 Bit16u get_SS()
29999                                           ! 4313 {
30000                                           export	_get_SS
30001                       00007C77            _get_SS:
30002                                           ! 4314 #asm
30003                                           !BCC_ASM
30004 7C77           8CD0                         mov ax, ss
30005                                           ! 4316 endasm
30006                                           !BCC_ENDASM
30007                                           ! 4317 }
30008 7C79           C3                         ret
30009                                           ! 4318 void printf(s)
30010                                           ! 4319   Bit8u *s;
30011                                           export	_printf
30012                       00007C7A            _printf:
30013                                           !BCC_EOS
30014                                           ! 4320 {
30015                                           ! 4321   Bit8u c, format_char;
30016                                           !BCC_EOS
30017                                           ! 4322   Boolean in_format;
30018                                           !BCC_EOS
30019                                           ! 4323   unsigned format_width, i;
30020                                           !BCC_EOS
30021                                           ! 4324   Bit16u *arg_ptr;
30022                                           !BCC_EOS
30023                                           ! 4325   Bit16u arg_seg, arg, digit, nibble, shift_count;
30024                                           !BCC_EOS
30025                                           ! 4326   arg_ptr = &s;
30026 7C7A           55                         push	bp
30027 7C7B           89E5                       mov	bp,sp
30028 7C7D           83C4                   EC  add	sp,*-$14
30029                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30030 7C80           8D5E         04            lea	bx,4[bp]
30031 7C83           895E         F6            mov	-$A[bp],bx
30032                                           !BCC_EOS
30033                                           ! 4327   arg_seg = get_SS();
30034                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
30035 7C86           E8         FFEE            call	_get_SS
30036                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
30037 7C89           8946         F4            mov	-$C[bp],ax
30038                                           !BCC_EOS
30039                                           ! 4328   in_format = 0;
30040                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30041 7C8C           31C0                       xor	ax,ax
30042 7C8E           8946         FC            mov	-4[bp],ax
30043                                           !BCC_EOS
30044                                           ! 4329   format_width = 0;
30045                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30046 7C91           31C0                       xor	ax,ax
30047 7C93           8946         FA            mov	-6[bp],ax
30048                                           !BCC_EOS
30049                                           ! 4330   while (c = read_byte(0xc000, s)) {
30050 7C96           E9         0104            br 	.29F
30051                       00007C99            .2A0:
30052                                           ! 4331     if ( c == '%' ) {
30053                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
30054 7C99           8A46         FF            mov	al,-1[bp]
30055 7C9C           3C                     25  cmp	al,*$25
30056 7C9E           75           0E            jne 	.2A1
30057                       00007CA0            .2A2:
30058                                           ! 4332       in_format = 1;
30059                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
30060 7CA0           B8                   0001  mov	ax,*1
30061 7CA3           8946         FC            mov	-4[bp],ax
30062                                           !BCC_EOS
30063                                           ! 4333       format_width = 0;
30064                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30065 7CA6           31C0                       xor	ax,ax
30066 7CA8           8946         FA            mov	-6[bp],ax
30067                                           !BCC_EOS
30068                                           ! 4334       }
30069                                           ! 4335     else if (in_format) {
30070 7CAB           E9         00E8            br 	.2A3
30071                       00007CAE            .2A1:
30072 7CAE           8B46         FC            mov	ax,-4[bp]
30073 7CB1           85C0                       test	ax,ax
30074 7CB3         0F84         00CF            beq 	.2A4
30075                       00007CB7            .2A5:
30076                                           ! 4336       if ( (c>='0') && (c<='9') ) {
30077                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30078 7CB7           8A46         FF            mov	al,-1[bp]
30079 7CBA           3C                     30  cmp	al,*$30
30080 7CBC           72           28            jb  	.2A6
30081                       00007CBE            .2A8:
30082                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30083 7CBE           8A46         FF            mov	al,-1[bp]
30084 7CC1           3C                     39  cmp	al,*$39
30085 7CC3           77           21            ja  	.2A6
30086                       00007CC5            .2A7:
30087                                           ! 4337         format_width = (format_width * 10) + (c - '0');
30088                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30089 7CC5           8A46         FF            mov	al,-1[bp]
30090 7CC8           30E4                       xor	ah,ah
30091 7CCA           05                   FFD0  add	ax,*-$30
30092 7CCD           50                         push	ax
30093                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30094 7CCE           8B46         FA            mov	ax,-6[bp]
30095 7CD1           89C2                       mov	dx,ax
30096 7CD3           D1E0                       shl	ax,*1
30097 7CD5           D1E0                       shl	ax,*1
30098 7CD7           01D0                       add	ax,dx
30099 7CD9           D1E0                       shl	ax,*1
30100                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30101 7CDB           0346         EA            add	ax,-$16[bp]
30102 7CDE           44                         inc	sp
30103 7CDF           44                         inc	sp
30104                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30105 7CE0           8946         FA            mov	-6[bp],ax
30106                                           !BCC_EOS
30107                                           ! 4338         }
30108                                           ! 4339       else if (c == 'x') {
30109 7CE3           E9         009E            br 	.2A9
30110                       00007CE6            .2A6:
30111                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30112 7CE6           8A46         FF            mov	al,-1[bp]
30113 7CE9           3C                     78  cmp	al,*$78
30114 7CEB         0F85         0095            bne 	.2AA
30115                       00007CEF            .2AB:
30116                                           ! 4340         arg_ptr++;
30117                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30118 7CEF           8B5E         F6            mov	bx,-$A[bp]
30119 7CF2           43                         inc	bx
30120 7CF3           43                         inc	bx
30121 7CF4           895E         F6            mov	-$A[bp],bx
30122                                           !BCC_EOS
30123                                           ! 4341         arg = read_word(arg_seg, arg_ptr);
30124                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30125 7CF7           FF76         F6            push	-$A[bp]
30126                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30127 7CFA           FF76         F4            push	-$C[bp]
30128                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30129 7CFD           E8         FEFE            call	_read_word
30130 7D00           83C4                   04  add	sp,*4
30131                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30132 7D03           8946         F2            mov	-$E[bp],ax
30133                                           !BCC_EOS
30134                                           ! 4342         if (format_width == 0)
30135                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30136 7D06           8B46         FA            mov	ax,-6[bp]
30137 7D09           85C0                       test	ax,ax
30138 7D0B           75           06            jne 	.2AC
30139                       00007D0D            .2AD:
30140                                           ! 4343           format_width = 4;
30141                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30142 7D0D           B8                   0004  mov	ax,*4
30143 7D10           8946         FA            mov	-6[bp],ax
30144                                           !BCC_EOS
30145                                           ! 4344         i = 0;
30146                       00007D13            .2AC:
30147                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30148 7D13           31C0                       xor	ax,ax
30149 7D15           8946         F8            mov	-8[bp],ax
30150                                           !BCC_EOS
30151                                           ! 4345         digit = format_width - 1;
30152                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30153 7D18           8B46         FA            mov	ax,-6[bp]
30154                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30155 7D1B           48                         dec	ax
30156 7D1C           8946         F0            mov	-$10[bp],ax
30157                                           !BCC_EOS
30158                                           ! 4346         for (i=0; i<format_width; i++) {
30159                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30160 7D1F           31C0                       xor	ax,ax
30161 7D21           8946         F8            mov	-8[bp],ax
30162                                           !BCC_EOS
30163                                           !BCC_EOS
30164 7D24           EB           51            jmp .2B0
30165                       00007D26            .2B1:
30166                                           ! 4347           nibble = (arg >> (4 * digit)) & 0x000f;
30167                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30168                                           ! Debug: expression subtree swapping
30169 7D26           8B46         F0            mov	ax,-$10[bp]
30170 7D29           D1E0                       shl	ax,*1
30171 7D2B           D1E0                       shl	ax,*1
30172                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30173 7D2D           89C3                       mov	bx,ax
30174 7D2F           8B46         F2            mov	ax,-$E[bp]
30175 7D32           89D9                       mov	cx,bx
30176 7D34           D3E8                       shr	ax,cl
30177                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30178 7D36           24                     0F  and	al,*$F
30179                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30180 7D38           30E4                       xor	ah,ah
30181 7D3A           8946         EE            mov	-$12[bp],ax
30182                                           !BCC_EOS
30183                                           ! 4348           if (nibble <= 9)
30184                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30185 7D3D           8B46         EE            mov	ax,-$12[bp]
30186 7D40           3D                   0009  cmp	ax,*9
30187 7D43           77           13            ja  	.2B2
30188                       00007D45            .2B3:
30189                                           ! 4349             outb(0x0500, nibble + '0');
30190                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30191 7D45           8B46         EE            mov	ax,-$12[bp]
30192                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30193 7D48           05                   0030  add	ax,*$30
30194 7D4B           50                         push	ax
30195                                           ! Debug: list int = const $500 (used reg = )
30196 7D4C           B8                   0500  mov	ax,#$500
30197 7D4F           50                         push	ax
30198                                           ! Debug: func () void = outb+0 (used reg = )
30199 7D50           E8         FF04            call	_outb
30200 7D53           83C4                   04  add	sp,*4
30201                                           !BCC_EOS
30202                                           ! 4350           else
30203                                           ! 4351             outb(0x0500, (nibble - 10) + 'A');
30204 7D56           EB           11            jmp .2B4
30205                       00007D58            .2B2:
30206                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30207 7D58           8B46         EE            mov	ax,-$12[bp]
30208                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30209                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30210 7D5B           05                   0037  add	ax,*$37
30211 7D5E           50                         push	ax
30212                                           ! Debug: list int = const $500 (used reg = )
30213 7D5F           B8                   0500  mov	ax,#$500
30214 7D62           50                         push	ax
30215                                           ! Debug: func () void = outb+0 (used reg = )
30216 7D63           E8         FEF1            call	_outb
30217 7D66           83C4                   04  add	sp,*4
30218                                           !BCC_EOS
30219                                           ! 4352           digit--;
30220                       00007D69            .2B4:
30221                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30222 7D69           8B46         F0            mov	ax,-$10[bp]
30223 7D6C           48                         dec	ax
30224 7D6D           8946         F0            mov	-$10[bp],ax
30225                                           !BCC_EOS
30226                                           ! 4353           }
30227                                           ! 4354         in_format = 0;
30228                       00007D70            .2AF:
30229                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30230 7D70           8B46         F8            mov	ax,-8[bp]
30231 7D73           40                         inc	ax
30232 7D74           8946         F8            mov	-8[bp],ax
30233                       00007D77            .2B0:
30234                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30235 7D77           8B46         F8            mov	ax,-8[bp]
30236 7D7A           3B46         FA            cmp	ax,-6[bp]
30237 7D7D           72           A7            jb 	.2B1
30238                       00007D7F            .2B5:
30239                       00007D7F            .2AE:
30240                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30241 7D7F           31C0                       xor	ax,ax
30242 7D81           8946         FC            mov	-4[bp],ax
30243                                           !BCC_EOS
30244                                           ! 4355         }
30245                                           ! 4356       }
30246                       00007D84            .2AA:
30247                       00007D84            .2A9:
30248                                           ! 4357     else {
30249 7D84           EB           10            jmp .2B6
30250                       00007D86            .2A4:
30251                                           ! 4358       outb(0x0500, c);
30252                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30253 7D86           8A46         FF            mov	al,-1[bp]
30254 7D89           30E4                       xor	ah,ah
30255 7D8B           50                         push	ax
30256                                           ! Debug: list int = const $500 (used reg = )
30257 7D8C           B8                   0500  mov	ax,#$500
30258 7D8F           50                         push	ax
30259                                           ! Debug: func () void = outb+0 (used reg = )
30260 7D90           E8         FEC4            call	_outb
30261 7D93           83C4                   04  add	sp,*4
30262                                           !BCC_EOS
30263                                           ! 4359       }
30264                                           ! 4360     s ++;
30265                       00007D96            .2B6:
30266                       00007D96            .2A3:
30267                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30268 7D96           8B5E         04            mov	bx,4[bp]
30269 7D99           43                         inc	bx
30270 7D9A           895E         04            mov	4[bp],bx
30271                                           !BCC_EOS
30272                                           ! 4361     }
30273                                           ! 4362 }
30274                       00007D9D            .29F:
30275                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30276 7D9D           FF76         04            push	4[bp]
30277                                           ! Debug: list unsigned int = const $C000 (used reg = )
30278 7DA0           B8                   C000  mov	ax,#$C000
30279 7DA3           50                         push	ax
30280                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30281 7DA4           E8         FE44            call	_read_byte
30282 7DA7           83C4                   04  add	sp,*4
30283                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30284 7DAA           8846         FF            mov	-1[bp],al
30285 7DAD           84C0                       test	al,al
30286 7DAF         0F85         FEE6            bne 	.2A0
30287                       00007DB3            .2B7:
30288                       00007DB3            .29E:
30289 7DB3           89EC                       mov	sp,bp
30290 7DB5           5D                         pop	bp
30291 7DB6           C3                         ret
30292                                           ! 4363 #asm
30293                                           !BCC_ASM
30294                       00000002            _printf.s	set	2
30295                                             ; get LFB address from PCI
30296                                             ; in - ax: PCI device vendor
30297                                             ; out - ax: LFB address (high 16 bit)
30298                                             ;; NOTE - may be called in protected mode
30299                       00007DB7            _pci_get_lfb_addr:
30300 7DB7           53                           push bx
30301 7DB8           51                           push cx
30302 7DB9           52                           push dx
30303 7DBA     66    50                           push eax
30304 7DBC           89C3                           mov bx, ax
30305 7DBE           31C9                           xor cx, cx
30306 7DC0           B2                     00      mov dl, #0x00
30307 7DC2           E8         0033                call pci_read_reg
30308 7DC5           3D                   FFFF      cmp ax, #0xffff
30309 7DC8           74           12                jz pci_get_lfb_addr_5
30310                       00007DCA             pci_get_lfb_addr_3:
30311 7DCA           B2                     00      mov dl, #0x00
30312 7DCC           E8         0029                call pci_read_reg
30313 7DCF           39D8                           cmp ax, bx ;; check vendor
30314 7DD1           74           0D                jz pci_get_lfb_addr_4
30315 7DD3           83C1                   08      add cx, #0x8
30316 7DD6           81F9                 0200      cmp cx, #0x200 ;; search bus #0 and #1
30317 7DDA           72           EE                jb pci_get_lfb_addr_3
30318                       00007DDC             pci_get_lfb_addr_5:
30319 7DDC           31D2                           xor dx, dx ;; no LFB
30320 7DDE           EB           10                jmp pci_get_lfb_addr_6
30321                       00007DE0             pci_get_lfb_addr_4:
30322 7DE0           B2                     10      mov dl, #0x10 ;; I/O space #0
30323 7DE2           E8         0013                call pci_read_reg
30324 7DE5           A9                   FFF1      test ax, #0xfff1
30325 7DE8           75           F2                jnz pci_get_lfb_addr_5
30326 7DEA     66    C1E8                   10      shr eax, #16
30327 7DEE           89C2                           mov dx, ax ;; LFB address
30328                       00007DF0             pci_get_lfb_addr_6:
30329 7DF0     66    58                           pop eax
30330 7DF2           89D0                         mov ax, dx
30331 7DF4           5A                           pop dx
30332 7DF5           59                           pop cx
30333 7DF6           5B                           pop bx
30334 7DF7           C3                           ret
30335                                             ; read PCI register
30336                                             ; in - cx: device/function
30337                                             ; in - dl: register
30338                                             ; out - eax: value
30339                       00007DF8            pci_read_reg:
30340 7DF8     66    B8               00800000    mov eax, #0x00800000
30341 7DFE           89C8                         mov ax, cx
30342 7E00     66    C1E0                   08    shl eax, #8
30343 7E04           88D0                         mov al, dl
30344 7E06           BA                   0CF8    mov dx, #0xcf8
30345 7E09     66    EF                           out dx, eax
30346 7E0B           80C2                   04    add dl, #4
30347 7E0E     66    ED                           in eax, dx
30348 7E10           C3                           ret
30349                                           ! 4418 endasm
30350                                           !BCC_ENDASM
30351                                           ! 4419 static ModeInfoListItem mode_info_list[]=
30352                                           ! Register BX used in function printf
30353                                           ! 4420 {
30354                                           
30355                       00007E11            _mode_info_list:
30356                                           ! 4421 { 0x0100,
30357 7E11                      0100            .word	$100
30358                                           ! 4422 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30359 7E13                      009B            .word	$9B
30360                                           ! 4423                           0x01 | 0x02 | 0x04,
30361 7E15                        07            .byte	7
30362                                           ! 4424                           0,
30363 7E16                        00            .byte	0
30364                                           ! 4425                           64,
30365 7E17                      0040            .word	$40
30366                                           ! 4426                    64,
30367 7E19                      0040            .word	$40
30368                                           ! 4427                        0xA000,
30369 7E1B                      A000            .word	$A000
30370                                           ! 4428                        0x0000,
30371 7E1D                      0000            .word	0
30372                                           ! 4429                       0,
30373 7E1F                      0000            .word	0
30374 7E21                      0000            .word	0
30375                                           ! 4430                             640,
30376 7E23                      0280            .word	$280
30377                                           ! 4431                        640,
30378 7E25                      0280            .word	$280
30379                                           ! 4432                        400,
30380 7E27                      0190            .word	$190
30381                                           ! 4433                      8,
30382 7E29                        08            .byte	8
30383                                           ! 4434                      16,
30384 7E2A                        10            .byte	$10
30385                                           ! 4435                           1,
30386 7E2B                        01            .byte	1
30387                                           ! 4436                         8,
30388 7E2C                        08            .byte	8
30389                                           ! 4437                          4,
30390 7E2D                        04            .byte	4
30391                                           ! 4438                        0x04,
30392 7E2E                        04            .byte	4
30393                                           ! 4439                     0,
30394 7E2F                        00            .byte	0
30395                                           ! 4440                               64,
30396 7E30                        40            .byte	$40
30397                                           ! 4441                          0,
30398 7E31                        00            .byte	0
30399                                           ! 4442                        0,
30400 7E32                        00            .byte	0
30401                                           ! 4443                             0,
30402 7E33                        00            .byte	0
30403                                           ! 4444                          0,
30404 7E34                        00            .byte	0
30405                                           ! 4445                               0,
30406 7E35                        00            .byte	0
30407                                           ! 4446                         0,
30408 7E36                        00            .byte	0
30409                                           ! 4447                              0,
30410 7E37                        00            .byte	0
30411                                           ! 4448                         0,
30412 7E38                        00            .byte	0
30413                                           ! 4449                              0,
30414 7E39                        00            .byte	0
30415                                           ! 4450                                0,
30416 7E3A                        00            .byte	0
30417                                           ! 4451                        0xE0000000,
30418 7E3B                      0000            .word	0
30419 7E3D                      E000            .word	$E000
30420                                           ! 4452                             
30421                                           ! 4452   0,
30422 7E3F                      0000            .word	0
30423 7E41                      0000            .word	0
30424                                           ! 4453                             0,
30425 7E43                      0000            .word	0
30426                                           ! 4454                                640,
30427 7E45                      0280            .word	$280
30428                                           ! 4455                             0,
30429 7E47                        00            .byte	0
30430                                           ! 4456                             0,
30431 7E48                        00            .byte	0
30432                                           ! 4457                           0,
30433 7E49                        00            .byte	0
30434                                           ! 4458                                0,
30435 7E4A                        00            .byte	0
30436                                           ! 4459                             0,
30437 7E4B                        00            .byte	0
30438                                           ! 4460                                  0,
30439 7E4C                        00            .byte	0
30440                                           ! 4461                            0,
30441 7E4D                        00            .byte	0
30442                                           ! 4462                                 0,
30443 7E4E                        00            .byte	0
30444                                           ! 4463                            0,
30445 7E4F                        00            .byte	0
30446                                           ! 4464                                 0,
30447 7E50                        00            .byte	0
30448                                           ! 4465                          0,
30449 7E51                      0000            .word	0
30450 7E53                      0000            .word	0
30451                                           ! 4466 } },
30452                                           ! 4467 { 0x0101,
30453 7E55                      0101            .word	$101
30454                                           ! 4468 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30455 7E57                      009B            .word	$9B
30456                                           ! 4469                           0x01 | 0x02 | 0x04,
30457 7E59                        07            .byte	7
30458                                           ! 4470                           0,
30459 7E5A                        00            .byte	0
30460                                           ! 4471                           64,
30461 7E5B                      0040            .word	$40
30462                                           ! 4472                    64,
30463 7E5D                      0040            .word	$40
30464                                           ! 4473                        0xA000,
30465 7E5F                      A000            .word	$A000
30466                                           ! 4474                        0x0000,
30467 7E61                      0000            .word	0
30468                                           ! 4475                       0,
30469 7E63                      0000            .word	0
30470 7E65                      0000            .word	0
30471                                           ! 4476                             640,
30472 7E67                      0280            .word	$280
30473                                           ! 4477                        640,
30474 7E69                      0280            .word	$280
30475                                           ! 4478                        480,
30476 7E6B                      01E0            .word	$1E0
30477                                           ! 4479                      8,
30478 7E6D                        08            .byte	8
30479                                           ! 4480                      16,
30480 7E6E                        10            .byte	$10
30481                                           ! 4481                           1,
30482 7E6F                        01            .byte	1
30483                                           ! 4482                         8,
30484 7E70                        08            .byte	8
30485                                           ! 4483                          5,
30486 7E71                        05            .byte	5
30487                                           ! 4484                        0x04,
30488 7E72                        04            .byte	4
30489                                           ! 4485                     0,
30490 7E73                        00            .byte	0
30491                                           ! 4486                               53,
30492 7E74                        35            .byte	$35
30493                                           ! 4487                          0,
30494 7E75                        00            .byte	0
30495                                           ! 4488                        0,
30496 7E76                        00            .byte	0
30497                                           ! 4489                             0,
30498 7E77                        00            .byte	0
30499                                           ! 4490                          0,
30500 7E78                        00            .byte	0
30501                                           ! 4491                               0,
30502 7E79                        00            .byte	0
30503                                           ! 4492                         0,
30504 7E7A                        00            .byte	0
30505                                           ! 4493                              0,
30506 7E7B                        00            .byte	0
30507                                           ! 4494                         0,
30508 7E7C                        00            .byte	0
30509                                           ! 4495                              0,
30510 7E7D                        00            .byte	0
30511                                           ! 4496                                0,
30512 7E7E                        00            .byte	0
30513                                           ! 4497                        0xE0000000,
30514 7E7F                      0000            .word	0
30515 7E81                      E000            .word	$E000
30516                                           ! 4498                               0,
30517 7E83                      0000            .word	0
30518 7E85                      0000            .word	0
30519                                           ! 4499                             0,
30520 7E87                      0000            .word	0
30521                                           ! 4500                                640,
30522 7E89                      0280            .word	$280
30523                                           ! 4501                             0,
30524 7E8B                        00            .byte	0
30525                                           ! 4502                             0,
30526 7E8C                        00            .byte	0
30527                                           ! 4503                           0,
30528 7E8D                        00            .byte	0
30529                                           ! 4504                                0,
30530 7E8E                        00            .byte	0
30531                                           ! 4505                             0,
30532 7E8F                        00            .byte	0
30533                                           ! 4506                                  0,
30534 7E90                        00            .byte	0
30535                                           ! 4507                            0,
30536 7E91                        00            .byte	0
30537                                           ! 4508                                 0,
30538 7E92                        00            .byte	0
30539                                           ! 4509                            0,
30540 7E93                        00            .byte	0
30541                                           ! 4510                                 0,
30542 7E94                        00            .byte	0
30543                                           ! 4511                          0,
30544 7E95                      0000            .word	0
30545 7E97                      0000            .word	0
30546                                           ! 4512 } },
30547                                           ! 4513 { 0x0102,
30548 7E99                      0102            .word	$102
30549                                           ! 4514 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30550 7E9B                      001F            .word	$1F
30551                                           ! 4515                           0x01 | 0x02 | 0x04,
30552 7E9D                        07            .byte	7
30553                                           ! 4516                           0,
30554 7E9E                        00            .byte	0
30555                                           ! 4517                           64,
30556 7E9F                      0040            .word	$40
30557                                           ! 4518                    64,
30558 7EA1                      0040            .word	$40
30559                                           ! 4519                        0xA000,
30560 7EA3                      A000            .word	$A000
30561                                           ! 4520                        0x0000,
30562 7EA5                      0000            .word	0
30563                                           ! 4521         
30564                                           ! 4521               0,
30565 7EA7                      0000            .word	0
30566 7EA9                      0000            .word	0
30567                                           ! 4522                             100,
30568 7EAB                      0064            .word	$64
30569                                           ! 4523                        800,
30570 7EAD                      0320            .word	$320
30571                                           ! 4524                        600,
30572 7EAF                      0258            .word	$258
30573                                           ! 4525                      8,
30574 7EB1                        08            .byte	8
30575                                           ! 4526                      16,
30576 7EB2                        10            .byte	$10
30577                                           ! 4527                           4,
30578 7EB3                        04            .byte	4
30579                                           ! 4528                         4,
30580 7EB4                        04            .byte	4
30581                                           ! 4529                          1,
30582 7EB5                        01            .byte	1
30583                                           ! 4530                        0x03,
30584 7EB6                        03            .byte	3
30585                                           ! 4531                     0,
30586 7EB7                        00            .byte	0
30587                                           ! 4532                               68,
30588 7EB8                        44            .byte	$44
30589                                           ! 4533                          0,
30590 7EB9                        00            .byte	0
30591                                           ! 4534                        0,
30592 7EBA                        00            .byte	0
30593                                           ! 4535                             0,
30594 7EBB                        00            .byte	0
30595                                           ! 4536                          0,
30596 7EBC                        00            .byte	0
30597                                           ! 4537                               0,
30598 7EBD                        00            .byte	0
30599                                           ! 4538                         0,
30600 7EBE                        00            .byte	0
30601                                           ! 4539                              0,
30602 7EBF                        00            .byte	0
30603                                           ! 4540                         0,
30604 7EC0                        00            .byte	0
30605                                           ! 4541                              0,
30606 7EC1                        00            .byte	0
30607                                           ! 4542                                0,
30608 7EC2                        00            .byte	0
30609                                           ! 4543                        0,
30610 7EC3                      0000            .word	0
30611 7EC5                      0000            .word	0
30612                                           ! 4544                               0,
30613 7EC7                      0000            .word	0
30614 7EC9                      0000            .word	0
30615                                           ! 4545                             0,
30616 7ECB                      0000            .word	0
30617                                           ! 4546                                100,
30618 7ECD                      0064            .word	$64
30619                                           ! 4547                             0,
30620 7ECF                        00            .byte	0
30621                                           ! 4548                             0,
30622 7ED0                        00            .byte	0
30623                                           ! 4549                           0,
30624 7ED1                        00            .byte	0
30625                                           ! 4550                                0,
30626 7ED2                        00            .byte	0
30627                                           ! 4551                             0,
30628 7ED3                        00            .byte	0
30629                                           ! 4552                                  0,
30630 7ED4                        00            .byte	0
30631                                           ! 4553                            0,
30632 7ED5                        00            .byte	0
30633                                           ! 4554                                 0,
30634 7ED6                        00            .byte	0
30635                                           ! 4555                            0,
30636 7ED7                        00            .byte	0
30637                                           ! 4556                                 0,
30638 7ED8                        00            .byte	0
30639                                           ! 4557                          0,
30640 7ED9                      0000            .word	0
30641 7EDB                      0000            .word	0
30642                                           ! 4558 } },
30643                                           ! 4559 { 0x0103,
30644 7EDD                      0103            .word	$103
30645                                           ! 4560 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30646 7EDF                      009B            .word	$9B
30647                                           ! 4561                           0x01 | 0x02 | 0x04,
30648 7EE1                        07            .byte	7
30649                                           ! 4562                           0,
30650 7EE2                        00            .byte	0
30651                                           ! 4563                           64,
30652 7EE3                      0040            .word	$40
30653                                           ! 4564                    64,
30654 7EE5                      0040            .word	$40
30655                                           ! 4565                        0xA000,
30656 7EE7                      A000            .word	$A000
30657                                           ! 4566                        0x0000,
30658 7EE9                      0000            .word	0
30659                                           ! 4567                       0,
30660 7EEB                      0000            .word	0
30661 7EED                      0000            .word	0
30662                                           ! 4568                             800,
30663 7EEF                      0320            .word	$320
30664                                           ! 4569                        800,
30665 7EF1                      0320            .word	$320
30666                                           ! 4570                        600,
30667 7EF3                      0258            .word	$258
30668                                           ! 4571                      8,
30669 7EF5                        08            .byte	8
30670                                           ! 4572                      16,
30671 7EF6                        10            .byte	$10
30672                                           ! 4573                           1,
30673 7EF7                        01            .byte	1
30674                                           ! 4574                         8,
30675 7EF8                        08            .byte	8
30676                                           ! 4575                          8,
30677 7EF9                        08            .byte	8
30678                                           ! 4576                        0x04,
30679 7EFA                        04            .byte	4
30680                                           ! 4577                     0,
30681 7EFB                        00            .byte	0
30682                                           ! 4578                               33,
30683 7EFC                        21            .byte	$21
30684                                           ! 4579                          0,
30685 7EFD                        00            .byte	0
30686                                           ! 4580                        0,
30687 7EFE                        00            .byte	0
30688                                           ! 4581                             0,
30689 7EFF                        00            .byte	0
30690                                           ! 4582                          0,
30691 7F00                        00            .byte	0
30692                                           ! 4583                               0,
30693 7F01                        00            .byte	0
30694                                           ! 4584                         0,
30695 7F02                        00            .byte	0
30696                                           ! 4585                              0,
30697 7F03                        00            .byte	0
30698                                           ! 4586                         0,
30699 7F04                        00            .byte	0
30700                                           ! 4587                              0,
30701 7F05                        00            .byte	0
30702                                           ! 4588                                0,
30703 7F06                        00            .byte	0
30704                                           ! 4589                        0xE0000000,
30705 7F07                      0000            .word	0
30706 7F09                      E000            .word	$E000
30707                                           ! 4590                               0,
30708                                           ! 4590 
30709 7F0B                      0000            .word	0
30710 7F0D                      0000            .word	0
30711                                           ! 4591                             0,
30712 7F0F                      0000            .word	0
30713                                           ! 4592                                800,
30714 7F11                      0320            .word	$320
30715                                           ! 4593                             0,
30716 7F13                        00            .byte	0
30717                                           ! 4594                             0,
30718 7F14                        00            .byte	0
30719                                           ! 4595                           0,
30720 7F15                        00            .byte	0
30721                                           ! 4596                                0,
30722 7F16                        00            .byte	0
30723                                           ! 4597                             0,
30724 7F17                        00            .byte	0
30725                                           ! 4598                                  0,
30726 7F18                        00            .byte	0
30727                                           ! 4599                            0,
30728 7F19                        00            .byte	0
30729                                           ! 4600                                 0,
30730 7F1A                        00            .byte	0
30731                                           ! 4601                            0,
30732 7F1B                        00            .byte	0
30733                                           ! 4602                                 0,
30734 7F1C                        00            .byte	0
30735                                           ! 4603                          0,
30736 7F1D                      0000            .word	0
30737 7F1F                      0000            .word	0
30738                                           ! 4604 } },
30739                                           ! 4605 { 0x0104,
30740 7F21                      0104            .word	$104
30741                                           ! 4606 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30742 7F23                      001F            .word	$1F
30743                                           ! 4607                           0x01 | 0x02 | 0x04,
30744 7F25                        07            .byte	7
30745                                           ! 4608                           0,
30746 7F26                        00            .byte	0
30747                                           ! 4609                           64,
30748 7F27                      0040            .word	$40
30749                                           ! 4610                    64,
30750 7F29                      0040            .word	$40
30751                                           ! 4611                        0xA000,
30752 7F2B                      A000            .word	$A000
30753                                           ! 4612                        0x0000,
30754 7F2D                      0000            .word	0
30755                                           ! 4613                       0,
30756 7F2F                      0000            .word	0
30757 7F31                      0000            .word	0
30758                                           ! 4614                             128,
30759 7F33                      0080            .word	$80
30760                                           ! 4615                        1024,
30761 7F35                      0400            .word	$400
30762                                           ! 4616                        768,
30763 7F37                      0300            .word	$300
30764                                           ! 4617                      8,
30765 7F39                        08            .byte	8
30766                                           ! 4618                      16,
30767 7F3A                        10            .byte	$10
30768                                           ! 4619                           4,
30769 7F3B                        04            .byte	4
30770                                           ! 4620                         4,
30771 7F3C                        04            .byte	4
30772                                           ! 4621                          2,
30773 7F3D                        02            .byte	2
30774                                           ! 4622                        0x03,
30775 7F3E                        03            .byte	3
30776                                           ! 4623                     0,
30777 7F3F                        00            .byte	0
30778                                           ! 4624                               41,
30779 7F40                        29            .byte	$29
30780                                           ! 4625                          0,
30781 7F41                        00            .byte	0
30782                                           ! 4626                        0,
30783 7F42                        00            .byte	0
30784                                           ! 4627                             0,
30785 7F43                        00            .byte	0
30786                                           ! 4628                          0,
30787 7F44                        00            .byte	0
30788                                           ! 4629                               0,
30789 7F45                        00            .byte	0
30790                                           ! 4630                         0,
30791 7F46                        00            .byte	0
30792                                           ! 4631                              0,
30793 7F47                        00            .byte	0
30794                                           ! 4632                         0,
30795 7F48                        00            .byte	0
30796                                           ! 4633                              0,
30797 7F49                        00            .byte	0
30798                                           ! 4634                                0,
30799 7F4A                        00            .byte	0
30800                                           ! 4635                        0,
30801 7F4B                      0000            .word	0
30802 7F4D                      0000            .word	0
30803                                           ! 4636                               0,
30804 7F4F                      0000            .word	0
30805 7F51                      0000            .word	0
30806                                           ! 4637                             0,
30807 7F53                      0000            .word	0
30808                                           ! 4638                                128,
30809 7F55                      0080            .word	$80
30810                                           ! 4639                             0,
30811 7F57                        00            .byte	0
30812                                           ! 4640                             0,
30813 7F58                        00            .byte	0
30814                                           ! 4641                           0,
30815 7F59                        00            .byte	0
30816                                           ! 4642                                0,
30817 7F5A                        00            .byte	0
30818                                           ! 4643                             0,
30819 7F5B                        00            .byte	0
30820                                           ! 4644                                  0,
30821 7F5C                        00            .byte	0
30822                                           ! 4645                            0,
30823 7F5D                        00            .byte	0
30824                                           ! 4646                                 0,
30825 7F5E                        00            .byte	0
30826                                           ! 4647                            0,
30827 7F5F                        00            .byte	0
30828                                           ! 4648                                 0,
30829 7F60                        00            .byte	0
30830                                           ! 4649                          0,
30831 7F61                      0000            .word	0
30832 7F63                      0000            .word	0
30833                                           ! 4650 } },
30834                                           ! 4651 { 0x0105,
30835 7F65                      0105            .word	$105
30836                                           ! 4652 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30837 7F67                      009B            .word	$9B
30838                                           ! 4653                           0x01 | 0x02 | 0x04,
30839 7F69                        07            .byte	7
30840                                           ! 4654                           0,
30841 7F6A                        00            .byte	0
30842                                           ! 4655                           64,
30843 7F6B                      0040            .word	$40
30844                                           ! 4656                    64,
30845 7F6D                      0040            .word	$40
30846                                           ! 4657                        0xA000,
30847 7F6F                      A000            .word	$A000
30848                                           ! 4658                        0x0000,
30849 7F71                      0000            .word	0
30850                                           ! 4659                     
30851                                           ! 4659   0,
30852 7F73                      0000            .word	0
30853 7F75                      0000            .word	0
30854                                           ! 4660                             1024,
30855 7F77                      0400            .word	$400
30856                                           ! 4661                        1024,
30857 7F79                      0400            .word	$400
30858                                           ! 4662                        768,
30859 7F7B                      0300            .word	$300
30860                                           ! 4663                      8,
30861 7F7D                        08            .byte	8
30862                                           ! 4664                      16,
30863 7F7E                        10            .byte	$10
30864                                           ! 4665                           1,
30865 7F7F                        01            .byte	1
30866                                           ! 4666                         8,
30867 7F80                        08            .byte	8
30868                                           ! 4667                          12,
30869 7F81                        0C            .byte	$C
30870                                           ! 4668                        0x04,
30871 7F82                        04            .byte	4
30872                                           ! 4669                     0,
30873 7F83                        00            .byte	0
30874                                           ! 4670                               20,
30875 7F84                        14            .byte	$14
30876                                           ! 4671                          0,
30877 7F85                        00            .byte	0
30878                                           ! 4672                        0,
30879 7F86                        00            .byte	0
30880                                           ! 4673                             0,
30881 7F87                        00            .byte	0
30882                                           ! 4674                          0,
30883 7F88                        00            .byte	0
30884                                           ! 4675                               0,
30885 7F89                        00            .byte	0
30886                                           ! 4676                         0,
30887 7F8A                        00            .byte	0
30888                                           ! 4677                              0,
30889 7F8B                        00            .byte	0
30890                                           ! 4678                         0,
30891 7F8C                        00            .byte	0
30892                                           ! 4679                              0,
30893 7F8D                        00            .byte	0
30894                                           ! 4680                                0,
30895 7F8E                        00            .byte	0
30896                                           ! 4681                        0xE0000000,
30897 7F8F                      0000            .word	0
30898 7F91                      E000            .word	$E000
30899                                           ! 4682                               0,
30900 7F93                      0000            .word	0
30901 7F95                      0000            .word	0
30902                                           ! 4683                             0,
30903 7F97                      0000            .word	0
30904                                           ! 4684                                1024,
30905 7F99                      0400            .word	$400
30906                                           ! 4685                             0,
30907 7F9B                        00            .byte	0
30908                                           ! 4686                             0,
30909 7F9C                        00            .byte	0
30910                                           ! 4687                           0,
30911 7F9D                        00            .byte	0
30912                                           ! 4688                                0,
30913 7F9E                        00            .byte	0
30914                                           ! 4689                             0,
30915 7F9F                        00            .byte	0
30916                                           ! 4690                                  0,
30917 7FA0                        00            .byte	0
30918                                           ! 4691                            0,
30919 7FA1                        00            .byte	0
30920                                           ! 4692                                 0,
30921 7FA2                        00            .byte	0
30922                                           ! 4693                            0,
30923 7FA3                        00            .byte	0
30924                                           ! 4694                                 0,
30925 7FA4                        00            .byte	0
30926                                           ! 4695                          0,
30927 7FA5                      0000            .word	0
30928 7FA7                      0000            .word	0
30929                                           ! 4696 } },
30930                                           ! 4697 { 0x0106,
30931 7FA9                      0106            .word	$106
30932                                           ! 4698 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30933 7FAB                      001F            .word	$1F
30934                                           ! 4699                           0x01 | 0x02 | 0x04,
30935 7FAD                        07            .byte	7
30936                                           ! 4700                           0,
30937 7FAE                        00            .byte	0
30938                                           ! 4701                           64,
30939 7FAF                      0040            .word	$40
30940                                           ! 4702                    64,
30941 7FB1                      0040            .word	$40
30942                                           ! 4703                        0xA000,
30943 7FB3                      A000            .word	$A000
30944                                           ! 4704                        0x0000,
30945 7FB5                      0000            .word	0
30946                                           ! 4705                       0,
30947 7FB7                      0000            .word	0
30948 7FB9                      0000            .word	0
30949                                           ! 4706                             160,
30950 7FBB                      00A0            .word	$A0
30951                                           ! 4707                        1280,
30952 7FBD                      0500            .word	$500
30953                                           ! 4708                        1024,
30954 7FBF                      0400            .word	$400
30955                                           ! 4709                      8,
30956 7FC1                        08            .byte	8
30957                                           ! 4710                      16,
30958 7FC2                        10            .byte	$10
30959                                           ! 4711                           4,
30960 7FC3                        04            .byte	4
30961                                           ! 4712                         4,
30962 7FC4                        04            .byte	4
30963                                           ! 4713                          3,
30964 7FC5                        03            .byte	3
30965                                           ! 4714                        0x03,
30966 7FC6                        03            .byte	3
30967                                           ! 4715                     0,
30968 7FC7                        00            .byte	0
30969                                           ! 4716                               24,
30970 7FC8                        18            .byte	$18
30971                                           ! 4717                          0,
30972 7FC9                        00            .byte	0
30973                                           ! 4718                        0,
30974 7FCA                        00            .byte	0
30975                                           ! 4719                             0,
30976 7FCB                        00            .byte	0
30977                                           ! 4720                          0,
30978 7FCC                        00            .byte	0
30979                                           ! 4721                               0,
30980 7FCD                        00            .byte	0
30981                                           ! 4722                         0,
30982 7FCE                        00            .byte	0
30983                                           ! 4723                              0,
30984 7FCF                        00            .byte	0
30985                                           ! 4724                         0,
30986 7FD0                        00            .byte	0
30987                                           ! 4725                              0,
30988 7FD1                        00            .byte	0
30989                                           ! 4726                                0,
30990 7FD2                        00            .byte	0
30991                                           ! 4727                        0,
30992 7FD3                      0000            .word	0
30993 7FD5                      0000            .word	0
30994                                           ! 4728                               0,
30995 7FD7                      0000            .word	0
30996 7FD9                      0000            .word	0
30997                                           ! 4729      
30998                                           ! 4729                        0,
30999 7FDB                      0000            .word	0
31000                                           ! 4730                                160,
31001 7FDD                      00A0            .word	$A0
31002                                           ! 4731                             0,
31003 7FDF                        00            .byte	0
31004                                           ! 4732                             0,
31005 7FE0                        00            .byte	0
31006                                           ! 4733                           0,
31007 7FE1                        00            .byte	0
31008                                           ! 4734                                0,
31009 7FE2                        00            .byte	0
31010                                           ! 4735                             0,
31011 7FE3                        00            .byte	0
31012                                           ! 4736                                  0,
31013 7FE4                        00            .byte	0
31014                                           ! 4737                            0,
31015 7FE5                        00            .byte	0
31016                                           ! 4738                                 0,
31017 7FE6                        00            .byte	0
31018                                           ! 4739                            0,
31019 7FE7                        00            .byte	0
31020                                           ! 4740                                 0,
31021 7FE8                        00            .byte	0
31022                                           ! 4741                          0,
31023 7FE9                      0000            .word	0
31024 7FEB                      0000            .word	0
31025                                           ! 4742 } },
31026                                           ! 4743 { 0x0107,
31027 7FED                      0107            .word	$107
31028                                           ! 4744 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31029 7FEF                      009B            .word	$9B
31030                                           ! 4745                           0x01 | 0x02 | 0x04,
31031 7FF1                        07            .byte	7
31032                                           ! 4746                           0,
31033 7FF2                        00            .byte	0
31034                                           ! 4747                           64,
31035 7FF3                      0040            .word	$40
31036                                           ! 4748                    64,
31037 7FF5                      0040            .word	$40
31038                                           ! 4749                        0xA000,
31039 7FF7                      A000            .word	$A000
31040                                           ! 4750                        0x0000,
31041 7FF9                      0000            .word	0
31042                                           ! 4751                       0,
31043 7FFB                      0000            .word	0
31044 7FFD                      0000            .word	0
31045                                           ! 4752                             1280,
31046 7FFF                      0500            .word	$500
31047                                           ! 4753                        1280,
31048 8001                      0500            .word	$500
31049                                           ! 4754                        1024,
31050 8003                      0400            .word	$400
31051                                           ! 4755                      8,
31052 8005                        08            .byte	8
31053                                           ! 4756                      16,
31054 8006                        10            .byte	$10
31055                                           ! 4757                           1,
31056 8007                        01            .byte	1
31057                                           ! 4758                         8,
31058 8008                        08            .byte	8
31059                                           ! 4759                          20,
31060 8009                        14            .byte	$14
31061                                           ! 4760                        0x04,
31062 800A                        04            .byte	4
31063                                           ! 4761                     0,
31064 800B                        00            .byte	0
31065                                           ! 4762                               11,
31066 800C                        0B            .byte	$B
31067                                           ! 4763                          0,
31068 800D                        00            .byte	0
31069                                           ! 4764                        0,
31070 800E                        00            .byte	0
31071                                           ! 4765                             0,
31072 800F                        00            .byte	0
31073                                           ! 4766                          0,
31074 8010                        00            .byte	0
31075                                           ! 4767                               0,
31076 8011                        00            .byte	0
31077                                           ! 4768                         0,
31078 8012                        00            .byte	0
31079                                           ! 4769                              0,
31080 8013                        00            .byte	0
31081                                           ! 4770                         0,
31082 8014                        00            .byte	0
31083                                           ! 4771                              0,
31084 8015                        00            .byte	0
31085                                           ! 4772                                0,
31086 8016                        00            .byte	0
31087                                           ! 4773                        0xE0000000,
31088 8017                      0000            .word	0
31089 8019                      E000            .word	$E000
31090                                           ! 4774                               0,
31091 801B                      0000            .word	0
31092 801D                      0000            .word	0
31093                                           ! 4775                             0,
31094 801F                      0000            .word	0
31095                                           ! 4776                                1280,
31096 8021                      0500            .word	$500
31097                                           ! 4777                             0,
31098 8023                        00            .byte	0
31099                                           ! 4778                             0,
31100 8024                        00            .byte	0
31101                                           ! 4779                           0,
31102 8025                        00            .byte	0
31103                                           ! 4780                                0,
31104 8026                        00            .byte	0
31105                                           ! 4781                             0,
31106 8027                        00            .byte	0
31107                                           ! 4782                                  0,
31108 8028                        00            .byte	0
31109                                           ! 4783                            0,
31110 8029                        00            .byte	0
31111                                           ! 4784                                 0,
31112 802A                        00            .byte	0
31113                                           ! 4785                            0,
31114 802B                        00            .byte	0
31115                                           ! 4786                                 0,
31116 802C                        00            .byte	0
31117                                           ! 4787                          0,
31118 802D                      0000            .word	0
31119 802F                      0000            .word	0
31120                                           ! 4788 } },
31121                                           ! 4789 { 0x010d,
31122 8031                      010D            .word	$10D
31123                                           ! 4790 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31124 8033                      009B            .word	$9B
31125                                           ! 4791                           0x01 | 0x02 | 0x04,
31126 8035                        07            .byte	7
31127                                           ! 4792                           0,
31128 8036                        00            .byte	0
31129                                           ! 4793                           64,
31130 8037                      0040            .word	$40
31131                                           ! 4794                    64,
31132 8039                      0040            .word	$40
31133                                           ! 4795                        0xA000,
31134 803B                      A000            .word	$A000
31135                                           ! 4796                        0x0000,
31136 803D                      0000            .word	0
31137                                           ! 4797              
31138                                           ! 4797          0,
31139 803F                      0000            .word	0
31140 8041                      0000            .word	0
31141                                           ! 4798                             640,
31142 8043                      0280            .word	$280
31143                                           ! 4799                        320,
31144 8045                      0140            .word	$140
31145                                           ! 4800                        200,
31146 8047                      00C8            .word	$C8
31147                                           ! 4801                      8,
31148 8049                        08            .byte	8
31149                                           ! 4802                      16,
31150 804A                        10            .byte	$10
31151                                           ! 4803                           1,
31152 804B                        01            .byte	1
31153                                           ! 4804                         15,
31154 804C                        0F            .byte	$F
31155                                           ! 4805                          2,
31156 804D                        02            .byte	2
31157                                           ! 4806                        0x06,
31158 804E                        06            .byte	6
31159                                           ! 4807                     0,
31160 804F                        00            .byte	0
31161                                           ! 4808                               130,
31162 8050                        82            .byte	$82
31163                                           ! 4809                          0,
31164 8051                        00            .byte	0
31165                                           ! 4810                        5,
31166 8052                        05            .byte	5
31167                                           ! 4811                             10,
31168 8053                        0A            .byte	$A
31169                                           ! 4812                          5,
31170 8054                        05            .byte	5
31171                                           ! 4813                               5,
31172 8055                        05            .byte	5
31173                                           ! 4814                         5,
31174 8056                        05            .byte	5
31175                                           ! 4815                              0,
31176 8057                        00            .byte	0
31177                                           ! 4816                         1,
31178 8058                        01            .byte	1
31179                                           ! 4817                              15,
31180 8059                        0F            .byte	$F
31181                                           ! 4818                                0,
31182 805A                        00            .byte	0
31183                                           ! 4819                        0xE0000000,
31184 805B                      0000            .word	0
31185 805D                      E000            .word	$E000
31186                                           ! 4820                               0,
31187 805F                      0000            .word	0
31188 8061                      0000            .word	0
31189                                           ! 4821                             0,
31190 8063                      0000            .word	0
31191                                           ! 4822                                640,
31192 8065                      0280            .word	$280
31193                                           ! 4823                             0,
31194 8067                        00            .byte	0
31195                                           ! 4824                             0,
31196 8068                        00            .byte	0
31197                                           ! 4825                           5,
31198 8069                        05            .byte	5
31199                                           ! 4826                                10,
31200 806A                        0A            .byte	$A
31201                                           ! 4827                             5,
31202 806B                        05            .byte	5
31203                                           ! 4828                                  5,
31204 806C                        05            .byte	5
31205                                           ! 4829                            5,
31206 806D                        05            .byte	5
31207                                           ! 4830                                 0,
31208 806E                        00            .byte	0
31209                                           ! 4831                            1,
31210 806F                        01            .byte	1
31211                                           ! 4832                                 15,
31212 8070                        0F            .byte	$F
31213                                           ! 4833                          0,
31214 8071                      0000            .word	0
31215 8073                      0000            .word	0
31216                                           ! 4834 } },
31217                                           ! 4835 { 0x010e,
31218 8075                      010E            .word	$10E
31219                                           ! 4836 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31220 8077                      009B            .word	$9B
31221                                           ! 4837                           0x01 | 0x02 | 0x04,
31222 8079                        07            .byte	7
31223                                           ! 4838                           0,
31224 807A                        00            .byte	0
31225                                           ! 4839                           64,
31226 807B                      0040            .word	$40
31227                                           ! 4840                    64,
31228 807D                      0040            .word	$40
31229                                           ! 4841                        0xA000,
31230 807F                      A000            .word	$A000
31231                                           ! 4842                        0x0000,
31232 8081                      0000            .word	0
31233                                           ! 4843                       0,
31234 8083                      0000            .word	0
31235 8085                      0000            .word	0
31236                                           ! 4844                             640,
31237 8087                      0280            .word	$280
31238                                           ! 4845                        320,
31239 8089                      0140            .word	$140
31240                                           ! 4846                        200,
31241 808B                      00C8            .word	$C8
31242                                           ! 4847                      8,
31243 808D                        08            .byte	8
31244                                           ! 4848                      16,
31245 808E                        10            .byte	$10
31246                                           ! 4849                           1,
31247 808F                        01            .byte	1
31248                                           ! 4850                         16,
31249 8090                        10            .byte	$10
31250                                           ! 4851                          2,
31251 8091                        02            .byte	2
31252                                           ! 4852                        0x06,
31253 8092                        06            .byte	6
31254                                           ! 4853                     0,
31255 8093                        00            .byte	0
31256                                           ! 4854                               130,
31257 8094                        82            .byte	$82
31258                                           ! 4855                          0,
31259 8095                        00            .byte	0
31260                                           ! 4856                        5,
31261 8096                        05            .byte	5
31262                                           ! 4857                             11,
31263 8097                        0B            .byte	$B
31264                                           ! 4858                          6,
31265 8098                        06            .byte	6
31266                                           ! 4859                               5,
31267 8099                        05            .byte	5
31268                                           ! 4860                         5,
31269 809A                        05            .byte	5
31270                                           ! 4861                              0,
31271 809B                        00            .byte	0
31272                                           ! 4862                         0,
31273 809C                        00            .byte	0
31274                                           ! 4863                              0,
31275 809D                        00            .byte	0
31276                                           ! 4864                                0,
31277 809E                        00            .byte	0
31278                                           ! 4865                        0xE0000000,
31279 809F                      0000            .word	0
31280 80A1                      E000            .word	$E000
31281                                           ! 4866                    
31282                                           ! 4866            0,
31283 80A3                      0000            .word	0
31284 80A5                      0000            .word	0
31285                                           ! 4867                             0,
31286 80A7                      0000            .word	0
31287                                           ! 4868                                640,
31288 80A9                      0280            .word	$280
31289                                           ! 4869                             0,
31290 80AB                        00            .byte	0
31291                                           ! 4870                             0,
31292 80AC                        00            .byte	0
31293                                           ! 4871                           5,
31294 80AD                        05            .byte	5
31295                                           ! 4872                                11,
31296 80AE                        0B            .byte	$B
31297                                           ! 4873                             6,
31298 80AF                        06            .byte	6
31299                                           ! 4874                                  5,
31300 80B0                        05            .byte	5
31301                                           ! 4875                            5,
31302 80B1                        05            .byte	5
31303                                           ! 4876                                 0,
31304 80B2                        00            .byte	0
31305                                           ! 4877                            0,
31306 80B3                        00            .byte	0
31307                                           ! 4878                                 0,
31308 80B4                        00            .byte	0
31309                                           ! 4879                          0,
31310 80B5                      0000            .word	0
31311 80B7                      0000            .word	0
31312                                           ! 4880 } },
31313                                           ! 4881 { 0x010f,
31314 80B9                      010F            .word	$10F
31315                                           ! 4882 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31316 80BB                      009B            .word	$9B
31317                                           ! 4883                           0x01 | 0x02 | 0x04,
31318 80BD                        07            .byte	7
31319                                           ! 4884                           0,
31320 80BE                        00            .byte	0
31321                                           ! 4885                           64,
31322 80BF                      0040            .word	$40
31323                                           ! 4886                    64,
31324 80C1                      0040            .word	$40
31325                                           ! 4887                        0xA000,
31326 80C3                      A000            .word	$A000
31327                                           ! 4888                        0x0000,
31328 80C5                      0000            .word	0
31329                                           ! 4889                       0,
31330 80C7                      0000            .word	0
31331 80C9                      0000            .word	0
31332                                           ! 4890                             960,
31333 80CB                      03C0            .word	$3C0
31334                                           ! 4891                        320,
31335 80CD                      0140            .word	$140
31336                                           ! 4892                        200,
31337 80CF                      00C8            .word	$C8
31338                                           ! 4893                      8,
31339 80D1                        08            .byte	8
31340                                           ! 4894                      16,
31341 80D2                        10            .byte	$10
31342                                           ! 4895                           1,
31343 80D3                        01            .byte	1
31344                                           ! 4896                         24,
31345 80D4                        18            .byte	$18
31346                                           ! 4897                          3,
31347 80D5                        03            .byte	3
31348                                           ! 4898                        0x06,
31349 80D6                        06            .byte	6
31350                                           ! 4899                     0,
31351 80D7                        00            .byte	0
31352                                           ! 4900                               86,
31353 80D8                        56            .byte	$56
31354                                           ! 4901                          0,
31355 80D9                        00            .byte	0
31356                                           ! 4902                        8,
31357 80DA                        08            .byte	8
31358                                           ! 4903                             16,
31359 80DB                        10            .byte	$10
31360                                           ! 4904                          8,
31361 80DC                        08            .byte	8
31362                                           ! 4905                               8,
31363 80DD                        08            .byte	8
31364                                           ! 4906                         8,
31365 80DE                        08            .byte	8
31366                                           ! 4907                              0,
31367 80DF                        00            .byte	0
31368                                           ! 4908                         0,
31369 80E0                        00            .byte	0
31370                                           ! 4909                              0,
31371 80E1                        00            .byte	0
31372                                           ! 4910                                0,
31373 80E2                        00            .byte	0
31374                                           ! 4911                        0xE0000000,
31375 80E3                      0000            .word	0
31376 80E5                      E000            .word	$E000
31377                                           ! 4912                               0,
31378 80E7                      0000            .word	0
31379 80E9                      0000            .word	0
31380                                           ! 4913                             0,
31381 80EB                      0000            .word	0
31382                                           ! 4914                                960,
31383 80ED                      03C0            .word	$3C0
31384                                           ! 4915                             0,
31385 80EF                        00            .byte	0
31386                                           ! 4916                             0,
31387 80F0                        00            .byte	0
31388                                           ! 4917                           8,
31389 80F1                        08            .byte	8
31390                                           ! 4918                                16,
31391 80F2                        10            .byte	$10
31392                                           ! 4919                             8,
31393 80F3                        08            .byte	8
31394                                           ! 4920                                  8,
31395 80F4                        08            .byte	8
31396                                           ! 4921                            8,
31397 80F5                        08            .byte	8
31398                                           ! 4922                                 0,
31399 80F6                        00            .byte	0
31400                                           ! 4923                            0,
31401 80F7                        00            .byte	0
31402                                           ! 4924                                 0,
31403 80F8                        00            .byte	0
31404                                           ! 4925                          0,
31405 80F9                      0000            .word	0
31406 80FB                      0000            .word	0
31407                                           ! 4926 } },
31408                                           ! 4927 { 0x0110,
31409 80FD                      0110            .word	$110
31410                                           ! 4928 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31411 80FF                      009B            .word	$9B
31412                                           ! 4929                           0x01 | 0x02 | 0x04,
31413 8101                        07            .byte	7
31414                                           ! 4930                           0,
31415 8102                        00            .byte	0
31416                                           ! 4931                           64,
31417 8103                      0040            .word	$40
31418                                           ! 4932                    64,
31419 8105                      0040            .word	$40
31420                                           ! 4933                        0xA000,
31421 8107                      A000            .word	$A000
31422                                           ! 4934                        0x0
31423                                           ! 4934 000,
31424 8109                      0000            .word	0
31425                                           ! 4935                       0,
31426 810B                      0000            .word	0
31427 810D                      0000            .word	0
31428                                           ! 4936                             1280,
31429 810F                      0500            .word	$500
31430                                           ! 4937                        640,
31431 8111                      0280            .word	$280
31432                                           ! 4938                        480,
31433 8113                      01E0            .word	$1E0
31434                                           ! 4939                      8,
31435 8115                        08            .byte	8
31436                                           ! 4940                      16,
31437 8116                        10            .byte	$10
31438                                           ! 4941                           1,
31439 8117                        01            .byte	1
31440                                           ! 4942                         15,
31441 8118                        0F            .byte	$F
31442                                           ! 4943                          10,
31443 8119                        0A            .byte	$A
31444                                           ! 4944                        0x06,
31445 811A                        06            .byte	6
31446                                           ! 4945                     0,
31447 811B                        00            .byte	0
31448                                           ! 4946                               26,
31449 811C                        1A            .byte	$1A
31450                                           ! 4947                          0,
31451 811D                        00            .byte	0
31452                                           ! 4948                        5,
31453 811E                        05            .byte	5
31454                                           ! 4949                             10,
31455 811F                        0A            .byte	$A
31456                                           ! 4950                          5,
31457 8120                        05            .byte	5
31458                                           ! 4951                               5,
31459 8121                        05            .byte	5
31460                                           ! 4952                         5,
31461 8122                        05            .byte	5
31462                                           ! 4953                              0,
31463 8123                        00            .byte	0
31464                                           ! 4954                         1,
31465 8124                        01            .byte	1
31466                                           ! 4955                              15,
31467 8125                        0F            .byte	$F
31468                                           ! 4956                                0,
31469 8126                        00            .byte	0
31470                                           ! 4957                        0xE0000000,
31471 8127                      0000            .word	0
31472 8129                      E000            .word	$E000
31473                                           ! 4958                               0,
31474 812B                      0000            .word	0
31475 812D                      0000            .word	0
31476                                           ! 4959                             0,
31477 812F                      0000            .word	0
31478                                           ! 4960                                1280,
31479 8131                      0500            .word	$500
31480                                           ! 4961                             0,
31481 8133                        00            .byte	0
31482                                           ! 4962                             0,
31483 8134                        00            .byte	0
31484                                           ! 4963                           5,
31485 8135                        05            .byte	5
31486                                           ! 4964                                10,
31487 8136                        0A            .byte	$A
31488                                           ! 4965                             5,
31489 8137                        05            .byte	5
31490                                           ! 4966                                  5,
31491 8138                        05            .byte	5
31492                                           ! 4967                            5,
31493 8139                        05            .byte	5
31494                                           ! 4968                                 0,
31495 813A                        00            .byte	0
31496                                           ! 4969                            1,
31497 813B                        01            .byte	1
31498                                           ! 4970                                 15,
31499 813C                        0F            .byte	$F
31500                                           ! 4971                          0,
31501 813D                      0000            .word	0
31502 813F                      0000            .word	0
31503                                           ! 4972 } },
31504                                           ! 4973 { 0x0111,
31505 8141                      0111            .word	$111
31506                                           ! 4974 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31507 8143                      009B            .word	$9B
31508                                           ! 4975                           0x01 | 0x02 | 0x04,
31509 8145                        07            .byte	7
31510                                           ! 4976                           0,
31511 8146                        00            .byte	0
31512                                           ! 4977                           64,
31513 8147                      0040            .word	$40
31514                                           ! 4978                    64,
31515 8149                      0040            .word	$40
31516                                           ! 4979                        0xA000,
31517 814B                      A000            .word	$A000
31518                                           ! 4980                        0x0000,
31519 814D                      0000            .word	0
31520                                           ! 4981                       0,
31521 814F                      0000            .word	0
31522 8151                      0000            .word	0
31523                                           ! 4982                             1280,
31524 8153                      0500            .word	$500
31525                                           ! 4983                        640,
31526 8155                      0280            .word	$280
31527                                           ! 4984                        480,
31528 8157                      01E0            .word	$1E0
31529                                           ! 4985                      8,
31530 8159                        08            .byte	8
31531                                           ! 4986                      16,
31532 815A                        10            .byte	$10
31533                                           ! 4987                           1,
31534 815B                        01            .byte	1
31535                                           ! 4988                         16,
31536 815C                        10            .byte	$10
31537                                           ! 4989                          10,
31538 815D                        0A            .byte	$A
31539                                           ! 4990                        0x06,
31540 815E                        06            .byte	6
31541                                           ! 4991                     0,
31542 815F                        00            .byte	0
31543                                           ! 4992                               26,
31544 8160                        1A            .byte	$1A
31545                                           ! 4993                          0,
31546 8161                        00            .byte	0
31547                                           ! 4994                        5,
31548 8162                        05            .byte	5
31549                                           ! 4995                             11,
31550 8163                        0B            .byte	$B
31551                                           ! 4996                          6,
31552 8164                        06            .byte	6
31553                                           ! 4997                               5,
31554 8165                        05            .byte	5
31555                                           ! 4998                         5,
31556 8166                        05            .byte	5
31557                                           ! 4999                              0,
31558 8167                        00            .byte	0
31559                                           ! 5000                         0,
31560 8168                        00            .byte	0
31561                                           ! 5001                              0,
31562 8169                        00            .byte	0
31563                                           ! 5002                                0,
31564 816A                        00            .byte	0
31565                                           ! 5003                        0xE0000000
31566                                           ! 5003 ,
31567 816B                      0000            .word	0
31568 816D                      E000            .word	$E000
31569                                           ! 5004                               0,
31570 816F                      0000            .word	0
31571 8171                      0000            .word	0
31572                                           ! 5005                             0,
31573 8173                      0000            .word	0
31574                                           ! 5006                                1280,
31575 8175                      0500            .word	$500
31576                                           ! 5007                             0,
31577 8177                        00            .byte	0
31578                                           ! 5008                             0,
31579 8178                        00            .byte	0
31580                                           ! 5009                           5,
31581 8179                        05            .byte	5
31582                                           ! 5010                                11,
31583 817A                        0B            .byte	$B
31584                                           ! 5011                             6,
31585 817B                        06            .byte	6
31586                                           ! 5012                                  5,
31587 817C                        05            .byte	5
31588                                           ! 5013                            5,
31589 817D                        05            .byte	5
31590                                           ! 5014                                 0,
31591 817E                        00            .byte	0
31592                                           ! 5015                            0,
31593 817F                        00            .byte	0
31594                                           ! 5016                                 0,
31595 8180                        00            .byte	0
31596                                           ! 5017                          0,
31597 8181                      0000            .word	0
31598 8183                      0000            .word	0
31599                                           ! 5018 } },
31600                                           ! 5019 { 0x0112,
31601 8185                      0112            .word	$112
31602                                           ! 5020 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31603 8187                      009B            .word	$9B
31604                                           ! 5021                           0x01 | 0x02 | 0x04,
31605 8189                        07            .byte	7
31606                                           ! 5022                           0,
31607 818A                        00            .byte	0
31608                                           ! 5023                           64,
31609 818B                      0040            .word	$40
31610                                           ! 5024                    64,
31611 818D                      0040            .word	$40
31612                                           ! 5025                        0xA000,
31613 818F                      A000            .word	$A000
31614                                           ! 5026                        0x0000,
31615 8191                      0000            .word	0
31616                                           ! 5027                       0,
31617 8193                      0000            .word	0
31618 8195                      0000            .word	0
31619                                           ! 5028                             1920,
31620 8197                      0780            .word	$780
31621                                           ! 5029                        640,
31622 8199                      0280            .word	$280
31623                                           ! 5030                        480,
31624 819B                      01E0            .word	$1E0
31625                                           ! 5031                      8,
31626 819D                        08            .byte	8
31627                                           ! 5032                      16,
31628 819E                        10            .byte	$10
31629                                           ! 5033                           1,
31630 819F                        01            .byte	1
31631                                           ! 5034                         24,
31632 81A0                        18            .byte	$18
31633                                           ! 5035                          15,
31634 81A1                        0F            .byte	$F
31635                                           ! 5036                        0x06,
31636 81A2                        06            .byte	6
31637                                           ! 5037                     0,
31638 81A3                        00            .byte	0
31639                                           ! 5038                               17,
31640 81A4                        11            .byte	$11
31641                                           ! 5039                          0,
31642 81A5                        00            .byte	0
31643                                           ! 5040                        8,
31644 81A6                        08            .byte	8
31645                                           ! 5041                             16,
31646 81A7                        10            .byte	$10
31647                                           ! 5042                          8,
31648 81A8                        08            .byte	8
31649                                           ! 5043                               8,
31650 81A9                        08            .byte	8
31651                                           ! 5044                         8,
31652 81AA                        08            .byte	8
31653                                           ! 5045                              0,
31654 81AB                        00            .byte	0
31655                                           ! 5046                         0,
31656 81AC                        00            .byte	0
31657                                           ! 5047                              0,
31658 81AD                        00            .byte	0
31659                                           ! 5048                                0,
31660 81AE                        00            .byte	0
31661                                           ! 5049                        0xE0000000,
31662 81AF                      0000            .word	0
31663 81B1                      E000            .word	$E000
31664                                           ! 5050                               0,
31665 81B3                      0000            .word	0
31666 81B5                      0000            .word	0
31667                                           ! 5051                             0,
31668 81B7                      0000            .word	0
31669                                           ! 5052                                1920,
31670 81B9                      0780            .word	$780
31671                                           ! 5053                             0,
31672 81BB                        00            .byte	0
31673                                           ! 5054                             0,
31674 81BC                        00            .byte	0
31675                                           ! 5055                           8,
31676 81BD                        08            .byte	8
31677                                           ! 5056                                16,
31678 81BE                        10            .byte	$10
31679                                           ! 5057                             8,
31680 81BF                        08            .byte	8
31681                                           ! 5058                                  8,
31682 81C0                        08            .byte	8
31683                                           ! 5059                            8,
31684 81C1                        08            .byte	8
31685                                           ! 5060                                 0,
31686 81C2                        00            .byte	0
31687                                           ! 5061                            0,
31688 81C3                        00            .byte	0
31689                                           ! 5062                                 0,
31690 81C4                        00            .byte	0
31691                                           ! 5063                          0,
31692 81C5                      0000            .word	0
31693 81C7                      0000            .word	0
31694                                           ! 5064 } },
31695                                           ! 5065 { 0x0113,
31696 81C9                      0113            .word	$113
31697                                           ! 5066 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31698 81CB                      009B            .word	$9B
31699                                           ! 5067                           0x01 | 0x02 | 0x04,
31700 81CD                        07            .byte	7
31701                                           ! 5068                           0,
31702 81CE                        00            .byte	0
31703                                           ! 5069                           64,
31704 81CF                      0040            .word	$40
31705                                           ! 5070                    64,
31706 81D1                      0040            .word	$40
31707                                           ! 5071                        0xA000,
31708 81D3                      A000            .word	$A000
31709                                           ! 5072  
31710                                           ! 5072                       0x0000,
31711 81D5                      0000            .word	0
31712                                           ! 5073                       0,
31713 81D7                      0000            .word	0
31714 81D9                      0000            .word	0
31715                                           ! 5074                             1600,
31716 81DB                      0640            .word	$640
31717                                           ! 5075                        800,
31718 81DD                      0320            .word	$320
31719                                           ! 5076                        600,
31720 81DF                      0258            .word	$258
31721                                           ! 5077                      8,
31722 81E1                        08            .byte	8
31723                                           ! 5078                      16,
31724 81E2                        10            .byte	$10
31725                                           ! 5079                           1,
31726 81E3                        01            .byte	1
31727                                           ! 5080                         15,
31728 81E4                        0F            .byte	$F
31729                                           ! 5081                          15,
31730 81E5                        0F            .byte	$F
31731                                           ! 5082                        0x06,
31732 81E6                        06            .byte	6
31733                                           ! 5083                     0,
31734 81E7                        00            .byte	0
31735                                           ! 5084                               16,
31736 81E8                        10            .byte	$10
31737                                           ! 5085                          0,
31738 81E9                        00            .byte	0
31739                                           ! 5086                        5,
31740 81EA                        05            .byte	5
31741                                           ! 5087                             10,
31742 81EB                        0A            .byte	$A
31743                                           ! 5088                          5,
31744 81EC                        05            .byte	5
31745                                           ! 5089                               5,
31746 81ED                        05            .byte	5
31747                                           ! 5090                         5,
31748 81EE                        05            .byte	5
31749                                           ! 5091                              0,
31750 81EF                        00            .byte	0
31751                                           ! 5092                         1,
31752 81F0                        01            .byte	1
31753                                           ! 5093                              15,
31754 81F1                        0F            .byte	$F
31755                                           ! 5094                                0,
31756 81F2                        00            .byte	0
31757                                           ! 5095                        0xE0000000,
31758 81F3                      0000            .word	0
31759 81F5                      E000            .word	$E000
31760                                           ! 5096                               0,
31761 81F7                      0000            .word	0
31762 81F9                      0000            .word	0
31763                                           ! 5097                             0,
31764 81FB                      0000            .word	0
31765                                           ! 5098                                1600,
31766 81FD                      0640            .word	$640
31767                                           ! 5099                             0,
31768 81FF                        00            .byte	0
31769                                           ! 5100                             0,
31770 8200                        00            .byte	0
31771                                           ! 5101                           5,
31772 8201                        05            .byte	5
31773                                           ! 5102                                10,
31774 8202                        0A            .byte	$A
31775                                           ! 5103                             5,
31776 8203                        05            .byte	5
31777                                           ! 5104                                  5,
31778 8204                        05            .byte	5
31779                                           ! 5105                            5,
31780 8205                        05            .byte	5
31781                                           ! 5106                                 0,
31782 8206                        00            .byte	0
31783                                           ! 5107                            1,
31784 8207                        01            .byte	1
31785                                           ! 5108                                 15,
31786 8208                        0F            .byte	$F
31787                                           ! 5109                          0,
31788 8209                      0000            .word	0
31789 820B                      0000            .word	0
31790                                           ! 5110 } },
31791                                           ! 5111 { 0x0114,
31792 820D                      0114            .word	$114
31793                                           ! 5112 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31794 820F                      009B            .word	$9B
31795                                           ! 5113                           0x01 | 0x02 | 0x04,
31796 8211                        07            .byte	7
31797                                           ! 5114                           0,
31798 8212                        00            .byte	0
31799                                           ! 5115                           64,
31800 8213                      0040            .word	$40
31801                                           ! 5116                    64,
31802 8215                      0040            .word	$40
31803                                           ! 5117                        0xA000,
31804 8217                      A000            .word	$A000
31805                                           ! 5118                        0x0000,
31806 8219                      0000            .word	0
31807                                           ! 5119                       0,
31808 821B                      0000            .word	0
31809 821D                      0000            .word	0
31810                                           ! 5120                             1600,
31811 821F                      0640            .word	$640
31812                                           ! 5121                        800,
31813 8221                      0320            .word	$320
31814                                           ! 5122                        600,
31815 8223                      0258            .word	$258
31816                                           ! 5123                      8,
31817 8225                        08            .byte	8
31818                                           ! 5124                      16,
31819 8226                        10            .byte	$10
31820                                           ! 5125                           1,
31821 8227                        01            .byte	1
31822                                           ! 5126                         16,
31823 8228                        10            .byte	$10
31824                                           ! 5127                          15,
31825 8229                        0F            .byte	$F
31826                                           ! 5128                        0x06,
31827 822A                        06            .byte	6
31828                                           ! 5129                     0,
31829 822B                        00            .byte	0
31830                                           ! 5130                               16,
31831 822C                        10            .byte	$10
31832                                           ! 5131                          0,
31833 822D                        00            .byte	0
31834                                           ! 5132                        5,
31835 822E                        05            .byte	5
31836                                           ! 5133                             11,
31837 822F                        0B            .byte	$B
31838                                           ! 5134                          6,
31839 8230                        06            .byte	6
31840                                           ! 5135                               5,
31841 8231                        05            .byte	5
31842                                           ! 5136                         5,
31843 8232                        05            .byte	5
31844                                           ! 5137                              0,
31845 8233                        00            .byte	0
31846                                           ! 5138                         0,
31847 8234                        00            .byte	0
31848                                           ! 5139                              0,
31849 8235                        00            .byte	0
31850                                           ! 5140                                0,
31851 8236                        00            .byte	0
31852                                           ! 5141         
31853                                           ! 5141                0xE0000000,
31854 8237                      0000            .word	0
31855 8239                      E000            .word	$E000
31856                                           ! 5142                               0,
31857 823B                      0000            .word	0
31858 823D                      0000            .word	0
31859                                           ! 5143                             0,
31860 823F                      0000            .word	0
31861                                           ! 5144                                1600,
31862 8241                      0640            .word	$640
31863                                           ! 5145                             0,
31864 8243                        00            .byte	0
31865                                           ! 5146                             0,
31866 8244                        00            .byte	0
31867                                           ! 5147                           5,
31868 8245                        05            .byte	5
31869                                           ! 5148                                11,
31870 8246                        0B            .byte	$B
31871                                           ! 5149                             6,
31872 8247                        06            .byte	6
31873                                           ! 5150                                  5,
31874 8248                        05            .byte	5
31875                                           ! 5151                            5,
31876 8249                        05            .byte	5
31877                                           ! 5152                                 0,
31878 824A                        00            .byte	0
31879                                           ! 5153                            0,
31880 824B                        00            .byte	0
31881                                           ! 5154                                 0,
31882 824C                        00            .byte	0
31883                                           ! 5155                          0,
31884 824D                      0000            .word	0
31885 824F                      0000            .word	0
31886                                           ! 5156 } },
31887                                           ! 5157 { 0x0115,
31888 8251                      0115            .word	$115
31889                                           ! 5158 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31890 8253                      009B            .word	$9B
31891                                           ! 5159                           0x01 | 0x02 | 0x04,
31892 8255                        07            .byte	7
31893                                           ! 5160                           0,
31894 8256                        00            .byte	0
31895                                           ! 5161                           64,
31896 8257                      0040            .word	$40
31897                                           ! 5162                    64,
31898 8259                      0040            .word	$40
31899                                           ! 5163                        0xA000,
31900 825B                      A000            .word	$A000
31901                                           ! 5164                        0x0000,
31902 825D                      0000            .word	0
31903                                           ! 5165                       0,
31904 825F                      0000            .word	0
31905 8261                      0000            .word	0
31906                                           ! 5166                             2400,
31907 8263                      0960            .word	$960
31908                                           ! 5167                        800,
31909 8265                      0320            .word	$320
31910                                           ! 5168                        600,
31911 8267                      0258            .word	$258
31912                                           ! 5169                      8,
31913 8269                        08            .byte	8
31914                                           ! 5170                      16,
31915 826A                        10            .byte	$10
31916                                           ! 5171                           1,
31917 826B                        01            .byte	1
31918                                           ! 5172                         24,
31919 826C                        18            .byte	$18
31920                                           ! 5173                          22,
31921 826D                        16            .byte	$16
31922                                           ! 5174                        0x06,
31923 826E                        06            .byte	6
31924                                           ! 5175                     0,
31925 826F                        00            .byte	0
31926                                           ! 5176                               10,
31927 8270                        0A            .byte	$A
31928                                           ! 5177                          0,
31929 8271                        00            .byte	0
31930                                           ! 5178                        8,
31931 8272                        08            .byte	8
31932                                           ! 5179                             16,
31933 8273                        10            .byte	$10
31934                                           ! 5180                          8,
31935 8274                        08            .byte	8
31936                                           ! 5181                               8,
31937 8275                        08            .byte	8
31938                                           ! 5182                         8,
31939 8276                        08            .byte	8
31940                                           ! 5183                              0,
31941 8277                        00            .byte	0
31942                                           ! 5184                         0,
31943 8278                        00            .byte	0
31944                                           ! 5185                              0,
31945 8279                        00            .byte	0
31946                                           ! 5186                                0,
31947 827A                        00            .byte	0
31948                                           ! 5187                        0xE0000000,
31949 827B                      0000            .word	0
31950 827D                      E000            .word	$E000
31951                                           ! 5188                               0,
31952 827F                      0000            .word	0
31953 8281                      0000            .word	0
31954                                           ! 5189                             0,
31955 8283                      0000            .word	0
31956                                           ! 5190                                2400,
31957 8285                      0960            .word	$960
31958                                           ! 5191                             0,
31959 8287                        00            .byte	0
31960                                           ! 5192                             0,
31961 8288                        00            .byte	0
31962                                           ! 5193                           8,
31963 8289                        08            .byte	8
31964                                           ! 5194                                16,
31965 828A                        10            .byte	$10
31966                                           ! 5195                             8,
31967 828B                        08            .byte	8
31968                                           ! 5196                                  8,
31969 828C                        08            .byte	8
31970                                           ! 5197                            8,
31971 828D                        08            .byte	8
31972                                           ! 5198                                 0,
31973 828E                        00            .byte	0
31974                                           ! 5199                            0,
31975 828F                        00            .byte	0
31976                                           ! 5200                                 0,
31977 8290                        00            .byte	0
31978                                           ! 5201                          0,
31979 8291                      0000            .word	0
31980 8293                      0000            .word	0
31981                                           ! 5202 } },
31982                                           ! 5203 { 0x0116,
31983 8295                      0116            .word	$116
31984                                           ! 5204 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31985 8297                      009B            .word	$9B
31986                                           ! 5205                           0x01 | 0x02 | 0x04,
31987 8299                        07            .byte	7
31988                                           ! 5206                           0,
31989 829A                        00            .byte	0
31990                                           ! 5207                           64,
31991 829B                      0040            .word	$40
31992                                           ! 5208                    64,
31993 829D                      0040            .word	$40
31994                                           ! 5209        
31995                                           ! 5209                 0xA000,
31996 829F                      A000            .word	$A000
31997                                           ! 5210                        0x0000,
31998 82A1                      0000            .word	0
31999                                           ! 5211                       0,
32000 82A3                      0000            .word	0
32001 82A5                      0000            .word	0
32002                                           ! 5212                             2048,
32003 82A7                      0800            .word	$800
32004                                           ! 5213                        1024,
32005 82A9                      0400            .word	$400
32006                                           ! 5214                        768,
32007 82AB                      0300            .word	$300
32008                                           ! 5215                      8,
32009 82AD                        08            .byte	8
32010                                           ! 5216                      16,
32011 82AE                        10            .byte	$10
32012                                           ! 5217                           1,
32013 82AF                        01            .byte	1
32014                                           ! 5218                         15,
32015 82B0                        0F            .byte	$F
32016                                           ! 5219                          24,
32017 82B1                        18            .byte	$18
32018                                           ! 5220                        0x06,
32019 82B2                        06            .byte	6
32020                                           ! 5221                     0,
32021 82B3                        00            .byte	0
32022                                           ! 5222                               9,
32023 82B4                        09            .byte	9
32024                                           ! 5223                          0,
32025 82B5                        00            .byte	0
32026                                           ! 5224                        5,
32027 82B6                        05            .byte	5
32028                                           ! 5225                             10,
32029 82B7                        0A            .byte	$A
32030                                           ! 5226                          5,
32031 82B8                        05            .byte	5
32032                                           ! 5227                               5,
32033 82B9                        05            .byte	5
32034                                           ! 5228                         5,
32035 82BA                        05            .byte	5
32036                                           ! 5229                              0,
32037 82BB                        00            .byte	0
32038                                           ! 5230                         1,
32039 82BC                        01            .byte	1
32040                                           ! 5231                              15,
32041 82BD                        0F            .byte	$F
32042                                           ! 5232                                0,
32043 82BE                        00            .byte	0
32044                                           ! 5233                        0xE0000000,
32045 82BF                      0000            .word	0
32046 82C1                      E000            .word	$E000
32047                                           ! 5234                               0,
32048 82C3                      0000            .word	0
32049 82C5                      0000            .word	0
32050                                           ! 5235                             0,
32051 82C7                      0000            .word	0
32052                                           ! 5236                                2048,
32053 82C9                      0800            .word	$800
32054                                           ! 5237                             0,
32055 82CB                        00            .byte	0
32056                                           ! 5238                             0,
32057 82CC                        00            .byte	0
32058                                           ! 5239                           5,
32059 82CD                        05            .byte	5
32060                                           ! 5240                                10,
32061 82CE                        0A            .byte	$A
32062                                           ! 5241                             5,
32063 82CF                        05            .byte	5
32064                                           ! 5242                                  5,
32065 82D0                        05            .byte	5
32066                                           ! 5243                            5,
32067 82D1                        05            .byte	5
32068                                           ! 5244                                 0,
32069 82D2                        00            .byte	0
32070                                           ! 5245                            1,
32071 82D3                        01            .byte	1
32072                                           ! 5246                                 15,
32073 82D4                        0F            .byte	$F
32074                                           ! 5247                          0,
32075 82D5                      0000            .word	0
32076 82D7                      0000            .word	0
32077                                           ! 5248 } },
32078                                           ! 5249 { 0x0117,
32079 82D9                      0117            .word	$117
32080                                           ! 5250 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32081 82DB                      009B            .word	$9B
32082                                           ! 5251                           0x01 | 0x02 | 0x04,
32083 82DD                        07            .byte	7
32084                                           ! 5252                           0,
32085 82DE                        00            .byte	0
32086                                           ! 5253                           64,
32087 82DF                      0040            .word	$40
32088                                           ! 5254                    64,
32089 82E1                      0040            .word	$40
32090                                           ! 5255                        0xA000,
32091 82E3                      A000            .word	$A000
32092                                           ! 5256                        0x0000,
32093 82E5                      0000            .word	0
32094                                           ! 5257                       0,
32095 82E7                      0000            .word	0
32096 82E9                      0000            .word	0
32097                                           ! 5258                             2048,
32098 82EB                      0800            .word	$800
32099                                           ! 5259                        1024,
32100 82ED                      0400            .word	$400
32101                                           ! 5260                        768,
32102 82EF                      0300            .word	$300
32103                                           ! 5261                      8,
32104 82F1                        08            .byte	8
32105                                           ! 5262                      16,
32106 82F2                        10            .byte	$10
32107                                           ! 5263                           1,
32108 82F3                        01            .byte	1
32109                                           ! 5264                         16,
32110 82F4                        10            .byte	$10
32111                                           ! 5265                          24,
32112 82F5                        18            .byte	$18
32113                                           ! 5266                        0x06,
32114 82F6                        06            .byte	6
32115                                           ! 5267                     0,
32116 82F7                        00            .byte	0
32117                                           ! 5268                               9,
32118 82F8                        09            .byte	9
32119                                           ! 5269                          0,
32120 82F9                        00            .byte	0
32121                                           ! 5270                        5,
32122 82FA                        05            .byte	5
32123                                           ! 5271                             11,
32124 82FB                        0B            .byte	$B
32125                                           ! 5272                          6,
32126 82FC                        06            .byte	6
32127                                           ! 5273                               5,
32128 82FD                        05            .byte	5
32129                                           ! 5274                         5,
32130 82FE                        05            .byte	5
32131                                           ! 5275                              0,
32132 82FF                        00            .byte	0
32133                                           ! 5276                         0,
32134 8300                        00            .byte	0
32135                                           ! 5277                              0,
32136 8301                        00            .byte	0
32137                                           ! 5278                  
32138                                           ! 5278               0,
32139 8302                        00            .byte	0
32140                                           ! 5279                        0xE0000000,
32141 8303                      0000            .word	0
32142 8305                      E000            .word	$E000
32143                                           ! 5280                               0,
32144 8307                      0000            .word	0
32145 8309                      0000            .word	0
32146                                           ! 5281                             0,
32147 830B                      0000            .word	0
32148                                           ! 5282                                2048,
32149 830D                      0800            .word	$800
32150                                           ! 5283                             0,
32151 830F                        00            .byte	0
32152                                           ! 5284                             0,
32153 8310                        00            .byte	0
32154                                           ! 5285                           5,
32155 8311                        05            .byte	5
32156                                           ! 5286                                11,
32157 8312                        0B            .byte	$B
32158                                           ! 5287                             6,
32159 8313                        06            .byte	6
32160                                           ! 5288                                  5,
32161 8314                        05            .byte	5
32162                                           ! 5289                            5,
32163 8315                        05            .byte	5
32164                                           ! 5290                                 0,
32165 8316                        00            .byte	0
32166                                           ! 5291                            0,
32167 8317                        00            .byte	0
32168                                           ! 5292                                 0,
32169 8318                        00            .byte	0
32170                                           ! 5293                          0,
32171 8319                      0000            .word	0
32172 831B                      0000            .word	0
32173                                           ! 5294 } },
32174                                           ! 5295 { 0x0118,
32175 831D                      0118            .word	$118
32176                                           ! 5296 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32177 831F                      009B            .word	$9B
32178                                           ! 5297                           0x01 | 0x02 | 0x04,
32179 8321                        07            .byte	7
32180                                           ! 5298                           0,
32181 8322                        00            .byte	0
32182                                           ! 5299                           64,
32183 8323                      0040            .word	$40
32184                                           ! 5300                    64,
32185 8325                      0040            .word	$40
32186                                           ! 5301                        0xA000,
32187 8327                      A000            .word	$A000
32188                                           ! 5302                        0x0000,
32189 8329                      0000            .word	0
32190                                           ! 5303                       0,
32191 832B                      0000            .word	0
32192 832D                      0000            .word	0
32193                                           ! 5304                             3072,
32194 832F                      0C00            .word	$C00
32195                                           ! 5305                        1024,
32196 8331                      0400            .word	$400
32197                                           ! 5306                        768,
32198 8333                      0300            .word	$300
32199                                           ! 5307                      8,
32200 8335                        08            .byte	8
32201                                           ! 5308                      16,
32202 8336                        10            .byte	$10
32203                                           ! 5309                           1,
32204 8337                        01            .byte	1
32205                                           ! 5310                         24,
32206 8338                        18            .byte	$18
32207                                           ! 5311                          36,
32208 8339                        24            .byte	$24
32209                                           ! 5312                        0x06,
32210 833A                        06            .byte	6
32211                                           ! 5313                     0,
32212 833B                        00            .byte	0
32213                                           ! 5314                               6,
32214 833C                        06            .byte	6
32215                                           ! 5315                          0,
32216 833D                        00            .byte	0
32217                                           ! 5316                        8,
32218 833E                        08            .byte	8
32219                                           ! 5317                             16,
32220 833F                        10            .byte	$10
32221                                           ! 5318                          8,
32222 8340                        08            .byte	8
32223                                           ! 5319                               8,
32224 8341                        08            .byte	8
32225                                           ! 5320                         8,
32226 8342                        08            .byte	8
32227                                           ! 5321                              0,
32228 8343                        00            .byte	0
32229                                           ! 5322                         0,
32230 8344                        00            .byte	0
32231                                           ! 5323                              0,
32232 8345                        00            .byte	0
32233                                           ! 5324                                0,
32234 8346                        00            .byte	0
32235                                           ! 5325                        0xE0000000,
32236 8347                      0000            .word	0
32237 8349                      E000            .word	$E000
32238                                           ! 5326                               0,
32239 834B                      0000            .word	0
32240 834D                      0000            .word	0
32241                                           ! 5327                             0,
32242 834F                      0000            .word	0
32243                                           ! 5328                                3072,
32244 8351                      0C00            .word	$C00
32245                                           ! 5329                             0,
32246 8353                        00            .byte	0
32247                                           ! 5330                             0,
32248 8354                        00            .byte	0
32249                                           ! 5331                           8,
32250 8355                        08            .byte	8
32251                                           ! 5332                                16,
32252 8356                        10            .byte	$10
32253                                           ! 5333                             8,
32254 8357                        08            .byte	8
32255                                           ! 5334                                  8,
32256 8358                        08            .byte	8
32257                                           ! 5335                            8,
32258 8359                        08            .byte	8
32259                                           ! 5336                                 0,
32260 835A                        00            .byte	0
32261                                           ! 5337                            0,
32262 835B                        00            .byte	0
32263                                           ! 5338                                 0,
32264 835C                        00            .byte	0
32265                                           ! 5339                          0,
32266 835D                      0000            .word	0
32267 835F                      0000            .word	0
32268                                           ! 5340 } },
32269                                           ! 5341 { 0x0119,
32270 8361                      0119            .word	$119
32271                                           ! 5342 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32272 8363                      009B            .word	$9B
32273                                           ! 5343                           0x01 | 0x02 | 0x04,
32274 8365                        07            .byte	7
32275                                           ! 5344                           0,
32276 8366                        00            .byte	0
32277                                           ! 5345                           64,
32278 8367                      0040            .word	$40
32279                                           ! 5346      
32280                                           ! 5346               64,
32281 8369                      0040            .word	$40
32282                                           ! 5347                        0xA000,
32283 836B                      A000            .word	$A000
32284                                           ! 5348                        0x0000,
32285 836D                      0000            .word	0
32286                                           ! 5349                       0,
32287 836F                      0000            .word	0
32288 8371                      0000            .word	0
32289                                           ! 5350                             2560,
32290 8373                      0A00            .word	$A00
32291                                           ! 5351                        1280,
32292 8375                      0500            .word	$500
32293                                           ! 5352                        1024,
32294 8377                      0400            .word	$400
32295                                           ! 5353                      8,
32296 8379                        08            .byte	8
32297                                           ! 5354                      16,
32298 837A                        10            .byte	$10
32299                                           ! 5355                           1,
32300 837B                        01            .byte	1
32301                                           ! 5356                         15,
32302 837C                        0F            .byte	$F
32303                                           ! 5357                          40,
32304 837D                        28            .byte	$28
32305                                           ! 5358                        0x06,
32306 837E                        06            .byte	6
32307                                           ! 5359                     0,
32308 837F                        00            .byte	0
32309                                           ! 5360                               5,
32310 8380                        05            .byte	5
32311                                           ! 5361                          0,
32312 8381                        00            .byte	0
32313                                           ! 5362                        5,
32314 8382                        05            .byte	5
32315                                           ! 5363                             10,
32316 8383                        0A            .byte	$A
32317                                           ! 5364                          5,
32318 8384                        05            .byte	5
32319                                           ! 5365                               5,
32320 8385                        05            .byte	5
32321                                           ! 5366                         5,
32322 8386                        05            .byte	5
32323                                           ! 5367                              0,
32324 8387                        00            .byte	0
32325                                           ! 5368                         1,
32326 8388                        01            .byte	1
32327                                           ! 5369                              15,
32328 8389                        0F            .byte	$F
32329                                           ! 5370                                0,
32330 838A                        00            .byte	0
32331                                           ! 5371                        0xE0000000,
32332 838B                      0000            .word	0
32333 838D                      E000            .word	$E000
32334                                           ! 5372                               0,
32335 838F                      0000            .word	0
32336 8391                      0000            .word	0
32337                                           ! 5373                             0,
32338 8393                      0000            .word	0
32339                                           ! 5374                                2560,
32340 8395                      0A00            .word	$A00
32341                                           ! 5375                             0,
32342 8397                        00            .byte	0
32343                                           ! 5376                             0,
32344 8398                        00            .byte	0
32345                                           ! 5377                           5,
32346 8399                        05            .byte	5
32347                                           ! 5378                                10,
32348 839A                        0A            .byte	$A
32349                                           ! 5379                             5,
32350 839B                        05            .byte	5
32351                                           ! 5380                                  5,
32352 839C                        05            .byte	5
32353                                           ! 5381                            5,
32354 839D                        05            .byte	5
32355                                           ! 5382                                 0,
32356 839E                        00            .byte	0
32357                                           ! 5383                            1,
32358 839F                        01            .byte	1
32359                                           ! 5384                                 15,
32360 83A0                        0F            .byte	$F
32361                                           ! 5385                          0,
32362 83A1                      0000            .word	0
32363 83A3                      0000            .word	0
32364                                           ! 5386 } },
32365                                           ! 5387 { 0x011a,
32366 83A5                      011A            .word	$11A
32367                                           ! 5388 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32368 83A7                      009B            .word	$9B
32369                                           ! 5389                           0x01 | 0x02 | 0x04,
32370 83A9                        07            .byte	7
32371                                           ! 5390                           0,
32372 83AA                        00            .byte	0
32373                                           ! 5391                           64,
32374 83AB                      0040            .word	$40
32375                                           ! 5392                    64,
32376 83AD                      0040            .word	$40
32377                                           ! 5393                        0xA000,
32378 83AF                      A000            .word	$A000
32379                                           ! 5394                        0x0000,
32380 83B1                      0000            .word	0
32381                                           ! 5395                       0,
32382 83B3                      0000            .word	0
32383 83B5                      0000            .word	0
32384                                           ! 5396                             2560,
32385 83B7                      0A00            .word	$A00
32386                                           ! 5397                        1280,
32387 83B9                      0500            .word	$500
32388                                           ! 5398                        1024,
32389 83BB                      0400            .word	$400
32390                                           ! 5399                      8,
32391 83BD                        08            .byte	8
32392                                           ! 5400                      16,
32393 83BE                        10            .byte	$10
32394                                           ! 5401                           1,
32395 83BF                        01            .byte	1
32396                                           ! 5402                         16,
32397 83C0                        10            .byte	$10
32398                                           ! 5403                          40,
32399 83C1                        28            .byte	$28
32400                                           ! 5404                        0x06,
32401 83C2                        06            .byte	6
32402                                           ! 5405                     0,
32403 83C3                        00            .byte	0
32404                                           ! 5406                               5,
32405 83C4                        05            .byte	5
32406                                           ! 5407                          0,
32407 83C5                        00            .byte	0
32408                                           ! 5408                        5,
32409 83C6                        05            .byte	5
32410                                           ! 5409                             11,
32411 83C7                        0B            .byte	$B
32412                                           ! 5410                          6,
32413 83C8                        06            .byte	6
32414                                           ! 5411                               5,
32415 83C9                        05            .byte	5
32416                                           ! 5412                         5,
32417 83CA                        05            .byte	5
32418                                           ! 5413                              0,
32419 83CB                        00            .byte	0
32420                                           ! 5414                         0,
32421 83CC                        00            .byte	0
32422                                           ! 5415                       
32423                                           ! 5415        0,
32424 83CD                        00            .byte	0
32425                                           ! 5416                                0,
32426 83CE                        00            .byte	0
32427                                           ! 5417                        0xE0000000,
32428 83CF                      0000            .word	0
32429 83D1                      E000            .word	$E000
32430                                           ! 5418                               0,
32431 83D3                      0000            .word	0
32432 83D5                      0000            .word	0
32433                                           ! 5419                             0,
32434 83D7                      0000            .word	0
32435                                           ! 5420                                2560,
32436 83D9                      0A00            .word	$A00
32437                                           ! 5421                             0,
32438 83DB                        00            .byte	0
32439                                           ! 5422                             0,
32440 83DC                        00            .byte	0
32441                                           ! 5423                           5,
32442 83DD                        05            .byte	5
32443                                           ! 5424                                11,
32444 83DE                        0B            .byte	$B
32445                                           ! 5425                             6,
32446 83DF                        06            .byte	6
32447                                           ! 5426                                  5,
32448 83E0                        05            .byte	5
32449                                           ! 5427                            5,
32450 83E1                        05            .byte	5
32451                                           ! 5428                                 0,
32452 83E2                        00            .byte	0
32453                                           ! 5429                            0,
32454 83E3                        00            .byte	0
32455                                           ! 5430                                 0,
32456 83E4                        00            .byte	0
32457                                           ! 5431                          0,
32458 83E5                      0000            .word	0
32459 83E7                      0000            .word	0
32460                                           ! 5432 } },
32461                                           ! 5433 { 0x011b,
32462 83E9                      011B            .word	$11B
32463                                           ! 5434 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32464 83EB                      009B            .word	$9B
32465                                           ! 5435                           0x01 | 0x02 | 0x04,
32466 83ED                        07            .byte	7
32467                                           ! 5436                           0,
32468 83EE                        00            .byte	0
32469                                           ! 5437                           64,
32470 83EF                      0040            .word	$40
32471                                           ! 5438                    64,
32472 83F1                      0040            .word	$40
32473                                           ! 5439                        0xA000,
32474 83F3                      A000            .word	$A000
32475                                           ! 5440                        0x0000,
32476 83F5                      0000            .word	0
32477                                           ! 5441                       0,
32478 83F7                      0000            .word	0
32479 83F9                      0000            .word	0
32480                                           ! 5442                             3840,
32481 83FB                      0F00            .word	$F00
32482                                           ! 5443                        1280,
32483 83FD                      0500            .word	$500
32484                                           ! 5444                        1024,
32485 83FF                      0400            .word	$400
32486                                           ! 5445                      8,
32487 8401                        08            .byte	8
32488                                           ! 5446                      16,
32489 8402                        10            .byte	$10
32490                                           ! 5447                           1,
32491 8403                        01            .byte	1
32492                                           ! 5448                         24,
32493 8404                        18            .byte	$18
32494                                           ! 5449                          60,
32495 8405                        3C            .byte	$3C
32496                                           ! 5450                        0x06,
32497 8406                        06            .byte	6
32498                                           ! 5451                     0,
32499 8407                        00            .byte	0
32500                                           ! 5452                               3,
32501 8408                        03            .byte	3
32502                                           ! 5453                          0,
32503 8409                        00            .byte	0
32504                                           ! 5454                        8,
32505 840A                        08            .byte	8
32506                                           ! 5455                             16,
32507 840B                        10            .byte	$10
32508                                           ! 5456                          8,
32509 840C                        08            .byte	8
32510                                           ! 5457                               8,
32511 840D                        08            .byte	8
32512                                           ! 5458                         8,
32513 840E                        08            .byte	8
32514                                           ! 5459                              0,
32515 840F                        00            .byte	0
32516                                           ! 5460                         0,
32517 8410                        00            .byte	0
32518                                           ! 5461                              0,
32519 8411                        00            .byte	0
32520                                           ! 5462                                0,
32521 8412                        00            .byte	0
32522                                           ! 5463                        0xE0000000,
32523 8413                      0000            .word	0
32524 8415                      E000            .word	$E000
32525                                           ! 5464                               0,
32526 8417                      0000            .word	0
32527 8419                      0000            .word	0
32528                                           ! 5465                             0,
32529 841B                      0000            .word	0
32530                                           ! 5466                                3840,
32531 841D                      0F00            .word	$F00
32532                                           ! 5467                             0,
32533 841F                        00            .byte	0
32534                                           ! 5468                             0,
32535 8420                        00            .byte	0
32536                                           ! 5469                           8,
32537 8421                        08            .byte	8
32538                                           ! 5470                                16,
32539 8422                        10            .byte	$10
32540                                           ! 5471                             8,
32541 8423                        08            .byte	8
32542                                           ! 5472                                  8,
32543 8424                        08            .byte	8
32544                                           ! 5473                            8,
32545 8425                        08            .byte	8
32546                                           ! 5474                                 0,
32547 8426                        00            .byte	0
32548                                           ! 5475                            0,
32549 8427                        00            .byte	0
32550                                           ! 5476                                 0,
32551 8428                        00            .byte	0
32552                                           ! 5477                          0,
32553 8429                      0000            .word	0
32554 842B                      0000            .word	0
32555                                           ! 5478 } },
32556                                           ! 5479 { 0x011c,
32557 842D                      011C            .word	$11C
32558                                           ! 5480 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32559 842F                      009B            .word	$9B
32560                                           ! 5481                           0x01 | 0x02 | 0x04,
32561 8431                        07            .byte	7
32562                                           ! 5482                           0,
32563 8432                        00            .byte	0
32564                                           ! 5483        
32565                                           ! 5483                    64,
32566 8433                      0040            .word	$40
32567                                           ! 5484                    64,
32568 8435                      0040            .word	$40
32569                                           ! 5485                        0xA000,
32570 8437                      A000            .word	$A000
32571                                           ! 5486                        0x0000,
32572 8439                      0000            .word	0
32573                                           ! 5487                       0,
32574 843B                      0000            .word	0
32575 843D                      0000            .word	0
32576                                           ! 5488                             1600,
32577 843F                      0640            .word	$640
32578                                           ! 5489                        1600,
32579 8441                      0640            .word	$640
32580                                           ! 5490                        1200,
32581 8443                      04B0            .word	$4B0
32582                                           ! 5491                      8,
32583 8445                        08            .byte	8
32584                                           ! 5492                      16,
32585 8446                        10            .byte	$10
32586                                           ! 5493                           1,
32587 8447                        01            .byte	1
32588                                           ! 5494                         8,
32589 8448                        08            .byte	8
32590                                           ! 5495                          30,
32591 8449                        1E            .byte	$1E
32592                                           ! 5496                        0x04,
32593 844A                        04            .byte	4
32594                                           ! 5497                     0,
32595 844B                        00            .byte	0
32596                                           ! 5498                               7,
32597 844C                        07            .byte	7
32598                                           ! 5499                          0,
32599 844D                        00            .byte	0
32600                                           ! 5500                        0,
32601 844E                        00            .byte	0
32602                                           ! 5501                             0,
32603 844F                        00            .byte	0
32604                                           ! 5502                          0,
32605 8450                        00            .byte	0
32606                                           ! 5503                               0,
32607 8451                        00            .byte	0
32608                                           ! 5504                         0,
32609 8452                        00            .byte	0
32610                                           ! 5505                              0,
32611 8453                        00            .byte	0
32612                                           ! 5506                         0,
32613 8454                        00            .byte	0
32614                                           ! 5507                              0,
32615 8455                        00            .byte	0
32616                                           ! 5508                                0,
32617 8456                        00            .byte	0
32618                                           ! 5509                        0xE0000000,
32619 8457                      0000            .word	0
32620 8459                      E000            .word	$E000
32621                                           ! 5510                               0,
32622 845B                      0000            .word	0
32623 845D                      0000            .word	0
32624                                           ! 5511                             0,
32625 845F                      0000            .word	0
32626                                           ! 5512                                1600,
32627 8461                      0640            .word	$640
32628                                           ! 5513                             0,
32629 8463                        00            .byte	0
32630                                           ! 5514                             0,
32631 8464                        00            .byte	0
32632                                           ! 5515                           0,
32633 8465                        00            .byte	0
32634                                           ! 5516                                0,
32635 8466                        00            .byte	0
32636                                           ! 5517                             0,
32637 8467                        00            .byte	0
32638                                           ! 5518                                  0,
32639 8468                        00            .byte	0
32640                                           ! 5519                            0,
32641 8469                        00            .byte	0
32642                                           ! 5520                                 0,
32643 846A                        00            .byte	0
32644                                           ! 5521                            0,
32645 846B                        00            .byte	0
32646                                           ! 5522                                 0,
32647 846C                        00            .byte	0
32648                                           ! 5523                          0,
32649 846D                      0000            .word	0
32650 846F                      0000            .word	0
32651                                           ! 5524 } },
32652                                           ! 5525 { 0x011d,
32653 8471                      011D            .word	$11D
32654                                           ! 5526 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32655 8473                      009B            .word	$9B
32656                                           ! 5527                           0x01 | 0x02 | 0x04,
32657 8475                        07            .byte	7
32658                                           ! 5528                           0,
32659 8476                        00            .byte	0
32660                                           ! 5529                           64,
32661 8477                      0040            .word	$40
32662                                           ! 5530                    64,
32663 8479                      0040            .word	$40
32664                                           ! 5531                        0xA000,
32665 847B                      A000            .word	$A000
32666                                           ! 5532                        0x0000,
32667 847D                      0000            .word	0
32668                                           ! 5533                       0,
32669 847F                      0000            .word	0
32670 8481                      0000            .word	0
32671                                           ! 5534                             3200,
32672 8483                      0C80            .word	$C80
32673                                           ! 5535                        1600,
32674 8485                      0640            .word	$640
32675                                           ! 5536                        1200,
32676 8487                      04B0            .word	$4B0
32677                                           ! 5537                      8,
32678 8489                        08            .byte	8
32679                                           ! 5538                      16,
32680 848A                        10            .byte	$10
32681                                           ! 5539                           1,
32682 848B                        01            .byte	1
32683                                           ! 5540                         15,
32684 848C                        0F            .byte	$F
32685                                           ! 5541                          59,
32686 848D                        3B            .byte	$3B
32687                                           ! 5542                        0x06,
32688 848E                        06            .byte	6
32689                                           ! 5543                     0,
32690 848F                        00            .byte	0
32691                                           ! 5544                               3,
32692 8490                        03            .byte	3
32693                                           ! 5545                          0,
32694 8491                        00            .byte	0
32695                                           ! 5546                        5,
32696 8492                        05            .byte	5
32697                                           ! 5547                             10,
32698 8493                        0A            .byte	$A
32699                                           ! 5548                          5,
32700 8494                        05            .byte	5
32701                                           ! 5549                               5,
32702 8495                        05            .byte	5
32703                                           ! 5550                         5,
32704 8496                        05            .byte	5
32705                                           ! 5551                              0,
32706 8497                        00            .byte	0
32707                                           ! 5552                         1,
32708                                           ! 5552 
32709 8498                        01            .byte	1
32710                                           ! 5553                              15,
32711 8499                        0F            .byte	$F
32712                                           ! 5554                                0,
32713 849A                        00            .byte	0
32714                                           ! 5555                        0xE0000000,
32715 849B                      0000            .word	0
32716 849D                      E000            .word	$E000
32717                                           ! 5556                               0,
32718 849F                      0000            .word	0
32719 84A1                      0000            .word	0
32720                                           ! 5557                             0,
32721 84A3                      0000            .word	0
32722                                           ! 5558                                3200,
32723 84A5                      0C80            .word	$C80
32724                                           ! 5559                             0,
32725 84A7                        00            .byte	0
32726                                           ! 5560                             0,
32727 84A8                        00            .byte	0
32728                                           ! 5561                           5,
32729 84A9                        05            .byte	5
32730                                           ! 5562                                10,
32731 84AA                        0A            .byte	$A
32732                                           ! 5563                             5,
32733 84AB                        05            .byte	5
32734                                           ! 5564                                  5,
32735 84AC                        05            .byte	5
32736                                           ! 5565                            5,
32737 84AD                        05            .byte	5
32738                                           ! 5566                                 0,
32739 84AE                        00            .byte	0
32740                                           ! 5567                            1,
32741 84AF                        01            .byte	1
32742                                           ! 5568                                 15,
32743 84B0                        0F            .byte	$F
32744                                           ! 5569                          0,
32745 84B1                      0000            .word	0
32746 84B3                      0000            .word	0
32747                                           ! 5570 } },
32748                                           ! 5571 { 0x011e,
32749 84B5                      011E            .word	$11E
32750                                           ! 5572 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32751 84B7                      009B            .word	$9B
32752                                           ! 5573                           0x01 | 0x02 | 0x04,
32753 84B9                        07            .byte	7
32754                                           ! 5574                           0,
32755 84BA                        00            .byte	0
32756                                           ! 5575                           64,
32757 84BB                      0040            .word	$40
32758                                           ! 5576                    64,
32759 84BD                      0040            .word	$40
32760                                           ! 5577                        0xA000,
32761 84BF                      A000            .word	$A000
32762                                           ! 5578                        0x0000,
32763 84C1                      0000            .word	0
32764                                           ! 5579                       0,
32765 84C3                      0000            .word	0
32766 84C5                      0000            .word	0
32767                                           ! 5580                             3200,
32768 84C7                      0C80            .word	$C80
32769                                           ! 5581                        1600,
32770 84C9                      0640            .word	$640
32771                                           ! 5582                        1200,
32772 84CB                      04B0            .word	$4B0
32773                                           ! 5583                      8,
32774 84CD                        08            .byte	8
32775                                           ! 5584                      16,
32776 84CE                        10            .byte	$10
32777                                           ! 5585                           1,
32778 84CF                        01            .byte	1
32779                                           ! 5586                         16,
32780 84D0                        10            .byte	$10
32781                                           ! 5587                          59,
32782 84D1                        3B            .byte	$3B
32783                                           ! 5588                        0x06,
32784 84D2                        06            .byte	6
32785                                           ! 5589                     0,
32786 84D3                        00            .byte	0
32787                                           ! 5590                               3,
32788 84D4                        03            .byte	3
32789                                           ! 5591                          0,
32790 84D5                        00            .byte	0
32791                                           ! 5592                        5,
32792 84D6                        05            .byte	5
32793                                           ! 5593                             11,
32794 84D7                        0B            .byte	$B
32795                                           ! 5594                          6,
32796 84D8                        06            .byte	6
32797                                           ! 5595                               5,
32798 84D9                        05            .byte	5
32799                                           ! 5596                         5,
32800 84DA                        05            .byte	5
32801                                           ! 5597                              0,
32802 84DB                        00            .byte	0
32803                                           ! 5598                         0,
32804 84DC                        00            .byte	0
32805                                           ! 5599                              0,
32806 84DD                        00            .byte	0
32807                                           ! 5600                                0,
32808 84DE                        00            .byte	0
32809                                           ! 5601                        0xE0000000,
32810 84DF                      0000            .word	0
32811 84E1                      E000            .word	$E000
32812                                           ! 5602                               0,
32813 84E3                      0000            .word	0
32814 84E5                      0000            .word	0
32815                                           ! 5603                             0,
32816 84E7                      0000            .word	0
32817                                           ! 5604                                3200,
32818 84E9                      0C80            .word	$C80
32819                                           ! 5605                             0,
32820 84EB                        00            .byte	0
32821                                           ! 5606                             0,
32822 84EC                        00            .byte	0
32823                                           ! 5607                           5,
32824 84ED                        05            .byte	5
32825                                           ! 5608                                11,
32826 84EE                        0B            .byte	$B
32827                                           ! 5609                             6,
32828 84EF                        06            .byte	6
32829                                           ! 5610                                  5,
32830 84F0                        05            .byte	5
32831                                           ! 5611                            5,
32832 84F1                        05            .byte	5
32833                                           ! 5612                                 0,
32834 84F2                        00            .byte	0
32835                                           ! 5613                            0,
32836 84F3                        00            .byte	0
32837                                           ! 5614                                 0,
32838 84F4                        00            .byte	0
32839                                           ! 5615                          0,
32840 84F5                      0000            .word	0
32841 84F7                      0000            .word	0
32842                                           ! 5616 } },
32843                                           ! 5617 { 0x011f,
32844 84F9                      011F            .word	$11F
32845                                           ! 5618 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32846 84FB                      009B            .word	$9B
32847                                           ! 5619                           0x01 | 0x02 | 0x04,
32848 84FD                        07            .byte	7
32849                                           ! 5620            
32850                                           ! 5620                0,
32851 84FE                        00            .byte	0
32852                                           ! 5621                           64,
32853 84FF                      0040            .word	$40
32854                                           ! 5622                    64,
32855 8501                      0040            .word	$40
32856                                           ! 5623                        0xA000,
32857 8503                      A000            .word	$A000
32858                                           ! 5624                        0x0000,
32859 8505                      0000            .word	0
32860                                           ! 5625                       0,
32861 8507                      0000            .word	0
32862 8509                      0000            .word	0
32863                                           ! 5626                             4800,
32864 850B                      12C0            .word	$12C0
32865                                           ! 5627                        1600,
32866 850D                      0640            .word	$640
32867                                           ! 5628                        1200,
32868 850F                      04B0            .word	$4B0
32869                                           ! 5629                      8,
32870 8511                        08            .byte	8
32871                                           ! 5630                      16,
32872 8512                        10            .byte	$10
32873                                           ! 5631                           1,
32874 8513                        01            .byte	1
32875                                           ! 5632                         24,
32876 8514                        18            .byte	$18
32877                                           ! 5633                          88,
32878 8515                        58            .byte	$58
32879                                           ! 5634                        0x06,
32880 8516                        06            .byte	6
32881                                           ! 5635                     0,
32882 8517                        00            .byte	0
32883                                           ! 5636                               1,
32884 8518                        01            .byte	1
32885                                           ! 5637                          0,
32886 8519                        00            .byte	0
32887                                           ! 5638                        8,
32888 851A                        08            .byte	8
32889                                           ! 5639                             16,
32890 851B                        10            .byte	$10
32891                                           ! 5640                          8,
32892 851C                        08            .byte	8
32893                                           ! 5641                               8,
32894 851D                        08            .byte	8
32895                                           ! 5642                         8,
32896 851E                        08            .byte	8
32897                                           ! 5643                              0,
32898 851F                        00            .byte	0
32899                                           ! 5644                         0,
32900 8520                        00            .byte	0
32901                                           ! 5645                              0,
32902 8521                        00            .byte	0
32903                                           ! 5646                                0,
32904 8522                        00            .byte	0
32905                                           ! 5647                        0xE0000000,
32906 8523                      0000            .word	0
32907 8525                      E000            .word	$E000
32908                                           ! 5648                               0,
32909 8527                      0000            .word	0
32910 8529                      0000            .word	0
32911                                           ! 5649                             0,
32912 852B                      0000            .word	0
32913                                           ! 5650                                4800,
32914 852D                      12C0            .word	$12C0
32915                                           ! 5651                             0,
32916 852F                        00            .byte	0
32917                                           ! 5652                             0,
32918 8530                        00            .byte	0
32919                                           ! 5653                           8,
32920 8531                        08            .byte	8
32921                                           ! 5654                                16,
32922 8532                        10            .byte	$10
32923                                           ! 5655                             8,
32924 8533                        08            .byte	8
32925                                           ! 5656                                  8,
32926 8534                        08            .byte	8
32927                                           ! 5657                            8,
32928 8535                        08            .byte	8
32929                                           ! 5658                                 0,
32930 8536                        00            .byte	0
32931                                           ! 5659                            0,
32932 8537                        00            .byte	0
32933                                           ! 5660                                 0,
32934 8538                        00            .byte	0
32935                                           ! 5661                          0,
32936 8539                      0000            .word	0
32937 853B                      0000            .word	0
32938                                           ! 5662 } },
32939                                           ! 5663 { 0x0140,
32940 853D                      0140            .word	$140
32941                                           ! 5664 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32942 853F                      009B            .word	$9B
32943                                           ! 5665                           0x01 | 0x02 | 0x04,
32944 8541                        07            .byte	7
32945                                           ! 5666                           0,
32946 8542                        00            .byte	0
32947                                           ! 5667                           64,
32948 8543                      0040            .word	$40
32949                                           ! 5668                    64,
32950 8545                      0040            .word	$40
32951                                           ! 5669                        0xA000,
32952 8547                      A000            .word	$A000
32953                                           ! 5670                        0x0000,
32954 8549                      0000            .word	0
32955                                           ! 5671                       0,
32956 854B                      0000            .word	0
32957 854D                      0000            .word	0
32958                                           ! 5672                             1280,
32959 854F                      0500            .word	$500
32960                                           ! 5673                        320,
32961 8551                      0140            .word	$140
32962                                           ! 5674                        200,
32963 8553                      00C8            .word	$C8
32964                                           ! 5675                      8,
32965 8555                        08            .byte	8
32966                                           ! 5676                      16,
32967 8556                        10            .byte	$10
32968                                           ! 5677                           1,
32969 8557                        01            .byte	1
32970                                           ! 5678                         32,
32971 8558                        20            .byte	$20
32972                                           ! 5679                          4,
32973 8559                        04            .byte	4
32974                                           ! 5680                        0x06,
32975 855A                        06            .byte	6
32976                                           ! 5681                     0,
32977 855B                        00            .byte	0
32978                                           ! 5682                               64,
32979 855C                        40            .byte	$40
32980                                           ! 5683                          0,
32981 855D                        00            .byte	0
32982                                           ! 5684                        8,
32983 855E                        08            .byte	8
32984                                           ! 5685                             16,
32985 855F                        10            .byte	$10
32986                                           ! 5686                          8,
32987 8560                        08            .byte	8
32988                                           ! 5687                               8,
32989 8561                        08            .byte	8
32990                                           ! 5688                         8,
32991 8562                        08            .byte	8
32992                                           ! 5689                              0,
32993 8563                        00            .byte	0
32994                                           ! 5690 
32995                                           ! 5690                         8,
32996 8564                        08            .byte	8
32997                                           ! 5691                              24,
32998 8565                        18            .byte	$18
32999                                           ! 5692                                0x02,
33000 8566                        02            .byte	2
33001                                           ! 5693                        0xE0000000,
33002 8567                      0000            .word	0
33003 8569                      E000            .word	$E000
33004                                           ! 5694                               0,
33005 856B                      0000            .word	0
33006 856D                      0000            .word	0
33007                                           ! 5695                             0,
33008 856F                      0000            .word	0
33009                                           ! 5696                                1280,
33010 8571                      0500            .word	$500
33011                                           ! 5697                             0,
33012 8573                        00            .byte	0
33013                                           ! 5698                             0,
33014 8574                        00            .byte	0
33015                                           ! 5699                           8,
33016 8575                        08            .byte	8
33017                                           ! 5700                                16,
33018 8576                        10            .byte	$10
33019                                           ! 5701                             8,
33020 8577                        08            .byte	8
33021                                           ! 5702                                  8,
33022 8578                        08            .byte	8
33023                                           ! 5703                            8,
33024 8579                        08            .byte	8
33025                                           ! 5704                                 0,
33026 857A                        00            .byte	0
33027                                           ! 5705                            8,
33028 857B                        08            .byte	8
33029                                           ! 5706                                 24,
33030 857C                        18            .byte	$18
33031                                           ! 5707                          0,
33032 857D                      0000            .word	0
33033 857F                      0000            .word	0
33034                                           ! 5708 } },
33035                                           ! 5709 { 0x0141,
33036 8581                      0141            .word	$141
33037                                           ! 5710 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33038 8583                      009B            .word	$9B
33039                                           ! 5711                           0x01 | 0x02 | 0x04,
33040 8585                        07            .byte	7
33041                                           ! 5712                           0,
33042 8586                        00            .byte	0
33043                                           ! 5713                           64,
33044 8587                      0040            .word	$40
33045                                           ! 5714                    64,
33046 8589                      0040            .word	$40
33047                                           ! 5715                        0xA000,
33048 858B                      A000            .word	$A000
33049                                           ! 5716                        0x0000,
33050 858D                      0000            .word	0
33051                                           ! 5717                       0,
33052 858F                      0000            .word	0
33053 8591                      0000            .word	0
33054                                           ! 5718                             2560,
33055 8593                      0A00            .word	$A00
33056                                           ! 5719                        640,
33057 8595                      0280            .word	$280
33058                                           ! 5720                        400,
33059 8597                      0190            .word	$190
33060                                           ! 5721                      8,
33061 8599                        08            .byte	8
33062                                           ! 5722                      16,
33063 859A                        10            .byte	$10
33064                                           ! 5723                           1,
33065 859B                        01            .byte	1
33066                                           ! 5724                         32,
33067 859C                        20            .byte	$20
33068                                           ! 5725                          16,
33069 859D                        10            .byte	$10
33070                                           ! 5726                        0x06,
33071 859E                        06            .byte	6
33072                                           ! 5727                     0,
33073 859F                        00            .byte	0
33074                                           ! 5728                               15,
33075 85A0                        0F            .byte	$F
33076                                           ! 5729                          0,
33077 85A1                        00            .byte	0
33078                                           ! 5730                        8,
33079 85A2                        08            .byte	8
33080                                           ! 5731                             16,
33081 85A3                        10            .byte	$10
33082                                           ! 5732                          8,
33083 85A4                        08            .byte	8
33084                                           ! 5733                               8,
33085 85A5                        08            .byte	8
33086                                           ! 5734                         8,
33087 85A6                        08            .byte	8
33088                                           ! 5735                              0,
33089 85A7                        00            .byte	0
33090                                           ! 5736                         8,
33091 85A8                        08            .byte	8
33092                                           ! 5737                              24,
33093 85A9                        18            .byte	$18
33094                                           ! 5738                                0x02,
33095 85AA                        02            .byte	2
33096                                           ! 5739                        0xE0000000,
33097 85AB                      0000            .word	0
33098 85AD                      E000            .word	$E000
33099                                           ! 5740                               0,
33100 85AF                      0000            .word	0
33101 85B1                      0000            .word	0
33102                                           ! 5741                             0,
33103 85B3                      0000            .word	0
33104                                           ! 5742                                2560,
33105 85B5                      0A00            .word	$A00
33106                                           ! 5743                             0,
33107 85B7                        00            .byte	0
33108                                           ! 5744                             0,
33109 85B8                        00            .byte	0
33110                                           ! 5745                           8,
33111 85B9                        08            .byte	8
33112                                           ! 5746                                16,
33113 85BA                        10            .byte	$10
33114                                           ! 5747                             8,
33115 85BB                        08            .byte	8
33116                                           ! 5748                                  8,
33117 85BC                        08            .byte	8
33118                                           ! 5749                            8,
33119 85BD                        08            .byte	8
33120                                           ! 5750                                 0,
33121 85BE                        00            .byte	0
33122                                           ! 5751                            8,
33123 85BF                        08            .byte	8
33124                                           ! 5752                                 24,
33125 85C0                        18            .byte	$18
33126                                           ! 5753                          0,
33127 85C1                      0000            .word	0
33128 85C3                      0000            .word	0
33129                                           ! 5754 } },
33130                                           ! 5755 { 0x0142,
33131 85C5                      0142            .word	$142
33132                                           ! 5756 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33133 85C7                      009B            .word	$9B
33134                                           ! 5757                         
33135                                           ! 5757   0x01 | 0x02 | 0x04,
33136 85C9                        07            .byte	7
33137                                           ! 5758                           0,
33138 85CA                        00            .byte	0
33139                                           ! 5759                           64,
33140 85CB                      0040            .word	$40
33141                                           ! 5760                    64,
33142 85CD                      0040            .word	$40
33143                                           ! 5761                        0xA000,
33144 85CF                      A000            .word	$A000
33145                                           ! 5762                        0x0000,
33146 85D1                      0000            .word	0
33147                                           ! 5763                       0,
33148 85D3                      0000            .word	0
33149 85D5                      0000            .word	0
33150                                           ! 5764                             2560,
33151 85D7                      0A00            .word	$A00
33152                                           ! 5765                        640,
33153 85D9                      0280            .word	$280
33154                                           ! 5766                        480,
33155 85DB                      01E0            .word	$1E0
33156                                           ! 5767                      8,
33157 85DD                        08            .byte	8
33158                                           ! 5768                      16,
33159 85DE                        10            .byte	$10
33160                                           ! 5769                           1,
33161 85DF                        01            .byte	1
33162                                           ! 5770                         32,
33163 85E0                        20            .byte	$20
33164                                           ! 5771                          19,
33165 85E1                        13            .byte	$13
33166                                           ! 5772                        0x06,
33167 85E2                        06            .byte	6
33168                                           ! 5773                     0,
33169 85E3                        00            .byte	0
33170                                           ! 5774                               12,
33171 85E4                        0C            .byte	$C
33172                                           ! 5775                          0,
33173 85E5                        00            .byte	0
33174                                           ! 5776                        8,
33175 85E6                        08            .byte	8
33176                                           ! 5777                             16,
33177 85E7                        10            .byte	$10
33178                                           ! 5778                          8,
33179 85E8                        08            .byte	8
33180                                           ! 5779                               8,
33181 85E9                        08            .byte	8
33182                                           ! 5780                         8,
33183 85EA                        08            .byte	8
33184                                           ! 5781                              0,
33185 85EB                        00            .byte	0
33186                                           ! 5782                         8,
33187 85EC                        08            .byte	8
33188                                           ! 5783                              24,
33189 85ED                        18            .byte	$18
33190                                           ! 5784                                0x02,
33191 85EE                        02            .byte	2
33192                                           ! 5785                        0xE0000000,
33193 85EF                      0000            .word	0
33194 85F1                      E000            .word	$E000
33195                                           ! 5786                               0,
33196 85F3                      0000            .word	0
33197 85F5                      0000            .word	0
33198                                           ! 5787                             0,
33199 85F7                      0000            .word	0
33200                                           ! 5788                                2560,
33201 85F9                      0A00            .word	$A00
33202                                           ! 5789                             0,
33203 85FB                        00            .byte	0
33204                                           ! 5790                             0,
33205 85FC                        00            .byte	0
33206                                           ! 5791                           8,
33207 85FD                        08            .byte	8
33208                                           ! 5792                                16,
33209 85FE                        10            .byte	$10
33210                                           ! 5793                             8,
33211 85FF                        08            .byte	8
33212                                           ! 5794                                  8,
33213 8600                        08            .byte	8
33214                                           ! 5795                            8,
33215 8601                        08            .byte	8
33216                                           ! 5796                                 0,
33217 8602                        00            .byte	0
33218                                           ! 5797                            8,
33219 8603                        08            .byte	8
33220                                           ! 5798                                 24,
33221 8604                        18            .byte	$18
33222                                           ! 5799                          0,
33223 8605                      0000            .word	0
33224 8607                      0000            .word	0
33225                                           ! 5800 } },
33226                                           ! 5801 { 0x0143,
33227 8609                      0143            .word	$143
33228                                           ! 5802 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33229 860B                      009B            .word	$9B
33230                                           ! 5803                           0x01 | 0x02 | 0x04,
33231 860D                        07            .byte	7
33232                                           ! 5804                           0,
33233 860E                        00            .byte	0
33234                                           ! 5805                           64,
33235 860F                      0040            .word	$40
33236                                           ! 5806                    64,
33237 8611                      0040            .word	$40
33238                                           ! 5807                        0xA000,
33239 8613                      A000            .word	$A000
33240                                           ! 5808                        0x0000,
33241 8615                      0000            .word	0
33242                                           ! 5809                       0,
33243 8617                      0000            .word	0
33244 8619                      0000            .word	0
33245                                           ! 5810                             3200,
33246 861B                      0C80            .word	$C80
33247                                           ! 5811                        800,
33248 861D                      0320            .word	$320
33249                                           ! 5812                        600,
33250 861F                      0258            .word	$258
33251                                           ! 5813                      8,
33252 8621                        08            .byte	8
33253                                           ! 5814                      16,
33254 8622                        10            .byte	$10
33255                                           ! 5815                           1,
33256 8623                        01            .byte	1
33257                                           ! 5816                         32,
33258 8624                        20            .byte	$20
33259                                           ! 5817                          30,
33260 8625                        1E            .byte	$1E
33261                                           ! 5818                        0x06,
33262 8626                        06            .byte	6
33263                                           ! 5819                     0,
33264 8627                        00            .byte	0
33265                                           ! 5820                               7,
33266 8628                        07            .byte	7
33267                                           ! 5821                          0,
33268 8629                        00            .byte	0
33269                                           ! 5822                        8,
33270 862A                        08            .byte	8
33271                                           ! 5823                             16,
33272 862B                        10            .byte	$10
33273                                           ! 5824                          8,
33274 862C                        08            .byte	8
33275                                           ! 5825                               8,
33276 862D                        08            .byte	8
33277                                           ! 5826                       
33278                                           ! 5826   8,
33279 862E                        08            .byte	8
33280                                           ! 5827                              0,
33281 862F                        00            .byte	0
33282                                           ! 5828                         8,
33283 8630                        08            .byte	8
33284                                           ! 5829                              24,
33285 8631                        18            .byte	$18
33286                                           ! 5830                                0x02,
33287 8632                        02            .byte	2
33288                                           ! 5831                        0xE0000000,
33289 8633                      0000            .word	0
33290 8635                      E000            .word	$E000
33291                                           ! 5832                               0,
33292 8637                      0000            .word	0
33293 8639                      0000            .word	0
33294                                           ! 5833                             0,
33295 863B                      0000            .word	0
33296                                           ! 5834                                3200,
33297 863D                      0C80            .word	$C80
33298                                           ! 5835                             0,
33299 863F                        00            .byte	0
33300                                           ! 5836                             0,
33301 8640                        00            .byte	0
33302                                           ! 5837                           8,
33303 8641                        08            .byte	8
33304                                           ! 5838                                16,
33305 8642                        10            .byte	$10
33306                                           ! 5839                             8,
33307 8643                        08            .byte	8
33308                                           ! 5840                                  8,
33309 8644                        08            .byte	8
33310                                           ! 5841                            8,
33311 8645                        08            .byte	8
33312                                           ! 5842                                 0,
33313 8646                        00            .byte	0
33314                                           ! 5843                            8,
33315 8647                        08            .byte	8
33316                                           ! 5844                                 24,
33317 8648                        18            .byte	$18
33318                                           ! 5845                          0,
33319 8649                      0000            .word	0
33320 864B                      0000            .word	0
33321                                           ! 5846 } },
33322                                           ! 5847 { 0x0144,
33323 864D                      0144            .word	$144
33324                                           ! 5848 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33325 864F                      009B            .word	$9B
33326                                           ! 5849                           0x01 | 0x02 | 0x04,
33327 8651                        07            .byte	7
33328                                           ! 5850                           0,
33329 8652                        00            .byte	0
33330                                           ! 5851                           64,
33331 8653                      0040            .word	$40
33332                                           ! 5852                    64,
33333 8655                      0040            .word	$40
33334                                           ! 5853                        0xA000,
33335 8657                      A000            .word	$A000
33336                                           ! 5854                        0x0000,
33337 8659                      0000            .word	0
33338                                           ! 5855                       0,
33339 865B                      0000            .word	0
33340 865D                      0000            .word	0
33341                                           ! 5856                             4096,
33342 865F                      1000            .word	$1000
33343                                           ! 5857                        1024,
33344 8661                      0400            .word	$400
33345                                           ! 5858                        768,
33346 8663                      0300            .word	$300
33347                                           ! 5859                      8,
33348 8665                        08            .byte	8
33349                                           ! 5860                      16,
33350 8666                        10            .byte	$10
33351                                           ! 5861                           1,
33352 8667                        01            .byte	1
33353                                           ! 5862                         32,
33354 8668                        20            .byte	$20
33355                                           ! 5863                          48,
33356 8669                        30            .byte	$30
33357                                           ! 5864                        0x06,
33358 866A                        06            .byte	6
33359                                           ! 5865                     0,
33360 866B                        00            .byte	0
33361                                           ! 5866                               4,
33362 866C                        04            .byte	4
33363                                           ! 5867                          0,
33364 866D                        00            .byte	0
33365                                           ! 5868                        8,
33366 866E                        08            .byte	8
33367                                           ! 5869                             16,
33368 866F                        10            .byte	$10
33369                                           ! 5870                          8,
33370 8670                        08            .byte	8
33371                                           ! 5871                               8,
33372 8671                        08            .byte	8
33373                                           ! 5872                         8,
33374 8672                        08            .byte	8
33375                                           ! 5873                              0,
33376 8673                        00            .byte	0
33377                                           ! 5874                         8,
33378 8674                        08            .byte	8
33379                                           ! 5875                              24,
33380 8675                        18            .byte	$18
33381                                           ! 5876                                0x02,
33382 8676                        02            .byte	2
33383                                           ! 5877                        0xE0000000,
33384 8677                      0000            .word	0
33385 8679                      E000            .word	$E000
33386                                           ! 5878                               0,
33387 867B                      0000            .word	0
33388 867D                      0000            .word	0
33389                                           ! 5879                             0,
33390 867F                      0000            .word	0
33391                                           ! 5880                                4096,
33392 8681                      1000            .word	$1000
33393                                           ! 5881                             0,
33394 8683                        00            .byte	0
33395                                           ! 5882                             0,
33396 8684                        00            .byte	0
33397                                           ! 5883                           8,
33398 8685                        08            .byte	8
33399                                           ! 5884                                16,
33400 8686                        10            .byte	$10
33401                                           ! 5885                             8,
33402 8687                        08            .byte	8
33403                                           ! 5886                                  8,
33404 8688                        08            .byte	8
33405                                           ! 5887                            8,
33406 8689                        08            .byte	8
33407                                           ! 5888                                 0,
33408 868A                        00            .byte	0
33409                                           ! 5889                            8,
33410 868B                        08            .byte	8
33411                                           ! 5890                                 24,
33412 868C                        18            .byte	$18
33413                                           ! 5891                          0,
33414 868D                      0000            .word	0
33415 868F                      0000            .word	0
33416                                           ! 5892 } },
33417                                           ! 5893 { 0x0145,
33418 8691                      0145            .word	$145
33419                                           ! 5894 { 0x0001 | 0x0002 | 0x0008 | 0x00
33420                                           ! 5894 80 | 0x0010,
33421 8693                      009B            .word	$9B
33422                                           ! 5895                           0x01 | 0x02 | 0x04,
33423 8695                        07            .byte	7
33424                                           ! 5896                           0,
33425 8696                        00            .byte	0
33426                                           ! 5897                           64,
33427 8697                      0040            .word	$40
33428                                           ! 5898                    64,
33429 8699                      0040            .word	$40
33430                                           ! 5899                        0xA000,
33431 869B                      A000            .word	$A000
33432                                           ! 5900                        0x0000,
33433 869D                      0000            .word	0
33434                                           ! 5901                       0,
33435 869F                      0000            .word	0
33436 86A1                      0000            .word	0
33437                                           ! 5902                             5120,
33438 86A3                      1400            .word	$1400
33439                                           ! 5903                        1280,
33440 86A5                      0500            .word	$500
33441                                           ! 5904                        1024,
33442 86A7                      0400            .word	$400
33443                                           ! 5905                      8,
33444 86A9                        08            .byte	8
33445                                           ! 5906                      16,
33446 86AA                        10            .byte	$10
33447                                           ! 5907                           1,
33448 86AB                        01            .byte	1
33449                                           ! 5908                         32,
33450 86AC                        20            .byte	$20
33451                                           ! 5909                          80,
33452 86AD                        50            .byte	$50
33453                                           ! 5910                        0x06,
33454 86AE                        06            .byte	6
33455                                           ! 5911                     0,
33456 86AF                        00            .byte	0
33457                                           ! 5912                               2,
33458 86B0                        02            .byte	2
33459                                           ! 5913                          0,
33460 86B1                        00            .byte	0
33461                                           ! 5914                        8,
33462 86B2                        08            .byte	8
33463                                           ! 5915                             16,
33464 86B3                        10            .byte	$10
33465                                           ! 5916                          8,
33466 86B4                        08            .byte	8
33467                                           ! 5917                               8,
33468 86B5                        08            .byte	8
33469                                           ! 5918                         8,
33470 86B6                        08            .byte	8
33471                                           ! 5919                              0,
33472 86B7                        00            .byte	0
33473                                           ! 5920                         8,
33474 86B8                        08            .byte	8
33475                                           ! 5921                              24,
33476 86B9                        18            .byte	$18
33477                                           ! 5922                                0x02,
33478 86BA                        02            .byte	2
33479                                           ! 5923                        0xE0000000,
33480 86BB                      0000            .word	0
33481 86BD                      E000            .word	$E000
33482                                           ! 5924                               0,
33483 86BF                      0000            .word	0
33484 86C1                      0000            .word	0
33485                                           ! 5925                             0,
33486 86C3                      0000            .word	0
33487                                           ! 5926                                5120,
33488 86C5                      1400            .word	$1400
33489                                           ! 5927                             0,
33490 86C7                        00            .byte	0
33491                                           ! 5928                             0,
33492 86C8                        00            .byte	0
33493                                           ! 5929                           8,
33494 86C9                        08            .byte	8
33495                                           ! 5930                                16,
33496 86CA                        10            .byte	$10
33497                                           ! 5931                             8,
33498 86CB                        08            .byte	8
33499                                           ! 5932                                  8,
33500 86CC                        08            .byte	8
33501                                           ! 5933                            8,
33502 86CD                        08            .byte	8
33503                                           ! 5934                                 0,
33504 86CE                        00            .byte	0
33505                                           ! 5935                            8,
33506 86CF                        08            .byte	8
33507                                           ! 5936                                 24,
33508 86D0                        18            .byte	$18
33509                                           ! 5937                          0,
33510 86D1                      0000            .word	0
33511 86D3                      0000            .word	0
33512                                           ! 5938 } },
33513                                           ! 5939 { 0x0146,
33514 86D5                      0146            .word	$146
33515                                           ! 5940 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33516 86D7                      009B            .word	$9B
33517                                           ! 5941                           0x01 | 0x02 | 0x04,
33518 86D9                        07            .byte	7
33519                                           ! 5942                           0,
33520 86DA                        00            .byte	0
33521                                           ! 5943                           64,
33522 86DB                      0040            .word	$40
33523                                           ! 5944                    64,
33524 86DD                      0040            .word	$40
33525                                           ! 5945                        0xA000,
33526 86DF                      A000            .word	$A000
33527                                           ! 5946                        0x0000,
33528 86E1                      0000            .word	0
33529                                           ! 5947                       0,
33530 86E3                      0000            .word	0
33531 86E5                      0000            .word	0
33532                                           ! 5948                             320,
33533 86E7                      0140            .word	$140
33534                                           ! 5949                        320,
33535 86E9                      0140            .word	$140
33536                                           ! 5950                        200,
33537 86EB                      00C8            .word	$C8
33538                                           ! 5951                      8,
33539 86ED                        08            .byte	8
33540                                           ! 5952                      16,
33541 86EE                        10            .byte	$10
33542                                           ! 5953                           1,
33543 86EF                        01            .byte	1
33544                                           ! 5954                         8,
33545 86F0                        08            .byte	8
33546                                           ! 5955                          1,
33547 86F1                        01            .byte	1
33548                                           ! 5956                        0x04,
33549 86F2                        04            .byte	4
33550                                           ! 5957                     0,
33551 86F3                        00            .byte	0
33552                                           ! 5958                               261,
33553 86F4                        05            .byte	5
33554                                           ! 5959                          0,
33555 86F5                        00            .byte	0
33556                                           ! 5960                        0,
33557 86F6                        00            .byte	0
33558                                           ! 5961                             0,
33559 86F7                        00            .byte	0
33560                                           ! 5962                          0,
33561 86F8                        00            .byte	0
33562                                           ! 5963                    
33563                                           ! 5963            0,
33564 86F9                        00            .byte	0
33565                                           ! 5964                         0,
33566 86FA                        00            .byte	0
33567                                           ! 5965                              0,
33568 86FB                        00            .byte	0
33569                                           ! 5966                         0,
33570 86FC                        00            .byte	0
33571                                           ! 5967                              0,
33572 86FD                        00            .byte	0
33573                                           ! 5968                                0,
33574 86FE                        00            .byte	0
33575                                           ! 5969                        0xE0000000,
33576 86FF                      0000            .word	0
33577 8701                      E000            .word	$E000
33578                                           ! 5970                               0,
33579 8703                      0000            .word	0
33580 8705                      0000            .word	0
33581                                           ! 5971                             0,
33582 8707                      0000            .word	0
33583                                           ! 5972                                320,
33584 8709                      0140            .word	$140
33585                                           ! 5973                             0,
33586 870B                        00            .byte	0
33587                                           ! 5974                             0,
33588 870C                        00            .byte	0
33589                                           ! 5975                           0,
33590 870D                        00            .byte	0
33591                                           ! 5976                                0,
33592 870E                        00            .byte	0
33593                                           ! 5977                             0,
33594 870F                        00            .byte	0
33595                                           ! 5978                                  0,
33596 8710                        00            .byte	0
33597                                           ! 5979                            0,
33598 8711                        00            .byte	0
33599                                           ! 5980                                 0,
33600 8712                        00            .byte	0
33601                                           ! 5981                            0,
33602 8713                        00            .byte	0
33603                                           ! 5982                                 0,
33604 8714                        00            .byte	0
33605                                           ! 5983                          0,
33606 8715                      0000            .word	0
33607 8717                      0000            .word	0
33608                                           ! 5984 } },
33609                                           ! 5985 { 0x0147,
33610 8719                      0147            .word	$147
33611                                           ! 5986 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33612 871B                      009B            .word	$9B
33613                                           ! 5987                           0x01 | 0x02 | 0x04,
33614 871D                        07            .byte	7
33615                                           ! 5988                           0,
33616 871E                        00            .byte	0
33617                                           ! 5989                           64,
33618 871F                      0040            .word	$40
33619                                           ! 5990                    64,
33620 8721                      0040            .word	$40
33621                                           ! 5991                        0xA000,
33622 8723                      A000            .word	$A000
33623                                           ! 5992                        0x0000,
33624 8725                      0000            .word	0
33625                                           ! 5993                       0,
33626 8727                      0000            .word	0
33627 8729                      0000            .word	0
33628                                           ! 5994                             6400,
33629 872B                      1900            .word	$1900
33630                                           ! 5995                        1600,
33631 872D                      0640            .word	$640
33632                                           ! 5996                        1200,
33633 872F                      04B0            .word	$4B0
33634                                           ! 5997                      8,
33635 8731                        08            .byte	8
33636                                           ! 5998                      16,
33637 8732                        10            .byte	$10
33638                                           ! 5999                           1,
33639 8733                        01            .byte	1
33640                                           ! 6000                         32,
33641 8734                        20            .byte	$20
33642                                           ! 6001                          118,
33643 8735                        76            .byte	$76
33644                                           ! 6002                        0x06,
33645 8736                        06            .byte	6
33646                                           ! 6003                     0,
33647 8737                        00            .byte	0
33648                                           ! 6004                               1,
33649 8738                        01            .byte	1
33650                                           ! 6005                          0,
33651 8739                        00            .byte	0
33652                                           ! 6006                        8,
33653 873A                        08            .byte	8
33654                                           ! 6007                             16,
33655 873B                        10            .byte	$10
33656                                           ! 6008                          8,
33657 873C                        08            .byte	8
33658                                           ! 6009                               8,
33659 873D                        08            .byte	8
33660                                           ! 6010                         8,
33661 873E                        08            .byte	8
33662                                           ! 6011                              0,
33663 873F                        00            .byte	0
33664                                           ! 6012                         8,
33665 8740                        08            .byte	8
33666                                           ! 6013                              24,
33667 8741                        18            .byte	$18
33668                                           ! 6014                                0x02,
33669 8742                        02            .byte	2
33670                                           ! 6015                        0xE0000000,
33671 8743                      0000            .word	0
33672 8745                      E000            .word	$E000
33673                                           ! 6016                               0,
33674 8747                      0000            .word	0
33675 8749                      0000            .word	0
33676                                           ! 6017                             0,
33677 874B                      0000            .word	0
33678                                           ! 6018                                6400,
33679 874D                      1900            .word	$1900
33680                                           ! 6019                             0,
33681 874F                        00            .byte	0
33682                                           ! 6020                             0,
33683 8750                        00            .byte	0
33684                                           ! 6021                           8,
33685 8751                        08            .byte	8
33686                                           ! 6022                                16,
33687 8752                        10            .byte	$10
33688                                           ! 6023                             8,
33689 8753                        08            .byte	8
33690                                           ! 6024                                  8,
33691 8754                        08            .byte	8
33692                                           ! 6025                            8,
33693 8755                        08            .byte	8
33694                                           ! 6026                                 0,
33695 8756                        00            .byte	0
33696                                           ! 6027                            8,
33697 8757                        08            .byte	8
33698                                           ! 6028                                 24,
33699 8758                        18            .byte	$18
33700                                           ! 6029                          0,
33701 8759                      0000            .word	0
33702 875B                      0000            .word	0
33703                                           ! 6030 } },
33704                                           ! 6031 { 0x0148,
33705 875D                      0148            .word	$148
33706                                           ! 6032 { 
33707                                           ! 6032 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33708 875F                      009B            .word	$9B
33709                                           ! 6033                           0x01 | 0x02 | 0x04,
33710 8761                        07            .byte	7
33711                                           ! 6034                           0,
33712 8762                        00            .byte	0
33713                                           ! 6035                           64,
33714 8763                      0040            .word	$40
33715                                           ! 6036                    64,
33716 8765                      0040            .word	$40
33717                                           ! 6037                        0xA000,
33718 8767                      A000            .word	$A000
33719                                           ! 6038                        0x0000,
33720 8769                      0000            .word	0
33721                                           ! 6039                       0,
33722 876B                      0000            .word	0
33723 876D                      0000            .word	0
33724                                           ! 6040                             1152,
33725 876F                      0480            .word	$480
33726                                           ! 6041                        1152,
33727 8771                      0480            .word	$480
33728                                           ! 6042                        864,
33729 8773                      0360            .word	$360
33730                                           ! 6043                      8,
33731 8775                        08            .byte	8
33732                                           ! 6044                      16,
33733 8776                        10            .byte	$10
33734                                           ! 6045                           1,
33735 8777                        01            .byte	1
33736                                           ! 6046                         8,
33737 8778                        08            .byte	8
33738                                           ! 6047                          16,
33739 8779                        10            .byte	$10
33740                                           ! 6048                        0x04,
33741 877A                        04            .byte	4
33742                                           ! 6049                     0,
33743 877B                        00            .byte	0
33744                                           ! 6050                               15,
33745 877C                        0F            .byte	$F
33746                                           ! 6051                          0,
33747 877D                        00            .byte	0
33748                                           ! 6052                        0,
33749 877E                        00            .byte	0
33750                                           ! 6053                             0,
33751 877F                        00            .byte	0
33752                                           ! 6054                          0,
33753 8780                        00            .byte	0
33754                                           ! 6055                               0,
33755 8781                        00            .byte	0
33756                                           ! 6056                         0,
33757 8782                        00            .byte	0
33758                                           ! 6057                              0,
33759 8783                        00            .byte	0
33760                                           ! 6058                         0,
33761 8784                        00            .byte	0
33762                                           ! 6059                              0,
33763 8785                        00            .byte	0
33764                                           ! 6060                                0,
33765 8786                        00            .byte	0
33766                                           ! 6061                        0xE0000000,
33767 8787                      0000            .word	0
33768 8789                      E000            .word	$E000
33769                                           ! 6062                               0,
33770 878B                      0000            .word	0
33771 878D                      0000            .word	0
33772                                           ! 6063                             0,
33773 878F                      0000            .word	0
33774                                           ! 6064                                1152,
33775 8791                      0480            .word	$480
33776                                           ! 6065                             0,
33777 8793                        00            .byte	0
33778                                           ! 6066                             0,
33779 8794                        00            .byte	0
33780                                           ! 6067                           0,
33781 8795                        00            .byte	0
33782                                           ! 6068                                0,
33783 8796                        00            .byte	0
33784                                           ! 6069                             0,
33785 8797                        00            .byte	0
33786                                           ! 6070                                  0,
33787 8798                        00            .byte	0
33788                                           ! 6071                            0,
33789 8799                        00            .byte	0
33790                                           ! 6072                                 0,
33791 879A                        00            .byte	0
33792                                           ! 6073                            0,
33793 879B                        00            .byte	0
33794                                           ! 6074                                 0,
33795 879C                        00            .byte	0
33796                                           ! 6075                          0,
33797 879D                      0000            .word	0
33798 879F                      0000            .word	0
33799                                           ! 6076 } },
33800                                           ! 6077 { 0x0149,
33801 87A1                      0149            .word	$149
33802                                           ! 6078 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33803 87A3                      009B            .word	$9B
33804                                           ! 6079                           0x01 | 0x02 | 0x04,
33805 87A5                        07            .byte	7
33806                                           ! 6080                           0,
33807 87A6                        00            .byte	0
33808                                           ! 6081                           64,
33809 87A7                      0040            .word	$40
33810                                           ! 6082                    64,
33811 87A9                      0040            .word	$40
33812                                           ! 6083                        0xA000,
33813 87AB                      A000            .word	$A000
33814                                           ! 6084                        0x0000,
33815 87AD                      0000            .word	0
33816                                           ! 6085                       0,
33817 87AF                      0000            .word	0
33818 87B1                      0000            .word	0
33819                                           ! 6086                             2304,
33820 87B3                      0900            .word	$900
33821                                           ! 6087                        1152,
33822 87B5                      0480            .word	$480
33823                                           ! 6088                        864,
33824 87B7                      0360            .word	$360
33825                                           ! 6089                      8,
33826 87B9                        08            .byte	8
33827                                           ! 6090                      16,
33828 87BA                        10            .byte	$10
33829                                           ! 6091                           1,
33830 87BB                        01            .byte	1
33831                                           ! 6092                         15,
33832 87BC                        0F            .byte	$F
33833                                           ! 6093                          31,
33834 87BD                        1F            .byte	$1F
33835                                           ! 6094                        0x06,
33836 87BE                        06            .byte	6
33837                                           ! 6095                     0,
33838 87BF                        00            .byte	0
33839                                           ! 6096                               7,
33840 87C0                        07            .byte	7
33841                                           ! 6097                          0,
33842 87C1                        00            .byte	0
33843                                           ! 6098                        5,
33844 87C2                        05            .byte	5
33845                                           ! 6099                             10,
33846 87C3                        0A            .byte	$A
33847                                           ! 6100                      
33848                                           ! 6100     5,
33849 87C4                        05            .byte	5
33850                                           ! 6101                               5,
33851 87C5                        05            .byte	5
33852                                           ! 6102                         5,
33853 87C6                        05            .byte	5
33854                                           ! 6103                              0,
33855 87C7                        00            .byte	0
33856                                           ! 6104                         1,
33857 87C8                        01            .byte	1
33858                                           ! 6105                              15,
33859 87C9                        0F            .byte	$F
33860                                           ! 6106                                0,
33861 87CA                        00            .byte	0
33862                                           ! 6107                        0xE0000000,
33863 87CB                      0000            .word	0
33864 87CD                      E000            .word	$E000
33865                                           ! 6108                               0,
33866 87CF                      0000            .word	0
33867 87D1                      0000            .word	0
33868                                           ! 6109                             0,
33869 87D3                      0000            .word	0
33870                                           ! 6110                                2304,
33871 87D5                      0900            .word	$900
33872                                           ! 6111                             0,
33873 87D7                        00            .byte	0
33874                                           ! 6112                             0,
33875 87D8                        00            .byte	0
33876                                           ! 6113                           5,
33877 87D9                        05            .byte	5
33878                                           ! 6114                                10,
33879 87DA                        0A            .byte	$A
33880                                           ! 6115                             5,
33881 87DB                        05            .byte	5
33882                                           ! 6116                                  5,
33883 87DC                        05            .byte	5
33884                                           ! 6117                            5,
33885 87DD                        05            .byte	5
33886                                           ! 6118                                 0,
33887 87DE                        00            .byte	0
33888                                           ! 6119                            1,
33889 87DF                        01            .byte	1
33890                                           ! 6120                                 15,
33891 87E0                        0F            .byte	$F
33892                                           ! 6121                          0,
33893 87E1                      0000            .word	0
33894 87E3                      0000            .word	0
33895                                           ! 6122 } },
33896                                           ! 6123 { 0x014a,
33897 87E5                      014A            .word	$14A
33898                                           ! 6124 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33899 87E7                      009B            .word	$9B
33900                                           ! 6125                           0x01 | 0x02 | 0x04,
33901 87E9                        07            .byte	7
33902                                           ! 6126                           0,
33903 87EA                        00            .byte	0
33904                                           ! 6127                           64,
33905 87EB                      0040            .word	$40
33906                                           ! 6128                    64,
33907 87ED                      0040            .word	$40
33908                                           ! 6129                        0xA000,
33909 87EF                      A000            .word	$A000
33910                                           ! 6130                        0x0000,
33911 87F1                      0000            .word	0
33912                                           ! 6131                       0,
33913 87F3                      0000            .word	0
33914 87F5                      0000            .word	0
33915                                           ! 6132                             2304,
33916 87F7                      0900            .word	$900
33917                                           ! 6133                        1152,
33918 87F9                      0480            .word	$480
33919                                           ! 6134                        864,
33920 87FB                      0360            .word	$360
33921                                           ! 6135                      8,
33922 87FD                        08            .byte	8
33923                                           ! 6136                      16,
33924 87FE                        10            .byte	$10
33925                                           ! 6137                           1,
33926 87FF                        01            .byte	1
33927                                           ! 6138                         16,
33928 8800                        10            .byte	$10
33929                                           ! 6139                          31,
33930 8801                        1F            .byte	$1F
33931                                           ! 6140                        0x06,
33932 8802                        06            .byte	6
33933                                           ! 6141                     0,
33934 8803                        00            .byte	0
33935                                           ! 6142                               7,
33936 8804                        07            .byte	7
33937                                           ! 6143                          0,
33938 8805                        00            .byte	0
33939                                           ! 6144                        5,
33940 8806                        05            .byte	5
33941                                           ! 6145                             11,
33942 8807                        0B            .byte	$B
33943                                           ! 6146                          6,
33944 8808                        06            .byte	6
33945                                           ! 6147                               5,
33946 8809                        05            .byte	5
33947                                           ! 6148                         5,
33948 880A                        05            .byte	5
33949                                           ! 6149                              0,
33950 880B                        00            .byte	0
33951                                           ! 6150                         0,
33952 880C                        00            .byte	0
33953                                           ! 6151                              0,
33954 880D                        00            .byte	0
33955                                           ! 6152                                0,
33956 880E                        00            .byte	0
33957                                           ! 6153                        0xE0000000,
33958 880F                      0000            .word	0
33959 8811                      E000            .word	$E000
33960                                           ! 6154                               0,
33961 8813                      0000            .word	0
33962 8815                      0000            .word	0
33963                                           ! 6155                             0,
33964 8817                      0000            .word	0
33965                                           ! 6156                                2304,
33966 8819                      0900            .word	$900
33967                                           ! 6157                             0,
33968 881B                        00            .byte	0
33969                                           ! 6158                             0,
33970 881C                        00            .byte	0
33971                                           ! 6159                           5,
33972 881D                        05            .byte	5
33973                                           ! 6160                                11,
33974 881E                        0B            .byte	$B
33975                                           ! 6161                             6,
33976 881F                        06            .byte	6
33977                                           ! 6162                                  5,
33978 8820                        05            .byte	5
33979                                           ! 6163                            5,
33980 8821                        05            .byte	5
33981                                           ! 6164                                 0,
33982 8822                        00            .byte	0
33983                                           ! 6165                            0,
33984 8823                        00            .byte	0
33985                                           ! 6166                                 0,
33986 8824                        00            .byte	0
33987                                           ! 6167                       
33988                                           ! 6167    0,
33989 8825                      0000            .word	0
33990 8827                      0000            .word	0
33991                                           ! 6168 } },
33992                                           ! 6169 { 0x014b,
33993 8829                      014B            .word	$14B
33994                                           ! 6170 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33995 882B                      009B            .word	$9B
33996                                           ! 6171                           0x01 | 0x02 | 0x04,
33997 882D                        07            .byte	7
33998                                           ! 6172                           0,
33999 882E                        00            .byte	0
34000                                           ! 6173                           64,
34001 882F                      0040            .word	$40
34002                                           ! 6174                    64,
34003 8831                      0040            .word	$40
34004                                           ! 6175                        0xA000,
34005 8833                      A000            .word	$A000
34006                                           ! 6176                        0x0000,
34007 8835                      0000            .word	0
34008                                           ! 6177                       0,
34009 8837                      0000            .word	0
34010 8839                      0000            .word	0
34011                                           ! 6178                             3456,
34012 883B                      0D80            .word	$D80
34013                                           ! 6179                        1152,
34014 883D                      0480            .word	$480
34015                                           ! 6180                        864,
34016 883F                      0360            .word	$360
34017                                           ! 6181                      8,
34018 8841                        08            .byte	8
34019                                           ! 6182                      16,
34020 8842                        10            .byte	$10
34021                                           ! 6183                           1,
34022 8843                        01            .byte	1
34023                                           ! 6184                         24,
34024 8844                        18            .byte	$18
34025                                           ! 6185                          46,
34026 8845                        2E            .byte	$2E
34027                                           ! 6186                        0x06,
34028 8846                        06            .byte	6
34029                                           ! 6187                     0,
34030 8847                        00            .byte	0
34031                                           ! 6188                               4,
34032 8848                        04            .byte	4
34033                                           ! 6189                          0,
34034 8849                        00            .byte	0
34035                                           ! 6190                        8,
34036 884A                        08            .byte	8
34037                                           ! 6191                             16,
34038 884B                        10            .byte	$10
34039                                           ! 6192                          8,
34040 884C                        08            .byte	8
34041                                           ! 6193                               8,
34042 884D                        08            .byte	8
34043                                           ! 6194                         8,
34044 884E                        08            .byte	8
34045                                           ! 6195                              0,
34046 884F                        00            .byte	0
34047                                           ! 6196                         0,
34048 8850                        00            .byte	0
34049                                           ! 6197                              0,
34050 8851                        00            .byte	0
34051                                           ! 6198                                0,
34052 8852                        00            .byte	0
34053                                           ! 6199                        0xE0000000,
34054 8853                      0000            .word	0
34055 8855                      E000            .word	$E000
34056                                           ! 6200                               0,
34057 8857                      0000            .word	0
34058 8859                      0000            .word	0
34059                                           ! 6201                             0,
34060 885B                      0000            .word	0
34061                                           ! 6202                                3456,
34062 885D                      0D80            .word	$D80
34063                                           ! 6203                             0,
34064 885F                        00            .byte	0
34065                                           ! 6204                             0,
34066 8860                        00            .byte	0
34067                                           ! 6205                           8,
34068 8861                        08            .byte	8
34069                                           ! 6206                                16,
34070 8862                        10            .byte	$10
34071                                           ! 6207                             8,
34072 8863                        08            .byte	8
34073                                           ! 6208                                  8,
34074 8864                        08            .byte	8
34075                                           ! 6209                            8,
34076 8865                        08            .byte	8
34077                                           ! 6210                                 0,
34078 8866                        00            .byte	0
34079                                           ! 6211                            0,
34080 8867                        00            .byte	0
34081                                           ! 6212                                 0,
34082 8868                        00            .byte	0
34083                                           ! 6213                          0,
34084 8869                      0000            .word	0
34085 886B                      0000            .word	0
34086                                           ! 6214 } },
34087                                           ! 6215 { 0x014c,
34088 886D                      014C            .word	$14C
34089                                           ! 6216 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34090 886F                      009B            .word	$9B
34091                                           ! 6217                           0x01 | 0x02 | 0x04,
34092 8871                        07            .byte	7
34093                                           ! 6218                           0,
34094 8872                        00            .byte	0
34095                                           ! 6219                           64,
34096 8873                      0040            .word	$40
34097                                           ! 6220                    64,
34098 8875                      0040            .word	$40
34099                                           ! 6221                        0xA000,
34100 8877                      A000            .word	$A000
34101                                           ! 6222                        0x0000,
34102 8879                      0000            .word	0
34103                                           ! 6223                       0,
34104 887B                      0000            .word	0
34105 887D                      0000            .word	0
34106                                           ! 6224                             4608,
34107 887F                      1200            .word	$1200
34108                                           ! 6225                        1152,
34109 8881                      0480            .word	$480
34110                                           ! 6226                        864,
34111 8883                      0360            .word	$360
34112                                           ! 6227                      8,
34113 8885                        08            .byte	8
34114                                           ! 6228                      16,
34115 8886                        10            .byte	$10
34116                                           ! 6229                           1,
34117 8887                        01            .byte	1
34118                                           ! 6230                         32,
34119 8888                        20            .byte	$20
34120                                           ! 6231                          61,
34121 8889                        3D            .byte	$3D
34122                                           ! 6232                        0x06,
34123 888A                        06            .byte	6
34124                                           ! 6233                     0,
34125 888B                        00            .byte	0
34126                                           ! 6234                               3,
34127 888C                        03            .byte	3
34128                                           ! 6235                          0,
34129 888D                        00            .byte	0
34130                                           ! 6236                        8,
34131 888E                        08            .byte	8
34132                                           ! 6237                             
34133                                           ! 6237 16,
34134 888F                        10            .byte	$10
34135                                           ! 6238                          8,
34136 8890                        08            .byte	8
34137                                           ! 6239                               8,
34138 8891                        08            .byte	8
34139                                           ! 6240                         8,
34140 8892                        08            .byte	8
34141                                           ! 6241                              0,
34142 8893                        00            .byte	0
34143                                           ! 6242                         8,
34144 8894                        08            .byte	8
34145                                           ! 6243                              24,
34146 8895                        18            .byte	$18
34147                                           ! 6244                                0x02,
34148 8896                        02            .byte	2
34149                                           ! 6245                        0xE0000000,
34150 8897                      0000            .word	0
34151 8899                      E000            .word	$E000
34152                                           ! 6246                               0,
34153 889B                      0000            .word	0
34154 889D                      0000            .word	0
34155                                           ! 6247                             0,
34156 889F                      0000            .word	0
34157                                           ! 6248                                4608,
34158 88A1                      1200            .word	$1200
34159                                           ! 6249                             0,
34160 88A3                        00            .byte	0
34161                                           ! 6250                             0,
34162 88A4                        00            .byte	0
34163                                           ! 6251                           8,
34164 88A5                        08            .byte	8
34165                                           ! 6252                                16,
34166 88A6                        10            .byte	$10
34167                                           ! 6253                             8,
34168 88A7                        08            .byte	8
34169                                           ! 6254                                  8,
34170 88A8                        08            .byte	8
34171                                           ! 6255                            8,
34172 88A9                        08            .byte	8
34173                                           ! 6256                                 0,
34174 88AA                        00            .byte	0
34175                                           ! 6257                            8,
34176 88AB                        08            .byte	8
34177                                           ! 6258                                 24,
34178 88AC                        18            .byte	$18
34179                                           ! 6259                          0,
34180 88AD                      0000            .word	0
34181 88AF                      0000            .word	0
34182                                           ! 6260 } },
34183                                           ! 6261 { 0x0178,
34184 88B1                      0178            .word	$178
34185                                           ! 6262 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34186 88B3                      009B            .word	$9B
34187                                           ! 6263                           0x01 | 0x02 | 0x04,
34188 88B5                        07            .byte	7
34189                                           ! 6264                           0,
34190 88B6                        00            .byte	0
34191                                           ! 6265                           64,
34192 88B7                      0040            .word	$40
34193                                           ! 6266                    64,
34194 88B9                      0040            .word	$40
34195                                           ! 6267                        0xA000,
34196 88BB                      A000            .word	$A000
34197                                           ! 6268                        0x0000,
34198 88BD                      0000            .word	0
34199                                           ! 6269                       0,
34200 88BF                      0000            .word	0
34201 88C1                      0000            .word	0
34202                                           ! 6270                             2560,
34203 88C3                      0A00            .word	$A00
34204                                           ! 6271                        1280,
34205 88C5                      0500            .word	$500
34206                                           ! 6272                        800,
34207 88C7                      0320            .word	$320
34208                                           ! 6273                      8,
34209 88C9                        08            .byte	8
34210                                           ! 6274                      16,
34211 88CA                        10            .byte	$10
34212                                           ! 6275                           1,
34213 88CB                        01            .byte	1
34214                                           ! 6276                         16,
34215 88CC                        10            .byte	$10
34216                                           ! 6277                          32,
34217 88CD                        20            .byte	$20
34218                                           ! 6278                        0x06,
34219 88CE                        06            .byte	6
34220                                           ! 6279                     0,
34221 88CF                        00            .byte	0
34222                                           ! 6280                               7,
34223 88D0                        07            .byte	7
34224                                           ! 6281                          0,
34225 88D1                        00            .byte	0
34226                                           ! 6282                        5,
34227 88D2                        05            .byte	5
34228                                           ! 6283                             11,
34229 88D3                        0B            .byte	$B
34230                                           ! 6284                          6,
34231 88D4                        06            .byte	6
34232                                           ! 6285                               5,
34233 88D5                        05            .byte	5
34234                                           ! 6286                         5,
34235 88D6                        05            .byte	5
34236                                           ! 6287                              0,
34237 88D7                        00            .byte	0
34238                                           ! 6288                         0,
34239 88D8                        00            .byte	0
34240                                           ! 6289                              0,
34241 88D9                        00            .byte	0
34242                                           ! 6290                                0,
34243 88DA                        00            .byte	0
34244                                           ! 6291                        0xE0000000,
34245 88DB                      0000            .word	0
34246 88DD                      E000            .word	$E000
34247                                           ! 6292                               0,
34248 88DF                      0000            .word	0
34249 88E1                      0000            .word	0
34250                                           ! 6293                             0,
34251 88E3                      0000            .word	0
34252                                           ! 6294                                2560,
34253 88E5                      0A00            .word	$A00
34254                                           ! 6295                             0,
34255 88E7                        00            .byte	0
34256                                           ! 6296                             0,
34257 88E8                        00            .byte	0
34258                                           ! 6297                           5,
34259 88E9                        05            .byte	5
34260                                           ! 6298                                11,
34261 88EA                        0B            .byte	$B
34262                                           ! 6299                             6,
34263 88EB                        06            .byte	6
34264                                           ! 6300                                  5,
34265 88EC                        05            .byte	5
34266                                           ! 6301                            5,
34267 88ED                        05            .byte	5
34268                                           ! 6302                                 0,
34269 88EE                        00            .byte	0
34270                                           ! 6303                            0,
34271 88EF                        00            .byte	0
34272                                           ! 6304                              
34273                                           ! 6304    0,
34274 88F0                        00            .byte	0
34275                                           ! 6305                          0,
34276 88F1                      0000            .word	0
34277 88F3                      0000            .word	0
34278                                           ! 6306 } },
34279                                           ! 6307 { 0x0179,
34280 88F5                      0179            .word	$179
34281                                           ! 6308 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34282 88F7                      009B            .word	$9B
34283                                           ! 6309                           0x01 | 0x02 | 0x04,
34284 88F9                        07            .byte	7
34285                                           ! 6310                           0,
34286 88FA                        00            .byte	0
34287                                           ! 6311                           64,
34288 88FB                      0040            .word	$40
34289                                           ! 6312                    64,
34290 88FD                      0040            .word	$40
34291                                           ! 6313                        0xA000,
34292 88FF                      A000            .word	$A000
34293                                           ! 6314                        0x0000,
34294 8901                      0000            .word	0
34295                                           ! 6315                       0,
34296 8903                      0000            .word	0
34297 8905                      0000            .word	0
34298                                           ! 6316                             3840,
34299 8907                      0F00            .word	$F00
34300                                           ! 6317                        1280,
34301 8909                      0500            .word	$500
34302                                           ! 6318                        800,
34303 890B                      0320            .word	$320
34304                                           ! 6319                      8,
34305 890D                        08            .byte	8
34306                                           ! 6320                      16,
34307 890E                        10            .byte	$10
34308                                           ! 6321                           1,
34309 890F                        01            .byte	1
34310                                           ! 6322                         24,
34311 8910                        18            .byte	$18
34312                                           ! 6323                          47,
34313 8911                        2F            .byte	$2F
34314                                           ! 6324                        0x06,
34315 8912                        06            .byte	6
34316                                           ! 6325                     0,
34317 8913                        00            .byte	0
34318                                           ! 6326                               4,
34319 8914                        04            .byte	4
34320                                           ! 6327                          0,
34321 8915                        00            .byte	0
34322                                           ! 6328                        8,
34323 8916                        08            .byte	8
34324                                           ! 6329                             16,
34325 8917                        10            .byte	$10
34326                                           ! 6330                          8,
34327 8918                        08            .byte	8
34328                                           ! 6331                               8,
34329 8919                        08            .byte	8
34330                                           ! 6332                         8,
34331 891A                        08            .byte	8
34332                                           ! 6333                              0,
34333 891B                        00            .byte	0
34334                                           ! 6334                         0,
34335 891C                        00            .byte	0
34336                                           ! 6335                              0,
34337 891D                        00            .byte	0
34338                                           ! 6336                                0,
34339 891E                        00            .byte	0
34340                                           ! 6337                        0xE0000000,
34341 891F                      0000            .word	0
34342 8921                      E000            .word	$E000
34343                                           ! 6338                               0,
34344 8923                      0000            .word	0
34345 8925                      0000            .word	0
34346                                           ! 6339                             0,
34347 8927                      0000            .word	0
34348                                           ! 6340                                3840,
34349 8929                      0F00            .word	$F00
34350                                           ! 6341                             0,
34351 892B                        00            .byte	0
34352                                           ! 6342                             0,
34353 892C                        00            .byte	0
34354                                           ! 6343                           8,
34355 892D                        08            .byte	8
34356                                           ! 6344                                16,
34357 892E                        10            .byte	$10
34358                                           ! 6345                             8,
34359 892F                        08            .byte	8
34360                                           ! 6346                                  8,
34361 8930                        08            .byte	8
34362                                           ! 6347                            8,
34363 8931                        08            .byte	8
34364                                           ! 6348                                 0,
34365 8932                        00            .byte	0
34366                                           ! 6349                            0,
34367 8933                        00            .byte	0
34368                                           ! 6350                                 0,
34369 8934                        00            .byte	0
34370                                           ! 6351                          0,
34371 8935                      0000            .word	0
34372 8937                      0000            .word	0
34373                                           ! 6352 } },
34374                                           ! 6353 { 0x017a,
34375 8939                      017A            .word	$17A
34376                                           ! 6354 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34377 893B                      009B            .word	$9B
34378                                           ! 6355                           0x01 | 0x02 | 0x04,
34379 893D                        07            .byte	7
34380                                           ! 6356                           0,
34381 893E                        00            .byte	0
34382                                           ! 6357                           64,
34383 893F                      0040            .word	$40
34384                                           ! 6358                    64,
34385 8941                      0040            .word	$40
34386                                           ! 6359                        0xA000,
34387 8943                      A000            .word	$A000
34388                                           ! 6360                        0x0000,
34389 8945                      0000            .word	0
34390                                           ! 6361                       0,
34391 8947                      0000            .word	0
34392 8949                      0000            .word	0
34393                                           ! 6362                             5120,
34394 894B                      1400            .word	$1400
34395                                           ! 6363                        1280,
34396 894D                      0500            .word	$500
34397                                           ! 6364                        800,
34398 894F                      0320            .word	$320
34399                                           ! 6365                      8,
34400 8951                        08            .byte	8
34401                                           ! 6366                      16,
34402 8952                        10            .byte	$10
34403                                           ! 6367                           1,
34404 8953                        01            .byte	1
34405                                           ! 6368                         32,
34406 8954                        20            .byte	$20
34407                                           ! 6369                          63,
34408 8955                        3F            .byte	$3F
34409                                           ! 6370                        0x06,
34410 8956                        06            .byte	6
34411                                           ! 6371                     0,
34412 8957                        00            .byte	0
34413                                           ! 6372                               3,
34414 8958                        03            .byte	3
34415                                           ! 6373                          0,
34416 8959                        00            .byte	0
34417                                           ! 6374                        8,
34418 895A                        08            .byte	8
34419                                           ! 6375 
34420                                           ! 6375                             16,
34421 895B                        10            .byte	$10
34422                                           ! 6376                          8,
34423 895C                        08            .byte	8
34424                                           ! 6377                               8,
34425 895D                        08            .byte	8
34426                                           ! 6378                         8,
34427 895E                        08            .byte	8
34428                                           ! 6379                              0,
34429 895F                        00            .byte	0
34430                                           ! 6380                         8,
34431 8960                        08            .byte	8
34432                                           ! 6381                              24,
34433 8961                        18            .byte	$18
34434                                           ! 6382                                0x02,
34435 8962                        02            .byte	2
34436                                           ! 6383                        0xE0000000,
34437 8963                      0000            .word	0
34438 8965                      E000            .word	$E000
34439                                           ! 6384                               0,
34440 8967                      0000            .word	0
34441 8969                      0000            .word	0
34442                                           ! 6385                             0,
34443 896B                      0000            .word	0
34444                                           ! 6386                                5120,
34445 896D                      1400            .word	$1400
34446                                           ! 6387                             0,
34447 896F                        00            .byte	0
34448                                           ! 6388                             0,
34449 8970                        00            .byte	0
34450                                           ! 6389                           8,
34451 8971                        08            .byte	8
34452                                           ! 6390                                16,
34453 8972                        10            .byte	$10
34454                                           ! 6391                             8,
34455 8973                        08            .byte	8
34456                                           ! 6392                                  8,
34457 8974                        08            .byte	8
34458                                           ! 6393                            8,
34459 8975                        08            .byte	8
34460                                           ! 6394                                 0,
34461 8976                        00            .byte	0
34462                                           ! 6395                            8,
34463 8977                        08            .byte	8
34464                                           ! 6396                                 24,
34465 8978                        18            .byte	$18
34466                                           ! 6397                          0,
34467 8979                      0000            .word	0
34468 897B                      0000            .word	0
34469                                           ! 6398 } },
34470                                           ! 6399 { 0x017b,
34471 897D                      017B            .word	$17B
34472                                           ! 6400 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34473 897F                      009B            .word	$9B
34474                                           ! 6401                           0x01 | 0x02 | 0x04,
34475 8981                        07            .byte	7
34476                                           ! 6402                           0,
34477 8982                        00            .byte	0
34478                                           ! 6403                           64,
34479 8983                      0040            .word	$40
34480                                           ! 6404                    64,
34481 8985                      0040            .word	$40
34482                                           ! 6405                        0xA000,
34483 8987                      A000            .word	$A000
34484                                           ! 6406                        0x0000,
34485 8989                      0000            .word	0
34486                                           ! 6407                       0,
34487 898B                      0000            .word	0
34488 898D                      0000            .word	0
34489                                           ! 6408                             2560,
34490 898F                      0A00            .word	$A00
34491                                           ! 6409                        1280,
34492 8991                      0500            .word	$500
34493                                           ! 6410                        960,
34494 8993                      03C0            .word	$3C0
34495                                           ! 6411                      8,
34496 8995                        08            .byte	8
34497                                           ! 6412                      16,
34498 8996                        10            .byte	$10
34499                                           ! 6413                           1,
34500 8997                        01            .byte	1
34501                                           ! 6414                         16,
34502 8998                        10            .byte	$10
34503                                           ! 6415                          38,
34504 8999                        26            .byte	$26
34505                                           ! 6416                        0x06,
34506 899A                        06            .byte	6
34507                                           ! 6417                     0,
34508 899B                        00            .byte	0
34509                                           ! 6418                               5,
34510 899C                        05            .byte	5
34511                                           ! 6419                          0,
34512 899D                        00            .byte	0
34513                                           ! 6420                        5,
34514 899E                        05            .byte	5
34515                                           ! 6421                             11,
34516 899F                        0B            .byte	$B
34517                                           ! 6422                          6,
34518 89A0                        06            .byte	6
34519                                           ! 6423                               5,
34520 89A1                        05            .byte	5
34521                                           ! 6424                         5,
34522 89A2                        05            .byte	5
34523                                           ! 6425                              0,
34524 89A3                        00            .byte	0
34525                                           ! 6426                         0,
34526 89A4                        00            .byte	0
34527                                           ! 6427                              0,
34528 89A5                        00            .byte	0
34529                                           ! 6428                                0,
34530 89A6                        00            .byte	0
34531                                           ! 6429                        0xE0000000,
34532 89A7                      0000            .word	0
34533 89A9                      E000            .word	$E000
34534                                           ! 6430                               0,
34535 89AB                      0000            .word	0
34536 89AD                      0000            .word	0
34537                                           ! 6431                             0,
34538 89AF                      0000            .word	0
34539                                           ! 6432                                2560,
34540 89B1                      0A00            .word	$A00
34541                                           ! 6433                             0,
34542 89B3                        00            .byte	0
34543                                           ! 6434                             0,
34544 89B4                        00            .byte	0
34545                                           ! 6435                           5,
34546 89B5                        05            .byte	5
34547                                           ! 6436                                11,
34548 89B6                        0B            .byte	$B
34549                                           ! 6437                             6,
34550 89B7                        06            .byte	6
34551                                           ! 6438                                  5,
34552 89B8                        05            .byte	5
34553                                           ! 6439                            5,
34554 89B9                        05            .byte	5
34555                                           ! 6440                                 0,
34556 89BA                        00            .byte	0
34557                                           ! 6441                            0,
34558 89BB                        00            .byte	0
34559                                           ! 6442  
34560                                           ! 6442                                0,
34561 89BC                        00            .byte	0
34562                                           ! 6443                          0,
34563 89BD                      0000            .word	0
34564 89BF                      0000            .word	0
34565                                           ! 6444 } },
34566                                           ! 6445 { 0x017c,
34567 89C1                      017C            .word	$17C
34568                                           ! 6446 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34569 89C3                      009B            .word	$9B
34570                                           ! 6447                           0x01 | 0x02 | 0x04,
34571 89C5                        07            .byte	7
34572                                           ! 6448                           0,
34573 89C6                        00            .byte	0
34574                                           ! 6449                           64,
34575 89C7                      0040            .word	$40
34576                                           ! 6450                    64,
34577 89C9                      0040            .word	$40
34578                                           ! 6451                        0xA000,
34579 89CB                      A000            .word	$A000
34580                                           ! 6452                        0x0000,
34581 89CD                      0000            .word	0
34582                                           ! 6453                       0,
34583 89CF                      0000            .word	0
34584 89D1                      0000            .word	0
34585                                           ! 6454                             3840,
34586 89D3                      0F00            .word	$F00
34587                                           ! 6455                        1280,
34588 89D5                      0500            .word	$500
34589                                           ! 6456                        960,
34590 89D7                      03C0            .word	$3C0
34591                                           ! 6457                      8,
34592 89D9                        08            .byte	8
34593                                           ! 6458                      16,
34594 89DA                        10            .byte	$10
34595                                           ! 6459                           1,
34596 89DB                        01            .byte	1
34597                                           ! 6460                         24,
34598 89DC                        18            .byte	$18
34599                                           ! 6461                          57,
34600 89DD                        39            .byte	$39
34601                                           ! 6462                        0x06,
34602 89DE                        06            .byte	6
34603                                           ! 6463                     0,
34604 89DF                        00            .byte	0
34605                                           ! 6464                               3,
34606 89E0                        03            .byte	3
34607                                           ! 6465                          0,
34608 89E1                        00            .byte	0
34609                                           ! 6466                        8,
34610 89E2                        08            .byte	8
34611                                           ! 6467                             16,
34612 89E3                        10            .byte	$10
34613                                           ! 6468                          8,
34614 89E4                        08            .byte	8
34615                                           ! 6469                               8,
34616 89E5                        08            .byte	8
34617                                           ! 6470                         8,
34618 89E6                        08            .byte	8
34619                                           ! 6471                              0,
34620 89E7                        00            .byte	0
34621                                           ! 6472                         0,
34622 89E8                        00            .byte	0
34623                                           ! 6473                              0,
34624 89E9                        00            .byte	0
34625                                           ! 6474                                0,
34626 89EA                        00            .byte	0
34627                                           ! 6475                        0xE0000000,
34628 89EB                      0000            .word	0
34629 89ED                      E000            .word	$E000
34630                                           ! 6476                               0,
34631 89EF                      0000            .word	0
34632 89F1                      0000            .word	0
34633                                           ! 6477                             0,
34634 89F3                      0000            .word	0
34635                                           ! 6478                                3840,
34636 89F5                      0F00            .word	$F00
34637                                           ! 6479                             0,
34638 89F7                        00            .byte	0
34639                                           ! 6480                             0,
34640 89F8                        00            .byte	0
34641                                           ! 6481                           8,
34642 89F9                        08            .byte	8
34643                                           ! 6482                                16,
34644 89FA                        10            .byte	$10
34645                                           ! 6483                             8,
34646 89FB                        08            .byte	8
34647                                           ! 6484                                  8,
34648 89FC                        08            .byte	8
34649                                           ! 6485                            8,
34650 89FD                        08            .byte	8
34651                                           ! 6486                                 0,
34652 89FE                        00            .byte	0
34653                                           ! 6487                            0,
34654 89FF                        00            .byte	0
34655                                           ! 6488                                 0,
34656 8A00                        00            .byte	0
34657                                           ! 6489                          0,
34658 8A01                      0000            .word	0
34659 8A03                      0000            .word	0
34660                                           ! 6490 } },
34661                                           ! 6491 { 0x017d,
34662 8A05                      017D            .word	$17D
34663                                           ! 6492 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34664 8A07                      009B            .word	$9B
34665                                           ! 6493                           0x01 | 0x02 | 0x04,
34666 8A09                        07            .byte	7
34667                                           ! 6494                           0,
34668 8A0A                        00            .byte	0
34669                                           ! 6495                           64,
34670 8A0B                      0040            .word	$40
34671                                           ! 6496                    64,
34672 8A0D                      0040            .word	$40
34673                                           ! 6497                        0xA000,
34674 8A0F                      A000            .word	$A000
34675                                           ! 6498                        0x0000,
34676 8A11                      0000            .word	0
34677                                           ! 6499                       0,
34678 8A13                      0000            .word	0
34679 8A15                      0000            .word	0
34680                                           ! 6500                             5120,
34681 8A17                      1400            .word	$1400
34682                                           ! 6501                        1280,
34683 8A19                      0500            .word	$500
34684                                           ! 6502                        960,
34685 8A1B                      03C0            .word	$3C0
34686                                           ! 6503                      8,
34687 8A1D                        08            .byte	8
34688                                           ! 6504                      16,
34689 8A1E                        10            .byte	$10
34690                                           ! 6505                           1,
34691 8A1F                        01            .byte	1
34692                                           ! 6506                         32,
34693 8A20                        20            .byte	$20
34694                                           ! 6507                          75,
34695 8A21                        4B            .byte	$4B
34696                                           ! 6508                        0x06,
34697 8A22                        06            .byte	6
34698                                           ! 6509                     0,
34699 8A23                        00            .byte	0
34700                                           ! 6510                               2,
34701 8A24                        02            .byte	2
34702                                           ! 6511                          0
34703                                           ! 6511 ,
34704 8A25                        00            .byte	0
34705                                           ! 6512                        8,
34706 8A26                        08            .byte	8
34707                                           ! 6513                             16,
34708 8A27                        10            .byte	$10
34709                                           ! 6514                          8,
34710 8A28                        08            .byte	8
34711                                           ! 6515                               8,
34712 8A29                        08            .byte	8
34713                                           ! 6516                         8,
34714 8A2A                        08            .byte	8
34715                                           ! 6517                              0,
34716 8A2B                        00            .byte	0
34717                                           ! 6518                         8,
34718 8A2C                        08            .byte	8
34719                                           ! 6519                              24,
34720 8A2D                        18            .byte	$18
34721                                           ! 6520                                0x02,
34722 8A2E                        02            .byte	2
34723                                           ! 6521                        0xE0000000,
34724 8A2F                      0000            .word	0
34725 8A31                      E000            .word	$E000
34726                                           ! 6522                               0,
34727 8A33                      0000            .word	0
34728 8A35                      0000            .word	0
34729                                           ! 6523                             0,
34730 8A37                      0000            .word	0
34731                                           ! 6524                                5120,
34732 8A39                      1400            .word	$1400
34733                                           ! 6525                             0,
34734 8A3B                        00            .byte	0
34735                                           ! 6526                             0,
34736 8A3C                        00            .byte	0
34737                                           ! 6527                           8,
34738 8A3D                        08            .byte	8
34739                                           ! 6528                                16,
34740 8A3E                        10            .byte	$10
34741                                           ! 6529                             8,
34742 8A3F                        08            .byte	8
34743                                           ! 6530                                  8,
34744 8A40                        08            .byte	8
34745                                           ! 6531                            8,
34746 8A41                        08            .byte	8
34747                                           ! 6532                                 0,
34748 8A42                        00            .byte	0
34749                                           ! 6533                            8,
34750 8A43                        08            .byte	8
34751                                           ! 6534                                 24,
34752 8A44                        18            .byte	$18
34753                                           ! 6535                          0,
34754 8A45                      0000            .word	0
34755 8A47                      0000            .word	0
34756                                           ! 6536 } },
34757                                           ! 6537 { 0x017e,
34758 8A49                      017E            .word	$17E
34759                                           ! 6538 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34760 8A4B                      009B            .word	$9B
34761                                           ! 6539                           0x01 | 0x02 | 0x04,
34762 8A4D                        07            .byte	7
34763                                           ! 6540                           0,
34764 8A4E                        00            .byte	0
34765                                           ! 6541                           64,
34766 8A4F                      0040            .word	$40
34767                                           ! 6542                    64,
34768 8A51                      0040            .word	$40
34769                                           ! 6543                        0xA000,
34770 8A53                      A000            .word	$A000
34771                                           ! 6544                        0x0000,
34772 8A55                      0000            .word	0
34773                                           ! 6545                       0,
34774 8A57                      0000            .word	0
34775 8A59                      0000            .word	0
34776                                           ! 6546                             2880,
34777 8A5B                      0B40            .word	$B40
34778                                           ! 6547                        1440,
34779 8A5D                      05A0            .word	$5A0
34780                                           ! 6548                        900,
34781 8A5F                      0384            .word	$384
34782                                           ! 6549                      8,
34783 8A61                        08            .byte	8
34784                                           ! 6550                      16,
34785 8A62                        10            .byte	$10
34786                                           ! 6551                           1,
34787 8A63                        01            .byte	1
34788                                           ! 6552                         16,
34789 8A64                        10            .byte	$10
34790                                           ! 6553                          40,
34791 8A65                        28            .byte	$28
34792                                           ! 6554                        0x06,
34793 8A66                        06            .byte	6
34794                                           ! 6555                     0,
34795 8A67                        00            .byte	0
34796                                           ! 6556                               5,
34797 8A68                        05            .byte	5
34798                                           ! 6557                          0,
34799 8A69                        00            .byte	0
34800                                           ! 6558                        5,
34801 8A6A                        05            .byte	5
34802                                           ! 6559                             11,
34803 8A6B                        0B            .byte	$B
34804                                           ! 6560                          6,
34805 8A6C                        06            .byte	6
34806                                           ! 6561                               5,
34807 8A6D                        05            .byte	5
34808                                           ! 6562                         5,
34809 8A6E                        05            .byte	5
34810                                           ! 6563                              0,
34811 8A6F                        00            .byte	0
34812                                           ! 6564                         0,
34813 8A70                        00            .byte	0
34814                                           ! 6565                              0,
34815 8A71                        00            .byte	0
34816                                           ! 6566                                0,
34817 8A72                        00            .byte	0
34818                                           ! 6567                        0xE0000000,
34819 8A73                      0000            .word	0
34820 8A75                      E000            .word	$E000
34821                                           ! 6568                               0,
34822 8A77                      0000            .word	0
34823 8A79                      0000            .word	0
34824                                           ! 6569                             0,
34825 8A7B                      0000            .word	0
34826                                           ! 6570                                2880,
34827 8A7D                      0B40            .word	$B40
34828                                           ! 6571                             0,
34829 8A7F                        00            .byte	0
34830                                           ! 6572                             0,
34831 8A80                        00            .byte	0
34832                                           ! 6573                           5,
34833 8A81                        05            .byte	5
34834                                           ! 6574                                11,
34835 8A82                        0B            .byte	$B
34836                                           ! 6575                             6,
34837 8A83                        06            .byte	6
34838                                           ! 6576                                  5,
34839 8A84                        05            .byte	5
34840                                           ! 6577                            5,
34841 8A85                        05            .byte	5
34842                                           ! 6578                                 0,
34843 8A86                        00            .byte	0
34844                                           ! 6579    
34845                                           ! 6579                         0,
34846 8A87                        00            .byte	0
34847                                           ! 6580                                 0,
34848 8A88                        00            .byte	0
34849                                           ! 6581                          0,
34850 8A89                      0000            .word	0
34851 8A8B                      0000            .word	0
34852                                           ! 6582 } },
34853                                           ! 6583 { 0x017f,
34854 8A8D                      017F            .word	$17F
34855                                           ! 6584 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34856 8A8F                      009B            .word	$9B
34857                                           ! 6585                           0x01 | 0x02 | 0x04,
34858 8A91                        07            .byte	7
34859                                           ! 6586                           0,
34860 8A92                        00            .byte	0
34861                                           ! 6587                           64,
34862 8A93                      0040            .word	$40
34863                                           ! 6588                    64,
34864 8A95                      0040            .word	$40
34865                                           ! 6589                        0xA000,
34866 8A97                      A000            .word	$A000
34867                                           ! 6590                        0x0000,
34868 8A99                      0000            .word	0
34869                                           ! 6591                       0,
34870 8A9B                      0000            .word	0
34871 8A9D                      0000            .word	0
34872                                           ! 6592                             4320,
34873 8A9F                      10E0            .word	$10E0
34874                                           ! 6593                        1440,
34875 8AA1                      05A0            .word	$5A0
34876                                           ! 6594                        900,
34877 8AA3                      0384            .word	$384
34878                                           ! 6595                      8,
34879 8AA5                        08            .byte	8
34880                                           ! 6596                      16,
34881 8AA6                        10            .byte	$10
34882                                           ! 6597                           1,
34883 8AA7                        01            .byte	1
34884                                           ! 6598                         24,
34885 8AA8                        18            .byte	$18
34886                                           ! 6599                          60,
34887 8AA9                        3C            .byte	$3C
34888                                           ! 6600                        0x06,
34889 8AAA                        06            .byte	6
34890                                           ! 6601                     0,
34891 8AAB                        00            .byte	0
34892                                           ! 6602                               3,
34893 8AAC                        03            .byte	3
34894                                           ! 6603                          0,
34895 8AAD                        00            .byte	0
34896                                           ! 6604                        8,
34897 8AAE                        08            .byte	8
34898                                           ! 6605                             16,
34899 8AAF                        10            .byte	$10
34900                                           ! 6606                          8,
34901 8AB0                        08            .byte	8
34902                                           ! 6607                               8,
34903 8AB1                        08            .byte	8
34904                                           ! 6608                         8,
34905 8AB2                        08            .byte	8
34906                                           ! 6609                              0,
34907 8AB3                        00            .byte	0
34908                                           ! 6610                         0,
34909 8AB4                        00            .byte	0
34910                                           ! 6611                              0,
34911 8AB5                        00            .byte	0
34912                                           ! 6612                                0,
34913 8AB6                        00            .byte	0
34914                                           ! 6613                        0xE0000000,
34915 8AB7                      0000            .word	0
34916 8AB9                      E000            .word	$E000
34917                                           ! 6614                               0,
34918 8ABB                      0000            .word	0
34919 8ABD                      0000            .word	0
34920                                           ! 6615                             0,
34921 8ABF                      0000            .word	0
34922                                           ! 6616                                4320,
34923 8AC1                      10E0            .word	$10E0
34924                                           ! 6617                             0,
34925 8AC3                        00            .byte	0
34926                                           ! 6618                             0,
34927 8AC4                        00            .byte	0
34928                                           ! 6619                           8,
34929 8AC5                        08            .byte	8
34930                                           ! 6620                                16,
34931 8AC6                        10            .byte	$10
34932                                           ! 6621                             8,
34933 8AC7                        08            .byte	8
34934                                           ! 6622                                  8,
34935 8AC8                        08            .byte	8
34936                                           ! 6623                            8,
34937 8AC9                        08            .byte	8
34938                                           ! 6624                                 0,
34939 8ACA                        00            .byte	0
34940                                           ! 6625                            0,
34941 8ACB                        00            .byte	0
34942                                           ! 6626                                 0,
34943 8ACC                        00            .byte	0
34944                                           ! 6627                          0,
34945 8ACD                      0000            .word	0
34946 8ACF                      0000            .word	0
34947                                           ! 6628 } },
34948                                           ! 6629 { 0x0180,
34949 8AD1                      0180            .word	$180
34950                                           ! 6630 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34951 8AD3                      009B            .word	$9B
34952                                           ! 6631                           0x01 | 0x02 | 0x04,
34953 8AD5                        07            .byte	7
34954                                           ! 6632                           0,
34955 8AD6                        00            .byte	0
34956                                           ! 6633                           64,
34957 8AD7                      0040            .word	$40
34958                                           ! 6634                    64,
34959 8AD9                      0040            .word	$40
34960                                           ! 6635                        0xA000,
34961 8ADB                      A000            .word	$A000
34962                                           ! 6636                        0x0000,
34963 8ADD                      0000            .word	0
34964                                           ! 6637                       0,
34965 8ADF                      0000            .word	0
34966 8AE1                      0000            .word	0
34967                                           ! 6638                             5760,
34968 8AE3                      1680            .word	$1680
34969                                           ! 6639                        1440,
34970 8AE5                      05A0            .word	$5A0
34971                                           ! 6640                        900,
34972 8AE7                      0384            .word	$384
34973                                           ! 6641                      8,
34974 8AE9                        08            .byte	8
34975                                           ! 6642                      16,
34976 8AEA                        10            .byte	$10
34977                                           ! 6643                           1,
34978 8AEB                        01            .byte	1
34979                                           ! 6644                         32,
34980 8AEC                        20            .byte	$20
34981                                           ! 6645                          80,
34982 8AED                        50            .byte	$50
34983                                           ! 6646                        0x06,
34984 8AEE                        06            .byte	6
34985                                           ! 6647                     0,
34986 8AEF                        00            .byte	0
34987                                           ! 6648                               2
34988                                           ! 6648 ,
34989 8AF0                        02            .byte	2
34990                                           ! 6649                          0,
34991 8AF1                        00            .byte	0
34992                                           ! 6650                        8,
34993 8AF2                        08            .byte	8
34994                                           ! 6651                             16,
34995 8AF3                        10            .byte	$10
34996                                           ! 6652                          8,
34997 8AF4                        08            .byte	8
34998                                           ! 6653                               8,
34999 8AF5                        08            .byte	8
35000                                           ! 6654                         8,
35001 8AF6                        08            .byte	8
35002                                           ! 6655                              0,
35003 8AF7                        00            .byte	0
35004                                           ! 6656                         8,
35005 8AF8                        08            .byte	8
35006                                           ! 6657                              24,
35007 8AF9                        18            .byte	$18
35008                                           ! 6658                                0x02,
35009 8AFA                        02            .byte	2
35010                                           ! 6659                        0xE0000000,
35011 8AFB                      0000            .word	0
35012 8AFD                      E000            .word	$E000
35013                                           ! 6660                               0,
35014 8AFF                      0000            .word	0
35015 8B01                      0000            .word	0
35016                                           ! 6661                             0,
35017 8B03                      0000            .word	0
35018                                           ! 6662                                5760,
35019 8B05                      1680            .word	$1680
35020                                           ! 6663                             0,
35021 8B07                        00            .byte	0
35022                                           ! 6664                             0,
35023 8B08                        00            .byte	0
35024                                           ! 6665                           8,
35025 8B09                        08            .byte	8
35026                                           ! 6666                                16,
35027 8B0A                        10            .byte	$10
35028                                           ! 6667                             8,
35029 8B0B                        08            .byte	8
35030                                           ! 6668                                  8,
35031 8B0C                        08            .byte	8
35032                                           ! 6669                            8,
35033 8B0D                        08            .byte	8
35034                                           ! 6670                                 0,
35035 8B0E                        00            .byte	0
35036                                           ! 6671                            8,
35037 8B0F                        08            .byte	8
35038                                           ! 6672                                 24,
35039 8B10                        18            .byte	$18
35040                                           ! 6673                          0,
35041 8B11                      0000            .word	0
35042 8B13                      0000            .word	0
35043                                           ! 6674 } },
35044                                           ! 6675 { 0x0181,
35045 8B15                      0181            .word	$181
35046                                           ! 6676 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35047 8B17                      009B            .word	$9B
35048                                           ! 6677                           0x01 | 0x02 | 0x04,
35049 8B19                        07            .byte	7
35050                                           ! 6678                           0,
35051 8B1A                        00            .byte	0
35052                                           ! 6679                           64,
35053 8B1B                      0040            .word	$40
35054                                           ! 6680                    64,
35055 8B1D                      0040            .word	$40
35056                                           ! 6681                        0xA000,
35057 8B1F                      A000            .word	$A000
35058                                           ! 6682                        0x0000,
35059 8B21                      0000            .word	0
35060                                           ! 6683                       0,
35061 8B23                      0000            .word	0
35062 8B25                      0000            .word	0
35063                                           ! 6684                             2800,
35064 8B27                      0AF0            .word	$AF0
35065                                           ! 6685                        1400,
35066 8B29                      0578            .word	$578
35067                                           ! 6686                        1050,
35068 8B2B                      041A            .word	$41A
35069                                           ! 6687                      8,
35070 8B2D                        08            .byte	8
35071                                           ! 6688                      16,
35072 8B2E                        10            .byte	$10
35073                                           ! 6689                           1,
35074 8B2F                        01            .byte	1
35075                                           ! 6690                         16,
35076 8B30                        10            .byte	$10
35077                                           ! 6691                          45,
35078 8B31                        2D            .byte	$2D
35079                                           ! 6692                        0x06,
35080 8B32                        06            .byte	6
35081                                           ! 6693                     0,
35082 8B33                        00            .byte	0
35083                                           ! 6694                               4,
35084 8B34                        04            .byte	4
35085                                           ! 6695                          0,
35086 8B35                        00            .byte	0
35087                                           ! 6696                        5,
35088 8B36                        05            .byte	5
35089                                           ! 6697                             11,
35090 8B37                        0B            .byte	$B
35091                                           ! 6698                          6,
35092 8B38                        06            .byte	6
35093                                           ! 6699                               5,
35094 8B39                        05            .byte	5
35095                                           ! 6700                         5,
35096 8B3A                        05            .byte	5
35097                                           ! 6701                              0,
35098 8B3B                        00            .byte	0
35099                                           ! 6702                         0,
35100 8B3C                        00            .byte	0
35101                                           ! 6703                              0,
35102 8B3D                        00            .byte	0
35103                                           ! 6704                                0,
35104 8B3E                        00            .byte	0
35105                                           ! 6705                        0xE0000000,
35106 8B3F                      0000            .word	0
35107 8B41                      E000            .word	$E000
35108                                           ! 6706                               0,
35109 8B43                      0000            .word	0
35110 8B45                      0000            .word	0
35111                                           ! 6707                             0,
35112 8B47                      0000            .word	0
35113                                           ! 6708                                2800,
35114 8B49                      0AF0            .word	$AF0
35115                                           ! 6709                             0,
35116 8B4B                        00            .byte	0
35117                                           ! 6710                             0,
35118 8B4C                        00            .byte	0
35119                                           ! 6711                           5,
35120 8B4D                        05            .byte	5
35121                                           ! 6712                                11,
35122 8B4E                        0B            .byte	$B
35123                                           ! 6713                             6,
35124 8B4F                        06            .byte	6
35125                                           ! 6714                                  5,
35126 8B50                        05            .byte	5
35127                                           ! 6715                            5,
35128 8B51                        05            .byte	5
35129                                           ! 6716          
35130                                           ! 6716                        0,
35131 8B52                        00            .byte	0
35132                                           ! 6717                            0,
35133 8B53                        00            .byte	0
35134                                           ! 6718                                 0,
35135 8B54                        00            .byte	0
35136                                           ! 6719                          0,
35137 8B55                      0000            .word	0
35138 8B57                      0000            .word	0
35139                                           ! 6720 } },
35140                                           ! 6721 { 0x0182,
35141 8B59                      0182            .word	$182
35142                                           ! 6722 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35143 8B5B                      009B            .word	$9B
35144                                           ! 6723                           0x01 | 0x02 | 0x04,
35145 8B5D                        07            .byte	7
35146                                           ! 6724                           0,
35147 8B5E                        00            .byte	0
35148                                           ! 6725                           64,
35149 8B5F                      0040            .word	$40
35150                                           ! 6726                    64,
35151 8B61                      0040            .word	$40
35152                                           ! 6727                        0xA000,
35153 8B63                      A000            .word	$A000
35154                                           ! 6728                        0x0000,
35155 8B65                      0000            .word	0
35156                                           ! 6729                       0,
35157 8B67                      0000            .word	0
35158 8B69                      0000            .word	0
35159                                           ! 6730                             4200,
35160 8B6B                      1068            .word	$1068
35161                                           ! 6731                        1400,
35162 8B6D                      0578            .word	$578
35163                                           ! 6732                        1050,
35164 8B6F                      041A            .word	$41A
35165                                           ! 6733                      8,
35166 8B71                        08            .byte	8
35167                                           ! 6734                      16,
35168 8B72                        10            .byte	$10
35169                                           ! 6735                           1,
35170 8B73                        01            .byte	1
35171                                           ! 6736                         24,
35172 8B74                        18            .byte	$18
35173                                           ! 6737                          68,
35174 8B75                        44            .byte	$44
35175                                           ! 6738                        0x06,
35176 8B76                        06            .byte	6
35177                                           ! 6739                     0,
35178 8B77                        00            .byte	0
35179                                           ! 6740                               2,
35180 8B78                        02            .byte	2
35181                                           ! 6741                          0,
35182 8B79                        00            .byte	0
35183                                           ! 6742                        8,
35184 8B7A                        08            .byte	8
35185                                           ! 6743                             16,
35186 8B7B                        10            .byte	$10
35187                                           ! 6744                          8,
35188 8B7C                        08            .byte	8
35189                                           ! 6745                               8,
35190 8B7D                        08            .byte	8
35191                                           ! 6746                         8,
35192 8B7E                        08            .byte	8
35193                                           ! 6747                              0,
35194 8B7F                        00            .byte	0
35195                                           ! 6748                         0,
35196 8B80                        00            .byte	0
35197                                           ! 6749                              0,
35198 8B81                        00            .byte	0
35199                                           ! 6750                                0,
35200 8B82                        00            .byte	0
35201                                           ! 6751                        0xE0000000,
35202 8B83                      0000            .word	0
35203 8B85                      E000            .word	$E000
35204                                           ! 6752                               0,
35205 8B87                      0000            .word	0
35206 8B89                      0000            .word	0
35207                                           ! 6753                             0,
35208 8B8B                      0000            .word	0
35209                                           ! 6754                                4200,
35210 8B8D                      1068            .word	$1068
35211                                           ! 6755                             0,
35212 8B8F                        00            .byte	0
35213                                           ! 6756                             0,
35214 8B90                        00            .byte	0
35215                                           ! 6757                           8,
35216 8B91                        08            .byte	8
35217                                           ! 6758                                16,
35218 8B92                        10            .byte	$10
35219                                           ! 6759                             8,
35220 8B93                        08            .byte	8
35221                                           ! 6760                                  8,
35222 8B94                        08            .byte	8
35223                                           ! 6761                            8,
35224 8B95                        08            .byte	8
35225                                           ! 6762                                 0,
35226 8B96                        00            .byte	0
35227                                           ! 6763                            0,
35228 8B97                        00            .byte	0
35229                                           ! 6764                                 0,
35230 8B98                        00            .byte	0
35231                                           ! 6765                          0,
35232 8B99                      0000            .word	0
35233 8B9B                      0000            .word	0
35234                                           ! 6766 } },
35235                                           ! 6767 { 0x0183,
35236 8B9D                      0183            .word	$183
35237                                           ! 6768 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35238 8B9F                      009B            .word	$9B
35239                                           ! 6769                           0x01 | 0x02 | 0x04,
35240 8BA1                        07            .byte	7
35241                                           ! 6770                           0,
35242 8BA2                        00            .byte	0
35243                                           ! 6771                           64,
35244 8BA3                      0040            .word	$40
35245                                           ! 6772                    64,
35246 8BA5                      0040            .word	$40
35247                                           ! 6773                        0xA000,
35248 8BA7                      A000            .word	$A000
35249                                           ! 6774                        0x0000,
35250 8BA9                      0000            .word	0
35251                                           ! 6775                       0,
35252 8BAB                      0000            .word	0
35253 8BAD                      0000            .word	0
35254                                           ! 6776                             5600,
35255 8BAF                      15E0            .word	$15E0
35256                                           ! 6777                        1400,
35257 8BB1                      0578            .word	$578
35258                                           ! 6778                        1050,
35259 8BB3                      041A            .word	$41A
35260                                           ! 6779                      8,
35261 8BB5                        08            .byte	8
35262                                           ! 6780                      16,
35263 8BB6                        10            .byte	$10
35264                                           ! 6781                           1,
35265 8BB7                        01            .byte	1
35266                                           ! 6782                         32,
35267 8BB8                        20            .byte	$20
35268                                           ! 6783                          90,
35269 8BB9                        5A            .byte	$5A
35270                                           ! 6784                        0x06,
35271 8BBA                        06            .byte	6
35272                                           ! 6785                     0,
35273 8BBB                        00            .byte	0
35274                                           ! 6786 
35275                                           ! 6786                               1,
35276 8BBC                        01            .byte	1
35277                                           ! 6787                          0,
35278 8BBD                        00            .byte	0
35279                                           ! 6788                        8,
35280 8BBE                        08            .byte	8
35281                                           ! 6789                             16,
35282 8BBF                        10            .byte	$10
35283                                           ! 6790                          8,
35284 8BC0                        08            .byte	8
35285                                           ! 6791                               8,
35286 8BC1                        08            .byte	8
35287                                           ! 6792                         8,
35288 8BC2                        08            .byte	8
35289                                           ! 6793                              0,
35290 8BC3                        00            .byte	0
35291                                           ! 6794                         8,
35292 8BC4                        08            .byte	8
35293                                           ! 6795                              24,
35294 8BC5                        18            .byte	$18
35295                                           ! 6796                                0x02,
35296 8BC6                        02            .byte	2
35297                                           ! 6797                        0xE0000000,
35298 8BC7                      0000            .word	0
35299 8BC9                      E000            .word	$E000
35300                                           ! 6798                               0,
35301 8BCB                      0000            .word	0
35302 8BCD                      0000            .word	0
35303                                           ! 6799                             0,
35304 8BCF                      0000            .word	0
35305                                           ! 6800                                5600,
35306 8BD1                      15E0            .word	$15E0
35307                                           ! 6801                             0,
35308 8BD3                        00            .byte	0
35309                                           ! 6802                             0,
35310 8BD4                        00            .byte	0
35311                                           ! 6803                           8,
35312 8BD5                        08            .byte	8
35313                                           ! 6804                                16,
35314 8BD6                        10            .byte	$10
35315                                           ! 6805                             8,
35316 8BD7                        08            .byte	8
35317                                           ! 6806                                  8,
35318 8BD8                        08            .byte	8
35319                                           ! 6807                            8,
35320 8BD9                        08            .byte	8
35321                                           ! 6808                                 0,
35322 8BDA                        00            .byte	0
35323                                           ! 6809                            8,
35324 8BDB                        08            .byte	8
35325                                           ! 6810                                 24,
35326 8BDC                        18            .byte	$18
35327                                           ! 6811                          0,
35328 8BDD                      0000            .word	0
35329 8BDF                      0000            .word	0
35330                                           ! 6812 } },
35331                                           ! 6813 { 0x0184,
35332 8BE1                      0184            .word	$184
35333                                           ! 6814 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35334 8BE3                      009B            .word	$9B
35335                                           ! 6815                           0x01 | 0x02 | 0x04,
35336 8BE5                        07            .byte	7
35337                                           ! 6816                           0,
35338 8BE6                        00            .byte	0
35339                                           ! 6817                           64,
35340 8BE7                      0040            .word	$40
35341                                           ! 6818                    64,
35342 8BE9                      0040            .word	$40
35343                                           ! 6819                        0xA000,
35344 8BEB                      A000            .word	$A000
35345                                           ! 6820                        0x0000,
35346 8BED                      0000            .word	0
35347                                           ! 6821                       0,
35348 8BEF                      0000            .word	0
35349 8BF1                      0000            .word	0
35350                                           ! 6822                             3360,
35351 8BF3                      0D20            .word	$D20
35352                                           ! 6823                        1680,
35353 8BF5                      0690            .word	$690
35354                                           ! 6824                        1050,
35355 8BF7                      041A            .word	$41A
35356                                           ! 6825                      8,
35357 8BF9                        08            .byte	8
35358                                           ! 6826                      16,
35359 8BFA                        10            .byte	$10
35360                                           ! 6827                           1,
35361 8BFB                        01            .byte	1
35362                                           ! 6828                         16,
35363 8BFC                        10            .byte	$10
35364                                           ! 6829                          54,
35365 8BFD                        36            .byte	$36
35366                                           ! 6830                        0x06,
35367 8BFE                        06            .byte	6
35368                                           ! 6831                     0,
35369 8BFF                        00            .byte	0
35370                                           ! 6832                               3,
35371 8C00                        03            .byte	3
35372                                           ! 6833                          0,
35373 8C01                        00            .byte	0
35374                                           ! 6834                        5,
35375 8C02                        05            .byte	5
35376                                           ! 6835                             11,
35377 8C03                        0B            .byte	$B
35378                                           ! 6836                          6,
35379 8C04                        06            .byte	6
35380                                           ! 6837                               5,
35381 8C05                        05            .byte	5
35382                                           ! 6838                         5,
35383 8C06                        05            .byte	5
35384                                           ! 6839                              0,
35385 8C07                        00            .byte	0
35386                                           ! 6840                         0,
35387 8C08                        00            .byte	0
35388                                           ! 6841                              0,
35389 8C09                        00            .byte	0
35390                                           ! 6842                                0,
35391 8C0A                        00            .byte	0
35392                                           ! 6843                        0xE0000000,
35393 8C0B                      0000            .word	0
35394 8C0D                      E000            .word	$E000
35395                                           ! 6844                               0,
35396 8C0F                      0000            .word	0
35397 8C11                      0000            .word	0
35398                                           ! 6845                             0,
35399 8C13                      0000            .word	0
35400                                           ! 6846                                3360,
35401 8C15                      0D20            .word	$D20
35402                                           ! 6847                             0,
35403 8C17                        00            .byte	0
35404                                           ! 6848                             0,
35405 8C18                        00            .byte	0
35406                                           ! 6849                           5,
35407 8C19                        05            .byte	5
35408                                           ! 6850                                11,
35409 8C1A                        0B            .byte	$B
35410                                           ! 6851                             6,
35411 8C1B                        06            .byte	6
35412                                           ! 6852                                  5,
35413 8C1C                        05            .byte	5
35414                                           ! 6853         
35415                                           ! 6853                    5,
35416 8C1D                        05            .byte	5
35417                                           ! 6854                                 0,
35418 8C1E                        00            .byte	0
35419                                           ! 6855                            0,
35420 8C1F                        00            .byte	0
35421                                           ! 6856                                 0,
35422 8C20                        00            .byte	0
35423                                           ! 6857                          0,
35424 8C21                      0000            .word	0
35425 8C23                      0000            .word	0
35426                                           ! 6858 } },
35427                                           ! 6859 { 0x0185,
35428 8C25                      0185            .word	$185
35429                                           ! 6860 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35430 8C27                      009B            .word	$9B
35431                                           ! 6861                           0x01 | 0x02 | 0x04,
35432 8C29                        07            .byte	7
35433                                           ! 6862                           0,
35434 8C2A                        00            .byte	0
35435                                           ! 6863                           64,
35436 8C2B                      0040            .word	$40
35437                                           ! 6864                    64,
35438 8C2D                      0040            .word	$40
35439                                           ! 6865                        0xA000,
35440 8C2F                      A000            .word	$A000
35441                                           ! 6866                        0x0000,
35442 8C31                      0000            .word	0
35443                                           ! 6867                       0,
35444 8C33                      0000            .word	0
35445 8C35                      0000            .word	0
35446                                           ! 6868                             5040,
35447 8C37                      13B0            .word	$13B0
35448                                           ! 6869                        1680,
35449 8C39                      0690            .word	$690
35450                                           ! 6870                        1050,
35451 8C3B                      041A            .word	$41A
35452                                           ! 6871                      8,
35453 8C3D                        08            .byte	8
35454                                           ! 6872                      16,
35455 8C3E                        10            .byte	$10
35456                                           ! 6873                           1,
35457 8C3F                        01            .byte	1
35458                                           ! 6874                         24,
35459 8C40                        18            .byte	$18
35460                                           ! 6875                          81,
35461 8C41                        51            .byte	$51
35462                                           ! 6876                        0x06,
35463 8C42                        06            .byte	6
35464                                           ! 6877                     0,
35465 8C43                        00            .byte	0
35466                                           ! 6878                               2,
35467 8C44                        02            .byte	2
35468                                           ! 6879                          0,
35469 8C45                        00            .byte	0
35470                                           ! 6880                        8,
35471 8C46                        08            .byte	8
35472                                           ! 6881                             16,
35473 8C47                        10            .byte	$10
35474                                           ! 6882                          8,
35475 8C48                        08            .byte	8
35476                                           ! 6883                               8,
35477 8C49                        08            .byte	8
35478                                           ! 6884                         8,
35479 8C4A                        08            .byte	8
35480                                           ! 6885                              0,
35481 8C4B                        00            .byte	0
35482                                           ! 6886                         0,
35483 8C4C                        00            .byte	0
35484                                           ! 6887                              0,
35485 8C4D                        00            .byte	0
35486                                           ! 6888                                0,
35487 8C4E                        00            .byte	0
35488                                           ! 6889                        0xE0000000,
35489 8C4F                      0000            .word	0
35490 8C51                      E000            .word	$E000
35491                                           ! 6890                               0,
35492 8C53                      0000            .word	0
35493 8C55                      0000            .word	0
35494                                           ! 6891                             0,
35495 8C57                      0000            .word	0
35496                                           ! 6892                                5040,
35497 8C59                      13B0            .word	$13B0
35498                                           ! 6893                             0,
35499 8C5B                        00            .byte	0
35500                                           ! 6894                             0,
35501 8C5C                        00            .byte	0
35502                                           ! 6895                           8,
35503 8C5D                        08            .byte	8
35504                                           ! 6896                                16,
35505 8C5E                        10            .byte	$10
35506                                           ! 6897                             8,
35507 8C5F                        08            .byte	8
35508                                           ! 6898                                  8,
35509 8C60                        08            .byte	8
35510                                           ! 6899                            8,
35511 8C61                        08            .byte	8
35512                                           ! 6900                                 0,
35513 8C62                        00            .byte	0
35514                                           ! 6901                            0,
35515 8C63                        00            .byte	0
35516                                           ! 6902                                 0,
35517 8C64                        00            .byte	0
35518                                           ! 6903                          0,
35519 8C65                      0000            .word	0
35520 8C67                      0000            .word	0
35521                                           ! 6904 } },
35522                                           ! 6905 { 0x0186,
35523 8C69                      0186            .word	$186
35524                                           ! 6906 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35525 8C6B                      009B            .word	$9B
35526                                           ! 6907                           0x01 | 0x02 | 0x04,
35527 8C6D                        07            .byte	7
35528                                           ! 6908                           0,
35529 8C6E                        00            .byte	0
35530                                           ! 6909                           64,
35531 8C6F                      0040            .word	$40
35532                                           ! 6910                    64,
35533 8C71                      0040            .word	$40
35534                                           ! 6911                        0xA000,
35535 8C73                      A000            .word	$A000
35536                                           ! 6912                        0x0000,
35537 8C75                      0000            .word	0
35538                                           ! 6913                       0,
35539 8C77                      0000            .word	0
35540 8C79                      0000            .word	0
35541                                           ! 6914                             6720,
35542 8C7B                      1A40            .word	$1A40
35543                                           ! 6915                        1680,
35544 8C7D                      0690            .word	$690
35545                                           ! 6916                        1050,
35546 8C7F                      041A            .word	$41A
35547                                           ! 6917                      8,
35548 8C81                        08            .byte	8
35549                                           ! 6918                      16,
35550 8C82                        10            .byte	$10
35551                                           ! 6919                           1,
35552 8C83                        01            .byte	1
35553                                           ! 6920                         32,
35554 8C84                        20            .byte	$20
35555                                           ! 6921                          108,
35556 8C85                        6C            .byte	$6C
35557                                           ! 6922                     
35558                                           ! 6922    0x06,
35559 8C86                        06            .byte	6
35560                                           ! 6923                     0,
35561 8C87                        00            .byte	0
35562                                           ! 6924                               1,
35563 8C88                        01            .byte	1
35564                                           ! 6925                          0,
35565 8C89                        00            .byte	0
35566                                           ! 6926                        8,
35567 8C8A                        08            .byte	8
35568                                           ! 6927                             16,
35569 8C8B                        10            .byte	$10
35570                                           ! 6928                          8,
35571 8C8C                        08            .byte	8
35572                                           ! 6929                               8,
35573 8C8D                        08            .byte	8
35574                                           ! 6930                         8,
35575 8C8E                        08            .byte	8
35576                                           ! 6931                              0,
35577 8C8F                        00            .byte	0
35578                                           ! 6932                         8,
35579 8C90                        08            .byte	8
35580                                           ! 6933                              24,
35581 8C91                        18            .byte	$18
35582                                           ! 6934                                0x02,
35583 8C92                        02            .byte	2
35584                                           ! 6935                        0xE0000000,
35585 8C93                      0000            .word	0
35586 8C95                      E000            .word	$E000
35587                                           ! 6936                               0,
35588 8C97                      0000            .word	0
35589 8C99                      0000            .word	0
35590                                           ! 6937                             0,
35591 8C9B                      0000            .word	0
35592                                           ! 6938                                6720,
35593 8C9D                      1A40            .word	$1A40
35594                                           ! 6939                             0,
35595 8C9F                        00            .byte	0
35596                                           ! 6940                             0,
35597 8CA0                        00            .byte	0
35598                                           ! 6941                           8,
35599 8CA1                        08            .byte	8
35600                                           ! 6942                                16,
35601 8CA2                        10            .byte	$10
35602                                           ! 6943                             8,
35603 8CA3                        08            .byte	8
35604                                           ! 6944                                  8,
35605 8CA4                        08            .byte	8
35606                                           ! 6945                            8,
35607 8CA5                        08            .byte	8
35608                                           ! 6946                                 0,
35609 8CA6                        00            .byte	0
35610                                           ! 6947                            8,
35611 8CA7                        08            .byte	8
35612                                           ! 6948                                 24,
35613 8CA8                        18            .byte	$18
35614                                           ! 6949                          0,
35615 8CA9                      0000            .word	0
35616 8CAB                      0000            .word	0
35617                                           ! 6950 } },
35618                                           ! 6951 { 0x0187,
35619 8CAD                      0187            .word	$187
35620                                           ! 6952 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35621 8CAF                      009B            .word	$9B
35622                                           ! 6953                           0x01 | 0x02 | 0x04,
35623 8CB1                        07            .byte	7
35624                                           ! 6954                           0,
35625 8CB2                        00            .byte	0
35626                                           ! 6955                           64,
35627 8CB3                      0040            .word	$40
35628                                           ! 6956                    64,
35629 8CB5                      0040            .word	$40
35630                                           ! 6957                        0xA000,
35631 8CB7                      A000            .word	$A000
35632                                           ! 6958                        0x0000,
35633 8CB9                      0000            .word	0
35634                                           ! 6959                       0,
35635 8CBB                      0000            .word	0
35636 8CBD                      0000            .word	0
35637                                           ! 6960                             3840,
35638 8CBF                      0F00            .word	$F00
35639                                           ! 6961                        1920,
35640 8CC1                      0780            .word	$780
35641                                           ! 6962                        1200,
35642 8CC3                      04B0            .word	$4B0
35643                                           ! 6963                      8,
35644 8CC5                        08            .byte	8
35645                                           ! 6964                      16,
35646 8CC6                        10            .byte	$10
35647                                           ! 6965                           1,
35648 8CC7                        01            .byte	1
35649                                           ! 6966                         16,
35650 8CC8                        10            .byte	$10
35651                                           ! 6967                          71,
35652 8CC9                        47            .byte	$47
35653                                           ! 6968                        0x06,
35654 8CCA                        06            .byte	6
35655                                           ! 6969                     0,
35656 8CCB                        00            .byte	0
35657                                           ! 6970                               2,
35658 8CCC                        02            .byte	2
35659                                           ! 6971                          0,
35660 8CCD                        00            .byte	0
35661                                           ! 6972                        5,
35662 8CCE                        05            .byte	5
35663                                           ! 6973                             11,
35664 8CCF                        0B            .byte	$B
35665                                           ! 6974                          6,
35666 8CD0                        06            .byte	6
35667                                           ! 6975                               5,
35668 8CD1                        05            .byte	5
35669                                           ! 6976                         5,
35670 8CD2                        05            .byte	5
35671                                           ! 6977                              0,
35672 8CD3                        00            .byte	0
35673                                           ! 6978                         0,
35674 8CD4                        00            .byte	0
35675                                           ! 6979                              0,
35676 8CD5                        00            .byte	0
35677                                           ! 6980                                0,
35678 8CD6                        00            .byte	0
35679                                           ! 6981                        0xE0000000,
35680 8CD7                      0000            .word	0
35681 8CD9                      E000            .word	$E000
35682                                           ! 6982                               0,
35683 8CDB                      0000            .word	0
35684 8CDD                      0000            .word	0
35685                                           ! 6983                             0,
35686 8CDF                      0000            .word	0
35687                                           ! 6984                                3840,
35688 8CE1                      0F00            .word	$F00
35689                                           ! 6985                             0,
35690 8CE3                        00            .byte	0
35691                                           ! 6986                             0,
35692 8CE4                        00            .byte	0
35693                                           ! 6987                           5,
35694 8CE5                        05            .byte	5
35695                                           ! 6988                                11,
35696 8CE6                        0B            .byte	$B
35697                                           ! 6989                             6,
35698 8CE7                        06            .byte	6
35699                                           ! 6990             
35700                                           ! 6990                      5,
35701 8CE8                        05            .byte	5
35702                                           ! 6991                            5,
35703 8CE9                        05            .byte	5
35704                                           ! 6992                                 0,
35705 8CEA                        00            .byte	0
35706                                           ! 6993                            0,
35707 8CEB                        00            .byte	0
35708                                           ! 6994                                 0,
35709 8CEC                        00            .byte	0
35710                                           ! 6995                          0,
35711 8CED                      0000            .word	0
35712 8CEF                      0000            .word	0
35713                                           ! 6996 } },
35714                                           ! 6997 { 0x0188,
35715 8CF1                      0188            .word	$188
35716                                           ! 6998 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35717 8CF3                      009B            .word	$9B
35718                                           ! 6999                           0x01 | 0x02 | 0x04,
35719 8CF5                        07            .byte	7
35720                                           ! 7000                           0,
35721 8CF6                        00            .byte	0
35722                                           ! 7001                           64,
35723 8CF7                      0040            .word	$40
35724                                           ! 7002                    64,
35725 8CF9                      0040            .word	$40
35726                                           ! 7003                        0xA000,
35727 8CFB                      A000            .word	$A000
35728                                           ! 7004                        0x0000,
35729 8CFD                      0000            .word	0
35730                                           ! 7005                       0,
35731 8CFF                      0000            .word	0
35732 8D01                      0000            .word	0
35733                                           ! 7006                             5760,
35734 8D03                      1680            .word	$1680
35735                                           ! 7007                        1920,
35736 8D05                      0780            .word	$780
35737                                           ! 7008                        1200,
35738 8D07                      04B0            .word	$4B0
35739                                           ! 7009                      8,
35740 8D09                        08            .byte	8
35741                                           ! 7010                      16,
35742 8D0A                        10            .byte	$10
35743                                           ! 7011                           1,
35744 8D0B                        01            .byte	1
35745                                           ! 7012                         24,
35746 8D0C                        18            .byte	$18
35747                                           ! 7013                          106,
35748 8D0D                        6A            .byte	$6A
35749                                           ! 7014                        0x06,
35750 8D0E                        06            .byte	6
35751                                           ! 7015                     0,
35752 8D0F                        00            .byte	0
35753                                           ! 7016                               1,
35754 8D10                        01            .byte	1
35755                                           ! 7017                          0,
35756 8D11                        00            .byte	0
35757                                           ! 7018                        8,
35758 8D12                        08            .byte	8
35759                                           ! 7019                             16,
35760 8D13                        10            .byte	$10
35761                                           ! 7020                          8,
35762 8D14                        08            .byte	8
35763                                           ! 7021                               8,
35764 8D15                        08            .byte	8
35765                                           ! 7022                         8,
35766 8D16                        08            .byte	8
35767                                           ! 7023                              0,
35768 8D17                        00            .byte	0
35769                                           ! 7024                         0,
35770 8D18                        00            .byte	0
35771                                           ! 7025                              0,
35772 8D19                        00            .byte	0
35773                                           ! 7026                                0,
35774 8D1A                        00            .byte	0
35775                                           ! 7027                        0xE0000000,
35776 8D1B                      0000            .word	0
35777 8D1D                      E000            .word	$E000
35778                                           ! 7028                               0,
35779 8D1F                      0000            .word	0
35780 8D21                      0000            .word	0
35781                                           ! 7029                             0,
35782 8D23                      0000            .word	0
35783                                           ! 7030                                5760,
35784 8D25                      1680            .word	$1680
35785                                           ! 7031                             0,
35786 8D27                        00            .byte	0
35787                                           ! 7032                             0,
35788 8D28                        00            .byte	0
35789                                           ! 7033                           8,
35790 8D29                        08            .byte	8
35791                                           ! 7034                                16,
35792 8D2A                        10            .byte	$10
35793                                           ! 7035                             8,
35794 8D2B                        08            .byte	8
35795                                           ! 7036                                  8,
35796 8D2C                        08            .byte	8
35797                                           ! 7037                            8,
35798 8D2D                        08            .byte	8
35799                                           ! 7038                                 0,
35800 8D2E                        00            .byte	0
35801                                           ! 7039                            0,
35802 8D2F                        00            .byte	0
35803                                           ! 7040                                 0,
35804 8D30                        00            .byte	0
35805                                           ! 7041                          0,
35806 8D31                      0000            .word	0
35807 8D33                      0000            .word	0
35808                                           ! 7042 } },
35809                                           ! 7043 { 0x0189,
35810 8D35                      0189            .word	$189
35811                                           ! 7044 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35812 8D37                      009B            .word	$9B
35813                                           ! 7045                           0x01 | 0x02 | 0x04,
35814 8D39                        07            .byte	7
35815                                           ! 7046                           0,
35816 8D3A                        00            .byte	0
35817                                           ! 7047                           64,
35818 8D3B                      0040            .word	$40
35819                                           ! 7048                    64,
35820 8D3D                      0040            .word	$40
35821                                           ! 7049                        0xA000,
35822 8D3F                      A000            .word	$A000
35823                                           ! 7050                        0x0000,
35824 8D41                      0000            .word	0
35825                                           ! 7051                       0,
35826 8D43                      0000            .word	0
35827 8D45                      0000            .word	0
35828                                           ! 7052                             7680,
35829 8D47                      1E00            .word	$1E00
35830                                           ! 7053                        1920,
35831 8D49                      0780            .word	$780
35832                                           ! 7054                        1200,
35833 8D4B                      04B0            .word	$4B0
35834                                           ! 7055                      8,
35835 8D4D                        08            .byte	8
35836                                           ! 7056                      16,
35837 8D4E                        10            .byte	$10
35838                                           ! 7057                           1,
35839 8D4F                        01            .byte	1
35840                                           ! 7058                         32,
35841 8D50                        20            .byte	$20
35842                                           ! 7059                  
35843                                           ! 7059         141,
35844 8D51                        8D            .byte	$8D
35845                                           ! 7060                        0x06,
35846 8D52                        06            .byte	6
35847                                           ! 7061                     0,
35848 8D53                        00            .byte	0
35849                                           ! 7062                               0,
35850 8D54                        00            .byte	0
35851                                           ! 7063                          0,
35852 8D55                        00            .byte	0
35853                                           ! 7064                        8,
35854 8D56                        08            .byte	8
35855                                           ! 7065                             16,
35856 8D57                        10            .byte	$10
35857                                           ! 7066                          8,
35858 8D58                        08            .byte	8
35859                                           ! 7067                               8,
35860 8D59                        08            .byte	8
35861                                           ! 7068                         8,
35862 8D5A                        08            .byte	8
35863                                           ! 7069                              0,
35864 8D5B                        00            .byte	0
35865                                           ! 7070                         8,
35866 8D5C                        08            .byte	8
35867                                           ! 7071                              24,
35868 8D5D                        18            .byte	$18
35869                                           ! 7072                                0x02,
35870 8D5E                        02            .byte	2
35871                                           ! 7073                        0xE0000000,
35872 8D5F                      0000            .word	0
35873 8D61                      E000            .word	$E000
35874                                           ! 7074                               0,
35875 8D63                      0000            .word	0
35876 8D65                      0000            .word	0
35877                                           ! 7075                             0,
35878 8D67                      0000            .word	0
35879                                           ! 7076                                7680,
35880 8D69                      1E00            .word	$1E00
35881                                           ! 7077                             0,
35882 8D6B                        00            .byte	0
35883                                           ! 7078                             0,
35884 8D6C                        00            .byte	0
35885                                           ! 7079                           8,
35886 8D6D                        08            .byte	8
35887                                           ! 7080                                16,
35888 8D6E                        10            .byte	$10
35889                                           ! 7081                             8,
35890 8D6F                        08            .byte	8
35891                                           ! 7082                                  8,
35892 8D70                        08            .byte	8
35893                                           ! 7083                            8,
35894 8D71                        08            .byte	8
35895                                           ! 7084                                 0,
35896 8D72                        00            .byte	0
35897                                           ! 7085                            8,
35898 8D73                        08            .byte	8
35899                                           ! 7086                                 24,
35900 8D74                        18            .byte	$18
35901                                           ! 7087                          0,
35902 8D75                      0000            .word	0
35903 8D77                      0000            .word	0
35904                                           ! 7088 } },
35905                                           ! 7089 { 0x018a,
35906 8D79                      018A            .word	$18A
35907                                           ! 7090 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35908 8D7B                      009B            .word	$9B
35909                                           ! 7091                           0x01 | 0x02 | 0x04,
35910 8D7D                        07            .byte	7
35911                                           ! 7092                           0,
35912 8D7E                        00            .byte	0
35913                                           ! 7093                           64,
35914 8D7F                      0040            .word	$40
35915                                           ! 7094                    64,
35916 8D81                      0040            .word	$40
35917                                           ! 7095                        0xA000,
35918 8D83                      A000            .word	$A000
35919                                           ! 7096                        0x0000,
35920 8D85                      0000            .word	0
35921                                           ! 7097                       0,
35922 8D87                      0000            .word	0
35923 8D89                      0000            .word	0
35924                                           ! 7098                             5120,
35925 8D8B                      1400            .word	$1400
35926                                           ! 7099                        2560,
35927 8D8D                      0A00            .word	$A00
35928                                           ! 7100                        1600,
35929 8D8F                      0640            .word	$640
35930                                           ! 7101                      8,
35931 8D91                        08            .byte	8
35932                                           ! 7102                      16,
35933 8D92                        10            .byte	$10
35934                                           ! 7103                           1,
35935 8D93                        01            .byte	1
35936                                           ! 7104                         16,
35937 8D94                        10            .byte	$10
35938                                           ! 7105                          125,
35939 8D95                        7D            .byte	$7D
35940                                           ! 7106                        0x06,
35941 8D96                        06            .byte	6
35942                                           ! 7107                     0,
35943 8D97                        00            .byte	0
35944                                           ! 7108                               1,
35945 8D98                        01            .byte	1
35946                                           ! 7109                          0,
35947 8D99                        00            .byte	0
35948                                           ! 7110                        5,
35949 8D9A                        05            .byte	5
35950                                           ! 7111                             11,
35951 8D9B                        0B            .byte	$B
35952                                           ! 7112                          6,
35953 8D9C                        06            .byte	6
35954                                           ! 7113                               5,
35955 8D9D                        05            .byte	5
35956                                           ! 7114                         5,
35957 8D9E                        05            .byte	5
35958                                           ! 7115                              0,
35959 8D9F                        00            .byte	0
35960                                           ! 7116                         0,
35961 8DA0                        00            .byte	0
35962                                           ! 7117                              0,
35963 8DA1                        00            .byte	0
35964                                           ! 7118                                0,
35965 8DA2                        00            .byte	0
35966                                           ! 7119                        0xE0000000,
35967 8DA3                      0000            .word	0
35968 8DA5                      E000            .word	$E000
35969                                           ! 7120                               0,
35970 8DA7                      0000            .word	0
35971 8DA9                      0000            .word	0
35972                                           ! 7121                             0,
35973 8DAB                      0000            .word	0
35974                                           ! 7122                                5120,
35975 8DAD                      1400            .word	$1400
35976                                           ! 7123                             0,
35977 8DAF                        00            .byte	0
35978                                           ! 7124                             0,
35979 8DB0                        00            .byte	0
35980                                           ! 7125                           5,
35981 8DB1                        05            .byte	5
35982                                           ! 7126                                11,
35983 8DB2                        0B            .byte	$B
35984                                           ! 7127          
35985                                           ! 7127                    6,
35986 8DB3                        06            .byte	6
35987                                           ! 7128                                  5,
35988 8DB4                        05            .byte	5
35989                                           ! 7129                            5,
35990 8DB5                        05            .byte	5
35991                                           ! 7130                                 0,
35992 8DB6                        00            .byte	0
35993                                           ! 7131                            0,
35994 8DB7                        00            .byte	0
35995                                           ! 7132                                 0,
35996 8DB8                        00            .byte	0
35997                                           ! 7133                          0,
35998 8DB9                      0000            .word	0
35999 8DBB                      0000            .word	0
36000                                           ! 7134 } },
36001                                           ! 7135 { 0x018b,
36002 8DBD                      018B            .word	$18B
36003                                           ! 7136 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36004 8DBF                      009B            .word	$9B
36005                                           ! 7137                           0x01 | 0x02 | 0x04,
36006 8DC1                        07            .byte	7
36007                                           ! 7138                           0,
36008 8DC2                        00            .byte	0
36009                                           ! 7139                           64,
36010 8DC3                      0040            .word	$40
36011                                           ! 7140                    64,
36012 8DC5                      0040            .word	$40
36013                                           ! 7141                        0xA000,
36014 8DC7                      A000            .word	$A000
36015                                           ! 7142                        0x0000,
36016 8DC9                      0000            .word	0
36017                                           ! 7143                       0,
36018 8DCB                      0000            .word	0
36019 8DCD                      0000            .word	0
36020                                           ! 7144                             7680,
36021 8DCF                      1E00            .word	$1E00
36022                                           ! 7145                        2560,
36023 8DD1                      0A00            .word	$A00
36024                                           ! 7146                        1600,
36025 8DD3                      0640            .word	$640
36026                                           ! 7147                      8,
36027 8DD5                        08            .byte	8
36028                                           ! 7148                      16,
36029 8DD6                        10            .byte	$10
36030                                           ! 7149                           1,
36031 8DD7                        01            .byte	1
36032                                           ! 7150                         24,
36033 8DD8                        18            .byte	$18
36034                                           ! 7151                          188,
36035 8DD9                        BC            .byte	$BC
36036                                           ! 7152                        0x06,
36037 8DDA                        06            .byte	6
36038                                           ! 7153                     0,
36039 8DDB                        00            .byte	0
36040                                           ! 7154                               0,
36041 8DDC                        00            .byte	0
36042                                           ! 7155                          0,
36043 8DDD                        00            .byte	0
36044                                           ! 7156                        8,
36045 8DDE                        08            .byte	8
36046                                           ! 7157                             16,
36047 8DDF                        10            .byte	$10
36048                                           ! 7158                          8,
36049 8DE0                        08            .byte	8
36050                                           ! 7159                               8,
36051 8DE1                        08            .byte	8
36052                                           ! 7160                         8,
36053 8DE2                        08            .byte	8
36054                                           ! 7161                              0,
36055 8DE3                        00            .byte	0
36056                                           ! 7162                         0,
36057 8DE4                        00            .byte	0
36058                                           ! 7163                              0,
36059 8DE5                        00            .byte	0
36060                                           ! 7164                                0,
36061 8DE6                        00            .byte	0
36062                                           ! 7165                        0xE0000000,
36063 8DE7                      0000            .word	0
36064 8DE9                      E000            .word	$E000
36065                                           ! 7166                               0,
36066 8DEB                      0000            .word	0
36067 8DED                      0000            .word	0
36068                                           ! 7167                             0,
36069 8DEF                      0000            .word	0
36070                                           ! 7168                                7680,
36071 8DF1                      1E00            .word	$1E00
36072                                           ! 7169                             0,
36073 8DF3                        00            .byte	0
36074                                           ! 7170                             0,
36075 8DF4                        00            .byte	0
36076                                           ! 7171                           8,
36077 8DF5                        08            .byte	8
36078                                           ! 7172                                16,
36079 8DF6                        10            .byte	$10
36080                                           ! 7173                             8,
36081 8DF7                        08            .byte	8
36082                                           ! 7174                                  8,
36083 8DF8                        08            .byte	8
36084                                           ! 7175                            8,
36085 8DF9                        08            .byte	8
36086                                           ! 7176                                 0,
36087 8DFA                        00            .byte	0
36088                                           ! 7177                            0,
36089 8DFB                        00            .byte	0
36090                                           ! 7178                                 0,
36091 8DFC                        00            .byte	0
36092                                           ! 7179                          0,
36093 8DFD                      0000            .word	0
36094 8DFF                      0000            .word	0
36095                                           ! 7180 } },
36096                                           ! 7181 { 0x018c,
36097 8E01                      018C            .word	$18C
36098                                           ! 7182 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36099 8E03                      009B            .word	$9B
36100                                           ! 7183                           0x01 | 0x02 | 0x04,
36101 8E05                        07            .byte	7
36102                                           ! 7184                           0,
36103 8E06                        00            .byte	0
36104                                           ! 7185                           64,
36105 8E07                      0040            .word	$40
36106                                           ! 7186                    64,
36107 8E09                      0040            .word	$40
36108                                           ! 7187                        0xA000,
36109 8E0B                      A000            .word	$A000
36110                                           ! 7188                        0x0000,
36111 8E0D                      0000            .word	0
36112                                           ! 7189                       0,
36113 8E0F                      0000            .word	0
36114 8E11                      0000            .word	0
36115                                           ! 7190                             10240,
36116 8E13                      2800            .word	$2800
36117                                           ! 7191                        2560,
36118 8E15                      0A00            .word	$A00
36119                                           ! 7192                        1600,
36120 8E17                      0640            .word	$640
36121                                           ! 7193                      8,
36122 8E19                        08            .byte	8
36123                                           ! 7194                      16,
36124 8E1A                        10            .byte	$10
36125                                           ! 7195                           1,
36126 8E1B                        01            .byte	1
36127                                           ! 7196           
36128                                           ! 7196               32,
36129 8E1C                        20            .byte	$20
36130                                           ! 7197                          250,
36131 8E1D                        FA            .byte	$FA
36132                                           ! 7198                        0x06,
36133 8E1E                        06            .byte	6
36134                                           ! 7199                     0,
36135 8E1F                        00            .byte	0
36136                                           ! 7200                               0,
36137 8E20                        00            .byte	0
36138                                           ! 7201                          0,
36139 8E21                        00            .byte	0
36140                                           ! 7202                        8,
36141 8E22                        08            .byte	8
36142                                           ! 7203                             16,
36143 8E23                        10            .byte	$10
36144                                           ! 7204                          8,
36145 8E24                        08            .byte	8
36146                                           ! 7205                               8,
36147 8E25                        08            .byte	8
36148                                           ! 7206                         8,
36149 8E26                        08            .byte	8
36150                                           ! 7207                              0,
36151 8E27                        00            .byte	0
36152                                           ! 7208                         8,
36153 8E28                        08            .byte	8
36154                                           ! 7209                              24,
36155 8E29                        18            .byte	$18
36156                                           ! 7210                                0x02,
36157 8E2A                        02            .byte	2
36158                                           ! 7211                        0xE0000000,
36159 8E2B                      0000            .word	0
36160 8E2D                      E000            .word	$E000
36161                                           ! 7212                               0,
36162 8E2F                      0000            .word	0
36163 8E31                      0000            .word	0
36164                                           ! 7213                             0,
36165 8E33                      0000            .word	0
36166                                           ! 7214                                10240,
36167 8E35                      2800            .word	$2800
36168                                           ! 7215                             0,
36169 8E37                        00            .byte	0
36170                                           ! 7216                             0,
36171 8E38                        00            .byte	0
36172                                           ! 7217                           8,
36173 8E39                        08            .byte	8
36174                                           ! 7218                                16,
36175 8E3A                        10            .byte	$10
36176                                           ! 7219                             8,
36177 8E3B                        08            .byte	8
36178                                           ! 7220                                  8,
36179 8E3C                        08            .byte	8
36180                                           ! 7221                            8,
36181 8E3D                        08            .byte	8
36182                                           ! 7222                                 0,
36183 8E3E                        00            .byte	0
36184                                           ! 7223                            8,
36185 8E3F                        08            .byte	8
36186                                           ! 7224                                 24,
36187 8E40                        18            .byte	$18
36188                                           ! 7225                          0,
36189 8E41                      0000            .word	0
36190 8E43                      0000            .word	0
36191                                           ! 7226 } },
36192                                           ! 7227 { 0xFFFF,
36193 8E45                      FFFF            .word	$FFFF
36194                                           ! 7228 { 0,
36195 8E47                      0000            .word	0
36196                                           ! 7229 } },
36197 8E49                  00000040            .blkb	$40
36198                                           ! 7230 };
36199                                           !BCC_EOS
36200                                           ! 7231 extern char vbebios_copyright;
36201                                           !BCC_EOS
36202                                           ! 7232 extern char vbebios_vendor_name;
36203                                           !BCC_EOS
36204                                           ! 7233 extern char vbebios_product_name;
36205                                           !BCC_EOS
36206                                           ! 7234 extern char vbebios_product_revision;
36207                                           !BCC_EOS
36208                                           ! 7235 #asm
36209                                           !BCC_ASM
36210                       00008E89            _vbebios_copyright:
36211 8E89                        42            .ascii "Bochs/Plex86 VBE(C) 2003 http://savannah.nongnu.org/projects/vgabios/"
36212 8ECE                        00            .byte 0x00
36213                       00008ECF            _vbebios_vendor_name:
36214 8ECF                        42            .ascii "Bochs/Plex86 Developers"
36215 8EE6                        00            .byte 0x00
36216                       00008EE7            _vbebios_product_name:
36217 8EE7                        42            .ascii "Bochs/Plex86 VBE Adapter"
36218 8EFF                        00            .byte 0x00
36219                       00008F00            _vbebios_product_revision:
36220 8F00                        24            .ascii "$Id: vbe.c,v 1.62 2009/01/25 15:46:25 vruppert Exp $"
36221 8F34                        00            .byte 0x00
36222                       00008F35            _vbebios_info_string:
36223 8F35                        42            .ascii "Bochs VBE Display Adapter enabled"
36224 8F56                        0A            .byte 0x0a,0x0d
36225 8F58                        0A            .byte 0x0a,0x0d
36226 8F5A                        00            .byte 0x00
36227                       00008F5B            _no_vbebios_info_string:
36228 8F5B                        4E            .ascii "NO Bochs VBE Support available!"
36229 8F7A                        0A            .byte 0x0a,0x0d
36230 8F7C                        0A            .byte 0x0a,0x0d
36231 8F7E                        00            .byte 0x00
36232                       00008F7F            msg_vbe_init:
36233 8F7F                        56            .ascii "VBE Bios $Id: vbe.c,v 1.62 2009/01/25 15:46:25 vruppert Exp $"
36234 8FBC                        0A            .byte 0x0a,0x0d, 0x00
36235 8FBF                  00000002              .align 2
36236                       00008FC0            vesa_pm_start:
36237 8FC0                      0014              dw vesa_pm_set_window - vesa_pm_start
36238 8FC2                      004B              dw vesa_pm_set_display_start - vesa_pm_start
36239 8FC4                      00FC              dw vesa_pm_unimplemented - vesa_pm_start
36240 8FC6                      0008              dw vesa_pm_io_ports_table - vesa_pm_start
36241                       00008FC8            vesa_pm_io_ports_table:
36242 8FC8                      01CE              dw 0x01CE
36243 8FCA                      01CF              dw 0x01CE + 1
36244 8FCC                      01CF              dw 0x01CF
36245 8FCE                      01D0              dw 0x01CF + 1
36246 8FD0                      FFFF              dw 0xffff
36247 8FD2                      FFFF              dw 0xffff
36248                                             USE32
36249                       00008FD4            vesa_pm_set_window:
36250 8FD4     66    83FB                   00    cmp bx, #0x00
36251 8FD8           74           05              je vesa_pm_set_display_window1
36252 8FDA     66    B8                   0100    mov ax, #0x0100
36253 8FDE           C3                           ret
36254                       00008FDF            vesa_pm_set_display_window1:
36255 8FDF     66    89D0                         mov ax, dx
36256 8FE2     66    52                           push dx
36257 8FE4     66    50                           push ax
36258 8FE6     66    BA                   01CE    mov dx, # 0x01CE
36259 8FEA     66    B8                   0005    mov ax, # 0x5
36260 8FEE     66    EF                           out dx, ax
36261 8FF0     66    58                           pop ax
36262 8FF2     66    BA                   01CF    mov dx, # 0x01CF
36263 8FF6     66    EF                           out dx, ax
36264 8FF8     66    ED                           in ax, dx
36265 8FFA     66    5A                           pop dx
36266 8FFC     66    39C2                         cmp dx, ax
36267 8FFF           75           05              jne illegal_window
36268 9001     66    B8                   004F    mov ax, #0x004f
36269 9005           C3                           ret
36270                       00009006            illegal_window:
36271 9006     66    B8                   014F    mov ax, #0x014f
36272 900A           C3                           ret
36273                       0000900B            vesa_pm_set_display_start:
36274 900B           80FB                   80    cmp bl, #0x80
36275 900E           74           0A              je vesa_pm_set_display_start1
36276 9010           80FB                   00    cmp bl, #0x00
36277 9013           74           05              je vesa_pm_set_display_start1
36278 9015     66    B8                   0100    mov ax, #0x0100
36279 9019           C3                           ret
36280                       0000901A            vesa_pm_set_display_start1:
36281                                           ; convert offset to (X, Y) coordinate
36282                                           ; (would be simpler to change Bochs 1 API...)
36283 901A           50                           push eax
36284 901B           51                           push ecx
36285 901C           52                           push edx
36286 901D           56                           push esi
36287 901E           57                           push edi
36288 901F           C1E2                   10    shl edx, #16
36289 9022           81E1             0000FFFF    and ecx, #0xffff
36290 9028           09D1                         or ecx, edx
36291 902A           C1E1                   02    shl ecx, #2
36292 902D           89C8                         mov eax, ecx
36293 902F           50                           push eax
36294 9030     66    BA                   01CE    mov dx, # 0x01CE
36295 9034     66    B8                   0006    mov ax, # 0x6
36296 9038     66    EF                           out dx, ax
36297 903A     66    BA                   01CF    mov dx, # 0x01CF
36298 903E     66    ED                           in ax, dx
36299 9040         0FB7C8                         movzx ecx, ax
36300 9043     66    BA                   01CE    mov dx, # 0x01CE
36301 9047     66    B8                   0003    mov ax, # 0x3
36302 904B     66    EF                           out dx, ax
36303 904D     66    BA                   01CF    mov dx, # 0x01CF
36304 9051     66    ED                           in ax, dx
36305 9053         0FB7F0                         movzx esi, ax
36306 9056           58                           pop eax
36307 9057           83FE                   04    cmp esi, #4
36308 905A           74           17              jz bpp4_mode
36309 905C           83C6                   07    add esi, #7
36310 905F           C1EE                   03    shr esi, #3
36311 9062         0FAFCE                         imul ecx, esi
36312 9065           31D2                         xor edx, edx
36313 9067           F7F1                         div ecx
36314 9069           89C7                         mov edi, eax
36315 906B           89D0                         mov eax, edx
36316 906D           31D2                         xor edx, edx
36317 906F           F7F6                         div esi
36318 9071           EB           0C              jmp set_xy_regs
36319                       00009073            bpp4_mode:
36320 9073           D1E9                         shr ecx, #1
36321 9075           31D2                         xor edx, edx
36322 9077           F7F1                         div ecx
36323 9079           89C7                         mov edi, eax
36324 907B           89D0                         mov eax, edx
36325 907D           D1E0                         shl eax, #1
36326                       0000907F            set_xy_regs:
36327 907F     66    52                           push dx
36328 9081     66    50                           push ax
36329 9083     66    BA                   01CE    mov dx, # 0x01CE
36330 9087     66    B8                   0008    mov ax, # 0x8
36331 908B     66    EF                           out dx, ax
36332 908D     66    58                           pop ax
36333 908F     66    BA                   01CF    mov dx, # 0x01CF
36334 9093     66    EF                           out dx, ax
36335 9095     66    5A                           pop dx
36336 9097     66    89F8                         mov ax, di
36337 909A     66    52                           push dx
36338 909C     66    50                           push ax
36339 909E     66    BA                   01CE    mov dx, # 0x01CE
36340 90A2     66    B8                   0009    mov ax, # 0x9
36341 90A6     66    EF                           out dx, ax
36342 90A8     66    58                           pop ax
36343 90AA     66    BA                   01CF    mov dx, # 0x01CF
36344 90AE     66    EF                           out dx, ax
36345 90B0     66    5A                           pop dx
36346 90B2           5F                           pop edi
36347 90B3           5E                           pop esi
36348 90B4           5A                           pop edx
36349 90B5           59                           pop ecx
36350 90B6           58                           pop eax
36351 90B7     66    B8                   004F    mov ax, #0x004f
36352 90BB           C3                           ret
36353                       000090BC            vesa_pm_unimplemented:
36354 90BC     66    B8                   014F    mov ax, #0x014f
36355 90C0           C3                           ret
36356                                             USE16
36357                       000090C1            vesa_pm_end:
36358                                           ; DISPI ioport functions
36359                       000090C1            dispi_get_id:
36360 90C1           52                           push dx
36361 90C2           BA                   01CE    mov dx, # 0x01CE
36362 90C5           B8                   0000    mov ax, # 0x0
36363 90C8           EF                           out dx, ax
36364 90C9           BA                   01CF    mov dx, # 0x01CF
36365 90CC           ED                           in ax, dx
36366 90CD           5A                           pop dx
36367 90CE           C3                           ret
36368                       000090CF            dispi_set_id:
36369 90CF           52                           push dx
36370 90D0           50                           push ax
36371 90D1           BA                   01CE    mov dx, # 0x01CE
36372 90D4           B8                   0000    mov ax, # 0x0
36373 90D7           EF                           out dx, ax
36374 90D8           58                           pop ax
36375 90D9           BA                   01CF    mov dx, # 0x01CF
36376 90DC           EF                           out dx, ax
36377 90DD           5A                           pop dx
36378 90DE           C3                           ret
36379                                           ! 7405 endasm
36380                                           !BCC_ENDASM
36381                                           ! 7406 static void dispi_set_xres(xres)
36382                                           ! 7407   Bit16u xres;
36383                                           
36384                       000090DF            _dispi_set_xres:
36385                                           !BCC_EOS
36386                                           ! 7408 {
36387                                           ! 7409 #asm
36388                                           !BCC_ASM
36389                       00000002            _dispi_set_xres.xres	set	2
36390 90DF           55                           push bp
36391 90E0           89E5                         mov bp, sp
36392 90E2           50                           push ax
36393 90E3           52                           push dx
36394 90E4           BA                   01CE    mov dx, # 0x01CE
36395 90E7           B8                   0001    mov ax, # 0x1
36396 90EA           EF                           out dx, ax
36397 90EB           BA                   01CF    mov dx, # 0x01CF
36398 90EE           8B46         04              mov ax, 4[bp] ; xres
36399 90F1           EF                           out dx, ax
36400 90F2           5A                           pop dx
36401 90F3           58                           pop ax
36402 90F4           5D                           pop bp
36403                                           ! 7423 endasm
36404                                           !BCC_ENDASM
36405                                           ! 7424 }
36406 90F5           C3                         ret
36407                                           ! 7425 static void dispi_set_yres(yres)
36408                                           ! 7426   Bit16u yres;
36409                       000090F6            _dispi_set_yres:
36410                                           !BCC_EOS
36411                                           ! 7427 {
36412                                           ! 7428   outw(0x01CE,0x2);
36413 90F6           55                         push	bp
36414 90F7           89E5                       mov	bp,sp
36415                                           ! Debug: list int = const 2 (used reg = )
36416 90F9           B8                   0002  mov	ax,*2
36417 90FC           50                         push	ax
36418                                           ! Debug: list int = const $1CE (used reg = )
36419 90FD           B8                   01CE  mov	ax,#$1CE
36420 9100           50                         push	ax
36421                                           ! Debug: func () void = outw+0 (used reg = )
36422 9101           E8         EB63            call	_outw
36423 9104           89EC                       mov	sp,bp
36424                                           !BCC_EOS
36425                                           ! 7429   outw(0x01CF,yres);
36426                                           ! Debug: list unsigned short yres = [S+2+2] (used reg = )
36427 9106           FF76         04            push	4[bp]
36428                                           ! Debug: list int = const $1CF (used reg = )
36429 9109           B8                   01CF  mov	ax,#$1CF
36430 910C           50                         push	ax
36431                                           ! Debug: func () void = outw+0 (used reg = )
36432 910D           E8         EB57            call	_outw
36433 9110           89EC                       mov	sp,bp
36434                                           !BCC_EOS
36435                                           ! 7430 }
36436 9112           5D                         pop	bp
36437 9113           C3                         ret
36438                                           ! 7431 static void dispi_set_bpp(bpp)
36439                                           ! 7432   Bit16u bpp;
36440                       00009114            _dispi_set_bpp:
36441                                           !BCC_EOS
36442                                           ! 7433 {
36443                                           ! 7434   outw(0x01CE,0x3);
36444 9114           55                         push	bp
36445 9115           89E5                       mov	bp,sp
36446                                           ! Debug: list int = const 3 (used reg = )
36447 9117           B8                   0003  mov	ax,*3
36448 911A           50                         push	ax
36449                                           ! Debug: list int = const $1CE (used reg = )
36450 911B           B8                   01CE  mov	ax,#$1CE
36451 911E           50                         push	ax
36452                                           ! Debug: func () void = outw+0 (used reg = )
36453 911F           E8         EB45            call	_outw
36454 9122           89EC                       mov	sp,bp
36455                                           !BCC_EOS
36456                                           ! 7435   outw(0x01CF,bpp);
36457                                           ! Debug: list unsigned short bpp = [S+2+2] (used reg = )
36458 9124           FF76         04            push	4[bp]
36459                                           ! Debug: list int = const $1CF (used reg = )
36460 9127           B8                   01CF  mov	ax,#$1CF
36461 912A           50                         push	ax
36462                                           ! Debug: func () void = outw+0 (used reg = )
36463 912B           E8         EB39            call	_outw
36464 912E           89EC                       mov	sp,bp
36465                                           !BCC_EOS
36466                                           ! 7436 }
36467 9130           5D                         pop	bp
36468 9131           C3                         ret
36469                                           ! 7437 #asm
36470                                           !BCC_ASM
36471                       00000002            _dispi_set_bpp.bpp	set	2
36472                                           ; AL = bits per pixel / AH = bytes per pixel
36473                       00009132            dispi_get_bpp:
36474 9132           52                           push dx
36475 9133           BA                   01CE    mov dx, # 0x01CE
36476 9136           B8                   0003    mov ax, # 0x3
36477 9139           EF                           out dx, ax
36478 913A           BA                   01CF    mov dx, # 0x01CF
36479 913D           ED                           in ax, dx
36480 913E           88C4                         mov ah, al
36481 9140           C0EC                   03    shr ah, 3
36482 9143           A8                     07    test al, #0x07
36483 9145           74           02              jz get_bpp_noinc
36484 9147           FEC4                         inc ah
36485                       00009149            get_bpp_noinc:
36486 9149           5A                           pop dx
36487 914A           C3                           ret
36488                                           ; get display capabilities
36489                       0000914B            _dispi_get_max_xres:
36490 914B           52                           push dx
36491 914C           53                           push bx
36492 914D           E8         004F              call dispi_get_enable
36493 9150           89C3                         mov bx, ax
36494 9152           0D                   0002    or ax, # 0x02
36495 9155           E8         0037              call _dispi_set_enable
36496 9158           BA                   01CE    mov dx, # 0x01CE
36497 915B           B8                   0001    mov ax, # 0x1
36498 915E           EF                           out dx, ax
36499 915F           BA                   01CF    mov dx, # 0x01CF
36500 9162           ED                           in ax, dx
36501 9163           50                           push ax
36502 9164           89D8                         mov ax, bx
36503 9166           E8         0026              call _dispi_set_enable
36504 9169           58                           pop ax
36505 916A           5B                           pop bx
36506 916B           5A                           pop dx
36507 916C           C3                           ret
36508                       0000916D            _dispi_get_max_bpp:
36509 916D           52                           push dx
36510 916E           53                           push bx
36511 916F           E8         002D              call dispi_get_enable
36512 9172           89C3                         mov bx, ax
36513 9174           0D                   0002    or ax, # 0x02
36514 9177           E8         0015              call _dispi_set_enable
36515 917A           BA                   01CE    mov dx, # 0x01CE
36516 917D           B8                   0003    mov ax, # 0x3
36517 9180           EF                           out dx, ax
36518 9181           BA                   01CF    mov dx, # 0x01CF
36519 9184           ED                           in ax, dx
36520 9185           50                           push ax
36521 9186           89D8                         mov ax, bx
36522 9188           E8         0004              call _dispi_set_enable
36523 918B           58                           pop ax
36524 918C           5B                           pop bx
36525 918D           5A                           pop dx
36526 918E           C3                           ret
36527                       0000918F            _dispi_set_enable:
36528 918F           52                           push dx
36529 9190           50                           push ax
36530 9191           BA                   01CE    mov dx, # 0x01CE
36531 9194           B8                   0004    mov ax, # 0x4
36532 9197           EF                           out dx, ax
36533 9198           58                           pop ax
36534 9199           BA                   01CF    mov dx, # 0x01CF
36535 919C           EF                           out dx, ax
36536 919D           5A                           pop dx
36537 919E           C3                           ret
36538                       0000919F            dispi_get_enable:
36539 919F           52                           push dx
36540 91A0           BA                   01CE    mov dx, # 0x01CE
36541 91A3           B8                   0004    mov ax, # 0x4
36542 91A6           EF                           out dx, ax
36543 91A7           BA                   01CF    mov dx, # 0x01CF
36544 91AA           ED                           in ax, dx
36545 91AB           5A                           pop dx
36546 91AC           C3                           ret
36547                       000091AD            _dispi_set_bank:
36548 91AD           52                           push dx
36549 91AE           50                           push ax
36550 91AF           BA                   01CE    mov dx, # 0x01CE
36551 91B2           B8                   0005    mov ax, # 0x5
36552 91B5           EF                           out dx, ax
36553 91B6           58                           pop ax
36554 91B7           BA                   01CF    mov dx, # 0x01CF
36555 91BA           EF                           out dx, ax
36556 91BB           5A                           pop dx
36557 91BC           C3                           ret
36558                       000091BD            dispi_get_bank:
36559 91BD           52                           push dx
36560 91BE           BA                   01CE    mov dx, # 0x01CE
36561 91C1           B8                   0005    mov ax, # 0x5
36562 91C4           EF                           out dx, ax
36563 91C5           BA                   01CF    mov dx, # 0x01CF
36564 91C8           ED                           in ax, dx
36565 91C9           5A                           pop dx
36566 91CA           C3                           ret
36567                                           ! 7533 endasm
36568                                           !BCC_ENDASM
36569                                           ! 7534 static void dispi_set_bank_farcall()
36570                                           ! 7535 {
36571                       000091CB            _dispi_set_bank_farcall:
36572                                           ! 7536 #asm
36573                                           !BCC_ASM
36574 91CB           81FB                 0100    cmp bx,#0x0100
36575 91CF           74           1E              je dispi_set_bank_farcall_get
36576 91D1           09DB                         or bx,bx
36577 91D3           75           28              jnz dispi_set_bank_farcall_error
36578 91D5           89D0                         mov ax,dx
36579 91D7           52                           push dx
36580 91D8           50                           push ax
36581 91D9           B8                   0005    mov ax,# 0x5
36582 91DC           BA                   01CE    mov dx,# 0x01CE
36583 91DF           EF                           out dx,ax
36584 91E0           58                           pop ax
36585 91E1           BA                   01CF    mov dx,# 0x01CF
36586 91E4           EF                           out dx,ax
36587 91E5           ED                           in ax,dx
36588 91E6           5A                           pop dx
36589 91E7           39C2                         cmp dx,ax
36590 91E9           75           12              jne dispi_set_bank_farcall_error
36591 91EB           B8                   004F    mov ax, #0x004f
36592 91EE           CB                           retf
36593                       000091EF            dispi_set_bank_farcall_get:
36594 91EF           B8                   0005    mov ax,# 0x5
36595 91F2           BA                   01CE    mov dx,# 0x01CE
36596 91F5           EF                           out dx,ax
36597 91F6           BA                   01CF    mov dx,# 0x01CF
36598 91F9           ED                           in ax,dx
36599 91FA           89C2                         mov dx,ax
36600 91FC           CB                           retf
36601                       000091FD            dispi_set_bank_farcall_error:
36602 91FD           B8                   014F    mov ax,#0x014F
36603 9200           CB                           retf
36604                                           ! 7567 endasm
36605                                           !BCC_ENDASM
36606                                           ! 7568 }
36607 9201           C3                         ret
36608                                           ! 7569 #asm
36609                                           !BCC_ASM
36610                       00009202            dispi_set_x_offset:
36611 9202           52                           push dx
36612 9203           50                           push ax
36613 9204           BA                   01CE    mov dx, # 0x01CE
36614 9207           B8                   0008    mov ax, # 0x8
36615 920A           EF                           out dx, ax
36616 920B           58                           pop ax
36617 920C           BA                   01CF    mov dx, # 0x01CF
36618 920F           EF                           out dx, ax
36619 9210           5A                           pop dx
36620 9211           C3                           ret
36621                       00009212            dispi_get_x_offset:
36622 9212           52                           push dx
36623 9213           BA                   01CE    mov dx, # 0x01CE
36624 9216           B8                   0008    mov ax, # 0x8
36625 9219           EF                           out dx, ax
36626 921A           BA                   01CF    mov dx, # 0x01CF
36627 921D           ED                           in ax, dx
36628 921E           5A                           pop dx
36629 921F           C3                           ret
36630                       00009220            dispi_set_y_offset:
36631 9220           52                           push dx
36632 9221           50                           push ax
36633 9222           BA                   01CE    mov dx, # 0x01CE
36634 9225           B8                   0009    mov ax, # 0x9
36635 9228           EF                           out dx, ax
36636 9229           58                           pop ax
36637 922A           BA                   01CF    mov dx, # 0x01CF
36638 922D           EF                           out dx, ax
36639 922E           5A                           pop dx
36640 922F           C3                           ret
36641                       00009230            dispi_get_y_offset:
36642 9230           52                           push dx
36643 9231           BA                   01CE    mov dx, # 0x01CE
36644 9234           B8                   0009    mov ax, # 0x9
36645 9237           EF                           out dx, ax
36646 9238           BA                   01CF    mov dx, # 0x01CF
36647 923B           ED                           in ax, dx
36648 923C           5A                           pop dx
36649 923D           C3                           ret
36650                       0000923E            vga_set_virt_width:
36651 923E           50                           push ax
36652 923F           53                           push bx
36653 9240           52                           push dx
36654 9241           89C3                         mov bx, ax
36655 9243           E8         FEEC              call dispi_get_bpp
36656 9246           3C                     04    cmp al, #0x04
36657 9248           77           02              ja set_width_svga
36658 924A           D1EB                         shr bx, #1
36659                       0000924C            set_width_svga:
36660 924C           C1EB                   03    shr bx, #3
36661 924F           BA                   03D4    mov dx, # 0x3d4
36662 9252           88DC                         mov ah, bl
36663 9254           B0                     13    mov al, #0x13
36664 9256           EF                           out dx, ax
36665 9257           5A                           pop dx
36666 9258           5B                           pop bx
36667 9259           58                           pop ax
36668 925A           C3                           ret
36669                       0000925B            dispi_set_virt_width:
36670 925B           E8         FFE0              call vga_set_virt_width
36671 925E           52                           push dx
36672 925F           50                           push ax
36673 9260           BA                   01CE    mov dx, # 0x01CE
36674 9263           B8                   0006    mov ax, # 0x6
36675 9266           EF                           out dx, ax
36676 9267           58                           pop ax
36677 9268           BA                   01CF    mov dx, # 0x01CF
36678 926B           EF                           out dx, ax
36679 926C           5A                           pop dx
36680 926D           C3                           ret
36681                       0000926E            dispi_get_virt_width:
36682 926E           52                           push dx
36683 926F           BA                   01CE    mov dx, # 0x01CE
36684 9272           B8                   0006    mov ax, # 0x6
36685 9275           EF                           out dx, ax
36686 9276           BA                   01CF    mov dx, # 0x01CF
36687 9279           ED                           in ax, dx
36688 927A           5A                           pop dx
36689 927B           C3                           ret
36690                       0000927C            dispi_get_virt_height:
36691 927C           52                           push dx
36692 927D           BA                   01CE    mov dx, # 0x01CE
36693 9280           B8                   0007    mov ax, # 0x7
36694 9283           EF                           out dx, ax
36695 9284           BA                   01CF    mov dx, # 0x01CF
36696 9287           ED                           in ax, dx
36697 9288           5A                           pop dx
36698 9289           C3                           ret
36699                       0000928A            _vga_compat_setup:
36700 928A           50                           push ax
36701 928B           52                           push dx
36702                                             ; set CRT X resolution
36703 928C           BA                   01CE    mov dx, # 0x01CE
36704 928F           B8                   0001    mov ax, # 0x1
36705 9292           EF                           out dx, ax
36706 9293           BA                   01CF    mov dx, # 0x01CF
36707 9296           ED                           in ax, dx
36708 9297           50                           push ax
36709 9298           BA                   03D4    mov dx, # 0x3d4
36710 929B           B8                   0011    mov ax, #0x0011
36711 929E           EF                           out dx, ax
36712 929F           58                           pop ax
36713 92A0           50                           push ax
36714 92A1           C1E8                   03    shr ax, #3
36715 92A4           48                           dec ax
36716 92A5           88C4                         mov ah, al
36717 92A7           B0                     01    mov al, #0x01
36718 92A9           EF                           out dx, ax
36719 92AA           58                           pop ax
36720 92AB           E8         FF90              call vga_set_virt_width
36721                                             ; set CRT Y resolution
36722 92AE           BA                   01CE    mov dx, # 0x01CE
36723 92B1           B8                   0002    mov ax, # 0x2
36724 92B4           EF                           out dx, ax
36725 92B5           BA                   01CF    mov dx, # 0x01CF
36726 92B8           ED                           in ax, dx
36727 92B9           48                           dec ax
36728 92BA           50                           push ax
36729 92BB           BA                   03D4    mov dx, # 0x3d4
36730 92BE           88C4                         mov ah, al
36731 92C0           B0                     12    mov al, #0x12
36732 92C2           EF                           out dx, ax
36733 92C3           58                           pop ax
36734 92C4           B0                     07    mov al, #0x07
36735 92C6           EE                           out dx, al
36736 92C7           42                           inc dx
36737 92C8           EC                           in al, dx
36738 92C9           24                     BD    and al, #0xbd
36739 92CB           F6C4                   01    test ah, #0x01
36740 92CE           74           02              jz bit8_clear
36741 92D0           0C                     02    or al, #0x02
36742                       000092D2            bit8_clear:
36743 92D2           F6C4                   02    test ah, #0x02
36744 92D5           74           02              jz bit9_clear
36745 92D7           0C                     40    or al, #0x40
36746                       000092D9            bit9_clear:
36747 92D9           EE                           out dx, al
36748                                             ; other settings
36749 92DA           BA                   03D4    mov dx, # 0x3d4
36750 92DD           B8                   0009    mov ax, #0x0009
36751 92E0           EF                           out dx, ax
36752 92E1           B0                     17    mov al, #0x17
36753 92E3           EE                           out dx, al
36754 92E4           BA                   03D5    mov dx, # 0x3d5
36755 92E7           EC                           in al, dx
36756 92E8           0C                     03    or al, #0x03
36757 92EA           EE                           out dx, al
36758 92EB           BA                   03DA    mov dx, # 0x3da
36759 92EE           EC                           in al, dx
36760 92EF           BA                   03C0    mov dx, # 0x3c0
36761 92F2           B0                     10    mov al, #0x10
36762 92F4           EE                           out dx, al
36763 92F5           BA                   03C1    mov dx, # 0x3c1
36764 92F8           EC                           in al, dx
36765 92F9           0C                     01    or al, #0x01
36766 92FB           BA                   03C0    mov dx, # 0x3c0
36767 92FE           EE                           out dx, al
36768 92FF           B0                     20    mov al, #0x20
36769 9301           EE                           out dx, al
36770 9302           BA                   03CE    mov dx, # 0x3ce
36771 9305           B8                   0506    mov ax, #0x0506
36772 9308           EF                           out dx, ax
36773 9309           BA                   03C4    mov dx, # 0x3c4
36774 930C           B8                   0F02    mov ax, #0x0f02
36775 930F           EF                           out dx, ax
36776                                             ; settings for >= 8bpp
36777 9310           BA                   01CE    mov dx, # 0x01CE
36778 9313           B8                   0003    mov ax, # 0x3
36779 9316           EF                           out dx, ax
36780 9317           BA                   01CF    mov dx, # 0x01CF
36781 931A           ED                           in ax, dx
36782 931B           3C                     08    cmp al, #0x08
36783 931D           72           40              jb vga_compat_end
36784 931F           BA                   03D4    mov dx, # 0x3d4
36785 9322           B0                     14    mov al, #0x14
36786 9324           EE                           out dx, al
36787 9325           BA                   03D5    mov dx, # 0x3d5
36788 9328           EC                           in al, dx
36789 9329           0C                     40    or al, #0x40
36790 932B           EE                           out dx, al
36791 932C           BA                   03DA    mov dx, # 0x3da
36792 932F           EC                           in al, dx
36793 9330           BA                   03C0    mov dx, # 0x3c0
36794 9333           B0                     10    mov al, #0x10
36795 9335           EE                           out dx, al
36796 9336           BA                   03C1    mov dx, # 0x3c1
36797 9339           EC                           in al, dx
36798 933A           0C                     40    or al, #0x40
36799 933C           BA                   03C0    mov dx, # 0x3c0
36800 933F           EE                           out dx, al
36801 9340           B0                     20    mov al, #0x20
36802 9342           EE                           out dx, al
36803 9343           BA                   03C4    mov dx, # 0x3c4
36804 9346           B0                     04    mov al, #0x04
36805 9348           EE                           out dx, al
36806 9349           BA                   03C5    mov dx, # 0x3c5
36807 934C           EC                           in al, dx
36808 934D           0C                     08    or al, #0x08
36809 934F           EE                           out dx, al
36810 9350           BA                   03CE    mov dx, # 0x3ce
36811 9353           B0                     05    mov al, #0x05
36812 9355           EE                           out dx, al
36813 9356           BA                   03CF    mov dx, # 0x3cf
36814 9359           EC                           in al, dx
36815 935A           24                     9F    and al, #0x9f
36816 935C           0C                     40    or al, #0x40
36817 935E           EE                           out dx, al
36818                       0000935F            vga_compat_end:
36819 935F           5A                           pop dx
36820 9360           58                           pop ax
36821                                           ! 7781 endasm
36822                                           !BCC_ENDASM
36823                                           ! 7782 static ModeInfoListItem* mode_info_find_mode(mode, using_lfb)
36824                                           ! 7783   Bit16u mode; Boolean using_lfb;
36825                       00009361            _mode_info_find_mode:
36826                                           !BCC_EOS
36827                                           !BCC_EOS
36828                                           ! 7784 {
36829                                           ! 7785   ModeInfoListItem *cur_info=&mode_info_list;
36830 9361           55                         push	bp
36831 9362           89E5                       mov	bp,sp
36832 9364           4C                         dec	sp
36833 9365           4C                         dec	sp
36834                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
36835 9366           BB                   7E11  mov	bx,#_mode_info_list
36836 9369           895E         FE            mov	-2[bp],bx
36837                                           !BCC_EOS
36838                                           ! 7786   while (cur_info->mode != 0xFFFF)
36839                                           ! 7787   {
36840 936C           EB           43            jmp .2B9
36841                       0000936E            .2BA:
36842                                           ! 7788     if (cur_info->mode == mode)
36843 936E           8B5E         FE            mov	bx,-2[bp]
36844                                           ! Debug: logeq unsigned short mode = [S+4+2] to unsigned short = [bx+0] (used reg = )
36845 9371           8B1F                       mov	bx,[bx]
36846 9373           3B5E         04            cmp	bx,4[bp]
36847 9376           75           30            jne 	.2BB
36848                       00009378            .2BC:
36849                                           ! 7789     {
36850                                           ! 7790       if (!using_lfb)
36851 9378           8B46         06            mov	ax,6[bp]
36852 937B           85C0                       test	ax,ax
36853 937D           75           09            jne 	.2BD
36854                       0000937F            .2BE:
36855                                           ! 7791       {
36856                                           ! 7792         return cur_info;
36857 937F           8B46         FE            mov	ax,-2[bp]
36858 9382           89EC                       mov	sp,bp
36859 9384           5D                         pop	bp
36860 9385           C3                         ret
36861                                           !BCC_EOS
36862                                           ! 7793       }
36863                                           ! 7794       else if (cur_info->info.ModeAttributes & 0x0080)
36864 9386           EB           1E            jmp .2BF
36865                       00009388            .2BD:
36866 9388           8B5E         FE            mov	bx,-2[bp]
36867                                           ! Debug: and int = const $80 to unsigned short = [bx+2] (used reg = )
36868 938B           8A47         02            mov	al,2[bx]
36869 938E           24                     80  and	al,#$80
36870 9390           84C0                       test	al,al
36871 9392           74           09            je  	.2C0
36872                       00009394            .2C1:
36873                                           ! 7795       {
36874                                           ! 7796         return cur_info;
36875 9394           8B46         FE            mov	ax,-2[bp]
36876 9397           89EC                       mov	sp,bp
36877 9399           5D                         pop	bp
36878 939A           C3                         ret
36879                                           !BCC_EOS
36880                                           ! 7797       }
36881                                           ! 7798       else
36882                                           ! 7799       {
36883 939B           EB           09            jmp .2C2
36884                       0000939D            .2C0:
36885                                           ! 7800         cur_info++;
36886                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
36887 939D           8B5E         FE            mov	bx,-2[bp]
36888 93A0           83C3                   44  add	bx,*$44
36889 93A3           895E         FE            mov	-2[bp],bx
36890                                           !BCC_EOS
36891                                           ! 7801       }
36892                                           ! 7802     }
36893                       000093A6            .2C2:
36894                       000093A6            .2BF:
36895                                           ! 7803     else
36896                                           ! 7804     {
36897 93A6           EB           09            jmp .2C3
36898                       000093A8            .2BB:
36899                                           ! 7805       cur_info++;
36900                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
36901 93A8           8B5E         FE            mov	bx,-2[bp]
36902 93AB           83C3                   44  add	bx,*$44
36903 93AE           895E         FE            mov	-2[bp],bx
36904                                           !BCC_EOS
36905                                           ! 7806     }
36906                                           ! 7807   }
36907                       000093B1            .2C3:
36908                                           ! 7808   return 0;
36909                       000093B1            .2B9:
36910 93B1           8B5E         FE            mov	bx,-2[bp]
36911                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
36912 93B4           8B1F                       mov	bx,[bx]
36913 93B6           81FB                 FFFF  cmp	bx,#$FFFF
36914 93BA           75           B2            jne	.2BA
36915                       000093BC            .2C4:
36916                       000093BC            .2B8:
36917 93BC           31C0                       xor	ax,ax
36918 93BE           89EC                       mov	sp,bp
36919 93C0           5D                         pop	bp
36920 93C1           C3                         ret
36921                                           !BCC_EOS
36922                                           ! 7809 }
36923                                           ! 7810 #asm
36924                                           !BCC_ASM
36925                       00000004            _mode_info_find_mode.using_lfb	set	4
36926                       00000002            _mode_info_find_mode.mode	set	2
36927                                           ; Has 1 display - Returns true if 1 display detected
36928                       000093C2            _vbe_has_vbe_display:
36929 93C2           1E                           push ds
36930 93C3           53                           push bx
36931 93C4           B8                   0040    mov ax, # 0x40
36932 93C7           8ED8                         mov ds, ax
36933 93C9           BB                   00B9    mov bx, # 0xB9
36934 93CC           8A07                         mov al, [bx]
36935 93CE           24                     01    and al, #0x01
36936 93D0           30E4                         xor ah, ah
36937 93D2           5B                           pop bx
36938 93D3           1F                           pop ds
36939 93D4           C3                           ret
36940                                           ; 1 Init - Initialise the Vesa Bios Extension Code
36941                                           ; This function does a sanity check on the host side display code interface.
36942                       000093D5            vbe_init:
36943 93D5           B8                   B0C0    mov ax, # 0xB0C0
36944 93D8           E8         FCF4              call dispi_set_id
36945 93DB           E8         FCE3              call dispi_get_id
36946 93DE           3D                   B0C0    cmp ax, # 0xB0C0
36947 93E1           75           16              jne no_vbe_interface
36948 93E3           1E                           push ds
36949 93E4           53                           push bx
36950 93E5           B8                   0040    mov ax, # 0x40
36951 93E8           8ED8                         mov ds, ax
36952 93EA           BB                   00B9    mov bx, # 0xB9
36953 93ED           B0                     01    mov al, #0x01
36954 93EF           8807                         mov [bx], al
36955 93F1           5B                           pop bx
36956 93F2           1F                           pop ds
36957 93F3           B8                   B0C5    mov ax, # 0xB0C5
36958 93F6           E8         FCD6              call dispi_set_id
36959                       000093F9            no_vbe_interface:
36960 93F9           BB                   8F7F    mov bx, #msg_vbe_init
36961 93FC           53                           push bx
36962 93FD           E8         E87A              call _printf
36963 9400           44                           inc sp
36964 9401           44                           inc sp
36965 9402           C3                           ret
36966                                           ; 1 Display Info - Display information on screen about the 1
36967                       00009403            vbe_display_info:
36968 9403           E8         FFBC              call _vbe_has_vbe_display
36969 9406           85C0                         test ax, ax
36970 9408           74           0B              jz no_vbe_flag
36971 940A           B8                   C000    mov ax, #0xc000
36972 940D           8ED8                         mov ds, ax
36973 940F           BE                   8F35    mov si, #_vbebios_info_string
36974 9412           E9         A220              jmp _display_string
36975                       00009415            no_vbe_flag:
36976 9415           B8                   C000    mov ax, #0xc000
36977 9418           8ED8                         mov ds, ax
36978 941A           BE                   8F5B    mov si, #_no_vbebios_info_string
36979 941D           E9         A215              jmp _display_string
36980                                           ; helper function for memory size calculation
36981                       00009420            lmulul:
36982 9420     66    25               0000FFFF    and eax, #0x0000FFFF
36983 9426     66    C1E3                   10    shl ebx, #16
36984 942A     66    09D8                         or eax, ebx
36985 942D           36                           SEG SS
36986 942E     66    F725                         mul eax, dword ptr [di]
36987 9431     66    89C3                         mov ebx, eax
36988 9434     66    C1EB                   10    shr ebx, #16
36989 9438           C3                           ret
36990                                           ! 7874 endasm
36991                                           !BCC_ENDASM
36992                                           ! 7875 void vbe_biosfn_return_controller_information(AX, ES, DI)
36993                                           ! Register BX used in function mode_info_find_mode
36994                                           ! 7876 Bit16u *AX;Bit16u ES;Bit16u DI;
36995                                           export	_vbe_biosfn_return_controller_information
36996                       00009439            _vbe_biosfn_return_controller_information:
36997                                           !BCC_EOS
36998                                           !BCC_EOS
36999                                           !BCC_EOS
37000                                           ! 7877 {
37001                                           ! 7878         Bit16u ss=get_SS();
37002 9439           55                         push	bp
37003 943A           89E5                       mov	bp,sp
37004 943C           4C                         dec	sp
37005 943D           4C                         dec	sp
37006                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37007 943E           E8         E836            call	_get_SS
37008                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
37009 9441           8946         FE            mov	-2[bp],ax
37010                                           !BCC_EOS
37011                                           ! 7879         VbeInfoBlock vbe_info_block;
37012                                           !BCC_EOS
37013                                           ! 7880         Bit16u status;
37014                                           !BCC_EOS
37015                                           ! 7881         Bit16u result;
37016                                           !BCC_EOS
37017                                           ! 7882         Bit16u vbe2_info;
37018                                           !BCC_EOS
37019                                           ! 7883         Bit16u cur_mode=0;
37020 9444           81C4                 FDF8  add	sp,#-$208
37021                                           ! Debug: eq int = const 0 to unsigned short cur_mode = [S+$20C-$20C] (used reg = )
37022 9448           31C0                       xor	ax,ax
37023 944A           8986       FDF6            mov	-$20A[bp],ax
37024                                           !BCC_EOS
37025                                           ! 7884         Bit16u cur_ptr=34;
37026 944E           4C                         dec	sp
37027 944F           4C                         dec	sp
37028                                           ! Debug: eq int = const $22 to unsigned short cur_ptr = [S+$20E-$20E] (used reg = )
37029 9450           B8                   0022  mov	ax,*$22
37030 9453           8986       FDF4            mov	-$20C[bp],ax
37031                                           !BCC_EOS
37032                                           ! 7885         Bit16u size_64k;
37033                                           !BCC_EOS
37034                                           ! 7886         ModeInfoListItem *cur_info=&mode_info_list;
37035 9457           83C4                   FC  add	sp,*-4
37036                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
37037 945A           BB                   7E11  mov	bx,#_mode_info_list
37038 945D           899E       FDF0            mov	-$210[bp],bx
37039                                           !BCC_EOS
37040                                           ! 7887         status = read_word(ss, AX);
37041                                           ! Debug: list * unsigned short AX = [S+$212+2] (used reg = )
37042 9461           FF76         04            push	4[bp]
37043                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37044 9464           FF76         FE            push	-2[bp]
37045                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
37046 9467           E8         E794            call	_read_word
37047 946A           83C4                   04  add	sp,*4
37048                                           ! Debug: eq unsigned short = ax+0 to unsigned short status = [S+$212-$206] (used reg = )
37049 946D           8986       FDFC            mov	-$204[bp],ax
37050                                           !BCC_EOS
37051                                           ! 7888         vbe2_info = 0;
37052                                           ! Debug: eq int = const 0 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
37053 9471           31C0                       xor	ax,ax
37054 9473           8986       FDF8            mov	-$208[bp],ax
37055                                           !BCC_EOS
37056                                           ! 7889         memcpyb(ss, &vbe_info_block, ES, DI, sizeof(vbe_info_block));
37057                                           ! Debug: list int = const $200 (used reg = )
37058 9477           B8                   0200  mov	ax,#$200
37059 947A           50                         push	ax
37060                                           ! Debug: list unsigned short DI = [S+$214+6] (used reg = )
37061 947B           FF76         08            push	8[bp]
37062                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
37063 947E           FF76         06            push	6[bp]
37064                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$218-$204 (used reg = )
37065 9481           8D9E       FDFE            lea	bx,-$202[bp]
37066 9485           53                         push	bx
37067                                           ! Debug: list unsigned short ss = [S+$21A-4] (used reg = )
37068 9486           FF76         FE            push	-2[bp]
37069                                           ! Debug: func () void = memcpyb+0 (used reg = )
37070 9489           E8         E6FF            call	_memcpyb
37071 948C           83C4                   0A  add	sp,*$A
37072                                           !BCC_EOS
37073                                           ! 7890         if (((vbe_info_block.VbeSignature[0] == 'V') &&
37074                                           ! 7891              (vbe_info_block.VbeSignature[1] == 'B') &&
37075                                           ! 7892              (vbe_info_block.VbeSignature[2] == 'E') &&
37076                                           ! 7893              (vbe_info_block.VbeSignature[3] == '2')) ||
37077                                           ! 7894             ((vbe_info_block.VbeSignature[0] == 'V') &&
37078                                           ! 7895              (vbe_info_block.VbeSignature[1] == 'E') &&
37079                                           ! 7896              (vbe_info_block.VbeSignature[2] == 'S') &&
37080                                           ! 7897              (vbe_info_block.VbeSignature[3] == 'A')) )
37081                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
37082 948F           8A86       FDFE            mov	al,-$202[bp]
37083 9493           3C                     56  cmp	al,*$56
37084 9495           75           18            jne 	.2C7
37085                       00009497            .2CA:
37086                                           ! Debug: logeq int = const $42 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
37087 9497           8A86       FDFF            mov	al,-$201[bp]
37088 949B           3C                     42  cmp	al,*$42
37089 949D           75           10            jne 	.2C7
37090                       0000949F            .2C9:
37091                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
37092 949F           8A86       FE00            mov	al,-$200[bp]
37093 94A3           3C                     45  cmp	al,*$45
37094 94A5           75           08            jne 	.2C7
37095                       000094A7            .2C8:
37096                                           ! Debug: logeq int = const $32 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
37097 94A7           8A86       FE01            mov	al,-$1FF[bp]
37098 94AB           3C                     32  cmp	al,*$32
37099 94AD           74           20            je  	.2C6
37100                       000094AF            .2C7:
37101                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
37102 94AF           8A86       FDFE            mov	al,-$202[bp]
37103 94B3           3C                     56  cmp	al,*$56
37104 94B5           75           1F            jne 	.2C5
37105                       000094B7            .2CD:
37106                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
37107 94B7           8A86       FDFF            mov	al,-$201[bp]
37108 94BB           3C                     45  cmp	al,*$45
37109 94BD           75           17            jne 	.2C5
37110                       000094BF            .2CC:
37111                                           ! Debug: logeq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
37112 94BF           8A86       FE00            mov	al,-$200[bp]
37113 94C3           3C                     53  cmp	al,*$53
37114 94C5           75           0F            jne 	.2C5
37115                       000094C7            .2CB:
37116                                           ! Debug: logeq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
37117 94C7           8A86       FE01            mov	al,-$1FF[bp]
37118 94CB           3C                     41  cmp	al,*$41
37119 94CD           75           07            jne 	.2C5
37120                       000094CF            .2C6:
37121                                           ! 7898         {
37122                                           ! 7899                 vbe2_info = 1;
37123                                           ! Debug: eq int = const 1 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
37124 94CF           B8                   0001  mov	ax,*1
37125 94D2           8986       FDF8            mov	-$208[bp],ax
37126                                           !BCC_EOS
37127                                           ! 7900         }
37128                                           ! 7901         vbe_info_block.VbeSignature[0] = 'V';
37129                       000094D6            .2C5:
37130                                           ! Debug: eq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
37131 94D6           B0                     56  mov	al,*$56
37132 94D8           8886       FDFE            mov	-$202[bp],al
37133                                           !BCC_EOS
37134                                           ! 7902         vbe_info_block.VbeSignature[1] = 'E';
37135                                           ! Debug: eq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
37136 94DC           B0                     45  mov	al,*$45
37137 94DE           8886       FDFF            mov	-$201[bp],al
37138                                           !BCC_EOS
37139                                           ! 7903         vbe_info_block.VbeSignature[2] = 'S';
37140                                           ! Debug: eq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
37141 94E2           B0                     53  mov	al,*$53
37142 94E4           8886       FE00            mov	-$200[bp],al
37143                                           !BCC_EOS
37144                                           ! 7904         vbe_info_block.VbeSignature[3] = 'A';
37145                                           ! Debug: eq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
37146 94E8           B0                     41  mov	al,*$41
37147 94EA           8886       FE01            mov	-$1FF[bp],al
37148                                           !BCC_EOS
37149                                           ! 7905         vbe_info_block.VbeVersion
37150                                           ! 7905  = 0x0200;
37151                                           ! Debug: eq int = const $200 to unsigned short vbe_info_block = [S+$212-$200] (used reg = )
37152 94EE           B8                   0200  mov	ax,#$200
37153 94F1           8986       FE02            mov	-$1FE[bp],ax
37154                                           !BCC_EOS
37155                                           ! 7906         vbe_info_block.OemStringPtr_Seg = 0xc000;
37156                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1FC] (used reg = )
37157 94F5           B8                   C000  mov	ax,#$C000
37158 94F8           8986       FE06            mov	-$1FA[bp],ax
37159                                           !BCC_EOS
37160                                           ! 7907         vbe_info_block.OemStringPtr_Off = &vbebios_copyright;
37161                                           ! Debug: eq * char = vbebios_copyright+0 to unsigned short vbe_info_block = [S+$212-$1FE] (used reg = )
37162 94FC           BB                   8E89  mov	bx,#_vbebios_copyright
37163 94FF           899E       FE04            mov	-$1FC[bp],bx
37164                                           !BCC_EOS
37165                                           ! 7908         vbe_info_block.Capabilities[0] = 0x0001;
37166                                           ! Debug: eq int = const 1 to unsigned char vbe_info_block = [S+$212-$1FA] (used reg = )
37167 9503           B0                     01  mov	al,*1
37168 9505           8886       FE08            mov	-$1F8[bp],al
37169                                           !BCC_EOS
37170                                           ! 7909         vbe_info_block.Capabilities[1] = 0;
37171                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F9] (used reg = )
37172 9509           30C0                       xor	al,al
37173 950B           8886       FE09            mov	-$1F7[bp],al
37174                                           !BCC_EOS
37175                                           ! 7910         vbe_info_block.Capabilities[2] = 0;
37176                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F8] (used reg = )
37177 950F           30C0                       xor	al,al
37178 9511           8886       FE0A            mov	-$1F6[bp],al
37179                                           !BCC_EOS
37180                                           ! 7911         vbe_info_block.Capabilities[3] = 0;
37181                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F7] (used reg = )
37182 9515           30C0                       xor	al,al
37183 9517           8886       FE0B            mov	-$1F5[bp],al
37184                                           !BCC_EOS
37185                                           ! 7912         vbe_info_block.VideoModePtr_Seg= ES ;
37186                                           ! Debug: eq unsigned short ES = [S+$212+4] to unsigned short vbe_info_block = [S+$212-$1F4] (used reg = )
37187 951B           8B46         06            mov	ax,6[bp]
37188 951E           8986       FE0E            mov	-$1F2[bp],ax
37189                                           !BCC_EOS
37190                                           ! 7913         vbe_info_block.VideoModePtr_Off= DI + 34;
37191                                           ! Debug: add int = const $22 to unsigned short DI = [S+$212+6] (used reg = )
37192 9522           8B46         08            mov	ax,8[bp]
37193                                           ! Debug: eq unsigned int = ax+$22 to unsigned short vbe_info_block = [S+$212-$1F6] (used reg = )
37194 9525           05                   0022  add	ax,*$22
37195 9528           8986       FE0C            mov	-$1F4[bp],ax
37196                                           !BCC_EOS
37197                                           ! 7914         outw(0x01CE, 0xa);
37198                                           ! Debug: list int = const $A (used reg = )
37199 952C           B8                   000A  mov	ax,*$A
37200 952F           50                         push	ax
37201                                           ! Debug: list int = const $1CE (used reg = )
37202 9530           B8                   01CE  mov	ax,#$1CE
37203 9533           50                         push	ax
37204                                           ! Debug: func () void = outw+0 (used reg = )
37205 9534           E8         E730            call	_outw
37206 9537           83C4                   04  add	sp,*4
37207                                           !BCC_EOS
37208                                           ! 7915         vbe_info_block.TotalMemory = inw(0x01CF);
37209                                           ! Debug: list int = const $1CF (used reg = )
37210 953A           B8                   01CF  mov	ax,#$1CF
37211 953D           50                         push	ax
37212                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37213 953E           E8         E70B            call	_inw
37214 9541           44                         inc	sp
37215 9542           44                         inc	sp
37216                                           ! Debug: eq unsigned short = ax+0 to unsigned short vbe_info_block = [S+$212-$1F2] (used reg = )
37217 9543           8986       FE10            mov	-$1F0[bp],ax
37218                                           !BCC_EOS
37219                                           ! 7916         if (vbe2_info)
37220 9547           8B86       FDF8            mov	ax,-$208[bp]
37221 954B           85C0                       test	ax,ax
37222 954D           74           4B            je  	.2CE
37223                       0000954F            .2CF:
37224                                           ! 7917         {
37225                                           ! 7918                 vbe_info_block.OemSoftwareRev = 0x0002;;
37226                                           ! Debug: eq int = const 2 to unsigned short vbe_info_block = [S+$212-$1F0] (used reg = )
37227 954F           B8                   0002  mov	ax,*2
37228 9552           8986       FE12            mov	-$1EE[bp],ax
37229                                           !BCC_EOS
37230                                           !BCC_EOS
37231                                           ! 7919                 vbe_info_block.OemVendorNamePtr_Seg = 0xc000;
37232                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1EC] (used reg = )
37233 9556           B8                   C000  mov	ax,#$C000
37234 9559           8986       FE16            mov	-$1EA[bp],ax
37235                                           !BCC_EOS
37236                                           ! 7920                 vbe_info_block.OemVendorNamePtr_Off = &vbebios_vendor_name;
37237                                           ! Debug: eq * char = vbebios_vendor_name+0 to unsigned short vbe_info_block = [S+$212-$1EE] (used reg = )
37238 955D           BB                   8ECF  mov	bx,#_vbebios_vendor_name
37239 9560           899E       FE14            mov	-$1EC[bp],bx
37240                                           !BCC_EOS
37241                                           ! 7921                 vbe_info_block.OemProductNamePtr_Seg = 0xc000;
37242                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E8] (used reg = )
37243 9564           B8                   C000  mov	ax,#$C000
37244 9567           8986       FE1A            mov	-$1E6[bp],ax
37245                                           !BCC_EOS
37246                                           ! 7922                 vbe_info_block.OemProductNamePtr_Off = &vbebios_product_name;
37247                                           ! Debug: eq * char = vbebios_product_name+0 to unsigned short vbe_info_block = [S+$212-$1EA] (used reg = )
37248 956B           BB                   8EE7  mov	bx,#_vbebios_product_name
37249 956E           899E       FE18            mov	-$1E8[bp],bx
37250                                           !BCC_EOS
37251                                           ! 7923                 vbe_info_block.OemProductRevPtr_Seg = 0xc000;
37252                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E4] (used reg = )
37253 9572           B8                   C000  mov	ax,#$C000
37254 9575           8986       FE1E            mov	-$1E2[bp],ax
37255                                           !BCC_EOS
37256                                           ! 7924                 vbe_info_block.OemProductRevPtr_Off = &vbebios_product_revision;
37257                                           ! Debug: eq * char = vbebios_product_revision+0 to unsigned short vbe_info_block = [S+$212-$1E6] (used reg = )
37258 9579           BB                   8F00  mov	bx,#_vbebios_product_revision
37259 957C           899E       FE1C            mov	-$1E4[bp],bx
37260                                           !BCC_EOS
37261                                           ! 7925                 memcpyb(ES, DI, ss, &vbe_info_block, sizeof(vbe_info_block));
37262                                           ! Debug: list int = const $200 (used reg = )
37263 9580           B8                   0200  mov	ax,#$200
37264 9583           50                         push	ax
37265                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
37266 9584           8D9E       FDFE            lea	bx,-$202[bp]
37267 9588           53                         push	bx
37268                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
37269 9589           FF76         FE            push	-2[bp]
37270                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
37271 958C           FF76         08            push	8[bp]
37272                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
37273 958F           FF76         06            push	6[bp]
37274                                           ! Debug: func () void = memcpyb+0 (used reg = )
37275 9592           E8         E5F6            call	_memcpyb
37276 9595           83C4                   0A  add	sp,*$A
37277                                           !BCC_EOS
37278                                           ! 7926         }
37279                                           ! 7927         else
37280                                           ! 7928         {
37281 9598           EB           18            jmp .2D0
37282                       0000959A            .2CE:
37283                                           ! 7929                 memcpyb(ES, DI, ss, &vbe_info_block, 256);
37284                                           ! Debug: list int = const $100 (used reg = )
37285 959A           B8                   0100  mov	ax,#$100
37286 959D           50                         push	ax
37287                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
37288 959E           8D9E       FDFE            lea	bx,-$202[bp]
37289 95A2           53                         push	bx
37290                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
37291 95A3           FF76         FE            push	-2[bp]
37292                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
37293 95A6           FF76         08            push	8[bp]
37294                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
37295 95A9           FF76         06            push	6[bp]
37296                                           ! Debug: func () void = memcpyb+0 (used reg = )
37297 95AC           E8         E5DC            call	_memcpyb
37298 95AF           83C4                   0A  add	sp,*$A
37299                                           !BCC_EOS
37300                                           ! 7930         }
37301                                           ! 7931         do
37302                       000095B2            .2D0:
37303                                           ! 7932         {
37304                       000095B2            .2D3:
37305                                           ! 7933                 size_64k = (Bit16u)((Bit32u)cur_info->info.XResolution * cur_info->info.XResolution * cur_info->info.BitsPerPixel) >> 19;
37306 95B2           8B9E       FDF0            mov	bx,-$210[bp]
37307                                           ! Debug: cast unsigned long = const 0 to unsigned char = [bx+$1B] (used reg = )
37308 95B6           8A47         1B            mov	al,$1B[bx]
37309 95B9           30E4                       xor	ah,ah
37310 95BB           31DB                       xor	bx,bx
37311 95BD           53                         push	bx
37312 95BE           50                         push	ax
37313 95BF           8B9E       FDF0            mov	bx,-$210[bp]
37314                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
37315 95C3           8B47         14            mov	ax,$14[bx]
37316 95C6           31DB                       xor	bx,bx
37317 95C8           53                         push	bx
37318 95C9           50                         push	ax
37319 95CA           8B9E       FDF0            mov	bx,-$210[bp]
37320                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
37321 95CE           8B47         14            mov	ax,$14[bx]
37322 95D1           31DB                       xor	bx,bx
37323                                           ! Debug: mul unsigned long (temp) = [S+$21A-$21A] to unsigned long = bx+0 (used reg = )
37324 95D3           8DBE       FDE8            lea	di,-$218[bp]
37325 95D7           E8         FE46            call	lmulul
37326 95DA           83C4                   04  add	sp,*4
37327                                           ! Debug: mul unsigned long (temp) = [S+$216-$216] to unsigned long = bx+0 (used reg = )
37328 95DD           8DBE       FDEC            lea	di,-$214[bp]
37329 95E1           E8         FE3C            call	lmulul
37330 95E4           83C4                   04  add	sp,*4
37331                                           ! Debug: cast unsigned short = const 0 to unsigned long = bx+0 (used reg = )
37332                                           ! Debug: sr int = const $13 to unsigned short = ax+0 (used reg = )
37333 95E7           31C0                       xor	ax,ax
37334                                           ! Debug: eq unsigned int = ax+0 to unsigned short size_64k = [S+$212-$210] (used reg = )
37335 95E9           8986       FDF2            mov	-$20E[bp],ax
37336                                           !BCC_EOS
37337                                           ! 7934                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
37338                                           ! 7935                     (cur_info->info.BitsPerPixel <= dispi_get_max_bpp()) &&
37339                                           ! 7936                     (size_64k <= vbe_info_block.TotalMemory)) {
37340                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
37341 95ED           E8         FB5B            call	_dispi_get_max_xres
37342 95F0           8B9E       FDF0            mov	bx,-$210[bp]
37343                                           ! Debug: le int = ax+0 to unsigned short = [bx+$14] (used reg = )
37344 95F4           3B47         14            cmp	ax,$14[bx]
37345 95F7           72           4D            jb  	.2D4
37346                       000095F9            .2D7:
37347                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
37348 95F9           E8         FB71            call	_dispi_get_max_bpp
37349 95FC           8B9E       FDF0            mov	bx,-$210[bp]
37350                                           ! Debug: le int = ax+0 to unsigned char = [bx+$1B] (used reg = )
37351 9600           50                         push	ax
37352 9601           8A47         1B            mov	al,$1B[bx]
37353 9604           30E4                       xor	ah,ah
37354 9606           3B86       FDEE            cmp	ax,-$212[bp]
37355 960A           8DA6       FDF0            lea	sp,-$210[bp]
37356 960E           77           36            ja  	.2D4
37357                       00009610            .2D6:
37358                                           ! Debug: le unsigned short vbe_info_block = [S+$212-$1F2] to unsigned short size_64k = [S+$212-$210] (used reg = )
37359 9610           8B86       FDF2            mov	ax,-$20E[bp]
37360 9614           3B86       FE10            cmp	ax,-$1F0[bp]
37361 9618           77           2C            ja  	.2D4
37362                       0000961A            .2D5:
37363                                           ! 7937                   write_word(ES, DI + cur_ptr, cur_info->mode);
37364 961A           8B9E       FDF0            mov	bx,-$210[bp]
37365                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37366 961E           FF37                       push	[bx]
37367                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
37368 9620           8B46         08            mov	ax,8[bp]
37369 9623           0386       FDF4            add	ax,-$20C[bp]
37370                                           ! Debug: list unsigned int = ax+0 (used reg = )
37371 9627           50                         push	ax
37372                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
37373 9628           FF76         06            push	6[bp]
37374                                           ! Debug: func () void = write_word+0 (used reg = )
37375 962B           E8         E5FB            call	_write_word
37376 962E           83C4                   06  add	sp,*6
37377                                           !BCC_EOS
37378                                           ! 7938                   cur_mode++;
37379                                           ! Debug: postinc unsigned short cur_mode = [S+$212-$20C] (used reg = )
37380 9631           8B86       FDF6            mov	ax,-$20A[bp]
37381 9635           40                         inc	ax
37382 9636           8986       FDF6            mov	-$20A[bp],ax
37383                                           !BCC_EOS
37384                                           ! 7939                   cur_ptr+=2;
37385                                           ! Debug: addab int = const 2 to unsigned short cur_ptr = [S+$212-$20E] (used reg = )
37386 963A           8B86       FDF4            mov	ax,-$20C[bp]
37387 963E           40                         inc	ax
37388 963F           40                         inc	ax
37389 9640           8986       FDF4            mov	-$20C[bp],ax
37390                                           !BCC_EOS
37391                                           ! 7940                 } else {
37392 9644           EB           00            jmp .2D8
37393                       00009646            .2D4:
37394                                           ! 7941                 }
37395                                           ! 7942                 cur_info++;
37396                       00009646            .2D8:
37397                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
37398 9646           8B9E       FDF0            mov	bx,-$210[bp]
37399 964A           83C3                   44  add	bx,*$44
37400 964D           899E       FDF0            mov	-$210[bp],bx
37401                                           !BCC_EOS
37402                                           ! 7943         } while (cur_info->mode != 0xFFFF);
37403                       00009651            .2D2:
37404 9651           8B9E       FDF0            mov	bx,-$210[bp]
37405                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
37406 9655           8B1F                       mov	bx,[bx]
37407 9657           81FB                 FFFF  cmp	bx,#$FFFF
37408 965B         0F85         FF53            bne 	.2D3
37409                       0000965F            .2D9:
37410                                           !BCC_EOS
37411                                           ! 7944         write_word(ES, DI + cur_ptr, cur_info->mode);
37412                       0000965F            .2D1:
37413 965F           8B9E       FDF0            mov	bx,-$210[bp]
37414                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37415 9663           FF37                       push	[bx]
37416                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
37417 9665           8B46         08            mov	ax,8[bp]
37418 9668           0386       FDF4            add	ax,-$20C[bp]
37419                                           ! Debug: list unsigned int = ax+0 (used reg = )
37420 966C           50                         push	ax
37421                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
37422 966D           FF76         06            push	6[bp]
37423                                           ! Debug: func () void = write_word+0 (used reg = )
37424 9670           E8         E5B6            call	_write_word
37425 9673           83C4                   06  add	sp,*6
37426                                           !BCC_EOS
37427                                           ! 7945         result = 0x4f;
37428                                           ! Debug: eq int = const $4F to unsigned short result = [S+$212-$208] (used reg = )
37429 9676           B8                   004F  mov	ax,*$4F
37430 9679           8986       FDFA            mov	-$206[bp],ax
37431                                           !BCC_EOS
37432                                           ! 7946         write_word(ss, AX, result);
37433                                           ! Debug: list unsigned short result = [S+$212-$208] (used reg = )
37434 967D           FFB6       FDFA            push	-$206[bp]
37435                                           ! Debug: list * unsigned short AX = [S+$214+2] (used reg = )
37436 9681           FF76         04            push	4[bp]
37437                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
37438 9684           FF76         FE            push	-2[bp]
37439                                           ! Debug: func () void = write_word+0 (used reg = )
37440 9687           E8         E59F            call	_write_word
37441 968A           83C4                   06  add	sp,*6
37442                                           !BCC_EOS
37443                                           ! 7947 }
37444 968D           89EC                       mov	sp,bp
37445 968F           5D                         pop	bp
37446 9690           C3                         ret
37447                                           ! 7948 void vbe_biosfn_return_mode_information(AX, CX, ES, DI)
37448                                           ! Register BX used in function vbe_biosfn_return_controller_information
37449                                           ! 7949 Bit16u *AX;Bit16u CX; Bit16u ES;Bit16u DI;
37450                                           export	_vbe_biosfn_return_mode_information
37451                       00009691            _vbe_biosfn_return_mode_information:
37452                                           !BCC_EOS
37453                                           !BCC_EOS
37454                                           !BCC_EOS
37455                                           !BCC_EOS
37456                                           ! 7950 {
37457                                           ! 7951         Bit16u result=0x0100;
37458 9691           55                         push	bp
37459 9692           89E5                       mov	bp,sp
37460 9694           4C                         dec	sp
37461 9695           4C                         dec	sp
37462                                           ! Debug: eq int = const $100 to unsigned short result = [S+4-4] (used reg = )
37463 9696           B8                   0100  mov	ax,#$100
37464 9699           8946         FE            mov	-2[bp],ax
37465                                           !BCC_EOS
37466                                           ! 7952         Bit16u ss=g
37467                                           ! 7952 et_SS();
37468 969C           4C                         dec	sp
37469 969D           4C                         dec	sp
37470                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37471 969E           E8         E5D6            call	_get_SS
37472                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+6-6] (used reg = )
37473 96A1           8946         FC            mov	-4[bp],ax
37474                                           !BCC_EOS
37475                                           ! 7953         ModeInfoBlock info;
37476                                           !BCC_EOS
37477                                           ! 7954         ModeInfoListItem *cur_info;
37478                                           !BCC_EOS
37479                                           ! 7955         Boolean using_lfb;
37480                                           !BCC_EOS
37481                                           ! 7956         Bit16u lfb_addr;
37482                                           !BCC_EOS
37483                                           ! 7957         using_lfb=((CX & 0x4000) == 0x4000);
37484 96A4           81C4                 FEFA  add	sp,#-$106
37485                                           ! Debug: and int = const $4000 to unsigned short CX = [S+$10C+4] (used reg = )
37486 96A8           8B46         06            mov	ax,6[bp]
37487 96AB           25                   4000  and	ax,#$4000
37488                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
37489 96AE           3D                   4000  cmp	ax,#$4000
37490 96B1           75           04            jne	.2DA
37491 96B3           B0                     01  mov	al,*1
37492 96B5           EB           02            jmp	.2DB
37493                       000096B7            .2DA:
37494 96B7           30C0                       xor	al,al
37495                       000096B9            .2DB:
37496                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$10C-$10A] (used reg = )
37497 96B9           30E4                       xor	ah,ah
37498 96BB           8986       FEF8            mov	-$108[bp],ax
37499                                           !BCC_EOS
37500                                           ! 7958         CX = (CX & 0x1ff);
37501                                           ! Debug: and int = const $1FF to unsigned short CX = [S+$10C+4] (used reg = )
37502 96BF           8B46         06            mov	ax,6[bp]
37503 96C2           25                   01FF  and	ax,#$1FF
37504                                           ! Debug: eq unsigned int = ax+0 to unsigned short CX = [S+$10C+4] (used reg = )
37505 96C5           8946         06            mov	6[bp],ax
37506                                           !BCC_EOS
37507                                           ! 7959         cur_info = mode_info_find_mode(CX, using_lfb, &cur_info);
37508                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$10C-$108 (used reg = )
37509 96C8           8D9E       FEFA            lea	bx,-$106[bp]
37510 96CC           53                         push	bx
37511                                           ! Debug: list unsigned short using_lfb = [S+$10E-$10A] (used reg = )
37512 96CD           FFB6       FEF8            push	-$108[bp]
37513                                           ! Debug: list unsigned short CX = [S+$110+4] (used reg = )
37514 96D1           FF76         06            push	6[bp]
37515                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
37516 96D4           E8         FC8A            call	_mode_info_find_mode
37517 96D7           83C4                   06  add	sp,*6
37518                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
37519 96DA           8986       FEFA            mov	-$106[bp],ax
37520                                           !BCC_EOS
37521                                           ! 7960         if (cur_info != 0)
37522                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
37523 96DE           8B86       FEFA            mov	ax,-$106[bp]
37524 96E2           85C0                       test	ax,ax
37525 96E4         0F84         008C            beq 	.2DC
37526                       000096E8            .2DD:
37527                                           ! 7961         {
37528                                           ! 7962                 memsetb(ss, &info, 0, sizeof(ModeInfoBlock));
37529                                           ! Debug: list int = const $100 (used reg = )
37530 96E8           B8                   0100  mov	ax,#$100
37531 96EB           50                         push	ax
37532                                           ! Debug: list int = const 0 (used reg = )
37533 96EC           31C0                       xor	ax,ax
37534 96EE           50                         push	ax
37535                                           ! Debug: list * struct ModeInfoBlock info = S+$110-$106 (used reg = )
37536 96EF           8D9E       FEFC            lea	bx,-$104[bp]
37537 96F3           53                         push	bx
37538                                           ! Debug: list unsigned short ss = [S+$112-6] (used reg = )
37539 96F4           FF76         FC            push	-4[bp]
37540                                           ! Debug: func () void = memsetb+0 (used reg = )
37541 96F7           E8         E447            call	_memsetb
37542 96FA           83C4                   08  add	sp,*8
37543                                           !BCC_EOS
37544                                           ! 7963                 memcpyb(ss, &info, 0xc000, &(cur_info->info), sizeof(ModeInfoBlockCompact));
37545                                           ! Debug: list int = const $42 (used reg = )
37546 96FD           B8                   0042  mov	ax,*$42
37547 9700           50                         push	ax
37548 9701           8B9E       FEFA            mov	bx,-$106[bp]
37549                                           ! Debug: address struct ModeInfoBlockCompact = [bx+2] (used reg = )
37550                                           ! Debug: list * struct ModeInfoBlockCompact = bx+2 (used reg = )
37551 9705           43                         inc	bx
37552 9706           43                         inc	bx
37553 9707           53                         push	bx
37554                                           ! Debug: list unsigned int = const $C000 (used reg = )
37555 9708           B8                   C000  mov	ax,#$C000
37556 970B           50                         push	ax
37557                                           ! Debug: list * struct ModeInfoBlock info = S+$112-$106 (used reg = )
37558 970C           8D9E       FEFC            lea	bx,-$104[bp]
37559 9710           53                         push	bx
37560                                           ! Debug: list unsigned short ss = [S+$114-6] (used reg = )
37561 9711           FF76         FC            push	-4[bp]
37562                                           ! Debug: func () void = memcpyb+0 (used reg = )
37563 9714           E8         E474            call	_memcpyb
37564 9717           83C4                   0A  add	sp,*$A
37565                                           !BCC_EOS
37566                                           ! 7964                 if (using_lfb) {
37567 971A           8B86       FEF8            mov	ax,-$108[bp]
37568 971E           85C0                       test	ax,ax
37569 9720           74           06            je  	.2DE
37570                       00009722            .2DF:
37571                                           ! 7965                   info.NumberOfBanks = 1;
37572                                           ! Debug: eq int = const 1 to unsigned char info = [S+$10C-$EC] (used reg = )
37573 9722           B0                     01  mov	al,*1
37574 9724           8886       FF16            mov	-$EA[bp],al
37575                                           !BCC_EOS
37576                                           ! 7966                 }
37577                                           ! 7967                 lfb_addr = pci_get_lfb_addr(0x1234);
37578                       00009728            .2DE:
37579                                           ! Debug: list int = const $1234 (used reg = )
37580 9728           B8                   1234  mov	ax,#$1234
37581 972B           50                         push	ax
37582                                           ! Debug: func () int = pci_get_lfb_addr+0 (used reg = )
37583 972C           E8         E688            call	_pci_get_lfb_addr
37584 972F           44                         inc	sp
37585 9730           44                         inc	sp
37586                                           ! Debug: eq int = ax+0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
37587 9731           8986       FEF6            mov	-$10A[bp],ax
37588                                           !BCC_EOS
37589                                           ! 7968                 if (lfb_addr > 0) {
37590                                           ! Debug: gt int = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
37591 9735           8B86       FEF6            mov	ax,-$10A[bp]
37592 9739           85C0                       test	ax,ax
37593 973B           74           11            je  	.2E0
37594                       0000973D            .2E1:
37595                                           ! 7969                   info.PhysBasePtr = ((Bit32u)lfb_addr << 16);
37596                                           ! Debug: cast unsigned long = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
37597 973D           8B86       FEF6            mov	ax,-$10A[bp]
37598 9741           31DB                       xor	bx,bx
37599                                           ! Debug: sl int = const $10 to unsigned long = bx+0 (used reg = )
37600 9743           93                         xchg	bx,ax
37601 9744           31C0                       xor	ax,ax
37602                                           ! Debug: eq unsigned long = bx+0 to unsigned long info = [S+$10C-$DE] (used reg = )
37603 9746           8986       FF24            mov	-$DC[bp],ax
37604 974A           899E       FF26            mov	-$DA[bp],bx
37605                                           !BCC_EOS
37606                                           ! 7970                 }
37607                                           ! 7971                 if (info.WinAAttributes & 0x01) {
37608                       0000974E            .2E0:
37609                                           ! Debug: and int = const 1 to unsigned char info = [S+$10C-$104] (used reg = )
37610 974E           8A86       FEFE            mov	al,-$102[bp]
37611 9752           24                     01  and	al,*1
37612 9754           84C0                       test	al,al
37613 9756           74           14            je  	.2E2
37614                       00009758            .2E3:
37615                                           ! 7972                   info.WinFuncPtr = 0xC0000000UL;
37616                                           ! Debug: eq unsigned long = const $C0000000 to unsigned long info = [S+$10C-$FA] (used reg = )
37617 9758           31C0                       xor	ax,ax
37618 975A           BB                   C000  mov	bx,#$C000
37619 975D           8986       FF08            mov	-$F8[bp],ax
37620 9761           899E       FF0A            mov	-$F6[bp],bx
37621                                           !BCC_EOS
37622                                           ! 7973                   *(Bit16u *)&(info.WinFuncPtr) = (Bit16u)(dispi_set_bank_farcall);
37623                                           ! Debug: cast unsigned short = const 0 to () void = dispi_set_bank_farcall+0 (used reg = )
37624                                           ! Debug: eq unsigned short = dispi_set_bank_farcall+0 to unsigned short info = [S+$10C-$FA] (used reg = )
37625 9765           BB                   91CB  mov	bx,#_dispi_set_bank_farcall
37626 9768           899E       FF08            mov	-$F8[bp],bx
37627                                           !BCC_EOS
37628                                           ! 7974                 }
37629                                           ! 7975                 result = 0x4f;
37630                       0000976C            .2E2:
37631                                           ! Debug: eq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
37632 976C           B8                   004F  mov	ax,*$4F
37633 976F           8946         FE            mov	-2[bp],ax
37634                                           !BCC_EOS
37635                                           ! 7976         }
37636                                           ! 7977         else
37637                                           ! 7978         {
37638 9772           EB           06            jmp .2E4
37639                       00009774            .2DC:
37640                                           ! 7979                 result = 0x100;
37641                                           ! Debug: eq int = const $100 to unsigned short result = [S+$10C-4] (used reg = )
37642 9774           B8                   0100  mov	ax,#$100
37643 9777           8946         FE            mov	-2[bp],ax
37644                                           !BCC_EOS
37645                                           ! 7980         }
37646                                           ! 7981         if (result == 0x4f)
37647                       0000977A            .2E4:
37648                                           ! Debug: logeq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
37649 977A           8B46         FE            mov	ax,-2[bp]
37650 977D           3D                   004F  cmp	ax,*$4F
37651 9780           75           18            jne 	.2E5
37652                       00009782            .2E6:
37653                                           ! 7982         {
37654                                           ! 7983                 memcpyb(ES, DI, ss, &info, sizeof(info));
37655                                           ! Debug: list int = const $100 (used reg = )
37656 9782           B8                   0100  mov	ax,#$100
37657 9785           50                         push	ax
37658                                           ! Debug: list * struct ModeInfoBlock info = S+$10E-$106 (used reg = )
37659 9786           8D9E       FEFC            lea	bx,-$104[bp]
37660 978A           53                         push	bx
37661                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
37662 978B           FF76         FC            push	-4[bp]
37663                                           ! Debug: list unsigned short DI = [S+$112+8] (used reg = )
37664 978E           FF76         0A            push	$A[bp]
37665                                           ! Debug: list unsigned short ES = [S+$114+6] (used reg = )
37666 9791           FF76         08            push	8[bp]
37667                                           ! Debug: func () void = memcpyb+0 (used reg = )
37668 9794           E8         E3F4            call	_memcpyb
37669 9797           83C4                   0A  add	sp,*$A
37670                                           !BCC_EOS
37671                                           ! 7984         }
37672                                           ! 7985         write_word(ss, AX, result);
37673                       0000979A            .2E5:
37674                                           ! Debug: list unsigned short result = [S+$10C-4] (used reg = )
37675 979A           FF76         FE            push	-2[bp]
37676                                           ! Debug: list * unsigned short AX = [S+$10E+2] (used reg = )
37677 979D           FF76         04            push	4[bp]
37678                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
37679 97A0           FF76         FC            push	-4[bp]
37680                                           ! Debug: func () void = write_word+0 (used reg = )
37681 97A3           E8         E483            call	_write_word
37682 97A6           83C4                   06  add	sp,*6
37683                                           !BCC_EOS
37684                                           ! 7986 }
37685 97A9           89EC                       mov	sp,bp
37686 97AB           5D                         pop	bp
37687 97AC           C3                         ret
37688                                           ! 7987 void vbe_biosfn_set_mode(AX, BX, ES, DI)
37689                                           ! Register BX used in function vbe_biosfn_return_mode_information
37690                                           ! 7988 Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u DI;
37691                                           export	_vbe_biosfn_set_mode
37692                       000097AD            _vbe_biosfn_set_mode:
37693                                           !BCC_EOS
37694                                           !BCC_EOS
37695                                           !BCC_EOS
37696                                           !BCC_EOS
37697                                           ! 7989 {
37698                                           ! 7990         Bit16u ss = get_SS();
37699 97AD           55                         push	bp
37700 97AE           89E5                       mov	bp,sp
37701 97B0           4C                         dec	sp
37702 97B1           4C                         dec	sp
37703                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37704 97B2           E8         E4C2            call	_get_SS
37705                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
37706 97B5           8946         FE            mov	-2[bp],ax
37707                                           !BCC_EOS
37708                                           ! 7991         Bit16u result;
37709                                           !BCC_EOS
37710                                           ! 7992         ModeInfoListItem *cur_info;
37711                                           !BCC_EOS
37712                                           ! 7993         Boolean using_lfb;
37713                                           !BCC_EOS
37714                                           ! 7994         Bit8u no_clear;
37715                                           !BCC_EOS
37716                                           ! 7995         Bit8u lfb_flag;
37717                                           !BCC_EOS
37718                                           ! 7996         using_lfb=((BX & 0x4000) == 0x4000);
37719 97B8           83C4                   F8  add	sp,*-8
37720                                           ! Debug: and int = const $4000 to unsigned short BX = [S+$C+4] (used reg = )
37721 97BB           8B46         06            mov	ax,6[bp]
37722 97BE           25                   4000  and	ax,#$4000
37723                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
37724 97C1           3D                   4000  cmp	ax,#$4000
37725 97C4           75           04            jne	.2E7
37726 97C6           B0                     01  mov	al,*1
37727 97C8           EB           02            jmp	.2E8
37728                       000097CA            .2E7:
37729 97CA           30C0                       xor	al,al
37730                       000097CC            .2E8:
37731                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$C-$A] (used reg = )
37732 97CC           30E4                       xor	ah,ah
37733 97CE           8946         F8            mov	-8[bp],ax
37734                                           !BCC_EOS
37735                                           ! 7997         lfb_flag=using_lfb?0x40:0;
37736 97D1           8B46         F8            mov	ax,-8[bp]
37737 97D4           85C0                       test	ax,ax
37738 97D6           74           04            je  	.2E9
37739                       000097D8            .2EA:
37740 97D8           B0                     40  mov	al,*$40
37741 97DA           EB           02            jmp .2EB
37742                       000097DC            .2E9:
37743 97DC           30C0                       xor	al,al
37744                       000097DE            .2EB:
37745                                           ! Debug: eq char = al+0 to unsigned char lfb_flag = [S+$C-$C] (used reg = )
37746 97DE           8846         F6            mov	-$A[bp],al
37747                                           !BCC_EOS
37748                                           ! 7998         no_clear=((BX & 0x8000) == 0x8000)?0x80:0;
37749                                           ! Debug: and unsigned int = const $8000 to unsigned short BX = [S+$C+4] (used reg = )
37750 97E1           8B46         06            mov	ax,6[bp]
37751 97E4           25                   8000  and	ax,#$8000
37752                                           ! Debug: logeq unsigned int = const $8000 to unsigned int = ax+0 (used reg = )
37753 97E7           3D                   8000  cmp	ax,#$8000
37754 97EA           75           04            jne 	.2EC
37755                       000097EC            .2ED:
37756 97EC           B0                     80  mov	al,#$80
37757 97EE           EB           02            jmp .2EE
37758                       000097F0            .2EC:
37759 97F0           30C0                       xor	al,al
37760                       000097F2            .2EE:
37761                                           ! Debug: eq char = al+0 to unsigned char no_clear = [S+$C-$B] (used reg = )
37762 97F2           8846         F7            mov	-9[bp],al
37763                                           !BCC_EOS
37764                                           ! 7999         BX = (BX & 0x1ff);
37765                                           ! Debug: and int = const $1FF to unsigned short BX = [S+$C+4] (used reg = )
37766 97F5           8B46         06            mov	ax,6[bp]
37767 97F8           25                   01FF  and	ax,#$1FF
37768                                           ! Debug: eq unsigned int = ax+0 to unsigned short BX = [S+$C+4] (used reg = )
37769 97FB           8946         06            mov	6[bp],ax
37770                                           !BCC_EOS
37771                                           ! 8000         if (BX<0x0100)
37772                                           ! Debug: lt int = const $100 to unsigned short BX = [S+$C+4] (used reg = )
37773 97FE           8B46         06            mov	ax,6[bp]
37774 9801           3D                   0100  cmp	ax,#$100
37775 9804           73           23            jae 	.2EF
37776                       00009806            .2F0:
37777                                           ! 8001         {
37778                                           ! 8002                 Bit8u mode;
37779                                           !BCC_EOS
37780                                           ! 8003                 dispi_set_enable(0x00);
37781 9806           4C                         dec	sp
37782 9807           4C                         dec	sp
37783                                           ! Debug: list int = const 0 (used reg = )
37784 9808           31C0                       xor	ax,ax
37785 980A           50                         push	ax
37786                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
37787 980B           E8         F981            call	_dispi_set_enable
37788 980E           44                         inc	sp
37789 980F           44                         inc	sp
37790                                           !BCC_EOS
37791                                           ! 8004                 mode=(BX & 0xff);
37792                                           ! Debug: and int = const $FF to unsigned short BX = [S+$E+4] (used reg = )
37793 9810           8A46         06            mov	al,6[bp]
37794                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$E-$D] (used reg = )
37795 9813           8846         F5            mov	-$B[bp],al
37796                                           !BCC_EOS
37797                                           ! 8005                 biosfn_set_video_mode(mode);
37798                                           ! Debug: list unsigned char mode = [S+$E-$D] (used reg = )
37799 9816           8A46         F5            mov	al,-$B[bp]
37800 9819           30E4                       xor	ah,ah
37801 981B           50                         push	ax
37802                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
37803 981C           E8         A378            call	_biosfn_set_video_mode
37804 981F           44                         inc	sp
37805 9820           44                         inc	sp
37806                                           !BCC_EOS
37807                                           ! 8006                 result = 0x4f;
37808                                           ! Debug: eq int = const $4F to unsigned short result = [S+$E-6] (used reg = )
37809 9821           B8                   004F  mov	ax,*$4F
37810 9824           8946         FC            mov	-4[bp],ax
37811                                           !BCC_EOS
37812                                           ! 8007         }
37813 9827           44                         inc	sp
37814 9828           44                         inc	sp
37815                                           ! 8008         cur_info = mode_info_find_mode(BX, using_lfb, &cur_info);
37816                       00009829            .2EF:
37817                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$C-8 (used reg = )
37818 9829           8D5E         FA            lea	bx,-6[bp]
37819 982C           53                         push	bx
37820                                           ! Debug: list unsigned short using_lfb = [S+$E-$A] (used reg = )
37821 982D           FF76         F8            push	-8[bp]
37822                                           ! Debug: list unsigned short BX = [S+$10+4] (used reg = )
37823 9830           FF76         06            push	6[bp]
37824                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
37825 9833           E8         FB2B            call	_mode_info_find_mode
37826 9836           83C4                   06  add	sp,*6
37827                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
37828 9839           8946         FA            mov	-6[bp],ax
37829                                           !BCC_EOS
37830                                           ! 8009         if (cur_info != 0)
37831                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
37832 983C           8B46         FA            mov	ax,-6[bp]
37833 983F           85C0                       test	ax,ax
37834 9841         0F84         0089            beq 	.2F1
37835                       00009845            .2F2:
37836                                           ! 8010         {
37837                                           ! 8011                 dispi_set_enable(0x00);
37838                                           ! Debug: list int = const 0 (used reg = )
37839 9845           31C0                       xor	ax,ax
37840 9847           50                         push	ax
37841                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
37842 9848           E8         F944            call	_dispi_set_enable
37843 984B           44                         inc	sp
37844 984C           44                         inc	sp
37845                                           !BCC_EOS
37846                                           ! 8012                 if (cur_info->info.BitsPerPixel == 4)
37847 984D           8B5E         FA            mov	bx,-6[bp]
37848                                           ! Debug: logeq int = const 4 to unsigned char = [bx+$1B] (used reg = )
37849 9850           8A47         1B            mov	al,$1B[bx]
37850 9853           3C                     04  cmp	al,*4
37851 9855           75           09            jne 	.2F3
37852                       00009857            .2F4:
37853                                           ! 8013                 {
37854                                           ! 8014                   biosfn_set_video
37855                                           ! 8014 _mode(0x6a);
37856                                           ! Debug: list int = const $6A (used reg = )
37857 9857           B8                   006A  mov	ax,*$6A
37858 985A           50                         push	ax
37859                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
37860 985B           E8         A339            call	_biosfn_set_video_mode
37861 985E           44                         inc	sp
37862 985F           44                         inc	sp
37863                                           !BCC_EOS
37864                                           ! 8015                 }
37865                                           ! 8016                 dispi_set_bpp(cur_info->info.BitsPerPixel);
37866                       00009860            .2F3:
37867 9860           8B5E         FA            mov	bx,-6[bp]
37868                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
37869 9863           8A47         1B            mov	al,$1B[bx]
37870 9866           30E4                       xor	ah,ah
37871 9868           50                         push	ax
37872                                           ! Debug: func () void = dispi_set_bpp+0 (used reg = )
37873 9869           E8         F8A8            call	_dispi_set_bpp
37874 986C           44                         inc	sp
37875 986D           44                         inc	sp
37876                                           !BCC_EOS
37877                                           ! 8017                 dispi_set_xres(cur_info->info.XResolution);
37878 986E           8B5E         FA            mov	bx,-6[bp]
37879                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
37880 9871           FF77         14            push	$14[bx]
37881                                           ! Debug: func () void = dispi_set_xres+0 (used reg = )
37882 9874           E8         F868            call	_dispi_set_xres
37883 9877           44                         inc	sp
37884 9878           44                         inc	sp
37885                                           !BCC_EOS
37886                                           ! 8018                 dispi_set_yres(cur_info->info.YResolution);
37887 9879           8B5E         FA            mov	bx,-6[bp]
37888                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
37889 987C           FF77         16            push	$16[bx]
37890                                           ! Debug: func () void = dispi_set_yres+0 (used reg = )
37891 987F           E8         F874            call	_dispi_set_yres
37892 9882           44                         inc	sp
37893 9883           44                         inc	sp
37894                                           !BCC_EOS
37895                                           ! 8019                 dispi_set_bank(0);
37896                                           ! Debug: list int = const 0 (used reg = )
37897 9884           31C0                       xor	ax,ax
37898 9886           50                         push	ax
37899                                           ! Debug: func () int = dispi_set_bank+0 (used reg = )
37900 9887           E8         F923            call	_dispi_set_bank
37901 988A           44                         inc	sp
37902 988B           44                         inc	sp
37903                                           !BCC_EOS
37904                                           ! 8020                 dispi_set_enable(0x01 | no_clear | lfb_flag);
37905                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const 1 (used reg = )
37906                                           ! Debug: expression subtree swapping
37907 988C           8A46         F7            mov	al,-9[bp]
37908 988F           0C                     01  or	al,*1
37909                                           ! Debug: or unsigned char lfb_flag = [S+$C-$C] to unsigned char = al+0 (used reg = )
37910 9891           0A46         F6            or	al,-$A[bp]
37911                                           ! Debug: list unsigned char = al+0 (used reg = )
37912 9894           30E4                       xor	ah,ah
37913 9896           50                         push	ax
37914                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
37915 9897           E8         F8F5            call	_dispi_set_enable
37916 989A           44                         inc	sp
37917 989B           44                         inc	sp
37918                                           !BCC_EOS
37919                                           ! 8021                 vga_compat_setup();
37920                                           ! Debug: func () int = vga_compat_setup+0 (used reg = )
37921 989C           E8         F9EB            call	_vga_compat_setup
37922                                           !BCC_EOS
37923                                           ! 8022                 write_word(0x40,0xBA,BX);
37924                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
37925 989F           FF76         06            push	6[bp]
37926                                           ! Debug: list int = const $BA (used reg = )
37927 98A2           B8                   00BA  mov	ax,#$BA
37928 98A5           50                         push	ax
37929                                           ! Debug: list int = const $40 (used reg = )
37930 98A6           B8                   0040  mov	ax,*$40
37931 98A9           50                         push	ax
37932                                           ! Debug: func () void = write_word+0 (used reg = )
37933 98AA           E8         E37C            call	_write_word
37934 98AD           83C4                   06  add	sp,*6
37935                                           !BCC_EOS
37936                                           ! 8023                 write_byte(0x40,0x87,(0x60 | no_clear));
37937                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const $60 (used reg = )
37938                                           ! Debug: expression subtree swapping
37939 98B0           8A46         F7            mov	al,-9[bp]
37940 98B3           0C                     60  or	al,*$60
37941                                           ! Debug: list unsigned char = al+0 (used reg = )
37942 98B5           30E4                       xor	ah,ah
37943 98B7           50                         push	ax
37944                                           ! Debug: list int = const $87 (used reg = )
37945 98B8           B8                   0087  mov	ax,#$87
37946 98BB           50                         push	ax
37947                                           ! Debug: list int = const $40 (used reg = )
37948 98BC           B8                   0040  mov	ax,*$40
37949 98BF           50                         push	ax
37950                                           ! Debug: func () void = write_byte+0 (used reg = )
37951 98C0           E8         E34E            call	_write_byte
37952 98C3           83C4                   06  add	sp,*6
37953                                           !BCC_EOS
37954                                           ! 8024                 result = 0x4f;
37955                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
37956 98C6           B8                   004F  mov	ax,*$4F
37957 98C9           8946         FC            mov	-4[bp],ax
37958                                           !BCC_EOS
37959                                           ! 8025         }
37960                                           ! 8026         else
37961                                           ! 8027         {
37962 98CC           EB           14            jmp .2F5
37963                       000098CE            .2F1:
37964                                           ! 8028                 result = 0x100;
37965                                           ! Debug: eq int = const $100 to unsigned short result = [S+$C-6] (used reg = )
37966 98CE           B8                   0100  mov	ax,#$100
37967 98D1           8946         FC            mov	-4[bp],ax
37968                                           !BCC_EOS
37969                                           ! 8029                 if (BX == 3)
37970                                           ! Debug: logeq int = const 3 to unsigned short BX = [S+$C+4] (used reg = )
37971 98D4           8B46         06            mov	ax,6[bp]
37972 98D7           3D                   0003  cmp	ax,*3
37973 98DA           75           06            jne 	.2F6
37974                       000098DC            .2F7:
37975                                           ! 8030                         result = 0x4f;
37976                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
37977 98DC           B8                   004F  mov	ax,*$4F
37978 98DF           8946         FC            mov	-4[bp],ax
37979                                           !BCC_EOS
37980                                           ! 8031         }
37981                       000098E2            .2F6:
37982                                           ! 8032         write_word(ss, AX, result);
37983                       000098E2            .2F5:
37984                                           ! Debug: list unsigned short result = [S+$C-6] (used reg = )
37985 98E2           FF76         FC            push	-4[bp]
37986                                           ! Debug: list * unsigned short AX = [S+$E+2] (used reg = )
37987 98E5           FF76         04            push	4[bp]
37988                                           ! Debug: list unsigned short ss = [S+$10-4] (used reg = )
37989 98E8           FF76         FE            push	-2[bp]
37990                                           ! Debug: func () void = write_word+0 (used reg = )
37991 98EB           E8         E33B            call	_write_word
37992 98EE           83C4                   06  add	sp,*6
37993                                           !BCC_EOS
37994                                           ! 8033 }
37995 98F1           89EC                       mov	sp,bp
37996 98F3           5D                         pop	bp
37997 98F4           C3                         ret
37998                                           ! 8034 #asm
37999                                           !BCC_ASM
38000                       00000008            _vbe_biosfn_set_mode.DI	set	8
38001                       00000006            _vbe_biosfn_set_mode.ES	set	6
38002                       00000002            _vbe_biosfn_set_mode.AX	set	2
38003                       00000004            _vbe_biosfn_set_mode.BX	set	4
38004                       000098F5            vbe_biosfn_return_current_mode:
38005 98F5           1E                           push ds
38006 98F6           B8                   0040    mov ax, # 0x40
38007 98F9           8ED8                         mov ds, ax
38008 98FB           E8         F8A1              call dispi_get_enable
38009 98FE           25                   0001    and ax, # 0x01
38010 9901           74           09              jz no_vbe_mode
38011 9903           BB                   00BA    mov bx, # 0xBA
38012 9906           8B07                         mov ax, [bx]
38013 9908           89C3                         mov bx, ax
38014 990A           75           09              jnz vbe_03_ok
38015                       0000990C            no_vbe_mode:
38016 990C           BB                   0049    mov bx, # 0x49
38017 990F           8A07                         mov al, [bx]
38018 9911           88C3                         mov bl, al
38019 9913           30FF                         xor bh, bh
38020                       00009915            vbe_03_ok:
38021 9915           B8                   004F    mov ax, #0x004f
38022 9918           1F                           pop ds
38023 9919           C3                           ret
38024                                           ! 8055 endasm
38025                                           !BCC_ENDASM
38026                                           ! 8056 Bit16u vbe_biosfn_read_video_state_size()
38027                                           ! Register BX used in function vbe_biosfn_set_mode
38028                                           ! 8057 {
38029                                           export	_vbe_biosfn_read_video_state_size
38030                       0000991A            _vbe_biosfn_read_video_state_size:
38031                                           ! 8058     return 9 * 2;
38032 991A           55                         push	bp
38033 991B           89E5                       mov	bp,sp
38034 991D           B8                   0012  mov	ax,*$12
38035 9920           5D                         pop	bp
38036 9921           C3                         ret
38037                                           !BCC_EOS
38038                                           ! 8059 }
38039                                           ! 8060 void vbe_biosfn_save_video_state(ES, BX)
38040                                           ! 8061      Bit16u ES; Bit16u BX;
38041                                           export	_vbe_biosfn_save_video_state
38042                       00009922            _vbe_biosfn_save_video_state:
38043                                           !BCC_EOS
38044                                           !BCC_EOS
38045                                           ! 8062 {
38046                                           ! 8063     Bit16u enable, i;
38047                                           !BCC_EOS
38048                                           ! 8064     outw(0x01CE,0x4);
38049 9922           55                         push	bp
38050 9923           89E5                       mov	bp,sp
38051 9925           83C4                   FC  add	sp,*-4
38052                                           ! Debug: list int = const 4 (used reg = )
38053 9928           B8                   0004  mov	ax,*4
38054 992B           50                         push	ax
38055                                           ! Debug: list int = const $1CE (used reg = )
38056 992C           B8                   01CE  mov	ax,#$1CE
38057 992F           50                         push	ax
38058                                           ! Debug: func () void = outw+0 (used reg = )
38059 9930           E8         E334            call	_outw
38060 9933           83C4                   04  add	sp,*4
38061                                           !BCC_EOS
38062                                           ! 8065     enable = inw(0x01CF);
38063                                           ! Debug: list int = const $1CF (used reg = )
38064 9936           B8                   01CF  mov	ax,#$1CF
38065 9939           50                         push	ax
38066                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38067 993A           E8         E30F            call	_inw
38068 993D           44                         inc	sp
38069 993E           44                         inc	sp
38070                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38071 993F           8946         FE            mov	-2[bp],ax
38072                                           !BCC_EOS
38073                                           ! 8066     write_word(ES, BX, enable);
38074                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38075 9942           FF76         FE            push	-2[bp]
38076                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38077 9945           FF76         06            push	6[bp]
38078                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38079 9948           FF76         04            push	4[bp]
38080                                           ! Debug: func () void = write_word+0 (used reg = )
38081 994B           E8         E2DB            call	_write_word
38082 994E           83C4                   06  add	sp,*6
38083                                           !BCC_EOS
38084                                           ! 8067     BX += 2;
38085                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38086 9951           8B46         06            mov	ax,6[bp]
38087 9954           40                         inc	ax
38088 9955           40                         inc	ax
38089 9956           8946         06            mov	6[bp],ax
38090                                           !BCC_EOS
38091                                           ! 8068     if (!(enable & 0x01))
38092                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38093 9959           8A46         FE            mov	al,-2[bp]
38094 995C           24                     01  and	al,*1
38095 995E           84C0                       test	al,al
38096 9960           75           04            jne 	.2F8
38097                       00009962            .2F9:
38098                                           ! 8069         return;
38099 9962           89EC                       mov	sp,bp
38100 9964           5D                         pop	bp
38101 9965           C3                         ret
38102                                           !BCC_EOS
38103                                           ! 8070     for(i = 0x1; i <= 0x9; i++) {
38104                       00009966            .2F8:
38105                                           ! Debug: eq int = const 1 to unsigned short i = [S+6-6] (used reg = )
38106 9966           B8                   0001  mov	ax,*1
38107 9969           8946         FC            mov	-4[bp],ax
38108                                           !BCC_EOS
38109                                           !BCC_EOS
38110 996C           EB           3A            jmp .2FC
38111                       0000996E            .2FD:
38112                                           ! 8071         if (i != 0x4) {
38113                                           ! Debug: ne int = const 4 to unsigned short i = [S+6-6] (used reg = )
38114 996E           8B46         FC            mov	ax,-4[bp]
38115 9971           3D                   0004  cmp	ax,*4
38116 9974           74           2B            je  	.2FE
38117                       00009976            .2FF:
38118                                           ! 8072             outw(0x01CE, i);
38119                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38120 9976           FF76         FC            push	-4[bp]
38121                                           ! Debug: list int = const $1CE (used reg = )
38122 9979           B8                   01CE  mov	ax,#$1CE
38123 997C           50                         push	ax
38124                                           ! Debug: func () void = outw+0 (used reg = )
38125 997D           E8         E2E7            call	_outw
38126 9980           83C4                   04  add	sp,*4
38127                                           !BCC_EOS
38128                                           ! 8073             write_word(ES, BX, inw(0x01CF));
38129                                           ! Debug: list int = const $1CF (used reg = )
38130 9983           B8                   01CF  mov	ax,#$1CF
38131 9986           50                         push	ax
38132                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38133 9987           E8         E2C2            call	_inw
38134 998A           44                         inc	sp
38135 998B           44                         inc	sp
38136                                           ! Debug: list unsigned short = ax+0 (used reg = )
38137 998C           50                         push	ax
38138                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38139 998D           FF76         06            push	6[bp]
38140                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38141 9990           FF76         04            push	4[bp]
38142                                           ! Debug: func () void = write_word+0 (used reg = )
38143 9993           E8         E293            call	_write_word
38144 9996           83C4                   06  add	sp,*6
38145                                           !BCC_EOS
38146                                           ! 8074             BX += 2;
38147                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38148 9999           8B46         06            mov	ax,6[bp]
38149 999C           40                         inc	ax
38150 999D           40                         inc	ax
38151 999E           8946         06            mov	6[bp],ax
38152                                           !BCC_EOS
38153                                           ! 8075         }
38154                                           ! 8076     }
38155                       000099A1            .2FE:
38156                                           ! 8077 }
38157                       000099A1            .2FB:
38158                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38159 99A1           8B46         FC            mov	ax,-4[bp]
38160 99A4           40                         inc	ax
38161 99A5           8946         FC            mov	-4[bp],ax
38162                       000099A8            .2FC:
38163                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38164 99A8           8B46         FC            mov	ax,-4[bp]
38165 99AB           3D                   0009  cmp	ax,*9
38166 99AE           76           BE            jbe	.2FD
38167                       000099B0            .300:
38168                       000099B0            .2FA:
38169 99B0           89EC                       mov	sp,bp
38170 99B2           5D                         pop	bp
38171 99B3           C3                         ret
38172                                           ! 8078 void vbe_biosfn_restore_video_state(ES, BX)
38173                                           ! 8079      Bit16u ES; Bit16u BX;
38174                                           export	_vbe_biosfn_restore_video_state
38175                       000099B4            _vbe_biosfn_restore_video_state:
38176                                           !BCC_EOS
38177                                           !BCC_EOS
38178                                           ! 8080 {
38179                                           ! 8081     Bit16u enable, i;
38180                                           !BCC_EOS
38181                                           ! 8082     enable = read_word(ES, BX);
38182 99B4           55                         push	bp
38183 99B5           89E5                       mov	bp,sp
38184 99B7           83C4                   FC  add	sp,*-4
38185                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38186 99BA           FF76         06            push	6[bp]
38187                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38188 99BD           FF76         04            push	4[bp]
38189                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38190 99C0           E8         E23B            call	_read_word
38191 99C3           83C4                   04  add	sp,*4
38192                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38193 99C6           8946         FE            mov	-2[bp],ax
38194                                           !BCC_EOS
38195                                           ! 8083     BX += 2;
38196                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38197 99C9           8B46         06            mov	ax,6[bp]
38198 99CC           40                         inc	ax
38199 99CD           40                         inc	ax
38200 99CE           8946         06            mov	6[bp],ax
38201                                           !BCC_EOS
38202                                           ! 8084     if (!(enable & 0x01)) {
38203                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38204 99D1           8A46         FE            mov	al,-2[bp]
38205 99D4           24                     01  and	al,*1
38206 99D6           84C0                       test	al,al
38207 99D8           75           1E            jne 	.301
38208                       000099DA            .302:
38209                                           ! 8085         outw(0x01CE,0x4);
38210                                           ! Debug: list int = const 4 (used reg = )
38211 99DA           B8                   0004  mov	ax,*4
38212 99DD           50                         push	ax
38213                                           ! Debug: list int = const $1CE (used reg = )
38214 99DE           B8                   01CE  mov	ax,#$1CE
38215 99E1           50                         push	ax
38216                                           ! Debug: func () void = outw+0 (used reg = )
38217 99E2           E8         E282            call	_outw
38218 99E5           83C4                   04  add	sp,*4
38219                                           !BCC_EOS
38220                                           ! 8086         outw(0x01CF, enable);
38221                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38222 99E8           FF76         FE            push	-2[bp]
38223                                           ! Debug: list int = const $1CF (used reg = )
38224 99EB           B8                   01CF  mov	ax,#$1CF
38225 99EE           50                         push	ax
38226                                           ! Debug: func () void = outw+0 (used reg = )
38227 99EF           E8         E275            call	_outw
38228 99F2           83C4                   04  add	sp,*4
38229                                           !BCC_EOS
38230                                           ! 8087     } else {
38231 99F5           E9         00E5            br 	.303
38232                       000099F8            .301:
38233                                           ! 8088         outw(0x01CE, 0x1);
38234                                           ! Debug: list int = const 1 (used reg = )
38235 99F8           B8                   0001  mov	ax,*1
38236 99FB           50                         push	ax
38237                                           ! Debug: list int = const $1CE (used reg = )
38238 99FC           B8                   01CE  mov	ax,#$1CE
38239 99FF           50                         push	ax
38240                                           ! Debug: func () void = outw+0 (used reg = )
38241 9A00           E8         E264            call	_outw
38242 9A03           83C4                   04  add	sp,*4
38243                                           !BCC_EOS
38244                                           ! 8089         outw(0x01CF, read_word(ES, BX));
38245                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38246 9A06           FF76         06            push	6[bp]
38247                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38248 9A09           FF76         04            push	4[bp]
38249                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38250 9A0C           E8         E1EF            call	_read_word
38251 9A0F           83C4                   04  add	sp,*4
38252                                           ! Debug: list unsigned short = ax+0 (used reg = )
38253 9A12           50                         push	ax
38254                                           ! Debug: list int = const $1CF (used reg = )
38255 9A13           B8                   01CF  mov	ax,#$1CF
38256 9A16           50                         push	ax
38257                                           ! Debug: func () void = outw+0 (used reg = )
38258 9A17           E8         E24D            call	_outw
38259 9A1A           83C4                   04  add	sp,*4
38260                                           !BCC_EOS
38261                                           ! 8090         BX += 2;
38262                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38263 9A1D           8B46         06            mov	ax,6[bp]
38264 9A20           40                         inc	ax
38265 9A21           40                         inc	ax
38266 9A22           8946         06            mov	6[bp],ax
38267                                           !BCC_EOS
38268                                           ! 8091         outw(0x01CE, 0x2);
38269                                           ! Debug: list int = const 2 (used reg = )
38270 9A25           B8                   0002  mov	ax,*2
38271 9A28           50                         push	ax
38272                                           ! Debug: list int = const $1CE (used reg = )
38273 9A29           B8                   01CE  mov	ax,#$1CE
38274 9A2C           50                         push	ax
38275                                           ! Debug: func () void = outw+0 (used reg = )
38276 9A2D           E8         E237            call	_outw
38277 9A30           83C4                   04  add	sp,*4
38278                                           !BCC_EOS
38279                                           ! 8092         outw(0x01CF, read_word(ES, BX));
38280                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38281 9A33           FF76         06            push	6[bp]
38282                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38283 9A36           FF76         04            push	4[bp]
38284                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38285 9A39           E8         E1C2            call	_read_word
38286 9A3C           83C4                   04  add	sp,*4
38287                                           ! Debug: list unsigned short = ax+0 (used reg = )
38288 9A3F           50                         push	ax
38289                                           ! Debug: list int = const $1CF (used reg = )
38290 9A40           B8                   01CF  mov	ax,#$1CF
38291 9A43           50                         push	ax
38292                                           ! Debug: func () void = outw+0 (used reg = )
38293 9A44           E8         E220            call	_outw
38294 9A47           83C4                   04  add	sp,*4
38295                                           !BCC_EOS
38296                                           ! 8093         BX += 2;
38297                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38298 9A4A           8B46         06            mov	ax,6[bp]
38299 9A4D           40                         inc	ax
38300 9A4E           40                         inc	ax
38301 9A4F           8946         06            mov	6[bp],ax
38302                                           !BCC_EOS
38303                                           ! 8094         outw(0x01CE, 0x3);
38304                                           ! Debug: list int = const 3 (used reg = )
38305 9A52           B8                   0003  mov	ax,*3
38306 9A55           50                         push	ax
38307                                           ! Debug: list int = const $1CE (used reg = )
38308 9A56           B8                   01CE  mov	ax,#$1CE
38309 9A59           50                         push	ax
38310                                           ! Debug: func () void = outw+0 (used reg = )
38311 9A5A           E8         E20A            call	_outw
38312 9A5D           83C4                   04  add	sp,*4
38313                                           !BCC_EOS
38314                                           ! 8095         outw(0x01CF, read_word(ES, BX));
38315                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38316 9A60           FF76         06            push	6[bp]
38317                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38318 9A63           FF76         04            push	4[bp]
38319                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38320 9A66           E8         E195            call	_read_word
38321 9A69           83C4                   04  add	sp,*4
38322                                           ! Debug: list unsigned short = ax+0 (used reg = )
38323 9A6C           50                         push	ax
38324                                           ! Debug: list int = const $1CF (used reg = )
38325 9A6D           B8                   01CF  mov	ax,#$1CF
38326 9A70           50                         push	ax
38327                                           ! Debug: func () void = outw+0 (used reg = )
38328 9A71           E8         E1F3            call	_outw
38329 9A74           83C4                   04  add	sp,*4
38330                                           !BCC_EOS
38331                                           ! 8096         BX += 2;
38332                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38333 9A77           8B46         06            mov	ax,6[bp]
38334 9A7A           40                         inc	ax
38335 9A7B           40                         inc	ax
38336 9A7C           8946         06            mov	6[bp],ax
38337                                           !BCC_EOS
38338                                           ! 8097         outw(0x01CE,0x4);
38339                                           ! Debug: list int = const 4 (used reg = )
38340 9A7F           B8                   0004  mov	ax,*4
38341 9A82           50                         push	ax
38342                                           ! Debug: list int = const $1CE (used reg = )
38343 9A83           B8                   01CE  mov	ax,#$1CE
38344 9A86           50                         push	ax
38345                                           ! Debug: func () void = outw+0 (used reg = )
38346 9A87           E8         E1DD            call	_outw
38347 9A8A           83C4                   04  add	sp,*4
38348                                           !BCC_EOS
38349                                           ! 8098         outw(0x01CF, enable);
38350                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38351 9A8D           FF76         FE            push	-2[bp]
38352                                           ! Debug: list int = const $1CF (used reg = )
38353 9A90           B8                   01CF  mov	ax,#$1CF
38354 9A93           50                         push	ax
38355                                           ! Debug: func () void = outw+0 (used reg = )
38356 9A94           E8         E1D0            call	_outw
38357 9A97           83C4                   04  add	sp,*4
38358                                           !BCC_EOS
38359                                           ! 8099         for(i = 0x5; i <= 0x9; i++) {
38360                                           ! Debug: eq int = const 5 to unsigned short i = [S+6-6] (used reg = )
38361 9A9A           B8                   0005  mov	ax,*5
38362 9A9D           8946         FC            mov	-4[bp],ax
38363                                           !BCC_EOS
38364                                           !BCC_EOS
38365 9AA0           EB           33            jmp .306
38366                       00009AA2            .307:
38367                                           ! 8100             outw(0x01CE, i
38368                                           ! 8100 );
38369                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38370 9AA2           FF76         FC            push	-4[bp]
38371                                           ! Debug: list int = const $1CE (used reg = )
38372 9AA5           B8                   01CE  mov	ax,#$1CE
38373 9AA8           50                         push	ax
38374                                           ! Debug: func () void = outw+0 (used reg = )
38375 9AA9           E8         E1BB            call	_outw
38376 9AAC           83C4                   04  add	sp,*4
38377                                           !BCC_EOS
38378                                           ! 8101             outw(0x01CF, read_word(ES, BX));
38379                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38380 9AAF           FF76         06            push	6[bp]
38381                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38382 9AB2           FF76         04            push	4[bp]
38383                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38384 9AB5           E8         E146            call	_read_word
38385 9AB8           83C4                   04  add	sp,*4
38386                                           ! Debug: list unsigned short = ax+0 (used reg = )
38387 9ABB           50                         push	ax
38388                                           ! Debug: list int = const $1CF (used reg = )
38389 9ABC           B8                   01CF  mov	ax,#$1CF
38390 9ABF           50                         push	ax
38391                                           ! Debug: func () void = outw+0 (used reg = )
38392 9AC0           E8         E1A4            call	_outw
38393 9AC3           83C4                   04  add	sp,*4
38394                                           !BCC_EOS
38395                                           ! 8102             BX += 2;
38396                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38397 9AC6           8B46         06            mov	ax,6[bp]
38398 9AC9           40                         inc	ax
38399 9ACA           40                         inc	ax
38400 9ACB           8946         06            mov	6[bp],ax
38401                                           !BCC_EOS
38402                                           ! 8103         }
38403                                           ! 8104     }
38404                       00009ACE            .305:
38405                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38406 9ACE           8B46         FC            mov	ax,-4[bp]
38407 9AD1           40                         inc	ax
38408 9AD2           8946         FC            mov	-4[bp],ax
38409                       00009AD5            .306:
38410                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38411 9AD5           8B46         FC            mov	ax,-4[bp]
38412 9AD8           3D                   0009  cmp	ax,*9
38413 9ADB           76           C5            jbe	.307
38414                       00009ADD            .308:
38415                       00009ADD            .304:
38416                                           ! 8105 }
38417                       00009ADD            .303:
38418 9ADD           89EC                       mov	sp,bp
38419 9ADF           5D                         pop	bp
38420 9AE0           C3                         ret
38421                                           ! 8106 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX)
38422                                           ! 8107 Bit16u *AX; Bit16u CX; Bit16u DX; Bit16u ES; Bit16u *BX;
38423                                           export	_vbe_biosfn_save_restore_state
38424                       00009AE1            _vbe_biosfn_save_restore_state:
38425                                           !BCC_EOS
38426                                           !BCC_EOS
38427                                           !BCC_EOS
38428                                           !BCC_EOS
38429                                           !BCC_EOS
38430                                           ! 8108 {
38431                                           ! 8109     Bit16u ss=get_SS();
38432 9AE1           55                         push	bp
38433 9AE2           89E5                       mov	bp,sp
38434 9AE4           4C                         dec	sp
38435 9AE5           4C                         dec	sp
38436                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38437 9AE6           E8         E18E            call	_get_SS
38438                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38439 9AE9           8946         FE            mov	-2[bp],ax
38440                                           !BCC_EOS
38441                                           ! 8110     Bit16u result, val;
38442                                           !BCC_EOS
38443                                           ! 8111     result = 0x4f;
38444 9AEC           83C4                   FC  add	sp,*-4
38445                                           ! Debug: eq int = const $4F to unsigned short result = [S+8-6] (used reg = )
38446 9AEF           B8                   004F  mov	ax,*$4F
38447 9AF2           8946         FC            mov	-4[bp],ax
38448                                           !BCC_EOS
38449                                           ! 8112     switch(( DX & 0x00ff )) {
38450                                           ! Debug: and int = const $FF to unsigned short DX = [S+8+6] (used reg = )
38451 9AF5           8A46         08            mov	al,8[bp]
38452 9AF8           E9         00A9            br 	.30B
38453                                           ! 8113     case 0x00:
38454                                           ! 8114         val = biosfn_read_video_state_size2(CX);
38455                       00009AFB            .30C:
38456                                           ! Debug: list unsigned short CX = [S+8+4] (used reg = )
38457 9AFB           FF76         06            push	6[bp]
38458                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
38459 9AFE           E8         D3EB            call	_biosfn_read_video_state_size2
38460 9B01           44                         inc	sp
38461 9B02           44                         inc	sp
38462                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38463 9B03           8946         FA            mov	-6[bp],ax
38464                                           !BCC_EOS
38465                                           ! 8115         if (CX & 8)
38466                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38467 9B06           8A46         06            mov	al,6[bp]
38468 9B09           24                     08  and	al,*8
38469 9B0B           84C0                       test	al,al
38470 9B0D           74           09            je  	.30D
38471                       00009B0F            .30E:
38472                                           ! 8116             val += vbe_biosfn_read_video_state_size();
38473                                           ! Debug: func () unsigned short = vbe_biosfn_read_video_state_size+0 (used reg = )
38474 9B0F           E8         FE08            call	_vbe_biosfn_read_video_state_size
38475                                           ! Debug: addab unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38476 9B12           0346         FA            add	ax,-6[bp]
38477 9B15           8946         FA            mov	-6[bp],ax
38478                                           !BCC_EOS
38479                                           ! 8117         write_word(ss, BX, val);
38480                       00009B18            .30D:
38481                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38482 9B18           FF76         FA            push	-6[bp]
38483                                           ! Debug: list * unsigned short BX = [S+$A+$A] (used reg = )
38484 9B1B           FF76         0C            push	$C[bp]
38485                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
38486 9B1E           FF76         FE            push	-2[bp]
38487                                           ! Debug: func () void = write_word+0 (used reg = )
38488 9B21           E8         E105            call	_write_word
38489 9B24           83C4                   06  add	sp,*6
38490                                           !BCC_EOS
38491                                           ! 8118         break;
38492 9B27           E9         008C            br 	.309
38493                                           !BCC_EOS
38494                                           ! 8119     case 0x01:
38495                                           ! 8120         val = read_word(ss, BX);
38496                       00009B2A            .30F:
38497                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
38498 9B2A           FF76         0C            push	$C[bp]
38499                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
38500 9B2D           FF76         FE            push	-2[bp]
38501                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38502 9B30           E8         E0CB            call	_read_word
38503 9B33           83C4                   04  add	sp,*4
38504                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38505 9B36           8946         FA            mov	-6[bp],ax
38506                                           !BCC_EOS
38507                                           ! 8121         val = biosfn_save_video_state(CX, ES, val);
38508                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38509 9B39           FF76         FA            push	-6[bp]
38510                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38511 9B3C           FF76         0A            push	$A[bp]
38512                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
38513 9B3F           FF76         06            push	6[bp]
38514                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
38515 9B42           E8         D412            call	_biosfn_save_video_state
38516 9B45           83C4                   06  add	sp,*6
38517                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38518 9B48           8946         FA            mov	-6[bp],ax
38519                                           !BCC_EOS
38520                                           ! 8122         if (CX & 8)
38521                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38522 9B4B           8A46         06            mov	al,6[bp]
38523 9B4E           24                     08  and	al,*8
38524 9B50           84C0                       test	al,al
38525 9B52           74           0C            je  	.310
38526                       00009B54            .311:
38527                                           ! 8123             vbe_biosfn_save_video_state(ES, val);
38528                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38529 9B54           FF76         FA            push	-6[bp]
38530                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38531 9B57           FF76         0A            push	$A[bp]
38532                                           ! Debug: func () void = vbe_biosfn_save_video_state+0 (used reg = )
38533 9B5A           E8         FDC5            call	_vbe_biosfn_save_video_state
38534 9B5D           83C4                   04  add	sp,*4
38535                                           !BCC_EOS
38536                                           ! 8124         break;
38537                       00009B60            .310:
38538 9B60           EB           54            jmp .309
38539                                           !BCC_EOS
38540                                           ! 8125     case 0x02:
38541                                           ! 8126         val = read_word(ss, BX);
38542                       00009B62            .312:
38543                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
38544 9B62           FF76         0C            push	$C[bp]
38545                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
38546 9B65           FF76         FE            push	-2[bp]
38547                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38548 9B68           E8         E093            call	_read_word
38549 9B6B           83C4                   04  add	sp,*4
38550                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38551 9B6E           8946         FA            mov	-6[bp],ax
38552                                           !BCC_EOS
38553                                           ! 8127         val = biosfn_restore_video_state(CX, ES, val);
38554                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38555 9B71           FF76         FA            push	-6[bp]
38556                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38557 9B74           FF76         0A            push	$A[bp]
38558                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
38559 9B77           FF76         06            push	6[bp]
38560                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
38561 9B7A           E8         D9A4            call	_biosfn_restore_video_state
38562 9B7D           83C4                   06  add	sp,*6
38563                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38564 9B80           8946         FA            mov	-6[bp],ax
38565                                           !BCC_EOS
38566                                           ! 8128         if (CX & 8)
38567                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38568 9B83           8A46         06            mov	al,6[bp]
38569 9B86           24                     08  and	al,*8
38570 9B88           84C0                       test	al,al
38571 9B8A           74           0C            je  	.313
38572                       00009B8C            .314:
38573                                           ! 8129             vbe_biosfn_restore_video_state(ES, val);
38574                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38575 9B8C           FF76         FA            push	-6[bp]
38576                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38577 9B8F           FF76         0A            push	$A[bp]
38578                                           ! Debug: func () void = vbe_biosfn_restore_video_state+0 (used reg = )
38579 9B92           E8         FE1F            call	_vbe_biosfn_restore_video_state
38580 9B95           83C4                   04  add	sp,*4
38581                                           !BCC_EOS
38582                                           ! 8130         break;
38583                       00009B98            .313:
38584 9B98           EB           1C            jmp .309
38585                                           !BCC_EOS
38586                                           ! 8131     default:
38587                                           ! 8132         result = 0x100;
38588                       00009B9A            .315:
38589                                           ! Debug: eq int = const $100 to unsigned short result = [S+8-6] (used reg = )
38590 9B9A           B8                   0100  mov	ax,#$100
38591 9B9D           8946         FC            mov	-4[bp],ax
38592                                           !BCC_EOS
38593                                           ! 8133         break;
38594 9BA0           EB           14            jmp .309
38595                                           !BCC_EOS
38596                                           ! 8134     }
38597                                           ! 8135     write_word(ss, AX, result);
38598 9BA2           EB           12            jmp .309
38599                       00009BA4            .30B:
38600 9BA4           2C                     00  sub	al,*0
38601 9BA6         0F84         FF51            beq 	.30C
38602 9BAA           2C                     01  sub	al,*1
38603 9BAC         0F84         FF7A            beq 	.30F
38604 9BB0           2C                     01  sub	al,*1
38605 9BB2           74           AE            je 	.312
38606 9BB4           EB           E4            jmp	.315
38607                       00009BB6            .309:
38608                       FFFFFFF8            ..FFF4	=	-8
38609                                           ! Debug: list unsigned short result = [S+8-6] (used reg = )
38610 9BB6           FF76         FC            push	-4[bp]
38611                                           ! Debug: list * unsigned short AX = [S+$A+2] (used reg = )
38612 9BB9           FF76         04            push	4[bp]
38613                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
38614 9BBC           FF76         FE            push	-2[bp]
38615                                           ! Debug: func () void = write_word+0 (used reg = )
38616 9BBF           E8         E067            call	_write_word
38617 9BC2           83C4                   06  add	sp,*6
38618                                           !BCC_EOS
38619                                           ! 8136 }
38620 9BC5           89EC                       mov	sp,bp
38621 9BC7           5D                         pop	bp
38622 9BC8           C3                         ret
38623                                           ! 8137 #asm
38624                                           !BCC_ASM
38625                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38626                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38627                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38628                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38629                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38630                       00009BC9            vbe_biosfn_display_window_control:
38631 9BC9           80FB                   00    cmp bl, #0x00
38632 9BCC           75           24              jne vbe_05_failed
38633 9BCE           80FF                   01    cmp bh, #0x01
38634 9BD1           74           16              je get_display_window
38635 9BD3           72           04              jb set_display_window
38636 9BD5           B8                   0100    mov ax, #0x0100
38637 9BD8           C3                           ret
38638                       00009BD9            set_display_window:
38639 9BD9           89D0                         mov ax, dx
38640 9BDB           E8         F5CF              call _dispi_set_bank
38641 9BDE           E8         F5DC              call dispi_get_bank
38642 9BE1           39D0                         cmp ax, dx
38643 9BE3           75           0D              jne vbe_05_failed
38644 9BE5           B8                   004F    mov ax, #0x004f
38645 9BE8           C3                           ret
38646                       00009BE9            get_display_window:
38647 9BE9           E8         F5D1              call dispi_get_bank
38648 9BEC           89C2                         mov dx, ax
38649 9BEE           B8                   004F    mov ax, #0x004f
38650 9BF1           C3                           ret
38651                       00009BF2            vbe_05_failed:
38652 9BF2           B8                   014F    mov ax, #0x014f
38653 9BF5           C3                           ret
38654                                           ! 8162 endasm
38655                                           !BCC_ENDASM
38656                                           ! 8163 #asm
38657                                           !BCC_ASM
38658                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38659                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38660                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38661                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38662                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38663                       00009BF6            vbe_biosfn_set_get_logical_scan_line_length:
38664 9BF6           89C8                         mov ax, cx
38665 9BF8           80FB                   01    cmp bl, #0x01
38666 9BFB           74           24              je get_logical_scan_line_length
38667 9BFD           80FB                   02    cmp bl, #0x02
38668 9C00           74           06              je set_logical_scan_line_bytes
38669 9C02           72           1A              jb set_logical_scan_line_pixels
38670 9C04           B8                   0100    mov ax, #0x0100
38671 9C07           C3                           ret
38672                       00009C08            set_logical_scan_line_bytes:
38673 9C08           50                           push ax
38674 9C09           E8         F526              call dispi_get_bpp
38675 9C0C           30FF                         xor bh, bh
38676 9C0E           88E3                         mov bl, ah
38677 9C10           08DB                         or bl, bl
38678 9C12           75           05              jnz no_4bpp_1
38679 9C14           C1E0                   03    shl ax, #3
38680 9C17           B3                     01    mov bl, #1
38681                       00009C19            no_4bpp_1:
38682 9C19           31D2                         xor dx, dx
38683 9C1B           58                           pop ax
38684 9C1C           F7F3                         div bx
38685                       00009C1E            set_logical_scan_line_pixels:
38686 9C1E           E8         F63A              call dispi_set_virt_width
38687                       00009C21            get_logical_scan_line_length:
38688 9C21           E8         F50E              call dispi_get_bpp
38689 9C24           30FF                         xor bh, bh
38690 9C26           88E3                         mov bl, ah
38691 9C28           E8         F643              call dispi_get_virt_width
38692 9C2B           89C1                         mov cx, ax
38693 9C2D           08DB                         or bl, bl
38694 9C2F           75           05              jnz no_4bpp_2
38695 9C31           C1E8                   03    shr ax, #3
38696 9C34           B3                     01    mov bl, #1
38697                       00009C36            no_4bpp_2:
38698 9C36           F7E3                         mul bx
38699 9C38           89C3                         mov bx, ax
38700 9C3A           E8         F63F              call dispi_get_virt_height
38701 9C3D           89C2                         mov dx, ax
38702 9C3F           B8                   004F    mov ax, #0x004f
38703 9C42           C3                           ret
38704                                           ! 8205 endasm
38705                                           !BCC_ENDASM
38706                                           ! 8206 #asm
38707                                           !BCC_ASM
38708                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38709                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38710                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38711                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38712                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38713                       00009C43            vbe_biosfn_set_get_display_start:
38714 9C43           80FB                   80    cmp bl, #0x80
38715 9C46           74           0B              je set_display_start
38716 9C48           80FB                   01    cmp bl, #0x01
38717 9C4B           74           14              je get_display_start
38718 9C4D           72           04              jb set_display_start
38719 9C4F           B8                   0100    mov ax, #0x0100
38720 9C52           C3                           ret
38721                       00009C53            set_display_start:
38722 9C53           89C8                         mov ax, cx
38723 9C55           E8         F5AA              call dispi_set_x_offset
38724 9C58           89D0                         mov ax, dx
38725 9C5A           E8         F5C3              call dispi_set_y_offset
38726 9C5D           B8                   004F    mov ax, #0x004f
38727 9C60           C3                           ret
38728                       00009C61            get_display_start:
38729 9C61           E8         F5AE              call dispi_get_x_offset
38730 9C64           89C1                         mov cx, ax
38731 9C66           E8         F5C7              call dispi_get_y_offset
38732 9C69           89C2                         mov dx, ax
38733 9C6B           30FF                         xor bh, bh
38734 9C6D           B8                   004F    mov ax, #0x004f
38735 9C70           C3                           ret
38736                                           ! 8230 endasm
38737                                           !BCC_ENDASM
38738                                           ! 8231 #asm
38739                                           !BCC_ASM
38740                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38741                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38742                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38743                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38744                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38745                       00009C71            vbe_biosfn_set_get_dac_palette_format:
38746 9C71           80FB                   01    cmp bl, #0x01
38747 9C74           74           1E              je get_dac_palette_format
38748 9C76           72           04              jb set_dac_palette_format
38749 9C78           B8                   0100    mov ax, #0x0100
38750 9C7B           C3                           ret
38751                       00009C7C            set_dac_palette_format:
38752 9C7C           E8         F520              call dispi_get_enable
38753 9C7F           80FF                   06    cmp bh, #0x06
38754 9C82           74           0A              je set_normal_dac
38755 9C84           80FF                   08    cmp bh, #0x08
38756 9C87           75           1B              jne vbe_08_unsupported
38757 9C89           0D                   0020    or ax, # 0x20
38758 9C8C           75           03              jnz set_dac_mode
38759                       00009C8E            set_normal_dac:
38760 9C8E           25                   FFDF    and ax, #~ 0x20
38761                       00009C91            set_dac_mode:
38762 9C91           E8         F4FB              call _dispi_set_enable
38763                       00009C94            get_dac_palette_format:
38764 9C94           B7                     06    mov bh, #0x06
38765 9C96           E8         F506              call dispi_get_enable
38766 9C99           25                   0020    and ax, # 0x20
38767 9C9C           74           02              jz vbe_08_ok
38768 9C9E           B7                     08    mov bh, #0x08
38769                       00009CA0            vbe_08_ok:
38770 9CA0           B8                   004F    mov ax, #0x004f
38771 9CA3           C3                           ret
38772                       00009CA4            vbe_08_unsupported:
38773 9CA4           B8                   014F    mov ax, #0x014f
38774 9CA7           C3                           ret
38775                                           ! 8262 endasm
38776                                           !BCC_ENDASM
38777                                           ! 8263 void vbe_biosfn_set_get_palette_data(AX)
38778                                           ! 8264 {
38779                                           export	_vbe_biosfn_set_get_palette_data
38780                       00009CA8            _vbe_biosfn_set_get_palette_data:
38781                                           ! 8265 }
38782 9CA8           C3                         ret
38783                                           ! 8266 #asm
38784                                           !BCC_ASM
38785                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
38786                       00009CA9            vbe_biosfn_return_protected_mode_interface:
38787 9CA9           84DB                         test bl, bl
38788 9CAB           75           11              jnz _fail
38789 9CAD           BF                   C000    mov di, #0xc000
38790 9CB0           8EC7                         mov es, di
38791 9CB2           BF                   8FC0    mov di, # vesa_pm_start
38792 9CB5           B9                   90C1    mov cx, # vesa_pm_end
38793 9CB8           29F9                         sub cx, di
38794 9CBA           B8                   004F    mov ax, #0x004f
38795 9CBD           C3                           ret
38796                       00009CBE            _fail:
38797 9CBE           B8                   014F    mov ax, #0x014f
38798 9CC1           C3                           ret
38799                                           ! 8280 endasm
38800                                           !BCC_ENDASM
38801                                           ! 8281 #asm
38802                                           !BCC_ASM
38803                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
38804                                           ;; DATA_SEG_DEFS_HERE
38805                                           ! 8283 endasm
38806                                           !BCC_ENDASM
38807                                           ! 8284 #asm
38808                                           !BCC_ASM
38809                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
38810 9CC2                        76            .ascii "vgabios ends here"
38811 9CD3                        00            .byte 0x00
38812                       00009CD4            vgabios_end:
38813 9CD4                        CB            .byte 0xCB
38814                                           ;; BLOCK_STRINGS_BEGIN
38815                                           ! 8290 endasm
38816                                           !BCC_ENDASM
38817                                           ! 8291 
38818                                           
38819 9CD5                                      .bss
38820                                           
38821                                           ! 0 errors detected

Symbols:
..FFF4                      0 FFF8 A   ..FFF5                      0 FFFC A   
..FFF6                      0 FFEE A   ..FFF7                      0 FFF4 A   
..FFF8                      0 FFF6 A   ..FFF9                      0 FFEE A   
..FFFA                      0 FFEE A   ..FFFB                      0 FFF2 A   
..FFFC                      0 FFF0 A   ..FFFD                      0 FFE8 A   
..FFFE                      0 FFE8 A   ..FFFF                      0 FFFE A   
.1                          0 3B95 A   .10                         0 3693 A   
.100                        0 4CBA A   .101                        0 4CB3 A   
.102                        0 4CAA A   .103                        0 4E54 A   
.104                        0 4DC6 A   .105                        0 4D3C A   
.106                        0 4DC3 A   .107                        0 4DB2 A   
.108                        0 4DB9 A   .109                        0 4D46 A   
.10A                        0 4D8A A   .10B                        0 4D64 A   
.10C                        0 4D5D A   .10D                        0 4DB2 A   
.10E                        0 4DC3 A   .10F                        0 4E54 A   
.11                         0 36C2 A   .110                        0 4E54 A   
.111                        0 4E41 A   .112                        0 4E48 A   
.113                        0 4DD0 A   .114                        0 4E0D A   
.115                        0 4DE7 A   .116                        0 4DE0 A   
.117                        0 4E35 A   .118                        0 4E41 A   
.119                        0 4E3F A   .11A                        0 4E54 A   
.11B                        0 4E57 A   .11C                        0 4EEA A   
.11D                        0 4EA5 A   .11E                        0 4E93 A   
.11F                        0 4E81 A   .12                         0 36B2 A   
.120                        0 4E7A A   .121                        0 4E73 A   
.122                        0 502E A   .123                        0 4F0D A   
.124                        0 4EF1 A   .125                        0 4FA0 A   
.126                        0 4F16 A   .127                        0 4F9D A   
.128                        0 4F8C A   .129                        0 4F93 A   
.12A                        0 4F20 A   .12B                        0 4F64 A   
.12C                        0 4F3E A   .12D                        0 4F37 A   
.12E                        0 4F8C A   .12F                        0 4F9D A   
.13                         0 36C7 A   .130                        0 502E A   
.131                        0 502E A   .132                        0 501B A   
.133                        0 5022 A   .134                        0 4FAA A   
.135                        0 4FE7 A   .136                        0 4FC1 A   
.137                        0 4FBA A   .138                        0 500F A   
.139                        0 501B A   .13A                        0 5019 A   
.13B                        0 502E A   .13C                        0 5080 A   
.13D                        0 507C A   .13E                        0 513F A   
.13F                        0 50E1 A   .14                         0 36DE A   
.140                        0 513F A   .141                        0 5170 A   
.143                        0 5166 A   .144                        0 514E A   
.145                        0 5156 A   .146                        0 515E A   
.147                        0 51DD A   .148                        0 51CD A   
.149                        0 51EB A   .14A                        0 52A3 A   
.14B                        0 5292 A   .14C                        0 5299 A   
.14D                        0 51F3 A   .14E                        0 5292 A   
.14F                        0 5282 A   .15                         0 36F2 A   
.150                        0 5289 A   .151                        0 5210 A   
.152                        0 5272 A   .153                        0 525B A   
.154                        0 5282 A   .155                        0 5292 A   
.156                        0 52A3 A   .157                        0 54B5 A   
.158                        0 54A5 A   .159                        0 54AC A   
.15A                        0 52F9 A   .15B                        0 531D A   
.15C                        0 5314 A   .15D                        0 53DE A   
.15E                        0 532B A   .15F                        0 5346 A   
.16                         0 370B A   .160                        0 5334 A   
.161                        0 534B A   .162                        0 53C8 A   
.163                        0 53BA A   .164                        0 53C1 A   
.165                        0 5352 A   .166                        0 53B0 A   
.167                        0 5369 A   .168                        0 5392 A   
.169                        0 5372 A   .16A                        0 53B0 A   
.16B                        0 53C8 A   .16C                        0 54A5 A   
.16D                        0 54A5 A   .16E                        0 549C A   
.16F                        0 53E1 A   .17                         0 3722 A   
.170                        0 53FC A   .171                        0 53EA A   
.172                        0 5401 A   .173                        0 5482 A   
.174                        0 5474 A   .175                        0 547B A   
.176                        0 5408 A   .177                        0 546A A   
.178                        0 541F A   .179                        0 544A A   
.17A                        0 5428 A   .17B                        0 546A A   
.17C                        0 5482 A   .17D                        0 54A5 A   
.17E                        0 54B5 A   .17F                        0 5589 A   
.18                         0 3730 A   .180                        0 5579 A   
.181                        0 5580 A   .182                        0 54FF A   
.183                        0 5579 A   .184                        0 556B A   
.185                        0 5572 A   .186                        0 5525 A   
.187                        0 5547 A   .188                        0 5541 A   
.189                        0 5579 A   .18A                        0 5589 A   
.18B                        0 55BD A   .18C                        0 55B9 A   
.18D                        0 568A A   .18E                        0 5620 A   
.18F                        0 577E A   .19                         0 376B A   
.190                        0 577E A   .191                        0 5766 A   
.192                        0 56BF A   .193                        0 575F A   
.195                        0 574B A   .196                        0 56D3 A   
.197                        0 56D3 A   .198                        0 56FD A   
.199                        0 5726 A   .19A                        0 577E A   
.19B                        0 5772 A   .19C                        0 57B2 A   
.19D                        0 57AE A   .19E                        0 5881 A   
.19F                        0 5813 A   .1A                         0 37A5 A   
.1A0                        0 587E A   .1A1                        0 5872 A   
.1A2                        0 5849 A   .1A3                        0 587E A   
.1A4                        0 5974 A   .1A5                        0 5974 A   
.1A6                        0 595C A   .1A7                        0 58B6 A   
.1A8                        0 5955 A   .1AA                        0 5941 A   
.1AB                        0 58CA A   .1AC                        0 58CA A   
.1AD                        0 58F3 A   .1AE                        0 591C A   
.1AF                        0 5974 A   .1B                         0 37BA A   
.1B0                        0 5968 A   .1B1                        0 5A20 A   
.1B2                        0 5A1C A   .1B3                        0 5A3A A   
.1B4                        0 5A36 A   .1B5                        0 5C88 A   
.1B7                        0 5C72 A   .1B8                        0 5A4F A   
.1B9                        0 5A4F A   .1BA                        0 5AD0 A   
.1BB                        0 5AC2 A   .1BC                        0 5AF5 A   
.1BD                        0 5B27 A   .1BE                        0 5B0B A   
.1BF                        0 5B41 A   .1C                         0 37DA A   
.1C0                        0 5B53 A   .1C1                        0 5B4A A   
.1C2                        0 5BBF A   .1C3                        0 5B79 A   
.1C4                        0 5BFF A   .1C5                        0 5C13 A   
.1C6                        0 5C08 A   .1C7                        0 5C29 A   
.1C8                        0 5C3E A   .1C9                        0 5CC2 A   
.1CA                        0 5CBE A   .1CB                        0 5CDC A   
.1CC                        0 5CD8 A   .1CD                        0 5E72 A   
.1CF                        0 5E5A A   .1D                         0 37FA A   
.1D0                        0 5CF1 A   .1D1                        0 5CF1 A   
.1D2                        0 5D85 A   .1D3                        0 5D77 A   
.1D4                        0 5D7E A   .1D5                        0 5D33 A   
.1D6                        0 5D77 A   .1D7                        0 5D63 A   
.1D8                        0 5D85 A   .1D9                        0 5D88 A   
.1DA                        0 5DB4 A   .1DB                        0 5DAB A   
.1DC                        0 5E01 A   .1DD                        0 5DDC A   
.1DE                        0 5E22 A   .1DF                        0 5E24 A   
.1E                         0 3817 A   .1E0                        0 5E53 A   
.1E1                        0 5EB2 A   .1E2                        0 5EA1 A   
.1E3                        0 5EDC A   .1E4                        0 5ED8 A   
.1E5                        0 6138 A   .1E7                        0 6117 A   
.1E8                        0 5F2D A   .1E9                        0 5F30 A   
.1EA                        0 5F3E A   .1EB                        0 5F37 A   
.1EC                        0 5F41 A   .1ED                        0 5F49 A   
.1EE                        0 5F53 A   .1EF                        0 5FA0 A   
.1F                         0 3832 A   .1F0                        0 5F95 A   
.1F1                        0 5F53 A   .1F2                        0 5FA0 A   
.1F3                        0 5FA3 A   .1F4                        0 603D A   
.1F5                        0 5FBB A   .1F6                        0 603A A   
.1F7                        0 6017 A   .1F8                        0 610E A   
.1F9                        0 610E A   .1FB                        0 60FA A   
.1FC                        0 6083 A   .1FD                        0 6083 A   
.1FE                        0 60AC A   .1FF                        0 60D5 A   
.20                         0 384F A   .200                        0 614E A   
.201                        0 6142 A   .202                        0 6223 A   
.203                        0 615A A   .204                        0 61F3 A   
.205                        0 6172 A   .206                        0 621A A   
.207                        0 65D0 A   .208                        0 65BF A   
.209                        0 65C6 A   .20A                        0 6508 A   
.20B                        0 657B A   .20C                        0 6575 A   
.20D                        0 65D0 A   .20E                        0 66B1 A   
.20F                        0 66A1 A   .21                         0 385E A   
.210                        0 66C9 A   .211                        0 680E A   
.212                        0 67FF A   .213                        0 6806 A   
.214                        0 67C2 A   .215                        0 680E A   
.216                        0 6823 A   .217                        0 6818 A   
.218                        0 68A7 A   .219                        0 6898 A   
.21A                        0 689F A   .21B                        0 685E A   
.21C                        0 68A7 A   .21D                        0 68BA A   
.21E                        0 68B1 A   .21F                        0 6938 A   
.22                         0 3999 A   .220                        0 6929 A   
.221                        0 6930 A   .222                        0 68F5 A   
.223                        0 6938 A   .224                        0 694B A   
.225                        0 6942 A   .226                        0 69D6 A   
.227                        0 69C7 A   .228                        0 69CE A   
.229                        0 6993 A   .22A                        0 69D6 A   
.22B                        0 69E9 A   .22C                        0 69E0 A   
.22D                        0 6B6B A   .22F                        0 6B46 A   
.230                        0 6A03 A   .231                        0 6A3A A   
.232                        0 6A71 A   .233                        0 6A94 A   
.234                        0 6AB7 A   .235                        0 6ADA A   
.236                        0 6AFC A   .237                        0 6B1E A   
.238                        0 6B40 A   .239                        0 6B69 A   
.23A                        0 6B59 A   .23B                        0 6CDB A   
.23C                        0 6CC9 A   .23D                        0 6D65 A   
.23E                        0 6D59 A   .23F                        0 6D0A A   
.24                         0 3945 A   .240                        0 6D3D A   
.241                        0 6D28 A   .242                        0 6D65 A   
.243                        0 6D7D A   .244                        0 6D6E A   
.245                        0 6F08 A   .246                        0 6EFF A   
.247                        0 6F1A A   .248                        0 6F11 A   
.249                        0 6F2C A   .24A                        0 6F23 A   
.24B                        0 71DF A   .24C                        0 6F79 A   
.24D                        0 7064 A   .24E                        0 7055 A   
.24F                        0 705C A   .25                         0 3864 A   
.250                        0 7029 A   .251                        0 7064 A   
.252                        0 70D2 A   .253                        0 70C3 A   
.254                        0 70CA A   .255                        0 7097 A   
.256                        0 70D2 A   .257                        0 7125 A   
.258                        0 7116 A   .259                        0 711D A   
.25A                        0 70D9 A   .25B                        0 7125 A   
.25C                        0 7170 A   .25D                        0 7161 A   
.25E                        0 7168 A   .25F                        0 7135 A   
.26                         0 3864 A   .260                        0 7170 A   
.261                        0 745A A   .262                        0 71EA A   
.263                        0 738B A   .264                        0 737C A   
.265                        0 7383 A   .266                        0 7354 A   
.267                        0 738B A   .268                        0 751A A   
.269                        0 7465 A   .26A                        0 7504 A   
.26B                        0 74F5 A   .26C                        0 74FC A   
.26D                        0 74D6 A   .26E                        0 7504 A   
.26F                        0 77DC A   .27                         0 388D A   
.270                        0 7532 A   .271                        0 75A1 A   
.272                        0 7592 A   .273                        0 7599 A   
.274                        0 7565 A   .275                        0 75A1 A   
.276                        0 7626 A   .277                        0 7617 A   
.278                        0 761E A   .279                        0 75E2 A   
.27A                        0 7610 A   .27B                        0 75EA A   
.27C                        0 7626 A   .27D                        0 7648 A   
.27E                        0 7640 A   .27F                        0 76E9 A   
.28                         0 388D A   .280                        0 76DA A   
.281                        0 76E1 A   .282                        0 76A5 A   
.283                        0 76E9 A   .284                        0 7742 A   
.285                        0 7733 A   .286                        0 773A A   
.287                        0 7706 A   .288                        0 7742 A   
.289                        0 7A57 A   .28A                        0 77E7 A   
.28B                        0 7988 A   .28C                        0 7979 A   
.28D                        0 7980 A   .28E                        0 7951 A   
.28F                        0 7988 A   .29                         0 38A2 A   
.290                        0 7AF8 A   .291                        0 7A62 A   
.292                        0 7AE4 A   .293                        0 7AD5 A   
.294                        0 7ADC A   .295                        0 7AB5 A   
.296                        0 7AE4 A   .297                        0 7B3A A   
.298                        0 7B2C A   .299                        0 7B33 A   
.29A                        0 7B10 A   .29B                        0 7B2C A   
.29C                        0 7B24 A   .29D                        0 7B3A A   
.29E                        0 7DB3 A   .29F                        0 7D9D A   
.2A                         0 38A2 A   .2A0                        0 7C99 A   
.2A1                        0 7CAE A   .2A2                        0 7CA0 A   
.2A3                        0 7D96 A   .2A4                        0 7D86 A   
.2A5                        0 7CB7 A   .2A6                        0 7CE6 A   
.2A7                        0 7CC5 A   .2A8                        0 7CBE A   
.2A9                        0 7D84 A   .2AA                        0 7D84 A   
.2AB                        0 7CEF A   .2AC                        0 7D13 A   
.2AD                        0 7D0D A   .2AE                        0 7D7F A   
.2AF                        0 7D70 A   .2B                         0 38B7 A   
.2B0                        0 7D77 A   .2B1                        0 7D26 A   
.2B2                        0 7D58 A   .2B3                        0 7D45 A   
.2B4                        0 7D69 A   .2B5                        0 7D7F A   
.2B6                        0 7D96 A   .2B7                        0 7DB3 A   
.2B8                        0 93BC A   .2B9                        0 93B1 A   
.2BA                        0 936E A   .2BB                        0 93A8 A   
.2BC                        0 9378 A   .2BD                        0 9388 A   
.2BE                        0 937F A   .2BF                        0 93A6 A   
.2C                         0 38B7 A   .2C0                        0 939D A   
.2C1                        0 9394 A   .2C2                        0 93A6 A   
.2C3                        0 93B1 A   .2C4                        0 93BC A   
.2C5                        0 94D6 A   .2C6                        0 94CF A   
.2C7                        0 94AF A   .2C8                        0 94A7 A   
.2C9                        0 949F A   .2CA                        0 9497 A   
.2CB                        0 94C7 A   .2CC                        0 94BF A   
.2CD                        0 94B7 A   .2CE                        0 959A A   
.2CF                        0 954F A   .2D                         0 38CC A   
.2D0                        0 95B2 A   .2D1                        0 965F A   
.2D2                        0 9651 A   .2D3                        0 95B2 A   
.2D4                        0 9646 A   .2D5                        0 961A A   
.2D6                        0 9610 A   .2D7                        0 95F9 A   
.2D8                        0 9646 A   .2D9                        0 965F A   
.2DA                        0 96B7 A   .2DB                        0 96B9 A   
.2DC                        0 9774 A   .2DD                        0 96E8 A   
.2DE                        0 9728 A   .2DF                        0 9722 A   
.2E                         0 38DB A   .2E0                        0 974E A   
.2E1                        0 973D A   .2E2                        0 976C A   
.2E3                        0 9758 A   .2E4                        0 977A A   
.2E5                        0 979A A   .2E6                        0 9782 A   
.2E7                        0 97CA A   .2E8                        0 97CC A   
.2E9                        0 97DC A   .2EA                        0 97D8 A   
.2EB                        0 97DE A   .2EC                        0 97F0 A   
.2ED                        0 97EC A   .2EE                        0 97F2 A   
.2EF                        0 9829 A   .2F                         0 38F9 A   
.2F0                        0 9806 A   .2F1                        0 98CE A   
.2F2                        0 9845 A   .2F3                        0 9860 A   
.2F4                        0 9857 A   .2F5                        0 98E2 A   
.2F6                        0 98E2 A   .2F7                        0 98DC A   
.2F8                        0 9966 A   .2F9                        0 9962 A   
.2FA                        0 99B0 A   .2FB                        0 99A1 A   
.2FC                        0 99A8 A   .2FD                        0 996E A   
.2FE                        0 99A1 A   .2FF                        0 9976 A   
.3                          0 3B41 A   .30                         0 3907 A   
.300                        0 99B0 A   .301                        0 99F8 A   
.302                        0 99DA A   .303                        0 9ADD A   
.304                        0 9ADD A   .305                        0 9ACE A   
.306                        0 9AD5 A   .307                        0 9AA2 A   
.308                        0 9ADD A   .309                        0 9BB6 A   
.30B                        0 9BA4 A   .30C                        0 9AFB A   
.30D                        0 9B18 A   .30E                        0 9B0F A   
.30F                        0 9B2A A   .31                         0 3915 A   
.310                        0 9B60 A   .311                        0 9B54 A   
.312                        0 9B62 A   .313                        0 9B98 A   
.314                        0 9B8C A   .315                        0 9B9A A   
.32                         0 3923 A   .33                         0 399C A   
.34                         0 39E9 A   .36                         0 39DD A   
.37                         0 39A1 A   .38                         0 39A6 A   
.39                         0 39C4 A   .3A                         0 39EC A   
.3B                         0 3A20 A   .3C                         0 3A3C A   
.3D                         0 3A81 A   .3F                         0 3A75 A   
.4                          0 3669 A   .40                         0 3A42 A   
.41                         0 3A51 A   .42                         0 3A62 A   
.43                         0 3A8E A   .44                         0 3B37 A   
.45                         0 3A97 A   .46                         0 3B35 A   
.48                         0 3B0A A   .49                         0 3A9C A   
.4A                         0 3AAF A   .4B                         0 3AC4 A   
.4C                         0 3AD9 A   .4D                         0 3AF2 A   
.4E                         0 3AFA A   .4F                         0 3B02 A   
.5                          0 36C4 A   .50                         0 3B33 A   
.51                         0 3B1D A   .52                         0 3B3D A   
.53                         0 3B8E A   .54                         0 3B54 A   
.55                         0 3BB5 A   .56                         0 3BAD A   
.57                         0 3BD6 A   .58                         0 3BD2 A   
.59                         0 3DA9 A   .5A                         0 3C64 A   
.5B                         0 3CD6 A   .5D                         0 3CC6 A   
.5E                         0 3CA4 A   .5F                         0 3CAC A   
.60                         0 3CB4 A   .61                         0 3CBC A   
.62                         0 3D93 A   .63                         0 3D82 A   
.64                         0 3D89 A   .65                         0 3CDE A   
.66                         0 3D5B A   .67                         0 3CFF A   
.68                         0 3D82 A   .69                         0 3D93 A   
.6A                         0 3DA9 A   .6B                         0 3D9C A   
.6C                         0 3DF9 A   .6D                         0 3DEA A   
.6E                         0 3DF1 A   .6F                         0 3DB9 A   
.7                          0 369F A   .70                         0 3DF9 A   
.71                         0 3E7E A   .72                         0 3E6F A   
.73                         0 3E76 A   .74                         0 3E37 A   
.75                         0 3E7E A   .76                         0 3EC5 A   
.77                         0 3EB6 A   .78                         0 3EBD A   
.79                         0 3E85 A   .7A                         0 3EC5 A   
.7B                         0 3EE0 A   .7C                         0 3EDB A   
.7D                         0 3EE3 A   .7E                         0 3F3A A   
.7F                         0 3F2B A   .8                          0 367B A   
.80                         0 3F32 A   .81                         0 3EFA A   
.82                         0 3F3A A   .83                         0 403A A   
.84                         0 3F79 A   .85                         0 3FB5 A   
.86                         0 3F8F A   .87                         0 403A A   
.88                         0 3FE0 A   .89                         0 3FBC A   
.8A                         0 403A A   .8B                         0 4177 A   
.8C                         0 4169 A   .8D                         0 4199 A   
.8E                         0 418A A   .8F                         0 4191 A   
.9                          0 3687 A   .90                         0 417E A   
.91                         0 4199 A   .92                         0 41C5 A   
.93                         0 41B7 A   .94                         0 422B A   
.96                         0 421C A   .97                         0 41DD A   
.98                         0 41F2 A   .99                         0 4206 A   
.9A                         0 42F9 A   .9B                         0 42A9 A   
.9C                         0 42A2 A   .9D                         0 429B A   
.9E                         0 4293 A   .9F                         0 42D2 A   
.A                          0 3687 A   .A0                         0 42BD A   
.A1                         0 42E6 A   .A2                         0 435B A   
.A3                         0 4357 A   .A4                         0 4446 A   
.A5                         0 438E A   .A6                         0 447E A   
.A7                         0 447A A   .A8                         0 44D0 A   
.A9                         0 44CC A   .AA                         0 44FA A   
.AB                         0 44F6 A   .AC                         0 4592 A   
.AD                         0 4524 A   .AE                         0 45B6 A   
.AF                         0 46DE A   .B                          0 3687 A   
.B0                         0 46CF A   .B1                         0 46D6 A   
.B2                         0 4693 A   .B3                         0 46DE A   
.B4                         0 4769 A   .B5                         0 475A A   
.B6                         0 4761 A   .B7                         0 4730 A   
.B8                         0 4769 A   .B9                         0 4889 A   
.BA                         0 4878 A   .BB                         0 487F A   
.BC                         0 47D7 A   .BD                         0 4836 A   
.BE                         0 47E0 A   .BF                         0 4878 A   
.C                          0 3687 A   .C0                         0 4889 A   
.C1                         0 493E A   .C2                         0 492F A   
.C3                         0 4936 A   .C4                         0 48C1 A   
.C5                         0 4902 A   .C6                         0 48CA A   
.C7                         0 492F A   .C8                         0 493E A   
.C9                         0 4954 A   .CA                         0 4950 A   
.CB                         0 4960 A   .CC                         0 495C A   
.CD                         0 498A A   .CE                         0 4986 A   
.CF                         0 49C7 A   .D                          0 3687 A   
.D0                         0 49B6 A   .D1                         0 49D8 A   
.D2                         0 49D1 A   .D3                         0 49E9 A   
.D4                         0 49E2 A   .D5                         0 49F8 A   
.D6                         0 49F3 A   .D7                         0 4C6F A   
.D8                         0 4A1F A   .D9                         0 4AA9 A   
.DA                         0 4A74 A   .DB                         0 4A62 A   
.DC                         0 4A50 A   .DD                         0 4A49 A   
.DE                         0 4A42 A   .DF                         0 4C6C A   
.E                          0 3687 A   .E0                         0 4B8E A   
.E1                         0 4AB2 A   .E2                         0 4B8B A   
.E3                         0 4B78 A   .E4                         0 4B7F A   
.E5                         0 4ABD A   .E6                         0 4B1D A   
.E7                         0 4ADB A   .E8                         0 4AD4 A   
.E9                         0 4B78 A   .EA                         0 4B8B A   
.EB                         0 4C6C A   .EC                         0 4C6C A   
.ED                         0 4C59 A   .EE                         0 4C60 A   
.EF                         0 4B99 A   .F                          0 3687 A   
.F0                         0 4BF2 A   .F1                         0 4BB0 A   
.F2                         0 4BA9 A   .F3                         0 4C4D A   
.F4                         0 4C59 A   .F5                         0 4C57 A   
.F6                         0 4C6C A   .F7                         0 5044 A   
.F8                         0 5044 A   .FA                         0 5032 A   
.FB                         0 4CA1 A   .FC                         0 4CA1 A   
.FD                         0 4D33 A   .FE                         0 4CDE A   
.FF                         0 4CCC A   _biosfn_alternate_prtsc     0 6BCC A   
_biosfn_enable_video_refre+ 0 6CA7 A   _biosfn_get_cursor_pos      0 444A A   
_biosfn_get_font_info       0 69F2 A   _biosfn_load_gfx_8_14_char+ 0 69EF A   
_biosfn_load_gfx_8_16_char+ 0 69F1 A   _biosfn_load_gfx_8_8_chars  0 69ED A   
_biosfn_load_gfx_8_8_dd_ch+ 0 69F0 A   _biosfn_load_gfx_user_char+ 0 69EE A   
_biosfn_load_text_8_14_pat  0 6827 A   _biosfn_load_text_8_16_pat  0 695C A   
_biosfn_load_text_8_8_pat   0 68BE A   _biosfn_load_text_user_pat  0 678B A   
_biosfn_perform_gray_scale+ 0 64E4 A   _biosfn_read_char_attr      0 5048 A   
_biosfn_read_pixel          0 5C8C A   _biosfn_read_state_info     0 6DB4 A   
_biosfn_read_video_state_s+ 0 6F33 A   _biosfn_read_video_state_s+ 0 6EEC A   
_biosfn_restore_video_stat+ 0 7521 A   _biosfn_save_video_state    0 6F57 A   
_biosfn_scroll              0 4942 A   _biosfn_set_active_page     0 44BF A   
_biosfn_set_cursor_pos      0 434A A   _biosfn_set_cursor_shape    0 422F A   
_biosfn_set_video_mode      0 3B97 A   _biosfn_switch_video_inter+ 0 6CA6 A   
_biosfn_write_char_attr     0 558D A   _biosfn_write_char_only     0 5782 A   
_biosfn_write_pixel         0 59F0 A   _biosfn_write_string        0 6CA8 A   
_biosfn_write_teletype      0 5E94 A   _dac_regs                   0 028D A   
_dispi_get_max_bpp          0 916D A   _dispi_get_max_xres         0 914B A   
_dispi_set_bank             0 91AD A   _dispi_set_bank_farcall     0 91CB A   
_dispi_set_bpp              0 9114 A   _dispi_set_enable           0 918F A   
_dispi_set_xres             0 90DF A   _dispi_set_yres             0 90F6 A   
_display_info               0 3617 A   _display_splash_screen      0 3616 A   
_display_string             0 3635 A   _fail                       0 9CBE A   
_find_vga_entry             0 7AFF A   _get_SS                     0 7C77 A E 
_get_font_access            0 65EB A   _inb                        0 7C41 A E 
_int10_func                 0 365C A   _inw                        0 7C4C A E 
_line_to_vpti               0 027D A   _memcpyb                    0 7B8B A   
_memcpyw                    0 7BBB A   _memsetb                    0 7B41 A   
_memsetw                    0 7B66 A   _mode_info_find_mode        0 9361 A   
_mode_info_list             0 7E11 A   _no_vbebios_info_string     0 8F5B A   
_outb                       0 7C57 A E _outw                       0 7C67 A E 
_palette0                   0 0A11 A   _palette1                   0 0AD1 A   
_palette2                   0 0B91 A   _palette3                   0 0C51 A   
_pci_get_lfb_addr           0 7DB7 A   _printf                     0 7C7A A E 
_read_byte                  0 7BEB A   _read_word                  0 7BFE A   
_release_font_access        0 660E A   _set_scan_lines             0 6642 A   
_static_functionality       0 0F51 A   _vbe_biosfn_read_video_sta+ 0 991A A E 
_vbe_biosfn_restore_video_+ 0 99B4 A E _vbe_biosfn_return_control+ 0 9439 A E 
_vbe_biosfn_return_mode_in+ 0 9691 A E _vbe_biosfn_save_restore_s+ 0 9AE1 A E 
_vbe_biosfn_save_video_sta+ 0 9922 A E _vbe_biosfn_set_get_palett+ 0 9CA8 A E 
_vbe_biosfn_set_mode        0 97AD A E _vbe_has_vbe_display        0 93C2 A   
_vbebios_copyright          0 8E89 A   _vbebios_info_string        0 8F35 A   
_vbebios_product_name       0 8EE7 A   _vbebios_product_revision   0 8F00 A   
_vbebios_vendor_name        0 8ECF A   _vga_compat_setup           0 928A A   
_vga_modes                  0 01FD A   _vgafont14                  0 1761 A   
_vgafont14alt               0 3561 A   _vgafont16                  0 2561 A   
_vgafont16alt               0 3562 A   _vgafont8                   0 0F61 A   
_vgamem_copy_cga            0 477B A   _vgamem_copy_pl4            0 462E A   
_vgamem_fill_cga            0 488D A   _vgamem_fill_pl4            0 46F0 A   
_video_param_table          0 0291 A   _video_save_pointer_table   0 35FA A   
_write_byte                 0 7C11 A   _write_gfx_char_cga         0 52B6 A   
_write_gfx_char_lin         0 54B9 A   _write_gfx_char_pl4         0 5143 A   
_write_word                 0 7C29 A   biosfn_enable_cursor_emula+ 0 6C84 A   
biosfn_enable_default_pale+ 0 6C20 A   biosfn_enable_grayscale_su+ 0 6C60 A   
biosfn_enable_video_addres+ 0 6C42 A   biosfn_get_all_palette_reg  0 6389 A   
biosfn_get_ega_info         0 6BA9 A   biosfn_get_single_palette_+ 0 6357 A   
biosfn_get_video_mode       0 6254 A   biosfn_group_0B             0 5978 A   
biosfn_group_10             0 627B A   biosfn_group_1A             0 6D81 A   
biosfn_read_all_dac_reg     0 6469 A   biosfn_read_display_code    0 6D8A A   
biosfn_read_overscan_borde+ 0 637B A   biosfn_read_pel_mask        0 649C A   
biosfn_read_single_dac_reg  0 644E A   biosfn_read_video_dac_stat+ 0 64A7 A   
biosfn_select_vert_res      0 6BCD A   biosfn_select_video_dac_co+ 0 640B A   
biosfn_set_all_dac_reg      0 63E3 A   biosfn_set_all_palette_reg  0 6304 A   
biosfn_set_border_color     0 5983 A   biosfn_set_display_code     0 6D9F A   
biosfn_set_overscan_border+ 0 62FC A   biosfn_set_palette          0 59C2 A   
biosfn_set_pel_mask         0 6491 A   biosfn_set_single_dac_reg   0 63CA A   
biosfn_set_single_palette_+ 0 62E2 A   biosfn_set_text_block_spec+ 0 694F A   
biosfn_toggle_intensity     0 6331 A   bit8_clear                  0 92D2 A   
bit9_clear                  0 92D9 A   bpp4_mode                   0 9073 A   
dispi_get_bank              0 91BD A   dispi_get_bpp               0 9132 A   
dispi_get_enable            0 919F A   dispi_get_id                0 90C1 A   
dispi_get_virt_height       0 927C A   dispi_get_virt_width        0 926E A   
dispi_get_x_offset          0 9212 A   dispi_get_y_offset          0 9230 A   
dispi_set_bank_farcall_err+ 0 91FD A   dispi_set_bank_farcall_get  0 91EF A   
dispi_set_id                0 90CF A   dispi_set_virt_width        0 925B A   
dispi_set_x_offset          0 9202 A   dispi_set_y_offset          0 9220 A   
get_bpp_noinc               0 9149 A   get_dac_16_page             0 64D7 A   
get_dac_palette_format      0 9C94 A   get_display_start           0 9C61 A   
get_display_window          0 9BE9 A   get_logical_scan_line_leng+ 0 9C21 A   
get_palette_loop            0 6391 A   idiv_u                      0 663D A   
illegal_window              0 9006 A   init_bios_area              0 35C2 A   
init_vga_card               0 3563 A   int10_end                   0 01FB A   
int10_group_10_unknown      0 62E1 A   int10_normal                0 01ED A   
int10_test_0B               0 014A A   int10_test_1001             0 6281 A   
int10_test_1002             0 6287 A   int10_test_1003             0 628D A   
int10_test_1007             0 6294 A   int10_test_1008             0 629B A   
int10_test_1009             0 62A2 A   int10_test_1010             0 62A9 A   
int10_test_1012             0 62B0 A   int10_test_1013             0 62B7 A   
int10_test_1015             0 62BE A   int10_test_1017             0 62C5 A   
int10_test_1018             0 62CC A   int10_test_1019             0 62D3 A   
int10_test_101A             0 62DA A   int10_test_101B             0 01A3 A   
int10_test_1103             0 0155 A   int10_test_12               0 0160 A   
int10_test_1A               0 013F A   int10_test_4F               0 01B2 A   
int10_test_BL30             0 0170 A   int10_test_BL31             0 017B A   
int10_test_BL32             0 0185 A   int10_test_BL33             0 018F A   
int10_test_BL34             0 0199 A   int10_test_vbe_05           0 01C0 A   
int10_test_vbe_06           0 01C9 A   int10_test_vbe_07           0 01D2 A   
int10_test_vbe_08           0 01DB A   int10_test_vbe_0A           0 01E4 A   
lmulul                      0 9420 A   memcpyb_end                 0 7BB3 A   
memcpyw_end                 0 7BE3 A   memsetb_end                 0 7B60 A   
memsetw_end                 0 7B85 A   mode_ega_color              0 6BC9 A   
msg_vbe_init                0 8F7F A   msg_vga_init                0 357F A   
no_4bpp_1                   0 9C19 A   no_4bpp_2                   0 9C36 A   
no_actl_reg1                0 62FB A   no_actl_reg2                0 637A A   
no_vbe_flag                 0 9415 A   no_vbe_interface            0 93F9 A   
no_vbe_mode                 0 990C A   pci_get_lfb_addr_3          0 7DCA A   
pci_get_lfb_addr_4          0 7DE0 A   pci_get_lfb_addr_5          0 7DDC A   
pci_get_lfb_addr_6          0 7DF0 A   pci_read_reg                0 7DF8 A   
read_dac_loop               0 647A A   set_actl_normal             0 6447 A   
set_cga_palette_loop        0 59CF A   set_dac_16_page             0 6441 A   
set_dac_loop                0 63F4 A   set_dac_mode                0 9C91 A   
set_dac_page                0 642E A   set_dac_palette_format      0 9C7C A   
set_display_start           0 9C53 A   set_display_window          0 9BD9 A   
set_intensity_loop          0 59A1 A   set_logical_scan_line_byte+ 0 9C08 A   
set_logical_scan_line_pixe+ 0 9C1E A   set_low_border              0 599B A   
set_normal_dac              0 9C8E A   set_palette_loop            0 6313 A   
set_retcode                 0 6C19 A   set_vert_res                0 6C0F A   
set_width_svga              0 924C A   set_xy_regs                 0 907F A   
vbe_03_ok                   0 9915 A   vbe_05_failed               0 9BF2 A   
vbe_08_ok                   0 9CA0 A   vbe_08_unsupported          0 9CA4 A   
vbe_biosfn_display_window_+ 0 9BC9 A   vbe_biosfn_return_current_+ 0 98F5 A   
vbe_biosfn_return_protecte+ 0 9CA9 A   vbe_biosfn_set_get_dac_pal+ 0 9C71 A   
vbe_biosfn_set_get_display+ 0 9C43 A   vbe_biosfn_set_get_logical+ 0 9BF6 A   
vbe_display_info            0 9403 A   vbe_init                    0 93D5 A   
vert_res_200                0 6C05 A   vert_res_350                0 6BFB A   
vert_res_400                0 6BEF A   vesa_pm_end                 0 90C1 A   
vesa_pm_io_ports_table      0 8FC8 A   vesa_pm_set_display_start   0 900B A   
vesa_pm_set_display_start1  0 901A A   vesa_pm_set_display_window+ 0 8FDF A   
vesa_pm_set_window          0 8FD4 A   vesa_pm_start               0 8FC0 A   
vesa_pm_unimplemented       0 90BC A   vga_compat_end              0 935F A   
vga_set_virt_width          0 923E A   vgabios_copyright           0 0052 A   
vgabios_date                0 0044 A   vgabios_end                 0 9CD4 A   
vgabios_entry_point         0 0003 A   vgabios_init_func           0 0109 A   
vgabios_int10_handler       0 0133 A   vgabios_license             0 007E A   
vgabios_name                0 0022 A   vgabios_start               0 0000 A   
vgabios_version             0 0038 A   vgabios_website             0 00B3 A   

00000 errors
00000 warnings
