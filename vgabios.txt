00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios_.c"
00003                                           ! 1 typedef unsigned char Bit8u;
00004                                           !BCC_EOS
00005                                           ! 2 typedef unsigned short Bit16u;
00006                                           !BCC_EOS
00007                                           ! 3 typedef unsigned long Bit32u;
00008                                           !BCC_EOS
00009                                           ! 4 typedef unsigned short Boolean;
00010                                           !BCC_EOS
00011                                           ! 5 static Bit8u read_byte();
00012                                           !BCC_EOS
00013                                           ! 6 static Bit16u read_word();
00014                                           !BCC_EOS
00015                                           ! 7 static void write_byte();
00016                                           !BCC_EOS
00017                                           ! 8 static void write_word();
00018                                           !BCC_EOS
00019                                           ! 9 static Bit8u inb();
00020                                           !BCC_EOS
00021                                           ! 10 static Bit16u inw();
00022                                           !BCC_EOS
00023                                           ! 11 static void outb();
00024                                           !BCC_EOS
00025                                           ! 12 static void outw();
00026                                           !BCC_EOS
00027                                           ! 13 static Bit16u get_SS();
00028                                           !BCC_EOS
00029                                           ! 14 static void printf();
00030                                           !BCC_EOS
00031                                           ! 15 static void unimplemented();
00032                                           !BCC_EOS
00033                                           ! 16 static void unknown();
00034                                           !BCC_EOS
00035                                           ! 17 static Bit8u find_vga_entry();
00036                                           !BCC_EOS
00037                                           ! 18 static void memsetb();
00038                                           !BCC_EOS
00039                                           ! 19 static void memsetw();
00040                                           !BCC_EOS
00041                                           ! 20 static void memcpyb();
00042                                           !BCC_EOS
00043                                           ! 21 static void memcpyw();
00044                                           !BCC_EOS
00045                                           ! 22 static void biosfn_set_video_mode();
00046                                           !BCC_EOS
00047                                           ! 23 static void biosfn_set_cursor_shape();
00048                                           !BCC_EOS
00049                                           ! 24 static void biosfn_set_cursor_pos();
00050                                           !BCC_EOS
00051                                           ! 25 static void biosfn_get_cursor_pos();
00052                                           !BCC_EOS
00053                                           ! 26 static void biosfn_set_active_page();
00054                                           !BCC_EOS
00055                                           ! 27 static void biosfn_scroll();
00056                                           !BCC_EOS
00057                                           ! 28 static void biosfn_read_char_attr();
00058                                           !BCC_EOS
00059                                           ! 29 static void biosfn_write_char_attr();
00060                                           !BCC_EOS
00061                                           ! 30 static void biosfn_write_char_only();
00062                                           !BCC_EOS
00063                                           ! 31 static void biosfn_write_pixel();
00064                                           !BCC_EOS
00065                                           ! 32 static void biosfn_read_pixel();
00066                                           !BCC_EOS
00067                                           ! 33 static void biosfn_write_teletype();
00068                                           !BCC_EOS
00069                                           ! 34 static void biosfn_perform_gray_scale_summing();
00070                                           !BCC_EOS
00071                                           ! 35 static void biosfn_load_text_user_pat();
00072                                           !BCC_EOS
00073                                           ! 36 static void biosfn_load_text_8_14_pat();
00074                                           !BCC_EOS
00075                                           ! 37 static void biosfn_load_text_8_8_pat();
00076                                           !BCC_EOS
00077                                           ! 38 static void biosfn_load_text_8_16_pat();
00078                                           !BCC_EOS
00079                                           ! 39 static void biosfn_load_gfx_8_8_chars();
00080                                           !BCC_EOS
00081                                           ! 40 static void biosfn_load_gfx_user_chars();
00082                                           !BCC_EOS
00083                                           ! 41 static void biosfn_load_gfx_8_14_chars();
00084                                           !BCC_EOS
00085                                           ! 42 static void biosfn_load_gfx_8_8_dd_chars();
00086                                           !BCC_EOS
00087                                           ! 43 static void biosfn_load_gfx_8_16_chars();
00088                                           !BCC_EOS
00089                                           ! 44 static void biosfn_get_font_info();
00090                                           !BCC_EOS
00091                                           ! 45 static void biosfn_alternate_prtsc();
00092                                           !BCC_EOS
00093                                           ! 46 static void biosfn_switch_video_interface();
00094                                           !BCC_EOS
00095                                           ! 47 static void biosfn_enable_video_refresh_control();
00096                                           !BCC_EOS
00097                                           ! 48 static void biosfn_write_string();
00098                                           !BCC_EOS
00099                                           ! 49 static void biosfn_read_state_info();
00100                                           !BCC_EOS
00101                                           ! 50 static void biosfn_read_video_state_size();
00102                                           !BCC_EOS
00103                                           ! 51 static Bit16u biosfn_save_video_state();
00104                                           !BCC_EOS
00105                                           ! 52 static Bit16u biosfn_restore_video_state();
00106                                           !BCC_EOS
00107                                           ! 53 extern Bit8u video_save_pointer_table[];
00108                                           !BCC_EOS
00109                                           ! 54 #asm
00110                                           !BCC_ASM
00111                                           MACRO SET_INT_VECTOR
00112                                             push ds
00113                                             xor ax, ax
00114                                             mov ds, ax
00115                                             mov ax, ?3
00116                                             mov ?1*4, ax
00117                                             mov ax, ?2
00118                                             mov ?1*4+2, ax
00119                                             pop ds
00120                                           MEND
00121                                           ! 65 endasm
00122                                           !BCC_ENDASM
00123                                           ! 66 #asm
00124                                           !BCC_ASM
00125                                           
00126 0000                                      .rom
00127 0000                                      .org 0
00128                                           use16 8086
00129                       00000000            vgabios_start:
00130 0000                        55            .byte 0x55, 0xaa
00131 0002                        40            .byte 0x40
00132                       00000003            vgabios_entry_point:
00133 0003           E9         0103              jmp vgabios_init_func
00134 001E                                      .org 0x1e
00135 001E                        49            .ascii "IBM"
00136 0021                        00            .byte 0x00
00137                       00000022            vgabios_name:
00138 0022                        50            .ascii "Plex86/Bochs VGABios"
00139 0036                        20            .ascii " "
00140 0037                        00            .byte 0x00
00141                       00000038            vgabios_version:
00142 0038                        63            .ascii "current-cvs"
00143 0043                        20            .ascii " "
00144                       00000044            vgabios_date:
00145 0044                        31            .ascii "15 Jun 2023"
00146 004F                        0A            .byte 0x0a,0x0d
00147 0051                        00            .byte 0x00
00148                       00000052            vgabios_copyright:
00149 0052                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00150 007B                        0A            .byte 0x0a,0x0d
00151 007D                        00            .byte 0x00
00152                       0000007E            vgabios_license:
00153 007E                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00154 00AE                        0A            .byte 0x0a,0x0d
00155 00B0                        0A            .byte 0x0a,0x0d
00156 00B2                        00            .byte 0x00
00157                       000000B3            vgabios_website:
00158 00B3                        50            .ascii "Please visit :"
00159 00C1                        0A            .byte 0x0a,0x0d
00160                                           ;;.ascii " . http://www.plex86.org"
00161                                           ;;.byte 0x0a,0x0d
00162 00C3                        20            .ascii " . http://bochs.sourceforge.net"
00163 00E2                        0A            .byte 0x0a,0x0d
00164 00E4                        20            .ascii " . http://www.nongnu.org/vgabios"
00165 0104                        0A            .byte 0x0a,0x0d
00166 0106                        0A            .byte 0x0a,0x0d
00167 0108                        00            .byte 0x00
00168                                           ;; ============================================================================================
00169                                           ;;
00170                                           ;; Init Entry point
00171                                           ;;
00172                                           ;; ============================================================================================
00173                       00000109            vgabios_init_func:
00174                                           ;; init vga card
00175 0109           E8         3420              call init_vga_card
00176                                           ;; init basic bios vars
00177 010C           E8         347C              call init_bios_area
00178                                           ;; set int10 vect
00179                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   010F           1E                           push ds
 +a   0110           31C0                         xor ax, ax
 +a   0112           8ED8                         mov ds, ax
 +a   0114           B8                   012D    mov ax,  #vgabios_int10_handler
 +a   0117           A3         0040              mov 0x10*4, ax
 +a   011A           B8                   C000    mov ax,  #0xC000
 +a   011D           A3         0042              mov 0x10*4+2, ax
 +a   0120           1F                           pop ds
00180                                           ;; display splash screen
00181 0121           E8         34BB              call _display_splash_screen
00182                                           ;; init video mode and clear the screen
00183 0124           B8                   0003    mov ax,#0x0003
00184 0127           CD                     10    int #0x10
00185                                           ;; show info
00186 0129           E8         34B4              call _display_info
00187 012C           CB                           retf
00188                                           ! 130 endasm
00189                                           !BCC_ENDASM
00190                                           ! 131 #asm
00191                                           !BCC_ASM
00192                       0000012D            vgabios_int10_handler:
00193 012D           9C                           pushf
00194 012E           80FC                   0F    cmp ah, #0x0f
00195 0131           75           06              jne int10_test_1A
00196 0133           E8         6059              call biosfn_get_video_mode
00197 0136           E9         008B              jmp int10_end
00198                       00000139            int10_test_1A:
00199 0139           80FC                   1A    cmp ah, #0x1a
00200 013C           75           06              jne int10_test_0B
00201 013E           E8         6B9B              call biosfn_group_1A
00202 0141           E9         0080              jmp int10_end
00203                       00000144            int10_test_0B:
00204 0144           80FC                   0B    cmp ah, #0x0b
00205 0147           75           05              jne int10_test_1103
00206 0149           E8         5758              call biosfn_group_0B
00207 014C           EB           76              jmp int10_end
00208                       0000014E            int10_test_1103:
00209 014E           3D                   1103    cmp ax, #0x1103
00210 0151           75           05              jne int10_test_12
00211 0153           E8         6751              call biosfn_set_text_block_specifier
00212 0156           EB           6C              jmp int10_end
00213                       00000158            int10_test_12:
00214 0158           80FC                   12    cmp ah, #0x12
00215 015B           75           3C              jne int10_test_101B
00216 015D           80FB                   10    cmp bl, #0x10
00217 0160           75           05              jne int10_test_BL30
00218 0162           E8         699C              call biosfn_get_ega_info
00219 0165           EB           5D              jmp int10_end
00220                       00000167            int10_test_BL30:
00221 0167           80FB                   30    cmp bl, #0x30
00222 016A           75           05              jne int10_test_BL31
00223 016C           E8         69B6              call biosfn_select_vert_res
00224 016F           EB           53              jmp int10_end
00225                       00000171            int10_test_BL31:
00226 0171           80FB                   31    cmp bl, #0x31
00227 0174           75           05              jne int10_test_BL32
00228 0176           E8         69FF              call biosfn_enable_default_palette_loading
00229 0179           EB           49              jmp int10_end
00230                       0000017B            int10_test_BL32:
00231 017B           80FB                   32    cmp bl, #0x32
00232 017E           75           05              jne int10_test_BL33
00233 0180           E8         6A1A              call biosfn_enable_video_addressing
00234 0183           EB           3F              jmp int10_end
00235                       00000185            int10_test_BL33:
00236 0185           80FB                   33    cmp bl, #0x33
00237 0188           75           05              jne int10_test_BL34
00238 018A           E8         6A2E              call biosfn_enable_grayscale_summing
00239 018D           EB           35              jmp int10_end
00240                       0000018F            int10_test_BL34:
00241 018F           80FB                   34    cmp bl, #0x34
00242 0192           75           14              jne int10_normal
00243 0194           E8         6A48              call biosfn_enable_cursor_emulation
00244 0197           EB           2B              jmp int10_end
00245                       00000199            int10_test_101B:
00246 0199           3D                   101B    cmp ax, #0x101b
00247 019C           74           0A              je int10_normal
00248 019E           80FC                   10    cmp ah, #0x10
00249 01A1           75           05              jne int10_normal
00250 01A3           E8         6010              call biosfn_group_10
00251 01A6           EB           1C              jmp int10_end
00252                       000001A8            int10_normal:
00253 01A8           06                           push es
00254 01A9           1E                           push ds
00255                                             ;pusha
00256 01AA           50                           push ax
00257 01AB           51                           push cx
00258 01AC           52                           push dx
00259 01AD           53                           push bx
00260 01AE           54                           push sp ; Should be old SP. But think we are okey.
00261 01AF           55                           push bp
00262 01B0           56                           push si
00263 01B1           57                           push di
00264                                           ;; We have to set ds to access the right data segment
00265 01B2           BB                   C000    mov bx, #0xc000
00266 01B5           8EDB                         mov ds, bx
00267 01B7           E8         346B              call _int10_func
00268                                             ;popa
00269 01BA           5F                           pop di
00270 01BB           5E                           pop si
00271 01BC           5D                           pop bp
00272 01BD           5B                           pop bx ; Should be old SP. Just discard it.
00273 01BE           5B                           pop bx
00274 01BF           5A                           pop dx
00275 01C0           59                           pop cx
00276 01C1           58                           pop ax
00277 01C2           1F                           pop ds
00278 01C3           07                           pop es
00279                       000001C4            int10_end:
00280 01C4           9D                           popf
00281 01C5           CF                           iret
00282                                           ! 222 endasm
00283                                           !BCC_ENDASM
00284                                           ! 223 typedef struct
00285                                           ! 224 {Bit8u svgamode;
00286                                           !BCC_EOS
00287                                           ! 225  Bit8u class;
00288                                           !BCC_EOS
00289                                           ! 226  Bit8u memmodel;
00290                                           !BCC_EOS
00291                                           ! 227  Bit8u pixbits;
00292                                           !BCC_EOS
00293                                           ! 228  Bit16u sstart;
00294                                           !BCC_EOS
00295                                           ! 229  Bit8u pelmask;
00296                                           !BCC_EOS
00297                                           ! 230  Bit8u dacmodel;
00298                                           !BCC_EOS
00299                                           ! 231 } VGAMODES;
00300                                           !BCC_EOS
00301                                           ! 232 static VGAMODES vga_modes[15 +1]=
00302                                           ! 233 {
00303                                           
00304                       000001C6            _vga_modes:
00305                                           ! 234  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00306 01C6                        00            .byte	0
00307 01C7                        00            .byte	0
00308 01C8                        00            .byte	0
00309 01C9                        04            .byte	4
00310 01CA                      B800            .word	$B800
00311 01CC                        FF            .byte	$FF
00312 01CD                        02            .byte	2
00313                                           ! 235  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00314 01CE                        01            .byte	1
00315 01CF                        00            .byte	0
00316 01D0                        00            .byte	0
00317 01D1                        04            .byte	4
00318 01D2                      B800            .word	$B800
00319 01D4                        FF            .byte	$FF
00320 01D5                        02            .byte	2
00321                                           ! 236  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00322 01D6                        02            .byte	2
00323 01D7                        00            .byte	0
00324 01D8                        00            .byte	0
00325 01D9                        04            .byte	4
00326 01DA                      B800            .word	$B800
00327 01DC                        FF            .byte	$FF
00328 01DD                        02            .byte	2
00329                                           ! 237  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00330 01DE                        03            .byte	3
00331 01DF                        00            .byte	0
00332 01E0                        00            .byte	0
00333 01E1                        04            .byte	4
00334 01E2                      B800            .word	$B800
00335 01E4                        FF            .byte	$FF
00336 01E5                        02            .byte	2
00337                                           ! 238  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00338 01E6                        04            .byte	4
00339 01E7                        01            .byte	1
00340 01E8                        02            .byte	2
00341 01E9                        02            .byte	2
00342 01EA                      B800            .word	$B800
00343 01EC                        FF            .byte	$FF
00344 01ED                        01            .byte	1
00345                                           ! 239  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00346 01EE                        05            .byte	5
00347 01EF                        01            .byte	1
00348 01F0                        02            .byte	2
00349 01F1                        02            .byte	2
00350 01F2                      B800            .word	$B800
00351 01F4                        FF            .byte	$FF
00352 01F5                        01            .byte	1
00353                                           ! 240  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00354 01F6                        06            .byte	6
00355 01F7                        01            .byte	1
00356 01F8                        02            .byte	2
00357 01F9                        01            .byte	1
00358 01FA                      B800            .word	$B800
00359 01FC                        FF            .byte	$FF
00360 01FD                        01            .byte	1
00361                                           ! 241  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00362 01FE                        07            .byte	7
00363 01FF                        00            .byte	0
00364 0200                        01            .byte	1
00365 0201                        04            .byte	4
00366 0202                      B000            .word	$B000
00367 0204                        FF            .byte	$FF
00368 0205                        00            .byte	0
00369                                           ! 242  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00370 0206                        0D            .byte	$D
00371 0207                        01            .byte	1
00372 0208                        04            .byte	4
00373 0209                        04            .byte	4
00374 020A                      A000            .word	$A000
00375 020C                        FF            .byte	$FF
00376 020D                        01            .byte	1
00377                                           ! 243  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00378 020E                        0E            .byte	$E
00379 020F                        01            .byte	1
00380 0210                        04            .byte	4
00381 0211                        04            .byte	4
00382 0212                      A000            .word	$A000
00383 0214                        FF            .byte	$FF
00384 0215                        01            .byte	1
00385                                           ! 244  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00386 0216                        0F            .byte	$F
00387 0217                        01            .byte	1
00388 0218                        03            .byte	3
00389 0219                        01            .byte	1
00390 021A                      A000            .word	$A000
00391 021C                        FF            .byte	$FF
00392 021D                        00            .byte	0
00393                                           ! 245  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00394 021E                        10            .byte	$10
00395 021F                        01            .byte	1
00396 0220                        04            .byte	4
00397 0221                        04            .byte	4
00398 0222                      A000            .word	$A000
00399 0224                        FF            .byte	$FF
00400 0225                        02            .byte	2
00401                                           ! 246  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00402 0226                        11            .byte	$11
00403 0227                        01            .byte	1
00404 0228                        03            .byte	3
00405 0229                        01            .byte	1
00406 022A                      A000            .word	$A000
00407 022C                        FF            .byte	$FF
00408 022D                        02            .byte	2
00409                                           ! 247  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00410 022E                        12            .byte	$12
00411 022F                        01            .byte	1
00412 0230                        04            .byte	4
00413 0231                        04            .byte	4
00414 0232                      A000            .word	$A000
00415 0234                        FF            .byte	$FF
00416 0235                        02            .byte	2
00417                                           ! 248  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00418 0236                        13            .byte	$13
00419 0237                        01            .byte	1
00420 0238                        05            .byte	5
00421 0239                        08            .byte	8
00422 023A                      A000            .word	$A000
00423 023C                        FF            .byte	$FF
00424 023D                        03            .byte	3
00425                                           ! 249  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00426 023E                        6A            .byte	$6A
00427 023F                        01            .byte	1
00428 0240                        04            .byte	4
00429 0241                        04            .byte	4
00430 0242                      A000            .word	$A000
00431 0244                        FF            .byte	$FF
00432 0245                        02            .byte	2
00433                                           ! 250 };
00434                                           !BCC_EOS
00435                                           ! 251 static Bit8u line_to_vpti[15 +1]={
00436                       00000246            _line_to_vpti:
00437                                           ! 252     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00438 0246                        17            .byte	$17
00439 0247                        17            .byte	$17
00440 0248                        18            .byte	$18
00441 0249                        18            .byte	$18
00442 024A                        04            .byte	4
00443 024B                        05            .byte	5
00444 024C                        06            .byte	6
00445 024D                        07            .byte	7
00446                                           ! 253     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00447 024E                        0D            .byte	$D
00448 024F                        0E            .byte	$E
00449 0250                        11            .byte	$11
00450 0251                        12            .byte	$12
00451 0252                        1A            .byte	$1A
00452 0253                        1B            .byte	$1B
00453 0254                        1C            .byte	$1C
00454 0255                        1D            .byte	$1D
00455                                           ! 254 };
00456                                           !BCC_EOS
00457                                           ! 255 static Bit8u dac_regs[3 +1]=
00458                                           ! 256 {0x3f,0x3f,0x3f,0xff};
00459                       00000256            _dac_regs:
00460 0256                        3F            .byte	$3F
00461 0257                        3F            .byte	$3F
00462 0258                        3F            .byte	$3F
00463 0259                        FF            .byte	$FF
00464                                           !BCC_EOS
00465                                           ! 257 typedef struct {
00466                                           ! 258     Bit8u twidth;
00467                                           !BCC_EOS
00468                                           ! 259     Bit8u theightm1;
00469                                           !BCC_EOS
00470                                           ! 260     Bit8u cheight;
00471                                           !BCC_EOS
00472                                           ! 261     Bit8u sleng
00473                                           ! 261 th_l;
00474                                           !BCC_EOS
00475                                           ! 262     Bit8u slength_h;
00476                                           !BCC_EOS
00477                                           ! 263     Bit8u sequ_regs[4];
00478                                           !BCC_EOS
00479                                           ! 264     Bit8u miscreg;
00480                                           !BCC_EOS
00481                                           ! 265     Bit8u crtc_regs[25];
00482                                           !BCC_EOS
00483                                           ! 266     Bit8u actl_regs[20];
00484                                           !BCC_EOS
00485                                           ! 267     Bit8u grdc_regs[9];
00486                                           !BCC_EOS
00487                                           ! 268 } VideoParamTableEntry;
00488                                           !BCC_EOS
00489                                           ! 269 static VideoParamTableEntry video_param_table[30] = {
00490                       0000025A            _video_param_table:
00491                                           ! 270 {
00492                                           ! 271  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00493 025A                        00            .byte	0
00494 025B                        00            .byte	0
00495 025C                        00            .byte	0
00496 025D                        00            .byte	0
00497 025E                        00            .byte	0
00498 025F                        00            .byte	0
00499 0260                        00            .byte	0
00500 0261                        00            .byte	0
00501                                           ! 272  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00502 0262                        00            .byte	0
00503 0263                        00            .byte	0
00504 0264                        00            .byte	0
00505 0265                        00            .byte	0
00506 0266                        00            .byte	0
00507 0267                        00            .byte	0
00508 0268                        00            .byte	0
00509 0269                        00            .byte	0
00510                                           ! 273  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00511 026A                        00            .byte	0
00512 026B                        00            .byte	0
00513 026C                        00            .byte	0
00514 026D                        00            .byte	0
00515 026E                        00            .byte	0
00516 026F                        00            .byte	0
00517 0270                        00            .byte	0
00518 0271                        00            .byte	0
00519                                           ! 274  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00520 0272                        00            .byte	0
00521 0273                        00            .byte	0
00522 0274                        00            .byte	0
00523 0275                        00            .byte	0
00524 0276                        00            .byte	0
00525 0277                        00            .byte	0
00526 0278                        00            .byte	0
00527 0279                        00            .byte	0
00528                                           ! 275  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00529 027A                        00            .byte	0
00530 027B                        00            .byte	0
00531 027C                        00            .byte	0
00532 027D                        00            .byte	0
00533 027E                        00            .byte	0
00534 027F                        00            .byte	0
00535 0280                        00            .byte	0
00536 0281                        00            .byte	0
00537                                           ! 276  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00538 0282                        00            .byte	0
00539 0283                        00            .byte	0
00540 0284                        00            .byte	0
00541 0285                        00            .byte	0
00542 0286                        00            .byte	0
00543 0287                        00            .byte	0
00544 0288                        00            .byte	0
00545 0289                        00            .byte	0
00546                                           ! 277  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00547 028A                        00            .byte	0
00548 028B                        00            .byte	0
00549 028C                        00            .byte	0
00550 028D                        00            .byte	0
00551 028E                        00            .byte	0
00552 028F                        00            .byte	0
00553 0290                        00            .byte	0
00554 0291                        00            .byte	0
00555                                           ! 278  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00556 0292                        00            .byte	0
00557 0293                        00            .byte	0
00558 0294                        00            .byte	0
00559 0295                        00            .byte	0
00560 0296                        00            .byte	0
00561 0297                        00            .byte	0
00562 0298                        00            .byte	0
00563 0299                        00            .byte	0
00564                                           ! 279 },
00565                                           ! 280 {
00566                                           ! 281  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00567 029A                        00            .byte	0
00568 029B                        00            .byte	0
00569 029C                        00            .byte	0
00570 029D                        00            .byte	0
00571 029E                        00            .byte	0
00572 029F                        00            .byte	0
00573 02A0                        00            .byte	0
00574 02A1                        00            .byte	0
00575                                           ! 282  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00576 02A2                        00            .byte	0
00577 02A3                        00            .byte	0
00578 02A4                        00            .byte	0
00579 02A5                        00            .byte	0
00580 02A6                        00            .byte	0
00581 02A7                        00            .byte	0
00582 02A8                        00            .byte	0
00583 02A9                        00            .byte	0
00584                                           ! 283  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00585 02AA                        00            .byte	0
00586 02AB                        00            .byte	0
00587 02AC                        00            .byte	0
00588 02AD                        00            .byte	0
00589 02AE                        00            .byte	0
00590 02AF                        00            .byte	0
00591 02B0                        00            .byte	0
00592 02B1                        00            .byte	0
00593                                           ! 284  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00594 02B2                        00            .byte	0
00595 02B3                        00            .byte	0
00596 02B4                        00            .byte	0
00597 02B5                        00            .byte	0
00598 02B6                        00            .byte	0
00599 02B7                        00            .byte	0
00600 02B8                        00            .byte	0
00601 02B9                        00            .byte	0
00602                                           ! 285  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00603 02BA                        00            .byte	0
00604 02BB                        00            .byte	0
00605 02BC                        00            .byte	0
00606 02BD                        00            .byte	0
00607 02BE                        00            .byte	0
00608 02BF                        00            .byte	0
00609 02C0                        00            .byte	0
00610 02C1                        00            .byte	0
00611                                           ! 286  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00612 02C2                        00            .byte	0
00613 02C3                        00            .byte	0
00614 02C4                        00            .byte	0
00615 02C5                        00            .byte	0
00616 02C6                        00            .byte	0
00617 02C7                        00            .byte	0
00618 02C8                        00            .byte	0
00619 02C9                        00            .byte	0
00620                                           ! 287  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00621 02CA                        00            .byte	0
00622 02CB                        00            .byte	0
00623 02CC                        00            .byte	0
00624 02CD                        00            .byte	0
00625 02CE                        00            .byte	0
00626 02CF                        00            .byte	0
00627 02D0                        00            .byte	0
00628 02D1                        00            .byte	0
00629                                           ! 288  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00630 02D2                        00            .byte	0
00631 02D3                        00            .byte	0
00632 02D4                        00            .byte	0
00633 02D5                        00            .byte	0
00634 02D6                        00            .byte	0
00635 02D7                        00            .byte	0
00636 02D8                        00            .byte	0
00637 02D9                        00            .byte	0
00638                                           ! 289 },
00639                                           ! 290 {
00640                                           ! 291  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00641 02DA                        00            .byte	0
00642 02DB                        00            .byte	0
00643 02DC                        00            .byte	0
00644 02DD                        00            .byte	0
00645 02DE                        00            .byte	0
00646 02DF                        00            .byte	0
00647 02E0                        00            .byte	0
00648 02E1                        00            .byte	0
00649                                           ! 292  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00650 02E2                        00            .byte	0
00651 02E3                        00            .byte	0
00652 02E4                        00            .byte	0
00653 02E5                        00            .byte	0
00654 02E6                        00            .byte	0
00655 02E7                        00            .byte	0
00656 02E8                        00            .byte	0
00657 02E9                        00            .byte	0
00658                                           ! 293  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00659 02EA                        00            .byte	0
00660 02EB                        00            .byte	0
00661 02EC                        00            .byte	0
00662 02ED                        00            .byte	0
00663 02EE                        00            .byte	0
00664 02EF                        00            .byte	0
00665 02F0                        00            .byte	0
00666 02F1                        00            .byte	0
00667                                           ! 294  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00668 02F2                        00            .byte	0
00669 02F3                        00            .byte	0
00670 02F4                        00            .byte	0
00671 02F5                        00            .byte	0
00672 02F6                        00            .byte	0
00673 02F7                        00            .byte	0
00674 02F8                        00            .byte	0
00675 02F9                        00            .byte	0
00676                                           ! 295  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00677 02FA                        00            .byte	0
00678 02FB                        00            .byte	0
00679 02FC                        00            .byte	0
00680 02FD                        00            .byte	0
00681 02FE                        00            .byte	0
00682 02FF                        00            .byte	0
00683 0300                        00            .byte	0
00684 0301                        00            .byte	0
00685                                           ! 296  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00686 0302                        00            .byte	0
00687 0303                        00            .byte	0
00688 0304                        00            .byte	0
00689 0305                        00            .byte	0
00690 0306                        00            .byte	0
00691 0307                        00            .byte	0
00692 0308                        00            .byte	0
00693 0309                        00            .byte	0
00694                                           ! 297  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00695 030A                        00            .byte	0
00696 030B                        00            .byte	0
00697 030C                        00            .byte	0
00698 030D                        00            .byte	0
00699 030E                        00            .byte	0
00700 030F                        00            .byte	0
00701 0310                        00            .byte	0
00702 0311                        00            .byte	0
00703                                           ! 298  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00704 0312                        00            .byte	0
00705 0313                        00            .byte	0
00706 0314                        00            .byte	0
00707 0315                        00            .byte	0
00708 0316                        00            .byte	0
00709 0317                        00            .byte	0
00710 0318                        00            .byte	0
00711 0319                        00            .byte	0
00712                                           ! 299 },
00713                                           ! 300 {
00714                                           ! 301  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00715 031A                        00            .byte	0
00716 031B                        00            .byte	0
00717 031C                        00            .byte	0
00718 031D                        00            .byte	0
00719 031E                        00            .byte	0
00720 031F                        00            .byte	0
00721 0320                        00            .byte	0
00722 0321                        00            .byte	0
00723                                           ! 302  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00724 0322                        00            .byte	0
00725 0323                        00            .byte	0
00726 0324                        00            .byte	0
00727 0325                        00            .byte	0
00728 0326                        00            .byte	0
00729 0327                        00            .byte	0
00730 0328                        00            .byte	0
00731 0329                        00            .byte	0
00732                                           ! 303  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00733 032A                        00            .byte	0
00734 032B                        00            .byte	0
00735 032C                        00            .byte	0
00736 032D                        00            .byte	0
00737 032E                        00            .byte	0
00738 032F                        00            .byte	0
00739 0330                        00            .byte	0
00740 0331                        00            .byte	0
00741                                           ! 304  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00742 0332                        00            .byte	0
00743 0333                        00            .byte	0
00744 0334                        00            .byte	0
00745 0335                        00            .byte	0
00746 0336                        00            .byte	0
00747 0337                        00            .byte	0
00748 0338                        00            .byte	0
00749 0339                        00            .byte	0
00750                                           ! 305  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00751 033A                        00            .byte	0
00752 033B                        00            .byte	0
00753 033C                        00            .byte	0
00754 033D                        00            .byte	0
00755 033E                        00            .byte	0
00756 033F                        00            .byte	0
00757 0340                        00            .byte	0
00758 0341                        00            .byte	0
00759                                           ! 306  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00760 0342                        00            .byte	0
00761 0343                        00            .byte	0
00762 0344                        00            .byte	0
00763 0345                        00            .byte	0
00764 0346                        00            .byte	0
00765 0347                        00            .byte	0
00766 0348                        00            .byte	0
00767 0349                        00            .byte	0
00768                                           ! 307  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00769 034A                        00            .byte	0
00770 034B                        00            .byte	0
00771 034C                        00            .byte	0
00772 034D                        00            .byte	0
00773 034E                        00            .byte	0
00774 034F                        00            .byte	0
00775 0350                        00            .byte	0
00776 0351                        00            .byte	0
00777                                           ! 308  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00778 0352                        00            .byte	0
00779 0353                        00            .byte	0
00780 0354                        00            .byte	0
00781 0355                        00            .byte	0
00782 0356                        00            .byte	0
00783 0357                        00            .byte	0
00784 0358                        00            .byte	0
00785 0359                        00            .byte	0
00786                                           ! 309 },
00787                                           ! 310 {
00788                                           ! 311  40, 24, 8, 0x00, 0x08,
00789 035A                        28            .byte	$28
00790 035B                        18            .byte	$18
00791 035C                        08            .byte	8
00792 035D                        00            .byte	0
00793 035E                        08            .byte	8
00794                                           ! 312  0x09, 0x03, 0x00, 0x02,
00795 035F                        09            .byte	9
00796 0360                        03            .byte	3
00797 0361                        00            .byte	0
00798 0362                        02            .byte	2
00799                                           ! 313  0x63,
00800 0363                        63            .byte	$63
00801                                           ! 314  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00802 0364                        2D            .byte	$2D
00803 0365                        27            .byte	$27
00804 0366                        28            .byte	$28
00805 0367                        90            .byte	$90
00806 0368                        2B            .byte	$2B
00807 0369                        80            .byte	$80
00808 036A                        BF            .byte	$BF
00809 036B                        1F            .byte	$1F
00810                                           ! 315  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00811 036C                        00            .byte	0
00812 036D                        C1            .byte	$C1
00813 036E                        00            .byte	0
00814 036F                        00            .byte	0
00815 0370                        00            .byte	0
00816 0371                        00            .byte	0
00817 0372                        00            .byte	0
00818 0373                        00            .byte	0
00819                                           ! 316  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
00820 0374                        9C            .byte	$9C
00821 0375                        8E            .byte	$8E
00822 0376                        8F            .byte	$8F
00823 0377                        14            .byte	$14
00824 0378                        00            .byte	0
00825 0379                        96            .byte	$96
00826 037A                        B9            .byte	$B9
00827 037B                        A2            .byte	$A2
00828                                           ! 317  0xff,
00829 037C                        FF            .byte	$FF
00830                                           ! 318  0x00, 0x13, 0x15, 0x17, 0
00831 037D                        00            .byte	0
00832 037E                        13            .byte	$13
00833 037F                        15            .byte	$15
00834 0380                        17            .byte	$17
00835                                           ! 318 x02, 0x04, 0x06, 0x07,
00836 0381                        02            .byte	2
00837 0382                        04            .byte	4
00838 0383                        06            .byte	6
00839 0384                        07            .byte	7
00840                                           ! 319  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00841 0385                        10            .byte	$10
00842 0386                        11            .byte	$11
00843 0387                        12            .byte	$12
00844 0388                        13            .byte	$13
00845 0389                        14            .byte	$14
00846 038A                        15            .byte	$15
00847 038B                        16            .byte	$16
00848 038C                        17            .byte	$17
00849                                           ! 320  0x01, 0x00, 0x03, 0x00,
00850 038D                        01            .byte	1
00851 038E                        00            .byte	0
00852 038F                        03            .byte	3
00853 0390                        00            .byte	0
00854                                           ! 321  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00855 0391                        00            .byte	0
00856 0392                        00            .byte	0
00857 0393                        00            .byte	0
00858 0394                        00            .byte	0
00859 0395                        00            .byte	0
00860 0396                        30            .byte	$30
00861 0397                        0F            .byte	$F
00862 0398                        0F            .byte	$F
00863 0399                        FF            .byte	$FF
00864                                           ! 322 },
00865                                           ! 323 {
00866                                           ! 324  40, 24, 8, 0x00, 0x08,
00867 039A                        28            .byte	$28
00868 039B                        18            .byte	$18
00869 039C                        08            .byte	8
00870 039D                        00            .byte	0
00871 039E                        08            .byte	8
00872                                           ! 325  0x09, 0x03, 0x00, 0x02,
00873 039F                        09            .byte	9
00874 03A0                        03            .byte	3
00875 03A1                        00            .byte	0
00876 03A2                        02            .byte	2
00877                                           ! 326  0x63,
00878 03A3                        63            .byte	$63
00879                                           ! 327  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00880 03A4                        2D            .byte	$2D
00881 03A5                        27            .byte	$27
00882 03A6                        28            .byte	$28
00883 03A7                        90            .byte	$90
00884 03A8                        2B            .byte	$2B
00885 03A9                        80            .byte	$80
00886 03AA                        BF            .byte	$BF
00887 03AB                        1F            .byte	$1F
00888                                           ! 328  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00889 03AC                        00            .byte	0
00890 03AD                        C1            .byte	$C1
00891 03AE                        00            .byte	0
00892 03AF                        00            .byte	0
00893 03B0                        00            .byte	0
00894 03B1                        00            .byte	0
00895 03B2                        00            .byte	0
00896 03B3                        00            .byte	0
00897                                           ! 329  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
00898 03B4                        9C            .byte	$9C
00899 03B5                        8E            .byte	$8E
00900 03B6                        8F            .byte	$8F
00901 03B7                        14            .byte	$14
00902 03B8                        00            .byte	0
00903 03B9                        96            .byte	$96
00904 03BA                        B9            .byte	$B9
00905 03BB                        A2            .byte	$A2
00906                                           ! 330  0xff,
00907 03BC                        FF            .byte	$FF
00908                                           ! 331  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00909 03BD                        00            .byte	0
00910 03BE                        13            .byte	$13
00911 03BF                        15            .byte	$15
00912 03C0                        17            .byte	$17
00913 03C1                        02            .byte	2
00914 03C2                        04            .byte	4
00915 03C3                        06            .byte	6
00916 03C4                        07            .byte	7
00917                                           ! 332  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00918 03C5                        10            .byte	$10
00919 03C6                        11            .byte	$11
00920 03C7                        12            .byte	$12
00921 03C8                        13            .byte	$13
00922 03C9                        14            .byte	$14
00923 03CA                        15            .byte	$15
00924 03CB                        16            .byte	$16
00925 03CC                        17            .byte	$17
00926                                           ! 333  0x01, 0x00, 0x03, 0x00,
00927 03CD                        01            .byte	1
00928 03CE                        00            .byte	0
00929 03CF                        03            .byte	3
00930 03D0                        00            .byte	0
00931                                           ! 334  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00932 03D1                        00            .byte	0
00933 03D2                        00            .byte	0
00934 03D3                        00            .byte	0
00935 03D4                        00            .byte	0
00936 03D5                        00            .byte	0
00937 03D6                        30            .byte	$30
00938 03D7                        0F            .byte	$F
00939 03D8                        0F            .byte	$F
00940 03D9                        FF            .byte	$FF
00941                                           ! 335 },
00942                                           ! 336 {
00943                                           ! 337  80, 24, 8, 0x00, 0x10,
00944 03DA                        50            .byte	$50
00945 03DB                        18            .byte	$18
00946 03DC                        08            .byte	8
00947 03DD                        00            .byte	0
00948 03DE                        10            .byte	$10
00949                                           ! 338  0x01, 0x01, 0x00, 0x06,
00950 03DF                        01            .byte	1
00951 03E0                        01            .byte	1
00952 03E1                        00            .byte	0
00953 03E2                        06            .byte	6
00954                                           ! 339  0x63,
00955 03E3                        63            .byte	$63
00956                                           ! 340  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
00957 03E4                        5F            .byte	$5F
00958 03E5                        4F            .byte	$4F
00959 03E6                        50            .byte	$50
00960 03E7                        82            .byte	$82
00961 03E8                        54            .byte	$54
00962 03E9                        80            .byte	$80
00963 03EA                        BF            .byte	$BF
00964 03EB                        1F            .byte	$1F
00965                                           ! 341  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00966 03EC                        00            .byte	0
00967 03ED                        C1            .byte	$C1
00968 03EE                        00            .byte	0
00969 03EF                        00            .byte	0
00970 03F0                        00            .byte	0
00971 03F1                        00            .byte	0
00972 03F2                        00            .byte	0
00973 03F3                        00            .byte	0
00974                                           ! 342  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
00975 03F4                        9C            .byte	$9C
00976 03F5                        8E            .byte	$8E
00977 03F6                        8F            .byte	$8F
00978 03F7                        28            .byte	$28
00979 03F8                        00            .byte	0
00980 03F9                        96            .byte	$96
00981 03FA                        B9            .byte	$B9
00982 03FB                        C2            .byte	$C2
00983                                           ! 343  0xff,
00984 03FC                        FF            .byte	$FF
00985                                           ! 344  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
00986 03FD                        00            .byte	0
00987 03FE                        17            .byte	$17
00988 03FF                        17            .byte	$17
00989 0400                        17            .byte	$17
00990 0401                        17            .byte	$17
00991 0402                        17            .byte	$17
00992 0403                        17            .byte	$17
00993 0404                        17            .byte	$17
00994                                           ! 345  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
00995 0405                        17            .byte	$17
00996 0406                        17            .byte	$17
00997 0407                        17            .byte	$17
00998 0408                        17            .byte	$17
00999 0409                        17            .byte	$17
01000 040A                        17            .byte	$17
01001 040B                        17            .byte	$17
01002 040C                        17            .byte	$17
01003                                           ! 346  0x01, 0x00, 0x01, 0x00,
01004 040D                        01            .byte	1
01005 040E                        00            .byte	0
01006 040F                        01            .byte	1
01007 0410                        00            .byte	0
01008                                           ! 347  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01009 0411                        00            .byte	0
01010 0412                        00            .byte	0
01011 0413                        00            .byte	0
01012 0414                        00            .byte	0
01013 0415                        00            .byte	0
01014 0416                        00            .byte	0
01015 0417                        0D            .byte	$D
01016 0418                        0F            .byte	$F
01017 0419                        FF            .byte	$FF
01018                                           ! 348 },
01019                                           ! 349 {
01020                                           ! 350  80, 24, 16, 0x00, 0x10,
01021 041A                        50            .byte	$50
01022 041B                        18            .byte	$18
01023 041C                        10            .byte	$10
01024 041D                        00            .byte	0
01025 041E                        10            .byte	$10
01026                                           ! 351  0x00, 0x03, 0x00, 0x02,
01027 041F                        00            .byte	0
01028 0420                        03            .byte	3
01029 0421                        00            .byte	0
01030 0422                        02            .byte	2
01031                                           ! 352  0x66,
01032 0423                        66            .byte	$66
01033                                           ! 353  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01034 0424                        5F            .byte	$5F
01035 0425                        4F            .byte	$4F
01036 0426                        50            .byte	$50
01037 0427                        82            .byte	$82
01038 0428                        55            .byte	$55
01039 0429                        81            .byte	$81
01040 042A                        BF            .byte	$BF
01041 042B                        1F            .byte	$1F
01042                                           ! 354  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01043 042C                        00            .byte	0
01044 042D                        4F            .byte	$4F
01045 042E                        0D            .byte	$D
01046 042F                        0E            .byte	$E
01047 0430                        00            .byte	0
01048 0431                        00            .byte	0
01049 0432                        00            .byte	0
01050 0433                        00            .byte	0
01051                                           ! 355  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01052 0434                        9C            .byte	$9C
01053 0435                        8E            .byte	$8E
01054 0436                        8F            .byte	$8F
01055 0437                        28            .byte	$28
01056 0438                        0F            .byte	$F
01057 0439                        96            .byte	$96
01058 043A                        B9            .byte	$B9
01059 043B                        A3            .byte	$A3
01060                                           ! 356  0xff,
01061 043C                        FF            .byte	$FF
01062                                           ! 357  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01063 043D                        00            .byte	0
01064 043E                        08            .byte	8
01065 043F                        08            .byte	8
01066 0440                        08            .byte	8
01067 0441                        08            .byte	8
01068 0442                        08            .byte	8
01069 0443                        08            .byte	8
01070 0444                        08            .byte	8
01071                                           ! 358  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01072 0445                        10            .byte	$10
01073 0446                        18            .byte	$18
01074 0447                        18            .byte	$18
01075 0448                        18            .byte	$18
01076 0449                        18            .byte	$18
01077 044A                        18            .byte	$18
01078 044B                        18            .byte	$18
01079 044C                        18            .byte	$18
01080                                           ! 359  0x0e, 0x00, 0x0f, 0x08,
01081 044D                        0E            .byte	$E
01082 044E                        00            .byte	0
01083 044F                        0F            .byte	$F
01084 0450                        08            .byte	8
01085                                           ! 360  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01086 0451                        00            .byte	0
01087 0452                        00            .byte	0
01088 0453                        00            .byte	0
01089 0454                        00            .byte	0
01090 0455                        00            .byte	0
01091 0456                        10            .byte	$10
01092 0457                        0A            .byte	$A
01093 0458                        0F            .byte	$F
01094 0459                        FF            .byte	$FF
01095                                           ! 361 },
01096                                           ! 362 {
01097                                           ! 363  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01098 045A                        00            .byte	0
01099 045B                        00            .byte	0
01100 045C                        00            .byte	0
01101 045D                        00            .byte	0
01102 045E                        00            .byte	0
01103 045F                        00            .byte	0
01104 0460                        00            .byte	0
01105 0461                        00            .byte	0
01106                                           ! 364  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01107 0462                        00            .byte	0
01108 0463                        00            .byte	0
01109 0464                        00            .byte	0
01110 0465                        00            .byte	0
01111 0466                        00            .byte	0
01112 0467                        00            .byte	0
01113 0468                        00            .byte	0
01114 0469                        00            .byte	0
01115                                           ! 365  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01116 046A                        00            .byte	0
01117 046B                        00            .byte	0
01118 046C                        00            .byte	0
01119 046D                        00            .byte	0
01120 046E                        00            .byte	0
01121 046F                        00            .byte	0
01122 0470                        00            .byte	0
01123 0471                        00            .byte	0
01124                                           ! 366  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01125 0472                        00            .byte	0
01126 0473                        00            .byte	0
01127 0474                        00            .byte	0
01128 0475                        00            .byte	0
01129 0476                        00            .byte	0
01130 0477                        00            .byte	0
01131 0478                        00            .byte	0
01132 0479                        00            .byte	0
01133                                           ! 367  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01134 047A                        00            .byte	0
01135 047B                        00            .byte	0
01136 047C                        00            .byte	0
01137 047D                        00            .byte	0
01138 047E                        00            .byte	0
01139 047F                        00            .byte	0
01140 0480                        00            .byte	0
01141 0481                        00            .byte	0
01142                                           ! 368  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01143 0482                        00            .byte	0
01144 0483                        00            .byte	0
01145 0484                        00            .byte	0
01146 0485                        00            .byte	0
01147 0486                        00            .byte	0
01148 0487                        00            .byte	0
01149 0488                        00            .byte	0
01150 0489                        00            .byte	0
01151                                           ! 369  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01152 048A                        00            .byte	0
01153 048B                        00            .byte	0
01154 048C                        00            .byte	0
01155 048D                        00            .byte	0
01156 048E                        00            .byte	0
01157 048F                        00            .byte	0
01158 0490                        00            .byte	0
01159 0491                        00            .byte	0
01160                                           ! 370  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01161 0492                        00            .byte	0
01162 0493                        00            .byte	0
01163 0494                        00            .byte	0
01164 0495                        00            .byte	0
01165 0496                        00            .byte	0
01166 0497                        00            .byte	0
01167 0498                        00            .byte	0
01168 0499                        00            .byte	0
01169                                           ! 371 },
01170                                           ! 372 {
01171                                           ! 373  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01172 049A                        00            .byte	0
01173 049B                        00            .byte	0
01174 049C                        00            .byte	0
01175 049D                        00            .byte	0
01176 049E                        00            .byte	0
01177 049F                        00            .byte	0
01178 04A0                        00            .byte	0
01179 04A1                        00            .byte	0
01180                                           ! 374  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01181 04A2                        00            .byte	0
01182 04A3                        00            .byte	0
01183 04A4                        00            .byte	0
01184 04A5                        00            .byte	0
01185 04A6                        00            .byte	0
01186 04A7                        00            .byte	0
01187 04A8                        00            .byte	0
01188 04A9                        00            .byte	0
01189                                           ! 375  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01190 04AA                        00            .byte	0
01191 04AB                        00            .byte	0
01192 04AC                        00            .byte	0
01193 04AD                        00            .byte	0
01194 04AE                        00            .byte	0
01195 04AF                        00            .byte	0
01196 04B0                        00            .byte	0
01197 04B1                        00            .byte	0
01198                                           ! 376  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01199 04B2                        00            .byte	0
01200 04B3                        00            .byte	0
01201 04B4                        00            .byte	0
01202 04B5                        00            .byte	0
01203 04B6                        00            .byte	0
01204 04B7                        00            .byte	0
01205 04B8                        00            .byte	0
01206 04B9                        00            .byte	0
01207                                           ! 377  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01208 04BA                        00            .byte	0
01209 04BB                        00            .byte	0
01210 04BC                        00            .byte	0
01211 04BD                        00            .byte	0
01212 04BE                        00            .byte	0
01213 04BF                        00            .byte	0
01214 04C0                        00            .byte	0
01215 04C1                        00            .byte	0
01216                                           ! 378  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01217 04C2                        00            .byte	0
01218 04C3                        00            .byte	0
01219 04C4                        00            .byte	0
01220 04C5                        00            .byte	0
01221 04C6                        00            .byte	0
01222 04C7                        00            .byte	0
01223 04C8                        00            .byte	0
01224 04C9                        00            .byte	0
01225                                           ! 379  0x00, 0x00, 0x00, 0
01226 04CA                        00            .byte	0
01227 04CB                        00            .byte	0
01228 04CC                        00            .byte	0
01229                                           ! 379 x00, 0x00, 0x00, 0x00, 0x00,
01230 04CD                        00            .byte	0
01231 04CE                        00            .byte	0
01232 04CF                        00            .byte	0
01233 04D0                        00            .byte	0
01234 04D1                        00            .byte	0
01235                                           ! 380  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01236 04D2                        00            .byte	0
01237 04D3                        00            .byte	0
01238 04D4                        00            .byte	0
01239 04D5                        00            .byte	0
01240 04D6                        00            .byte	0
01241 04D7                        00            .byte	0
01242 04D8                        00            .byte	0
01243 04D9                        00            .byte	0
01244                                           ! 381 },
01245                                           ! 382 {
01246                                           ! 383  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01247 04DA                        00            .byte	0
01248 04DB                        00            .byte	0
01249 04DC                        00            .byte	0
01250 04DD                        00            .byte	0
01251 04DE                        00            .byte	0
01252 04DF                        00            .byte	0
01253 04E0                        00            .byte	0
01254 04E1                        00            .byte	0
01255                                           ! 384  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01256 04E2                        00            .byte	0
01257 04E3                        00            .byte	0
01258 04E4                        00            .byte	0
01259 04E5                        00            .byte	0
01260 04E6                        00            .byte	0
01261 04E7                        00            .byte	0
01262 04E8                        00            .byte	0
01263 04E9                        00            .byte	0
01264                                           ! 385  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01265 04EA                        00            .byte	0
01266 04EB                        00            .byte	0
01267 04EC                        00            .byte	0
01268 04ED                        00            .byte	0
01269 04EE                        00            .byte	0
01270 04EF                        00            .byte	0
01271 04F0                        00            .byte	0
01272 04F1                        00            .byte	0
01273                                           ! 386  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01274 04F2                        00            .byte	0
01275 04F3                        00            .byte	0
01276 04F4                        00            .byte	0
01277 04F5                        00            .byte	0
01278 04F6                        00            .byte	0
01279 04F7                        00            .byte	0
01280 04F8                        00            .byte	0
01281 04F9                        00            .byte	0
01282                                           ! 387  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01283 04FA                        00            .byte	0
01284 04FB                        00            .byte	0
01285 04FC                        00            .byte	0
01286 04FD                        00            .byte	0
01287 04FE                        00            .byte	0
01288 04FF                        00            .byte	0
01289 0500                        00            .byte	0
01290 0501                        00            .byte	0
01291                                           ! 388  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01292 0502                        00            .byte	0
01293 0503                        00            .byte	0
01294 0504                        00            .byte	0
01295 0505                        00            .byte	0
01296 0506                        00            .byte	0
01297 0507                        00            .byte	0
01298 0508                        00            .byte	0
01299 0509                        00            .byte	0
01300                                           ! 389  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01301 050A                        00            .byte	0
01302 050B                        00            .byte	0
01303 050C                        00            .byte	0
01304 050D                        00            .byte	0
01305 050E                        00            .byte	0
01306 050F                        00            .byte	0
01307 0510                        00            .byte	0
01308 0511                        00            .byte	0
01309                                           ! 390  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01310 0512                        00            .byte	0
01311 0513                        00            .byte	0
01312 0514                        00            .byte	0
01313 0515                        00            .byte	0
01314 0516                        00            .byte	0
01315 0517                        00            .byte	0
01316 0518                        00            .byte	0
01317 0519                        00            .byte	0
01318                                           ! 391 },
01319                                           ! 392 {
01320                                           ! 393  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01321 051A                        00            .byte	0
01322 051B                        00            .byte	0
01323 051C                        00            .byte	0
01324 051D                        00            .byte	0
01325 051E                        00            .byte	0
01326 051F                        00            .byte	0
01327 0520                        00            .byte	0
01328 0521                        00            .byte	0
01329                                           ! 394  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01330 0522                        00            .byte	0
01331 0523                        00            .byte	0
01332 0524                        00            .byte	0
01333 0525                        00            .byte	0
01334 0526                        00            .byte	0
01335 0527                        00            .byte	0
01336 0528                        00            .byte	0
01337 0529                        00            .byte	0
01338                                           ! 395  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01339 052A                        00            .byte	0
01340 052B                        00            .byte	0
01341 052C                        00            .byte	0
01342 052D                        00            .byte	0
01343 052E                        00            .byte	0
01344 052F                        00            .byte	0
01345 0530                        00            .byte	0
01346 0531                        00            .byte	0
01347                                           ! 396  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01348 0532                        00            .byte	0
01349 0533                        00            .byte	0
01350 0534                        00            .byte	0
01351 0535                        00            .byte	0
01352 0536                        00            .byte	0
01353 0537                        00            .byte	0
01354 0538                        00            .byte	0
01355 0539                        00            .byte	0
01356                                           ! 397  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01357 053A                        00            .byte	0
01358 053B                        00            .byte	0
01359 053C                        00            .byte	0
01360 053D                        00            .byte	0
01361 053E                        00            .byte	0
01362 053F                        00            .byte	0
01363 0540                        00            .byte	0
01364 0541                        00            .byte	0
01365                                           ! 398  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01366 0542                        00            .byte	0
01367 0543                        00            .byte	0
01368 0544                        00            .byte	0
01369 0545                        00            .byte	0
01370 0546                        00            .byte	0
01371 0547                        00            .byte	0
01372 0548                        00            .byte	0
01373 0549                        00            .byte	0
01374                                           ! 399  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01375 054A                        00            .byte	0
01376 054B                        00            .byte	0
01377 054C                        00            .byte	0
01378 054D                        00            .byte	0
01379 054E                        00            .byte	0
01380 054F                        00            .byte	0
01381 0550                        00            .byte	0
01382 0551                        00            .byte	0
01383                                           ! 400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01384 0552                        00            .byte	0
01385 0553                        00            .byte	0
01386 0554                        00            .byte	0
01387 0555                        00            .byte	0
01388 0556                        00            .byte	0
01389 0557                        00            .byte	0
01390 0558                        00            .byte	0
01391 0559                        00            .byte	0
01392                                           ! 401 },
01393                                           ! 402 {
01394                                           ! 403  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01395 055A                        00            .byte	0
01396 055B                        00            .byte	0
01397 055C                        00            .byte	0
01398 055D                        00            .byte	0
01399 055E                        00            .byte	0
01400 055F                        00            .byte	0
01401 0560                        00            .byte	0
01402 0561                        00            .byte	0
01403                                           ! 404  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01404 0562                        00            .byte	0
01405 0563                        00            .byte	0
01406 0564                        00            .byte	0
01407 0565                        00            .byte	0
01408 0566                        00            .byte	0
01409 0567                        00            .byte	0
01410 0568                        00            .byte	0
01411 0569                        00            .byte	0
01412                                           ! 405  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01413 056A                        00            .byte	0
01414 056B                        00            .byte	0
01415 056C                        00            .byte	0
01416 056D                        00            .byte	0
01417 056E                        00            .byte	0
01418 056F                        00            .byte	0
01419 0570                        00            .byte	0
01420 0571                        00            .byte	0
01421                                           ! 406  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01422 0572                        00            .byte	0
01423 0573                        00            .byte	0
01424 0574                        00            .byte	0
01425 0575                        00            .byte	0
01426 0576                        00            .byte	0
01427 0577                        00            .byte	0
01428 0578                        00            .byte	0
01429 0579                        00            .byte	0
01430                                           ! 407  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01431 057A                        00            .byte	0
01432 057B                        00            .byte	0
01433 057C                        00            .byte	0
01434 057D                        00            .byte	0
01435 057E                        00            .byte	0
01436 057F                        00            .byte	0
01437 0580                        00            .byte	0
01438 0581                        00            .byte	0
01439                                           ! 408  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01440 0582                        00            .byte	0
01441 0583                        00            .byte	0
01442 0584                        00            .byte	0
01443 0585                        00            .byte	0
01444 0586                        00            .byte	0
01445 0587                        00            .byte	0
01446 0588                        00            .byte	0
01447 0589                        00            .byte	0
01448                                           ! 409  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01449 058A                        00            .byte	0
01450 058B                        00            .byte	0
01451 058C                        00            .byte	0
01452 058D                        00            .byte	0
01453 058E                        00            .byte	0
01454 058F                        00            .byte	0
01455 0590                        00            .byte	0
01456 0591                        00            .byte	0
01457                                           ! 410  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01458 0592                        00            .byte	0
01459 0593                        00            .byte	0
01460 0594                        00            .byte	0
01461 0595                        00            .byte	0
01462 0596                        00            .byte	0
01463 0597                        00            .byte	0
01464 0598                        00            .byte	0
01465 0599                        00            .byte	0
01466                                           ! 411 },
01467                                           ! 412 {
01468                                           ! 413  40, 24, 8, 0x00, 0x20,
01469 059A                        28            .byte	$28
01470 059B                        18            .byte	$18
01471 059C                        08            .byte	8
01472 059D                        00            .byte	0
01473 059E                        20            .byte	$20
01474                                           ! 414  0x09, 0x0f, 0x00, 0x06,
01475 059F                        09            .byte	9
01476 05A0                        0F            .byte	$F
01477 05A1                        00            .byte	0
01478 05A2                        06            .byte	6
01479                                           ! 415  0x63,
01480 05A3                        63            .byte	$63
01481                                           ! 416  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01482 05A4                        2D            .byte	$2D
01483 05A5                        27            .byte	$27
01484 05A6                        28            .byte	$28
01485 05A7                        90            .byte	$90
01486 05A8                        2B            .byte	$2B
01487 05A9                        80            .byte	$80
01488 05AA                        BF            .byte	$BF
01489 05AB                        1F            .byte	$1F
01490                                           ! 417  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01491 05AC                        00            .byte	0
01492 05AD                        C0            .byte	$C0
01493 05AE                        00            .byte	0
01494 05AF                        00            .byte	0
01495 05B0                        00            .byte	0
01496 05B1                        00            .byte	0
01497 05B2                        00            .byte	0
01498 05B3                        00            .byte	0
01499                                           ! 418  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01500 05B4                        9C            .byte	$9C
01501 05B5                        8E            .byte	$8E
01502 05B6                        8F            .byte	$8F
01503 05B7                        14            .byte	$14
01504 05B8                        00            .byte	0
01505 05B9                        96            .byte	$96
01506 05BA                        B9            .byte	$B9
01507 05BB                        E3            .byte	$E3
01508                                           ! 419  0xff,
01509 05BC                        FF            .byte	$FF
01510                                           ! 420  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01511 05BD                        00            .byte	0
01512 05BE                        01            .byte	1
01513 05BF                        02            .byte	2
01514 05C0                        03            .byte	3
01515 05C1                        04            .byte	4
01516 05C2                        05            .byte	5
01517 05C3                        06            .byte	6
01518 05C4                        07            .byte	7
01519                                           ! 421  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01520 05C5                        10            .byte	$10
01521 05C6                        11            .byte	$11
01522 05C7                        12            .byte	$12
01523 05C8                        13            .byte	$13
01524 05C9                        14            .byte	$14
01525 05CA                        15            .byte	$15
01526 05CB                        16            .byte	$16
01527 05CC                        17            .byte	$17
01528                                           ! 422  0x01, 0x00, 0x0f, 0x00,
01529 05CD                        01            .byte	1
01530 05CE                        00            .byte	0
01531 05CF                        0F            .byte	$F
01532 05D0                        00            .byte	0
01533                                           ! 423  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01534 05D1                        00            .byte	0
01535 05D2                        00            .byte	0
01536 05D3                        00            .byte	0
01537 05D4                        00            .byte	0
01538 05D5                        00            .byte	0
01539 05D6                        00            .byte	0
01540 05D7                        05            .byte	5
01541 05D8                        0F            .byte	$F
01542 05D9                        FF            .byte	$FF
01543                                           ! 424 },
01544                                           ! 425 {
01545                                           ! 426  80, 24, 8, 0x00, 0x40,
01546 05DA                        50            .byte	$50
01547 05DB                        18            .byte	$18
01548 05DC                        08            .byte	8
01549 05DD                        00            .byte	0
01550 05DE                        40            .byte	$40
01551                                           ! 427  0x01, 0x0f, 0x00, 0x06,
01552 05DF                        01            .byte	1
01553 05E0                        0F            .byte	$F
01554 05E1                        00            .byte	0
01555 05E2                        06            .byte	6
01556                                           ! 428  0x63,
01557 05E3                        63            .byte	$63
01558                                           ! 429  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01559 05E4                        5F            .byte	$5F
01560 05E5                        4F            .byte	$4F
01561 05E6                        50            .byte	$50
01562 05E7                        82            .byte	$82
01563 05E8                        54            .byte	$54
01564 05E9                        80            .byte	$80
01565 05EA                        BF            .byte	$BF
01566 05EB                        1F            .byte	$1F
01567                                           ! 430  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01568 05EC                        00            .byte	0
01569 05ED                        C0            .byte	$C0
01570 05EE                        00            .byte	0
01571 05EF                        00            .byte	0
01572 05F0                        00            .byte	0
01573 05F1                        00            .byte	0
01574 05F2                        00            .byte	0
01575 05F3                        00            .byte	0
01576                                           ! 431  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01577 05F4                        9C            .byte	$9C
01578 05F5                        8E            .byte	$8E
01579 05F6                        8F            .byte	$8F
01580 05F7                        28            .byte	$28
01581 05F8                        00            .byte	0
01582 05F9                        96            .byte	$96
01583 05FA                        B9            .byte	$B9
01584 05FB                        E3            .byte	$E3
01585                                           ! 432  0xff,
01586 05FC                        FF            .byte	$FF
01587                                           ! 433  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01588 05FD                        00            .byte	0
01589 05FE                        01            .byte	1
01590 05FF                        02            .byte	2
01591 0600                        03            .byte	3
01592 0601                        04            .byte	4
01593 0602                        05            .byte	5
01594 0603                        06            .byte	6
01595 0604                        07            .byte	7
01596                                           ! 434  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01597 0605                        10            .byte	$10
01598 0606                        11            .byte	$11
01599 0607                        12            .byte	$12
01600 0608                        13            .byte	$13
01601 0609                        14            .byte	$14
01602 060A                        15            .byte	$15
01603 060B                        16            .byte	$16
01604 060C                        17            .byte	$17
01605                                           ! 435  0x01, 0x00, 0x0f, 0x00,
01606 060D                        01            .byte	1
01607 060E                        00            .byte	0
01608 060F                        0F            .byte	$F
01609 0610                        00            .byte	0
01610                                           ! 436  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f,
01611 0611                        00            .byte	0
01612 0612                        00            .byte	0
01613 0613                        00            .byte	0
01614 0614                        00            .byte	0
01615 0615                        00            .byte	0
01616 0616                        00            .byte	0
01617 0617                        05            .byte	5
01618                                           ! 436  0xff,
01619 0618                        0F            .byte	$F
01620 0619                        FF            .byte	$FF
01621                                           ! 437 },
01622                                           ! 438 {
01623                                           ! 439  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01624 061A                        00            .byte	0
01625 061B                        00            .byte	0
01626 061C                        00            .byte	0
01627 061D                        00            .byte	0
01628 061E                        00            .byte	0
01629 061F                        00            .byte	0
01630 0620                        00            .byte	0
01631 0621                        00            .byte	0
01632                                           ! 440  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01633 0622                        00            .byte	0
01634 0623                        00            .byte	0
01635 0624                        00            .byte	0
01636 0625                        00            .byte	0
01637 0626                        00            .byte	0
01638 0627                        00            .byte	0
01639 0628                        00            .byte	0
01640 0629                        00            .byte	0
01641                                           ! 441  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01642 062A                        00            .byte	0
01643 062B                        00            .byte	0
01644 062C                        00            .byte	0
01645 062D                        00            .byte	0
01646 062E                        00            .byte	0
01647 062F                        00            .byte	0
01648 0630                        00            .byte	0
01649 0631                        00            .byte	0
01650                                           ! 442  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01651 0632                        00            .byte	0
01652 0633                        00            .byte	0
01653 0634                        00            .byte	0
01654 0635                        00            .byte	0
01655 0636                        00            .byte	0
01656 0637                        00            .byte	0
01657 0638                        00            .byte	0
01658 0639                        00            .byte	0
01659                                           ! 443  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01660 063A                        00            .byte	0
01661 063B                        00            .byte	0
01662 063C                        00            .byte	0
01663 063D                        00            .byte	0
01664 063E                        00            .byte	0
01665 063F                        00            .byte	0
01666 0640                        00            .byte	0
01667 0641                        00            .byte	0
01668                                           ! 444  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01669 0642                        00            .byte	0
01670 0643                        00            .byte	0
01671 0644                        00            .byte	0
01672 0645                        00            .byte	0
01673 0646                        00            .byte	0
01674 0647                        00            .byte	0
01675 0648                        00            .byte	0
01676 0649                        00            .byte	0
01677                                           ! 445  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01678 064A                        00            .byte	0
01679 064B                        00            .byte	0
01680 064C                        00            .byte	0
01681 064D                        00            .byte	0
01682 064E                        00            .byte	0
01683 064F                        00            .byte	0
01684 0650                        00            .byte	0
01685 0651                        00            .byte	0
01686                                           ! 446  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01687 0652                        00            .byte	0
01688 0653                        00            .byte	0
01689 0654                        00            .byte	0
01690 0655                        00            .byte	0
01691 0656                        00            .byte	0
01692 0657                        00            .byte	0
01693 0658                        00            .byte	0
01694 0659                        00            .byte	0
01695                                           ! 447 },
01696                                           ! 448 {
01697                                           ! 449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01698 065A                        00            .byte	0
01699 065B                        00            .byte	0
01700 065C                        00            .byte	0
01701 065D                        00            .byte	0
01702 065E                        00            .byte	0
01703 065F                        00            .byte	0
01704 0660                        00            .byte	0
01705 0661                        00            .byte	0
01706                                           ! 450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01707 0662                        00            .byte	0
01708 0663                        00            .byte	0
01709 0664                        00            .byte	0
01710 0665                        00            .byte	0
01711 0666                        00            .byte	0
01712 0667                        00            .byte	0
01713 0668                        00            .byte	0
01714 0669                        00            .byte	0
01715                                           ! 451  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01716 066A                        00            .byte	0
01717 066B                        00            .byte	0
01718 066C                        00            .byte	0
01719 066D                        00            .byte	0
01720 066E                        00            .byte	0
01721 066F                        00            .byte	0
01722 0670                        00            .byte	0
01723 0671                        00            .byte	0
01724                                           ! 452  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01725 0672                        00            .byte	0
01726 0673                        00            .byte	0
01727 0674                        00            .byte	0
01728 0675                        00            .byte	0
01729 0676                        00            .byte	0
01730 0677                        00            .byte	0
01731 0678                        00            .byte	0
01732 0679                        00            .byte	0
01733                                           ! 453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01734 067A                        00            .byte	0
01735 067B                        00            .byte	0
01736 067C                        00            .byte	0
01737 067D                        00            .byte	0
01738 067E                        00            .byte	0
01739 067F                        00            .byte	0
01740 0680                        00            .byte	0
01741 0681                        00            .byte	0
01742                                           ! 454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01743 0682                        00            .byte	0
01744 0683                        00            .byte	0
01745 0684                        00            .byte	0
01746 0685                        00            .byte	0
01747 0686                        00            .byte	0
01748 0687                        00            .byte	0
01749 0688                        00            .byte	0
01750 0689                        00            .byte	0
01751                                           ! 455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01752 068A                        00            .byte	0
01753 068B                        00            .byte	0
01754 068C                        00            .byte	0
01755 068D                        00            .byte	0
01756 068E                        00            .byte	0
01757 068F                        00            .byte	0
01758 0690                        00            .byte	0
01759 0691                        00            .byte	0
01760                                           ! 456  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01761 0692                        00            .byte	0
01762 0693                        00            .byte	0
01763 0694                        00            .byte	0
01764 0695                        00            .byte	0
01765 0696                        00            .byte	0
01766 0697                        00            .byte	0
01767 0698                        00            .byte	0
01768 0699                        00            .byte	0
01769                                           ! 457 },
01770                                           ! 458 {
01771                                           ! 459  80, 24, 14, 0x00, 0x80,
01772 069A                        50            .byte	$50
01773 069B                        18            .byte	$18
01774 069C                        0E            .byte	$E
01775 069D                        00            .byte	0
01776 069E                        80            .byte	$80
01777                                           ! 460  0x01, 0x0f, 0x00, 0x06,
01778 069F                        01            .byte	1
01779 06A0                        0F            .byte	$F
01780 06A1                        00            .byte	0
01781 06A2                        06            .byte	6
01782                                           ! 461  0xa3,
01783 06A3                        A3            .byte	$A3
01784                                           ! 462  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01785 06A4                        5F            .byte	$5F
01786 06A5                        4F            .byte	$4F
01787 06A6                        50            .byte	$50
01788 06A7                        82            .byte	$82
01789 06A8                        54            .byte	$54
01790 06A9                        80            .byte	$80
01791 06AA                        BF            .byte	$BF
01792 06AB                        1F            .byte	$1F
01793                                           ! 463  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01794 06AC                        00            .byte	0
01795 06AD                        40            .byte	$40
01796 06AE                        00            .byte	0
01797 06AF                        00            .byte	0
01798 06B0                        00            .byte	0
01799 06B1                        00            .byte	0
01800 06B2                        00            .byte	0
01801 06B3                        00            .byte	0
01802                                           ! 464  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01803 06B4                        83            .byte	$83
01804 06B5                        85            .byte	$85
01805 06B6                        5D            .byte	$5D
01806 06B7                        28            .byte	$28
01807 06B8                        0F            .byte	$F
01808 06B9                        63            .byte	$63
01809 06BA                        BA            .byte	$BA
01810 06BB                        E3            .byte	$E3
01811                                           ! 465  0xff,
01812 06BC                        FF            .byte	$FF
01813                                           ! 466  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
01814 06BD                        00            .byte	0
01815 06BE                        08            .byte	8
01816 06BF                        00            .byte	0
01817 06C0                        00            .byte	0
01818 06C1                        18            .byte	$18
01819 06C2                        18            .byte	$18
01820 06C3                        00            .byte	0
01821 06C4                        00            .byte	0
01822                                           ! 467  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
01823 06C5                        00            .byte	0
01824 06C6                        08            .byte	8
01825 06C7                        00            .byte	0
01826 06C8                        00            .byte	0
01827 06C9                        00            .byte	0
01828 06CA                        18            .byte	$18
01829 06CB                        00            .byte	0
01830 06CC                        00            .byte	0
01831                                           ! 468  0x01, 0x00, 0x01, 0x00,
01832 06CD                        01            .byte	1
01833 06CE                        00            .byte	0
01834 06CF                        01            .byte	1
01835 06D0                        00            .byte	0
01836                                           ! 469  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01837 06D1                        00            .byte	0
01838 06D2                        00            .byte	0
01839 06D3                        00            .byte	0
01840 06D4                        00            .byte	0
01841 06D5                        00            .byte	0
01842 06D6                        00            .byte	0
01843 06D7                        05            .byte	5
01844 06D8                        0F            .byte	$F
01845 06D9                        FF            .byte	$FF
01846                                           ! 470 },
01847                                           ! 471 {
01848                                           ! 472  80, 24, 14, 0x00, 0x80,
01849 06DA                        50            .byte	$50
01850 06DB                        18            .byte	$18
01851 06DC                        0E            .byte	$E
01852 06DD                        00            .byte	0
01853 06DE                        80            .byte	$80
01854                                           ! 473  0x01, 0x0f, 0x00, 0x06,
01855 06DF                        01            .byte	1
01856 06E0                        0F            .byte	$F
01857 06E1                        00            .byte	0
01858 06E2                        06            .byte	6
01859                                           ! 474  0xa3,
01860 06E3                        A3            .byte	$A3
01861                                           ! 475  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01862 06E4                        5F            .byte	$5F
01863 06E5                        4F            .byte	$4F
01864 06E6                        50            .byte	$50
01865 06E7                        82            .byte	$82
01866 06E8                        54            .byte	$54
01867 06E9                        80            .byte	$80
01868 06EA                        BF            .byte	$BF
01869 06EB                        1F            .byte	$1F
01870                                           ! 476  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01871 06EC                        00            .byte	0
01872 06ED                        40            .byte	$40
01873 06EE                        00            .byte	0
01874 06EF                        00            .byte	0
01875 06F0                        00            .byte	0
01876 06F1                        00            .byte	0
01877 06F2                        00            .byte	0
01878 06F3                        00            .byte	0
01879                                           ! 477  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01880 06F4                        83            .byte	$83
01881 06F5                        85            .byte	$85
01882 06F6                        5D            .byte	$5D
01883 06F7                        28            .byte	$28
01884 06F8                        0F            .byte	$F
01885 06F9                        63            .byte	$63
01886 06FA                        BA            .byte	$BA
01887 06FB                        E3            .byte	$E3
01888                                           ! 478  0xff,
01889 06FC                        FF            .byte	$FF
01890                                           ! 479  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
01891 06FD                        00            .byte	0
01892 06FE                        01            .byte	1
01893 06FF                        02            .byte	2
01894 0700                        03            .byte	3
01895 0701                        04            .byte	4
01896 0702                        05            .byte	5
01897 0703                        14            .byte	$14
01898 0704                        07            .byte	7
01899                                           ! 480  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
01900 0705                        38            .byte	$38
01901 0706                        39            .byte	$39
01902 0707                        3A            .byte	$3A
01903 0708                        3B            .byte	$3B
01904 0709                        3C            .byte	$3C
01905 070A                        3D            .byte	$3D
01906 070B                        3E            .byte	$3E
01907 070C                        3F            .byte	$3F
01908                                           ! 481  0x01, 0x00, 0x0f, 0x00,
01909 070D                        01            .byte	1
01910 070E                        00            .byte	0
01911 070F                        0F            .byte	$F
01912 0710                        00            .byte	0
01913                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01914 0711                        00            .byte	0
01915 0712                        00            .byte	0
01916 0713                        00            .byte	0
01917 0714                        00            .byte	0
01918 0715                        00            .byte	0
01919 0716                        00            .byte	0
01920 0717                        05            .byte	5
01921 0718                        0F            .byte	$F
01922 0719                        FF            .byte	$FF
01923                                           ! 483 },
01924                                           ! 484 {
01925                                           ! 485  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01926 071A                        00            .byte	0
01927 071B                        00            .byte	0
01928 071C                        00            .byte	0
01929 071D                        00            .byte	0
01930 071E                        00            .byte	0
01931 071F                        00            .byte	0
01932 0720                        00            .byte	0
01933 0721                        00            .byte	0
01934                                           ! 486  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01935 0722                        00            .byte	0
01936 0723                        00            .byte	0
01937 0724                        00            .byte	0
01938 0725                        00            .byte	0
01939 0726                        00            .byte	0
01940 0727                        00            .byte	0
01941 0728                        00            .byte	0
01942 0729                        00            .byte	0
01943                                           ! 487  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01944 072A                        00            .byte	0
01945 072B                        00            .byte	0
01946 072C                        00            .byte	0
01947 072D                        00            .byte	0
01948 072E                        00            .byte	0
01949 072F                        00            .byte	0
01950 0730                        00            .byte	0
01951 0731                        00            .byte	0
01952                                           ! 488  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01953 0732                        00            .byte	0
01954 0733                        00            .byte	0
01955 0734                        00            .byte	0
01956 0735                        00            .byte	0
01957 0736                        00            .byte	0
01958 0737                        00            .byte	0
01959 0738                        00            .byte	0
01960 0739                        00            .byte	0
01961                                           ! 489  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01962 073A                        00            .byte	0
01963 073B                        00            .byte	0
01964 073C                        00            .byte	0
01965 073D                        00            .byte	0
01966 073E                        00            .byte	0
01967 073F                        00            .byte	0
01968 0740                        00            .byte	0
01969 0741                        00            .byte	0
01970                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01971 0742                        00            .byte	0
01972 0743                        00            .byte	0
01973 0744                        00            .byte	0
01974 0745                        00            .byte	0
01975 0746                        00            .byte	0
01976 0747                        00            .byte	0
01977 0748                        00            .byte	0
01978 0749                        00            .byte	0
01979                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01980 074A                        00            .byte	0
01981 074B                        00            .byte	0
01982 074C                        00            .byte	0
01983 074D                        00            .byte	0
01984 074E                        00            .byte	0
01985 074F                        00            .byte	0
01986 0750                        00            .byte	0
01987 0751                        00            .byte	0
01988                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01989 0752                        00            .byte	0
01990 0753                        00            .byte	0
01991 0754                        00            .byte	0
01992 0755                        00            .byte	0
01993 0756                        00            .byte	0
01994 0757                        00            .byte	0
01995 0758                        00            .byte	0
01996 0759                        00            .byte	0
01997                                           ! 493 },
01998                                           ! 494 {
01999                                           ! 495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02000 075A                        00            .byte	0
02001 075B                        00            .byte	0
02002 075C                        00            .byte	0
02003 075D                        00            .byte	0
02004 075E                        00            .byte	0
02005 075F                        00            .byte	0
02006 0760                        00            .byte	0
02007 0761                        00            .byte	0
02008                                           ! 496  0x00, 0
02009 0762                        00            .byte	0
02010                                           ! 496 x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02011 0763                        00            .byte	0
02012 0764                        00            .byte	0
02013 0765                        00            .byte	0
02014 0766                        00            .byte	0
02015 0767                        00            .byte	0
02016 0768                        00            .byte	0
02017 0769                        00            .byte	0
02018                                           ! 497  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02019 076A                        00            .byte	0
02020 076B                        00            .byte	0
02021 076C                        00            .byte	0
02022 076D                        00            .byte	0
02023 076E                        00            .byte	0
02024 076F                        00            .byte	0
02025 0770                        00            .byte	0
02026 0771                        00            .byte	0
02027                                           ! 498  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02028 0772                        00            .byte	0
02029 0773                        00            .byte	0
02030 0774                        00            .byte	0
02031 0775                        00            .byte	0
02032 0776                        00            .byte	0
02033 0777                        00            .byte	0
02034 0778                        00            .byte	0
02035 0779                        00            .byte	0
02036                                           ! 499  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02037 077A                        00            .byte	0
02038 077B                        00            .byte	0
02039 077C                        00            .byte	0
02040 077D                        00            .byte	0
02041 077E                        00            .byte	0
02042 077F                        00            .byte	0
02043 0780                        00            .byte	0
02044 0781                        00            .byte	0
02045                                           ! 500  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02046 0782                        00            .byte	0
02047 0783                        00            .byte	0
02048 0784                        00            .byte	0
02049 0785                        00            .byte	0
02050 0786                        00            .byte	0
02051 0787                        00            .byte	0
02052 0788                        00            .byte	0
02053 0789                        00            .byte	0
02054                                           ! 501  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02055 078A                        00            .byte	0
02056 078B                        00            .byte	0
02057 078C                        00            .byte	0
02058 078D                        00            .byte	0
02059 078E                        00            .byte	0
02060 078F                        00            .byte	0
02061 0790                        00            .byte	0
02062 0791                        00            .byte	0
02063                                           ! 502  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02064 0792                        00            .byte	0
02065 0793                        00            .byte	0
02066 0794                        00            .byte	0
02067 0795                        00            .byte	0
02068 0796                        00            .byte	0
02069 0797                        00            .byte	0
02070 0798                        00            .byte	0
02071 0799                        00            .byte	0
02072                                           ! 503 },
02073                                           ! 504 {
02074                                           ! 505  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02075 079A                        00            .byte	0
02076 079B                        00            .byte	0
02077 079C                        00            .byte	0
02078 079D                        00            .byte	0
02079 079E                        00            .byte	0
02080 079F                        00            .byte	0
02081 07A0                        00            .byte	0
02082 07A1                        00            .byte	0
02083                                           ! 506  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02084 07A2                        00            .byte	0
02085 07A3                        00            .byte	0
02086 07A4                        00            .byte	0
02087 07A5                        00            .byte	0
02088 07A6                        00            .byte	0
02089 07A7                        00            .byte	0
02090 07A8                        00            .byte	0
02091 07A9                        00            .byte	0
02092                                           ! 507  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02093 07AA                        00            .byte	0
02094 07AB                        00            .byte	0
02095 07AC                        00            .byte	0
02096 07AD                        00            .byte	0
02097 07AE                        00            .byte	0
02098 07AF                        00            .byte	0
02099 07B0                        00            .byte	0
02100 07B1                        00            .byte	0
02101                                           ! 508  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02102 07B2                        00            .byte	0
02103 07B3                        00            .byte	0
02104 07B4                        00            .byte	0
02105 07B5                        00            .byte	0
02106 07B6                        00            .byte	0
02107 07B7                        00            .byte	0
02108 07B8                        00            .byte	0
02109 07B9                        00            .byte	0
02110                                           ! 509  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02111 07BA                        00            .byte	0
02112 07BB                        00            .byte	0
02113 07BC                        00            .byte	0
02114 07BD                        00            .byte	0
02115 07BE                        00            .byte	0
02116 07BF                        00            .byte	0
02117 07C0                        00            .byte	0
02118 07C1                        00            .byte	0
02119                                           ! 510  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02120 07C2                        00            .byte	0
02121 07C3                        00            .byte	0
02122 07C4                        00            .byte	0
02123 07C5                        00            .byte	0
02124 07C6                        00            .byte	0
02125 07C7                        00            .byte	0
02126 07C8                        00            .byte	0
02127 07C9                        00            .byte	0
02128                                           ! 511  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02129 07CA                        00            .byte	0
02130 07CB                        00            .byte	0
02131 07CC                        00            .byte	0
02132 07CD                        00            .byte	0
02133 07CE                        00            .byte	0
02134 07CF                        00            .byte	0
02135 07D0                        00            .byte	0
02136 07D1                        00            .byte	0
02137                                           ! 512  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02138 07D2                        00            .byte	0
02139 07D3                        00            .byte	0
02140 07D4                        00            .byte	0
02141 07D5                        00            .byte	0
02142 07D6                        00            .byte	0
02143 07D7                        00            .byte	0
02144 07D8                        00            .byte	0
02145 07D9                        00            .byte	0
02146                                           ! 513 },
02147                                           ! 514 {
02148                                           ! 515  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02149 07DA                        00            .byte	0
02150 07DB                        00            .byte	0
02151 07DC                        00            .byte	0
02152 07DD                        00            .byte	0
02153 07DE                        00            .byte	0
02154 07DF                        00            .byte	0
02155 07E0                        00            .byte	0
02156 07E1                        00            .byte	0
02157                                           ! 516  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02158 07E2                        00            .byte	0
02159 07E3                        00            .byte	0
02160 07E4                        00            .byte	0
02161 07E5                        00            .byte	0
02162 07E6                        00            .byte	0
02163 07E7                        00            .byte	0
02164 07E8                        00            .byte	0
02165 07E9                        00            .byte	0
02166                                           ! 517  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02167 07EA                        00            .byte	0
02168 07EB                        00            .byte	0
02169 07EC                        00            .byte	0
02170 07ED                        00            .byte	0
02171 07EE                        00            .byte	0
02172 07EF                        00            .byte	0
02173 07F0                        00            .byte	0
02174 07F1                        00            .byte	0
02175                                           ! 518  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02176 07F2                        00            .byte	0
02177 07F3                        00            .byte	0
02178 07F4                        00            .byte	0
02179 07F5                        00            .byte	0
02180 07F6                        00            .byte	0
02181 07F7                        00            .byte	0
02182 07F8                        00            .byte	0
02183 07F9                        00            .byte	0
02184                                           ! 519  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02185 07FA                        00            .byte	0
02186 07FB                        00            .byte	0
02187 07FC                        00            .byte	0
02188 07FD                        00            .byte	0
02189 07FE                        00            .byte	0
02190 07FF                        00            .byte	0
02191 0800                        00            .byte	0
02192 0801                        00            .byte	0
02193                                           ! 520  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02194 0802                        00            .byte	0
02195 0803                        00            .byte	0
02196 0804                        00            .byte	0
02197 0805                        00            .byte	0
02198 0806                        00            .byte	0
02199 0807                        00            .byte	0
02200 0808                        00            .byte	0
02201 0809                        00            .byte	0
02202                                           ! 521  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02203 080A                        00            .byte	0
02204 080B                        00            .byte	0
02205 080C                        00            .byte	0
02206 080D                        00            .byte	0
02207 080E                        00            .byte	0
02208 080F                        00            .byte	0
02209 0810                        00            .byte	0
02210 0811                        00            .byte	0
02211                                           ! 522  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02212 0812                        00            .byte	0
02213 0813                        00            .byte	0
02214 0814                        00            .byte	0
02215 0815                        00            .byte	0
02216 0816                        00            .byte	0
02217 0817                        00            .byte	0
02218 0818                        00            .byte	0
02219 0819                        00            .byte	0
02220                                           ! 523 },
02221                                           ! 524 {
02222                                           ! 525  40, 24, 16, 0x00, 0x08,
02223 081A                        28            .byte	$28
02224 081B                        18            .byte	$18
02225 081C                        10            .byte	$10
02226 081D                        00            .byte	0
02227 081E                        08            .byte	8
02228                                           ! 526  0x08, 0x03, 0x00, 0x02,
02229 081F                        08            .byte	8
02230 0820                        03            .byte	3
02231 0821                        00            .byte	0
02232 0822                        02            .byte	2
02233                                           ! 527  0x67,
02234 0823                        67            .byte	$67
02235                                           ! 528  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02236 0824                        2D            .byte	$2D
02237 0825                        27            .byte	$27
02238 0826                        28            .byte	$28
02239 0827                        90            .byte	$90
02240 0828                        2B            .byte	$2B
02241 0829                        A0            .byte	$A0
02242 082A                        BF            .byte	$BF
02243 082B                        1F            .byte	$1F
02244                                           ! 529  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02245 082C                        00            .byte	0
02246 082D                        4F            .byte	$4F
02247 082E                        0D            .byte	$D
02248 082F                        0E            .byte	$E
02249 0830                        00            .byte	0
02250 0831                        00            .byte	0
02251 0832                        00            .byte	0
02252 0833                        00            .byte	0
02253                                           ! 530  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02254 0834                        9C            .byte	$9C
02255 0835                        8E            .byte	$8E
02256 0836                        8F            .byte	$8F
02257 0837                        14            .byte	$14
02258 0838                        1F            .byte	$1F
02259 0839                        96            .byte	$96
02260 083A                        B9            .byte	$B9
02261 083B                        A3            .byte	$A3
02262                                           ! 531  0xff,
02263 083C                        FF            .byte	$FF
02264                                           ! 532  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02265 083D                        00            .byte	0
02266 083E                        01            .byte	1
02267 083F                        02            .byte	2
02268 0840                        03            .byte	3
02269 0841                        04            .byte	4
02270 0842                        05            .byte	5
02271 0843                        14            .byte	$14
02272 0844                        07            .byte	7
02273                                           ! 533  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02274 0845                        38            .byte	$38
02275 0846                        39            .byte	$39
02276 0847                        3A            .byte	$3A
02277 0848                        3B            .byte	$3B
02278 0849                        3C            .byte	$3C
02279 084A                        3D            .byte	$3D
02280 084B                        3E            .byte	$3E
02281 084C                        3F            .byte	$3F
02282                                           ! 534  0x0c, 0x00, 0x0f, 0x08,
02283 084D                        0C            .byte	$C
02284 084E                        00            .byte	0
02285 084F                        0F            .byte	$F
02286 0850                        08            .byte	8
02287                                           ! 535  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02288 0851                        00            .byte	0
02289 0852                        00            .byte	0
02290 0853                        00            .byte	0
02291 0854                        00            .byte	0
02292 0855                        00            .byte	0
02293 0856                        10            .byte	$10
02294 0857                        0E            .byte	$E
02295 0858                        0F            .byte	$F
02296 0859                        FF            .byte	$FF
02297                                           ! 536 },
02298                                           ! 537 {
02299                                           ! 538  80, 24, 16, 0x00, 0x10,
02300 085A                        50            .byte	$50
02301 085B                        18            .byte	$18
02302 085C                        10            .byte	$10
02303 085D                        00            .byte	0
02304 085E                        10            .byte	$10
02305                                           ! 539  0x00, 0x03, 0x00, 0x02,
02306 085F                        00            .byte	0
02307 0860                        03            .byte	3
02308 0861                        00            .byte	0
02309 0862                        02            .byte	2
02310                                           ! 540  0x67,
02311 0863                        67            .byte	$67
02312                                           ! 541  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02313 0864                        5F            .byte	$5F
02314 0865                        4F            .byte	$4F
02315 0866                        50            .byte	$50
02316 0867                        82            .byte	$82
02317 0868                        55            .byte	$55
02318 0869                        81            .byte	$81
02319 086A                        BF            .byte	$BF
02320 086B                        1F            .byte	$1F
02321                                           ! 542  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02322 086C                        00            .byte	0
02323 086D                        4F            .byte	$4F
02324 086E                        0D            .byte	$D
02325 086F                        0E            .byte	$E
02326 0870                        00            .byte	0
02327 0871                        00            .byte	0
02328 0872                        00            .byte	0
02329 0873                        00            .byte	0
02330                                           ! 543  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02331 0874                        9C            .byte	$9C
02332 0875                        8E            .byte	$8E
02333 0876                        8F            .byte	$8F
02334 0877                        28            .byte	$28
02335 0878                        1F            .byte	$1F
02336 0879                        96            .byte	$96
02337 087A                        B9            .byte	$B9
02338 087B                        A3            .byte	$A3
02339                                           ! 544  0xff,
02340 087C                        FF            .byte	$FF
02341                                           ! 545  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02342 087D                        00            .byte	0
02343 087E                        01            .byte	1
02344 087F                        02            .byte	2
02345 0880                        03            .byte	3
02346 0881                        04            .byte	4
02347 0882                        05            .byte	5
02348 0883                        14            .byte	$14
02349 0884                        07            .byte	7
02350                                           ! 546  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02351 0885                        38            .byte	$38
02352 0886                        39            .byte	$39
02353 0887                        3A            .byte	$3A
02354 0888                        3B            .byte	$3B
02355 0889                        3C            .byte	$3C
02356 088A                        3D            .byte	$3D
02357 088B                        3E            .byte	$3E
02358 088C                        3F            .byte	$3F
02359                                           ! 547  0x0c, 0x00, 0x0f, 0x08,
02360 088D                        0C            .byte	$C
02361 088E                        00            .byte	0
02362 088F                        0F            .byte	$F
02363 0890                        08            .byte	8
02364                                           ! 548  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02365 0891                        00            .byte	0
02366 0892                        00            .byte	0
02367 0893                        00            .byte	0
02368 0894                        00            .byte	0
02369 0895                        00            .byte	0
02370 0896                        10            .byte	$10
02371 0897                        0E            .byte	$E
02372 0898                        0F            .byte	$F
02373 0899                        FF            .byte	$FF
02374                                           ! 549 },
02375                                           ! 550 {
02376                                           ! 551  80, 24, 16, 0x00, 0x10,
02377 089A                        50            .byte	$50
02378 089B                        18            .byte	$18
02379 089C                        10            .byte	$10
02380 089D                        00            .byte	0
02381 089E                        10            .byte	$10
02382                                           ! 552  0x00, 0x03, 0x00, 0x02,
02383 089F                        00            .byte	0
02384 08A0                        03            .byte	3
02385 08A1                        00            .byte	0
02386 08A2                        02            .byte	2
02387                                           ! 553  0x66,
02388 08A3                        66            .byte	$66
02389                                           ! 554  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02390 08A4                        5F            .byte	$5F
02391 08A5                        4F            .byte	$4F
02392 08A6                        50            .byte	$50
02393 08A7                        82            .byte	$82
02394 08A8                        55            .byte	$55
02395 08A9                        81            .byte	$81
02396 08AA                        BF            .byte	$BF
02397 08AB                        1F            .byte	$1F
02398                                           ! 555  0x00, 0x4f, 0x0d, 0
02399 08AC                        00            .byte	0
02400 08AD                        4F            .byte	$4F
02401 08AE                        0D            .byte	$D
02402                                           ! 555 x0e, 0x00, 0x00, 0x00, 0x00,
02403 08AF                        0E            .byte	$E
02404 08B0                        00            .byte	0
02405 08B1                        00            .byte	0
02406 08B2                        00            .byte	0
02407 08B3                        00            .byte	0
02408                                           ! 556  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02409 08B4                        9C            .byte	$9C
02410 08B5                        8E            .byte	$8E
02411 08B6                        8F            .byte	$8F
02412 08B7                        28            .byte	$28
02413 08B8                        0F            .byte	$F
02414 08B9                        96            .byte	$96
02415 08BA                        B9            .byte	$B9
02416 08BB                        A3            .byte	$A3
02417                                           ! 557  0xff,
02418 08BC                        FF            .byte	$FF
02419                                           ! 558  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02420 08BD                        00            .byte	0
02421 08BE                        08            .byte	8
02422 08BF                        08            .byte	8
02423 08C0                        08            .byte	8
02424 08C1                        08            .byte	8
02425 08C2                        08            .byte	8
02426 08C3                        08            .byte	8
02427 08C4                        08            .byte	8
02428                                           ! 559  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02429 08C5                        10            .byte	$10
02430 08C6                        18            .byte	$18
02431 08C7                        18            .byte	$18
02432 08C8                        18            .byte	$18
02433 08C9                        18            .byte	$18
02434 08CA                        18            .byte	$18
02435 08CB                        18            .byte	$18
02436 08CC                        18            .byte	$18
02437                                           ! 560  0x0e, 0x00, 0x0f, 0x08,
02438 08CD                        0E            .byte	$E
02439 08CE                        00            .byte	0
02440 08CF                        0F            .byte	$F
02441 08D0                        08            .byte	8
02442                                           ! 561  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02443 08D1                        00            .byte	0
02444 08D2                        00            .byte	0
02445 08D3                        00            .byte	0
02446 08D4                        00            .byte	0
02447 08D5                        00            .byte	0
02448 08D6                        10            .byte	$10
02449 08D7                        0A            .byte	$A
02450 08D8                        0F            .byte	$F
02451 08D9                        FF            .byte	$FF
02452                                           ! 562 },
02453                                           ! 563 {
02454                                           ! 564  80, 29, 16, 0x00, 0x00,
02455 08DA                        50            .byte	$50
02456 08DB                        1D            .byte	$1D
02457 08DC                        10            .byte	$10
02458 08DD                        00            .byte	0
02459 08DE                        00            .byte	0
02460                                           ! 565  0x01, 0x0f, 0x00, 0x06,
02461 08DF                        01            .byte	1
02462 08E0                        0F            .byte	$F
02463 08E1                        00            .byte	0
02464 08E2                        06            .byte	6
02465                                           ! 566  0xe3,
02466 08E3                        E3            .byte	$E3
02467                                           ! 567  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02468 08E4                        5F            .byte	$5F
02469 08E5                        4F            .byte	$4F
02470 08E6                        50            .byte	$50
02471 08E7                        82            .byte	$82
02472 08E8                        54            .byte	$54
02473 08E9                        80            .byte	$80
02474 08EA                        0B            .byte	$B
02475 08EB                        3E            .byte	$3E
02476                                           ! 568  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02477 08EC                        00            .byte	0
02478 08ED                        40            .byte	$40
02479 08EE                        00            .byte	0
02480 08EF                        00            .byte	0
02481 08F0                        00            .byte	0
02482 08F1                        00            .byte	0
02483 08F2                        00            .byte	0
02484 08F3                        00            .byte	0
02485                                           ! 569  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02486 08F4                        EA            .byte	$EA
02487 08F5                        8C            .byte	$8C
02488 08F6                        DF            .byte	$DF
02489 08F7                        28            .byte	$28
02490 08F8                        00            .byte	0
02491 08F9                        E7            .byte	$E7
02492 08FA                        04            .byte	4
02493 08FB                        E3            .byte	$E3
02494                                           ! 570  0xff,
02495 08FC                        FF            .byte	$FF
02496                                           ! 571  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02497 08FD                        00            .byte	0
02498 08FE                        3F            .byte	$3F
02499 08FF                        00            .byte	0
02500 0900                        3F            .byte	$3F
02501 0901                        00            .byte	0
02502 0902                        3F            .byte	$3F
02503 0903                        00            .byte	0
02504 0904                        3F            .byte	$3F
02505                                           ! 572  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02506 0905                        00            .byte	0
02507 0906                        3F            .byte	$3F
02508 0907                        00            .byte	0
02509 0908                        3F            .byte	$3F
02510 0909                        00            .byte	0
02511 090A                        3F            .byte	$3F
02512 090B                        00            .byte	0
02513 090C                        3F            .byte	$3F
02514                                           ! 573  0x01, 0x00, 0x0f, 0x00,
02515 090D                        01            .byte	1
02516 090E                        00            .byte	0
02517 090F                        0F            .byte	$F
02518 0910                        00            .byte	0
02519                                           ! 574  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02520 0911                        00            .byte	0
02521 0912                        00            .byte	0
02522 0913                        00            .byte	0
02523 0914                        00            .byte	0
02524 0915                        00            .byte	0
02525 0916                        00            .byte	0
02526 0917                        05            .byte	5
02527 0918                        0F            .byte	$F
02528 0919                        FF            .byte	$FF
02529                                           ! 575 },
02530                                           ! 576 {
02531                                           ! 577  80, 29, 16, 0x00, 0x00,
02532 091A                        50            .byte	$50
02533 091B                        1D            .byte	$1D
02534 091C                        10            .byte	$10
02535 091D                        00            .byte	0
02536 091E                        00            .byte	0
02537                                           ! 578  0x01, 0x0f, 0x00, 0x06,
02538 091F                        01            .byte	1
02539 0920                        0F            .byte	$F
02540 0921                        00            .byte	0
02541 0922                        06            .byte	6
02542                                           ! 579  0xe3,
02543 0923                        E3            .byte	$E3
02544                                           ! 580  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02545 0924                        5F            .byte	$5F
02546 0925                        4F            .byte	$4F
02547 0926                        50            .byte	$50
02548 0927                        82            .byte	$82
02549 0928                        54            .byte	$54
02550 0929                        80            .byte	$80
02551 092A                        0B            .byte	$B
02552 092B                        3E            .byte	$3E
02553                                           ! 581  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02554 092C                        00            .byte	0
02555 092D                        40            .byte	$40
02556 092E                        00            .byte	0
02557 092F                        00            .byte	0
02558 0930                        00            .byte	0
02559 0931                        00            .byte	0
02560 0932                        00            .byte	0
02561 0933                        00            .byte	0
02562                                           ! 582  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02563 0934                        EA            .byte	$EA
02564 0935                        8C            .byte	$8C
02565 0936                        DF            .byte	$DF
02566 0937                        28            .byte	$28
02567 0938                        00            .byte	0
02568 0939                        E7            .byte	$E7
02569 093A                        04            .byte	4
02570 093B                        E3            .byte	$E3
02571                                           ! 583  0xff,
02572 093C                        FF            .byte	$FF
02573                                           ! 584  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02574 093D                        00            .byte	0
02575 093E                        01            .byte	1
02576 093F                        02            .byte	2
02577 0940                        03            .byte	3
02578 0941                        04            .byte	4
02579 0942                        05            .byte	5
02580 0943                        14            .byte	$14
02581 0944                        07            .byte	7
02582                                           ! 585  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02583 0945                        38            .byte	$38
02584 0946                        39            .byte	$39
02585 0947                        3A            .byte	$3A
02586 0948                        3B            .byte	$3B
02587 0949                        3C            .byte	$3C
02588 094A                        3D            .byte	$3D
02589 094B                        3E            .byte	$3E
02590 094C                        3F            .byte	$3F
02591                                           ! 586  0x01, 0x00, 0x0f, 0x00,
02592 094D                        01            .byte	1
02593 094E                        00            .byte	0
02594 094F                        0F            .byte	$F
02595 0950                        00            .byte	0
02596                                           ! 587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02597 0951                        00            .byte	0
02598 0952                        00            .byte	0
02599 0953                        00            .byte	0
02600 0954                        00            .byte	0
02601 0955                        00            .byte	0
02602 0956                        00            .byte	0
02603 0957                        05            .byte	5
02604 0958                        0F            .byte	$F
02605 0959                        FF            .byte	$FF
02606                                           ! 588 },
02607                                           ! 589 {
02608                                           ! 590  40, 24, 8, 0x00, 0x00,
02609 095A                        28            .byte	$28
02610 095B                        18            .byte	$18
02611 095C                        08            .byte	8
02612 095D                        00            .byte	0
02613 095E                        00            .byte	0
02614                                           ! 591  0x01, 0x0f, 0x00, 0x0e,
02615 095F                        01            .byte	1
02616 0960                        0F            .byte	$F
02617 0961                        00            .byte	0
02618 0962                        0E            .byte	$E
02619                                           ! 592  0x63,
02620 0963                        63            .byte	$63
02621                                           ! 593  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02622 0964                        5F            .byte	$5F
02623 0965                        4F            .byte	$4F
02624 0966                        50            .byte	$50
02625 0967                        82            .byte	$82
02626 0968                        54            .byte	$54
02627 0969                        80            .byte	$80
02628 096A                        BF            .byte	$BF
02629 096B                        1F            .byte	$1F
02630                                           ! 594  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02631 096C                        00            .byte	0
02632 096D                        41            .byte	$41
02633 096E                        00            .byte	0
02634 096F                        00            .byte	0
02635 0970                        00            .byte	0
02636 0971                        00            .byte	0
02637 0972                        00            .byte	0
02638 0973                        00            .byte	0
02639                                           ! 595  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02640 0974                        9C            .byte	$9C
02641 0975                        8E            .byte	$8E
02642 0976                        8F            .byte	$8F
02643 0977                        28            .byte	$28
02644 0978                        40            .byte	$40
02645 0979                        96            .byte	$96
02646 097A                        B9            .byte	$B9
02647 097B                        A3            .byte	$A3
02648                                           ! 596  0xff,
02649 097C                        FF            .byte	$FF
02650                                           ! 597  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02651 097D                        00            .byte	0
02652 097E                        01            .byte	1
02653 097F                        02            .byte	2
02654 0980                        03            .byte	3
02655 0981                        04            .byte	4
02656 0982                        05            .byte	5
02657 0983                        06            .byte	6
02658 0984                        07            .byte	7
02659                                           ! 598  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02660 0985                        08            .byte	8
02661 0986                        09            .byte	9
02662 0987                        0A            .byte	$A
02663 0988                        0B            .byte	$B
02664 0989                        0C            .byte	$C
02665 098A                        0D            .byte	$D
02666 098B                        0E            .byte	$E
02667 098C                        0F            .byte	$F
02668                                           ! 599  0x41, 0x00, 0x0f, 0x00,
02669 098D                        41            .byte	$41
02670 098E                        00            .byte	0
02671 098F                        0F            .byte	$F
02672 0990                        00            .byte	0
02673                                           ! 600  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02674 0991                        00            .byte	0
02675 0992                        00            .byte	0
02676 0993                        00            .byte	0
02677 0994                        00            .byte	0
02678 0995                        00            .byte	0
02679 0996                        40            .byte	$40
02680 0997                        05            .byte	5
02681 0998                        0F            .byte	$F
02682 0999                        FF            .byte	$FF
02683                                           ! 601 },
02684                                           ! 602 {
02685                                           ! 603  100, 36, 16, 0x00, 0x00,
02686 099A                        64            .byte	$64
02687 099B                        24            .byte	$24
02688 099C                        10            .byte	$10
02689 099D                        00            .byte	0
02690 099E                        00            .byte	0
02691                                           ! 604  0x01, 0x0f, 0x00, 0x06,
02692 099F                        01            .byte	1
02693 09A0                        0F            .byte	$F
02694 09A1                        00            .byte	0
02695 09A2                        06            .byte	6
02696                                           ! 605  0xe3,
02697 09A3                        E3            .byte	$E3
02698                                           ! 606  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02699 09A4                        7F            .byte	$7F
02700 09A5                        63            .byte	$63
02701 09A6                        63            .byte	$63
02702 09A7                        83            .byte	$83
02703 09A8                        6B            .byte	$6B
02704 09A9                        1B            .byte	$1B
02705 09AA                        72            .byte	$72
02706 09AB                        F0            .byte	$F0
02707                                           ! 607  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02708 09AC                        00            .byte	0
02709 09AD                        60            .byte	$60
02710 09AE                        00            .byte	0
02711 09AF                        00            .byte	0
02712 09B0                        00            .byte	0
02713 09B1                        00            .byte	0
02714 09B2                        00            .byte	0
02715 09B3                        00            .byte	0
02716                                           ! 608  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
02717 09B4                        59            .byte	$59
02718 09B5                        8D            .byte	$8D
02719 09B6                        57            .byte	$57
02720 09B7                        32            .byte	$32
02721 09B8                        00            .byte	0
02722 09B9                        57            .byte	$57
02723 09BA                        73            .byte	$73
02724 09BB                        E3            .byte	$E3
02725                                           ! 609  0xff,
02726 09BC                        FF            .byte	$FF
02727                                           ! 610  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02728 09BD                        00            .byte	0
02729 09BE                        01            .byte	1
02730 09BF                        02            .byte	2
02731 09C0                        03            .byte	3
02732 09C1                        04            .byte	4
02733 09C2                        05            .byte	5
02734 09C3                        14            .byte	$14
02735 09C4                        07            .byte	7
02736                                           ! 611  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02737 09C5                        38            .byte	$38
02738 09C6                        39            .byte	$39
02739 09C7                        3A            .byte	$3A
02740 09C8                        3B            .byte	$3B
02741 09C9                        3C            .byte	$3C
02742 09CA                        3D            .byte	$3D
02743 09CB                        3E            .byte	$3E
02744 09CC                        3F            .byte	$3F
02745                                           ! 612  0x01, 0x00, 0x0f, 0x00,
02746 09CD                        01            .byte	1
02747 09CE                        00            .byte	0
02748 09CF                        0F            .byte	$F
02749 09D0                        00            .byte	0
02750                                           ! 613  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02751 09D1                        00            .byte	0
02752 09D2                        00            .byte	0
02753 09D3                        00            .byte	0
02754 09D4                        00            .byte	0
02755 09D5                        00            .byte	0
02756 09D6                        00            .byte	0
02757 09D7                        05            .byte	5
02758 09D8                        0F            .byte	$F
02759 09D9                        FF            .byte	$FF
02760                                           ! 614 },
02761                                           ! 615 };
02762                                           !BCC_EOS
02763                                           ! 616 static Bit8u palette0[63+1][3]=
02764                                           ! 617 {
02765                       000009DA            _palette0:
02766                                           ! 618   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
02767 09DA                        00            .byte	0
02768 09DB                        00            .byte	0
02769 09DC                        00            .byte	0
02770 09DD                        00            .byte	0
02771 09DE                        00            .byte	0
02772 09DF                        00            .byte	0
02773 09E0                        00            .byte	0
02774 09E1                        00            .byte	0
02775 09E2                        00            .byte	0
02776 09E3                        00            .byte	0
02777 09E4                        00            .byte	0
02778 09E5                        00            .byte	0
02779 09E6                        00            .byte	0
02780 09E7                        00            .byte	0
02781 09E8                        00            .byte	0
02782 09E9                        00            .byte	0
02783 09EA                        00            .byte	0
02784 09EB                        00            .byte	0
02785 09EC                        00            .byte	0
02786 09ED                        00            .byte	0
02787 09EE                        00            .byte	0
02788 09EF                        00            .byte	0
02789 09F0                        00            .byte	0
02790 09F1                        00            .byte	0
02791                                           ! 619   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,
02792 09F2                        2A            .byte	$2A
02793 09F3                        2A            .byte	$2A
02794 09F4                        2A            .byte	$2A
02795 09F5                        2A            .byte	$2A
02796 09F6                        2A            .byte	$2A
02797 09F7                        2A            .byte	$2A
02798                                           ! 619 0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02799 09F8                        2A            .byte	$2A
02800 09F9                        2A            .byte	$2A
02801 09FA                        2A            .byte	$2A
02802 09FB                        2A            .byte	$2A
02803 09FC                        2A            .byte	$2A
02804 09FD                        2A            .byte	$2A
02805 09FE                        2A            .byte	$2A
02806 09FF                        2A            .byte	$2A
02807 0A00                        2A            .byte	$2A
02808 0A01                        2A            .byte	$2A
02809 0A02                        2A            .byte	$2A
02810 0A03                        2A            .byte	$2A
02811 0A04                        2A            .byte	$2A
02812 0A05                        2A            .byte	$2A
02813 0A06                        2A            .byte	$2A
02814 0A07                        2A            .byte	$2A
02815 0A08                        2A            .byte	$2A
02816 0A09                        2A            .byte	$2A
02817                                           ! 620   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02818 0A0A                        2A            .byte	$2A
02819 0A0B                        2A            .byte	$2A
02820 0A0C                        2A            .byte	$2A
02821 0A0D                        2A            .byte	$2A
02822 0A0E                        2A            .byte	$2A
02823 0A0F                        2A            .byte	$2A
02824 0A10                        2A            .byte	$2A
02825 0A11                        2A            .byte	$2A
02826 0A12                        2A            .byte	$2A
02827 0A13                        2A            .byte	$2A
02828 0A14                        2A            .byte	$2A
02829 0A15                        2A            .byte	$2A
02830 0A16                        2A            .byte	$2A
02831 0A17                        2A            .byte	$2A
02832 0A18                        2A            .byte	$2A
02833 0A19                        2A            .byte	$2A
02834 0A1A                        2A            .byte	$2A
02835 0A1B                        2A            .byte	$2A
02836 0A1C                        2A            .byte	$2A
02837 0A1D                        2A            .byte	$2A
02838 0A1E                        2A            .byte	$2A
02839 0A1F                        2A            .byte	$2A
02840 0A20                        2A            .byte	$2A
02841 0A21                        2A            .byte	$2A
02842                                           ! 621   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
02843 0A22                        3F            .byte	$3F
02844 0A23                        3F            .byte	$3F
02845 0A24                        3F            .byte	$3F
02846 0A25                        3F            .byte	$3F
02847 0A26                        3F            .byte	$3F
02848 0A27                        3F            .byte	$3F
02849 0A28                        3F            .byte	$3F
02850 0A29                        3F            .byte	$3F
02851 0A2A                        3F            .byte	$3F
02852 0A2B                        3F            .byte	$3F
02853 0A2C                        3F            .byte	$3F
02854 0A2D                        3F            .byte	$3F
02855 0A2E                        3F            .byte	$3F
02856 0A2F                        3F            .byte	$3F
02857 0A30                        3F            .byte	$3F
02858 0A31                        3F            .byte	$3F
02859 0A32                        3F            .byte	$3F
02860 0A33                        3F            .byte	$3F
02861 0A34                        3F            .byte	$3F
02862 0A35                        3F            .byte	$3F
02863 0A36                        3F            .byte	$3F
02864 0A37                        3F            .byte	$3F
02865 0A38                        3F            .byte	$3F
02866 0A39                        3F            .byte	$3F
02867                                           ! 622   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
02868 0A3A                        00            .byte	0
02869 0A3B                        00            .byte	0
02870 0A3C                        00            .byte	0
02871 0A3D                        00            .byte	0
02872 0A3E                        00            .byte	0
02873 0A3F                        00            .byte	0
02874 0A40                        00            .byte	0
02875 0A41                        00            .byte	0
02876 0A42                        00            .byte	0
02877 0A43                        00            .byte	0
02878 0A44                        00            .byte	0
02879 0A45                        00            .byte	0
02880 0A46                        00            .byte	0
02881 0A47                        00            .byte	0
02882 0A48                        00            .byte	0
02883 0A49                        00            .byte	0
02884 0A4A                        00            .byte	0
02885 0A4B                        00            .byte	0
02886 0A4C                        00            .byte	0
02887 0A4D                        00            .byte	0
02888 0A4E                        00            .byte	0
02889 0A4F                        00            .byte	0
02890 0A50                        00            .byte	0
02891 0A51                        00            .byte	0
02892                                           ! 623   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02893 0A52                        2A            .byte	$2A
02894 0A53                        2A            .byte	$2A
02895 0A54                        2A            .byte	$2A
02896 0A55                        2A            .byte	$2A
02897 0A56                        2A            .byte	$2A
02898 0A57                        2A            .byte	$2A
02899 0A58                        2A            .byte	$2A
02900 0A59                        2A            .byte	$2A
02901 0A5A                        2A            .byte	$2A
02902 0A5B                        2A            .byte	$2A
02903 0A5C                        2A            .byte	$2A
02904 0A5D                        2A            .byte	$2A
02905 0A5E                        2A            .byte	$2A
02906 0A5F                        2A            .byte	$2A
02907 0A60                        2A            .byte	$2A
02908 0A61                        2A            .byte	$2A
02909 0A62                        2A            .byte	$2A
02910 0A63                        2A            .byte	$2A
02911 0A64                        2A            .byte	$2A
02912 0A65                        2A            .byte	$2A
02913 0A66                        2A            .byte	$2A
02914 0A67                        2A            .byte	$2A
02915 0A68                        2A            .byte	$2A
02916 0A69                        2A            .byte	$2A
02917                                           ! 624   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02918 0A6A                        2A            .byte	$2A
02919 0A6B                        2A            .byte	$2A
02920 0A6C                        2A            .byte	$2A
02921 0A6D                        2A            .byte	$2A
02922 0A6E                        2A            .byte	$2A
02923 0A6F                        2A            .byte	$2A
02924 0A70                        2A            .byte	$2A
02925 0A71                        2A            .byte	$2A
02926 0A72                        2A            .byte	$2A
02927 0A73                        2A            .byte	$2A
02928 0A74                        2A            .byte	$2A
02929 0A75                        2A            .byte	$2A
02930 0A76                        2A            .byte	$2A
02931 0A77                        2A            .byte	$2A
02932 0A78                        2A            .byte	$2A
02933 0A79                        2A            .byte	$2A
02934 0A7A                        2A            .byte	$2A
02935 0A7B                        2A            .byte	$2A
02936 0A7C                        2A            .byte	$2A
02937 0A7D                        2A            .byte	$2A
02938 0A7E                        2A            .byte	$2A
02939 0A7F                        2A            .byte	$2A
02940 0A80                        2A            .byte	$2A
02941 0A81                        2A            .byte	$2A
02942                                           ! 625   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
02943 0A82                        3F            .byte	$3F
02944 0A83                        3F            .byte	$3F
02945 0A84                        3F            .byte	$3F
02946 0A85                        3F            .byte	$3F
02947 0A86                        3F            .byte	$3F
02948 0A87                        3F            .byte	$3F
02949 0A88                        3F            .byte	$3F
02950 0A89                        3F            .byte	$3F
02951 0A8A                        3F            .byte	$3F
02952 0A8B                        3F            .byte	$3F
02953 0A8C                        3F            .byte	$3F
02954 0A8D                        3F            .byte	$3F
02955 0A8E                        3F            .byte	$3F
02956 0A8F                        3F            .byte	$3F
02957 0A90                        3F            .byte	$3F
02958 0A91                        3F            .byte	$3F
02959 0A92                        3F            .byte	$3F
02960 0A93                        3F            .byte	$3F
02961 0A94                        3F            .byte	$3F
02962 0A95                        3F            .byte	$3F
02963 0A96                        3F            .byte	$3F
02964 0A97                        3F            .byte	$3F
02965 0A98                        3F            .byte	$3F
02966                                           ! 626 };
02967 0A99                        3F            .byte	$3F
02968                                           !BCC_EOS
02969                                           ! 627 static Bit8u palette1[63+1][3]=
02970                                           ! 628 {
02971                       00000A9A            _palette1:
02972                                           ! 629   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
02973 0A9A                        00            .byte	0
02974 0A9B                        00            .byte	0
02975 0A9C                        00            .byte	0
02976 0A9D                        00            .byte	0
02977 0A9E                        00            .byte	0
02978 0A9F                        2A            .byte	$2A
02979 0AA0                        00            .byte	0
02980 0AA1                        2A            .byte	$2A
02981 0AA2                        00            .byte	0
02982 0AA3                        00            .byte	0
02983 0AA4                        2A            .byte	$2A
02984 0AA5                        2A            .byte	$2A
02985 0AA6                        2A            .byte	$2A
02986 0AA7                        00            .byte	0
02987 0AA8                        00            .byte	0
02988 0AA9                        2A            .byte	$2A
02989 0AAA                        00            .byte	0
02990 0AAB                        2A            .byte	$2A
02991 0AAC                        2A            .byte	$2A
02992 0AAD                        15            .byte	$15
02993 0AAE                        00            .byte	0
02994 0AAF                        2A            .byte	$2A
02995 0AB0                        2A            .byte	$2A
02996 0AB1                        2A            .byte	$2A
02997                                           ! 630   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
02998 0AB2                        00            .byte	0
02999 0AB3                        00            .byte	0
03000 0AB4                        00            .byte	0
03001 0AB5                        00            .byte	0
03002 0AB6                        00            .byte	0
03003 0AB7                        2A            .byte	$2A
03004 0AB8                        00            .byte	0
03005 0AB9                        2A            .byte	$2A
03006 0ABA                        00            .byte	0
03007 0ABB                        00            .byte	0
03008 0ABC                        2A            .byte	$2A
03009 0ABD                        2A            .byte	$2A
03010 0ABE                        2A            .byte	$2A
03011 0ABF                        00            .byte	0
03012 0AC0                        00            .byte	0
03013 0AC1                        2A            .byte	$2A
03014 0AC2                        00            .byte	0
03015 0AC3                        2A            .byte	$2A
03016 0AC4                        2A            .byte	$2A
03017 0AC5                        15            .byte	$15
03018 0AC6                        00            .byte	0
03019 0AC7                        2A            .byte	$2A
03020 0AC8                        2A            .byte	$2A
03021 0AC9                        2A            .byte	$2A
03022                                           ! 631   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03023 0ACA                        15            .byte	$15
03024 0ACB                        15            .byte	$15
03025 0ACC                        15            .byte	$15
03026 0ACD                        15            .byte	$15
03027 0ACE                        15            .byte	$15
03028 0ACF                        3F            .byte	$3F
03029 0AD0                        15            .byte	$15
03030 0AD1                        3F            .byte	$3F
03031 0AD2                        15            .byte	$15
03032 0AD3                        15            .byte	$15
03033 0AD4                        3F            .byte	$3F
03034 0AD5                        3F            .byte	$3F
03035 0AD6                        3F            .byte	$3F
03036 0AD7                        15            .byte	$15
03037 0AD8                        15            .byte	$15
03038 0AD9                        3F            .byte	$3F
03039 0ADA                        15            .byte	$15
03040 0ADB                        3F            .byte	$3F
03041 0ADC                        3F            .byte	$3F
03042 0ADD                        3F            .byte	$3F
03043 0ADE                        15            .byte	$15
03044 0ADF                        3F            .byte	$3F
03045 0AE0                        3F            .byte	$3F
03046 0AE1                        3F            .byte	$3F
03047                                           ! 632   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03048 0AE2                        15            .byte	$15
03049 0AE3                        15            .byte	$15
03050 0AE4                        15            .byte	$15
03051 0AE5                        15            .byte	$15
03052 0AE6                        15            .byte	$15
03053 0AE7                        3F            .byte	$3F
03054 0AE8                        15            .byte	$15
03055 0AE9                        3F            .byte	$3F
03056 0AEA                        15            .byte	$15
03057 0AEB                        15            .byte	$15
03058 0AEC                        3F            .byte	$3F
03059 0AED                        3F            .byte	$3F
03060 0AEE                        3F            .byte	$3F
03061 0AEF                        15            .byte	$15
03062 0AF0                        15            .byte	$15
03063 0AF1                        3F            .byte	$3F
03064 0AF2                        15            .byte	$15
03065 0AF3                        3F            .byte	$3F
03066 0AF4                        3F            .byte	$3F
03067 0AF5                        3F            .byte	$3F
03068 0AF6                        15            .byte	$15
03069 0AF7                        3F            .byte	$3F
03070 0AF8                        3F            .byte	$3F
03071 0AF9                        3F            .byte	$3F
03072                                           ! 633   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03073 0AFA                        00            .byte	0
03074 0AFB                        00            .byte	0
03075 0AFC                        00            .byte	0
03076 0AFD                        00            .byte	0
03077 0AFE                        00            .byte	0
03078 0AFF                        2A            .byte	$2A
03079 0B00                        00            .byte	0
03080 0B01                        2A            .byte	$2A
03081 0B02                        00            .byte	0
03082 0B03                        00            .byte	0
03083 0B04                        2A            .byte	$2A
03084 0B05                        2A            .byte	$2A
03085 0B06                        2A            .byte	$2A
03086 0B07                        00            .byte	0
03087 0B08                        00            .byte	0
03088 0B09                        2A            .byte	$2A
03089 0B0A                        00            .byte	0
03090 0B0B                        2A            .byte	$2A
03091 0B0C                        2A            .byte	$2A
03092 0B0D                        15            .byte	$15
03093 0B0E                        00            .byte	0
03094 0B0F                        2A            .byte	$2A
03095 0B10                        2A            .byte	$2A
03096 0B11                        2A            .byte	$2A
03097                                           ! 634   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03098 0B12                        00            .byte	0
03099 0B13                        00            .byte	0
03100 0B14                        00            .byte	0
03101 0B15                        00            .byte	0
03102 0B16                        00            .byte	0
03103 0B17                        2A            .byte	$2A
03104 0B18                        00            .byte	0
03105 0B19                        2A            .byte	$2A
03106 0B1A                        00            .byte	0
03107 0B1B                        00            .byte	0
03108 0B1C                        2A            .byte	$2A
03109 0B1D                        2A            .byte	$2A
03110 0B1E                        2A            .byte	$2A
03111 0B1F                        00            .byte	0
03112 0B20                        00            .byte	0
03113 0B21                        2A            .byte	$2A
03114 0B22                        00            .byte	0
03115 0B23                        2A            .byte	$2A
03116 0B24                        2A            .byte	$2A
03117 0B25                        15            .byte	$15
03118 0B26                        00            .byte	0
03119 0B27                        2A            .byte	$2A
03120 0B28                        2A            .byte	$2A
03121 0B29                        2A            .byte	$2A
03122                                           ! 635   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03123 0B2A                        15            .byte	$15
03124 0B2B                        15            .byte	$15
03125 0B2C                        15            .byte	$15
03126 0B2D                        15            .byte	$15
03127 0B2E                        15            .byte	$15
03128 0B2F                        3F            .byte	$3F
03129 0B30                        15            .byte	$15
03130 0B31                        3F            .byte	$3F
03131 0B32                        15            .byte	$15
03132 0B33                        15            .byte	$15
03133 0B34                        3F            .byte	$3F
03134 0B35                        3F            .byte	$3F
03135 0B36                        3F            .byte	$3F
03136 0B37                        15            .byte	$15
03137 0B38                        15            .byte	$15
03138 0B39                        3F            .byte	$3F
03139 0B3A                        15            .byte	$15
03140 0B3B                        3F            .byte	$3F
03141 0B3C                        3F            .byte	$3F
03142 0B3D                        3F            .byte	$3F
03143 0B3E                        15            .byte	$15
03144 0B3F                        3F            .byte	$3F
03145 0B40                        3F            .byte	$3F
03146 0B41                        3F            .byte	$3F
03147                                           ! 636   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03148 0B42                        15            .byte	$15
03149 0B43                        15            .byte	$15
03150 0B44                        15            .byte	$15
03151 0B45                        15            .byte	$15
03152 0B46                        15            .byte	$15
03153 0B47                        3F            .byte	$3F
03154 0B48                        15            .byte	$15
03155 0B49                        3F            .byte	$3F
03156 0B4A                        15            .byte	$15
03157 0B4B                        15            .byte	$15
03158 0B4C                        3F            .byte	$3F
03159 0B4D                        3F            .byte	$3F
03160 0B4E                        3F            .byte	$3F
03161 0B4F                        15            .byte	$15
03162 0B50                        15            .byte	$15
03163 0B51                        3F            .byte	$3F
03164 0B52                        15            .byte	$15
03165 0B53                        3F            .byte	$3F
03166 0B54                        3F            .byte	$3F
03167 0B55                        3F            .byte	$3F
03168 0B56                        15            .byte	$15
03169 0B57                        3F            .byte	$3F
03170 0B58                        3F            .byte	$3F
03171                                           ! 637 };
03172 0B59                        3F            .byte	$3F
03173                                           !BCC_EOS
03174                                           ! 638 static Bit8u palette2[63+1][3]=
03175                                           ! 639 {
03176                       00000B5A            _palette2:
03177                                           ! 640   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a,
03178 0B5A                        00            .byte	0
03179 0B5B                        00            .byte	0
03180 0B5C                        00            .byte	0
03181 0B5D                        00            .byte	0
03182 0B5E                        00            .byte	0
03183 0B5F                        2A            .byte	$2A
03184 0B60                        00            .byte	0
03185 0B61                        2A            .byte	$2A
03186 0B62                        00            .byte	0
03187 0B63                        00            .byte	0
03188 0B64                        2A            .byte	$2A
03189                                           ! 640  0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03190 0B65                        2A            .byte	$2A
03191 0B66                        2A            .byte	$2A
03192 0B67                        00            .byte	0
03193 0B68                        00            .byte	0
03194 0B69                        2A            .byte	$2A
03195 0B6A                        00            .byte	0
03196 0B6B                        2A            .byte	$2A
03197 0B6C                        2A            .byte	$2A
03198 0B6D                        2A            .byte	$2A
03199 0B6E                        00            .byte	0
03200 0B6F                        2A            .byte	$2A
03201 0B70                        2A            .byte	$2A
03202 0B71                        2A            .byte	$2A
03203                                           ! 641   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03204 0B72                        00            .byte	0
03205 0B73                        00            .byte	0
03206 0B74                        15            .byte	$15
03207 0B75                        00            .byte	0
03208 0B76                        00            .byte	0
03209 0B77                        3F            .byte	$3F
03210 0B78                        00            .byte	0
03211 0B79                        2A            .byte	$2A
03212 0B7A                        15            .byte	$15
03213 0B7B                        00            .byte	0
03214 0B7C                        2A            .byte	$2A
03215 0B7D                        3F            .byte	$3F
03216 0B7E                        2A            .byte	$2A
03217 0B7F                        00            .byte	0
03218 0B80                        15            .byte	$15
03219 0B81                        2A            .byte	$2A
03220 0B82                        00            .byte	0
03221 0B83                        3F            .byte	$3F
03222 0B84                        2A            .byte	$2A
03223 0B85                        2A            .byte	$2A
03224 0B86                        15            .byte	$15
03225 0B87                        2A            .byte	$2A
03226 0B88                        2A            .byte	$2A
03227 0B89                        3F            .byte	$3F
03228                                           ! 642   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03229 0B8A                        00            .byte	0
03230 0B8B                        15            .byte	$15
03231 0B8C                        00            .byte	0
03232 0B8D                        00            .byte	0
03233 0B8E                        15            .byte	$15
03234 0B8F                        2A            .byte	$2A
03235 0B90                        00            .byte	0
03236 0B91                        3F            .byte	$3F
03237 0B92                        00            .byte	0
03238 0B93                        00            .byte	0
03239 0B94                        3F            .byte	$3F
03240 0B95                        2A            .byte	$2A
03241 0B96                        2A            .byte	$2A
03242 0B97                        15            .byte	$15
03243 0B98                        00            .byte	0
03244 0B99                        2A            .byte	$2A
03245 0B9A                        15            .byte	$15
03246 0B9B                        2A            .byte	$2A
03247 0B9C                        2A            .byte	$2A
03248 0B9D                        3F            .byte	$3F
03249 0B9E                        00            .byte	0
03250 0B9F                        2A            .byte	$2A
03251 0BA0                        3F            .byte	$3F
03252 0BA1                        2A            .byte	$2A
03253                                           ! 643   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03254 0BA2                        00            .byte	0
03255 0BA3                        15            .byte	$15
03256 0BA4                        15            .byte	$15
03257 0BA5                        00            .byte	0
03258 0BA6                        15            .byte	$15
03259 0BA7                        3F            .byte	$3F
03260 0BA8                        00            .byte	0
03261 0BA9                        3F            .byte	$3F
03262 0BAA                        15            .byte	$15
03263 0BAB                        00            .byte	0
03264 0BAC                        3F            .byte	$3F
03265 0BAD                        3F            .byte	$3F
03266 0BAE                        2A            .byte	$2A
03267 0BAF                        15            .byte	$15
03268 0BB0                        15            .byte	$15
03269 0BB1                        2A            .byte	$2A
03270 0BB2                        15            .byte	$15
03271 0BB3                        3F            .byte	$3F
03272 0BB4                        2A            .byte	$2A
03273 0BB5                        3F            .byte	$3F
03274 0BB6                        15            .byte	$15
03275 0BB7                        2A            .byte	$2A
03276 0BB8                        3F            .byte	$3F
03277 0BB9                        3F            .byte	$3F
03278                                           ! 644   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03279 0BBA                        15            .byte	$15
03280 0BBB                        00            .byte	0
03281 0BBC                        00            .byte	0
03282 0BBD                        15            .byte	$15
03283 0BBE                        00            .byte	0
03284 0BBF                        2A            .byte	$2A
03285 0BC0                        15            .byte	$15
03286 0BC1                        2A            .byte	$2A
03287 0BC2                        00            .byte	0
03288 0BC3                        15            .byte	$15
03289 0BC4                        2A            .byte	$2A
03290 0BC5                        2A            .byte	$2A
03291 0BC6                        3F            .byte	$3F
03292 0BC7                        00            .byte	0
03293 0BC8                        00            .byte	0
03294 0BC9                        3F            .byte	$3F
03295 0BCA                        00            .byte	0
03296 0BCB                        2A            .byte	$2A
03297 0BCC                        3F            .byte	$3F
03298 0BCD                        2A            .byte	$2A
03299 0BCE                        00            .byte	0
03300 0BCF                        3F            .byte	$3F
03301 0BD0                        2A            .byte	$2A
03302 0BD1                        2A            .byte	$2A
03303                                           ! 645   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03304 0BD2                        15            .byte	$15
03305 0BD3                        00            .byte	0
03306 0BD4                        15            .byte	$15
03307 0BD5                        15            .byte	$15
03308 0BD6                        00            .byte	0
03309 0BD7                        3F            .byte	$3F
03310 0BD8                        15            .byte	$15
03311 0BD9                        2A            .byte	$2A
03312 0BDA                        15            .byte	$15
03313 0BDB                        15            .byte	$15
03314 0BDC                        2A            .byte	$2A
03315 0BDD                        3F            .byte	$3F
03316 0BDE                        3F            .byte	$3F
03317 0BDF                        00            .byte	0
03318 0BE0                        15            .byte	$15
03319 0BE1                        3F            .byte	$3F
03320 0BE2                        00            .byte	0
03321 0BE3                        3F            .byte	$3F
03322 0BE4                        3F            .byte	$3F
03323 0BE5                        2A            .byte	$2A
03324 0BE6                        15            .byte	$15
03325 0BE7                        3F            .byte	$3F
03326 0BE8                        2A            .byte	$2A
03327 0BE9                        3F            .byte	$3F
03328                                           ! 646   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03329 0BEA                        15            .byte	$15
03330 0BEB                        15            .byte	$15
03331 0BEC                        00            .byte	0
03332 0BED                        15            .byte	$15
03333 0BEE                        15            .byte	$15
03334 0BEF                        2A            .byte	$2A
03335 0BF0                        15            .byte	$15
03336 0BF1                        3F            .byte	$3F
03337 0BF2                        00            .byte	0
03338 0BF3                        15            .byte	$15
03339 0BF4                        3F            .byte	$3F
03340 0BF5                        2A            .byte	$2A
03341 0BF6                        3F            .byte	$3F
03342 0BF7                        15            .byte	$15
03343 0BF8                        00            .byte	0
03344 0BF9                        3F            .byte	$3F
03345 0BFA                        15            .byte	$15
03346 0BFB                        2A            .byte	$2A
03347 0BFC                        3F            .byte	$3F
03348 0BFD                        3F            .byte	$3F
03349 0BFE                        00            .byte	0
03350 0BFF                        3F            .byte	$3F
03351 0C00                        3F            .byte	$3F
03352 0C01                        2A            .byte	$2A
03353                                           ! 647   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03354 0C02                        15            .byte	$15
03355 0C03                        15            .byte	$15
03356 0C04                        15            .byte	$15
03357 0C05                        15            .byte	$15
03358 0C06                        15            .byte	$15
03359 0C07                        3F            .byte	$3F
03360 0C08                        15            .byte	$15
03361 0C09                        3F            .byte	$3F
03362 0C0A                        15            .byte	$15
03363 0C0B                        15            .byte	$15
03364 0C0C                        3F            .byte	$3F
03365 0C0D                        3F            .byte	$3F
03366 0C0E                        3F            .byte	$3F
03367 0C0F                        15            .byte	$15
03368 0C10                        15            .byte	$15
03369 0C11                        3F            .byte	$3F
03370 0C12                        15            .byte	$15
03371 0C13                        3F            .byte	$3F
03372 0C14                        3F            .byte	$3F
03373 0C15                        3F            .byte	$3F
03374 0C16                        15            .byte	$15
03375 0C17                        3F            .byte	$3F
03376 0C18                        3F            .byte	$3F
03377                                           ! 648 };
03378 0C19                        3F            .byte	$3F
03379                                           !BCC_EOS
03380                                           ! 649 static Bit8u palette3[256][3]=
03381                                           ! 650 {
03382                       00000C1A            _palette3:
03383                                           ! 651   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03384 0C1A                        00            .byte	0
03385 0C1B                        00            .byte	0
03386 0C1C                        00            .byte	0
03387 0C1D                        00            .byte	0
03388 0C1E                        00            .byte	0
03389 0C1F                        2A            .byte	$2A
03390 0C20                        00            .byte	0
03391 0C21                        2A            .byte	$2A
03392 0C22                        00            .byte	0
03393 0C23                        00            .byte	0
03394 0C24                        2A            .byte	$2A
03395 0C25                        2A            .byte	$2A
03396 0C26                        2A            .byte	$2A
03397 0C27                        00            .byte	0
03398 0C28                        00            .byte	0
03399 0C29                        2A            .byte	$2A
03400 0C2A                        00            .byte	0
03401 0C2B                        2A            .byte	$2A
03402 0C2C                        2A            .byte	$2A
03403 0C2D                        15            .byte	$15
03404 0C2E                        00            .byte	0
03405 0C2F                        2A            .byte	$2A
03406 0C30                        2A            .byte	$2A
03407 0C31                        2A            .byte	$2A
03408                                           ! 652   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03409 0C32                        15            .byte	$15
03410 0C33                        15            .byte	$15
03411 0C34                        15            .byte	$15
03412 0C35                        15            .byte	$15
03413 0C36                        15            .byte	$15
03414 0C37                        3F            .byte	$3F
03415 0C38                        15            .byte	$15
03416 0C39                        3F            .byte	$3F
03417 0C3A                        15            .byte	$15
03418 0C3B                        15            .byte	$15
03419 0C3C                        3F            .byte	$3F
03420 0C3D                        3F            .byte	$3F
03421 0C3E                        3F            .byte	$3F
03422 0C3F                        15            .byte	$15
03423 0C40                        15            .byte	$15
03424 0C41                        3F            .byte	$3F
03425 0C42                        15            .byte	$15
03426 0C43                        3F            .byte	$3F
03427 0C44                        3F            .byte	$3F
03428 0C45                        3F            .byte	$3F
03429 0C46                        15            .byte	$15
03430 0C47                        3F            .byte	$3F
03431 0C48                        3F            .byte	$3F
03432 0C49                        3F            .byte	$3F
03433                                           ! 653   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03434 0C4A                        00            .byte	0
03435 0C4B                        00            .byte	0
03436 0C4C                        00            .byte	0
03437 0C4D                        05            .byte	5
03438 0C4E                        05            .byte	5
03439 0C4F                        05            .byte	5
03440 0C50                        08            .byte	8
03441 0C51                        08            .byte	8
03442 0C52                        08            .byte	8
03443 0C53                        0B            .byte	$B
03444 0C54                        0B            .byte	$B
03445 0C55                        0B            .byte	$B
03446 0C56                        0E            .byte	$E
03447 0C57                        0E            .byte	$E
03448 0C58                        0E            .byte	$E
03449 0C59                        11            .byte	$11
03450 0C5A                        11            .byte	$11
03451 0C5B                        11            .byte	$11
03452 0C5C                        14            .byte	$14
03453 0C5D                        14            .byte	$14
03454 0C5E                        14            .byte	$14
03455 0C5F                        18            .byte	$18
03456 0C60                        18            .byte	$18
03457 0C61                        18            .byte	$18
03458                                           ! 654   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03459 0C62                        1C            .byte	$1C
03460 0C63                        1C            .byte	$1C
03461 0C64                        1C            .byte	$1C
03462 0C65                        20            .byte	$20
03463 0C66                        20            .byte	$20
03464 0C67                        20            .byte	$20
03465 0C68                        24            .byte	$24
03466 0C69                        24            .byte	$24
03467 0C6A                        24            .byte	$24
03468 0C6B                        28            .byte	$28
03469 0C6C                        28            .byte	$28
03470 0C6D                        28            .byte	$28
03471 0C6E                        2D            .byte	$2D
03472 0C6F                        2D            .byte	$2D
03473 0C70                        2D            .byte	$2D
03474 0C71                        32            .byte	$32
03475 0C72                        32            .byte	$32
03476 0C73                        32            .byte	$32
03477 0C74                        38            .byte	$38
03478 0C75                        38            .byte	$38
03479 0C76                        38            .byte	$38
03480 0C77                        3F            .byte	$3F
03481 0C78                        3F            .byte	$3F
03482 0C79                        3F            .byte	$3F
03483                                           ! 655   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03484 0C7A                        00            .byte	0
03485 0C7B                        00            .byte	0
03486 0C7C                        3F            .byte	$3F
03487 0C7D                        10            .byte	$10
03488 0C7E                        00            .byte	0
03489 0C7F                        3F            .byte	$3F
03490 0C80                        1F            .byte	$1F
03491 0C81                        00            .byte	0
03492 0C82                        3F            .byte	$3F
03493 0C83                        2F            .byte	$2F
03494 0C84                        00            .byte	0
03495 0C85                        3F            .byte	$3F
03496 0C86                        3F            .byte	$3F
03497 0C87                        00            .byte	0
03498 0C88                        3F            .byte	$3F
03499 0C89                        3F            .byte	$3F
03500 0C8A                        00            .byte	0
03501 0C8B                        2F            .byte	$2F
03502 0C8C                        3F            .byte	$3F
03503 0C8D                        00            .byte	0
03504 0C8E                        1F            .byte	$1F
03505 0C8F                        3F            .byte	$3F
03506 0C90                        00            .byte	0
03507 0C91                        10            .byte	$10
03508                                           ! 656   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03509 0C92                        3F            .byte	$3F
03510 0C93                        00            .byte	0
03511 0C94                        00            .byte	0
03512 0C95                        3F            .byte	$3F
03513 0C96                        10            .byte	$10
03514 0C97                        00            .byte	0
03515 0C98                        3F            .byte	$3F
03516 0C99                        1F            .byte	$1F
03517 0C9A                        00            .byte	0
03518 0C9B                        3F            .byte	$3F
03519 0C9C                        2F            .byte	$2F
03520 0C9D                        00            .byte	0
03521 0C9E                        3F            .byte	$3F
03522 0C9F                        3F            .byte	$3F
03523 0CA0                        00            .byte	0
03524 0CA1                        2F            .byte	$2F
03525 0CA2                        3F            .byte	$3F
03526 0CA3                        00            .byte	0
03527 0CA4                        1F            .byte	$1F
03528 0CA5                        3F            .byte	$3F
03529 0CA6                        00            .byte	0
03530 0CA7                        10            .byte	$10
03531 0CA8                        3F            .byte	$3F
03532 0CA9                        00            .byte	0
03533                                           ! 657   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03534 0CAA                        00            .byte	0
03535 0CAB                        3F            .byte	$3F
03536 0CAC                        00            .byte	0
03537 0CAD                        00            .byte	0
03538 0CAE                        3F            .byte	$3F
03539 0CAF                        10            .byte	$10
03540 0CB0                        00            .byte	0
03541 0CB1                        3F            .byte	$3F
03542 0CB2                        1F            .byte	$1F
03543 0CB3                        00            .byte	0
03544 0CB4                        3F            .byte	$3F
03545 0CB5                        2F            .byte	$2F
03546 0CB6                        00            .byte	0
03547 0CB7                        3F            .byte	$3F
03548 0CB8                        3F            .byte	$3F
03549 0CB9                        00            .byte	0
03550 0CBA                        2F            .byte	$2F
03551 0CBB                        3F            .byte	$3F
03552 0CBC                        00            .byte	0
03553 0CBD                        1F            .byte	$1F
03554 0CBE                        3F            .byte	$3F
03555 0CBF                        00            .byte	0
03556 0CC0                        10            .byte	$10
03557 0CC1                        3F            .byte	$3F
03558                                           ! 658   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27
03559 0CC2                        1F            .byte	$1F
03560 0CC3                        1F            .byte	$1F
03561 0CC4                        3F            .byte	$3F
03562 0CC5                        27            .byte	$27
03563 0CC6                        1F            .byte	$1F
03564 0CC7                        3F            .byte	$3F
03565 0CC8                        2F            .byte	$2F
03566 0CC9                        1F            .byte	$1F
03567 0CCA                        3F            .byte	$3F
03568 0CCB                        37            .byte	$37
03569 0CCC                        1F            .byte	$1F
03570 0CCD                        3F            .byte	$3F
03571 0CCE                        3F            .byte	$3F
03572 0CCF                        1F            .byte	$1F
03573 0CD0                        3F            .byte	$3F
03574 0CD1                        3F            .byte	$3F
03575 0CD2                        1F            .byte	$1F
03576 0CD3                        37            .byte	$37
03577 0CD4                        3F            .byte	$3F
03578 0CD5                        1F            .byte	$1F
03579 0CD6                        2F            .byte	$2F
03580 0CD7                        3F            .byte	$3F
03581 0CD8                        1F            .byte	$1F
03582                                           ! 658 ,
03583 0CD9                        27            .byte	$27
03584                                           ! 659   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03585 0CDA                        3F            .byte	$3F
03586 0CDB                        1F            .byte	$1F
03587 0CDC                        1F            .byte	$1F
03588 0CDD                        3F            .byte	$3F
03589 0CDE                        27            .byte	$27
03590 0CDF                        1F            .byte	$1F
03591 0CE0                        3F            .byte	$3F
03592 0CE1                        2F            .byte	$2F
03593 0CE2                        1F            .byte	$1F
03594 0CE3                        3F            .byte	$3F
03595 0CE4                        37            .byte	$37
03596 0CE5                        1F            .byte	$1F
03597 0CE6                        3F            .byte	$3F
03598 0CE7                        3F            .byte	$3F
03599 0CE8                        1F            .byte	$1F
03600 0CE9                        37            .byte	$37
03601 0CEA                        3F            .byte	$3F
03602 0CEB                        1F            .byte	$1F
03603 0CEC                        2F            .byte	$2F
03604 0CED                        3F            .byte	$3F
03605 0CEE                        1F            .byte	$1F
03606 0CEF                        27            .byte	$27
03607 0CF0                        3F            .byte	$3F
03608 0CF1                        1F            .byte	$1F
03609                                           ! 660   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03610 0CF2                        1F            .byte	$1F
03611 0CF3                        3F            .byte	$3F
03612 0CF4                        1F            .byte	$1F
03613 0CF5                        1F            .byte	$1F
03614 0CF6                        3F            .byte	$3F
03615 0CF7                        27            .byte	$27
03616 0CF8                        1F            .byte	$1F
03617 0CF9                        3F            .byte	$3F
03618 0CFA                        2F            .byte	$2F
03619 0CFB                        1F            .byte	$1F
03620 0CFC                        3F            .byte	$3F
03621 0CFD                        37            .byte	$37
03622 0CFE                        1F            .byte	$1F
03623 0CFF                        3F            .byte	$3F
03624 0D00                        3F            .byte	$3F
03625 0D01                        1F            .byte	$1F
03626 0D02                        37            .byte	$37
03627 0D03                        3F            .byte	$3F
03628 0D04                        1F            .byte	$1F
03629 0D05                        2F            .byte	$2F
03630 0D06                        3F            .byte	$3F
03631 0D07                        1F            .byte	$1F
03632 0D08                        27            .byte	$27
03633 0D09                        3F            .byte	$3F
03634                                           ! 661   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03635 0D0A                        2D            .byte	$2D
03636 0D0B                        2D            .byte	$2D
03637 0D0C                        3F            .byte	$3F
03638 0D0D                        31            .byte	$31
03639 0D0E                        2D            .byte	$2D
03640 0D0F                        3F            .byte	$3F
03641 0D10                        36            .byte	$36
03642 0D11                        2D            .byte	$2D
03643 0D12                        3F            .byte	$3F
03644 0D13                        3A            .byte	$3A
03645 0D14                        2D            .byte	$2D
03646 0D15                        3F            .byte	$3F
03647 0D16                        3F            .byte	$3F
03648 0D17                        2D            .byte	$2D
03649 0D18                        3F            .byte	$3F
03650 0D19                        3F            .byte	$3F
03651 0D1A                        2D            .byte	$2D
03652 0D1B                        3A            .byte	$3A
03653 0D1C                        3F            .byte	$3F
03654 0D1D                        2D            .byte	$2D
03655 0D1E                        36            .byte	$36
03656 0D1F                        3F            .byte	$3F
03657 0D20                        2D            .byte	$2D
03658 0D21                        31            .byte	$31
03659                                           ! 662   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03660 0D22                        3F            .byte	$3F
03661 0D23                        2D            .byte	$2D
03662 0D24                        2D            .byte	$2D
03663 0D25                        3F            .byte	$3F
03664 0D26                        31            .byte	$31
03665 0D27                        2D            .byte	$2D
03666 0D28                        3F            .byte	$3F
03667 0D29                        36            .byte	$36
03668 0D2A                        2D            .byte	$2D
03669 0D2B                        3F            .byte	$3F
03670 0D2C                        3A            .byte	$3A
03671 0D2D                        2D            .byte	$2D
03672 0D2E                        3F            .byte	$3F
03673 0D2F                        3F            .byte	$3F
03674 0D30                        2D            .byte	$2D
03675 0D31                        3A            .byte	$3A
03676 0D32                        3F            .byte	$3F
03677 0D33                        2D            .byte	$2D
03678 0D34                        36            .byte	$36
03679 0D35                        3F            .byte	$3F
03680 0D36                        2D            .byte	$2D
03681 0D37                        31            .byte	$31
03682 0D38                        3F            .byte	$3F
03683 0D39                        2D            .byte	$2D
03684                                           ! 663   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03685 0D3A                        2D            .byte	$2D
03686 0D3B                        3F            .byte	$3F
03687 0D3C                        2D            .byte	$2D
03688 0D3D                        2D            .byte	$2D
03689 0D3E                        3F            .byte	$3F
03690 0D3F                        31            .byte	$31
03691 0D40                        2D            .byte	$2D
03692 0D41                        3F            .byte	$3F
03693 0D42                        36            .byte	$36
03694 0D43                        2D            .byte	$2D
03695 0D44                        3F            .byte	$3F
03696 0D45                        3A            .byte	$3A
03697 0D46                        2D            .byte	$2D
03698 0D47                        3F            .byte	$3F
03699 0D48                        3F            .byte	$3F
03700 0D49                        2D            .byte	$2D
03701 0D4A                        3A            .byte	$3A
03702 0D4B                        3F            .byte	$3F
03703 0D4C                        2D            .byte	$2D
03704 0D4D                        36            .byte	$36
03705 0D4E                        3F            .byte	$3F
03706 0D4F                        2D            .byte	$2D
03707 0D50                        31            .byte	$31
03708 0D51                        3F            .byte	$3F
03709                                           ! 664   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
03710 0D52                        00            .byte	0
03711 0D53                        00            .byte	0
03712 0D54                        1C            .byte	$1C
03713 0D55                        07            .byte	7
03714 0D56                        00            .byte	0
03715 0D57                        1C            .byte	$1C
03716 0D58                        0E            .byte	$E
03717 0D59                        00            .byte	0
03718 0D5A                        1C            .byte	$1C
03719 0D5B                        15            .byte	$15
03720 0D5C                        00            .byte	0
03721 0D5D                        1C            .byte	$1C
03722 0D5E                        1C            .byte	$1C
03723 0D5F                        00            .byte	0
03724 0D60                        1C            .byte	$1C
03725 0D61                        1C            .byte	$1C
03726 0D62                        00            .byte	0
03727 0D63                        15            .byte	$15
03728 0D64                        1C            .byte	$1C
03729 0D65                        00            .byte	0
03730 0D66                        0E            .byte	$E
03731 0D67                        1C            .byte	$1C
03732 0D68                        00            .byte	0
03733 0D69                        07            .byte	7
03734                                           ! 665   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
03735 0D6A                        1C            .byte	$1C
03736 0D6B                        00            .byte	0
03737 0D6C                        00            .byte	0
03738 0D6D                        1C            .byte	$1C
03739 0D6E                        07            .byte	7
03740 0D6F                        00            .byte	0
03741 0D70                        1C            .byte	$1C
03742 0D71                        0E            .byte	$E
03743 0D72                        00            .byte	0
03744 0D73                        1C            .byte	$1C
03745 0D74                        15            .byte	$15
03746 0D75                        00            .byte	0
03747 0D76                        1C            .byte	$1C
03748 0D77                        1C            .byte	$1C
03749 0D78                        00            .byte	0
03750 0D79                        15            .byte	$15
03751 0D7A                        1C            .byte	$1C
03752 0D7B                        00            .byte	0
03753 0D7C                        0E            .byte	$E
03754 0D7D                        1C            .byte	$1C
03755 0D7E                        00            .byte	0
03756 0D7F                        07            .byte	7
03757 0D80                        1C            .byte	$1C
03758 0D81                        00            .byte	0
03759                                           ! 666   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
03760 0D82                        00            .byte	0
03761 0D83                        1C            .byte	$1C
03762 0D84                        00            .byte	0
03763 0D85                        00            .byte	0
03764 0D86                        1C            .byte	$1C
03765 0D87                        07            .byte	7
03766 0D88                        00            .byte	0
03767 0D89                        1C            .byte	$1C
03768 0D8A                        0E            .byte	$E
03769 0D8B                        00            .byte	0
03770 0D8C                        1C            .byte	$1C
03771 0D8D                        15            .byte	$15
03772 0D8E                        00            .byte	0
03773 0D8F                        1C            .byte	$1C
03774 0D90                        1C            .byte	$1C
03775 0D91                        00            .byte	0
03776 0D92                        15            .byte	$15
03777 0D93                        1C            .byte	$1C
03778 0D94                        00            .byte	0
03779 0D95                        0E            .byte	$E
03780 0D96                        1C            .byte	$1C
03781 0D97                        00            .byte	0
03782 0D98                        07            .byte	7
03783 0D99                        1C            .byte	$1C
03784                                           ! 667   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
03785 0D9A                        0E            .byte	$E
03786 0D9B                        0E            .byte	$E
03787 0D9C                        1C            .byte	$1C
03788 0D9D                        11            .byte	$11
03789 0D9E                        0E            .byte	$E
03790 0D9F                        1C            .byte	$1C
03791 0DA0                        15            .byte	$15
03792 0DA1                        0E            .byte	$E
03793 0DA2                        1C            .byte	$1C
03794 0DA3                        18            .byte	$18
03795 0DA4                        0E            .byte	$E
03796 0DA5                        1C            .byte	$1C
03797 0DA6                        1C            .byte	$1C
03798 0DA7                        0E            .byte	$E
03799 0DA8                        1C            .byte	$1C
03800 0DA9                        1C            .byte	$1C
03801 0DAA                        0E            .byte	$E
03802 0DAB                        18            .byte	$18
03803 0DAC                        1C            .byte	$1C
03804 0DAD                        0E            .byte	$E
03805 0DAE                        15            .byte	$15
03806 0DAF                        1C            .byte	$1C
03807 0DB0                        0E            .byte	$E
03808 0DB1                        11            .byte	$11
03809                                           ! 668   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
03810 0DB2                        1C            .byte	$1C
03811 0DB3                        0E            .byte	$E
03812 0DB4                        0E            .byte	$E
03813 0DB5                        1C            .byte	$1C
03814 0DB6                        11            .byte	$11
03815 0DB7                        0E            .byte	$E
03816 0DB8                        1C            .byte	$1C
03817 0DB9                        15            .byte	$15
03818 0DBA                        0E            .byte	$E
03819 0DBB                        1C            .byte	$1C
03820 0DBC                        18            .byte	$18
03821 0DBD                        0E            .byte	$E
03822 0DBE                        1C            .byte	$1C
03823 0DBF                        1C            .byte	$1C
03824 0DC0                        0E            .byte	$E
03825 0DC1                        18            .byte	$18
03826 0DC2                        1C            .byte	$1C
03827 0DC3                        0E            .byte	$E
03828 0DC4                        15            .byte	$15
03829 0DC5                        1C            .byte	$1C
03830 0DC6                        0E            .byte	$E
03831 0DC7                        11            .byte	$11
03832 0DC8                        1C            .byte	$1C
03833 0DC9                        0E            .byte	$E
03834                                           ! 669   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
03835 0DCA                        0E            .byte	$E
03836 0DCB                        1C            .byte	$1C
03837 0DCC                        0E            .byte	$E
03838 0DCD                        0E            .byte	$E
03839 0DCE                        1C            .byte	$1C
03840 0DCF                        11            .byte	$11
03841 0DD0                        0E            .byte	$E
03842 0DD1                        1C            .byte	$1C
03843 0DD2                        15            .byte	$15
03844 0DD3                        0E            .byte	$E
03845 0DD4                        1C            .byte	$1C
03846 0DD5                        18            .byte	$18
03847 0DD6                        0E            .byte	$E
03848 0DD7                        1C            .byte	$1C
03849 0DD8                        1C            .byte	$1C
03850 0DD9                        0E            .byte	$E
03851 0DDA                        18            .byte	$18
03852 0DDB                        1C            .byte	$1C
03853 0DDC                        0E            .byte	$E
03854 0DDD                        15            .byte	$15
03855 0DDE                        1C            .byte	$1C
03856 0DDF                        0E            .byte	$E
03857 0DE0                        11            .byte	$11
03858 0DE1                        1C            .byte	$1C
03859                                           ! 670   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
03860 0DE2                        14            .byte	$14
03861 0DE3                        14            .byte	$14
03862 0DE4                        1C            .byte	$1C
03863 0DE5                        16            .byte	$16
03864 0DE6                        14            .byte	$14
03865 0DE7                        1C            .byte	$1C
03866 0DE8                        18            .byte	$18
03867 0DE9                        14            .byte	$14
03868 0DEA                        1C            .byte	$1C
03869 0DEB                        1A            .byte	$1A
03870 0DEC                        14            .byte	$14
03871 0DED                        1C            .byte	$1C
03872 0DEE                        1C            .byte	$1C
03873 0DEF                        14            .byte	$14
03874 0DF0                        1C            .byte	$1C
03875 0DF1                        1C            .byte	$1C
03876 0DF2                        14            .byte	$14
03877 0DF3                        1A            .byte	$1A
03878 0DF4                        1C            .byte	$1C
03879 0DF5                        14            .byte	$14
03880 0DF6                        18            .byte	$18
03881 0DF7                        1C            .byte	$1C
03882 0DF8                        14            .byte	$14
03883 0DF9                        16            .byte	$16
03884                                           ! 671   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
03885 0DFA                        1C            .byte	$1C
03886 0DFB                        14            .byte	$14
03887 0DFC                        14            .byte	$14
03888 0DFD                        1C            .byte	$1C
03889 0DFE                        16            .byte	$16
03890 0DFF                        14            .byte	$14
03891 0E00                        1C            .byte	$1C
03892 0E01                        18            .byte	$18
03893 0E02                        14            .byte	$14
03894 0E03                        1C            .byte	$1C
03895 0E04                        1A            .byte	$1A
03896 0E05                        14            .byte	$14
03897 0E06                        1C            .byte	$1C
03898 0E07                        1C            .byte	$1C
03899 0E08                        14            .byte	$14
03900 0E09                        1A            .byte	$1A
03901 0E0A                        1C            .byte	$1C
03902 0E0B                        14            .byte	$14
03903 0E0C                        18            .byte	$18
03904 0E0D                        1C            .byte	$1C
03905 0E0E                        14            .byte	$14
03906 0E0F                        16            .byte	$16
03907 0E10                        1C            .byte	$1C
03908 0E11                        14            .byte	$14
03909                                           ! 672   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
03910 0E12                        14            .byte	$14
03911 0E13                        1C            .byte	$1C
03912 0E14                        14            .byte	$14
03913 0E15                        14            .byte	$14
03914 0E16                        1C            .byte	$1C
03915 0E17                        16            .byte	$16
03916 0E18                        14            .byte	$14
03917 0E19                        1C            .byte	$1C
03918 0E1A                        18            .byte	$18
03919 0E1B                        14            .byte	$14
03920 0E1C                        1C            .byte	$1C
03921 0E1D                        1A            .byte	$1A
03922 0E1E                        14            .byte	$14
03923 0E1F                        1C            .byte	$1C
03924 0E20                        1C            .byte	$1C
03925 0E21                        14            .byte	$14
03926 0E22                        1A            .byte	$1A
03927 0E23                        1C            .byte	$1C
03928 0E24                        14            .byte	$14
03929 0E25                        18            .byte	$18
03930 0E26                        1C            .byte	$1C
03931 0E27                        14            .byte	$14
03932 0E28                        16            .byte	$16
03933 0E29                        1C            .byte	$1C
03934                                           ! 673   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
03935 0E2A                        00            .byte	0
03936 0E2B                        00            .byte	0
03937 0E2C                        10            .byte	$10
03938 0E2D                        04            .byte	4
03939 0E2E                        00            .byte	0
03940 0E2F                        10            .byte	$10
03941 0E30                        08            .byte	8
03942 0E31                        00            .byte	0
03943 0E32                        10            .byte	$10
03944 0E33                        0C            .byte	$C
03945 0E34                        00            .byte	0
03946 0E35                        10            .byte	$10
03947 0E36                        10            .byte	$10
03948 0E37                        00            .byte	0
03949 0E38                        10            .byte	$10
03950 0E39                        10            .byte	$10
03951 0E3A                        00            .byte	0
03952 0E3B                        0C            .byte	$C
03953 0E3C                        10            .byte	$10
03954 0E3D                        00            .byte	0
03955 0E3E                        08            .byte	8
03956 0E3F                        10            .byte	$10
03957 0E40                        00            .byte	0
03958 0E41                        04            .byte	4
03959                                           ! 674   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00
03960 0E42                        10            .byte	$10
03961 0E43                        00            .byte	0
03962 0E44                        00            .byte	0
03963 0E45                        10            .byte	$10
03964 0E46                        04            .byte	4
03965 0E47                        00            .byte	0
03966 0E48                        10            .byte	$10
03967 0E49                        08            .byte	8
03968 0E4A                        00            .byte	0
03969 0E4B                        10            .byte	$10
03970 0E4C                        0C            .byte	$C
03971 0E4D                        00            .byte	0
03972 0E4E                        10            .byte	$10
03973 0E4F                        10            .byte	$10
03974 0E50                        00            .byte	0
03975 0E51                        0C            .byte	$C
03976 0E52                        10            .byte	$10
03977                                           ! 674 , 0x08,0x10,0x00, 0x04,0x10,0x00,
03978 0E53                        00            .byte	0
03979 0E54                        08            .byte	8
03980 0E55                        10            .byte	$10
03981 0E56                        00            .byte	0
03982 0E57                        04            .byte	4
03983 0E58                        10            .byte	$10
03984 0E59                        00            .byte	0
03985                                           ! 675   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
03986 0E5A                        00            .byte	0
03987 0E5B                        10            .byte	$10
03988 0E5C                        00            .byte	0
03989 0E5D                        00            .byte	0
03990 0E5E                        10            .byte	$10
03991 0E5F                        04            .byte	4
03992 0E60                        00            .byte	0
03993 0E61                        10            .byte	$10
03994 0E62                        08            .byte	8
03995 0E63                        00            .byte	0
03996 0E64                        10            .byte	$10
03997 0E65                        0C            .byte	$C
03998 0E66                        00            .byte	0
03999 0E67                        10            .byte	$10
04000 0E68                        10            .byte	$10
04001 0E69                        00            .byte	0
04002 0E6A                        0C            .byte	$C
04003 0E6B                        10            .byte	$10
04004 0E6C                        00            .byte	0
04005 0E6D                        08            .byte	8
04006 0E6E                        10            .byte	$10
04007 0E6F                        00            .byte	0
04008 0E70                        04            .byte	4
04009 0E71                        10            .byte	$10
04010                                           ! 676   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04011 0E72                        08            .byte	8
04012 0E73                        08            .byte	8
04013 0E74                        10            .byte	$10
04014 0E75                        0A            .byte	$A
04015 0E76                        08            .byte	8
04016 0E77                        10            .byte	$10
04017 0E78                        0C            .byte	$C
04018 0E79                        08            .byte	8
04019 0E7A                        10            .byte	$10
04020 0E7B                        0E            .byte	$E
04021 0E7C                        08            .byte	8
04022 0E7D                        10            .byte	$10
04023 0E7E                        10            .byte	$10
04024 0E7F                        08            .byte	8
04025 0E80                        10            .byte	$10
04026 0E81                        10            .byte	$10
04027 0E82                        08            .byte	8
04028 0E83                        0E            .byte	$E
04029 0E84                        10            .byte	$10
04030 0E85                        08            .byte	8
04031 0E86                        0C            .byte	$C
04032 0E87                        10            .byte	$10
04033 0E88                        08            .byte	8
04034 0E89                        0A            .byte	$A
04035                                           ! 677   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04036 0E8A                        10            .byte	$10
04037 0E8B                        08            .byte	8
04038 0E8C                        08            .byte	8
04039 0E8D                        10            .byte	$10
04040 0E8E                        0A            .byte	$A
04041 0E8F                        08            .byte	8
04042 0E90                        10            .byte	$10
04043 0E91                        0C            .byte	$C
04044 0E92                        08            .byte	8
04045 0E93                        10            .byte	$10
04046 0E94                        0E            .byte	$E
04047 0E95                        08            .byte	8
04048 0E96                        10            .byte	$10
04049 0E97                        10            .byte	$10
04050 0E98                        08            .byte	8
04051 0E99                        0E            .byte	$E
04052 0E9A                        10            .byte	$10
04053 0E9B                        08            .byte	8
04054 0E9C                        0C            .byte	$C
04055 0E9D                        10            .byte	$10
04056 0E9E                        08            .byte	8
04057 0E9F                        0A            .byte	$A
04058 0EA0                        10            .byte	$10
04059 0EA1                        08            .byte	8
04060                                           ! 678   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04061 0EA2                        08            .byte	8
04062 0EA3                        10            .byte	$10
04063 0EA4                        08            .byte	8
04064 0EA5                        08            .byte	8
04065 0EA6                        10            .byte	$10
04066 0EA7                        0A            .byte	$A
04067 0EA8                        08            .byte	8
04068 0EA9                        10            .byte	$10
04069 0EAA                        0C            .byte	$C
04070 0EAB                        08            .byte	8
04071 0EAC                        10            .byte	$10
04072 0EAD                        0E            .byte	$E
04073 0EAE                        08            .byte	8
04074 0EAF                        10            .byte	$10
04075 0EB0                        10            .byte	$10
04076 0EB1                        08            .byte	8
04077 0EB2                        0E            .byte	$E
04078 0EB3                        10            .byte	$10
04079 0EB4                        08            .byte	8
04080 0EB5                        0C            .byte	$C
04081 0EB6                        10            .byte	$10
04082 0EB7                        08            .byte	8
04083 0EB8                        0A            .byte	$A
04084 0EB9                        10            .byte	$10
04085                                           ! 679   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04086 0EBA                        0B            .byte	$B
04087 0EBB                        0B            .byte	$B
04088 0EBC                        10            .byte	$10
04089 0EBD                        0C            .byte	$C
04090 0EBE                        0B            .byte	$B
04091 0EBF                        10            .byte	$10
04092 0EC0                        0D            .byte	$D
04093 0EC1                        0B            .byte	$B
04094 0EC2                        10            .byte	$10
04095 0EC3                        0F            .byte	$F
04096 0EC4                        0B            .byte	$B
04097 0EC5                        10            .byte	$10
04098 0EC6                        10            .byte	$10
04099 0EC7                        0B            .byte	$B
04100 0EC8                        10            .byte	$10
04101 0EC9                        10            .byte	$10
04102 0ECA                        0B            .byte	$B
04103 0ECB                        0F            .byte	$F
04104 0ECC                        10            .byte	$10
04105 0ECD                        0B            .byte	$B
04106 0ECE                        0D            .byte	$D
04107 0ECF                        10            .byte	$10
04108 0ED0                        0B            .byte	$B
04109 0ED1                        0C            .byte	$C
04110                                           ! 680   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04111 0ED2                        10            .byte	$10
04112 0ED3                        0B            .byte	$B
04113 0ED4                        0B            .byte	$B
04114 0ED5                        10            .byte	$10
04115 0ED6                        0C            .byte	$C
04116 0ED7                        0B            .byte	$B
04117 0ED8                        10            .byte	$10
04118 0ED9                        0D            .byte	$D
04119 0EDA                        0B            .byte	$B
04120 0EDB                        10            .byte	$10
04121 0EDC                        0F            .byte	$F
04122 0EDD                        0B            .byte	$B
04123 0EDE                        10            .byte	$10
04124 0EDF                        10            .byte	$10
04125 0EE0                        0B            .byte	$B
04126 0EE1                        0F            .byte	$F
04127 0EE2                        10            .byte	$10
04128 0EE3                        0B            .byte	$B
04129 0EE4                        0D            .byte	$D
04130 0EE5                        10            .byte	$10
04131 0EE6                        0B            .byte	$B
04132 0EE7                        0C            .byte	$C
04133 0EE8                        10            .byte	$10
04134 0EE9                        0B            .byte	$B
04135                                           ! 681   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04136 0EEA                        0B            .byte	$B
04137 0EEB                        10            .byte	$10
04138 0EEC                        0B            .byte	$B
04139 0EED                        0B            .byte	$B
04140 0EEE                        10            .byte	$10
04141 0EEF                        0C            .byte	$C
04142 0EF0                        0B            .byte	$B
04143 0EF1                        10            .byte	$10
04144 0EF2                        0D            .byte	$D
04145 0EF3                        0B            .byte	$B
04146 0EF4                        10            .byte	$10
04147 0EF5                        0F            .byte	$F
04148 0EF6                        0B            .byte	$B
04149 0EF7                        10            .byte	$10
04150 0EF8                        10            .byte	$10
04151 0EF9                        0B            .byte	$B
04152 0EFA                        0F            .byte	$F
04153 0EFB                        10            .byte	$10
04154 0EFC                        0B            .byte	$B
04155 0EFD                        0D            .byte	$D
04156 0EFE                        10            .byte	$10
04157 0EFF                        0B            .byte	$B
04158 0F00                        0C            .byte	$C
04159 0F01                        10            .byte	$10
04160                                           ! 682   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04161 0F02                        00            .byte	0
04162 0F03                        00            .byte	0
04163 0F04                        00            .byte	0
04164 0F05                        00            .byte	0
04165 0F06                        00            .byte	0
04166 0F07                        00            .byte	0
04167 0F08                        00            .byte	0
04168 0F09                        00            .byte	0
04169 0F0A                        00            .byte	0
04170 0F0B                        00            .byte	0
04171 0F0C                        00            .byte	0
04172 0F0D                        00            .byte	0
04173 0F0E                        00            .byte	0
04174 0F0F                        00            .byte	0
04175 0F10                        00            .byte	0
04176 0F11                        00            .byte	0
04177 0F12                        00            .byte	0
04178 0F13                        00            .byte	0
04179 0F14                        00            .byte	0
04180 0F15                        00            .byte	0
04181 0F16                        00            .byte	0
04182 0F17                        00            .byte	0
04183 0F18                        00            .byte	0
04184                                           ! 683 };
04185 0F19                        00            .byte	0
04186                                           !BCC_EOS
04187                                           ! 684 static Bit8u static_functionality[0x10]=
04188                                           ! 685 {
04189                       00000F1A            _static_functionality:
04190                                           ! 686          0xff,
04191 0F1A                        FF            .byte	$FF
04192                                           ! 687          0xe0,
04193 0F1B                        E0            .byte	$E0
04194                                           ! 688          0x0f,
04195 0F1C                        0F            .byte	$F
04196                                           ! 689          0x00, 0x00, 0x00, 0x00,
04197 0F1D                        00            .byte	0
04198 0F1E                        00            .byte	0
04199 0F1F                        00            .byte	0
04200 0F20                        00            .byte	0
04201                                           ! 690          0x07,
04202 0F21                        07            .byte	7
04203                                           ! 691          0x02,
04204 0F22                        02            .byte	2
04205                                           ! 692          0x08,
04206 0F23                        08            .byte	8
04207                                           ! 693          0xe7,
04208 0F24                        E7            .byte	$E7
04209                                           ! 694          0x0c,
04210 0F25                        0C            .byte	$C
04211                                           ! 695          0x00,
04212 0F26                        00            .byte	0
04213                                           ! 696          0x00,
04214 0F27                        00            .byte	0
04215                                           ! 697          0x00,
04216 0F28                        00            .byte	0
04217                                           ! 698          0x00
04218                                           ! 699 };
04219 0F29                        00            .byte	0
04220                                           !BCC_EOS
04221                                           ! 700 static Bit8u vgafont8[256*8]=
04222                                           ! 701 {
04223                       00000F2A            _vgafont8:
04224                                           ! 702  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04225 0F2A                        00            .byte	0
04226 0F2B                        00            .byte	0
04227 0F2C                        00            .byte	0
04228 0F2D                        00            .byte	0
04229 0F2E                        00            .byte	0
04230 0F2F                        00            .byte	0
04231 0F30                        00            .byte	0
04232 0F31                        00            .byte	0
04233                                           ! 703  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04234 0F32                        7E            .byte	$7E
04235 0F33                        81            .byte	$81
04236 0F34                        A5            .byte	$A5
04237 0F35                        81            .byte	$81
04238 0F36                        BD            .byte	$BD
04239 0F37                        99            .byte	$99
04240 0F38                        81            .byte	$81
04241 0F39                        7E            .byte	$7E
04242                                           ! 704  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04243 0F3A                        7E            .byte	$7E
04244 0F3B                        FF            .byte	$FF
04245 0F3C                        DB            .byte	$DB
04246 0F3D                        FF            .byte	$FF
04247 0F3E                        C3            .byte	$C3
04248 0F3F                        E7            .byte	$E7
04249 0F40                        FF            .byte	$FF
04250 0F41                        7E            .byte	$7E
04251                                           ! 705  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04252 0F42                        6C            .byte	$6C
04253 0F43                        FE            .byte	$FE
04254 0F44                        FE            .byte	$FE
04255 0F45                        FE            .byte	$FE
04256 0F46                        7C            .byte	$7C
04257 0F47                        38            .byte	$38
04258 0F48                        10            .byte	$10
04259 0F49                        00            .byte	0
04260                                           ! 706  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04261 0F4A                        10            .byte	$10
04262 0F4B                        38            .byte	$38
04263 0F4C                        7C            .byte	$7C
04264 0F4D                        FE            .byte	$FE
04265 0F4E                        7C            .byte	$7C
04266 0F4F                        38            .byte	$38
04267 0F50                        10            .byte	$10
04268 0F51                        00            .byte	0
04269                                           ! 707  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04270 0F52                        38            .byte	$38
04271 0F53                        7C            .byte	$7C
04272 0F54                        38            .byte	$38
04273 0F55                        FE            .byte	$FE
04274 0F56                        FE            .byte	$FE
04275 0F57                        7C            .byte	$7C
04276 0F58                        38            .byte	$38
04277 0F59                        7C            .byte	$7C
04278                                           ! 708  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04279 0F5A                        10            .byte	$10
04280 0F5B                        10            .byte	$10
04281 0F5C                        38            .byte	$38
04282 0F5D                        7C            .byte	$7C
04283 0F5E                        FE            .byte	$FE
04284 0F5F                        7C            .byte	$7C
04285 0F60                        38            .byte	$38
04286 0F61                        7C            .byte	$7C
04287                                           ! 709  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04288 0F62                        00            .byte	0
04289 0F63                        00            .byte	0
04290 0F64                        18            .byte	$18
04291 0F65                        3C            .byte	$3C
04292 0F66                        3C            .byte	$3C
04293 0F67                        18            .byte	$18
04294 0F68                        00            .byte	0
04295 0F69                        00            .byte	0
04296                                           ! 710  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04297 0F6A                        FF            .byte	$FF
04298 0F6B                        FF            .byte	$FF
04299 0F6C                        E7            .byte	$E7
04300 0F6D                        C3            .byte	$C3
04301 0F6E                        C3            .byte	$C3
04302 0F6F                        E7            .byte	$E7
04303 0F70                        FF            .byte	$FF
04304 0F71                        FF            .byte	$FF
04305                                           ! 711  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04306 0F72                        00            .byte	0
04307 0F73                        3C            .byte	$3C
04308 0F74                        66            .byte	$66
04309 0F75                        42            .byte	$42
04310 0F76                        42            .byte	$42
04311 0F77                        66            .byte	$66
04312 0F78                        3C            .byte	$3C
04313 0F79                        00            .byte	0
04314                                           ! 712  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04315 0F7A                        FF            .byte	$FF
04316 0F7B                        C3            .byte	$C3
04317 0F7C                        99            .byte	$99
04318 0F7D                        BD            .byte	$BD
04319 0F7E                        BD            .byte	$BD
04320 0F7F                        99            .byte	$99
04321 0F80                        C3            .byte	$C3
04322 0F81                        FF            .byte	$FF
04323                                           ! 713  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04324 0F82                        0F            .byte	$F
04325 0F83                        07            .byte	7
04326 0F84                        0F            .byte	$F
04327 0F85                        7D            .byte	$7D
04328 0F86                        CC            .byte	$CC
04329 0F87                        CC            .byte	$CC
04330 0F88                        CC            .byte	$CC
04331 0F89                        78            .byte	$78
04332                                           ! 714  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04333 0F8A                        3C            .byte	$3C
04334 0F8B                        66            .byte	$66
04335 0F8C                        66            .byte	$66
04336 0F8D                        66            .byte	$66
04337 0F8E                        3C            .byte	$3C
04338 0F8F                        18            .byte	$18
04339 0F90                        7E            .byte	$7E
04340 0F91                        18            .byte	$18
04341                                           ! 715  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0x
04342 0F92                        3F            .byte	$3F
04343 0F93                        33            .byte	$33
04344 0F94                        3F            .byte	$3F
04345 0F95                        30            .byte	$30
04346 0F96                        30            .byte	$30
04347 0F97                        70            .byte	$70
04348 0F98                        F0            .byte	$F0
04349                                           ! 715 e0,
04350 0F99                        E0            .byte	$E0
04351                                           ! 716  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04352 0F9A                        7F            .byte	$7F
04353 0F9B                        63            .byte	$63
04354 0F9C                        7F            .byte	$7F
04355 0F9D                        63            .byte	$63
04356 0F9E                        63            .byte	$63
04357 0F9F                        67            .byte	$67
04358 0FA0                        E6            .byte	$E6
04359 0FA1                        C0            .byte	$C0
04360                                           ! 717  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04361 0FA2                        99            .byte	$99
04362 0FA3                        5A            .byte	$5A
04363 0FA4                        3C            .byte	$3C
04364 0FA5                        E7            .byte	$E7
04365 0FA6                        E7            .byte	$E7
04366 0FA7                        3C            .byte	$3C
04367 0FA8                        5A            .byte	$5A
04368 0FA9                        99            .byte	$99
04369                                           ! 718  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04370 0FAA                        80            .byte	$80
04371 0FAB                        E0            .byte	$E0
04372 0FAC                        F8            .byte	$F8
04373 0FAD                        FE            .byte	$FE
04374 0FAE                        F8            .byte	$F8
04375 0FAF                        E0            .byte	$E0
04376 0FB0                        80            .byte	$80
04377 0FB1                        00            .byte	0
04378                                           ! 719  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04379 0FB2                        02            .byte	2
04380 0FB3                        0E            .byte	$E
04381 0FB4                        3E            .byte	$3E
04382 0FB5                        FE            .byte	$FE
04383 0FB6                        3E            .byte	$3E
04384 0FB7                        0E            .byte	$E
04385 0FB8                        02            .byte	2
04386 0FB9                        00            .byte	0
04387                                           ! 720  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04388 0FBA                        18            .byte	$18
04389 0FBB                        3C            .byte	$3C
04390 0FBC                        7E            .byte	$7E
04391 0FBD                        18            .byte	$18
04392 0FBE                        18            .byte	$18
04393 0FBF                        7E            .byte	$7E
04394 0FC0                        3C            .byte	$3C
04395 0FC1                        18            .byte	$18
04396                                           ! 721  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04397 0FC2                        66            .byte	$66
04398 0FC3                        66            .byte	$66
04399 0FC4                        66            .byte	$66
04400 0FC5                        66            .byte	$66
04401 0FC6                        66            .byte	$66
04402 0FC7                        00            .byte	0
04403 0FC8                        66            .byte	$66
04404 0FC9                        00            .byte	0
04405                                           ! 722  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04406 0FCA                        7F            .byte	$7F
04407 0FCB                        DB            .byte	$DB
04408 0FCC                        DB            .byte	$DB
04409 0FCD                        7B            .byte	$7B
04410 0FCE                        1B            .byte	$1B
04411 0FCF                        1B            .byte	$1B
04412 0FD0                        1B            .byte	$1B
04413 0FD1                        00            .byte	0
04414                                           ! 723  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04415 0FD2                        3E            .byte	$3E
04416 0FD3                        63            .byte	$63
04417 0FD4                        38            .byte	$38
04418 0FD5                        6C            .byte	$6C
04419 0FD6                        6C            .byte	$6C
04420 0FD7                        38            .byte	$38
04421 0FD8                        CC            .byte	$CC
04422 0FD9                        78            .byte	$78
04423                                           ! 724  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04424 0FDA                        00            .byte	0
04425 0FDB                        00            .byte	0
04426 0FDC                        00            .byte	0
04427 0FDD                        00            .byte	0
04428 0FDE                        7E            .byte	$7E
04429 0FDF                        7E            .byte	$7E
04430 0FE0                        7E            .byte	$7E
04431 0FE1                        00            .byte	0
04432                                           ! 725  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04433 0FE2                        18            .byte	$18
04434 0FE3                        3C            .byte	$3C
04435 0FE4                        7E            .byte	$7E
04436 0FE5                        18            .byte	$18
04437 0FE6                        7E            .byte	$7E
04438 0FE7                        3C            .byte	$3C
04439 0FE8                        18            .byte	$18
04440 0FE9                        FF            .byte	$FF
04441                                           ! 726  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04442 0FEA                        18            .byte	$18
04443 0FEB                        3C            .byte	$3C
04444 0FEC                        7E            .byte	$7E
04445 0FED                        18            .byte	$18
04446 0FEE                        18            .byte	$18
04447 0FEF                        18            .byte	$18
04448 0FF0                        18            .byte	$18
04449 0FF1                        00            .byte	0
04450                                           ! 727  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04451 0FF2                        18            .byte	$18
04452 0FF3                        18            .byte	$18
04453 0FF4                        18            .byte	$18
04454 0FF5                        18            .byte	$18
04455 0FF6                        7E            .byte	$7E
04456 0FF7                        3C            .byte	$3C
04457 0FF8                        18            .byte	$18
04458 0FF9                        00            .byte	0
04459                                           ! 728  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04460 0FFA                        00            .byte	0
04461 0FFB                        18            .byte	$18
04462 0FFC                        0C            .byte	$C
04463 0FFD                        FE            .byte	$FE
04464 0FFE                        0C            .byte	$C
04465 0FFF                        18            .byte	$18
04466 1000                        00            .byte	0
04467 1001                        00            .byte	0
04468                                           ! 729  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04469 1002                        00            .byte	0
04470 1003                        30            .byte	$30
04471 1004                        60            .byte	$60
04472 1005                        FE            .byte	$FE
04473 1006                        60            .byte	$60
04474 1007                        30            .byte	$30
04475 1008                        00            .byte	0
04476 1009                        00            .byte	0
04477                                           ! 730  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04478 100A                        00            .byte	0
04479 100B                        00            .byte	0
04480 100C                        C0            .byte	$C0
04481 100D                        C0            .byte	$C0
04482 100E                        C0            .byte	$C0
04483 100F                        FE            .byte	$FE
04484 1010                        00            .byte	0
04485 1011                        00            .byte	0
04486                                           ! 731  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04487 1012                        00            .byte	0
04488 1013                        24            .byte	$24
04489 1014                        66            .byte	$66
04490 1015                        FF            .byte	$FF
04491 1016                        66            .byte	$66
04492 1017                        24            .byte	$24
04493 1018                        00            .byte	0
04494 1019                        00            .byte	0
04495                                           ! 732  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04496 101A                        00            .byte	0
04497 101B                        18            .byte	$18
04498 101C                        3C            .byte	$3C
04499 101D                        7E            .byte	$7E
04500 101E                        FF            .byte	$FF
04501 101F                        FF            .byte	$FF
04502 1020                        00            .byte	0
04503 1021                        00            .byte	0
04504                                           ! 733  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04505 1022                        00            .byte	0
04506 1023                        FF            .byte	$FF
04507 1024                        FF            .byte	$FF
04508 1025                        7E            .byte	$7E
04509 1026                        3C            .byte	$3C
04510 1027                        18            .byte	$18
04511 1028                        00            .byte	0
04512 1029                        00            .byte	0
04513                                           ! 734  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04514 102A                        00            .byte	0
04515 102B                        00            .byte	0
04516 102C                        00            .byte	0
04517 102D                        00            .byte	0
04518 102E                        00            .byte	0
04519 102F                        00            .byte	0
04520 1030                        00            .byte	0
04521 1031                        00            .byte	0
04522                                           ! 735  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04523 1032                        30            .byte	$30
04524 1033                        78            .byte	$78
04525 1034                        78            .byte	$78
04526 1035                        30            .byte	$30
04527 1036                        30            .byte	$30
04528 1037                        00            .byte	0
04529 1038                        30            .byte	$30
04530 1039                        00            .byte	0
04531                                           ! 736  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04532 103A                        6C            .byte	$6C
04533 103B                        6C            .byte	$6C
04534 103C                        6C            .byte	$6C
04535 103D                        00            .byte	0
04536 103E                        00            .byte	0
04537 103F                        00            .byte	0
04538 1040                        00            .byte	0
04539 1041                        00            .byte	0
04540                                           ! 737  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04541 1042                        6C            .byte	$6C
04542 1043                        6C            .byte	$6C
04543 1044                        FE            .byte	$FE
04544 1045                        6C            .byte	$6C
04545 1046                        FE            .byte	$FE
04546 1047                        6C            .byte	$6C
04547 1048                        6C            .byte	$6C
04548 1049                        00            .byte	0
04549                                           ! 738  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04550 104A                        30            .byte	$30
04551 104B                        7C            .byte	$7C
04552 104C                        C0            .byte	$C0
04553 104D                        78            .byte	$78
04554 104E                        0C            .byte	$C
04555 104F                        F8            .byte	$F8
04556 1050                        30            .byte	$30
04557 1051                        00            .byte	0
04558                                           ! 739  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04559 1052                        00            .byte	0
04560 1053                        C6            .byte	$C6
04561 1054                        CC            .byte	$CC
04562 1055                        18            .byte	$18
04563 1056                        30            .byte	$30
04564 1057                        66            .byte	$66
04565 1058                        C6            .byte	$C6
04566 1059                        00            .byte	0
04567                                           ! 740  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04568 105A                        38            .byte	$38
04569 105B                        6C            .byte	$6C
04570 105C                        38            .byte	$38
04571 105D                        76            .byte	$76
04572 105E                        DC            .byte	$DC
04573 105F                        CC            .byte	$CC
04574 1060                        76            .byte	$76
04575 1061                        00            .byte	0
04576                                           ! 741  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04577 1062                        60            .byte	$60
04578 1063                        60            .byte	$60
04579 1064                        C0            .byte	$C0
04580 1065                        00            .byte	0
04581 1066                        00            .byte	0
04582 1067                        00            .byte	0
04583 1068                        00            .byte	0
04584 1069                        00            .byte	0
04585                                           ! 742  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04586 106A                        18            .byte	$18
04587 106B                        30            .byte	$30
04588 106C                        60            .byte	$60
04589 106D                        60            .byte	$60
04590 106E                        60            .byte	$60
04591 106F                        30            .byte	$30
04592 1070                        18            .byte	$18
04593 1071                        00            .byte	0
04594                                           ! 743  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04595 1072                        60            .byte	$60
04596 1073                        30            .byte	$30
04597 1074                        18            .byte	$18
04598 1075                        18            .byte	$18
04599 1076                        18            .byte	$18
04600 1077                        30            .byte	$30
04601 1078                        60            .byte	$60
04602 1079                        00            .byte	0
04603                                           ! 744  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04604 107A                        00            .byte	0
04605 107B                        66            .byte	$66
04606 107C                        3C            .byte	$3C
04607 107D                        FF            .byte	$FF
04608 107E                        3C            .byte	$3C
04609 107F                        66            .byte	$66
04610 1080                        00            .byte	0
04611 1081                        00            .byte	0
04612                                           ! 745  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04613 1082                        00            .byte	0
04614 1083                        30            .byte	$30
04615 1084                        30            .byte	$30
04616 1085                        FC            .byte	$FC
04617 1086                        30            .byte	$30
04618 1087                        30            .byte	$30
04619 1088                        00            .byte	0
04620 1089                        00            .byte	0
04621                                           ! 746  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04622 108A                        00            .byte	0
04623 108B                        00            .byte	0
04624 108C                        00            .byte	0
04625 108D                        00            .byte	0
04626 108E                        00            .byte	0
04627 108F                        30            .byte	$30
04628 1090                        30            .byte	$30
04629 1091                        60            .byte	$60
04630                                           ! 747  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04631 1092                        00            .byte	0
04632 1093                        00            .byte	0
04633 1094                        00            .byte	0
04634 1095                        FC            .byte	$FC
04635 1096                        00            .byte	0
04636 1097                        00            .byte	0
04637 1098                        00            .byte	0
04638 1099                        00            .byte	0
04639                                           ! 748  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04640 109A                        00            .byte	0
04641 109B                        00            .byte	0
04642 109C                        00            .byte	0
04643 109D                        00            .byte	0
04644 109E                        00            .byte	0
04645 109F                        30            .byte	$30
04646 10A0                        30            .byte	$30
04647 10A1                        00            .byte	0
04648                                           ! 749  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04649 10A2                        06            .byte	6
04650 10A3                        0C            .byte	$C
04651 10A4                        18            .byte	$18
04652 10A5                        30            .byte	$30
04653 10A6                        60            .byte	$60
04654 10A7                        C0            .byte	$C0
04655 10A8                        80            .byte	$80
04656 10A9                        00            .byte	0
04657                                           ! 750  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04658 10AA                        7C            .byte	$7C
04659 10AB                        C6            .byte	$C6
04660 10AC                        CE            .byte	$CE
04661 10AD                        DE            .byte	$DE
04662 10AE                        F6            .byte	$F6
04663 10AF                        E6            .byte	$E6
04664 10B0                        7C            .byte	$7C
04665 10B1                        00            .byte	0
04666                                           ! 751  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04667 10B2                        30            .byte	$30
04668 10B3                        70            .byte	$70
04669 10B4                        30            .byte	$30
04670 10B5                        30            .byte	$30
04671 10B6                        30            .byte	$30
04672 10B7                        30            .byte	$30
04673 10B8                        FC            .byte	$FC
04674 10B9                        00            .byte	0
04675                                           ! 752  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04676 10BA                        78            .byte	$78
04677 10BB                        CC            .byte	$CC
04678 10BC                        0C            .byte	$C
04679 10BD                        38            .byte	$38
04680 10BE                        60            .byte	$60
04681 10BF                        CC            .byte	$CC
04682 10C0                        FC            .byte	$FC
04683 10C1                        00            .byte	0
04684                                           ! 753  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04685 10C2                        78            .byte	$78
04686 10C3                        CC            .byte	$CC
04687 10C4                        0C            .byte	$C
04688 10C5                        38            .byte	$38
04689 10C6                        0C            .byte	$C
04690 10C7                        CC            .byte	$CC
04691 10C8                        78            .byte	$78
04692 10C9                        00            .byte	0
04693                                           ! 754  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04694 10CA                        1C            .byte	$1C
04695 10CB                        3C            .byte	$3C
04696 10CC                        6C            .byte	$6C
04697 10CD                        CC            .byte	$CC
04698 10CE                        FE            .byte	$FE
04699 10CF                        0C            .byte	$C
04700 10D0                        1E            .byte	$1E
04701 10D1                        00            .byte	0
04702                                           ! 755  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
04703 10D2                        FC            .byte	$FC
04704 10D3                        C0            .byte	$C0
04705 10D4                        F8            .byte	$F8
04706 10D5                        0C            .byte	$C
04707 10D6                        0C            .byte	$C
04708 10D7                        CC            .byte	$CC
04709 10D8                        78            .byte	$78
04710 10D9                        00            .byte	0
04711                                           ! 756  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
04712 10DA                        38            .byte	$38
04713 10DB                        60            .byte	$60
04714 10DC                        C0            .byte	$C0
04715 10DD                        F8            .byte	$F8
04716 10DE                        CC            .byte	$CC
04717 10DF                        CC            .byte	$CC
04718 10E0                        78            .byte	$78
04719 10E1                        00            .byte	0
04720                                           ! 757  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30
04721 10E2                        FC            .byte	$FC
04722 10E3                        CC            .byte	$CC
04723 10E4                        0C            .byte	$C
04724 10E5                        18            .byte	$18
04725 10E6                        30            .byte	$30
04726                                           ! 757 , 0x30, 0x00,
04727 10E7                        30            .byte	$30
04728 10E8                        30            .byte	$30
04729 10E9                        00            .byte	0
04730                                           ! 758  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
04731 10EA                        78            .byte	$78
04732 10EB                        CC            .byte	$CC
04733 10EC                        CC            .byte	$CC
04734 10ED                        78            .byte	$78
04735 10EE                        CC            .byte	$CC
04736 10EF                        CC            .byte	$CC
04737 10F0                        78            .byte	$78
04738 10F1                        00            .byte	0
04739                                           ! 759  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
04740 10F2                        78            .byte	$78
04741 10F3                        CC            .byte	$CC
04742 10F4                        CC            .byte	$CC
04743 10F5                        7C            .byte	$7C
04744 10F6                        0C            .byte	$C
04745 10F7                        18            .byte	$18
04746 10F8                        70            .byte	$70
04747 10F9                        00            .byte	0
04748                                           ! 760  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
04749 10FA                        00            .byte	0
04750 10FB                        30            .byte	$30
04751 10FC                        30            .byte	$30
04752 10FD                        00            .byte	0
04753 10FE                        00            .byte	0
04754 10FF                        30            .byte	$30
04755 1100                        30            .byte	$30
04756 1101                        00            .byte	0
04757                                           ! 761  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
04758 1102                        00            .byte	0
04759 1103                        30            .byte	$30
04760 1104                        30            .byte	$30
04761 1105                        00            .byte	0
04762 1106                        00            .byte	0
04763 1107                        30            .byte	$30
04764 1108                        30            .byte	$30
04765 1109                        60            .byte	$60
04766                                           ! 762  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
04767 110A                        18            .byte	$18
04768 110B                        30            .byte	$30
04769 110C                        60            .byte	$60
04770 110D                        C0            .byte	$C0
04771 110E                        60            .byte	$60
04772 110F                        30            .byte	$30
04773 1110                        18            .byte	$18
04774 1111                        00            .byte	0
04775                                           ! 763  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
04776 1112                        00            .byte	0
04777 1113                        00            .byte	0
04778 1114                        FC            .byte	$FC
04779 1115                        00            .byte	0
04780 1116                        00            .byte	0
04781 1117                        FC            .byte	$FC
04782 1118                        00            .byte	0
04783 1119                        00            .byte	0
04784                                           ! 764  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
04785 111A                        60            .byte	$60
04786 111B                        30            .byte	$30
04787 111C                        18            .byte	$18
04788 111D                        0C            .byte	$C
04789 111E                        18            .byte	$18
04790 111F                        30            .byte	$30
04791 1120                        60            .byte	$60
04792 1121                        00            .byte	0
04793                                           ! 765  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
04794 1122                        78            .byte	$78
04795 1123                        CC            .byte	$CC
04796 1124                        0C            .byte	$C
04797 1125                        18            .byte	$18
04798 1126                        30            .byte	$30
04799 1127                        00            .byte	0
04800 1128                        30            .byte	$30
04801 1129                        00            .byte	0
04802                                           ! 766  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
04803 112A                        7C            .byte	$7C
04804 112B                        C6            .byte	$C6
04805 112C                        DE            .byte	$DE
04806 112D                        DE            .byte	$DE
04807 112E                        DE            .byte	$DE
04808 112F                        C0            .byte	$C0
04809 1130                        78            .byte	$78
04810 1131                        00            .byte	0
04811                                           ! 767  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
04812 1132                        30            .byte	$30
04813 1133                        78            .byte	$78
04814 1134                        CC            .byte	$CC
04815 1135                        CC            .byte	$CC
04816 1136                        FC            .byte	$FC
04817 1137                        CC            .byte	$CC
04818 1138                        CC            .byte	$CC
04819 1139                        00            .byte	0
04820                                           ! 768  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
04821 113A                        FC            .byte	$FC
04822 113B                        66            .byte	$66
04823 113C                        66            .byte	$66
04824 113D                        7C            .byte	$7C
04825 113E                        66            .byte	$66
04826 113F                        66            .byte	$66
04827 1140                        FC            .byte	$FC
04828 1141                        00            .byte	0
04829                                           ! 769  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
04830 1142                        3C            .byte	$3C
04831 1143                        66            .byte	$66
04832 1144                        C0            .byte	$C0
04833 1145                        C0            .byte	$C0
04834 1146                        C0            .byte	$C0
04835 1147                        66            .byte	$66
04836 1148                        3C            .byte	$3C
04837 1149                        00            .byte	0
04838                                           ! 770  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
04839 114A                        F8            .byte	$F8
04840 114B                        6C            .byte	$6C
04841 114C                        66            .byte	$66
04842 114D                        66            .byte	$66
04843 114E                        66            .byte	$66
04844 114F                        6C            .byte	$6C
04845 1150                        F8            .byte	$F8
04846 1151                        00            .byte	0
04847                                           ! 771  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
04848 1152                        FE            .byte	$FE
04849 1153                        62            .byte	$62
04850 1154                        68            .byte	$68
04851 1155                        78            .byte	$78
04852 1156                        68            .byte	$68
04853 1157                        62            .byte	$62
04854 1158                        FE            .byte	$FE
04855 1159                        00            .byte	0
04856                                           ! 772  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
04857 115A                        FE            .byte	$FE
04858 115B                        62            .byte	$62
04859 115C                        68            .byte	$68
04860 115D                        78            .byte	$78
04861 115E                        68            .byte	$68
04862 115F                        60            .byte	$60
04863 1160                        F0            .byte	$F0
04864 1161                        00            .byte	0
04865                                           ! 773  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
04866 1162                        3C            .byte	$3C
04867 1163                        66            .byte	$66
04868 1164                        C0            .byte	$C0
04869 1165                        C0            .byte	$C0
04870 1166                        CE            .byte	$CE
04871 1167                        66            .byte	$66
04872 1168                        3E            .byte	$3E
04873 1169                        00            .byte	0
04874                                           ! 774  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
04875 116A                        CC            .byte	$CC
04876 116B                        CC            .byte	$CC
04877 116C                        CC            .byte	$CC
04878 116D                        FC            .byte	$FC
04879 116E                        CC            .byte	$CC
04880 116F                        CC            .byte	$CC
04881 1170                        CC            .byte	$CC
04882 1171                        00            .byte	0
04883                                           ! 775  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04884 1172                        78            .byte	$78
04885 1173                        30            .byte	$30
04886 1174                        30            .byte	$30
04887 1175                        30            .byte	$30
04888 1176                        30            .byte	$30
04889 1177                        30            .byte	$30
04890 1178                        78            .byte	$78
04891 1179                        00            .byte	0
04892                                           ! 776  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
04893 117A                        1E            .byte	$1E
04894 117B                        0C            .byte	$C
04895 117C                        0C            .byte	$C
04896 117D                        0C            .byte	$C
04897 117E                        CC            .byte	$CC
04898 117F                        CC            .byte	$CC
04899 1180                        78            .byte	$78
04900 1181                        00            .byte	0
04901                                           ! 777  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
04902 1182                        E6            .byte	$E6
04903 1183                        66            .byte	$66
04904 1184                        6C            .byte	$6C
04905 1185                        78            .byte	$78
04906 1186                        6C            .byte	$6C
04907 1187                        66            .byte	$66
04908 1188                        E6            .byte	$E6
04909 1189                        00            .byte	0
04910                                           ! 778  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
04911 118A                        F0            .byte	$F0
04912 118B                        60            .byte	$60
04913 118C                        60            .byte	$60
04914 118D                        60            .byte	$60
04915 118E                        62            .byte	$62
04916 118F                        66            .byte	$66
04917 1190                        FE            .byte	$FE
04918 1191                        00            .byte	0
04919                                           ! 779  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
04920 1192                        C6            .byte	$C6
04921 1193                        EE            .byte	$EE
04922 1194                        FE            .byte	$FE
04923 1195                        FE            .byte	$FE
04924 1196                        D6            .byte	$D6
04925 1197                        C6            .byte	$C6
04926 1198                        C6            .byte	$C6
04927 1199                        00            .byte	0
04928                                           ! 780  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
04929 119A                        C6            .byte	$C6
04930 119B                        E6            .byte	$E6
04931 119C                        F6            .byte	$F6
04932 119D                        DE            .byte	$DE
04933 119E                        CE            .byte	$CE
04934 119F                        C6            .byte	$C6
04935 11A0                        C6            .byte	$C6
04936 11A1                        00            .byte	0
04937                                           ! 781  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
04938 11A2                        38            .byte	$38
04939 11A3                        6C            .byte	$6C
04940 11A4                        C6            .byte	$C6
04941 11A5                        C6            .byte	$C6
04942 11A6                        C6            .byte	$C6
04943 11A7                        6C            .byte	$6C
04944 11A8                        38            .byte	$38
04945 11A9                        00            .byte	0
04946                                           ! 782  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
04947 11AA                        FC            .byte	$FC
04948 11AB                        66            .byte	$66
04949 11AC                        66            .byte	$66
04950 11AD                        7C            .byte	$7C
04951 11AE                        60            .byte	$60
04952 11AF                        60            .byte	$60
04953 11B0                        F0            .byte	$F0
04954 11B1                        00            .byte	0
04955                                           ! 783  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
04956 11B2                        78            .byte	$78
04957 11B3                        CC            .byte	$CC
04958 11B4                        CC            .byte	$CC
04959 11B5                        CC            .byte	$CC
04960 11B6                        DC            .byte	$DC
04961 11B7                        78            .byte	$78
04962 11B8                        1C            .byte	$1C
04963 11B9                        00            .byte	0
04964                                           ! 784  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
04965 11BA                        FC            .byte	$FC
04966 11BB                        66            .byte	$66
04967 11BC                        66            .byte	$66
04968 11BD                        7C            .byte	$7C
04969 11BE                        6C            .byte	$6C
04970 11BF                        66            .byte	$66
04971 11C0                        E6            .byte	$E6
04972 11C1                        00            .byte	0
04973                                           ! 785  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
04974 11C2                        78            .byte	$78
04975 11C3                        CC            .byte	$CC
04976 11C4                        E0            .byte	$E0
04977 11C5                        70            .byte	$70
04978 11C6                        1C            .byte	$1C
04979 11C7                        CC            .byte	$CC
04980 11C8                        78            .byte	$78
04981 11C9                        00            .byte	0
04982                                           ! 786  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04983 11CA                        FC            .byte	$FC
04984 11CB                        B4            .byte	$B4
04985 11CC                        30            .byte	$30
04986 11CD                        30            .byte	$30
04987 11CE                        30            .byte	$30
04988 11CF                        30            .byte	$30
04989 11D0                        78            .byte	$78
04990 11D1                        00            .byte	0
04991                                           ! 787  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
04992 11D2                        CC            .byte	$CC
04993 11D3                        CC            .byte	$CC
04994 11D4                        CC            .byte	$CC
04995 11D5                        CC            .byte	$CC
04996 11D6                        CC            .byte	$CC
04997 11D7                        CC            .byte	$CC
04998 11D8                        FC            .byte	$FC
04999 11D9                        00            .byte	0
05000                                           ! 788  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05001 11DA                        CC            .byte	$CC
05002 11DB                        CC            .byte	$CC
05003 11DC                        CC            .byte	$CC
05004 11DD                        CC            .byte	$CC
05005 11DE                        CC            .byte	$CC
05006 11DF                        78            .byte	$78
05007 11E0                        30            .byte	$30
05008 11E1                        00            .byte	0
05009                                           ! 789  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05010 11E2                        C6            .byte	$C6
05011 11E3                        C6            .byte	$C6
05012 11E4                        C6            .byte	$C6
05013 11E5                        D6            .byte	$D6
05014 11E6                        FE            .byte	$FE
05015 11E7                        EE            .byte	$EE
05016 11E8                        C6            .byte	$C6
05017 11E9                        00            .byte	0
05018                                           ! 790  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05019 11EA                        C6            .byte	$C6
05020 11EB                        C6            .byte	$C6
05021 11EC                        6C            .byte	$6C
05022 11ED                        38            .byte	$38
05023 11EE                        38            .byte	$38
05024 11EF                        6C            .byte	$6C
05025 11F0                        C6            .byte	$C6
05026 11F1                        00            .byte	0
05027                                           ! 791  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05028 11F2                        CC            .byte	$CC
05029 11F3                        CC            .byte	$CC
05030 11F4                        CC            .byte	$CC
05031 11F5                        78            .byte	$78
05032 11F6                        30            .byte	$30
05033 11F7                        30            .byte	$30
05034 11F8                        78            .byte	$78
05035 11F9                        00            .byte	0
05036                                           ! 792  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05037 11FA                        FE            .byte	$FE
05038 11FB                        C6            .byte	$C6
05039 11FC                        8C            .byte	$8C
05040 11FD                        18            .byte	$18
05041 11FE                        32            .byte	$32
05042 11FF                        66            .byte	$66
05043 1200                        FE            .byte	$FE
05044 1201                        00            .byte	0
05045                                           ! 793  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05046 1202                        78            .byte	$78
05047 1203                        60            .byte	$60
05048 1204                        60            .byte	$60
05049 1205                        60            .byte	$60
05050 1206                        60            .byte	$60
05051 1207                        60            .byte	$60
05052 1208                        78            .byte	$78
05053 1209                        00            .byte	0
05054                                           ! 794  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05055 120A                        C0            .byte	$C0
05056 120B                        60            .byte	$60
05057 120C                        30            .byte	$30
05058 120D                        18            .byte	$18
05059 120E                        0C            .byte	$C
05060 120F                        06            .byte	6
05061 1210                        02            .byte	2
05062 1211                        00            .byte	0
05063                                           ! 795  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05064 1212                        78            .byte	$78
05065 1213                        18            .byte	$18
05066 1214                        18            .byte	$18
05067 1215                        18            .byte	$18
05068 1216                        18            .byte	$18
05069 1217                        18            .byte	$18
05070 1218                        78            .byte	$78
05071 1219                        00            .byte	0
05072                                           ! 796  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05073 121A                        10            .byte	$10
05074 121B                        38            .byte	$38
05075 121C                        6C            .byte	$6C
05076 121D                        C6            .byte	$C6
05077 121E                        00            .byte	0
05078 121F                        00            .byte	0
05079 1220                        00            .byte	0
05080 1221                        00            .byte	0
05081                                           ! 797  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05082 1222                        00            .byte	0
05083 1223                        00            .byte	0
05084 1224                        00            .byte	0
05085 1225                        00            .byte	0
05086 1226                        00            .byte	0
05087 1227                        00            .byte	0
05088 1228                        00            .byte	0
05089 1229                        FF            .byte	$FF
05090                                           ! 798  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05091 122A                        30            .byte	$30
05092 122B                        30            .byte	$30
05093 122C                        18            .byte	$18
05094 122D                        00            .byte	0
05095 122E                        00            .byte	0
05096 122F                        00            .byte	0
05097 1230                        00            .byte	0
05098 1231                        00            .byte	0
05099                                           ! 799  0x00, 0x00, 0x78, 0x0c, 
05100 1232                        00            .byte	0
05101 1233                        00            .byte	0
05102 1234                        78            .byte	$78
05103 1235                        0C            .byte	$C
05104                                           ! 799 0x7c, 0xcc, 0x76, 0x00,
05105 1236                        7C            .byte	$7C
05106 1237                        CC            .byte	$CC
05107 1238                        76            .byte	$76
05108 1239                        00            .byte	0
05109                                           ! 800  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05110 123A                        E0            .byte	$E0
05111 123B                        60            .byte	$60
05112 123C                        60            .byte	$60
05113 123D                        7C            .byte	$7C
05114 123E                        66            .byte	$66
05115 123F                        66            .byte	$66
05116 1240                        DC            .byte	$DC
05117 1241                        00            .byte	0
05118                                           ! 801  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05119 1242                        00            .byte	0
05120 1243                        00            .byte	0
05121 1244                        78            .byte	$78
05122 1245                        CC            .byte	$CC
05123 1246                        C0            .byte	$C0
05124 1247                        CC            .byte	$CC
05125 1248                        78            .byte	$78
05126 1249                        00            .byte	0
05127                                           ! 802  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05128 124A                        1C            .byte	$1C
05129 124B                        0C            .byte	$C
05130 124C                        0C            .byte	$C
05131 124D                        7C            .byte	$7C
05132 124E                        CC            .byte	$CC
05133 124F                        CC            .byte	$CC
05134 1250                        76            .byte	$76
05135 1251                        00            .byte	0
05136                                           ! 803  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05137 1252                        00            .byte	0
05138 1253                        00            .byte	0
05139 1254                        78            .byte	$78
05140 1255                        CC            .byte	$CC
05141 1256                        FC            .byte	$FC
05142 1257                        C0            .byte	$C0
05143 1258                        78            .byte	$78
05144 1259                        00            .byte	0
05145                                           ! 804  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05146 125A                        38            .byte	$38
05147 125B                        6C            .byte	$6C
05148 125C                        60            .byte	$60
05149 125D                        F0            .byte	$F0
05150 125E                        60            .byte	$60
05151 125F                        60            .byte	$60
05152 1260                        F0            .byte	$F0
05153 1261                        00            .byte	0
05154                                           ! 805  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05155 1262                        00            .byte	0
05156 1263                        00            .byte	0
05157 1264                        76            .byte	$76
05158 1265                        CC            .byte	$CC
05159 1266                        CC            .byte	$CC
05160 1267                        7C            .byte	$7C
05161 1268                        0C            .byte	$C
05162 1269                        F8            .byte	$F8
05163                                           ! 806  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05164 126A                        E0            .byte	$E0
05165 126B                        60            .byte	$60
05166 126C                        6C            .byte	$6C
05167 126D                        76            .byte	$76
05168 126E                        66            .byte	$66
05169 126F                        66            .byte	$66
05170 1270                        E6            .byte	$E6
05171 1271                        00            .byte	0
05172                                           ! 807  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05173 1272                        30            .byte	$30
05174 1273                        00            .byte	0
05175 1274                        70            .byte	$70
05176 1275                        30            .byte	$30
05177 1276                        30            .byte	$30
05178 1277                        30            .byte	$30
05179 1278                        78            .byte	$78
05180 1279                        00            .byte	0
05181                                           ! 808  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05182 127A                        0C            .byte	$C
05183 127B                        00            .byte	0
05184 127C                        0C            .byte	$C
05185 127D                        0C            .byte	$C
05186 127E                        0C            .byte	$C
05187 127F                        CC            .byte	$CC
05188 1280                        CC            .byte	$CC
05189 1281                        78            .byte	$78
05190                                           ! 809  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05191 1282                        E0            .byte	$E0
05192 1283                        60            .byte	$60
05193 1284                        66            .byte	$66
05194 1285                        6C            .byte	$6C
05195 1286                        78            .byte	$78
05196 1287                        6C            .byte	$6C
05197 1288                        E6            .byte	$E6
05198 1289                        00            .byte	0
05199                                           ! 810  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05200 128A                        70            .byte	$70
05201 128B                        30            .byte	$30
05202 128C                        30            .byte	$30
05203 128D                        30            .byte	$30
05204 128E                        30            .byte	$30
05205 128F                        30            .byte	$30
05206 1290                        78            .byte	$78
05207 1291                        00            .byte	0
05208                                           ! 811  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05209 1292                        00            .byte	0
05210 1293                        00            .byte	0
05211 1294                        CC            .byte	$CC
05212 1295                        FE            .byte	$FE
05213 1296                        FE            .byte	$FE
05214 1297                        D6            .byte	$D6
05215 1298                        C6            .byte	$C6
05216 1299                        00            .byte	0
05217                                           ! 812  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05218 129A                        00            .byte	0
05219 129B                        00            .byte	0
05220 129C                        F8            .byte	$F8
05221 129D                        CC            .byte	$CC
05222 129E                        CC            .byte	$CC
05223 129F                        CC            .byte	$CC
05224 12A0                        CC            .byte	$CC
05225 12A1                        00            .byte	0
05226                                           ! 813  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05227 12A2                        00            .byte	0
05228 12A3                        00            .byte	0
05229 12A4                        78            .byte	$78
05230 12A5                        CC            .byte	$CC
05231 12A6                        CC            .byte	$CC
05232 12A7                        CC            .byte	$CC
05233 12A8                        78            .byte	$78
05234 12A9                        00            .byte	0
05235                                           ! 814  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05236 12AA                        00            .byte	0
05237 12AB                        00            .byte	0
05238 12AC                        DC            .byte	$DC
05239 12AD                        66            .byte	$66
05240 12AE                        66            .byte	$66
05241 12AF                        7C            .byte	$7C
05242 12B0                        60            .byte	$60
05243 12B1                        F0            .byte	$F0
05244                                           ! 815  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05245 12B2                        00            .byte	0
05246 12B3                        00            .byte	0
05247 12B4                        76            .byte	$76
05248 12B5                        CC            .byte	$CC
05249 12B6                        CC            .byte	$CC
05250 12B7                        7C            .byte	$7C
05251 12B8                        0C            .byte	$C
05252 12B9                        1E            .byte	$1E
05253                                           ! 816  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05254 12BA                        00            .byte	0
05255 12BB                        00            .byte	0
05256 12BC                        DC            .byte	$DC
05257 12BD                        76            .byte	$76
05258 12BE                        66            .byte	$66
05259 12BF                        60            .byte	$60
05260 12C0                        F0            .byte	$F0
05261 12C1                        00            .byte	0
05262                                           ! 817  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05263 12C2                        00            .byte	0
05264 12C3                        00            .byte	0
05265 12C4                        7C            .byte	$7C
05266 12C5                        C0            .byte	$C0
05267 12C6                        78            .byte	$78
05268 12C7                        0C            .byte	$C
05269 12C8                        F8            .byte	$F8
05270 12C9                        00            .byte	0
05271                                           ! 818  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05272 12CA                        10            .byte	$10
05273 12CB                        30            .byte	$30
05274 12CC                        7C            .byte	$7C
05275 12CD                        30            .byte	$30
05276 12CE                        30            .byte	$30
05277 12CF                        34            .byte	$34
05278 12D0                        18            .byte	$18
05279 12D1                        00            .byte	0
05280                                           ! 819  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05281 12D2                        00            .byte	0
05282 12D3                        00            .byte	0
05283 12D4                        CC            .byte	$CC
05284 12D5                        CC            .byte	$CC
05285 12D6                        CC            .byte	$CC
05286 12D7                        CC            .byte	$CC
05287 12D8                        76            .byte	$76
05288 12D9                        00            .byte	0
05289                                           ! 820  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05290 12DA                        00            .byte	0
05291 12DB                        00            .byte	0
05292 12DC                        CC            .byte	$CC
05293 12DD                        CC            .byte	$CC
05294 12DE                        CC            .byte	$CC
05295 12DF                        78            .byte	$78
05296 12E0                        30            .byte	$30
05297 12E1                        00            .byte	0
05298                                           ! 821  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05299 12E2                        00            .byte	0
05300 12E3                        00            .byte	0
05301 12E4                        C6            .byte	$C6
05302 12E5                        D6            .byte	$D6
05303 12E6                        FE            .byte	$FE
05304 12E7                        FE            .byte	$FE
05305 12E8                        6C            .byte	$6C
05306 12E9                        00            .byte	0
05307                                           ! 822  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05308 12EA                        00            .byte	0
05309 12EB                        00            .byte	0
05310 12EC                        C6            .byte	$C6
05311 12ED                        6C            .byte	$6C
05312 12EE                        38            .byte	$38
05313 12EF                        6C            .byte	$6C
05314 12F0                        C6            .byte	$C6
05315 12F1                        00            .byte	0
05316                                           ! 823  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05317 12F2                        00            .byte	0
05318 12F3                        00            .byte	0
05319 12F4                        CC            .byte	$CC
05320 12F5                        CC            .byte	$CC
05321 12F6                        CC            .byte	$CC
05322 12F7                        7C            .byte	$7C
05323 12F8                        0C            .byte	$C
05324 12F9                        F8            .byte	$F8
05325                                           ! 824  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05326 12FA                        00            .byte	0
05327 12FB                        00            .byte	0
05328 12FC                        FC            .byte	$FC
05329 12FD                        98            .byte	$98
05330 12FE                        30            .byte	$30
05331 12FF                        64            .byte	$64
05332 1300                        FC            .byte	$FC
05333 1301                        00            .byte	0
05334                                           ! 825  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05335 1302                        1C            .byte	$1C
05336 1303                        30            .byte	$30
05337 1304                        30            .byte	$30
05338 1305                        E0            .byte	$E0
05339 1306                        30            .byte	$30
05340 1307                        30            .byte	$30
05341 1308                        1C            .byte	$1C
05342 1309                        00            .byte	0
05343                                           ! 826  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05344 130A                        18            .byte	$18
05345 130B                        18            .byte	$18
05346 130C                        18            .byte	$18
05347 130D                        00            .byte	0
05348 130E                        18            .byte	$18
05349 130F                        18            .byte	$18
05350 1310                        18            .byte	$18
05351 1311                        00            .byte	0
05352                                           ! 827  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05353 1312                        E0            .byte	$E0
05354 1313                        30            .byte	$30
05355 1314                        30            .byte	$30
05356 1315                        1C            .byte	$1C
05357 1316                        30            .byte	$30
05358 1317                        30            .byte	$30
05359 1318                        E0            .byte	$E0
05360 1319                        00            .byte	0
05361                                           ! 828  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05362 131A                        76            .byte	$76
05363 131B                        DC            .byte	$DC
05364 131C                        00            .byte	0
05365 131D                        00            .byte	0
05366 131E                        00            .byte	0
05367 131F                        00            .byte	0
05368 1320                        00            .byte	0
05369 1321                        00            .byte	0
05370                                           ! 829  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05371 1322                        00            .byte	0
05372 1323                        10            .byte	$10
05373 1324                        38            .byte	$38
05374 1325                        6C            .byte	$6C
05375 1326                        C6            .byte	$C6
05376 1327                        C6            .byte	$C6
05377 1328                        FE            .byte	$FE
05378 1329                        00            .byte	0
05379                                           ! 830  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05380 132A                        78            .byte	$78
05381 132B                        CC            .byte	$CC
05382 132C                        C0            .byte	$C0
05383 132D                        CC            .byte	$CC
05384 132E                        78            .byte	$78
05385 132F                        18            .byte	$18
05386 1330                        0C            .byte	$C
05387 1331                        78            .byte	$78
05388                                           ! 831  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05389 1332                        00            .byte	0
05390 1333                        CC            .byte	$CC
05391 1334                        00            .byte	0
05392 1335                        CC            .byte	$CC
05393 1336                        CC            .byte	$CC
05394 1337                        CC            .byte	$CC
05395 1338                        7E            .byte	$7E
05396 1339                        00            .byte	0
05397                                           ! 832  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05398 133A                        1C            .byte	$1C
05399 133B                        00            .byte	0
05400 133C                        78            .byte	$78
05401 133D                        CC            .byte	$CC
05402 133E                        FC            .byte	$FC
05403 133F                        C0            .byte	$C0
05404 1340                        78            .byte	$78
05405 1341                        00            .byte	0
05406                                           ! 833  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05407 1342                        7E            .byte	$7E
05408 1343                        C3            .byte	$C3
05409 1344                        3C            .byte	$3C
05410 1345                        06            .byte	6
05411 1346                        3E            .byte	$3E
05412 1347                        66            .byte	$66
05413 1348                        3F            .byte	$3F
05414 1349                        00            .byte	0
05415                                           ! 834  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05416 134A                        CC            .byte	$CC
05417 134B                        00            .byte	0
05418 134C                        78            .byte	$78
05419 134D                        0C            .byte	$C
05420 134E                        7C            .byte	$7C
05421 134F                        CC            .byte	$CC
05422 1350                        7E            .byte	$7E
05423 1351                        00            .byte	0
05424                                           ! 835  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05425 1352                        E0            .byte	$E0
05426 1353                        00            .byte	0
05427 1354                        78            .byte	$78
05428 1355                        0C            .byte	$C
05429 1356                        7C            .byte	$7C
05430 1357                        CC            .byte	$CC
05431 1358                        7E            .byte	$7E
05432 1359                        00            .byte	0
05433                                           ! 836  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05434 135A                        30            .byte	$30
05435 135B                        30            .byte	$30
05436 135C                        78            .byte	$78
05437 135D                        0C            .byte	$C
05438 135E                        7C            .byte	$7C
05439 135F                        CC            .byte	$CC
05440 1360                        7E            .byte	$7E
05441 1361                        00            .byte	0
05442                                           ! 837  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05443 1362                        00            .byte	0
05444 1363                        00            .byte	0
05445 1364                        78            .byte	$78
05446 1365                        C0            .byte	$C0
05447 1366                        C0            .byte	$C0
05448 1367                        78            .byte	$78
05449 1368                        0C            .byte	$C
05450 1369                        38            .byte	$38
05451                                           ! 838  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05452 136A                        7E            .byte	$7E
05453 136B                        C3            .byte	$C3
05454 136C                        3C            .byte	$3C
05455 136D                        66            .byte	$66
05456 136E                        7E            .byte	$7E
05457 136F                        60            .byte	$60
05458 1370                        3C            .byte	$3C
05459 1371                        00            .byte	0
05460                                           ! 839  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05461 1372                        CC            .byte	$CC
05462 1373                        00            .byte	0
05463 1374                        78            .byte	$78
05464 1375                        CC            .byte	$CC
05465 1376                        FC            .byte	$FC
05466 1377                        C0            .byte	$C0
05467 1378                        78            .byte	$78
05468 1379                        00            .byte	0
05469                                           ! 840  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05470 137A                        E0            .byte	$E0
05471 137B                        00            .byte	0
05472 137C                        78            .byte	$78
05473 137D                        CC            .byte	$CC
05474 137E                        FC            .byte	$FC
05475 137F                        C0            .byte	$C0
05476 1380                        78            .byte	$78
05477 1381                        00            .byte	0
05478                                           ! 841  0xcc, 0x00, 0x
05479 1382                        CC            .byte	$CC
05480 1383                        00            .byte	0
05481                                           ! 841 70, 0x30, 0x30, 0x30, 0x78, 0x00,
05482 1384                        70            .byte	$70
05483 1385                        30            .byte	$30
05484 1386                        30            .byte	$30
05485 1387                        30            .byte	$30
05486 1388                        78            .byte	$78
05487 1389                        00            .byte	0
05488                                           ! 842  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05489 138A                        7C            .byte	$7C
05490 138B                        C6            .byte	$C6
05491 138C                        38            .byte	$38
05492 138D                        18            .byte	$18
05493 138E                        18            .byte	$18
05494 138F                        18            .byte	$18
05495 1390                        3C            .byte	$3C
05496 1391                        00            .byte	0
05497                                           ! 843  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05498 1392                        E0            .byte	$E0
05499 1393                        00            .byte	0
05500 1394                        70            .byte	$70
05501 1395                        30            .byte	$30
05502 1396                        30            .byte	$30
05503 1397                        30            .byte	$30
05504 1398                        78            .byte	$78
05505 1399                        00            .byte	0
05506                                           ! 844  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05507 139A                        C6            .byte	$C6
05508 139B                        38            .byte	$38
05509 139C                        6C            .byte	$6C
05510 139D                        C6            .byte	$C6
05511 139E                        FE            .byte	$FE
05512 139F                        C6            .byte	$C6
05513 13A0                        C6            .byte	$C6
05514 13A1                        00            .byte	0
05515                                           ! 845  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05516 13A2                        30            .byte	$30
05517 13A3                        30            .byte	$30
05518 13A4                        00            .byte	0
05519 13A5                        78            .byte	$78
05520 13A6                        CC            .byte	$CC
05521 13A7                        FC            .byte	$FC
05522 13A8                        CC            .byte	$CC
05523 13A9                        00            .byte	0
05524                                           ! 846  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05525 13AA                        1C            .byte	$1C
05526 13AB                        00            .byte	0
05527 13AC                        FC            .byte	$FC
05528 13AD                        60            .byte	$60
05529 13AE                        78            .byte	$78
05530 13AF                        60            .byte	$60
05531 13B0                        FC            .byte	$FC
05532 13B1                        00            .byte	0
05533                                           ! 847  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05534 13B2                        00            .byte	0
05535 13B3                        00            .byte	0
05536 13B4                        7F            .byte	$7F
05537 13B5                        0C            .byte	$C
05538 13B6                        7F            .byte	$7F
05539 13B7                        CC            .byte	$CC
05540 13B8                        7F            .byte	$7F
05541 13B9                        00            .byte	0
05542                                           ! 848  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05543 13BA                        3E            .byte	$3E
05544 13BB                        6C            .byte	$6C
05545 13BC                        CC            .byte	$CC
05546 13BD                        FE            .byte	$FE
05547 13BE                        CC            .byte	$CC
05548 13BF                        CC            .byte	$CC
05549 13C0                        CE            .byte	$CE
05550 13C1                        00            .byte	0
05551                                           ! 849  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05552 13C2                        78            .byte	$78
05553 13C3                        CC            .byte	$CC
05554 13C4                        00            .byte	0
05555 13C5                        78            .byte	$78
05556 13C6                        CC            .byte	$CC
05557 13C7                        CC            .byte	$CC
05558 13C8                        78            .byte	$78
05559 13C9                        00            .byte	0
05560                                           ! 850  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05561 13CA                        00            .byte	0
05562 13CB                        CC            .byte	$CC
05563 13CC                        00            .byte	0
05564 13CD                        78            .byte	$78
05565 13CE                        CC            .byte	$CC
05566 13CF                        CC            .byte	$CC
05567 13D0                        78            .byte	$78
05568 13D1                        00            .byte	0
05569                                           ! 851  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05570 13D2                        00            .byte	0
05571 13D3                        E0            .byte	$E0
05572 13D4                        00            .byte	0
05573 13D5                        78            .byte	$78
05574 13D6                        CC            .byte	$CC
05575 13D7                        CC            .byte	$CC
05576 13D8                        78            .byte	$78
05577 13D9                        00            .byte	0
05578                                           ! 852  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05579 13DA                        78            .byte	$78
05580 13DB                        CC            .byte	$CC
05581 13DC                        00            .byte	0
05582 13DD                        CC            .byte	$CC
05583 13DE                        CC            .byte	$CC
05584 13DF                        CC            .byte	$CC
05585 13E0                        7E            .byte	$7E
05586 13E1                        00            .byte	0
05587                                           ! 853  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05588 13E2                        00            .byte	0
05589 13E3                        E0            .byte	$E0
05590 13E4                        00            .byte	0
05591 13E5                        CC            .byte	$CC
05592 13E6                        CC            .byte	$CC
05593 13E7                        CC            .byte	$CC
05594 13E8                        7E            .byte	$7E
05595 13E9                        00            .byte	0
05596                                           ! 854  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05597 13EA                        00            .byte	0
05598 13EB                        CC            .byte	$CC
05599 13EC                        00            .byte	0
05600 13ED                        CC            .byte	$CC
05601 13EE                        CC            .byte	$CC
05602 13EF                        7C            .byte	$7C
05603 13F0                        0C            .byte	$C
05604 13F1                        F8            .byte	$F8
05605                                           ! 855  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05606 13F2                        C3            .byte	$C3
05607 13F3                        18            .byte	$18
05608 13F4                        3C            .byte	$3C
05609 13F5                        66            .byte	$66
05610 13F6                        66            .byte	$66
05611 13F7                        3C            .byte	$3C
05612 13F8                        18            .byte	$18
05613 13F9                        00            .byte	0
05614                                           ! 856  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05615 13FA                        CC            .byte	$CC
05616 13FB                        00            .byte	0
05617 13FC                        CC            .byte	$CC
05618 13FD                        CC            .byte	$CC
05619 13FE                        CC            .byte	$CC
05620 13FF                        CC            .byte	$CC
05621 1400                        78            .byte	$78
05622 1401                        00            .byte	0
05623                                           ! 857  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05624 1402                        18            .byte	$18
05625 1403                        18            .byte	$18
05626 1404                        7E            .byte	$7E
05627 1405                        C0            .byte	$C0
05628 1406                        C0            .byte	$C0
05629 1407                        7E            .byte	$7E
05630 1408                        18            .byte	$18
05631 1409                        18            .byte	$18
05632                                           ! 858  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05633 140A                        38            .byte	$38
05634 140B                        6C            .byte	$6C
05635 140C                        64            .byte	$64
05636 140D                        F0            .byte	$F0
05637 140E                        60            .byte	$60
05638 140F                        E6            .byte	$E6
05639 1410                        FC            .byte	$FC
05640 1411                        00            .byte	0
05641                                           ! 859  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05642 1412                        CC            .byte	$CC
05643 1413                        CC            .byte	$CC
05644 1414                        78            .byte	$78
05645 1415                        FC            .byte	$FC
05646 1416                        30            .byte	$30
05647 1417                        FC            .byte	$FC
05648 1418                        30            .byte	$30
05649 1419                        30            .byte	$30
05650                                           ! 860  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05651 141A                        F8            .byte	$F8
05652 141B                        CC            .byte	$CC
05653 141C                        CC            .byte	$CC
05654 141D                        FA            .byte	$FA
05655 141E                        C6            .byte	$C6
05656 141F                        CF            .byte	$CF
05657 1420                        C6            .byte	$C6
05658 1421                        C7            .byte	$C7
05659                                           ! 861  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05660 1422                        0E            .byte	$E
05661 1423                        1B            .byte	$1B
05662 1424                        18            .byte	$18
05663 1425                        3C            .byte	$3C
05664 1426                        18            .byte	$18
05665 1427                        18            .byte	$18
05666 1428                        D8            .byte	$D8
05667 1429                        70            .byte	$70
05668                                           ! 862  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05669 142A                        1C            .byte	$1C
05670 142B                        00            .byte	0
05671 142C                        78            .byte	$78
05672 142D                        0C            .byte	$C
05673 142E                        7C            .byte	$7C
05674 142F                        CC            .byte	$CC
05675 1430                        7E            .byte	$7E
05676 1431                        00            .byte	0
05677                                           ! 863  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05678 1432                        38            .byte	$38
05679 1433                        00            .byte	0
05680 1434                        70            .byte	$70
05681 1435                        30            .byte	$30
05682 1436                        30            .byte	$30
05683 1437                        30            .byte	$30
05684 1438                        78            .byte	$78
05685 1439                        00            .byte	0
05686                                           ! 864  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05687 143A                        00            .byte	0
05688 143B                        1C            .byte	$1C
05689 143C                        00            .byte	0
05690 143D                        78            .byte	$78
05691 143E                        CC            .byte	$CC
05692 143F                        CC            .byte	$CC
05693 1440                        78            .byte	$78
05694 1441                        00            .byte	0
05695                                           ! 865  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05696 1442                        00            .byte	0
05697 1443                        1C            .byte	$1C
05698 1444                        00            .byte	0
05699 1445                        CC            .byte	$CC
05700 1446                        CC            .byte	$CC
05701 1447                        CC            .byte	$CC
05702 1448                        7E            .byte	$7E
05703 1449                        00            .byte	0
05704                                           ! 866  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
05705 144A                        00            .byte	0
05706 144B                        F8            .byte	$F8
05707 144C                        00            .byte	0
05708 144D                        F8            .byte	$F8
05709 144E                        CC            .byte	$CC
05710 144F                        CC            .byte	$CC
05711 1450                        CC            .byte	$CC
05712 1451                        00            .byte	0
05713                                           ! 867  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
05714 1452                        FC            .byte	$FC
05715 1453                        00            .byte	0
05716 1454                        CC            .byte	$CC
05717 1455                        EC            .byte	$EC
05718 1456                        FC            .byte	$FC
05719 1457                        DC            .byte	$DC
05720 1458                        CC            .byte	$CC
05721 1459                        00            .byte	0
05722                                           ! 868  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
05723 145A                        3C            .byte	$3C
05724 145B                        6C            .byte	$6C
05725 145C                        6C            .byte	$6C
05726 145D                        3E            .byte	$3E
05727 145E                        00            .byte	0
05728 145F                        7E            .byte	$7E
05729 1460                        00            .byte	0
05730 1461                        00            .byte	0
05731                                           ! 869  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
05732 1462                        38            .byte	$38
05733 1463                        6C            .byte	$6C
05734 1464                        6C            .byte	$6C
05735 1465                        38            .byte	$38
05736 1466                        00            .byte	0
05737 1467                        7C            .byte	$7C
05738 1468                        00            .byte	0
05739 1469                        00            .byte	0
05740                                           ! 870  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
05741 146A                        30            .byte	$30
05742 146B                        00            .byte	0
05743 146C                        30            .byte	$30
05744 146D                        60            .byte	$60
05745 146E                        C0            .byte	$C0
05746 146F                        CC            .byte	$CC
05747 1470                        78            .byte	$78
05748 1471                        00            .byte	0
05749                                           ! 871  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
05750 1472                        00            .byte	0
05751 1473                        00            .byte	0
05752 1474                        00            .byte	0
05753 1475                        FC            .byte	$FC
05754 1476                        C0            .byte	$C0
05755 1477                        C0            .byte	$C0
05756 1478                        00            .byte	0
05757 1479                        00            .byte	0
05758                                           ! 872  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
05759 147A                        00            .byte	0
05760 147B                        00            .byte	0
05761 147C                        00            .byte	0
05762 147D                        FC            .byte	$FC
05763 147E                        0C            .byte	$C
05764 147F                        0C            .byte	$C
05765 1480                        00            .byte	0
05766 1481                        00            .byte	0
05767                                           ! 873  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
05768 1482                        C3            .byte	$C3
05769 1483                        C6            .byte	$C6
05770 1484                        CC            .byte	$CC
05771 1485                        DE            .byte	$DE
05772 1486                        33            .byte	$33
05773 1487                        66            .byte	$66
05774 1488                        CC            .byte	$CC
05775 1489                        0F            .byte	$F
05776                                           ! 874  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
05777 148A                        C3            .byte	$C3
05778 148B                        C6            .byte	$C6
05779 148C                        CC            .byte	$CC
05780 148D                        DB            .byte	$DB
05781 148E                        37            .byte	$37
05782 148F                        6F            .byte	$6F
05783 1490                        CF            .byte	$CF
05784 1491                        03            .byte	3
05785                                           ! 875  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
05786 1492                        18            .byte	$18
05787 1493                        18            .byte	$18
05788 1494                        00            .byte	0
05789 1495                        18            .byte	$18
05790 1496                        18            .byte	$18
05791 1497                        18            .byte	$18
05792 1498                        18            .byte	$18
05793 1499                        00            .byte	0
05794                                           ! 876  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
05795 149A                        00            .byte	0
05796 149B                        33            .byte	$33
05797 149C                        66            .byte	$66
05798 149D                        CC            .byte	$CC
05799 149E                        66            .byte	$66
05800 149F                        33            .byte	$33
05801 14A0                        00            .byte	0
05802 14A1                        00            .byte	0
05803                                           ! 877  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
05804 14A2                        00            .byte	0
05805 14A3                        CC            .byte	$CC
05806 14A4                        66            .byte	$66
05807 14A5                        33            .byte	$33
05808 14A6                        66            .byte	$66
05809 14A7                        CC            .byte	$CC
05810 14A8                        00            .byte	0
05811 14A9                        00            .byte	0
05812                                           ! 878  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
05813 14AA                        22            .byte	$22
05814 14AB                        88            .byte	$88
05815 14AC                        22            .byte	$22
05816 14AD                        88            .byte	$88
05817 14AE                        22            .byte	$22
05818 14AF                        88            .byte	$88
05819 14B0                        22            .byte	$22
05820 14B1                        88            .byte	$88
05821                                           ! 879  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
05822 14B2                        55            .byte	$55
05823 14B3                        AA            .byte	$AA
05824 14B4                        55            .byte	$55
05825 14B5                        AA            .byte	$AA
05826 14B6                        55            .byte	$55
05827 14B7                        AA            .byte	$AA
05828 14B8                        55            .byte	$55
05829 14B9                        AA            .byte	$AA
05830                                           ! 880  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
05831 14BA                        DB            .byte	$DB
05832 14BB                        77            .byte	$77
05833 14BC                        DB            .byte	$DB
05834 14BD                        EE            .byte	$EE
05835 14BE                        DB            .byte	$DB
05836 14BF                        77            .byte	$77
05837 14C0                        DB            .byte	$DB
05838 14C1                        EE            .byte	$EE
05839                                           ! 881  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
05840 14C2                        18            .byte	$18
05841 14C3                        18            .byte	$18
05842 14C4                        18            .byte	$18
05843 14C5                        18            .byte	$18
05844 14C6                        18            .byte	$18
05845 14C7                        18            .byte	$18
05846 14C8                        18            .byte	$18
05847 14C9                        18            .byte	$18
05848                                           ! 882  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
05849 14CA                        18            .byte	$18
05850 14CB                        18            .byte	$18
05851 14CC                        18            .byte	$18
05852 14CD                        18            .byte	$18
05853 14CE                        F8            .byte	$F8
05854 14CF                        18            .byte	$18
05855 14D0                        18            .byte	$18
05856 14D1                        18            .byte	$18
05857                                           ! 883  0x18
05858                                           ! 883 , 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05859 14D2                        18            .byte	$18
05860 14D3                        18            .byte	$18
05861 14D4                        F8            .byte	$F8
05862 14D5                        18            .byte	$18
05863 14D6                        F8            .byte	$F8
05864 14D7                        18            .byte	$18
05865 14D8                        18            .byte	$18
05866 14D9                        18            .byte	$18
05867                                           ! 884  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
05868 14DA                        36            .byte	$36
05869 14DB                        36            .byte	$36
05870 14DC                        36            .byte	$36
05871 14DD                        36            .byte	$36
05872 14DE                        F6            .byte	$F6
05873 14DF                        36            .byte	$36
05874 14E0                        36            .byte	$36
05875 14E1                        36            .byte	$36
05876                                           ! 885  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
05877 14E2                        00            .byte	0
05878 14E3                        00            .byte	0
05879 14E4                        00            .byte	0
05880 14E5                        00            .byte	0
05881 14E6                        FE            .byte	$FE
05882 14E7                        36            .byte	$36
05883 14E8                        36            .byte	$36
05884 14E9                        36            .byte	$36
05885                                           ! 886  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05886 14EA                        00            .byte	0
05887 14EB                        00            .byte	0
05888 14EC                        F8            .byte	$F8
05889 14ED                        18            .byte	$18
05890 14EE                        F8            .byte	$F8
05891 14EF                        18            .byte	$18
05892 14F0                        18            .byte	$18
05893 14F1                        18            .byte	$18
05894                                           ! 887  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
05895 14F2                        36            .byte	$36
05896 14F3                        36            .byte	$36
05897 14F4                        F6            .byte	$F6
05898 14F5                        06            .byte	6
05899 14F6                        F6            .byte	$F6
05900 14F7                        36            .byte	$36
05901 14F8                        36            .byte	$36
05902 14F9                        36            .byte	$36
05903                                           ! 888  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
05904 14FA                        36            .byte	$36
05905 14FB                        36            .byte	$36
05906 14FC                        36            .byte	$36
05907 14FD                        36            .byte	$36
05908 14FE                        36            .byte	$36
05909 14FF                        36            .byte	$36
05910 1500                        36            .byte	$36
05911 1501                        36            .byte	$36
05912                                           ! 889  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
05913 1502                        00            .byte	0
05914 1503                        00            .byte	0
05915 1504                        FE            .byte	$FE
05916 1505                        06            .byte	6
05917 1506                        F6            .byte	$F6
05918 1507                        36            .byte	$36
05919 1508                        36            .byte	$36
05920 1509                        36            .byte	$36
05921                                           ! 890  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
05922 150A                        36            .byte	$36
05923 150B                        36            .byte	$36
05924 150C                        F6            .byte	$F6
05925 150D                        06            .byte	6
05926 150E                        FE            .byte	$FE
05927 150F                        00            .byte	0
05928 1510                        00            .byte	0
05929 1511                        00            .byte	0
05930                                           ! 891  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
05931 1512                        36            .byte	$36
05932 1513                        36            .byte	$36
05933 1514                        36            .byte	$36
05934 1515                        36            .byte	$36
05935 1516                        FE            .byte	$FE
05936 1517                        00            .byte	0
05937 1518                        00            .byte	0
05938 1519                        00            .byte	0
05939                                           ! 892  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
05940 151A                        18            .byte	$18
05941 151B                        18            .byte	$18
05942 151C                        F8            .byte	$F8
05943 151D                        18            .byte	$18
05944 151E                        F8            .byte	$F8
05945 151F                        00            .byte	0
05946 1520                        00            .byte	0
05947 1521                        00            .byte	0
05948                                           ! 893  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
05949 1522                        00            .byte	0
05950 1523                        00            .byte	0
05951 1524                        00            .byte	0
05952 1525                        00            .byte	0
05953 1526                        F8            .byte	$F8
05954 1527                        18            .byte	$18
05955 1528                        18            .byte	$18
05956 1529                        18            .byte	$18
05957                                           ! 894  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
05958 152A                        18            .byte	$18
05959 152B                        18            .byte	$18
05960 152C                        18            .byte	$18
05961 152D                        18            .byte	$18
05962 152E                        1F            .byte	$1F
05963 152F                        00            .byte	0
05964 1530                        00            .byte	0
05965 1531                        00            .byte	0
05966                                           ! 895  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
05967 1532                        18            .byte	$18
05968 1533                        18            .byte	$18
05969 1534                        18            .byte	$18
05970 1535                        18            .byte	$18
05971 1536                        FF            .byte	$FF
05972 1537                        00            .byte	0
05973 1538                        00            .byte	0
05974 1539                        00            .byte	0
05975                                           ! 896  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
05976 153A                        00            .byte	0
05977 153B                        00            .byte	0
05978 153C                        00            .byte	0
05979 153D                        00            .byte	0
05980 153E                        FF            .byte	$FF
05981 153F                        18            .byte	$18
05982 1540                        18            .byte	$18
05983 1541                        18            .byte	$18
05984                                           ! 897  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
05985 1542                        18            .byte	$18
05986 1543                        18            .byte	$18
05987 1544                        18            .byte	$18
05988 1545                        18            .byte	$18
05989 1546                        1F            .byte	$1F
05990 1547                        18            .byte	$18
05991 1548                        18            .byte	$18
05992 1549                        18            .byte	$18
05993                                           ! 898  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
05994 154A                        00            .byte	0
05995 154B                        00            .byte	0
05996 154C                        00            .byte	0
05997 154D                        00            .byte	0
05998 154E                        FF            .byte	$FF
05999 154F                        00            .byte	0
06000 1550                        00            .byte	0
06001 1551                        00            .byte	0
06002                                           ! 899  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06003 1552                        18            .byte	$18
06004 1553                        18            .byte	$18
06005 1554                        18            .byte	$18
06006 1555                        18            .byte	$18
06007 1556                        FF            .byte	$FF
06008 1557                        18            .byte	$18
06009 1558                        18            .byte	$18
06010 1559                        18            .byte	$18
06011                                           ! 900  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06012 155A                        18            .byte	$18
06013 155B                        18            .byte	$18
06014 155C                        1F            .byte	$1F
06015 155D                        18            .byte	$18
06016 155E                        1F            .byte	$1F
06017 155F                        18            .byte	$18
06018 1560                        18            .byte	$18
06019 1561                        18            .byte	$18
06020                                           ! 901  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06021 1562                        36            .byte	$36
06022 1563                        36            .byte	$36
06023 1564                        36            .byte	$36
06024 1565                        36            .byte	$36
06025 1566                        37            .byte	$37
06026 1567                        36            .byte	$36
06027 1568                        36            .byte	$36
06028 1569                        36            .byte	$36
06029                                           ! 902  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06030 156A                        36            .byte	$36
06031 156B                        36            .byte	$36
06032 156C                        37            .byte	$37
06033 156D                        30            .byte	$30
06034 156E                        3F            .byte	$3F
06035 156F                        00            .byte	0
06036 1570                        00            .byte	0
06037 1571                        00            .byte	0
06038                                           ! 903  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06039 1572                        00            .byte	0
06040 1573                        00            .byte	0
06041 1574                        3F            .byte	$3F
06042 1575                        30            .byte	$30
06043 1576                        37            .byte	$37
06044 1577                        36            .byte	$36
06045 1578                        36            .byte	$36
06046 1579                        36            .byte	$36
06047                                           ! 904  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06048 157A                        36            .byte	$36
06049 157B                        36            .byte	$36
06050 157C                        F7            .byte	$F7
06051 157D                        00            .byte	0
06052 157E                        FF            .byte	$FF
06053 157F                        00            .byte	0
06054 1580                        00            .byte	0
06055 1581                        00            .byte	0
06056                                           ! 905  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06057 1582                        00            .byte	0
06058 1583                        00            .byte	0
06059 1584                        FF            .byte	$FF
06060 1585                        00            .byte	0
06061 1586                        F7            .byte	$F7
06062 1587                        36            .byte	$36
06063 1588                        36            .byte	$36
06064 1589                        36            .byte	$36
06065                                           ! 906  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06066 158A                        36            .byte	$36
06067 158B                        36            .byte	$36
06068 158C                        37            .byte	$37
06069 158D                        30            .byte	$30
06070 158E                        37            .byte	$37
06071 158F                        36            .byte	$36
06072 1590                        36            .byte	$36
06073 1591                        36            .byte	$36
06074                                           ! 907  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06075 1592                        00            .byte	0
06076 1593                        00            .byte	0
06077 1594                        FF            .byte	$FF
06078 1595                        00            .byte	0
06079 1596                        FF            .byte	$FF
06080 1597                        00            .byte	0
06081 1598                        00            .byte	0
06082 1599                        00            .byte	0
06083                                           ! 908  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06084 159A                        36            .byte	$36
06085 159B                        36            .byte	$36
06086 159C                        F7            .byte	$F7
06087 159D                        00            .byte	0
06088 159E                        F7            .byte	$F7
06089 159F                        36            .byte	$36
06090 15A0                        36            .byte	$36
06091 15A1                        36            .byte	$36
06092                                           ! 909  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06093 15A2                        18            .byte	$18
06094 15A3                        18            .byte	$18
06095 15A4                        FF            .byte	$FF
06096 15A5                        00            .byte	0
06097 15A6                        FF            .byte	$FF
06098 15A7                        00            .byte	0
06099 15A8                        00            .byte	0
06100 15A9                        00            .byte	0
06101                                           ! 910  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06102 15AA                        36            .byte	$36
06103 15AB                        36            .byte	$36
06104 15AC                        36            .byte	$36
06105 15AD                        36            .byte	$36
06106 15AE                        FF            .byte	$FF
06107 15AF                        00            .byte	0
06108 15B0                        00            .byte	0
06109 15B1                        00            .byte	0
06110                                           ! 911  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06111 15B2                        00            .byte	0
06112 15B3                        00            .byte	0
06113 15B4                        FF            .byte	$FF
06114 15B5                        00            .byte	0
06115 15B6                        FF            .byte	$FF
06116 15B7                        18            .byte	$18
06117 15B8                        18            .byte	$18
06118 15B9                        18            .byte	$18
06119                                           ! 912  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06120 15BA                        00            .byte	0
06121 15BB                        00            .byte	0
06122 15BC                        00            .byte	0
06123 15BD                        00            .byte	0
06124 15BE                        FF            .byte	$FF
06125 15BF                        36            .byte	$36
06126 15C0                        36            .byte	$36
06127 15C1                        36            .byte	$36
06128                                           ! 913  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06129 15C2                        36            .byte	$36
06130 15C3                        36            .byte	$36
06131 15C4                        36            .byte	$36
06132 15C5                        36            .byte	$36
06133 15C6                        3F            .byte	$3F
06134 15C7                        00            .byte	0
06135 15C8                        00            .byte	0
06136 15C9                        00            .byte	0
06137                                           ! 914  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06138 15CA                        18            .byte	$18
06139 15CB                        18            .byte	$18
06140 15CC                        1F            .byte	$1F
06141 15CD                        18            .byte	$18
06142 15CE                        1F            .byte	$1F
06143 15CF                        00            .byte	0
06144 15D0                        00            .byte	0
06145 15D1                        00            .byte	0
06146                                           ! 915  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06147 15D2                        00            .byte	0
06148 15D3                        00            .byte	0
06149 15D4                        1F            .byte	$1F
06150 15D5                        18            .byte	$18
06151 15D6                        1F            .byte	$1F
06152 15D7                        18            .byte	$18
06153 15D8                        18            .byte	$18
06154 15D9                        18            .byte	$18
06155                                           ! 916  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06156 15DA                        00            .byte	0
06157 15DB                        00            .byte	0
06158 15DC                        00            .byte	0
06159 15DD                        00            .byte	0
06160 15DE                        3F            .byte	$3F
06161 15DF                        36            .byte	$36
06162 15E0                        36            .byte	$36
06163 15E1                        36            .byte	$36
06164                                           ! 917  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06165 15E2                        36            .byte	$36
06166 15E3                        36            .byte	$36
06167 15E4                        36            .byte	$36
06168 15E5                        36            .byte	$36
06169 15E6                        FF            .byte	$FF
06170 15E7                        36            .byte	$36
06171 15E8                        36            .byte	$36
06172 15E9                        36            .byte	$36
06173                                           ! 918  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06174 15EA                        18            .byte	$18
06175 15EB                        18            .byte	$18
06176 15EC                        FF            .byte	$FF
06177 15ED                        18            .byte	$18
06178 15EE                        FF            .byte	$FF
06179 15EF                        18            .byte	$18
06180 15F0                        18            .byte	$18
06181 15F1                        18            .byte	$18
06182                                           ! 919  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06183 15F2                        18            .byte	$18
06184 15F3                        18            .byte	$18
06185 15F4                        18            .byte	$18
06186 15F5                        18            .byte	$18
06187 15F6                        F8            .byte	$F8
06188 15F7                        00            .byte	0
06189 15F8                        00            .byte	0
06190 15F9                        00            .byte	0
06191                                           ! 920  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06192 15FA                        00            .byte	0
06193 15FB                        00            .byte	0
06194 15FC                        00            .byte	0
06195 15FD                        00            .byte	0
06196 15FE                        1F            .byte	$1F
06197 15FF                        18            .byte	$18
06198 1600                        18            .byte	$18
06199 1601                        18            .byte	$18
06200                                           ! 921  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06201 1602                        FF            .byte	$FF
06202 1603                        FF            .byte	$FF
06203 1604                        FF            .byte	$FF
06204 1605                        FF            .byte	$FF
06205 1606                        FF            .byte	$FF
06206 1607                        FF            .byte	$FF
06207 1608                        FF            .byte	$FF
06208 1609                        FF            .byte	$FF
06209                                           ! 922  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06210 160A                        00            .byte	0
06211 160B                        00            .byte	0
06212 160C                        00            .byte	0
06213 160D                        00            .byte	0
06214 160E                        FF            .byte	$FF
06215 160F                        FF            .byte	$FF
06216 1610                        FF            .byte	$FF
06217 1611                        FF            .byte	$FF
06218                                           ! 923  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06219 1612                        F0            .byte	$F0
06220 1613                        F0            .byte	$F0
06221 1614                        F0            .byte	$F0
06222 1615                        F0            .byte	$F0
06223 1616                        F0            .byte	$F0
06224 1617                        F0            .byte	$F0
06225 1618                        F0            .byte	$F0
06226 1619                        F0            .byte	$F0
06227                                           ! 924  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0
06228 161A                        0F            .byte	$F
06229 161B                        0F            .byte	$F
06230 161C                        0F            .byte	$F
06231 161D                        0F            .byte	$F
06232 161E                        0F            .byte	$F
06233 161F                        0F            .byte	$F
06234 1620                        0F            .byte	$F
06235                                           ! 924 x0f,
06236 1621                        0F            .byte	$F
06237                                           ! 925  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06238 1622                        FF            .byte	$FF
06239 1623                        FF            .byte	$FF
06240 1624                        FF            .byte	$FF
06241 1625                        FF            .byte	$FF
06242 1626                        00            .byte	0
06243 1627                        00            .byte	0
06244 1628                        00            .byte	0
06245 1629                        00            .byte	0
06246                                           ! 926  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06247 162A                        00            .byte	0
06248 162B                        00            .byte	0
06249 162C                        76            .byte	$76
06250 162D                        DC            .byte	$DC
06251 162E                        C8            .byte	$C8
06252 162F                        DC            .byte	$DC
06253 1630                        76            .byte	$76
06254 1631                        00            .byte	0
06255                                           ! 927  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06256 1632                        00            .byte	0
06257 1633                        78            .byte	$78
06258 1634                        CC            .byte	$CC
06259 1635                        F8            .byte	$F8
06260 1636                        CC            .byte	$CC
06261 1637                        F8            .byte	$F8
06262 1638                        C0            .byte	$C0
06263 1639                        C0            .byte	$C0
06264                                           ! 928  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06265 163A                        00            .byte	0
06266 163B                        FC            .byte	$FC
06267 163C                        CC            .byte	$CC
06268 163D                        C0            .byte	$C0
06269 163E                        C0            .byte	$C0
06270 163F                        C0            .byte	$C0
06271 1640                        C0            .byte	$C0
06272 1641                        00            .byte	0
06273                                           ! 929  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06274 1642                        00            .byte	0
06275 1643                        FE            .byte	$FE
06276 1644                        6C            .byte	$6C
06277 1645                        6C            .byte	$6C
06278 1646                        6C            .byte	$6C
06279 1647                        6C            .byte	$6C
06280 1648                        6C            .byte	$6C
06281 1649                        00            .byte	0
06282                                           ! 930  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06283 164A                        FC            .byte	$FC
06284 164B                        CC            .byte	$CC
06285 164C                        60            .byte	$60
06286 164D                        30            .byte	$30
06287 164E                        60            .byte	$60
06288 164F                        CC            .byte	$CC
06289 1650                        FC            .byte	$FC
06290 1651                        00            .byte	0
06291                                           ! 931  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06292 1652                        00            .byte	0
06293 1653                        00            .byte	0
06294 1654                        7E            .byte	$7E
06295 1655                        D8            .byte	$D8
06296 1656                        D8            .byte	$D8
06297 1657                        D8            .byte	$D8
06298 1658                        70            .byte	$70
06299 1659                        00            .byte	0
06300                                           ! 932  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06301 165A                        00            .byte	0
06302 165B                        66            .byte	$66
06303 165C                        66            .byte	$66
06304 165D                        66            .byte	$66
06305 165E                        66            .byte	$66
06306 165F                        7C            .byte	$7C
06307 1660                        60            .byte	$60
06308 1661                        C0            .byte	$C0
06309                                           ! 933  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06310 1662                        00            .byte	0
06311 1663                        76            .byte	$76
06312 1664                        DC            .byte	$DC
06313 1665                        18            .byte	$18
06314 1666                        18            .byte	$18
06315 1667                        18            .byte	$18
06316 1668                        18            .byte	$18
06317 1669                        00            .byte	0
06318                                           ! 934  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06319 166A                        FC            .byte	$FC
06320 166B                        30            .byte	$30
06321 166C                        78            .byte	$78
06322 166D                        CC            .byte	$CC
06323 166E                        CC            .byte	$CC
06324 166F                        78            .byte	$78
06325 1670                        30            .byte	$30
06326 1671                        FC            .byte	$FC
06327                                           ! 935  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06328 1672                        38            .byte	$38
06329 1673                        6C            .byte	$6C
06330 1674                        C6            .byte	$C6
06331 1675                        FE            .byte	$FE
06332 1676                        C6            .byte	$C6
06333 1677                        6C            .byte	$6C
06334 1678                        38            .byte	$38
06335 1679                        00            .byte	0
06336                                           ! 936  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06337 167A                        38            .byte	$38
06338 167B                        6C            .byte	$6C
06339 167C                        C6            .byte	$C6
06340 167D                        C6            .byte	$C6
06341 167E                        6C            .byte	$6C
06342 167F                        6C            .byte	$6C
06343 1680                        EE            .byte	$EE
06344 1681                        00            .byte	0
06345                                           ! 937  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06346 1682                        1C            .byte	$1C
06347 1683                        30            .byte	$30
06348 1684                        18            .byte	$18
06349 1685                        7C            .byte	$7C
06350 1686                        CC            .byte	$CC
06351 1687                        CC            .byte	$CC
06352 1688                        78            .byte	$78
06353 1689                        00            .byte	0
06354                                           ! 938  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06355 168A                        00            .byte	0
06356 168B                        00            .byte	0
06357 168C                        7E            .byte	$7E
06358 168D                        DB            .byte	$DB
06359 168E                        DB            .byte	$DB
06360 168F                        7E            .byte	$7E
06361 1690                        00            .byte	0
06362 1691                        00            .byte	0
06363                                           ! 939  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06364 1692                        06            .byte	6
06365 1693                        0C            .byte	$C
06366 1694                        7E            .byte	$7E
06367 1695                        DB            .byte	$DB
06368 1696                        DB            .byte	$DB
06369 1697                        7E            .byte	$7E
06370 1698                        60            .byte	$60
06371 1699                        C0            .byte	$C0
06372                                           ! 940  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06373 169A                        38            .byte	$38
06374 169B                        60            .byte	$60
06375 169C                        C0            .byte	$C0
06376 169D                        F8            .byte	$F8
06377 169E                        C0            .byte	$C0
06378 169F                        60            .byte	$60
06379 16A0                        38            .byte	$38
06380 16A1                        00            .byte	0
06381                                           ! 941  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06382 16A2                        78            .byte	$78
06383 16A3                        CC            .byte	$CC
06384 16A4                        CC            .byte	$CC
06385 16A5                        CC            .byte	$CC
06386 16A6                        CC            .byte	$CC
06387 16A7                        CC            .byte	$CC
06388 16A8                        CC            .byte	$CC
06389 16A9                        00            .byte	0
06390                                           ! 942  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06391 16AA                        00            .byte	0
06392 16AB                        FC            .byte	$FC
06393 16AC                        00            .byte	0
06394 16AD                        FC            .byte	$FC
06395 16AE                        00            .byte	0
06396 16AF                        FC            .byte	$FC
06397 16B0                        00            .byte	0
06398 16B1                        00            .byte	0
06399                                           ! 943  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06400 16B2                        30            .byte	$30
06401 16B3                        30            .byte	$30
06402 16B4                        FC            .byte	$FC
06403 16B5                        30            .byte	$30
06404 16B6                        30            .byte	$30
06405 16B7                        00            .byte	0
06406 16B8                        FC            .byte	$FC
06407 16B9                        00            .byte	0
06408                                           ! 944  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06409 16BA                        60            .byte	$60
06410 16BB                        30            .byte	$30
06411 16BC                        18            .byte	$18
06412 16BD                        30            .byte	$30
06413 16BE                        60            .byte	$60
06414 16BF                        00            .byte	0
06415 16C0                        FC            .byte	$FC
06416 16C1                        00            .byte	0
06417                                           ! 945  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06418 16C2                        18            .byte	$18
06419 16C3                        30            .byte	$30
06420 16C4                        60            .byte	$60
06421 16C5                        30            .byte	$30
06422 16C6                        18            .byte	$18
06423 16C7                        00            .byte	0
06424 16C8                        FC            .byte	$FC
06425 16C9                        00            .byte	0
06426                                           ! 946  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06427 16CA                        0E            .byte	$E
06428 16CB                        1B            .byte	$1B
06429 16CC                        1B            .byte	$1B
06430 16CD                        18            .byte	$18
06431 16CE                        18            .byte	$18
06432 16CF                        18            .byte	$18
06433 16D0                        18            .byte	$18
06434 16D1                        18            .byte	$18
06435                                           ! 947  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06436 16D2                        18            .byte	$18
06437 16D3                        18            .byte	$18
06438 16D4                        18            .byte	$18
06439 16D5                        18            .byte	$18
06440 16D6                        18            .byte	$18
06441 16D7                        D8            .byte	$D8
06442 16D8                        D8            .byte	$D8
06443 16D9                        70            .byte	$70
06444                                           ! 948  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06445 16DA                        30            .byte	$30
06446 16DB                        30            .byte	$30
06447 16DC                        00            .byte	0
06448 16DD                        FC            .byte	$FC
06449 16DE                        00            .byte	0
06450 16DF                        30            .byte	$30
06451 16E0                        30            .byte	$30
06452 16E1                        00            .byte	0
06453                                           ! 949  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06454 16E2                        00            .byte	0
06455 16E3                        76            .byte	$76
06456 16E4                        DC            .byte	$DC
06457 16E5                        00            .byte	0
06458 16E6                        76            .byte	$76
06459 16E7                        DC            .byte	$DC
06460 16E8                        00            .byte	0
06461 16E9                        00            .byte	0
06462                                           ! 950  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06463 16EA                        38            .byte	$38
06464 16EB                        6C            .byte	$6C
06465 16EC                        6C            .byte	$6C
06466 16ED                        38            .byte	$38
06467 16EE                        00            .byte	0
06468 16EF                        00            .byte	0
06469 16F0                        00            .byte	0
06470 16F1                        00            .byte	0
06471                                           ! 951  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06472 16F2                        00            .byte	0
06473 16F3                        00            .byte	0
06474 16F4                        00            .byte	0
06475 16F5                        18            .byte	$18
06476 16F6                        18            .byte	$18
06477 16F7                        00            .byte	0
06478 16F8                        00            .byte	0
06479 16F9                        00            .byte	0
06480                                           ! 952  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06481 16FA                        00            .byte	0
06482 16FB                        00            .byte	0
06483 16FC                        00            .byte	0
06484 16FD                        00            .byte	0
06485 16FE                        18            .byte	$18
06486 16FF                        00            .byte	0
06487 1700                        00            .byte	0
06488 1701                        00            .byte	0
06489                                           ! 953  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06490 1702                        0F            .byte	$F
06491 1703                        0C            .byte	$C
06492 1704                        0C            .byte	$C
06493 1705                        0C            .byte	$C
06494 1706                        EC            .byte	$EC
06495 1707                        6C            .byte	$6C
06496 1708                        3C            .byte	$3C
06497 1709                        1C            .byte	$1C
06498                                           ! 954  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06499 170A                        78            .byte	$78
06500 170B                        6C            .byte	$6C
06501 170C                        6C            .byte	$6C
06502 170D                        6C            .byte	$6C
06503 170E                        6C            .byte	$6C
06504 170F                        00            .byte	0
06505 1710                        00            .byte	0
06506 1711                        00            .byte	0
06507                                           ! 955  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06508 1712                        70            .byte	$70
06509 1713                        18            .byte	$18
06510 1714                        30            .byte	$30
06511 1715                        60            .byte	$60
06512 1716                        78            .byte	$78
06513 1717                        00            .byte	0
06514 1718                        00            .byte	0
06515 1719                        00            .byte	0
06516                                           ! 956  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06517 171A                        00            .byte	0
06518 171B                        00            .byte	0
06519 171C                        3C            .byte	$3C
06520 171D                        3C            .byte	$3C
06521 171E                        3C            .byte	$3C
06522 171F                        3C            .byte	$3C
06523 1720                        00            .byte	0
06524 1721                        00            .byte	0
06525                                           ! 957  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06526 1722                        00            .byte	0
06527 1723                        00            .byte	0
06528 1724                        00            .byte	0
06529 1725                        00            .byte	0
06530 1726                        00            .byte	0
06531 1727                        00            .byte	0
06532 1728                        00            .byte	0
06533                                           ! 958 };
06534 1729                        00            .byte	0
06535                                           !BCC_EOS
06536                                           ! 959 static Bit8u vgafont14[256*14]=
06537                                           ! 960 {
06538                       0000172A            _vgafont14:
06539                                           ! 961  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06540 172A                        00            .byte	0
06541 172B                        00            .byte	0
06542 172C                        00            .byte	0
06543 172D                        00            .byte	0
06544 172E                        00            .byte	0
06545 172F                        00            .byte	0
06546 1730                        00            .byte	0
06547 1731                        00            .byte	0
06548 1732                        00            .byte	0
06549 1733                        00            .byte	0
06550 1734                        00            .byte	0
06551 1735                        00            .byte	0
06552 1736                        00            .byte	0
06553 1737                        00            .byte	0
06554                                           ! 962  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06555 1738                        00            .byte	0
06556 1739                        00            .byte	0
06557 173A                        7E            .byte	$7E
06558 173B                        81            .byte	$81
06559 173C                        A5            .byte	$A5
06560 173D                        81            .byte	$81
06561 173E                        81            .byte	$81
06562 173F                        BD            .byte	$BD
06563 1740                        99            .byte	$99
06564 1741                        81            .byte	$81
06565 1742                        7E            .byte	$7E
06566 1743                        00            .byte	0
06567 1744                        00            .byte	0
06568 1745                        00            .byte	0
06569                                           ! 963  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06570 1746                        00            .byte	0
06571 1747                        00            .byte	0
06572 1748                        7E            .byte	$7E
06573 1749                        FF            .byte	$FF
06574 174A                        DB            .byte	$DB
06575 174B                        FF            .byte	$FF
06576 174C                        FF            .byte	$FF
06577 174D                        C3            .byte	$C3
06578 174E                        E7            .byte	$E7
06579 174F                        FF            .byte	$FF
06580 1750                        7E            .byte	$7E
06581 1751                        00            .byte	0
06582 1752                        00            .byte	0
06583 1753                        00            .byte	0
06584                                           ! 964  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06585 1754                        00            .byte	0
06586 1755                        00            .byte	0
06587 1756                        00            .byte	0
06588 1757                        6C            .byte	$6C
06589 1758                        FE            .byte	$FE
06590 1759                        FE            .byte	$FE
06591 175A                        FE            .byte	$FE
06592 175B                        FE            .byte	$FE
06593 175C                        7C            .byte	$7C
06594 175D                        38            .byte	$38
06595 175E                        10            .byte	$10
06596 175F                        00            .byte	0
06597 1760                        00            .byte	0
06598 1761                        00            .byte	0
06599                                           ! 965  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0
06600 1762                        00            .byte	0
06601 1763                        00            .byte	0
06602 1764                        00            .byte	0
06603 1765                        10            .byte	$10
06604 1766                        38            .byte	$38
06605 1767                        7C            .byte	$7C
06606 1768                        FE            .byte	$FE
06607 1769                        7C            .byte	$7C
06608                                           ! 965 x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06609 176A                        38            .byte	$38
06610 176B                        10            .byte	$10
06611 176C                        00            .byte	0
06612 176D                        00            .byte	0
06613 176E                        00            .byte	0
06614 176F                        00            .byte	0
06615                                           ! 966  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06616 1770                        00            .byte	0
06617 1771                        00            .byte	0
06618 1772                        18            .byte	$18
06619 1773                        3C            .byte	$3C
06620 1774                        3C            .byte	$3C
06621 1775                        E7            .byte	$E7
06622 1776                        E7            .byte	$E7
06623 1777                        E7            .byte	$E7
06624 1778                        18            .byte	$18
06625 1779                        18            .byte	$18
06626 177A                        3C            .byte	$3C
06627 177B                        00            .byte	0
06628 177C                        00            .byte	0
06629 177D                        00            .byte	0
06630                                           ! 967  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06631 177E                        00            .byte	0
06632 177F                        00            .byte	0
06633 1780                        18            .byte	$18
06634 1781                        3C            .byte	$3C
06635 1782                        7E            .byte	$7E
06636 1783                        FF            .byte	$FF
06637 1784                        FF            .byte	$FF
06638 1785                        7E            .byte	$7E
06639 1786                        18            .byte	$18
06640 1787                        18            .byte	$18
06641 1788                        3C            .byte	$3C
06642 1789                        00            .byte	0
06643 178A                        00            .byte	0
06644 178B                        00            .byte	0
06645                                           ! 968  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06646 178C                        00            .byte	0
06647 178D                        00            .byte	0
06648 178E                        00            .byte	0
06649 178F                        00            .byte	0
06650 1790                        00            .byte	0
06651 1791                        18            .byte	$18
06652 1792                        3C            .byte	$3C
06653 1793                        3C            .byte	$3C
06654 1794                        18            .byte	$18
06655 1795                        00            .byte	0
06656 1796                        00            .byte	0
06657 1797                        00            .byte	0
06658 1798                        00            .byte	0
06659 1799                        00            .byte	0
06660                                           ! 969  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06661 179A                        FF            .byte	$FF
06662 179B                        FF            .byte	$FF
06663 179C                        FF            .byte	$FF
06664 179D                        FF            .byte	$FF
06665 179E                        FF            .byte	$FF
06666 179F                        E7            .byte	$E7
06667 17A0                        C3            .byte	$C3
06668 17A1                        C3            .byte	$C3
06669 17A2                        E7            .byte	$E7
06670 17A3                        FF            .byte	$FF
06671 17A4                        FF            .byte	$FF
06672 17A5                        FF            .byte	$FF
06673 17A6                        FF            .byte	$FF
06674 17A7                        FF            .byte	$FF
06675                                           ! 970  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06676 17A8                        00            .byte	0
06677 17A9                        00            .byte	0
06678 17AA                        00            .byte	0
06679 17AB                        00            .byte	0
06680 17AC                        3C            .byte	$3C
06681 17AD                        66            .byte	$66
06682 17AE                        42            .byte	$42
06683 17AF                        42            .byte	$42
06684 17B0                        66            .byte	$66
06685 17B1                        3C            .byte	$3C
06686 17B2                        00            .byte	0
06687 17B3                        00            .byte	0
06688 17B4                        00            .byte	0
06689 17B5                        00            .byte	0
06690                                           ! 971  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06691 17B6                        FF            .byte	$FF
06692 17B7                        FF            .byte	$FF
06693 17B8                        FF            .byte	$FF
06694 17B9                        FF            .byte	$FF
06695 17BA                        C3            .byte	$C3
06696 17BB                        99            .byte	$99
06697 17BC                        BD            .byte	$BD
06698 17BD                        BD            .byte	$BD
06699 17BE                        99            .byte	$99
06700 17BF                        C3            .byte	$C3
06701 17C0                        FF            .byte	$FF
06702 17C1                        FF            .byte	$FF
06703 17C2                        FF            .byte	$FF
06704 17C3                        FF            .byte	$FF
06705                                           ! 972  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
06706 17C4                        00            .byte	0
06707 17C5                        00            .byte	0
06708 17C6                        1E            .byte	$1E
06709 17C7                        0E            .byte	$E
06710 17C8                        1A            .byte	$1A
06711 17C9                        32            .byte	$32
06712 17CA                        78            .byte	$78
06713 17CB                        CC            .byte	$CC
06714 17CC                        CC            .byte	$CC
06715 17CD                        CC            .byte	$CC
06716 17CE                        78            .byte	$78
06717 17CF                        00            .byte	0
06718 17D0                        00            .byte	0
06719 17D1                        00            .byte	0
06720                                           ! 973  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
06721 17D2                        00            .byte	0
06722 17D3                        00            .byte	0
06723 17D4                        3C            .byte	$3C
06724 17D5                        66            .byte	$66
06725 17D6                        66            .byte	$66
06726 17D7                        66            .byte	$66
06727 17D8                        3C            .byte	$3C
06728 17D9                        18            .byte	$18
06729 17DA                        7E            .byte	$7E
06730 17DB                        18            .byte	$18
06731 17DC                        18            .byte	$18
06732 17DD                        00            .byte	0
06733 17DE                        00            .byte	0
06734 17DF                        00            .byte	0
06735                                           ! 974  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
06736 17E0                        00            .byte	0
06737 17E1                        00            .byte	0
06738 17E2                        3F            .byte	$3F
06739 17E3                        33            .byte	$33
06740 17E4                        3F            .byte	$3F
06741 17E5                        30            .byte	$30
06742 17E6                        30            .byte	$30
06743 17E7                        30            .byte	$30
06744 17E8                        70            .byte	$70
06745 17E9                        F0            .byte	$F0
06746 17EA                        E0            .byte	$E0
06747 17EB                        00            .byte	0
06748 17EC                        00            .byte	0
06749 17ED                        00            .byte	0
06750                                           ! 975  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
06751 17EE                        00            .byte	0
06752 17EF                        00            .byte	0
06753 17F0                        7F            .byte	$7F
06754 17F1                        63            .byte	$63
06755 17F2                        7F            .byte	$7F
06756 17F3                        63            .byte	$63
06757 17F4                        63            .byte	$63
06758 17F5                        63            .byte	$63
06759 17F6                        67            .byte	$67
06760 17F7                        E7            .byte	$E7
06761 17F8                        E6            .byte	$E6
06762 17F9                        C0            .byte	$C0
06763 17FA                        00            .byte	0
06764 17FB                        00            .byte	0
06765                                           ! 976  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
06766 17FC                        00            .byte	0
06767 17FD                        00            .byte	0
06768 17FE                        18            .byte	$18
06769 17FF                        18            .byte	$18
06770 1800                        DB            .byte	$DB
06771 1801                        3C            .byte	$3C
06772 1802                        E7            .byte	$E7
06773 1803                        3C            .byte	$3C
06774 1804                        DB            .byte	$DB
06775 1805                        18            .byte	$18
06776 1806                        18            .byte	$18
06777 1807                        00            .byte	0
06778 1808                        00            .byte	0
06779 1809                        00            .byte	0
06780                                           ! 977  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
06781 180A                        00            .byte	0
06782 180B                        00            .byte	0
06783 180C                        80            .byte	$80
06784 180D                        C0            .byte	$C0
06785 180E                        E0            .byte	$E0
06786 180F                        F8            .byte	$F8
06787 1810                        FE            .byte	$FE
06788 1811                        F8            .byte	$F8
06789 1812                        E0            .byte	$E0
06790 1813                        C0            .byte	$C0
06791 1814                        80            .byte	$80
06792 1815                        00            .byte	0
06793 1816                        00            .byte	0
06794 1817                        00            .byte	0
06795                                           ! 978  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
06796 1818                        00            .byte	0
06797 1819                        00            .byte	0
06798 181A                        02            .byte	2
06799 181B                        06            .byte	6
06800 181C                        0E            .byte	$E
06801 181D                        3E            .byte	$3E
06802 181E                        FE            .byte	$FE
06803 181F                        3E            .byte	$3E
06804 1820                        0E            .byte	$E
06805 1821                        06            .byte	6
06806 1822                        02            .byte	2
06807 1823                        00            .byte	0
06808 1824                        00            .byte	0
06809 1825                        00            .byte	0
06810                                           ! 979  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06811 1826                        00            .byte	0
06812 1827                        00            .byte	0
06813 1828                        18            .byte	$18
06814 1829                        3C            .byte	$3C
06815 182A                        7E            .byte	$7E
06816 182B                        18            .byte	$18
06817 182C                        18            .byte	$18
06818 182D                        18            .byte	$18
06819 182E                        7E            .byte	$7E
06820 182F                        3C            .byte	$3C
06821 1830                        18            .byte	$18
06822 1831                        00            .byte	0
06823 1832                        00            .byte	0
06824 1833                        00            .byte	0
06825                                           ! 980  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
06826 1834                        00            .byte	0
06827 1835                        00            .byte	0
06828 1836                        66            .byte	$66
06829 1837                        66            .byte	$66
06830 1838                        66            .byte	$66
06831 1839                        66            .byte	$66
06832 183A                        66            .byte	$66
06833 183B                        66            .byte	$66
06834 183C                        00            .byte	0
06835 183D                        66            .byte	$66
06836 183E                        66            .byte	$66
06837 183F                        00            .byte	0
06838 1840                        00            .byte	0
06839 1841                        00            .byte	0
06840                                           ! 981  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
06841 1842                        00            .byte	0
06842 1843                        00            .byte	0
06843 1844                        7F            .byte	$7F
06844 1845                        DB            .byte	$DB
06845 1846                        DB            .byte	$DB
06846 1847                        DB            .byte	$DB
06847 1848                        7B            .byte	$7B
06848 1849                        1B            .byte	$1B
06849 184A                        1B            .byte	$1B
06850 184B                        1B            .byte	$1B
06851 184C                        1B            .byte	$1B
06852 184D                        00            .byte	0
06853 184E                        00            .byte	0
06854 184F                        00            .byte	0
06855                                           ! 982  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
06856 1850                        00            .byte	0
06857 1851                        7C            .byte	$7C
06858 1852                        C6            .byte	$C6
06859 1853                        60            .byte	$60
06860 1854                        38            .byte	$38
06861 1855                        6C            .byte	$6C
06862 1856                        C6            .byte	$C6
06863 1857                        C6            .byte	$C6
06864 1858                        6C            .byte	$6C
06865 1859                        38            .byte	$38
06866 185A                        0C            .byte	$C
06867 185B                        C6            .byte	$C6
06868 185C                        7C            .byte	$7C
06869 185D                        00            .byte	0
06870                                           ! 983  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
06871 185E                        00            .byte	0
06872 185F                        00            .byte	0
06873 1860                        00            .byte	0
06874 1861                        00            .byte	0
06875 1862                        00            .byte	0
06876 1863                        00            .byte	0
06877 1864                        00            .byte	0
06878 1865                        00            .byte	0
06879 1866                        FE            .byte	$FE
06880 1867                        FE            .byte	$FE
06881 1868                        FE            .byte	$FE
06882 1869                        00            .byte	0
06883 186A                        00            .byte	0
06884 186B                        00            .byte	0
06885                                           ! 984  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
06886 186C                        00            .byte	0
06887 186D                        00            .byte	0
06888 186E                        18            .byte	$18
06889 186F                        3C            .byte	$3C
06890 1870                        7E            .byte	$7E
06891 1871                        18            .byte	$18
06892 1872                        18            .byte	$18
06893 1873                        18            .byte	$18
06894 1874                        7E            .byte	$7E
06895 1875                        3C            .byte	$3C
06896 1876                        18            .byte	$18
06897 1877                        7E            .byte	$7E
06898 1878                        00            .byte	0
06899 1879                        00            .byte	0
06900                                           ! 985  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
06901 187A                        00            .byte	0
06902 187B                        00            .byte	0
06903 187C                        18            .byte	$18
06904 187D                        3C            .byte	$3C
06905 187E                        7E            .byte	$7E
06906 187F                        18            .byte	$18
06907 1880                        18            .byte	$18
06908 1881                        18            .byte	$18
06909 1882                        18            .byte	$18
06910 1883                        18            .byte	$18
06911 1884                        18            .byte	$18
06912 1885                        00            .byte	0
06913 1886                        00            .byte	0
06914 1887                        00            .byte	0
06915                                           ! 986  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06916 1888                        00            .byte	0
06917 1889                        00            .byte	0
06918 188A                        18            .byte	$18
06919 188B                        18            .byte	$18
06920 188C                        18            .byte	$18
06921 188D                        18            .byte	$18
06922 188E                        18            .byte	$18
06923 188F                        18            .byte	$18
06924 1890                        7E            .byte	$7E
06925 1891                        3C            .byte	$3C
06926 1892                        18            .byte	$18
06927 1893                        00            .byte	0
06928 1894                        00            .byte	0
06929 1895                        00            .byte	0
06930                                           ! 987  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06931 1896                        00            .byte	0
06932 1897                        00            .byte	0
06933 1898                        00            .byte	0
06934 1899                        00            .byte	0
06935 189A                        18            .byte	$18
06936 189B                        0C            .byte	$C
06937 189C                        FE            .byte	$FE
06938 189D                        0C            .byte	$C
06939 189E                        18            .byte	$18
06940 189F                        00            .byte	0
06941 18A0                        00            .byte	0
06942 18A1                        00            .byte	0
06943 18A2                        00            .byte	0
06944 18A3                        00            .byte	0
06945                                           ! 988  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
06946 18A4                        00            .byte	0
06947 18A5                        00            .byte	0
06948 18A6                        00            .byte	0
06949 18A7                        00            .byte	0
06950 18A8                        30            .byte	$30
06951 18A9                        60            .byte	$60
06952 18AA                        FE            .byte	$FE
06953 18AB                        60            .byte	$60
06954 18AC                        30            .byte	$30
06955 18AD                        00            .byte	0
06956 18AE                        00            .byte	0
06957 18AF                        00            .byte	0
06958 18B0                        00            .byte	0
06959 18B1                        00            .byte	0
06960                                           ! 989  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x0
06961 18B2                        00            .byte	0
06962 18B3                        00            .byte	0
06963 18B4                        00            .byte	0
06964 18B5                        00            .byte	0
06965 18B6                        00            .byte	0
06966 18B7                        C0            .byte	$C0
06967 18B8                        C0            .byte	$C0
06968 18B9                        C0            .byte	$C0
06969 18BA                        FE            .byte	$FE
06970                                           ! 989 0, 0x00, 0x00, 0x00, 0x00,
06971 18BB                        00            .byte	0
06972 18BC                        00            .byte	0
06973 18BD                        00            .byte	0
06974 18BE                        00            .byte	0
06975 18BF                        00            .byte	0
06976                                           ! 990  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
06977 18C0                        00            .byte	0
06978 18C1                        00            .byte	0
06979 18C2                        00            .byte	0
06980 18C3                        00            .byte	0
06981 18C4                        28            .byte	$28
06982 18C5                        6C            .byte	$6C
06983 18C6                        FE            .byte	$FE
06984 18C7                        6C            .byte	$6C
06985 18C8                        28            .byte	$28
06986 18C9                        00            .byte	0
06987 18CA                        00            .byte	0
06988 18CB                        00            .byte	0
06989 18CC                        00            .byte	0
06990 18CD                        00            .byte	0
06991                                           ! 991  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
06992 18CE                        00            .byte	0
06993 18CF                        00            .byte	0
06994 18D0                        00            .byte	0
06995 18D1                        10            .byte	$10
06996 18D2                        38            .byte	$38
06997 18D3                        38            .byte	$38
06998 18D4                        7C            .byte	$7C
06999 18D5                        7C            .byte	$7C
07000 18D6                        FE            .byte	$FE
07001 18D7                        FE            .byte	$FE
07002 18D8                        00            .byte	0
07003 18D9                        00            .byte	0
07004 18DA                        00            .byte	0
07005 18DB                        00            .byte	0
07006                                           ! 992  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07007 18DC                        00            .byte	0
07008 18DD                        00            .byte	0
07009 18DE                        00            .byte	0
07010 18DF                        FE            .byte	$FE
07011 18E0                        FE            .byte	$FE
07012 18E1                        7C            .byte	$7C
07013 18E2                        7C            .byte	$7C
07014 18E3                        38            .byte	$38
07015 18E4                        38            .byte	$38
07016 18E5                        10            .byte	$10
07017 18E6                        00            .byte	0
07018 18E7                        00            .byte	0
07019 18E8                        00            .byte	0
07020 18E9                        00            .byte	0
07021                                           ! 993  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07022 18EA                        00            .byte	0
07023 18EB                        00            .byte	0
07024 18EC                        00            .byte	0
07025 18ED                        00            .byte	0
07026 18EE                        00            .byte	0
07027 18EF                        00            .byte	0
07028 18F0                        00            .byte	0
07029 18F1                        00            .byte	0
07030 18F2                        00            .byte	0
07031 18F3                        00            .byte	0
07032 18F4                        00            .byte	0
07033 18F5                        00            .byte	0
07034 18F6                        00            .byte	0
07035 18F7                        00            .byte	0
07036                                           ! 994  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07037 18F8                        00            .byte	0
07038 18F9                        00            .byte	0
07039 18FA                        18            .byte	$18
07040 18FB                        3C            .byte	$3C
07041 18FC                        3C            .byte	$3C
07042 18FD                        3C            .byte	$3C
07043 18FE                        18            .byte	$18
07044 18FF                        18            .byte	$18
07045 1900                        00            .byte	0
07046 1901                        18            .byte	$18
07047 1902                        18            .byte	$18
07048 1903                        00            .byte	0
07049 1904                        00            .byte	0
07050 1905                        00            .byte	0
07051                                           ! 995  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07052 1906                        00            .byte	0
07053 1907                        66            .byte	$66
07054 1908                        66            .byte	$66
07055 1909                        66            .byte	$66
07056 190A                        24            .byte	$24
07057 190B                        00            .byte	0
07058 190C                        00            .byte	0
07059 190D                        00            .byte	0
07060 190E                        00            .byte	0
07061 190F                        00            .byte	0
07062 1910                        00            .byte	0
07063 1911                        00            .byte	0
07064 1912                        00            .byte	0
07065 1913                        00            .byte	0
07066                                           ! 996  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07067 1914                        00            .byte	0
07068 1915                        00            .byte	0
07069 1916                        6C            .byte	$6C
07070 1917                        6C            .byte	$6C
07071 1918                        FE            .byte	$FE
07072 1919                        6C            .byte	$6C
07073 191A                        6C            .byte	$6C
07074 191B                        6C            .byte	$6C
07075 191C                        FE            .byte	$FE
07076 191D                        6C            .byte	$6C
07077 191E                        6C            .byte	$6C
07078 191F                        00            .byte	0
07079 1920                        00            .byte	0
07080 1921                        00            .byte	0
07081                                           ! 997  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07082 1922                        18            .byte	$18
07083 1923                        18            .byte	$18
07084 1924                        7C            .byte	$7C
07085 1925                        C6            .byte	$C6
07086 1926                        C2            .byte	$C2
07087 1927                        C0            .byte	$C0
07088 1928                        7C            .byte	$7C
07089 1929                        06            .byte	6
07090 192A                        86            .byte	$86
07091 192B                        C6            .byte	$C6
07092 192C                        7C            .byte	$7C
07093 192D                        18            .byte	$18
07094 192E                        18            .byte	$18
07095 192F                        00            .byte	0
07096                                           ! 998  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07097 1930                        00            .byte	0
07098 1931                        00            .byte	0
07099 1932                        00            .byte	0
07100 1933                        00            .byte	0
07101 1934                        C2            .byte	$C2
07102 1935                        C6            .byte	$C6
07103 1936                        0C            .byte	$C
07104 1937                        18            .byte	$18
07105 1938                        30            .byte	$30
07106 1939                        66            .byte	$66
07107 193A                        C6            .byte	$C6
07108 193B                        00            .byte	0
07109 193C                        00            .byte	0
07110 193D                        00            .byte	0
07111                                           ! 999  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07112 193E                        00            .byte	0
07113 193F                        00            .byte	0
07114 1940                        38            .byte	$38
07115 1941                        6C            .byte	$6C
07116 1942                        6C            .byte	$6C
07117 1943                        38            .byte	$38
07118 1944                        76            .byte	$76
07119 1945                        DC            .byte	$DC
07120 1946                        CC            .byte	$CC
07121 1947                        CC            .byte	$CC
07122 1948                        76            .byte	$76
07123 1949                        00            .byte	0
07124 194A                        00            .byte	0
07125 194B                        00            .byte	0
07126                                           ! 1000  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07127 194C                        00            .byte	0
07128 194D                        30            .byte	$30
07129 194E                        30            .byte	$30
07130 194F                        30            .byte	$30
07131 1950                        60            .byte	$60
07132 1951                        00            .byte	0
07133 1952                        00            .byte	0
07134 1953                        00            .byte	0
07135 1954                        00            .byte	0
07136 1955                        00            .byte	0
07137 1956                        00            .byte	0
07138 1957                        00            .byte	0
07139 1958                        00            .byte	0
07140 1959                        00            .byte	0
07141                                           ! 1001  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07142 195A                        00            .byte	0
07143 195B                        00            .byte	0
07144 195C                        0C            .byte	$C
07145 195D                        18            .byte	$18
07146 195E                        30            .byte	$30
07147 195F                        30            .byte	$30
07148 1960                        30            .byte	$30
07149 1961                        30            .byte	$30
07150 1962                        30            .byte	$30
07151 1963                        18            .byte	$18
07152 1964                        0C            .byte	$C
07153 1965                        00            .byte	0
07154 1966                        00            .byte	0
07155 1967                        00            .byte	0
07156                                           ! 1002  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07157 1968                        00            .byte	0
07158 1969                        00            .byte	0
07159 196A                        30            .byte	$30
07160 196B                        18            .byte	$18
07161 196C                        0C            .byte	$C
07162 196D                        0C            .byte	$C
07163 196E                        0C            .byte	$C
07164 196F                        0C            .byte	$C
07165 1970                        0C            .byte	$C
07166 1971                        18            .byte	$18
07167 1972                        30            .byte	$30
07168 1973                        00            .byte	0
07169 1974                        00            .byte	0
07170 1975                        00            .byte	0
07171                                           ! 1003  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07172 1976                        00            .byte	0
07173 1977                        00            .byte	0
07174 1978                        00            .byte	0
07175 1979                        00            .byte	0
07176 197A                        66            .byte	$66
07177 197B                        3C            .byte	$3C
07178 197C                        FF            .byte	$FF
07179 197D                        3C            .byte	$3C
07180 197E                        66            .byte	$66
07181 197F                        00            .byte	0
07182 1980                        00            .byte	0
07183 1981                        00            .byte	0
07184 1982                        00            .byte	0
07185 1983                        00            .byte	0
07186                                           ! 1004  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07187 1984                        00            .byte	0
07188 1985                        00            .byte	0
07189 1986                        00            .byte	0
07190 1987                        00            .byte	0
07191 1988                        18            .byte	$18
07192 1989                        18            .byte	$18
07193 198A                        7E            .byte	$7E
07194 198B                        18            .byte	$18
07195 198C                        18            .byte	$18
07196 198D                        00            .byte	0
07197 198E                        00            .byte	0
07198 198F                        00            .byte	0
07199 1990                        00            .byte	0
07200 1991                        00            .byte	0
07201                                           ! 1005  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07202 1992                        00            .byte	0
07203 1993                        00            .byte	0
07204 1994                        00            .byte	0
07205 1995                        00            .byte	0
07206 1996                        00            .byte	0
07207 1997                        00            .byte	0
07208 1998                        00            .byte	0
07209 1999                        00            .byte	0
07210 199A                        18            .byte	$18
07211 199B                        18            .byte	$18
07212 199C                        18            .byte	$18
07213 199D                        30            .byte	$30
07214 199E                        00            .byte	0
07215 199F                        00            .byte	0
07216                                           ! 1006  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07217 19A0                        00            .byte	0
07218 19A1                        00            .byte	0
07219 19A2                        00            .byte	0
07220 19A3                        00            .byte	0
07221 19A4                        00            .byte	0
07222 19A5                        00            .byte	0
07223 19A6                        FE            .byte	$FE
07224 19A7                        00            .byte	0
07225 19A8                        00            .byte	0
07226 19A9                        00            .byte	0
07227 19AA                        00            .byte	0
07228 19AB                        00            .byte	0
07229 19AC                        00            .byte	0
07230 19AD                        00            .byte	0
07231                                           ! 1007  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07232 19AE                        00            .byte	0
07233 19AF                        00            .byte	0
07234 19B0                        00            .byte	0
07235 19B1                        00            .byte	0
07236 19B2                        00            .byte	0
07237 19B3                        00            .byte	0
07238 19B4                        00            .byte	0
07239 19B5                        00            .byte	0
07240 19B6                        00            .byte	0
07241 19B7                        18            .byte	$18
07242 19B8                        18            .byte	$18
07243 19B9                        00            .byte	0
07244 19BA                        00            .byte	0
07245 19BB                        00            .byte	0
07246                                           ! 1008  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07247 19BC                        00            .byte	0
07248 19BD                        00            .byte	0
07249 19BE                        02            .byte	2
07250 19BF                        06            .byte	6
07251 19C0                        0C            .byte	$C
07252 19C1                        18            .byte	$18
07253 19C2                        30            .byte	$30
07254 19C3                        60            .byte	$60
07255 19C4                        C0            .byte	$C0
07256 19C5                        80            .byte	$80
07257 19C6                        00            .byte	0
07258 19C7                        00            .byte	0
07259 19C8                        00            .byte	0
07260 19C9                        00            .byte	0
07261                                           ! 1009  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07262 19CA                        00            .byte	0
07263 19CB                        00            .byte	0
07264 19CC                        7C            .byte	$7C
07265 19CD                        C6            .byte	$C6
07266 19CE                        CE            .byte	$CE
07267 19CF                        DE            .byte	$DE
07268 19D0                        F6            .byte	$F6
07269 19D1                        E6            .byte	$E6
07270 19D2                        C6            .byte	$C6
07271 19D3                        C6            .byte	$C6
07272 19D4                        7C            .byte	$7C
07273 19D5                        00            .byte	0
07274 19D6                        00            .byte	0
07275 19D7                        00            .byte	0
07276                                           ! 1010  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07277 19D8                        00            .byte	0
07278 19D9                        00            .byte	0
07279 19DA                        18            .byte	$18
07280 19DB                        38            .byte	$38
07281 19DC                        78            .byte	$78
07282 19DD                        18            .byte	$18
07283 19DE                        18            .byte	$18
07284 19DF                        18            .byte	$18
07285 19E0                        18            .byte	$18
07286 19E1                        18            .byte	$18
07287 19E2                        7E            .byte	$7E
07288 19E3                        00            .byte	0
07289 19E4                        00            .byte	0
07290 19E5                        00            .byte	0
07291                                           ! 1011  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07292 19E6                        00            .byte	0
07293 19E7                        00            .byte	0
07294 19E8                        7C            .byte	$7C
07295 19E9                        C6            .byte	$C6
07296 19EA                        06            .byte	6
07297 19EB                        0C            .byte	$C
07298 19EC                        18            .byte	$18
07299 19ED                        30            .byte	$30
07300 19EE                        60            .byte	$60
07301 19EF                        C6            .byte	$C6
07302 19F0                        FE            .byte	$FE
07303 19F1                        00            .byte	0
07304 19F2                        00            .byte	0
07305 19F3                        00            .byte	0
07306                                           ! 1012  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07307 19F4                        00            .byte	0
07308 19F5                        00            .byte	0
07309 19F6                        7C            .byte	$7C
07310 19F7                        C6            .byte	$C6
07311 19F8                        06            .byte	6
07312 19F9                        06            .byte	6
07313 19FA                        3C            .byte	$3C
07314 19FB                        06            .byte	6
07315 19FC                        06            .byte	6
07316 19FD                        C6            .byte	$C6
07317 19FE                        7C            .byte	$7C
07318 19FF                        00            .byte	0
07319 1A00                        00            .byte	0
07320 1A01                        00            .byte	0
07321                                           ! 1013  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e,
07322 1A02                        00            .byte	0
07323 1A03                        00            .byte	0
07324 1A04                        0C            .byte	$C
07325 1A05                        1C            .byte	$1C
07326 1A06                        3C            .byte	$3C
07327 1A07                        6C            .byte	$6C
07328 1A08                        CC            .byte	$CC
07329 1A09                        FE            .byte	$FE
07330 1A0A                        0C            .byte	$C
07331 1A0B                        0C            .byte	$C
07332                                           ! 1013  0x00, 0x00, 0x00,
07333 1A0C                        1E            .byte	$1E
07334 1A0D                        00            .byte	0
07335 1A0E                        00            .byte	0
07336 1A0F                        00            .byte	0
07337                                           ! 1014  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07338 1A10                        00            .byte	0
07339 1A11                        00            .byte	0
07340 1A12                        FE            .byte	$FE
07341 1A13                        C0            .byte	$C0
07342 1A14                        C0            .byte	$C0
07343 1A15                        C0            .byte	$C0
07344 1A16                        FC            .byte	$FC
07345 1A17                        06            .byte	6
07346 1A18                        06            .byte	6
07347 1A19                        C6            .byte	$C6
07348 1A1A                        7C            .byte	$7C
07349 1A1B                        00            .byte	0
07350 1A1C                        00            .byte	0
07351 1A1D                        00            .byte	0
07352                                           ! 1015  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07353 1A1E                        00            .byte	0
07354 1A1F                        00            .byte	0
07355 1A20                        38            .byte	$38
07356 1A21                        60            .byte	$60
07357 1A22                        C0            .byte	$C0
07358 1A23                        C0            .byte	$C0
07359 1A24                        FC            .byte	$FC
07360 1A25                        C6            .byte	$C6
07361 1A26                        C6            .byte	$C6
07362 1A27                        C6            .byte	$C6
07363 1A28                        7C            .byte	$7C
07364 1A29                        00            .byte	0
07365 1A2A                        00            .byte	0
07366 1A2B                        00            .byte	0
07367                                           ! 1016  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07368 1A2C                        00            .byte	0
07369 1A2D                        00            .byte	0
07370 1A2E                        FE            .byte	$FE
07371 1A2F                        C6            .byte	$C6
07372 1A30                        06            .byte	6
07373 1A31                        0C            .byte	$C
07374 1A32                        18            .byte	$18
07375 1A33                        30            .byte	$30
07376 1A34                        30            .byte	$30
07377 1A35                        30            .byte	$30
07378 1A36                        30            .byte	$30
07379 1A37                        00            .byte	0
07380 1A38                        00            .byte	0
07381 1A39                        00            .byte	0
07382                                           ! 1017  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07383 1A3A                        00            .byte	0
07384 1A3B                        00            .byte	0
07385 1A3C                        7C            .byte	$7C
07386 1A3D                        C6            .byte	$C6
07387 1A3E                        C6            .byte	$C6
07388 1A3F                        C6            .byte	$C6
07389 1A40                        7C            .byte	$7C
07390 1A41                        C6            .byte	$C6
07391 1A42                        C6            .byte	$C6
07392 1A43                        C6            .byte	$C6
07393 1A44                        7C            .byte	$7C
07394 1A45                        00            .byte	0
07395 1A46                        00            .byte	0
07396 1A47                        00            .byte	0
07397                                           ! 1018  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07398 1A48                        00            .byte	0
07399 1A49                        00            .byte	0
07400 1A4A                        7C            .byte	$7C
07401 1A4B                        C6            .byte	$C6
07402 1A4C                        C6            .byte	$C6
07403 1A4D                        C6            .byte	$C6
07404 1A4E                        7E            .byte	$7E
07405 1A4F                        06            .byte	6
07406 1A50                        06            .byte	6
07407 1A51                        0C            .byte	$C
07408 1A52                        78            .byte	$78
07409 1A53                        00            .byte	0
07410 1A54                        00            .byte	0
07411 1A55                        00            .byte	0
07412                                           ! 1019  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07413 1A56                        00            .byte	0
07414 1A57                        00            .byte	0
07415 1A58                        00            .byte	0
07416 1A59                        18            .byte	$18
07417 1A5A                        18            .byte	$18
07418 1A5B                        00            .byte	0
07419 1A5C                        00            .byte	0
07420 1A5D                        00            .byte	0
07421 1A5E                        18            .byte	$18
07422 1A5F                        18            .byte	$18
07423 1A60                        00            .byte	0
07424 1A61                        00            .byte	0
07425 1A62                        00            .byte	0
07426 1A63                        00            .byte	0
07427                                           ! 1020  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07428 1A64                        00            .byte	0
07429 1A65                        00            .byte	0
07430 1A66                        00            .byte	0
07431 1A67                        18            .byte	$18
07432 1A68                        18            .byte	$18
07433 1A69                        00            .byte	0
07434 1A6A                        00            .byte	0
07435 1A6B                        00            .byte	0
07436 1A6C                        18            .byte	$18
07437 1A6D                        18            .byte	$18
07438 1A6E                        30            .byte	$30
07439 1A6F                        00            .byte	0
07440 1A70                        00            .byte	0
07441 1A71                        00            .byte	0
07442                                           ! 1021  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07443 1A72                        00            .byte	0
07444 1A73                        00            .byte	0
07445 1A74                        06            .byte	6
07446 1A75                        0C            .byte	$C
07447 1A76                        18            .byte	$18
07448 1A77                        30            .byte	$30
07449 1A78                        60            .byte	$60
07450 1A79                        30            .byte	$30
07451 1A7A                        18            .byte	$18
07452 1A7B                        0C            .byte	$C
07453 1A7C                        06            .byte	6
07454 1A7D                        00            .byte	0
07455 1A7E                        00            .byte	0
07456 1A7F                        00            .byte	0
07457                                           ! 1022  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07458 1A80                        00            .byte	0
07459 1A81                        00            .byte	0
07460 1A82                        00            .byte	0
07461 1A83                        00            .byte	0
07462 1A84                        00            .byte	0
07463 1A85                        7E            .byte	$7E
07464 1A86                        00            .byte	0
07465 1A87                        00            .byte	0
07466 1A88                        7E            .byte	$7E
07467 1A89                        00            .byte	0
07468 1A8A                        00            .byte	0
07469 1A8B                        00            .byte	0
07470 1A8C                        00            .byte	0
07471 1A8D                        00            .byte	0
07472                                           ! 1023  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07473 1A8E                        00            .byte	0
07474 1A8F                        00            .byte	0
07475 1A90                        60            .byte	$60
07476 1A91                        30            .byte	$30
07477 1A92                        18            .byte	$18
07478 1A93                        0C            .byte	$C
07479 1A94                        06            .byte	6
07480 1A95                        0C            .byte	$C
07481 1A96                        18            .byte	$18
07482 1A97                        30            .byte	$30
07483 1A98                        60            .byte	$60
07484 1A99                        00            .byte	0
07485 1A9A                        00            .byte	0
07486 1A9B                        00            .byte	0
07487                                           ! 1024  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07488 1A9C                        00            .byte	0
07489 1A9D                        00            .byte	0
07490 1A9E                        7C            .byte	$7C
07491 1A9F                        C6            .byte	$C6
07492 1AA0                        C6            .byte	$C6
07493 1AA1                        0C            .byte	$C
07494 1AA2                        18            .byte	$18
07495 1AA3                        18            .byte	$18
07496 1AA4                        00            .byte	0
07497 1AA5                        18            .byte	$18
07498 1AA6                        18            .byte	$18
07499 1AA7                        00            .byte	0
07500 1AA8                        00            .byte	0
07501 1AA9                        00            .byte	0
07502                                           ! 1025  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07503 1AAA                        00            .byte	0
07504 1AAB                        00            .byte	0
07505 1AAC                        7C            .byte	$7C
07506 1AAD                        C6            .byte	$C6
07507 1AAE                        C6            .byte	$C6
07508 1AAF                        DE            .byte	$DE
07509 1AB0                        DE            .byte	$DE
07510 1AB1                        DE            .byte	$DE
07511 1AB2                        DC            .byte	$DC
07512 1AB3                        C0            .byte	$C0
07513 1AB4                        7C            .byte	$7C
07514 1AB5                        00            .byte	0
07515 1AB6                        00            .byte	0
07516 1AB7                        00            .byte	0
07517                                           ! 1026  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07518 1AB8                        00            .byte	0
07519 1AB9                        00            .byte	0
07520 1ABA                        10            .byte	$10
07521 1ABB                        38            .byte	$38
07522 1ABC                        6C            .byte	$6C
07523 1ABD                        C6            .byte	$C6
07524 1ABE                        C6            .byte	$C6
07525 1ABF                        FE            .byte	$FE
07526 1AC0                        C6            .byte	$C6
07527 1AC1                        C6            .byte	$C6
07528 1AC2                        C6            .byte	$C6
07529 1AC3                        00            .byte	0
07530 1AC4                        00            .byte	0
07531 1AC5                        00            .byte	0
07532                                           ! 1027  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07533 1AC6                        00            .byte	0
07534 1AC7                        00            .byte	0
07535 1AC8                        FC            .byte	$FC
07536 1AC9                        66            .byte	$66
07537 1ACA                        66            .byte	$66
07538 1ACB                        66            .byte	$66
07539 1ACC                        7C            .byte	$7C
07540 1ACD                        66            .byte	$66
07541 1ACE                        66            .byte	$66
07542 1ACF                        66            .byte	$66
07543 1AD0                        FC            .byte	$FC
07544 1AD1                        00            .byte	0
07545 1AD2                        00            .byte	0
07546 1AD3                        00            .byte	0
07547                                           ! 1028  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07548 1AD4                        00            .byte	0
07549 1AD5                        00            .byte	0
07550 1AD6                        3C            .byte	$3C
07551 1AD7                        66            .byte	$66
07552 1AD8                        C2            .byte	$C2
07553 1AD9                        C0            .byte	$C0
07554 1ADA                        C0            .byte	$C0
07555 1ADB                        C0            .byte	$C0
07556 1ADC                        C2            .byte	$C2
07557 1ADD                        66            .byte	$66
07558 1ADE                        3C            .byte	$3C
07559 1ADF                        00            .byte	0
07560 1AE0                        00            .byte	0
07561 1AE1                        00            .byte	0
07562                                           ! 1029  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07563 1AE2                        00            .byte	0
07564 1AE3                        00            .byte	0
07565 1AE4                        F8            .byte	$F8
07566 1AE5                        6C            .byte	$6C
07567 1AE6                        66            .byte	$66
07568 1AE7                        66            .byte	$66
07569 1AE8                        66            .byte	$66
07570 1AE9                        66            .byte	$66
07571 1AEA                        66            .byte	$66
07572 1AEB                        6C            .byte	$6C
07573 1AEC                        F8            .byte	$F8
07574 1AED                        00            .byte	0
07575 1AEE                        00            .byte	0
07576 1AEF                        00            .byte	0
07577                                           ! 1030  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07578 1AF0                        00            .byte	0
07579 1AF1                        00            .byte	0
07580 1AF2                        FE            .byte	$FE
07581 1AF3                        66            .byte	$66
07582 1AF4                        62            .byte	$62
07583 1AF5                        68            .byte	$68
07584 1AF6                        78            .byte	$78
07585 1AF7                        68            .byte	$68
07586 1AF8                        62            .byte	$62
07587 1AF9                        66            .byte	$66
07588 1AFA                        FE            .byte	$FE
07589 1AFB                        00            .byte	0
07590 1AFC                        00            .byte	0
07591 1AFD                        00            .byte	0
07592                                           ! 1031  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07593 1AFE                        00            .byte	0
07594 1AFF                        00            .byte	0
07595 1B00                        FE            .byte	$FE
07596 1B01                        66            .byte	$66
07597 1B02                        62            .byte	$62
07598 1B03                        68            .byte	$68
07599 1B04                        78            .byte	$78
07600 1B05                        68            .byte	$68
07601 1B06                        60            .byte	$60
07602 1B07                        60            .byte	$60
07603 1B08                        F0            .byte	$F0
07604 1B09                        00            .byte	0
07605 1B0A                        00            .byte	0
07606 1B0B                        00            .byte	0
07607                                           ! 1032  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07608 1B0C                        00            .byte	0
07609 1B0D                        00            .byte	0
07610 1B0E                        3C            .byte	$3C
07611 1B0F                        66            .byte	$66
07612 1B10                        C2            .byte	$C2
07613 1B11                        C0            .byte	$C0
07614 1B12                        C0            .byte	$C0
07615 1B13                        DE            .byte	$DE
07616 1B14                        C6            .byte	$C6
07617 1B15                        66            .byte	$66
07618 1B16                        3A            .byte	$3A
07619 1B17                        00            .byte	0
07620 1B18                        00            .byte	0
07621 1B19                        00            .byte	0
07622                                           ! 1033  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07623 1B1A                        00            .byte	0
07624 1B1B                        00            .byte	0
07625 1B1C                        C6            .byte	$C6
07626 1B1D                        C6            .byte	$C6
07627 1B1E                        C6            .byte	$C6
07628 1B1F                        C6            .byte	$C6
07629 1B20                        FE            .byte	$FE
07630 1B21                        C6            .byte	$C6
07631 1B22                        C6            .byte	$C6
07632 1B23                        C6            .byte	$C6
07633 1B24                        C6            .byte	$C6
07634 1B25                        00            .byte	0
07635 1B26                        00            .byte	0
07636 1B27                        00            .byte	0
07637                                           ! 1034  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07638 1B28                        00            .byte	0
07639 1B29                        00            .byte	0
07640 1B2A                        3C            .byte	$3C
07641 1B2B                        18            .byte	$18
07642 1B2C                        18            .byte	$18
07643 1B2D                        18            .byte	$18
07644 1B2E                        18            .byte	$18
07645 1B2F                        18            .byte	$18
07646 1B30                        18            .byte	$18
07647 1B31                        18            .byte	$18
07648 1B32                        3C            .byte	$3C
07649 1B33                        00            .byte	0
07650 1B34                        00            .byte	0
07651 1B35                        00            .byte	0
07652                                           ! 1035  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07653 1B36                        00            .byte	0
07654 1B37                        00            .byte	0
07655 1B38                        1E            .byte	$1E
07656 1B39                        0C            .byte	$C
07657 1B3A                        0C            .byte	$C
07658 1B3B                        0C            .byte	$C
07659 1B3C                        0C            .byte	$C
07660 1B3D                        0C            .byte	$C
07661 1B3E                        CC            .byte	$CC
07662 1B3F                        CC            .byte	$CC
07663 1B40                        78            .byte	$78
07664 1B41                        00            .byte	0
07665 1B42                        00            .byte	0
07666 1B43                        00            .byte	0
07667                                           ! 1036  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07668 1B44                        00            .byte	0
07669 1B45                        00            .byte	0
07670 1B46                        E6            .byte	$E6
07671 1B47                        66            .byte	$66
07672 1B48                        6C            .byte	$6C
07673 1B49                        6C            .byte	$6C
07674 1B4A                        78            .byte	$78
07675 1B4B                        6C            .byte	$6C
07676 1B4C                        6C            .byte	$6C
07677 1B4D                        66            .byte	$66
07678 1B4E                        E6            .byte	$E6
07679 1B4F                        00            .byte	0
07680 1B50                        00            .byte	0
07681 1B51                        00            .byte	0
07682                                           ! 1037  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0
07683 1B52                        00            .byte	0
07684 1B53                        00            .byte	0
07685 1B54                        F0            .byte	$F0
07686 1B55                        60            .byte	$60
07687 1B56                        60            .byte	$60
07688 1B57                        60            .byte	$60
07689 1B58                        60            .byte	$60
07690 1B59                        60            .byte	$60
07691 1B5A                        62            .byte	$62
07692 1B5B                        66            .byte	$66
07693 1B5C                        FE            .byte	$FE
07694 1B5D                        00            .byte	0
07695                                           ! 1037 x00, 0x00,
07696 1B5E                        00            .byte	0
07697 1B5F                        00            .byte	0
07698                                           ! 1038  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07699 1B60                        00            .byte	0
07700 1B61                        00            .byte	0
07701 1B62                        C6            .byte	$C6
07702 1B63                        EE            .byte	$EE
07703 1B64                        FE            .byte	$FE
07704 1B65                        FE            .byte	$FE
07705 1B66                        D6            .byte	$D6
07706 1B67                        C6            .byte	$C6
07707 1B68                        C6            .byte	$C6
07708 1B69                        C6            .byte	$C6
07709 1B6A                        C6            .byte	$C6
07710 1B6B                        00            .byte	0
07711 1B6C                        00            .byte	0
07712 1B6D                        00            .byte	0
07713                                           ! 1039  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07714 1B6E                        00            .byte	0
07715 1B6F                        00            .byte	0
07716 1B70                        C6            .byte	$C6
07717 1B71                        E6            .byte	$E6
07718 1B72                        F6            .byte	$F6
07719 1B73                        FE            .byte	$FE
07720 1B74                        DE            .byte	$DE
07721 1B75                        CE            .byte	$CE
07722 1B76                        C6            .byte	$C6
07723 1B77                        C6            .byte	$C6
07724 1B78                        C6            .byte	$C6
07725 1B79                        00            .byte	0
07726 1B7A                        00            .byte	0
07727 1B7B                        00            .byte	0
07728                                           ! 1040  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
07729 1B7C                        00            .byte	0
07730 1B7D                        00            .byte	0
07731 1B7E                        38            .byte	$38
07732 1B7F                        6C            .byte	$6C
07733 1B80                        C6            .byte	$C6
07734 1B81                        C6            .byte	$C6
07735 1B82                        C6            .byte	$C6
07736 1B83                        C6            .byte	$C6
07737 1B84                        C6            .byte	$C6
07738 1B85                        6C            .byte	$6C
07739 1B86                        38            .byte	$38
07740 1B87                        00            .byte	0
07741 1B88                        00            .byte	0
07742 1B89                        00            .byte	0
07743                                           ! 1041  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07744 1B8A                        00            .byte	0
07745 1B8B                        00            .byte	0
07746 1B8C                        FC            .byte	$FC
07747 1B8D                        66            .byte	$66
07748 1B8E                        66            .byte	$66
07749 1B8F                        66            .byte	$66
07750 1B90                        7C            .byte	$7C
07751 1B91                        60            .byte	$60
07752 1B92                        60            .byte	$60
07753 1B93                        60            .byte	$60
07754 1B94                        F0            .byte	$F0
07755 1B95                        00            .byte	0
07756 1B96                        00            .byte	0
07757 1B97                        00            .byte	0
07758                                           ! 1042  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
07759 1B98                        00            .byte	0
07760 1B99                        00            .byte	0
07761 1B9A                        7C            .byte	$7C
07762 1B9B                        C6            .byte	$C6
07763 1B9C                        C6            .byte	$C6
07764 1B9D                        C6            .byte	$C6
07765 1B9E                        C6            .byte	$C6
07766 1B9F                        D6            .byte	$D6
07767 1BA0                        DE            .byte	$DE
07768 1BA1                        7C            .byte	$7C
07769 1BA2                        0C            .byte	$C
07770 1BA3                        0E            .byte	$E
07771 1BA4                        00            .byte	0
07772 1BA5                        00            .byte	0
07773                                           ! 1043  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
07774 1BA6                        00            .byte	0
07775 1BA7                        00            .byte	0
07776 1BA8                        FC            .byte	$FC
07777 1BA9                        66            .byte	$66
07778 1BAA                        66            .byte	$66
07779 1BAB                        66            .byte	$66
07780 1BAC                        7C            .byte	$7C
07781 1BAD                        6C            .byte	$6C
07782 1BAE                        66            .byte	$66
07783 1BAF                        66            .byte	$66
07784 1BB0                        E6            .byte	$E6
07785 1BB1                        00            .byte	0
07786 1BB2                        00            .byte	0
07787 1BB3                        00            .byte	0
07788                                           ! 1044  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07789 1BB4                        00            .byte	0
07790 1BB5                        00            .byte	0
07791 1BB6                        7C            .byte	$7C
07792 1BB7                        C6            .byte	$C6
07793 1BB8                        C6            .byte	$C6
07794 1BB9                        60            .byte	$60
07795 1BBA                        38            .byte	$38
07796 1BBB                        0C            .byte	$C
07797 1BBC                        C6            .byte	$C6
07798 1BBD                        C6            .byte	$C6
07799 1BBE                        7C            .byte	$7C
07800 1BBF                        00            .byte	0
07801 1BC0                        00            .byte	0
07802 1BC1                        00            .byte	0
07803                                           ! 1045  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07804 1BC2                        00            .byte	0
07805 1BC3                        00            .byte	0
07806 1BC4                        7E            .byte	$7E
07807 1BC5                        7E            .byte	$7E
07808 1BC6                        5A            .byte	$5A
07809 1BC7                        18            .byte	$18
07810 1BC8                        18            .byte	$18
07811 1BC9                        18            .byte	$18
07812 1BCA                        18            .byte	$18
07813 1BCB                        18            .byte	$18
07814 1BCC                        3C            .byte	$3C
07815 1BCD                        00            .byte	0
07816 1BCE                        00            .byte	0
07817 1BCF                        00            .byte	0
07818                                           ! 1046  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07819 1BD0                        00            .byte	0
07820 1BD1                        00            .byte	0
07821 1BD2                        C6            .byte	$C6
07822 1BD3                        C6            .byte	$C6
07823 1BD4                        C6            .byte	$C6
07824 1BD5                        C6            .byte	$C6
07825 1BD6                        C6            .byte	$C6
07826 1BD7                        C6            .byte	$C6
07827 1BD8                        C6            .byte	$C6
07828 1BD9                        C6            .byte	$C6
07829 1BDA                        7C            .byte	$7C
07830 1BDB                        00            .byte	0
07831 1BDC                        00            .byte	0
07832 1BDD                        00            .byte	0
07833                                           ! 1047  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
07834 1BDE                        00            .byte	0
07835 1BDF                        00            .byte	0
07836 1BE0                        C6            .byte	$C6
07837 1BE1                        C6            .byte	$C6
07838 1BE2                        C6            .byte	$C6
07839 1BE3                        C6            .byte	$C6
07840 1BE4                        C6            .byte	$C6
07841 1BE5                        C6            .byte	$C6
07842 1BE6                        6C            .byte	$6C
07843 1BE7                        38            .byte	$38
07844 1BE8                        10            .byte	$10
07845 1BE9                        00            .byte	0
07846 1BEA                        00            .byte	0
07847 1BEB                        00            .byte	0
07848                                           ! 1048  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
07849 1BEC                        00            .byte	0
07850 1BED                        00            .byte	0
07851 1BEE                        C6            .byte	$C6
07852 1BEF                        C6            .byte	$C6
07853 1BF0                        C6            .byte	$C6
07854 1BF1                        C6            .byte	$C6
07855 1BF2                        D6            .byte	$D6
07856 1BF3                        D6            .byte	$D6
07857 1BF4                        FE            .byte	$FE
07858 1BF5                        7C            .byte	$7C
07859 1BF6                        6C            .byte	$6C
07860 1BF7                        00            .byte	0
07861 1BF8                        00            .byte	0
07862 1BF9                        00            .byte	0
07863                                           ! 1049  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07864 1BFA                        00            .byte	0
07865 1BFB                        00            .byte	0
07866 1BFC                        C6            .byte	$C6
07867 1BFD                        C6            .byte	$C6
07868 1BFE                        6C            .byte	$6C
07869 1BFF                        38            .byte	$38
07870 1C00                        38            .byte	$38
07871 1C01                        38            .byte	$38
07872 1C02                        6C            .byte	$6C
07873 1C03                        C6            .byte	$C6
07874 1C04                        C6            .byte	$C6
07875 1C05                        00            .byte	0
07876 1C06                        00            .byte	0
07877 1C07                        00            .byte	0
07878                                           ! 1050  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07879 1C08                        00            .byte	0
07880 1C09                        00            .byte	0
07881 1C0A                        66            .byte	$66
07882 1C0B                        66            .byte	$66
07883 1C0C                        66            .byte	$66
07884 1C0D                        66            .byte	$66
07885 1C0E                        3C            .byte	$3C
07886 1C0F                        18            .byte	$18
07887 1C10                        18            .byte	$18
07888 1C11                        18            .byte	$18
07889 1C12                        3C            .byte	$3C
07890 1C13                        00            .byte	0
07891 1C14                        00            .byte	0
07892 1C15                        00            .byte	0
07893                                           ! 1051  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07894 1C16                        00            .byte	0
07895 1C17                        00            .byte	0
07896 1C18                        FE            .byte	$FE
07897 1C19                        C6            .byte	$C6
07898 1C1A                        8C            .byte	$8C
07899 1C1B                        18            .byte	$18
07900 1C1C                        30            .byte	$30
07901 1C1D                        60            .byte	$60
07902 1C1E                        C2            .byte	$C2
07903 1C1F                        C6            .byte	$C6
07904 1C20                        FE            .byte	$FE
07905 1C21                        00            .byte	0
07906 1C22                        00            .byte	0
07907 1C23                        00            .byte	0
07908                                           ! 1052  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
07909 1C24                        00            .byte	0
07910 1C25                        00            .byte	0
07911 1C26                        3C            .byte	$3C
07912 1C27                        30            .byte	$30
07913 1C28                        30            .byte	$30
07914 1C29                        30            .byte	$30
07915 1C2A                        30            .byte	$30
07916 1C2B                        30            .byte	$30
07917 1C2C                        30            .byte	$30
07918 1C2D                        30            .byte	$30
07919 1C2E                        3C            .byte	$3C
07920 1C2F                        00            .byte	0
07921 1C30                        00            .byte	0
07922 1C31                        00            .byte	0
07923                                           ! 1053  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07924 1C32                        00            .byte	0
07925 1C33                        00            .byte	0
07926 1C34                        80            .byte	$80
07927 1C35                        C0            .byte	$C0
07928 1C36                        E0            .byte	$E0
07929 1C37                        70            .byte	$70
07930 1C38                        38            .byte	$38
07931 1C39                        1C            .byte	$1C
07932 1C3A                        0E            .byte	$E
07933 1C3B                        06            .byte	6
07934 1C3C                        02            .byte	2
07935 1C3D                        00            .byte	0
07936 1C3E                        00            .byte	0
07937 1C3F                        00            .byte	0
07938                                           ! 1054  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
07939 1C40                        00            .byte	0
07940 1C41                        00            .byte	0
07941 1C42                        3C            .byte	$3C
07942 1C43                        0C            .byte	$C
07943 1C44                        0C            .byte	$C
07944 1C45                        0C            .byte	$C
07945 1C46                        0C            .byte	$C
07946 1C47                        0C            .byte	$C
07947 1C48                        0C            .byte	$C
07948 1C49                        0C            .byte	$C
07949 1C4A                        3C            .byte	$3C
07950 1C4B                        00            .byte	0
07951 1C4C                        00            .byte	0
07952 1C4D                        00            .byte	0
07953                                           ! 1055  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07954 1C4E                        10            .byte	$10
07955 1C4F                        38            .byte	$38
07956 1C50                        6C            .byte	$6C
07957 1C51                        C6            .byte	$C6
07958 1C52                        00            .byte	0
07959 1C53                        00            .byte	0
07960 1C54                        00            .byte	0
07961 1C55                        00            .byte	0
07962 1C56                        00            .byte	0
07963 1C57                        00            .byte	0
07964 1C58                        00            .byte	0
07965 1C59                        00            .byte	0
07966 1C5A                        00            .byte	0
07967 1C5B                        00            .byte	0
07968                                           ! 1056  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
07969 1C5C                        00            .byte	0
07970 1C5D                        00            .byte	0
07971 1C5E                        00            .byte	0
07972 1C5F                        00            .byte	0
07973 1C60                        00            .byte	0
07974 1C61                        00            .byte	0
07975 1C62                        00            .byte	0
07976 1C63                        00            .byte	0
07977 1C64                        00            .byte	0
07978 1C65                        00            .byte	0
07979 1C66                        00            .byte	0
07980 1C67                        00            .byte	0
07981 1C68                        FF            .byte	$FF
07982 1C69                        00            .byte	0
07983                                           ! 1057  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07984 1C6A                        30            .byte	$30
07985 1C6B                        30            .byte	$30
07986 1C6C                        18            .byte	$18
07987 1C6D                        00            .byte	0
07988 1C6E                        00            .byte	0
07989 1C6F                        00            .byte	0
07990 1C70                        00            .byte	0
07991 1C71                        00            .byte	0
07992 1C72                        00            .byte	0
07993 1C73                        00            .byte	0
07994 1C74                        00            .byte	0
07995 1C75                        00            .byte	0
07996 1C76                        00            .byte	0
07997 1C77                        00            .byte	0
07998                                           ! 1058  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07999 1C78                        00            .byte	0
08000 1C79                        00            .byte	0
08001 1C7A                        00            .byte	0
08002 1C7B                        00            .byte	0
08003 1C7C                        00            .byte	0
08004 1C7D                        78            .byte	$78
08005 1C7E                        0C            .byte	$C
08006 1C7F                        7C            .byte	$7C
08007 1C80                        CC            .byte	$CC
08008 1C81                        CC            .byte	$CC
08009 1C82                        76            .byte	$76
08010 1C83                        00            .byte	0
08011 1C84                        00            .byte	0
08012 1C85                        00            .byte	0
08013                                           ! 1059  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08014 1C86                        00            .byte	0
08015 1C87                        00            .byte	0
08016 1C88                        E0            .byte	$E0
08017 1C89                        60            .byte	$60
08018 1C8A                        60            .byte	$60
08019 1C8B                        78            .byte	$78
08020 1C8C                        6C            .byte	$6C
08021 1C8D                        66            .byte	$66
08022 1C8E                        66            .byte	$66
08023 1C8F                        66            .byte	$66
08024 1C90                        7C            .byte	$7C
08025 1C91                        00            .byte	0
08026 1C92                        00            .byte	0
08027 1C93                        00            .byte	0
08028                                           ! 1060  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08029 1C94                        00            .byte	0
08030 1C95                        00            .byte	0
08031 1C96                        00            .byte	0
08032 1C97                        00            .byte	0
08033 1C98                        00            .byte	0
08034 1C99                        7C            .byte	$7C
08035 1C9A                        C6            .byte	$C6
08036 1C9B                        C0            .byte	$C0
08037 1C9C                        C0            .byte	$C0
08038 1C9D                        C6            .byte	$C6
08039 1C9E                        7C            .byte	$7C
08040 1C9F                        00            .byte	0
08041 1CA0                        00            .byte	0
08042 1CA1                        00            .byte	0
08043                                           ! 1061  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x0
08044 1CA2                        00            .byte	0
08045 1CA3                        00            .byte	0
08046 1CA4                        1C            .byte	$1C
08047 1CA5                        0C            .byte	$C
08048 1CA6                        0C            .byte	$C
08049 1CA7                        3C            .byte	$3C
08050 1CA8                        6C            .byte	$6C
08051 1CA9                        CC            .byte	$CC
08052 1CAA                        CC            .byte	$CC
08053 1CAB                        CC            .byte	$CC
08054 1CAC                        76            .byte	$76
08055 1CAD                        00            .byte	0
08056 1CAE                        00            .byte	0
08057                                           ! 1061 0,
08058 1CAF                        00            .byte	0
08059                                           ! 1062  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08060 1CB0                        00            .byte	0
08061 1CB1                        00            .byte	0
08062 1CB2                        00            .byte	0
08063 1CB3                        00            .byte	0
08064 1CB4                        00            .byte	0
08065 1CB5                        7C            .byte	$7C
08066 1CB6                        C6            .byte	$C6
08067 1CB7                        FE            .byte	$FE
08068 1CB8                        C0            .byte	$C0
08069 1CB9                        C6            .byte	$C6
08070 1CBA                        7C            .byte	$7C
08071 1CBB                        00            .byte	0
08072 1CBC                        00            .byte	0
08073 1CBD                        00            .byte	0
08074                                           ! 1063  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08075 1CBE                        00            .byte	0
08076 1CBF                        00            .byte	0
08077 1CC0                        38            .byte	$38
08078 1CC1                        6C            .byte	$6C
08079 1CC2                        64            .byte	$64
08080 1CC3                        60            .byte	$60
08081 1CC4                        F0            .byte	$F0
08082 1CC5                        60            .byte	$60
08083 1CC6                        60            .byte	$60
08084 1CC7                        60            .byte	$60
08085 1CC8                        F0            .byte	$F0
08086 1CC9                        00            .byte	0
08087 1CCA                        00            .byte	0
08088 1CCB                        00            .byte	0
08089                                           ! 1064  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08090 1CCC                        00            .byte	0
08091 1CCD                        00            .byte	0
08092 1CCE                        00            .byte	0
08093 1CCF                        00            .byte	0
08094 1CD0                        00            .byte	0
08095 1CD1                        76            .byte	$76
08096 1CD2                        CC            .byte	$CC
08097 1CD3                        CC            .byte	$CC
08098 1CD4                        CC            .byte	$CC
08099 1CD5                        7C            .byte	$7C
08100 1CD6                        0C            .byte	$C
08101 1CD7                        CC            .byte	$CC
08102 1CD8                        78            .byte	$78
08103 1CD9                        00            .byte	0
08104                                           ! 1065  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08105 1CDA                        00            .byte	0
08106 1CDB                        00            .byte	0
08107 1CDC                        E0            .byte	$E0
08108 1CDD                        60            .byte	$60
08109 1CDE                        60            .byte	$60
08110 1CDF                        6C            .byte	$6C
08111 1CE0                        76            .byte	$76
08112 1CE1                        66            .byte	$66
08113 1CE2                        66            .byte	$66
08114 1CE3                        66            .byte	$66
08115 1CE4                        E6            .byte	$E6
08116 1CE5                        00            .byte	0
08117 1CE6                        00            .byte	0
08118 1CE7                        00            .byte	0
08119                                           ! 1066  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08120 1CE8                        00            .byte	0
08121 1CE9                        00            .byte	0
08122 1CEA                        18            .byte	$18
08123 1CEB                        18            .byte	$18
08124 1CEC                        00            .byte	0
08125 1CED                        38            .byte	$38
08126 1CEE                        18            .byte	$18
08127 1CEF                        18            .byte	$18
08128 1CF0                        18            .byte	$18
08129 1CF1                        18            .byte	$18
08130 1CF2                        3C            .byte	$3C
08131 1CF3                        00            .byte	0
08132 1CF4                        00            .byte	0
08133 1CF5                        00            .byte	0
08134                                           ! 1067  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08135 1CF6                        00            .byte	0
08136 1CF7                        00            .byte	0
08137 1CF8                        06            .byte	6
08138 1CF9                        06            .byte	6
08139 1CFA                        00            .byte	0
08140 1CFB                        0E            .byte	$E
08141 1CFC                        06            .byte	6
08142 1CFD                        06            .byte	6
08143 1CFE                        06            .byte	6
08144 1CFF                        06            .byte	6
08145 1D00                        66            .byte	$66
08146 1D01                        66            .byte	$66
08147 1D02                        3C            .byte	$3C
08148 1D03                        00            .byte	0
08149                                           ! 1068  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08150 1D04                        00            .byte	0
08151 1D05                        00            .byte	0
08152 1D06                        E0            .byte	$E0
08153 1D07                        60            .byte	$60
08154 1D08                        60            .byte	$60
08155 1D09                        66            .byte	$66
08156 1D0A                        6C            .byte	$6C
08157 1D0B                        78            .byte	$78
08158 1D0C                        6C            .byte	$6C
08159 1D0D                        66            .byte	$66
08160 1D0E                        E6            .byte	$E6
08161 1D0F                        00            .byte	0
08162 1D10                        00            .byte	0
08163 1D11                        00            .byte	0
08164                                           ! 1069  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08165 1D12                        00            .byte	0
08166 1D13                        00            .byte	0
08167 1D14                        38            .byte	$38
08168 1D15                        18            .byte	$18
08169 1D16                        18            .byte	$18
08170 1D17                        18            .byte	$18
08171 1D18                        18            .byte	$18
08172 1D19                        18            .byte	$18
08173 1D1A                        18            .byte	$18
08174 1D1B                        18            .byte	$18
08175 1D1C                        3C            .byte	$3C
08176 1D1D                        00            .byte	0
08177 1D1E                        00            .byte	0
08178 1D1F                        00            .byte	0
08179                                           ! 1070  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08180 1D20                        00            .byte	0
08181 1D21                        00            .byte	0
08182 1D22                        00            .byte	0
08183 1D23                        00            .byte	0
08184 1D24                        00            .byte	0
08185 1D25                        EC            .byte	$EC
08186 1D26                        FE            .byte	$FE
08187 1D27                        D6            .byte	$D6
08188 1D28                        D6            .byte	$D6
08189 1D29                        D6            .byte	$D6
08190 1D2A                        C6            .byte	$C6
08191 1D2B                        00            .byte	0
08192 1D2C                        00            .byte	0
08193 1D2D                        00            .byte	0
08194                                           ! 1071  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08195 1D2E                        00            .byte	0
08196 1D2F                        00            .byte	0
08197 1D30                        00            .byte	0
08198 1D31                        00            .byte	0
08199 1D32                        00            .byte	0
08200 1D33                        DC            .byte	$DC
08201 1D34                        66            .byte	$66
08202 1D35                        66            .byte	$66
08203 1D36                        66            .byte	$66
08204 1D37                        66            .byte	$66
08205 1D38                        66            .byte	$66
08206 1D39                        00            .byte	0
08207 1D3A                        00            .byte	0
08208 1D3B                        00            .byte	0
08209                                           ! 1072  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08210 1D3C                        00            .byte	0
08211 1D3D                        00            .byte	0
08212 1D3E                        00            .byte	0
08213 1D3F                        00            .byte	0
08214 1D40                        00            .byte	0
08215 1D41                        7C            .byte	$7C
08216 1D42                        C6            .byte	$C6
08217 1D43                        C6            .byte	$C6
08218 1D44                        C6            .byte	$C6
08219 1D45                        C6            .byte	$C6
08220 1D46                        7C            .byte	$7C
08221 1D47                        00            .byte	0
08222 1D48                        00            .byte	0
08223 1D49                        00            .byte	0
08224                                           ! 1073  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08225 1D4A                        00            .byte	0
08226 1D4B                        00            .byte	0
08227 1D4C                        00            .byte	0
08228 1D4D                        00            .byte	0
08229 1D4E                        00            .byte	0
08230 1D4F                        DC            .byte	$DC
08231 1D50                        66            .byte	$66
08232 1D51                        66            .byte	$66
08233 1D52                        66            .byte	$66
08234 1D53                        7C            .byte	$7C
08235 1D54                        60            .byte	$60
08236 1D55                        60            .byte	$60
08237 1D56                        F0            .byte	$F0
08238 1D57                        00            .byte	0
08239                                           ! 1074  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08240 1D58                        00            .byte	0
08241 1D59                        00            .byte	0
08242 1D5A                        00            .byte	0
08243 1D5B                        00            .byte	0
08244 1D5C                        00            .byte	0
08245 1D5D                        76            .byte	$76
08246 1D5E                        CC            .byte	$CC
08247 1D5F                        CC            .byte	$CC
08248 1D60                        CC            .byte	$CC
08249 1D61                        7C            .byte	$7C
08250 1D62                        0C            .byte	$C
08251 1D63                        0C            .byte	$C
08252 1D64                        1E            .byte	$1E
08253 1D65                        00            .byte	0
08254                                           ! 1075  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08255 1D66                        00            .byte	0
08256 1D67                        00            .byte	0
08257 1D68                        00            .byte	0
08258 1D69                        00            .byte	0
08259 1D6A                        00            .byte	0
08260 1D6B                        DC            .byte	$DC
08261 1D6C                        76            .byte	$76
08262 1D6D                        66            .byte	$66
08263 1D6E                        60            .byte	$60
08264 1D6F                        60            .byte	$60
08265 1D70                        F0            .byte	$F0
08266 1D71                        00            .byte	0
08267 1D72                        00            .byte	0
08268 1D73                        00            .byte	0
08269                                           ! 1076  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08270 1D74                        00            .byte	0
08271 1D75                        00            .byte	0
08272 1D76                        00            .byte	0
08273 1D77                        00            .byte	0
08274 1D78                        00            .byte	0
08275 1D79                        7C            .byte	$7C
08276 1D7A                        C6            .byte	$C6
08277 1D7B                        70            .byte	$70
08278 1D7C                        1C            .byte	$1C
08279 1D7D                        C6            .byte	$C6
08280 1D7E                        7C            .byte	$7C
08281 1D7F                        00            .byte	0
08282 1D80                        00            .byte	0
08283 1D81                        00            .byte	0
08284                                           ! 1077  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08285 1D82                        00            .byte	0
08286 1D83                        00            .byte	0
08287 1D84                        10            .byte	$10
08288 1D85                        30            .byte	$30
08289 1D86                        30            .byte	$30
08290 1D87                        FC            .byte	$FC
08291 1D88                        30            .byte	$30
08292 1D89                        30            .byte	$30
08293 1D8A                        30            .byte	$30
08294 1D8B                        36            .byte	$36
08295 1D8C                        1C            .byte	$1C
08296 1D8D                        00            .byte	0
08297 1D8E                        00            .byte	0
08298 1D8F                        00            .byte	0
08299                                           ! 1078  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08300 1D90                        00            .byte	0
08301 1D91                        00            .byte	0
08302 1D92                        00            .byte	0
08303 1D93                        00            .byte	0
08304 1D94                        00            .byte	0
08305 1D95                        CC            .byte	$CC
08306 1D96                        CC            .byte	$CC
08307 1D97                        CC            .byte	$CC
08308 1D98                        CC            .byte	$CC
08309 1D99                        CC            .byte	$CC
08310 1D9A                        76            .byte	$76
08311 1D9B                        00            .byte	0
08312 1D9C                        00            .byte	0
08313 1D9D                        00            .byte	0
08314                                           ! 1079  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08315 1D9E                        00            .byte	0
08316 1D9F                        00            .byte	0
08317 1DA0                        00            .byte	0
08318 1DA1                        00            .byte	0
08319 1DA2                        00            .byte	0
08320 1DA3                        66            .byte	$66
08321 1DA4                        66            .byte	$66
08322 1DA5                        66            .byte	$66
08323 1DA6                        66            .byte	$66
08324 1DA7                        3C            .byte	$3C
08325 1DA8                        18            .byte	$18
08326 1DA9                        00            .byte	0
08327 1DAA                        00            .byte	0
08328 1DAB                        00            .byte	0
08329                                           ! 1080  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08330 1DAC                        00            .byte	0
08331 1DAD                        00            .byte	0
08332 1DAE                        00            .byte	0
08333 1DAF                        00            .byte	0
08334 1DB0                        00            .byte	0
08335 1DB1                        C6            .byte	$C6
08336 1DB2                        C6            .byte	$C6
08337 1DB3                        D6            .byte	$D6
08338 1DB4                        D6            .byte	$D6
08339 1DB5                        FE            .byte	$FE
08340 1DB6                        6C            .byte	$6C
08341 1DB7                        00            .byte	0
08342 1DB8                        00            .byte	0
08343 1DB9                        00            .byte	0
08344                                           ! 1081  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08345 1DBA                        00            .byte	0
08346 1DBB                        00            .byte	0
08347 1DBC                        00            .byte	0
08348 1DBD                        00            .byte	0
08349 1DBE                        00            .byte	0
08350 1DBF                        C6            .byte	$C6
08351 1DC0                        6C            .byte	$6C
08352 1DC1                        38            .byte	$38
08353 1DC2                        38            .byte	$38
08354 1DC3                        6C            .byte	$6C
08355 1DC4                        C6            .byte	$C6
08356 1DC5                        00            .byte	0
08357 1DC6                        00            .byte	0
08358 1DC7                        00            .byte	0
08359                                           ! 1082  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08360 1DC8                        00            .byte	0
08361 1DC9                        00            .byte	0
08362 1DCA                        00            .byte	0
08363 1DCB                        00            .byte	0
08364 1DCC                        00            .byte	0
08365 1DCD                        C6            .byte	$C6
08366 1DCE                        C6            .byte	$C6
08367 1DCF                        C6            .byte	$C6
08368 1DD0                        C6            .byte	$C6
08369 1DD1                        7E            .byte	$7E
08370 1DD2                        06            .byte	6
08371 1DD3                        0C            .byte	$C
08372 1DD4                        F8            .byte	$F8
08373 1DD5                        00            .byte	0
08374                                           ! 1083  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08375 1DD6                        00            .byte	0
08376 1DD7                        00            .byte	0
08377 1DD8                        00            .byte	0
08378 1DD9                        00            .byte	0
08379 1DDA                        00            .byte	0
08380 1DDB                        FE            .byte	$FE
08381 1DDC                        CC            .byte	$CC
08382 1DDD                        18            .byte	$18
08383 1DDE                        30            .byte	$30
08384 1DDF                        66            .byte	$66
08385 1DE0                        FE            .byte	$FE
08386 1DE1                        00            .byte	0
08387 1DE2                        00            .byte	0
08388 1DE3                        00            .byte	0
08389                                           ! 1084  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08390 1DE4                        00            .byte	0
08391 1DE5                        00            .byte	0
08392 1DE6                        0E            .byte	$E
08393 1DE7                        18            .byte	$18
08394 1DE8                        18            .byte	$18
08395 1DE9                        18            .byte	$18
08396 1DEA                        70            .byte	$70
08397 1DEB                        18            .byte	$18
08398 1DEC                        18            .byte	$18
08399 1DED                        18            .byte	$18
08400 1DEE                        0E            .byte	$E
08401 1DEF                        00            .byte	0
08402 1DF0                        00            .byte	0
08403 1DF1                        00            .byte	0
08404                                           ! 1085  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08405 1DF2                        00            .byte	0
08406 1DF3                        00            .byte	0
08407 1DF4                        18            .byte	$18
08408 1DF5                        18            .byte	$18
08409 1DF6                        18            .byte	$18
08410 1DF7                        18            .byte	$18
08411 1DF8                        00            .byte	0
08412 1DF9                        18            .byte	$18
08413 1DFA                        18            .byte	$18
08414 1DFB                        18            .byte	$18
08415 1DFC                        18            .byte	$18
08416 1DFD                        00            .byte	0
08417 1DFE                        00            .byte	0
08418 1DFF                        00            .byte	0
08419                                           ! 1086  0x00
08420                                           ! 1086 , 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08421 1E00                        00            .byte	0
08422 1E01                        00            .byte	0
08423 1E02                        70            .byte	$70
08424 1E03                        18            .byte	$18
08425 1E04                        18            .byte	$18
08426 1E05                        18            .byte	$18
08427 1E06                        0E            .byte	$E
08428 1E07                        18            .byte	$18
08429 1E08                        18            .byte	$18
08430 1E09                        18            .byte	$18
08431 1E0A                        70            .byte	$70
08432 1E0B                        00            .byte	0
08433 1E0C                        00            .byte	0
08434 1E0D                        00            .byte	0
08435                                           ! 1087  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08436 1E0E                        00            .byte	0
08437 1E0F                        00            .byte	0
08438 1E10                        76            .byte	$76
08439 1E11                        DC            .byte	$DC
08440 1E12                        00            .byte	0
08441 1E13                        00            .byte	0
08442 1E14                        00            .byte	0
08443 1E15                        00            .byte	0
08444 1E16                        00            .byte	0
08445 1E17                        00            .byte	0
08446 1E18                        00            .byte	0
08447 1E19                        00            .byte	0
08448 1E1A                        00            .byte	0
08449 1E1B                        00            .byte	0
08450                                           ! 1088  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08451 1E1C                        00            .byte	0
08452 1E1D                        00            .byte	0
08453 1E1E                        00            .byte	0
08454 1E1F                        00            .byte	0
08455 1E20                        10            .byte	$10
08456 1E21                        38            .byte	$38
08457 1E22                        6C            .byte	$6C
08458 1E23                        C6            .byte	$C6
08459 1E24                        C6            .byte	$C6
08460 1E25                        FE            .byte	$FE
08461 1E26                        00            .byte	0
08462 1E27                        00            .byte	0
08463 1E28                        00            .byte	0
08464 1E29                        00            .byte	0
08465                                           ! 1089  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08466 1E2A                        00            .byte	0
08467 1E2B                        00            .byte	0
08468 1E2C                        3C            .byte	$3C
08469 1E2D                        66            .byte	$66
08470 1E2E                        C2            .byte	$C2
08471 1E2F                        C0            .byte	$C0
08472 1E30                        C0            .byte	$C0
08473 1E31                        C2            .byte	$C2
08474 1E32                        66            .byte	$66
08475 1E33                        3C            .byte	$3C
08476 1E34                        0C            .byte	$C
08477 1E35                        06            .byte	6
08478 1E36                        7C            .byte	$7C
08479 1E37                        00            .byte	0
08480                                           ! 1090  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08481 1E38                        00            .byte	0
08482 1E39                        00            .byte	0
08483 1E3A                        CC            .byte	$CC
08484 1E3B                        CC            .byte	$CC
08485 1E3C                        00            .byte	0
08486 1E3D                        CC            .byte	$CC
08487 1E3E                        CC            .byte	$CC
08488 1E3F                        CC            .byte	$CC
08489 1E40                        CC            .byte	$CC
08490 1E41                        CC            .byte	$CC
08491 1E42                        76            .byte	$76
08492 1E43                        00            .byte	0
08493 1E44                        00            .byte	0
08494 1E45                        00            .byte	0
08495                                           ! 1091  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08496 1E46                        00            .byte	0
08497 1E47                        0C            .byte	$C
08498 1E48                        18            .byte	$18
08499 1E49                        30            .byte	$30
08500 1E4A                        00            .byte	0
08501 1E4B                        7C            .byte	$7C
08502 1E4C                        C6            .byte	$C6
08503 1E4D                        FE            .byte	$FE
08504 1E4E                        C0            .byte	$C0
08505 1E4F                        C6            .byte	$C6
08506 1E50                        7C            .byte	$7C
08507 1E51                        00            .byte	0
08508 1E52                        00            .byte	0
08509 1E53                        00            .byte	0
08510                                           ! 1092  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08511 1E54                        00            .byte	0
08512 1E55                        10            .byte	$10
08513 1E56                        38            .byte	$38
08514 1E57                        6C            .byte	$6C
08515 1E58                        00            .byte	0
08516 1E59                        78            .byte	$78
08517 1E5A                        0C            .byte	$C
08518 1E5B                        7C            .byte	$7C
08519 1E5C                        CC            .byte	$CC
08520 1E5D                        CC            .byte	$CC
08521 1E5E                        76            .byte	$76
08522 1E5F                        00            .byte	0
08523 1E60                        00            .byte	0
08524 1E61                        00            .byte	0
08525                                           ! 1093  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08526 1E62                        00            .byte	0
08527 1E63                        00            .byte	0
08528 1E64                        CC            .byte	$CC
08529 1E65                        CC            .byte	$CC
08530 1E66                        00            .byte	0
08531 1E67                        78            .byte	$78
08532 1E68                        0C            .byte	$C
08533 1E69                        7C            .byte	$7C
08534 1E6A                        CC            .byte	$CC
08535 1E6B                        CC            .byte	$CC
08536 1E6C                        76            .byte	$76
08537 1E6D                        00            .byte	0
08538 1E6E                        00            .byte	0
08539 1E6F                        00            .byte	0
08540                                           ! 1094  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08541 1E70                        00            .byte	0
08542 1E71                        60            .byte	$60
08543 1E72                        30            .byte	$30
08544 1E73                        18            .byte	$18
08545 1E74                        00            .byte	0
08546 1E75                        78            .byte	$78
08547 1E76                        0C            .byte	$C
08548 1E77                        7C            .byte	$7C
08549 1E78                        CC            .byte	$CC
08550 1E79                        CC            .byte	$CC
08551 1E7A                        76            .byte	$76
08552 1E7B                        00            .byte	0
08553 1E7C                        00            .byte	0
08554 1E7D                        00            .byte	0
08555                                           ! 1095  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08556 1E7E                        00            .byte	0
08557 1E7F                        38            .byte	$38
08558 1E80                        6C            .byte	$6C
08559 1E81                        38            .byte	$38
08560 1E82                        00            .byte	0
08561 1E83                        78            .byte	$78
08562 1E84                        0C            .byte	$C
08563 1E85                        7C            .byte	$7C
08564 1E86                        CC            .byte	$CC
08565 1E87                        CC            .byte	$CC
08566 1E88                        76            .byte	$76
08567 1E89                        00            .byte	0
08568 1E8A                        00            .byte	0
08569 1E8B                        00            .byte	0
08570                                           ! 1096  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08571 1E8C                        00            .byte	0
08572 1E8D                        00            .byte	0
08573 1E8E                        00            .byte	0
08574 1E8F                        00            .byte	0
08575 1E90                        3C            .byte	$3C
08576 1E91                        66            .byte	$66
08577 1E92                        60            .byte	$60
08578 1E93                        66            .byte	$66
08579 1E94                        3C            .byte	$3C
08580 1E95                        0C            .byte	$C
08581 1E96                        06            .byte	6
08582 1E97                        3C            .byte	$3C
08583 1E98                        00            .byte	0
08584 1E99                        00            .byte	0
08585                                           ! 1097  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08586 1E9A                        00            .byte	0
08587 1E9B                        10            .byte	$10
08588 1E9C                        38            .byte	$38
08589 1E9D                        6C            .byte	$6C
08590 1E9E                        00            .byte	0
08591 1E9F                        7C            .byte	$7C
08592 1EA0                        C6            .byte	$C6
08593 1EA1                        FE            .byte	$FE
08594 1EA2                        C0            .byte	$C0
08595 1EA3                        C6            .byte	$C6
08596 1EA4                        7C            .byte	$7C
08597 1EA5                        00            .byte	0
08598 1EA6                        00            .byte	0
08599 1EA7                        00            .byte	0
08600                                           ! 1098  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08601 1EA8                        00            .byte	0
08602 1EA9                        00            .byte	0
08603 1EAA                        CC            .byte	$CC
08604 1EAB                        CC            .byte	$CC
08605 1EAC                        00            .byte	0
08606 1EAD                        7C            .byte	$7C
08607 1EAE                        C6            .byte	$C6
08608 1EAF                        FE            .byte	$FE
08609 1EB0                        C0            .byte	$C0
08610 1EB1                        C6            .byte	$C6
08611 1EB2                        7C            .byte	$7C
08612 1EB3                        00            .byte	0
08613 1EB4                        00            .byte	0
08614 1EB5                        00            .byte	0
08615                                           ! 1099  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08616 1EB6                        00            .byte	0
08617 1EB7                        60            .byte	$60
08618 1EB8                        30            .byte	$30
08619 1EB9                        18            .byte	$18
08620 1EBA                        00            .byte	0
08621 1EBB                        7C            .byte	$7C
08622 1EBC                        C6            .byte	$C6
08623 1EBD                        FE            .byte	$FE
08624 1EBE                        C0            .byte	$C0
08625 1EBF                        C6            .byte	$C6
08626 1EC0                        7C            .byte	$7C
08627 1EC1                        00            .byte	0
08628 1EC2                        00            .byte	0
08629 1EC3                        00            .byte	0
08630                                           ! 1100  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08631 1EC4                        00            .byte	0
08632 1EC5                        00            .byte	0
08633 1EC6                        66            .byte	$66
08634 1EC7                        66            .byte	$66
08635 1EC8                        00            .byte	0
08636 1EC9                        38            .byte	$38
08637 1ECA                        18            .byte	$18
08638 1ECB                        18            .byte	$18
08639 1ECC                        18            .byte	$18
08640 1ECD                        18            .byte	$18
08641 1ECE                        3C            .byte	$3C
08642 1ECF                        00            .byte	0
08643 1ED0                        00            .byte	0
08644 1ED1                        00            .byte	0
08645                                           ! 1101  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08646 1ED2                        00            .byte	0
08647 1ED3                        18            .byte	$18
08648 1ED4                        3C            .byte	$3C
08649 1ED5                        66            .byte	$66
08650 1ED6                        00            .byte	0
08651 1ED7                        38            .byte	$38
08652 1ED8                        18            .byte	$18
08653 1ED9                        18            .byte	$18
08654 1EDA                        18            .byte	$18
08655 1EDB                        18            .byte	$18
08656 1EDC                        3C            .byte	$3C
08657 1EDD                        00            .byte	0
08658 1EDE                        00            .byte	0
08659 1EDF                        00            .byte	0
08660                                           ! 1102  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08661 1EE0                        00            .byte	0
08662 1EE1                        60            .byte	$60
08663 1EE2                        30            .byte	$30
08664 1EE3                        18            .byte	$18
08665 1EE4                        00            .byte	0
08666 1EE5                        38            .byte	$38
08667 1EE6                        18            .byte	$18
08668 1EE7                        18            .byte	$18
08669 1EE8                        18            .byte	$18
08670 1EE9                        18            .byte	$18
08671 1EEA                        3C            .byte	$3C
08672 1EEB                        00            .byte	0
08673 1EEC                        00            .byte	0
08674 1EED                        00            .byte	0
08675                                           ! 1103  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08676 1EEE                        00            .byte	0
08677 1EEF                        C6            .byte	$C6
08678 1EF0                        C6            .byte	$C6
08679 1EF1                        10            .byte	$10
08680 1EF2                        38            .byte	$38
08681 1EF3                        6C            .byte	$6C
08682 1EF4                        C6            .byte	$C6
08683 1EF5                        C6            .byte	$C6
08684 1EF6                        FE            .byte	$FE
08685 1EF7                        C6            .byte	$C6
08686 1EF8                        C6            .byte	$C6
08687 1EF9                        00            .byte	0
08688 1EFA                        00            .byte	0
08689 1EFB                        00            .byte	0
08690                                           ! 1104  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08691 1EFC                        38            .byte	$38
08692 1EFD                        6C            .byte	$6C
08693 1EFE                        38            .byte	$38
08694 1EFF                        00            .byte	0
08695 1F00                        38            .byte	$38
08696 1F01                        6C            .byte	$6C
08697 1F02                        C6            .byte	$C6
08698 1F03                        C6            .byte	$C6
08699 1F04                        FE            .byte	$FE
08700 1F05                        C6            .byte	$C6
08701 1F06                        C6            .byte	$C6
08702 1F07                        00            .byte	0
08703 1F08                        00            .byte	0
08704 1F09                        00            .byte	0
08705                                           ! 1105  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
08706 1F0A                        18            .byte	$18
08707 1F0B                        30            .byte	$30
08708 1F0C                        60            .byte	$60
08709 1F0D                        00            .byte	0
08710 1F0E                        FE            .byte	$FE
08711 1F0F                        66            .byte	$66
08712 1F10                        60            .byte	$60
08713 1F11                        7C            .byte	$7C
08714 1F12                        60            .byte	$60
08715 1F13                        66            .byte	$66
08716 1F14                        FE            .byte	$FE
08717 1F15                        00            .byte	0
08718 1F16                        00            .byte	0
08719 1F17                        00            .byte	0
08720                                           ! 1106  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
08721 1F18                        00            .byte	0
08722 1F19                        00            .byte	0
08723 1F1A                        00            .byte	0
08724 1F1B                        00            .byte	0
08725 1F1C                        CC            .byte	$CC
08726 1F1D                        76            .byte	$76
08727 1F1E                        36            .byte	$36
08728 1F1F                        7E            .byte	$7E
08729 1F20                        D8            .byte	$D8
08730 1F21                        D8            .byte	$D8
08731 1F22                        6E            .byte	$6E
08732 1F23                        00            .byte	0
08733 1F24                        00            .byte	0
08734 1F25                        00            .byte	0
08735                                           ! 1107  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
08736 1F26                        00            .byte	0
08737 1F27                        00            .byte	0
08738 1F28                        3E            .byte	$3E
08739 1F29                        6C            .byte	$6C
08740 1F2A                        CC            .byte	$CC
08741 1F2B                        CC            .byte	$CC
08742 1F2C                        FE            .byte	$FE
08743 1F2D                        CC            .byte	$CC
08744 1F2E                        CC            .byte	$CC
08745 1F2F                        CC            .byte	$CC
08746 1F30                        CE            .byte	$CE
08747 1F31                        00            .byte	0
08748 1F32                        00            .byte	0
08749 1F33                        00            .byte	0
08750                                           ! 1108  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08751 1F34                        00            .byte	0
08752 1F35                        10            .byte	$10
08753 1F36                        38            .byte	$38
08754 1F37                        6C            .byte	$6C
08755 1F38                        00            .byte	0
08756 1F39                        7C            .byte	$7C
08757 1F3A                        C6            .byte	$C6
08758 1F3B                        C6            .byte	$C6
08759 1F3C                        C6            .byte	$C6
08760 1F3D                        C6            .byte	$C6
08761 1F3E                        7C            .byte	$7C
08762 1F3F                        00            .byte	0
08763 1F40                        00            .byte	0
08764 1F41                        00            .byte	0
08765                                           ! 1109  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08766 1F42                        00            .byte	0
08767 1F43                        00            .byte	0
08768 1F44                        C6            .byte	$C6
08769 1F45                        C6            .byte	$C6
08770 1F46                        00            .byte	0
08771 1F47                        7C            .byte	$7C
08772 1F48                        C6            .byte	$C6
08773 1F49                        C6            .byte	$C6
08774 1F4A                        C6            .byte	$C6
08775 1F4B                        C6            .byte	$C6
08776 1F4C                        7C            .byte	$7C
08777 1F4D                        00            .byte	0
08778 1F4E                        00            .byte	0
08779 1F4F                        00            .byte	0
08780                                           ! 1110  0x00, 0x60, 
08781 1F50                        00            .byte	0
08782 1F51                        60            .byte	$60
08783                                           ! 1110 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08784 1F52                        30            .byte	$30
08785 1F53                        18            .byte	$18
08786 1F54                        00            .byte	0
08787 1F55                        7C            .byte	$7C
08788 1F56                        C6            .byte	$C6
08789 1F57                        C6            .byte	$C6
08790 1F58                        C6            .byte	$C6
08791 1F59                        C6            .byte	$C6
08792 1F5A                        7C            .byte	$7C
08793 1F5B                        00            .byte	0
08794 1F5C                        00            .byte	0
08795 1F5D                        00            .byte	0
08796                                           ! 1111  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08797 1F5E                        00            .byte	0
08798 1F5F                        30            .byte	$30
08799 1F60                        78            .byte	$78
08800 1F61                        CC            .byte	$CC
08801 1F62                        00            .byte	0
08802 1F63                        CC            .byte	$CC
08803 1F64                        CC            .byte	$CC
08804 1F65                        CC            .byte	$CC
08805 1F66                        CC            .byte	$CC
08806 1F67                        CC            .byte	$CC
08807 1F68                        76            .byte	$76
08808 1F69                        00            .byte	0
08809 1F6A                        00            .byte	0
08810 1F6B                        00            .byte	0
08811                                           ! 1112  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08812 1F6C                        00            .byte	0
08813 1F6D                        60            .byte	$60
08814 1F6E                        30            .byte	$30
08815 1F6F                        18            .byte	$18
08816 1F70                        00            .byte	0
08817 1F71                        CC            .byte	$CC
08818 1F72                        CC            .byte	$CC
08819 1F73                        CC            .byte	$CC
08820 1F74                        CC            .byte	$CC
08821 1F75                        CC            .byte	$CC
08822 1F76                        76            .byte	$76
08823 1F77                        00            .byte	0
08824 1F78                        00            .byte	0
08825 1F79                        00            .byte	0
08826                                           ! 1113  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
08827 1F7A                        00            .byte	0
08828 1F7B                        00            .byte	0
08829 1F7C                        C6            .byte	$C6
08830 1F7D                        C6            .byte	$C6
08831 1F7E                        00            .byte	0
08832 1F7F                        C6            .byte	$C6
08833 1F80                        C6            .byte	$C6
08834 1F81                        C6            .byte	$C6
08835 1F82                        C6            .byte	$C6
08836 1F83                        7E            .byte	$7E
08837 1F84                        06            .byte	6
08838 1F85                        0C            .byte	$C
08839 1F86                        78            .byte	$78
08840 1F87                        00            .byte	0
08841                                           ! 1114  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08842 1F88                        00            .byte	0
08843 1F89                        C6            .byte	$C6
08844 1F8A                        C6            .byte	$C6
08845 1F8B                        38            .byte	$38
08846 1F8C                        6C            .byte	$6C
08847 1F8D                        C6            .byte	$C6
08848 1F8E                        C6            .byte	$C6
08849 1F8F                        C6            .byte	$C6
08850 1F90                        C6            .byte	$C6
08851 1F91                        6C            .byte	$6C
08852 1F92                        38            .byte	$38
08853 1F93                        00            .byte	0
08854 1F94                        00            .byte	0
08855 1F95                        00            .byte	0
08856                                           ! 1115  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08857 1F96                        00            .byte	0
08858 1F97                        C6            .byte	$C6
08859 1F98                        C6            .byte	$C6
08860 1F99                        00            .byte	0
08861 1F9A                        C6            .byte	$C6
08862 1F9B                        C6            .byte	$C6
08863 1F9C                        C6            .byte	$C6
08864 1F9D                        C6            .byte	$C6
08865 1F9E                        C6            .byte	$C6
08866 1F9F                        C6            .byte	$C6
08867 1FA0                        7C            .byte	$7C
08868 1FA1                        00            .byte	0
08869 1FA2                        00            .byte	0
08870 1FA3                        00            .byte	0
08871                                           ! 1116  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
08872 1FA4                        00            .byte	0
08873 1FA5                        18            .byte	$18
08874 1FA6                        18            .byte	$18
08875 1FA7                        3C            .byte	$3C
08876 1FA8                        66            .byte	$66
08877 1FA9                        60            .byte	$60
08878 1FAA                        60            .byte	$60
08879 1FAB                        66            .byte	$66
08880 1FAC                        3C            .byte	$3C
08881 1FAD                        18            .byte	$18
08882 1FAE                        18            .byte	$18
08883 1FAF                        00            .byte	0
08884 1FB0                        00            .byte	0
08885 1FB1                        00            .byte	0
08886                                           ! 1117  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
08887 1FB2                        00            .byte	0
08888 1FB3                        38            .byte	$38
08889 1FB4                        6C            .byte	$6C
08890 1FB5                        64            .byte	$64
08891 1FB6                        60            .byte	$60
08892 1FB7                        F0            .byte	$F0
08893 1FB8                        60            .byte	$60
08894 1FB9                        60            .byte	$60
08895 1FBA                        60            .byte	$60
08896 1FBB                        E6            .byte	$E6
08897 1FBC                        FC            .byte	$FC
08898 1FBD                        00            .byte	0
08899 1FBE                        00            .byte	0
08900 1FBF                        00            .byte	0
08901                                           ! 1118  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
08902 1FC0                        00            .byte	0
08903 1FC1                        00            .byte	0
08904 1FC2                        66            .byte	$66
08905 1FC3                        66            .byte	$66
08906 1FC4                        3C            .byte	$3C
08907 1FC5                        18            .byte	$18
08908 1FC6                        7E            .byte	$7E
08909 1FC7                        18            .byte	$18
08910 1FC8                        7E            .byte	$7E
08911 1FC9                        18            .byte	$18
08912 1FCA                        18            .byte	$18
08913 1FCB                        00            .byte	0
08914 1FCC                        00            .byte	0
08915 1FCD                        00            .byte	0
08916                                           ! 1119  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
08917 1FCE                        00            .byte	0
08918 1FCF                        F8            .byte	$F8
08919 1FD0                        CC            .byte	$CC
08920 1FD1                        CC            .byte	$CC
08921 1FD2                        F8            .byte	$F8
08922 1FD3                        C4            .byte	$C4
08923 1FD4                        CC            .byte	$CC
08924 1FD5                        DE            .byte	$DE
08925 1FD6                        CC            .byte	$CC
08926 1FD7                        CC            .byte	$CC
08927 1FD8                        C6            .byte	$C6
08928 1FD9                        00            .byte	0
08929 1FDA                        00            .byte	0
08930 1FDB                        00            .byte	0
08931                                           ! 1120  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
08932 1FDC                        00            .byte	0
08933 1FDD                        0E            .byte	$E
08934 1FDE                        1B            .byte	$1B
08935 1FDF                        18            .byte	$18
08936 1FE0                        18            .byte	$18
08937 1FE1                        18            .byte	$18
08938 1FE2                        7E            .byte	$7E
08939 1FE3                        18            .byte	$18
08940 1FE4                        18            .byte	$18
08941 1FE5                        18            .byte	$18
08942 1FE6                        18            .byte	$18
08943 1FE7                        D8            .byte	$D8
08944 1FE8                        70            .byte	$70
08945 1FE9                        00            .byte	0
08946                                           ! 1121  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08947 1FEA                        00            .byte	0
08948 1FEB                        18            .byte	$18
08949 1FEC                        30            .byte	$30
08950 1FED                        60            .byte	$60
08951 1FEE                        00            .byte	0
08952 1FEF                        78            .byte	$78
08953 1FF0                        0C            .byte	$C
08954 1FF1                        7C            .byte	$7C
08955 1FF2                        CC            .byte	$CC
08956 1FF3                        CC            .byte	$CC
08957 1FF4                        76            .byte	$76
08958 1FF5                        00            .byte	0
08959 1FF6                        00            .byte	0
08960 1FF7                        00            .byte	0
08961                                           ! 1122  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08962 1FF8                        00            .byte	0
08963 1FF9                        0C            .byte	$C
08964 1FFA                        18            .byte	$18
08965 1FFB                        30            .byte	$30
08966 1FFC                        00            .byte	0
08967 1FFD                        38            .byte	$38
08968 1FFE                        18            .byte	$18
08969 1FFF                        18            .byte	$18
08970 2000                        18            .byte	$18
08971 2001                        18            .byte	$18
08972 2002                        3C            .byte	$3C
08973 2003                        00            .byte	0
08974 2004                        00            .byte	0
08975 2005                        00            .byte	0
08976                                           ! 1123  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08977 2006                        00            .byte	0
08978 2007                        18            .byte	$18
08979 2008                        30            .byte	$30
08980 2009                        60            .byte	$60
08981 200A                        00            .byte	0
08982 200B                        7C            .byte	$7C
08983 200C                        C6            .byte	$C6
08984 200D                        C6            .byte	$C6
08985 200E                        C6            .byte	$C6
08986 200F                        C6            .byte	$C6
08987 2010                        7C            .byte	$7C
08988 2011                        00            .byte	0
08989 2012                        00            .byte	0
08990 2013                        00            .byte	0
08991                                           ! 1124  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08992 2014                        00            .byte	0
08993 2015                        18            .byte	$18
08994 2016                        30            .byte	$30
08995 2017                        60            .byte	$60
08996 2018                        00            .byte	0
08997 2019                        CC            .byte	$CC
08998 201A                        CC            .byte	$CC
08999 201B                        CC            .byte	$CC
09000 201C                        CC            .byte	$CC
09001 201D                        CC            .byte	$CC
09002 201E                        76            .byte	$76
09003 201F                        00            .byte	0
09004 2020                        00            .byte	0
09005 2021                        00            .byte	0
09006                                           ! 1125  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09007 2022                        00            .byte	0
09008 2023                        00            .byte	0
09009 2024                        76            .byte	$76
09010 2025                        DC            .byte	$DC
09011 2026                        00            .byte	0
09012 2027                        DC            .byte	$DC
09013 2028                        66            .byte	$66
09014 2029                        66            .byte	$66
09015 202A                        66            .byte	$66
09016 202B                        66            .byte	$66
09017 202C                        66            .byte	$66
09018 202D                        00            .byte	0
09019 202E                        00            .byte	0
09020 202F                        00            .byte	0
09021                                           ! 1126  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09022 2030                        76            .byte	$76
09023 2031                        DC            .byte	$DC
09024 2032                        00            .byte	0
09025 2033                        C6            .byte	$C6
09026 2034                        E6            .byte	$E6
09027 2035                        F6            .byte	$F6
09028 2036                        FE            .byte	$FE
09029 2037                        DE            .byte	$DE
09030 2038                        CE            .byte	$CE
09031 2039                        C6            .byte	$C6
09032 203A                        C6            .byte	$C6
09033 203B                        00            .byte	0
09034 203C                        00            .byte	0
09035 203D                        00            .byte	0
09036                                           ! 1127  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09037 203E                        00            .byte	0
09038 203F                        3C            .byte	$3C
09039 2040                        6C            .byte	$6C
09040 2041                        6C            .byte	$6C
09041 2042                        3E            .byte	$3E
09042 2043                        00            .byte	0
09043 2044                        7E            .byte	$7E
09044 2045                        00            .byte	0
09045 2046                        00            .byte	0
09046 2047                        00            .byte	0
09047 2048                        00            .byte	0
09048 2049                        00            .byte	0
09049 204A                        00            .byte	0
09050 204B                        00            .byte	0
09051                                           ! 1128  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09052 204C                        00            .byte	0
09053 204D                        38            .byte	$38
09054 204E                        6C            .byte	$6C
09055 204F                        6C            .byte	$6C
09056 2050                        38            .byte	$38
09057 2051                        00            .byte	0
09058 2052                        7C            .byte	$7C
09059 2053                        00            .byte	0
09060 2054                        00            .byte	0
09061 2055                        00            .byte	0
09062 2056                        00            .byte	0
09063 2057                        00            .byte	0
09064 2058                        00            .byte	0
09065 2059                        00            .byte	0
09066                                           ! 1129  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09067 205A                        00            .byte	0
09068 205B                        00            .byte	0
09069 205C                        30            .byte	$30
09070 205D                        30            .byte	$30
09071 205E                        00            .byte	0
09072 205F                        30            .byte	$30
09073 2060                        30            .byte	$30
09074 2061                        60            .byte	$60
09075 2062                        C6            .byte	$C6
09076 2063                        C6            .byte	$C6
09077 2064                        7C            .byte	$7C
09078 2065                        00            .byte	0
09079 2066                        00            .byte	0
09080 2067                        00            .byte	0
09081                                           ! 1130  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09082 2068                        00            .byte	0
09083 2069                        00            .byte	0
09084 206A                        00            .byte	0
09085 206B                        00            .byte	0
09086 206C                        00            .byte	0
09087 206D                        00            .byte	0
09088 206E                        FE            .byte	$FE
09089 206F                        C0            .byte	$C0
09090 2070                        C0            .byte	$C0
09091 2071                        C0            .byte	$C0
09092 2072                        00            .byte	0
09093 2073                        00            .byte	0
09094 2074                        00            .byte	0
09095 2075                        00            .byte	0
09096                                           ! 1131  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09097 2076                        00            .byte	0
09098 2077                        00            .byte	0
09099 2078                        00            .byte	0
09100 2079                        00            .byte	0
09101 207A                        00            .byte	0
09102 207B                        00            .byte	0
09103 207C                        FE            .byte	$FE
09104 207D                        06            .byte	6
09105 207E                        06            .byte	6
09106 207F                        06            .byte	6
09107 2080                        00            .byte	0
09108 2081                        00            .byte	0
09109 2082                        00            .byte	0
09110 2083                        00            .byte	0
09111                                           ! 1132  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09112 2084                        00            .byte	0
09113 2085                        C0            .byte	$C0
09114 2086                        C0            .byte	$C0
09115 2087                        C6            .byte	$C6
09116 2088                        CC            .byte	$CC
09117 2089                        D8            .byte	$D8
09118 208A                        30            .byte	$30
09119 208B                        60            .byte	$60
09120 208C                        DC            .byte	$DC
09121 208D                        86            .byte	$86
09122 208E                        0C            .byte	$C
09123 208F                        18            .byte	$18
09124 2090                        3E            .byte	$3E
09125 2091                        00            .byte	0
09126                                           ! 1133  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09127 2092                        00            .byte	0
09128 2093                        C0            .byte	$C0
09129 2094                        C0            .byte	$C0
09130 2095                        C6            .byte	$C6
09131 2096                        CC            .byte	$CC
09132 2097                        D8            .byte	$D8
09133 2098                        30            .byte	$30
09134 2099                        66            .byte	$66
09135 209A                        CE            .byte	$CE
09136 209B                        9E            .byte	$9E
09137 209C                        3E            .byte	$3E
09138 209D                        06            .byte	6
09139 209E                        06            .byte	6
09140 209F                        00            .byte	0
09141                                           ! 1134  0x00, 0x00, 0x18, 0x
09142 20A0                        00            .byte	0
09143 20A1                        00            .byte	0
09144 20A2                        18            .byte	$18
09145                                           ! 1134 18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09146 20A3                        18            .byte	$18
09147 20A4                        00            .byte	0
09148 20A5                        18            .byte	$18
09149 20A6                        18            .byte	$18
09150 20A7                        3C            .byte	$3C
09151 20A8                        3C            .byte	$3C
09152 20A9                        3C            .byte	$3C
09153 20AA                        18            .byte	$18
09154 20AB                        00            .byte	0
09155 20AC                        00            .byte	0
09156 20AD                        00            .byte	0
09157                                           ! 1135  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09158 20AE                        00            .byte	0
09159 20AF                        00            .byte	0
09160 20B0                        00            .byte	0
09161 20B1                        00            .byte	0
09162 20B2                        36            .byte	$36
09163 20B3                        6C            .byte	$6C
09164 20B4                        D8            .byte	$D8
09165 20B5                        6C            .byte	$6C
09166 20B6                        36            .byte	$36
09167 20B7                        00            .byte	0
09168 20B8                        00            .byte	0
09169 20B9                        00            .byte	0
09170 20BA                        00            .byte	0
09171 20BB                        00            .byte	0
09172                                           ! 1136  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09173 20BC                        00            .byte	0
09174 20BD                        00            .byte	0
09175 20BE                        00            .byte	0
09176 20BF                        00            .byte	0
09177 20C0                        D8            .byte	$D8
09178 20C1                        6C            .byte	$6C
09179 20C2                        36            .byte	$36
09180 20C3                        6C            .byte	$6C
09181 20C4                        D8            .byte	$D8
09182 20C5                        00            .byte	0
09183 20C6                        00            .byte	0
09184 20C7                        00            .byte	0
09185 20C8                        00            .byte	0
09186 20C9                        00            .byte	0
09187                                           ! 1137  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09188 20CA                        11            .byte	$11
09189 20CB                        44            .byte	$44
09190 20CC                        11            .byte	$11
09191 20CD                        44            .byte	$44
09192 20CE                        11            .byte	$11
09193 20CF                        44            .byte	$44
09194 20D0                        11            .byte	$11
09195 20D1                        44            .byte	$44
09196 20D2                        11            .byte	$11
09197 20D3                        44            .byte	$44
09198 20D4                        11            .byte	$11
09199 20D5                        44            .byte	$44
09200 20D6                        11            .byte	$11
09201 20D7                        44            .byte	$44
09202                                           ! 1138  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09203 20D8                        55            .byte	$55
09204 20D9                        AA            .byte	$AA
09205 20DA                        55            .byte	$55
09206 20DB                        AA            .byte	$AA
09207 20DC                        55            .byte	$55
09208 20DD                        AA            .byte	$AA
09209 20DE                        55            .byte	$55
09210 20DF                        AA            .byte	$AA
09211 20E0                        55            .byte	$55
09212 20E1                        AA            .byte	$AA
09213 20E2                        55            .byte	$55
09214 20E3                        AA            .byte	$AA
09215 20E4                        55            .byte	$55
09216 20E5                        AA            .byte	$AA
09217                                           ! 1139  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09218 20E6                        DD            .byte	$DD
09219 20E7                        77            .byte	$77
09220 20E8                        DD            .byte	$DD
09221 20E9                        77            .byte	$77
09222 20EA                        DD            .byte	$DD
09223 20EB                        77            .byte	$77
09224 20EC                        DD            .byte	$DD
09225 20ED                        77            .byte	$77
09226 20EE                        DD            .byte	$DD
09227 20EF                        77            .byte	$77
09228 20F0                        DD            .byte	$DD
09229 20F1                        77            .byte	$77
09230 20F2                        DD            .byte	$DD
09231 20F3                        77            .byte	$77
09232                                           ! 1140  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09233 20F4                        18            .byte	$18
09234 20F5                        18            .byte	$18
09235 20F6                        18            .byte	$18
09236 20F7                        18            .byte	$18
09237 20F8                        18            .byte	$18
09238 20F9                        18            .byte	$18
09239 20FA                        18            .byte	$18
09240 20FB                        18            .byte	$18
09241 20FC                        18            .byte	$18
09242 20FD                        18            .byte	$18
09243 20FE                        18            .byte	$18
09244 20FF                        18            .byte	$18
09245 2100                        18            .byte	$18
09246 2101                        18            .byte	$18
09247                                           ! 1141  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09248 2102                        18            .byte	$18
09249 2103                        18            .byte	$18
09250 2104                        18            .byte	$18
09251 2105                        18            .byte	$18
09252 2106                        18            .byte	$18
09253 2107                        18            .byte	$18
09254 2108                        18            .byte	$18
09255 2109                        F8            .byte	$F8
09256 210A                        18            .byte	$18
09257 210B                        18            .byte	$18
09258 210C                        18            .byte	$18
09259 210D                        18            .byte	$18
09260 210E                        18            .byte	$18
09261 210F                        18            .byte	$18
09262                                           ! 1142  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09263 2110                        18            .byte	$18
09264 2111                        18            .byte	$18
09265 2112                        18            .byte	$18
09266 2113                        18            .byte	$18
09267 2114                        18            .byte	$18
09268 2115                        F8            .byte	$F8
09269 2116                        18            .byte	$18
09270 2117                        F8            .byte	$F8
09271 2118                        18            .byte	$18
09272 2119                        18            .byte	$18
09273 211A                        18            .byte	$18
09274 211B                        18            .byte	$18
09275 211C                        18            .byte	$18
09276 211D                        18            .byte	$18
09277                                           ! 1143  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09278 211E                        36            .byte	$36
09279 211F                        36            .byte	$36
09280 2120                        36            .byte	$36
09281 2121                        36            .byte	$36
09282 2122                        36            .byte	$36
09283 2123                        36            .byte	$36
09284 2124                        36            .byte	$36
09285 2125                        F6            .byte	$F6
09286 2126                        36            .byte	$36
09287 2127                        36            .byte	$36
09288 2128                        36            .byte	$36
09289 2129                        36            .byte	$36
09290 212A                        36            .byte	$36
09291 212B                        36            .byte	$36
09292                                           ! 1144  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09293 212C                        00            .byte	0
09294 212D                        00            .byte	0
09295 212E                        00            .byte	0
09296 212F                        00            .byte	0
09297 2130                        00            .byte	0
09298 2131                        00            .byte	0
09299 2132                        00            .byte	0
09300 2133                        FE            .byte	$FE
09301 2134                        36            .byte	$36
09302 2135                        36            .byte	$36
09303 2136                        36            .byte	$36
09304 2137                        36            .byte	$36
09305 2138                        36            .byte	$36
09306 2139                        36            .byte	$36
09307                                           ! 1145  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09308 213A                        00            .byte	0
09309 213B                        00            .byte	0
09310 213C                        00            .byte	0
09311 213D                        00            .byte	0
09312 213E                        00            .byte	0
09313 213F                        F8            .byte	$F8
09314 2140                        18            .byte	$18
09315 2141                        F8            .byte	$F8
09316 2142                        18            .byte	$18
09317 2143                        18            .byte	$18
09318 2144                        18            .byte	$18
09319 2145                        18            .byte	$18
09320 2146                        18            .byte	$18
09321 2147                        18            .byte	$18
09322                                           ! 1146  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09323 2148                        36            .byte	$36
09324 2149                        36            .byte	$36
09325 214A                        36            .byte	$36
09326 214B                        36            .byte	$36
09327 214C                        36            .byte	$36
09328 214D                        F6            .byte	$F6
09329 214E                        06            .byte	6
09330 214F                        F6            .byte	$F6
09331 2150                        36            .byte	$36
09332 2151                        36            .byte	$36
09333 2152                        36            .byte	$36
09334 2153                        36            .byte	$36
09335 2154                        36            .byte	$36
09336 2155                        36            .byte	$36
09337                                           ! 1147  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09338 2156                        36            .byte	$36
09339 2157                        36            .byte	$36
09340 2158                        36            .byte	$36
09341 2159                        36            .byte	$36
09342 215A                        36            .byte	$36
09343 215B                        36            .byte	$36
09344 215C                        36            .byte	$36
09345 215D                        36            .byte	$36
09346 215E                        36            .byte	$36
09347 215F                        36            .byte	$36
09348 2160                        36            .byte	$36
09349 2161                        36            .byte	$36
09350 2162                        36            .byte	$36
09351 2163                        36            .byte	$36
09352                                           ! 1148  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09353 2164                        00            .byte	0
09354 2165                        00            .byte	0
09355 2166                        00            .byte	0
09356 2167                        00            .byte	0
09357 2168                        00            .byte	0
09358 2169                        FE            .byte	$FE
09359 216A                        06            .byte	6
09360 216B                        F6            .byte	$F6
09361 216C                        36            .byte	$36
09362 216D                        36            .byte	$36
09363 216E                        36            .byte	$36
09364 216F                        36            .byte	$36
09365 2170                        36            .byte	$36
09366 2171                        36            .byte	$36
09367                                           ! 1149  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09368 2172                        36            .byte	$36
09369 2173                        36            .byte	$36
09370 2174                        36            .byte	$36
09371 2175                        36            .byte	$36
09372 2176                        36            .byte	$36
09373 2177                        F6            .byte	$F6
09374 2178                        06            .byte	6
09375 2179                        FE            .byte	$FE
09376 217A                        00            .byte	0
09377 217B                        00            .byte	0
09378 217C                        00            .byte	0
09379 217D                        00            .byte	0
09380 217E                        00            .byte	0
09381 217F                        00            .byte	0
09382                                           ! 1150  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09383 2180                        36            .byte	$36
09384 2181                        36            .byte	$36
09385 2182                        36            .byte	$36
09386 2183                        36            .byte	$36
09387 2184                        36            .byte	$36
09388 2185                        36            .byte	$36
09389 2186                        36            .byte	$36
09390 2187                        FE            .byte	$FE
09391 2188                        00            .byte	0
09392 2189                        00            .byte	0
09393 218A                        00            .byte	0
09394 218B                        00            .byte	0
09395 218C                        00            .byte	0
09396 218D                        00            .byte	0
09397                                           ! 1151  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09398 218E                        18            .byte	$18
09399 218F                        18            .byte	$18
09400 2190                        18            .byte	$18
09401 2191                        18            .byte	$18
09402 2192                        18            .byte	$18
09403 2193                        F8            .byte	$F8
09404 2194                        18            .byte	$18
09405 2195                        F8            .byte	$F8
09406 2196                        00            .byte	0
09407 2197                        00            .byte	0
09408 2198                        00            .byte	0
09409 2199                        00            .byte	0
09410 219A                        00            .byte	0
09411 219B                        00            .byte	0
09412                                           ! 1152  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09413 219C                        00            .byte	0
09414 219D                        00            .byte	0
09415 219E                        00            .byte	0
09416 219F                        00            .byte	0
09417 21A0                        00            .byte	0
09418 21A1                        00            .byte	0
09419 21A2                        00            .byte	0
09420 21A3                        F8            .byte	$F8
09421 21A4                        18            .byte	$18
09422 21A5                        18            .byte	$18
09423 21A6                        18            .byte	$18
09424 21A7                        18            .byte	$18
09425 21A8                        18            .byte	$18
09426 21A9                        18            .byte	$18
09427                                           ! 1153  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09428 21AA                        18            .byte	$18
09429 21AB                        18            .byte	$18
09430 21AC                        18            .byte	$18
09431 21AD                        18            .byte	$18
09432 21AE                        18            .byte	$18
09433 21AF                        18            .byte	$18
09434 21B0                        18            .byte	$18
09435 21B1                        1F            .byte	$1F
09436 21B2                        00            .byte	0
09437 21B3                        00            .byte	0
09438 21B4                        00            .byte	0
09439 21B5                        00            .byte	0
09440 21B6                        00            .byte	0
09441 21B7                        00            .byte	0
09442                                           ! 1154  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09443 21B8                        18            .byte	$18
09444 21B9                        18            .byte	$18
09445 21BA                        18            .byte	$18
09446 21BB                        18            .byte	$18
09447 21BC                        18            .byte	$18
09448 21BD                        18            .byte	$18
09449 21BE                        18            .byte	$18
09450 21BF                        FF            .byte	$FF
09451 21C0                        00            .byte	0
09452 21C1                        00            .byte	0
09453 21C2                        00            .byte	0
09454 21C3                        00            .byte	0
09455 21C4                        00            .byte	0
09456 21C5                        00            .byte	0
09457                                           ! 1155  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09458 21C6                        00            .byte	0
09459 21C7                        00            .byte	0
09460 21C8                        00            .byte	0
09461 21C9                        00            .byte	0
09462 21CA                        00            .byte	0
09463 21CB                        00            .byte	0
09464 21CC                        00            .byte	0
09465 21CD                        FF            .byte	$FF
09466 21CE                        18            .byte	$18
09467 21CF                        18            .byte	$18
09468 21D0                        18            .byte	$18
09469 21D1                        18            .byte	$18
09470 21D2                        18            .byte	$18
09471 21D3                        18            .byte	$18
09472                                           ! 1156  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09473 21D4                        18            .byte	$18
09474 21D5                        18            .byte	$18
09475 21D6                        18            .byte	$18
09476 21D7                        18            .byte	$18
09477 21D8                        18            .byte	$18
09478 21D9                        18            .byte	$18
09479 21DA                        18            .byte	$18
09480 21DB                        1F            .byte	$1F
09481 21DC                        18            .byte	$18
09482 21DD                        18            .byte	$18
09483 21DE                        18            .byte	$18
09484 21DF                        18            .byte	$18
09485 21E0                        18            .byte	$18
09486 21E1                        18            .byte	$18
09487                                           ! 1157  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09488 21E2                        00            .byte	0
09489 21E3                        00            .byte	0
09490 21E4                        00            .byte	0
09491 21E5                        00            .byte	0
09492 21E6                        00            .byte	0
09493 21E7                        00            .byte	0
09494 21E8                        00            .byte	0
09495 21E9                        FF            .byte	$FF
09496 21EA                        00            .byte	0
09497 21EB                        00            .byte	0
09498 21EC                        00            .byte	0
09499 21ED                        00            .byte	0
09500 21EE                        00            .byte	0
09501 21EF                        00            .byte	0
09502                                           ! 1158  0x18, 0x18, 0x18, 0x18, 0x18
09503 21F0                        18            .byte	$18
09504 21F1                        18            .byte	$18
09505 21F2                        18            .byte	$18
09506 21F3                        18            .byte	$18
09507                                           ! 1158 , 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09508 21F4                        18            .byte	$18
09509 21F5                        18            .byte	$18
09510 21F6                        18            .byte	$18
09511 21F7                        FF            .byte	$FF
09512 21F8                        18            .byte	$18
09513 21F9                        18            .byte	$18
09514 21FA                        18            .byte	$18
09515 21FB                        18            .byte	$18
09516 21FC                        18            .byte	$18
09517 21FD                        18            .byte	$18
09518                                           ! 1159  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09519 21FE                        18            .byte	$18
09520 21FF                        18            .byte	$18
09521 2200                        18            .byte	$18
09522 2201                        18            .byte	$18
09523 2202                        18            .byte	$18
09524 2203                        1F            .byte	$1F
09525 2204                        18            .byte	$18
09526 2205                        1F            .byte	$1F
09527 2206                        18            .byte	$18
09528 2207                        18            .byte	$18
09529 2208                        18            .byte	$18
09530 2209                        18            .byte	$18
09531 220A                        18            .byte	$18
09532 220B                        18            .byte	$18
09533                                           ! 1160  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09534 220C                        36            .byte	$36
09535 220D                        36            .byte	$36
09536 220E                        36            .byte	$36
09537 220F                        36            .byte	$36
09538 2210                        36            .byte	$36
09539 2211                        36            .byte	$36
09540 2212                        36            .byte	$36
09541 2213                        37            .byte	$37
09542 2214                        36            .byte	$36
09543 2215                        36            .byte	$36
09544 2216                        36            .byte	$36
09545 2217                        36            .byte	$36
09546 2218                        36            .byte	$36
09547 2219                        36            .byte	$36
09548                                           ! 1161  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09549 221A                        36            .byte	$36
09550 221B                        36            .byte	$36
09551 221C                        36            .byte	$36
09552 221D                        36            .byte	$36
09553 221E                        36            .byte	$36
09554 221F                        37            .byte	$37
09555 2220                        30            .byte	$30
09556 2221                        3F            .byte	$3F
09557 2222                        00            .byte	0
09558 2223                        00            .byte	0
09559 2224                        00            .byte	0
09560 2225                        00            .byte	0
09561 2226                        00            .byte	0
09562 2227                        00            .byte	0
09563                                           ! 1162  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09564 2228                        00            .byte	0
09565 2229                        00            .byte	0
09566 222A                        00            .byte	0
09567 222B                        00            .byte	0
09568 222C                        00            .byte	0
09569 222D                        3F            .byte	$3F
09570 222E                        30            .byte	$30
09571 222F                        37            .byte	$37
09572 2230                        36            .byte	$36
09573 2231                        36            .byte	$36
09574 2232                        36            .byte	$36
09575 2233                        36            .byte	$36
09576 2234                        36            .byte	$36
09577 2235                        36            .byte	$36
09578                                           ! 1163  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09579 2236                        36            .byte	$36
09580 2237                        36            .byte	$36
09581 2238                        36            .byte	$36
09582 2239                        36            .byte	$36
09583 223A                        36            .byte	$36
09584 223B                        F7            .byte	$F7
09585 223C                        00            .byte	0
09586 223D                        FF            .byte	$FF
09587 223E                        00            .byte	0
09588 223F                        00            .byte	0
09589 2240                        00            .byte	0
09590 2241                        00            .byte	0
09591 2242                        00            .byte	0
09592 2243                        00            .byte	0
09593                                           ! 1164  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09594 2244                        00            .byte	0
09595 2245                        00            .byte	0
09596 2246                        00            .byte	0
09597 2247                        00            .byte	0
09598 2248                        00            .byte	0
09599 2249                        FF            .byte	$FF
09600 224A                        00            .byte	0
09601 224B                        F7            .byte	$F7
09602 224C                        36            .byte	$36
09603 224D                        36            .byte	$36
09604 224E                        36            .byte	$36
09605 224F                        36            .byte	$36
09606 2250                        36            .byte	$36
09607 2251                        36            .byte	$36
09608                                           ! 1165  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09609 2252                        36            .byte	$36
09610 2253                        36            .byte	$36
09611 2254                        36            .byte	$36
09612 2255                        36            .byte	$36
09613 2256                        36            .byte	$36
09614 2257                        37            .byte	$37
09615 2258                        30            .byte	$30
09616 2259                        37            .byte	$37
09617 225A                        36            .byte	$36
09618 225B                        36            .byte	$36
09619 225C                        36            .byte	$36
09620 225D                        36            .byte	$36
09621 225E                        36            .byte	$36
09622 225F                        36            .byte	$36
09623                                           ! 1166  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09624 2260                        00            .byte	0
09625 2261                        00            .byte	0
09626 2262                        00            .byte	0
09627 2263                        00            .byte	0
09628 2264                        00            .byte	0
09629 2265                        FF            .byte	$FF
09630 2266                        00            .byte	0
09631 2267                        FF            .byte	$FF
09632 2268                        00            .byte	0
09633 2269                        00            .byte	0
09634 226A                        00            .byte	0
09635 226B                        00            .byte	0
09636 226C                        00            .byte	0
09637 226D                        00            .byte	0
09638                                           ! 1167  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09639 226E                        36            .byte	$36
09640 226F                        36            .byte	$36
09641 2270                        36            .byte	$36
09642 2271                        36            .byte	$36
09643 2272                        36            .byte	$36
09644 2273                        F7            .byte	$F7
09645 2274                        00            .byte	0
09646 2275                        F7            .byte	$F7
09647 2276                        36            .byte	$36
09648 2277                        36            .byte	$36
09649 2278                        36            .byte	$36
09650 2279                        36            .byte	$36
09651 227A                        36            .byte	$36
09652 227B                        36            .byte	$36
09653                                           ! 1168  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09654 227C                        18            .byte	$18
09655 227D                        18            .byte	$18
09656 227E                        18            .byte	$18
09657 227F                        18            .byte	$18
09658 2280                        18            .byte	$18
09659 2281                        FF            .byte	$FF
09660 2282                        00            .byte	0
09661 2283                        FF            .byte	$FF
09662 2284                        00            .byte	0
09663 2285                        00            .byte	0
09664 2286                        00            .byte	0
09665 2287                        00            .byte	0
09666 2288                        00            .byte	0
09667 2289                        00            .byte	0
09668                                           ! 1169  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09669 228A                        36            .byte	$36
09670 228B                        36            .byte	$36
09671 228C                        36            .byte	$36
09672 228D                        36            .byte	$36
09673 228E                        36            .byte	$36
09674 228F                        36            .byte	$36
09675 2290                        36            .byte	$36
09676 2291                        FF            .byte	$FF
09677 2292                        00            .byte	0
09678 2293                        00            .byte	0
09679 2294                        00            .byte	0
09680 2295                        00            .byte	0
09681 2296                        00            .byte	0
09682 2297                        00            .byte	0
09683                                           ! 1170  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09684 2298                        00            .byte	0
09685 2299                        00            .byte	0
09686 229A                        00            .byte	0
09687 229B                        00            .byte	0
09688 229C                        00            .byte	0
09689 229D                        FF            .byte	$FF
09690 229E                        00            .byte	0
09691 229F                        FF            .byte	$FF
09692 22A0                        18            .byte	$18
09693 22A1                        18            .byte	$18
09694 22A2                        18            .byte	$18
09695 22A3                        18            .byte	$18
09696 22A4                        18            .byte	$18
09697 22A5                        18            .byte	$18
09698                                           ! 1171  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09699 22A6                        00            .byte	0
09700 22A7                        00            .byte	0
09701 22A8                        00            .byte	0
09702 22A9                        00            .byte	0
09703 22AA                        00            .byte	0
09704 22AB                        00            .byte	0
09705 22AC                        00            .byte	0
09706 22AD                        FF            .byte	$FF
09707 22AE                        36            .byte	$36
09708 22AF                        36            .byte	$36
09709 22B0                        36            .byte	$36
09710 22B1                        36            .byte	$36
09711 22B2                        36            .byte	$36
09712 22B3                        36            .byte	$36
09713                                           ! 1172  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09714 22B4                        36            .byte	$36
09715 22B5                        36            .byte	$36
09716 22B6                        36            .byte	$36
09717 22B7                        36            .byte	$36
09718 22B8                        36            .byte	$36
09719 22B9                        36            .byte	$36
09720 22BA                        36            .byte	$36
09721 22BB                        3F            .byte	$3F
09722 22BC                        00            .byte	0
09723 22BD                        00            .byte	0
09724 22BE                        00            .byte	0
09725 22BF                        00            .byte	0
09726 22C0                        00            .byte	0
09727 22C1                        00            .byte	0
09728                                           ! 1173  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09729 22C2                        18            .byte	$18
09730 22C3                        18            .byte	$18
09731 22C4                        18            .byte	$18
09732 22C5                        18            .byte	$18
09733 22C6                        18            .byte	$18
09734 22C7                        1F            .byte	$1F
09735 22C8                        18            .byte	$18
09736 22C9                        1F            .byte	$1F
09737 22CA                        00            .byte	0
09738 22CB                        00            .byte	0
09739 22CC                        00            .byte	0
09740 22CD                        00            .byte	0
09741 22CE                        00            .byte	0
09742 22CF                        00            .byte	0
09743                                           ! 1174  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09744 22D0                        00            .byte	0
09745 22D1                        00            .byte	0
09746 22D2                        00            .byte	0
09747 22D3                        00            .byte	0
09748 22D4                        00            .byte	0
09749 22D5                        1F            .byte	$1F
09750 22D6                        18            .byte	$18
09751 22D7                        1F            .byte	$1F
09752 22D8                        18            .byte	$18
09753 22D9                        18            .byte	$18
09754 22DA                        18            .byte	$18
09755 22DB                        18            .byte	$18
09756 22DC                        18            .byte	$18
09757 22DD                        18            .byte	$18
09758                                           ! 1175  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09759 22DE                        00            .byte	0
09760 22DF                        00            .byte	0
09761 22E0                        00            .byte	0
09762 22E1                        00            .byte	0
09763 22E2                        00            .byte	0
09764 22E3                        00            .byte	0
09765 22E4                        00            .byte	0
09766 22E5                        3F            .byte	$3F
09767 22E6                        36            .byte	$36
09768 22E7                        36            .byte	$36
09769 22E8                        36            .byte	$36
09770 22E9                        36            .byte	$36
09771 22EA                        36            .byte	$36
09772 22EB                        36            .byte	$36
09773                                           ! 1176  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09774 22EC                        36            .byte	$36
09775 22ED                        36            .byte	$36
09776 22EE                        36            .byte	$36
09777 22EF                        36            .byte	$36
09778 22F0                        36            .byte	$36
09779 22F1                        36            .byte	$36
09780 22F2                        36            .byte	$36
09781 22F3                        FF            .byte	$FF
09782 22F4                        36            .byte	$36
09783 22F5                        36            .byte	$36
09784 22F6                        36            .byte	$36
09785 22F7                        36            .byte	$36
09786 22F8                        36            .byte	$36
09787 22F9                        36            .byte	$36
09788                                           ! 1177  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09789 22FA                        18            .byte	$18
09790 22FB                        18            .byte	$18
09791 22FC                        18            .byte	$18
09792 22FD                        18            .byte	$18
09793 22FE                        18            .byte	$18
09794 22FF                        FF            .byte	$FF
09795 2300                        18            .byte	$18
09796 2301                        FF            .byte	$FF
09797 2302                        18            .byte	$18
09798 2303                        18            .byte	$18
09799 2304                        18            .byte	$18
09800 2305                        18            .byte	$18
09801 2306                        18            .byte	$18
09802 2307                        18            .byte	$18
09803                                           ! 1178  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09804 2308                        18            .byte	$18
09805 2309                        18            .byte	$18
09806 230A                        18            .byte	$18
09807 230B                        18            .byte	$18
09808 230C                        18            .byte	$18
09809 230D                        18            .byte	$18
09810 230E                        18            .byte	$18
09811 230F                        F8            .byte	$F8
09812 2310                        00            .byte	0
09813 2311                        00            .byte	0
09814 2312                        00            .byte	0
09815 2313                        00            .byte	0
09816 2314                        00            .byte	0
09817 2315                        00            .byte	0
09818                                           ! 1179  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09819 2316                        00            .byte	0
09820 2317                        00            .byte	0
09821 2318                        00            .byte	0
09822 2319                        00            .byte	0
09823 231A                        00            .byte	0
09824 231B                        00            .byte	0
09825 231C                        00            .byte	0
09826 231D                        1F            .byte	$1F
09827 231E                        18            .byte	$18
09828 231F                        18            .byte	$18
09829 2320                        18            .byte	$18
09830 2321                        18            .byte	$18
09831 2322                        18            .byte	$18
09832 2323                        18            .byte	$18
09833                                           ! 1180  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09834 2324                        FF            .byte	$FF
09835 2325                        FF            .byte	$FF
09836 2326                        FF            .byte	$FF
09837 2327                        FF            .byte	$FF
09838 2328                        FF            .byte	$FF
09839 2329                        FF            .byte	$FF
09840 232A                        FF            .byte	$FF
09841 232B                        FF            .byte	$FF
09842 232C                        FF            .byte	$FF
09843 232D                        FF            .byte	$FF
09844 232E                        FF            .byte	$FF
09845 232F                        FF            .byte	$FF
09846 2330                        FF            .byte	$FF
09847 2331                        FF            .byte	$FF
09848                                           ! 1181  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09849 2332                        00            .byte	0
09850 2333                        00            .byte	0
09851 2334                        00            .byte	0
09852 2335                        00            .byte	0
09853 2336                        00            .byte	0
09854 2337                        00            .byte	0
09855 2338                        00            .byte	0
09856 2339                        FF            .byte	$FF
09857 233A                        FF            .byte	$FF
09858 233B                        FF            .byte	$FF
09859 233C                        FF            .byte	$FF
09860 233D                        FF            .byte	$FF
09861 233E                        FF            .byte	$FF
09862 233F                        FF            .byte	$FF
09863                                           ! 1182  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
09864 2340                        F0            .byte	$F0
09865 2341                        F0            .byte	$F0
09866 2342                        F0            .byte	$F0
09867 2343                        F0            .byte	$F0
09868 2344                        F0            .byte	$F0
09869 2345                        F0            .byte	$F0
09870                                           ! 1182 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
09871 2346                        F0            .byte	$F0
09872 2347                        F0            .byte	$F0
09873 2348                        F0            .byte	$F0
09874 2349                        F0            .byte	$F0
09875 234A                        F0            .byte	$F0
09876 234B                        F0            .byte	$F0
09877 234C                        F0            .byte	$F0
09878 234D                        F0            .byte	$F0
09879                                           ! 1183  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
09880 234E                        0F            .byte	$F
09881 234F                        0F            .byte	$F
09882 2350                        0F            .byte	$F
09883 2351                        0F            .byte	$F
09884 2352                        0F            .byte	$F
09885 2353                        0F            .byte	$F
09886 2354                        0F            .byte	$F
09887 2355                        0F            .byte	$F
09888 2356                        0F            .byte	$F
09889 2357                        0F            .byte	$F
09890 2358                        0F            .byte	$F
09891 2359                        0F            .byte	$F
09892 235A                        0F            .byte	$F
09893 235B                        0F            .byte	$F
09894                                           ! 1184  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09895 235C                        FF            .byte	$FF
09896 235D                        FF            .byte	$FF
09897 235E                        FF            .byte	$FF
09898 235F                        FF            .byte	$FF
09899 2360                        FF            .byte	$FF
09900 2361                        FF            .byte	$FF
09901 2362                        FF            .byte	$FF
09902 2363                        00            .byte	0
09903 2364                        00            .byte	0
09904 2365                        00            .byte	0
09905 2366                        00            .byte	0
09906 2367                        00            .byte	0
09907 2368                        00            .byte	0
09908 2369                        00            .byte	0
09909                                           ! 1185  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
09910 236A                        00            .byte	0
09911 236B                        00            .byte	0
09912 236C                        00            .byte	0
09913 236D                        00            .byte	0
09914 236E                        00            .byte	0
09915 236F                        76            .byte	$76
09916 2370                        DC            .byte	$DC
09917 2371                        D8            .byte	$D8
09918 2372                        D8            .byte	$D8
09919 2373                        DC            .byte	$DC
09920 2374                        76            .byte	$76
09921 2375                        00            .byte	0
09922 2376                        00            .byte	0
09923 2377                        00            .byte	0
09924                                           ! 1186  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
09925 2378                        00            .byte	0
09926 2379                        00            .byte	0
09927 237A                        00            .byte	0
09928 237B                        00            .byte	0
09929 237C                        7C            .byte	$7C
09930 237D                        C6            .byte	$C6
09931 237E                        FC            .byte	$FC
09932 237F                        C6            .byte	$C6
09933 2380                        C6            .byte	$C6
09934 2381                        FC            .byte	$FC
09935 2382                        C0            .byte	$C0
09936 2383                        C0            .byte	$C0
09937 2384                        40            .byte	$40
09938 2385                        00            .byte	0
09939                                           ! 1187  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
09940 2386                        00            .byte	0
09941 2387                        00            .byte	0
09942 2388                        FE            .byte	$FE
09943 2389                        C6            .byte	$C6
09944 238A                        C6            .byte	$C6
09945 238B                        C0            .byte	$C0
09946 238C                        C0            .byte	$C0
09947 238D                        C0            .byte	$C0
09948 238E                        C0            .byte	$C0
09949 238F                        C0            .byte	$C0
09950 2390                        C0            .byte	$C0
09951 2391                        00            .byte	0
09952 2392                        00            .byte	0
09953 2393                        00            .byte	0
09954                                           ! 1188  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
09955 2394                        00            .byte	0
09956 2395                        00            .byte	0
09957 2396                        00            .byte	0
09958 2397                        00            .byte	0
09959 2398                        FE            .byte	$FE
09960 2399                        6C            .byte	$6C
09961 239A                        6C            .byte	$6C
09962 239B                        6C            .byte	$6C
09963 239C                        6C            .byte	$6C
09964 239D                        6C            .byte	$6C
09965 239E                        6C            .byte	$6C
09966 239F                        00            .byte	0
09967 23A0                        00            .byte	0
09968 23A1                        00            .byte	0
09969                                           ! 1189  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
09970 23A2                        00            .byte	0
09971 23A3                        00            .byte	0
09972 23A4                        FE            .byte	$FE
09973 23A5                        C6            .byte	$C6
09974 23A6                        60            .byte	$60
09975 23A7                        30            .byte	$30
09976 23A8                        18            .byte	$18
09977 23A9                        30            .byte	$30
09978 23AA                        60            .byte	$60
09979 23AB                        C6            .byte	$C6
09980 23AC                        FE            .byte	$FE
09981 23AD                        00            .byte	0
09982 23AE                        00            .byte	0
09983 23AF                        00            .byte	0
09984                                           ! 1190  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
09985 23B0                        00            .byte	0
09986 23B1                        00            .byte	0
09987 23B2                        00            .byte	0
09988 23B3                        00            .byte	0
09989 23B4                        00            .byte	0
09990 23B5                        7E            .byte	$7E
09991 23B6                        D8            .byte	$D8
09992 23B7                        D8            .byte	$D8
09993 23B8                        D8            .byte	$D8
09994 23B9                        D8            .byte	$D8
09995 23BA                        70            .byte	$70
09996 23BB                        00            .byte	0
09997 23BC                        00            .byte	0
09998 23BD                        00            .byte	0
09999                                           ! 1191  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10000 23BE                        00            .byte	0
10001 23BF                        00            .byte	0
10002 23C0                        00            .byte	0
10003 23C1                        00            .byte	0
10004 23C2                        66            .byte	$66
10005 23C3                        66            .byte	$66
10006 23C4                        66            .byte	$66
10007 23C5                        66            .byte	$66
10008 23C6                        7C            .byte	$7C
10009 23C7                        60            .byte	$60
10010 23C8                        60            .byte	$60
10011 23C9                        C0            .byte	$C0
10012 23CA                        00            .byte	0
10013 23CB                        00            .byte	0
10014                                           ! 1192  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10015 23CC                        00            .byte	0
10016 23CD                        00            .byte	0
10017 23CE                        00            .byte	0
10018 23CF                        00            .byte	0
10019 23D0                        76            .byte	$76
10020 23D1                        DC            .byte	$DC
10021 23D2                        18            .byte	$18
10022 23D3                        18            .byte	$18
10023 23D4                        18            .byte	$18
10024 23D5                        18            .byte	$18
10025 23D6                        18            .byte	$18
10026 23D7                        00            .byte	0
10027 23D8                        00            .byte	0
10028 23D9                        00            .byte	0
10029                                           ! 1193  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10030 23DA                        00            .byte	0
10031 23DB                        00            .byte	0
10032 23DC                        7E            .byte	$7E
10033 23DD                        18            .byte	$18
10034 23DE                        3C            .byte	$3C
10035 23DF                        66            .byte	$66
10036 23E0                        66            .byte	$66
10037 23E1                        66            .byte	$66
10038 23E2                        3C            .byte	$3C
10039 23E3                        18            .byte	$18
10040 23E4                        7E            .byte	$7E
10041 23E5                        00            .byte	0
10042 23E6                        00            .byte	0
10043 23E7                        00            .byte	0
10044                                           ! 1194  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10045 23E8                        00            .byte	0
10046 23E9                        00            .byte	0
10047 23EA                        38            .byte	$38
10048 23EB                        6C            .byte	$6C
10049 23EC                        C6            .byte	$C6
10050 23ED                        C6            .byte	$C6
10051 23EE                        FE            .byte	$FE
10052 23EF                        C6            .byte	$C6
10053 23F0                        C6            .byte	$C6
10054 23F1                        6C            .byte	$6C
10055 23F2                        38            .byte	$38
10056 23F3                        00            .byte	0
10057 23F4                        00            .byte	0
10058 23F5                        00            .byte	0
10059                                           ! 1195  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10060 23F6                        00            .byte	0
10061 23F7                        00            .byte	0
10062 23F8                        38            .byte	$38
10063 23F9                        6C            .byte	$6C
10064 23FA                        C6            .byte	$C6
10065 23FB                        C6            .byte	$C6
10066 23FC                        C6            .byte	$C6
10067 23FD                        6C            .byte	$6C
10068 23FE                        6C            .byte	$6C
10069 23FF                        6C            .byte	$6C
10070 2400                        EE            .byte	$EE
10071 2401                        00            .byte	0
10072 2402                        00            .byte	0
10073 2403                        00            .byte	0
10074                                           ! 1196  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10075 2404                        00            .byte	0
10076 2405                        00            .byte	0
10077 2406                        1E            .byte	$1E
10078 2407                        30            .byte	$30
10079 2408                        18            .byte	$18
10080 2409                        0C            .byte	$C
10081 240A                        3E            .byte	$3E
10082 240B                        66            .byte	$66
10083 240C                        66            .byte	$66
10084 240D                        66            .byte	$66
10085 240E                        3C            .byte	$3C
10086 240F                        00            .byte	0
10087 2410                        00            .byte	0
10088 2411                        00            .byte	0
10089                                           ! 1197  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10090 2412                        00            .byte	0
10091 2413                        00            .byte	0
10092 2414                        00            .byte	0
10093 2415                        00            .byte	0
10094 2416                        00            .byte	0
10095 2417                        7E            .byte	$7E
10096 2418                        DB            .byte	$DB
10097 2419                        DB            .byte	$DB
10098 241A                        7E            .byte	$7E
10099 241B                        00            .byte	0
10100 241C                        00            .byte	0
10101 241D                        00            .byte	0
10102 241E                        00            .byte	0
10103 241F                        00            .byte	0
10104                                           ! 1198  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10105 2420                        00            .byte	0
10106 2421                        00            .byte	0
10107 2422                        03            .byte	3
10108 2423                        06            .byte	6
10109 2424                        7E            .byte	$7E
10110 2425                        DB            .byte	$DB
10111 2426                        DB            .byte	$DB
10112 2427                        F3            .byte	$F3
10113 2428                        7E            .byte	$7E
10114 2429                        60            .byte	$60
10115 242A                        C0            .byte	$C0
10116 242B                        00            .byte	0
10117 242C                        00            .byte	0
10118 242D                        00            .byte	0
10119                                           ! 1199  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10120 242E                        00            .byte	0
10121 242F                        00            .byte	0
10122 2430                        1C            .byte	$1C
10123 2431                        30            .byte	$30
10124 2432                        60            .byte	$60
10125 2433                        60            .byte	$60
10126 2434                        7C            .byte	$7C
10127 2435                        60            .byte	$60
10128 2436                        60            .byte	$60
10129 2437                        30            .byte	$30
10130 2438                        1C            .byte	$1C
10131 2439                        00            .byte	0
10132 243A                        00            .byte	0
10133 243B                        00            .byte	0
10134                                           ! 1200  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10135 243C                        00            .byte	0
10136 243D                        00            .byte	0
10137 243E                        00            .byte	0
10138 243F                        7C            .byte	$7C
10139 2440                        C6            .byte	$C6
10140 2441                        C6            .byte	$C6
10141 2442                        C6            .byte	$C6
10142 2443                        C6            .byte	$C6
10143 2444                        C6            .byte	$C6
10144 2445                        C6            .byte	$C6
10145 2446                        C6            .byte	$C6
10146 2447                        00            .byte	0
10147 2448                        00            .byte	0
10148 2449                        00            .byte	0
10149                                           ! 1201  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10150 244A                        00            .byte	0
10151 244B                        00            .byte	0
10152 244C                        00            .byte	0
10153 244D                        FE            .byte	$FE
10154 244E                        00            .byte	0
10155 244F                        00            .byte	0
10156 2450                        FE            .byte	$FE
10157 2451                        00            .byte	0
10158 2452                        00            .byte	0
10159 2453                        FE            .byte	$FE
10160 2454                        00            .byte	0
10161 2455                        00            .byte	0
10162 2456                        00            .byte	0
10163 2457                        00            .byte	0
10164                                           ! 1202  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10165 2458                        00            .byte	0
10166 2459                        00            .byte	0
10167 245A                        00            .byte	0
10168 245B                        18            .byte	$18
10169 245C                        18            .byte	$18
10170 245D                        7E            .byte	$7E
10171 245E                        18            .byte	$18
10172 245F                        18            .byte	$18
10173 2460                        00            .byte	0
10174 2461                        00            .byte	0
10175 2462                        FF            .byte	$FF
10176 2463                        00            .byte	0
10177 2464                        00            .byte	0
10178 2465                        00            .byte	0
10179                                           ! 1203  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10180 2466                        00            .byte	0
10181 2467                        00            .byte	0
10182 2468                        30            .byte	$30
10183 2469                        18            .byte	$18
10184 246A                        0C            .byte	$C
10185 246B                        06            .byte	6
10186 246C                        0C            .byte	$C
10187 246D                        18            .byte	$18
10188 246E                        30            .byte	$30
10189 246F                        00            .byte	0
10190 2470                        7E            .byte	$7E
10191 2471                        00            .byte	0
10192 2472                        00            .byte	0
10193 2473                        00            .byte	0
10194                                           ! 1204  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10195 2474                        00            .byte	0
10196 2475                        00            .byte	0
10197 2476                        0C            .byte	$C
10198 2477                        18            .byte	$18
10199 2478                        30            .byte	$30
10200 2479                        60            .byte	$60
10201 247A                        30            .byte	$30
10202 247B                        18            .byte	$18
10203 247C                        0C            .byte	$C
10204 247D                        00            .byte	0
10205 247E                        7E            .byte	$7E
10206 247F                        00            .byte	0
10207 2480                        00            .byte	0
10208 2481                        00            .byte	0
10209                                           ! 1205  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10210 2482                        00            .byte	0
10211 2483                        00            .byte	0
10212 2484                        0E            .byte	$E
10213 2485                        1B            .byte	$1B
10214 2486                        1B            .byte	$1B
10215 2487                        18            .byte	$18
10216 2488                        18            .byte	$18
10217 2489                        18            .byte	$18
10218 248A                        18            .byte	$18
10219 248B                        18            .byte	$18
10220 248C                        18            .byte	$18
10221 248D                        18            .byte	$18
10222 248E                        18            .byte	$18
10223 248F                        18            .byte	$18
10224                                           ! 1206  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x
10225 2490                        18            .byte	$18
10226 2491                        18            .byte	$18
10227 2492                        18            .byte	$18
10228 2493                        18            .byte	$18
10229 2494                        18            .byte	$18
10230 2495                        18            .byte	$18
10231 2496                        18            .byte	$18
10232                                           ! 1206 18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10233 2497                        18            .byte	$18
10234 2498                        D8            .byte	$D8
10235 2499                        D8            .byte	$D8
10236 249A                        70            .byte	$70
10237 249B                        00            .byte	0
10238 249C                        00            .byte	0
10239 249D                        00            .byte	0
10240                                           ! 1207  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10241 249E                        00            .byte	0
10242 249F                        00            .byte	0
10243 24A0                        00            .byte	0
10244 24A1                        18            .byte	$18
10245 24A2                        18            .byte	$18
10246 24A3                        00            .byte	0
10247 24A4                        7E            .byte	$7E
10248 24A5                        00            .byte	0
10249 24A6                        18            .byte	$18
10250 24A7                        18            .byte	$18
10251 24A8                        00            .byte	0
10252 24A9                        00            .byte	0
10253 24AA                        00            .byte	0
10254 24AB                        00            .byte	0
10255                                           ! 1208  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10256 24AC                        00            .byte	0
10257 24AD                        00            .byte	0
10258 24AE                        00            .byte	0
10259 24AF                        00            .byte	0
10260 24B0                        76            .byte	$76
10261 24B1                        DC            .byte	$DC
10262 24B2                        00            .byte	0
10263 24B3                        76            .byte	$76
10264 24B4                        DC            .byte	$DC
10265 24B5                        00            .byte	0
10266 24B6                        00            .byte	0
10267 24B7                        00            .byte	0
10268 24B8                        00            .byte	0
10269 24B9                        00            .byte	0
10270                                           ! 1209  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10271 24BA                        00            .byte	0
10272 24BB                        38            .byte	$38
10273 24BC                        6C            .byte	$6C
10274 24BD                        6C            .byte	$6C
10275 24BE                        38            .byte	$38
10276 24BF                        00            .byte	0
10277 24C0                        00            .byte	0
10278 24C1                        00            .byte	0
10279 24C2                        00            .byte	0
10280 24C3                        00            .byte	0
10281 24C4                        00            .byte	0
10282 24C5                        00            .byte	0
10283 24C6                        00            .byte	0
10284 24C7                        00            .byte	0
10285                                           ! 1210  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10286 24C8                        00            .byte	0
10287 24C9                        00            .byte	0
10288 24CA                        00            .byte	0
10289 24CB                        00            .byte	0
10290 24CC                        00            .byte	0
10291 24CD                        00            .byte	0
10292 24CE                        18            .byte	$18
10293 24CF                        18            .byte	$18
10294 24D0                        00            .byte	0
10295 24D1                        00            .byte	0
10296 24D2                        00            .byte	0
10297 24D3                        00            .byte	0
10298 24D4                        00            .byte	0
10299 24D5                        00            .byte	0
10300                                           ! 1211  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10301 24D6                        00            .byte	0
10302 24D7                        00            .byte	0
10303 24D8                        00            .byte	0
10304 24D9                        00            .byte	0
10305 24DA                        00            .byte	0
10306 24DB                        00            .byte	0
10307 24DC                        00            .byte	0
10308 24DD                        18            .byte	$18
10309 24DE                        00            .byte	0
10310 24DF                        00            .byte	0
10311 24E0                        00            .byte	0
10312 24E1                        00            .byte	0
10313 24E2                        00            .byte	0
10314 24E3                        00            .byte	0
10315                                           ! 1212  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10316 24E4                        00            .byte	0
10317 24E5                        0F            .byte	$F
10318 24E6                        0C            .byte	$C
10319 24E7                        0C            .byte	$C
10320 24E8                        0C            .byte	$C
10321 24E9                        0C            .byte	$C
10322 24EA                        0C            .byte	$C
10323 24EB                        EC            .byte	$EC
10324 24EC                        6C            .byte	$6C
10325 24ED                        3C            .byte	$3C
10326 24EE                        1C            .byte	$1C
10327 24EF                        00            .byte	0
10328 24F0                        00            .byte	0
10329 24F1                        00            .byte	0
10330                                           ! 1213  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10331 24F2                        00            .byte	0
10332 24F3                        D8            .byte	$D8
10333 24F4                        6C            .byte	$6C
10334 24F5                        6C            .byte	$6C
10335 24F6                        6C            .byte	$6C
10336 24F7                        6C            .byte	$6C
10337 24F8                        6C            .byte	$6C
10338 24F9                        00            .byte	0
10339 24FA                        00            .byte	0
10340 24FB                        00            .byte	0
10341 24FC                        00            .byte	0
10342 24FD                        00            .byte	0
10343 24FE                        00            .byte	0
10344 24FF                        00            .byte	0
10345                                           ! 1214  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10346 2500                        00            .byte	0
10347 2501                        70            .byte	$70
10348 2502                        D8            .byte	$D8
10349 2503                        30            .byte	$30
10350 2504                        60            .byte	$60
10351 2505                        C8            .byte	$C8
10352 2506                        F8            .byte	$F8
10353 2507                        00            .byte	0
10354 2508                        00            .byte	0
10355 2509                        00            .byte	0
10356 250A                        00            .byte	0
10357 250B                        00            .byte	0
10358 250C                        00            .byte	0
10359 250D                        00            .byte	0
10360                                           ! 1215  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10361 250E                        00            .byte	0
10362 250F                        00            .byte	0
10363 2510                        00            .byte	0
10364 2511                        00            .byte	0
10365 2512                        7C            .byte	$7C
10366 2513                        7C            .byte	$7C
10367 2514                        7C            .byte	$7C
10368 2515                        7C            .byte	$7C
10369 2516                        7C            .byte	$7C
10370 2517                        7C            .byte	$7C
10371 2518                        00            .byte	0
10372 2519                        00            .byte	0
10373 251A                        00            .byte	0
10374 251B                        00            .byte	0
10375                                           ! 1216  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10376 251C                        00            .byte	0
10377 251D                        00            .byte	0
10378 251E                        00            .byte	0
10379 251F                        00            .byte	0
10380 2520                        00            .byte	0
10381 2521                        00            .byte	0
10382 2522                        00            .byte	0
10383 2523                        00            .byte	0
10384 2524                        00            .byte	0
10385 2525                        00            .byte	0
10386 2526                        00            .byte	0
10387 2527                        00            .byte	0
10388 2528                        00            .byte	0
10389                                           ! 1217 };
10390 2529                        00            .byte	0
10391                                           !BCC_EOS
10392                                           ! 1218 static Bit8u vgafont16[256*16]=
10393                                           ! 1219 {
10394                       0000252A            _vgafont16:
10395                                           ! 1220  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10396 252A                        00            .byte	0
10397 252B                        00            .byte	0
10398 252C                        00            .byte	0
10399 252D                        00            .byte	0
10400 252E                        00            .byte	0
10401 252F                        00            .byte	0
10402 2530                        00            .byte	0
10403 2531                        00            .byte	0
10404 2532                        00            .byte	0
10405 2533                        00            .byte	0
10406 2534                        00            .byte	0
10407 2535                        00            .byte	0
10408 2536                        00            .byte	0
10409 2537                        00            .byte	0
10410 2538                        00            .byte	0
10411 2539                        00            .byte	0
10412                                           ! 1221  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10413 253A                        00            .byte	0
10414 253B                        00            .byte	0
10415 253C                        7E            .byte	$7E
10416 253D                        81            .byte	$81
10417 253E                        A5            .byte	$A5
10418 253F                        81            .byte	$81
10419 2540                        81            .byte	$81
10420 2541                        BD            .byte	$BD
10421 2542                        99            .byte	$99
10422 2543                        81            .byte	$81
10423 2544                        81            .byte	$81
10424 2545                        7E            .byte	$7E
10425 2546                        00            .byte	0
10426 2547                        00            .byte	0
10427 2548                        00            .byte	0
10428 2549                        00            .byte	0
10429                                           ! 1222  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10430 254A                        00            .byte	0
10431 254B                        00            .byte	0
10432 254C                        7E            .byte	$7E
10433 254D                        FF            .byte	$FF
10434 254E                        DB            .byte	$DB
10435 254F                        FF            .byte	$FF
10436 2550                        FF            .byte	$FF
10437 2551                        C3            .byte	$C3
10438 2552                        E7            .byte	$E7
10439 2553                        FF            .byte	$FF
10440 2554                        FF            .byte	$FF
10441 2555                        7E            .byte	$7E
10442 2556                        00            .byte	0
10443 2557                        00            .byte	0
10444 2558                        00            .byte	0
10445 2559                        00            .byte	0
10446                                           ! 1223  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10447 255A                        00            .byte	0
10448 255B                        00            .byte	0
10449 255C                        00            .byte	0
10450 255D                        00            .byte	0
10451 255E                        6C            .byte	$6C
10452 255F                        FE            .byte	$FE
10453 2560                        FE            .byte	$FE
10454 2561                        FE            .byte	$FE
10455 2562                        FE            .byte	$FE
10456 2563                        7C            .byte	$7C
10457 2564                        38            .byte	$38
10458 2565                        10            .byte	$10
10459 2566                        00            .byte	0
10460 2567                        00            .byte	0
10461 2568                        00            .byte	0
10462 2569                        00            .byte	0
10463                                           ! 1224  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10464 256A                        00            .byte	0
10465 256B                        00            .byte	0
10466 256C                        00            .byte	0
10467 256D                        00            .byte	0
10468 256E                        10            .byte	$10
10469 256F                        38            .byte	$38
10470 2570                        7C            .byte	$7C
10471 2571                        FE            .byte	$FE
10472 2572                        7C            .byte	$7C
10473 2573                        38            .byte	$38
10474 2574                        10            .byte	$10
10475 2575                        00            .byte	0
10476 2576                        00            .byte	0
10477 2577                        00            .byte	0
10478 2578                        00            .byte	0
10479 2579                        00            .byte	0
10480                                           ! 1225  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10481 257A                        00            .byte	0
10482 257B                        00            .byte	0
10483 257C                        00            .byte	0
10484 257D                        18            .byte	$18
10485 257E                        3C            .byte	$3C
10486 257F                        3C            .byte	$3C
10487 2580                        E7            .byte	$E7
10488 2581                        E7            .byte	$E7
10489 2582                        E7            .byte	$E7
10490 2583                        18            .byte	$18
10491 2584                        18            .byte	$18
10492 2585                        3C            .byte	$3C
10493 2586                        00            .byte	0
10494 2587                        00            .byte	0
10495 2588                        00            .byte	0
10496 2589                        00            .byte	0
10497                                           ! 1226  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10498 258A                        00            .byte	0
10499 258B                        00            .byte	0
10500 258C                        00            .byte	0
10501 258D                        18            .byte	$18
10502 258E                        3C            .byte	$3C
10503 258F                        7E            .byte	$7E
10504 2590                        FF            .byte	$FF
10505 2591                        FF            .byte	$FF
10506 2592                        7E            .byte	$7E
10507 2593                        18            .byte	$18
10508 2594                        18            .byte	$18
10509 2595                        3C            .byte	$3C
10510 2596                        00            .byte	0
10511 2597                        00            .byte	0
10512 2598                        00            .byte	0
10513 2599                        00            .byte	0
10514                                           ! 1227  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10515 259A                        00            .byte	0
10516 259B                        00            .byte	0
10517 259C                        00            .byte	0
10518 259D                        00            .byte	0
10519 259E                        00            .byte	0
10520 259F                        00            .byte	0
10521 25A0                        18            .byte	$18
10522 25A1                        3C            .byte	$3C
10523 25A2                        3C            .byte	$3C
10524 25A3                        18            .byte	$18
10525 25A4                        00            .byte	0
10526 25A5                        00            .byte	0
10527 25A6                        00            .byte	0
10528 25A7                        00            .byte	0
10529 25A8                        00            .byte	0
10530 25A9                        00            .byte	0
10531                                           ! 1228  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10532 25AA                        FF            .byte	$FF
10533 25AB                        FF            .byte	$FF
10534 25AC                        FF            .byte	$FF
10535 25AD                        FF            .byte	$FF
10536 25AE                        FF            .byte	$FF
10537 25AF                        FF            .byte	$FF
10538 25B0                        E7            .byte	$E7
10539 25B1                        C3            .byte	$C3
10540 25B2                        C3            .byte	$C3
10541 25B3                        E7            .byte	$E7
10542 25B4                        FF            .byte	$FF
10543 25B5                        FF            .byte	$FF
10544 25B6                        FF            .byte	$FF
10545 25B7                        FF            .byte	$FF
10546 25B8                        FF            .byte	$FF
10547 25B9                        FF            .byte	$FF
10548                                           ! 1229  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10549 25BA                        00            .byte	0
10550 25BB                        00            .byte	0
10551 25BC                        00            .byte	0
10552 25BD                        00            .byte	0
10553 25BE                        00            .byte	0
10554 25BF                        3C            .byte	$3C
10555 25C0                        66            .byte	$66
10556 25C1                        42            .byte	$42
10557 25C2                        42            .byte	$42
10558 25C3                        66            .byte	$66
10559 25C4                        3C            .byte	$3C
10560 25C5                        00            .byte	0
10561 25C6                        00            .byte	0
10562 25C7                        00            .byte	0
10563 25C8                        00            .byte	0
10564 25C9                        00            .byte	0
10565                                           ! 1230  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10566 25CA                        FF            .byte	$FF
10567 25CB                        FF            .byte	$FF
10568 25CC                        FF            .byte	$FF
10569 25CD                        FF            .byte	$FF
10570 25CE                        FF            .byte	$FF
10571 25CF                        C3            .byte	$C3
10572 25D0                        99            .byte	$99
10573 25D1                        BD            .byte	$BD
10574 25D2                        BD            .byte	$BD
10575 25D3                        99            .byte	$99
10576 25D4                        C3            .byte	$C3
10577 25D5                        FF            .byte	$FF
10578 25D6                        FF            .byte	$FF
10579 25D7                        FF            .byte	$FF
10580 25D8                        FF            .byte	$FF
10581 25D9                        FF            .byte	$FF
10582                                           ! 1231  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 
10583 25DA                        00            .byte	0
10584 25DB                        00            .byte	0
10585 25DC                        1E            .byte	$1E
10586 25DD                        0E            .byte	$E
10587 25DE                        1A            .byte	$1A
10588 25DF                        32            .byte	$32
10589 25E0                        78            .byte	$78
10590 25E1                        CC            .byte	$CC
10591 25E2                        CC            .byte	$CC
10592                                           ! 1231 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10593 25E3                        CC            .byte	$CC
10594 25E4                        CC            .byte	$CC
10595 25E5                        78            .byte	$78
10596 25E6                        00            .byte	0
10597 25E7                        00            .byte	0
10598 25E8                        00            .byte	0
10599 25E9                        00            .byte	0
10600                                           ! 1232  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10601 25EA                        00            .byte	0
10602 25EB                        00            .byte	0
10603 25EC                        3C            .byte	$3C
10604 25ED                        66            .byte	$66
10605 25EE                        66            .byte	$66
10606 25EF                        66            .byte	$66
10607 25F0                        66            .byte	$66
10608 25F1                        3C            .byte	$3C
10609 25F2                        18            .byte	$18
10610 25F3                        7E            .byte	$7E
10611 25F4                        18            .byte	$18
10612 25F5                        18            .byte	$18
10613 25F6                        00            .byte	0
10614 25F7                        00            .byte	0
10615 25F8                        00            .byte	0
10616 25F9                        00            .byte	0
10617                                           ! 1233  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10618 25FA                        00            .byte	0
10619 25FB                        00            .byte	0
10620 25FC                        3F            .byte	$3F
10621 25FD                        33            .byte	$33
10622 25FE                        3F            .byte	$3F
10623 25FF                        30            .byte	$30
10624 2600                        30            .byte	$30
10625 2601                        30            .byte	$30
10626 2602                        30            .byte	$30
10627 2603                        70            .byte	$70
10628 2604                        F0            .byte	$F0
10629 2605                        E0            .byte	$E0
10630 2606                        00            .byte	0
10631 2607                        00            .byte	0
10632 2608                        00            .byte	0
10633 2609                        00            .byte	0
10634                                           ! 1234  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10635 260A                        00            .byte	0
10636 260B                        00            .byte	0
10637 260C                        7F            .byte	$7F
10638 260D                        63            .byte	$63
10639 260E                        7F            .byte	$7F
10640 260F                        63            .byte	$63
10641 2610                        63            .byte	$63
10642 2611                        63            .byte	$63
10643 2612                        63            .byte	$63
10644 2613                        67            .byte	$67
10645 2614                        E7            .byte	$E7
10646 2615                        E6            .byte	$E6
10647 2616                        C0            .byte	$C0
10648 2617                        00            .byte	0
10649 2618                        00            .byte	0
10650 2619                        00            .byte	0
10651                                           ! 1235  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10652 261A                        00            .byte	0
10653 261B                        00            .byte	0
10654 261C                        00            .byte	0
10655 261D                        18            .byte	$18
10656 261E                        18            .byte	$18
10657 261F                        DB            .byte	$DB
10658 2620                        3C            .byte	$3C
10659 2621                        E7            .byte	$E7
10660 2622                        3C            .byte	$3C
10661 2623                        DB            .byte	$DB
10662 2624                        18            .byte	$18
10663 2625                        18            .byte	$18
10664 2626                        00            .byte	0
10665 2627                        00            .byte	0
10666 2628                        00            .byte	0
10667 2629                        00            .byte	0
10668                                           ! 1236  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10669 262A                        00            .byte	0
10670 262B                        80            .byte	$80
10671 262C                        C0            .byte	$C0
10672 262D                        E0            .byte	$E0
10673 262E                        F0            .byte	$F0
10674 262F                        F8            .byte	$F8
10675 2630                        FE            .byte	$FE
10676 2631                        F8            .byte	$F8
10677 2632                        F0            .byte	$F0
10678 2633                        E0            .byte	$E0
10679 2634                        C0            .byte	$C0
10680 2635                        80            .byte	$80
10681 2636                        00            .byte	0
10682 2637                        00            .byte	0
10683 2638                        00            .byte	0
10684 2639                        00            .byte	0
10685                                           ! 1237  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10686 263A                        00            .byte	0
10687 263B                        02            .byte	2
10688 263C                        06            .byte	6
10689 263D                        0E            .byte	$E
10690 263E                        1E            .byte	$1E
10691 263F                        3E            .byte	$3E
10692 2640                        FE            .byte	$FE
10693 2641                        3E            .byte	$3E
10694 2642                        1E            .byte	$1E
10695 2643                        0E            .byte	$E
10696 2644                        06            .byte	6
10697 2645                        02            .byte	2
10698 2646                        00            .byte	0
10699 2647                        00            .byte	0
10700 2648                        00            .byte	0
10701 2649                        00            .byte	0
10702                                           ! 1238  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
10703 264A                        00            .byte	0
10704 264B                        00            .byte	0
10705 264C                        18            .byte	$18
10706 264D                        3C            .byte	$3C
10707 264E                        7E            .byte	$7E
10708 264F                        18            .byte	$18
10709 2650                        18            .byte	$18
10710 2651                        18            .byte	$18
10711 2652                        7E            .byte	$7E
10712 2653                        3C            .byte	$3C
10713 2654                        18            .byte	$18
10714 2655                        00            .byte	0
10715 2656                        00            .byte	0
10716 2657                        00            .byte	0
10717 2658                        00            .byte	0
10718 2659                        00            .byte	0
10719                                           ! 1239  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
10720 265A                        00            .byte	0
10721 265B                        00            .byte	0
10722 265C                        66            .byte	$66
10723 265D                        66            .byte	$66
10724 265E                        66            .byte	$66
10725 265F                        66            .byte	$66
10726 2660                        66            .byte	$66
10727 2661                        66            .byte	$66
10728 2662                        66            .byte	$66
10729 2663                        00            .byte	0
10730 2664                        66            .byte	$66
10731 2665                        66            .byte	$66
10732 2666                        00            .byte	0
10733 2667                        00            .byte	0
10734 2668                        00            .byte	0
10735 2669                        00            .byte	0
10736                                           ! 1240  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
10737 266A                        00            .byte	0
10738 266B                        00            .byte	0
10739 266C                        7F            .byte	$7F
10740 266D                        DB            .byte	$DB
10741 266E                        DB            .byte	$DB
10742 266F                        DB            .byte	$DB
10743 2670                        7B            .byte	$7B
10744 2671                        1B            .byte	$1B
10745 2672                        1B            .byte	$1B
10746 2673                        1B            .byte	$1B
10747 2674                        1B            .byte	$1B
10748 2675                        1B            .byte	$1B
10749 2676                        00            .byte	0
10750 2677                        00            .byte	0
10751 2678                        00            .byte	0
10752 2679                        00            .byte	0
10753                                           ! 1241  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
10754 267A                        00            .byte	0
10755 267B                        7C            .byte	$7C
10756 267C                        C6            .byte	$C6
10757 267D                        60            .byte	$60
10758 267E                        38            .byte	$38
10759 267F                        6C            .byte	$6C
10760 2680                        C6            .byte	$C6
10761 2681                        C6            .byte	$C6
10762 2682                        6C            .byte	$6C
10763 2683                        38            .byte	$38
10764 2684                        0C            .byte	$C
10765 2685                        C6            .byte	$C6
10766 2686                        7C            .byte	$7C
10767 2687                        00            .byte	0
10768 2688                        00            .byte	0
10769 2689                        00            .byte	0
10770                                           ! 1242  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
10771 268A                        00            .byte	0
10772 268B                        00            .byte	0
10773 268C                        00            .byte	0
10774 268D                        00            .byte	0
10775 268E                        00            .byte	0
10776 268F                        00            .byte	0
10777 2690                        00            .byte	0
10778 2691                        00            .byte	0
10779 2692                        FE            .byte	$FE
10780 2693                        FE            .byte	$FE
10781 2694                        FE            .byte	$FE
10782 2695                        FE            .byte	$FE
10783 2696                        00            .byte	0
10784 2697                        00            .byte	0
10785 2698                        00            .byte	0
10786 2699                        00            .byte	0
10787                                           ! 1243  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
10788 269A                        00            .byte	0
10789 269B                        00            .byte	0
10790 269C                        18            .byte	$18
10791 269D                        3C            .byte	$3C
10792 269E                        7E            .byte	$7E
10793 269F                        18            .byte	$18
10794 26A0                        18            .byte	$18
10795 26A1                        18            .byte	$18
10796 26A2                        7E            .byte	$7E
10797 26A3                        3C            .byte	$3C
10798 26A4                        18            .byte	$18
10799 26A5                        7E            .byte	$7E
10800 26A6                        00            .byte	0
10801 26A7                        00            .byte	0
10802 26A8                        00            .byte	0
10803 26A9                        00            .byte	0
10804                                           ! 1244  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10805 26AA                        00            .byte	0
10806 26AB                        00            .byte	0
10807 26AC                        18            .byte	$18
10808 26AD                        3C            .byte	$3C
10809 26AE                        7E            .byte	$7E
10810 26AF                        18            .byte	$18
10811 26B0                        18            .byte	$18
10812 26B1                        18            .byte	$18
10813 26B2                        18            .byte	$18
10814 26B3                        18            .byte	$18
10815 26B4                        18            .byte	$18
10816 26B5                        18            .byte	$18
10817 26B6                        00            .byte	0
10818 26B7                        00            .byte	0
10819 26B8                        00            .byte	0
10820 26B9                        00            .byte	0
10821                                           ! 1245  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
10822 26BA                        00            .byte	0
10823 26BB                        00            .byte	0
10824 26BC                        18            .byte	$18
10825 26BD                        18            .byte	$18
10826 26BE                        18            .byte	$18
10827 26BF                        18            .byte	$18
10828 26C0                        18            .byte	$18
10829 26C1                        18            .byte	$18
10830 26C2                        18            .byte	$18
10831 26C3                        7E            .byte	$7E
10832 26C4                        3C            .byte	$3C
10833 26C5                        18            .byte	$18
10834 26C6                        00            .byte	0
10835 26C7                        00            .byte	0
10836 26C8                        00            .byte	0
10837 26C9                        00            .byte	0
10838                                           ! 1246  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10839 26CA                        00            .byte	0
10840 26CB                        00            .byte	0
10841 26CC                        00            .byte	0
10842 26CD                        00            .byte	0
10843 26CE                        00            .byte	0
10844 26CF                        18            .byte	$18
10845 26D0                        0C            .byte	$C
10846 26D1                        FE            .byte	$FE
10847 26D2                        0C            .byte	$C
10848 26D3                        18            .byte	$18
10849 26D4                        00            .byte	0
10850 26D5                        00            .byte	0
10851 26D6                        00            .byte	0
10852 26D7                        00            .byte	0
10853 26D8                        00            .byte	0
10854 26D9                        00            .byte	0
10855                                           ! 1247  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10856 26DA                        00            .byte	0
10857 26DB                        00            .byte	0
10858 26DC                        00            .byte	0
10859 26DD                        00            .byte	0
10860 26DE                        00            .byte	0
10861 26DF                        30            .byte	$30
10862 26E0                        60            .byte	$60
10863 26E1                        FE            .byte	$FE
10864 26E2                        60            .byte	$60
10865 26E3                        30            .byte	$30
10866 26E4                        00            .byte	0
10867 26E5                        00            .byte	0
10868 26E6                        00            .byte	0
10869 26E7                        00            .byte	0
10870 26E8                        00            .byte	0
10871 26E9                        00            .byte	0
10872                                           ! 1248  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10873 26EA                        00            .byte	0
10874 26EB                        00            .byte	0
10875 26EC                        00            .byte	0
10876 26ED                        00            .byte	0
10877 26EE                        00            .byte	0
10878 26EF                        00            .byte	0
10879 26F0                        C0            .byte	$C0
10880 26F1                        C0            .byte	$C0
10881 26F2                        C0            .byte	$C0
10882 26F3                        FE            .byte	$FE
10883 26F4                        00            .byte	0
10884 26F5                        00            .byte	0
10885 26F6                        00            .byte	0
10886 26F7                        00            .byte	0
10887 26F8                        00            .byte	0
10888 26F9                        00            .byte	0
10889                                           ! 1249  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10890 26FA                        00            .byte	0
10891 26FB                        00            .byte	0
10892 26FC                        00            .byte	0
10893 26FD                        00            .byte	0
10894 26FE                        00            .byte	0
10895 26FF                        24            .byte	$24
10896 2700                        66            .byte	$66
10897 2701                        FF            .byte	$FF
10898 2702                        66            .byte	$66
10899 2703                        24            .byte	$24
10900 2704                        00            .byte	0
10901 2705                        00            .byte	0
10902 2706                        00            .byte	0
10903 2707                        00            .byte	0
10904 2708                        00            .byte	0
10905 2709                        00            .byte	0
10906                                           ! 1250  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
10907 270A                        00            .byte	0
10908 270B                        00            .byte	0
10909 270C                        00            .byte	0
10910 270D                        00            .byte	0
10911 270E                        10            .byte	$10
10912 270F                        38            .byte	$38
10913 2710                        38            .byte	$38
10914 2711                        7C            .byte	$7C
10915 2712                        7C            .byte	$7C
10916 2713                        FE            .byte	$FE
10917 2714                        FE            .byte	$FE
10918 2715                        00            .byte	0
10919 2716                        00            .byte	0
10920 2717                        00            .byte	0
10921 2718                        00            .byte	0
10922 2719                        00            .byte	0
10923                                           ! 1251  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10924 271A                        00            .byte	0
10925 271B                        00            .byte	0
10926 271C                        00            .byte	0
10927 271D                        00            .byte	0
10928 271E                        FE            .byte	$FE
10929 271F                        FE            .byte	$FE
10930 2720                        7C            .byte	$7C
10931 2721                        7C            .byte	$7C
10932 2722                        38            .byte	$38
10933 2723                        38            .byte	$38
10934 2724                        10            .byte	$10
10935 2725                        00            .byte	0
10936 2726                        00            .byte	0
10937 2727                        00            .byte	0
10938 2728                        00            .byte	0
10939 2729                        00            .byte	0
10940                                           ! 1252  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10941 272A                        00            .byte	0
10942 272B                        00            .byte	0
10943 272C                        00            .byte	0
10944 272D                        00            .byte	0
10945 272E                        00            .byte	0
10946 272F                        00            .byte	0
10947 2730                        00            .byte	0
10948 2731                        00            .byte	0
10949 2732                        00            .byte	0
10950 2733                        00            .byte	0
10951                                           ! 1252  0x00, 0x00, 0x00, 0x00, 0x00,
10952 2734                        00            .byte	0
10953 2735                        00            .byte	0
10954 2736                        00            .byte	0
10955 2737                        00            .byte	0
10956 2738                        00            .byte	0
10957 2739                        00            .byte	0
10958                                           ! 1253  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10959 273A                        00            .byte	0
10960 273B                        00            .byte	0
10961 273C                        18            .byte	$18
10962 273D                        3C            .byte	$3C
10963 273E                        3C            .byte	$3C
10964 273F                        3C            .byte	$3C
10965 2740                        18            .byte	$18
10966 2741                        18            .byte	$18
10967 2742                        18            .byte	$18
10968 2743                        00            .byte	0
10969 2744                        18            .byte	$18
10970 2745                        18            .byte	$18
10971 2746                        00            .byte	0
10972 2747                        00            .byte	0
10973 2748                        00            .byte	0
10974 2749                        00            .byte	0
10975                                           ! 1254  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10976 274A                        00            .byte	0
10977 274B                        66            .byte	$66
10978 274C                        66            .byte	$66
10979 274D                        66            .byte	$66
10980 274E                        24            .byte	$24
10981 274F                        00            .byte	0
10982 2750                        00            .byte	0
10983 2751                        00            .byte	0
10984 2752                        00            .byte	0
10985 2753                        00            .byte	0
10986 2754                        00            .byte	0
10987 2755                        00            .byte	0
10988 2756                        00            .byte	0
10989 2757                        00            .byte	0
10990 2758                        00            .byte	0
10991 2759                        00            .byte	0
10992                                           ! 1255  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
10993 275A                        00            .byte	0
10994 275B                        00            .byte	0
10995 275C                        00            .byte	0
10996 275D                        6C            .byte	$6C
10997 275E                        6C            .byte	$6C
10998 275F                        FE            .byte	$FE
10999 2760                        6C            .byte	$6C
11000 2761                        6C            .byte	$6C
11001 2762                        6C            .byte	$6C
11002 2763                        FE            .byte	$FE
11003 2764                        6C            .byte	$6C
11004 2765                        6C            .byte	$6C
11005 2766                        00            .byte	0
11006 2767                        00            .byte	0
11007 2768                        00            .byte	0
11008 2769                        00            .byte	0
11009                                           ! 1256  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11010 276A                        18            .byte	$18
11011 276B                        18            .byte	$18
11012 276C                        7C            .byte	$7C
11013 276D                        C6            .byte	$C6
11014 276E                        C2            .byte	$C2
11015 276F                        C0            .byte	$C0
11016 2770                        7C            .byte	$7C
11017 2771                        06            .byte	6
11018 2772                        06            .byte	6
11019 2773                        86            .byte	$86
11020 2774                        C6            .byte	$C6
11021 2775                        7C            .byte	$7C
11022 2776                        18            .byte	$18
11023 2777                        18            .byte	$18
11024 2778                        00            .byte	0
11025 2779                        00            .byte	0
11026                                           ! 1257  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11027 277A                        00            .byte	0
11028 277B                        00            .byte	0
11029 277C                        00            .byte	0
11030 277D                        00            .byte	0
11031 277E                        C2            .byte	$C2
11032 277F                        C6            .byte	$C6
11033 2780                        0C            .byte	$C
11034 2781                        18            .byte	$18
11035 2782                        30            .byte	$30
11036 2783                        60            .byte	$60
11037 2784                        C6            .byte	$C6
11038 2785                        86            .byte	$86
11039 2786                        00            .byte	0
11040 2787                        00            .byte	0
11041 2788                        00            .byte	0
11042 2789                        00            .byte	0
11043                                           ! 1258  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11044 278A                        00            .byte	0
11045 278B                        00            .byte	0
11046 278C                        38            .byte	$38
11047 278D                        6C            .byte	$6C
11048 278E                        6C            .byte	$6C
11049 278F                        38            .byte	$38
11050 2790                        76            .byte	$76
11051 2791                        DC            .byte	$DC
11052 2792                        CC            .byte	$CC
11053 2793                        CC            .byte	$CC
11054 2794                        CC            .byte	$CC
11055 2795                        76            .byte	$76
11056 2796                        00            .byte	0
11057 2797                        00            .byte	0
11058 2798                        00            .byte	0
11059 2799                        00            .byte	0
11060                                           ! 1259  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11061 279A                        00            .byte	0
11062 279B                        30            .byte	$30
11063 279C                        30            .byte	$30
11064 279D                        30            .byte	$30
11065 279E                        60            .byte	$60
11066 279F                        00            .byte	0
11067 27A0                        00            .byte	0
11068 27A1                        00            .byte	0
11069 27A2                        00            .byte	0
11070 27A3                        00            .byte	0
11071 27A4                        00            .byte	0
11072 27A5                        00            .byte	0
11073 27A6                        00            .byte	0
11074 27A7                        00            .byte	0
11075 27A8                        00            .byte	0
11076 27A9                        00            .byte	0
11077                                           ! 1260  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11078 27AA                        00            .byte	0
11079 27AB                        00            .byte	0
11080 27AC                        0C            .byte	$C
11081 27AD                        18            .byte	$18
11082 27AE                        30            .byte	$30
11083 27AF                        30            .byte	$30
11084 27B0                        30            .byte	$30
11085 27B1                        30            .byte	$30
11086 27B2                        30            .byte	$30
11087 27B3                        30            .byte	$30
11088 27B4                        18            .byte	$18
11089 27B5                        0C            .byte	$C
11090 27B6                        00            .byte	0
11091 27B7                        00            .byte	0
11092 27B8                        00            .byte	0
11093 27B9                        00            .byte	0
11094                                           ! 1261  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11095 27BA                        00            .byte	0
11096 27BB                        00            .byte	0
11097 27BC                        30            .byte	$30
11098 27BD                        18            .byte	$18
11099 27BE                        0C            .byte	$C
11100 27BF                        0C            .byte	$C
11101 27C0                        0C            .byte	$C
11102 27C1                        0C            .byte	$C
11103 27C2                        0C            .byte	$C
11104 27C3                        0C            .byte	$C
11105 27C4                        18            .byte	$18
11106 27C5                        30            .byte	$30
11107 27C6                        00            .byte	0
11108 27C7                        00            .byte	0
11109 27C8                        00            .byte	0
11110 27C9                        00            .byte	0
11111                                           ! 1262  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11112 27CA                        00            .byte	0
11113 27CB                        00            .byte	0
11114 27CC                        00            .byte	0
11115 27CD                        00            .byte	0
11116 27CE                        00            .byte	0
11117 27CF                        66            .byte	$66
11118 27D0                        3C            .byte	$3C
11119 27D1                        FF            .byte	$FF
11120 27D2                        3C            .byte	$3C
11121 27D3                        66            .byte	$66
11122 27D4                        00            .byte	0
11123 27D5                        00            .byte	0
11124 27D6                        00            .byte	0
11125 27D7                        00            .byte	0
11126 27D8                        00            .byte	0
11127 27D9                        00            .byte	0
11128                                           ! 1263  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11129 27DA                        00            .byte	0
11130 27DB                        00            .byte	0
11131 27DC                        00            .byte	0
11132 27DD                        00            .byte	0
11133 27DE                        00            .byte	0
11134 27DF                        18            .byte	$18
11135 27E0                        18            .byte	$18
11136 27E1                        7E            .byte	$7E
11137 27E2                        18            .byte	$18
11138 27E3                        18            .byte	$18
11139 27E4                        00            .byte	0
11140 27E5                        00            .byte	0
11141 27E6                        00            .byte	0
11142 27E7                        00            .byte	0
11143 27E8                        00            .byte	0
11144 27E9                        00            .byte	0
11145                                           ! 1264  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11146 27EA                        00            .byte	0
11147 27EB                        00            .byte	0
11148 27EC                        00            .byte	0
11149 27ED                        00            .byte	0
11150 27EE                        00            .byte	0
11151 27EF                        00            .byte	0
11152 27F0                        00            .byte	0
11153 27F1                        00            .byte	0
11154 27F2                        00            .byte	0
11155 27F3                        18            .byte	$18
11156 27F4                        18            .byte	$18
11157 27F5                        18            .byte	$18
11158 27F6                        30            .byte	$30
11159 27F7                        00            .byte	0
11160 27F8                        00            .byte	0
11161 27F9                        00            .byte	0
11162                                           ! 1265  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11163 27FA                        00            .byte	0
11164 27FB                        00            .byte	0
11165 27FC                        00            .byte	0
11166 27FD                        00            .byte	0
11167 27FE                        00            .byte	0
11168 27FF                        00            .byte	0
11169 2800                        00            .byte	0
11170 2801                        FE            .byte	$FE
11171 2802                        00            .byte	0
11172 2803                        00            .byte	0
11173 2804                        00            .byte	0
11174 2805                        00            .byte	0
11175 2806                        00            .byte	0
11176 2807                        00            .byte	0
11177 2808                        00            .byte	0
11178 2809                        00            .byte	0
11179                                           ! 1266  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11180 280A                        00            .byte	0
11181 280B                        00            .byte	0
11182 280C                        00            .byte	0
11183 280D                        00            .byte	0
11184 280E                        00            .byte	0
11185 280F                        00            .byte	0
11186 2810                        00            .byte	0
11187 2811                        00            .byte	0
11188 2812                        00            .byte	0
11189 2813                        00            .byte	0
11190 2814                        18            .byte	$18
11191 2815                        18            .byte	$18
11192 2816                        00            .byte	0
11193 2817                        00            .byte	0
11194 2818                        00            .byte	0
11195 2819                        00            .byte	0
11196                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11197 281A                        00            .byte	0
11198 281B                        00            .byte	0
11199 281C                        00            .byte	0
11200 281D                        00            .byte	0
11201 281E                        02            .byte	2
11202 281F                        06            .byte	6
11203 2820                        0C            .byte	$C
11204 2821                        18            .byte	$18
11205 2822                        30            .byte	$30
11206 2823                        60            .byte	$60
11207 2824                        C0            .byte	$C0
11208 2825                        80            .byte	$80
11209 2826                        00            .byte	0
11210 2827                        00            .byte	0
11211 2828                        00            .byte	0
11212 2829                        00            .byte	0
11213                                           ! 1268  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11214 282A                        00            .byte	0
11215 282B                        00            .byte	0
11216 282C                        3C            .byte	$3C
11217 282D                        66            .byte	$66
11218 282E                        C3            .byte	$C3
11219 282F                        C3            .byte	$C3
11220 2830                        DB            .byte	$DB
11221 2831                        DB            .byte	$DB
11222 2832                        C3            .byte	$C3
11223 2833                        C3            .byte	$C3
11224 2834                        66            .byte	$66
11225 2835                        3C            .byte	$3C
11226 2836                        00            .byte	0
11227 2837                        00            .byte	0
11228 2838                        00            .byte	0
11229 2839                        00            .byte	0
11230                                           ! 1269  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11231 283A                        00            .byte	0
11232 283B                        00            .byte	0
11233 283C                        18            .byte	$18
11234 283D                        38            .byte	$38
11235 283E                        78            .byte	$78
11236 283F                        18            .byte	$18
11237 2840                        18            .byte	$18
11238 2841                        18            .byte	$18
11239 2842                        18            .byte	$18
11240 2843                        18            .byte	$18
11241 2844                        18            .byte	$18
11242 2845                        7E            .byte	$7E
11243 2846                        00            .byte	0
11244 2847                        00            .byte	0
11245 2848                        00            .byte	0
11246 2849                        00            .byte	0
11247                                           ! 1270  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11248 284A                        00            .byte	0
11249 284B                        00            .byte	0
11250 284C                        7C            .byte	$7C
11251 284D                        C6            .byte	$C6
11252 284E                        06            .byte	6
11253 284F                        0C            .byte	$C
11254 2850                        18            .byte	$18
11255 2851                        30            .byte	$30
11256 2852                        60            .byte	$60
11257 2853                        C0            .byte	$C0
11258 2854                        C6            .byte	$C6
11259 2855                        FE            .byte	$FE
11260 2856                        00            .byte	0
11261 2857                        00            .byte	0
11262 2858                        00            .byte	0
11263 2859                        00            .byte	0
11264                                           ! 1271  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11265 285A                        00            .byte	0
11266 285B                        00            .byte	0
11267 285C                        7C            .byte	$7C
11268 285D                        C6            .byte	$C6
11269 285E                        06            .byte	6
11270 285F                        06            .byte	6
11271 2860                        3C            .byte	$3C
11272 2861                        06            .byte	6
11273 2862                        06            .byte	6
11274 2863                        06            .byte	6
11275 2864                        C6            .byte	$C6
11276 2865                        7C            .byte	$7C
11277 2866                        00            .byte	0
11278 2867                        00            .byte	0
11279 2868                        00            .byte	0
11280 2869                        00            .byte	0
11281                                           ! 1272  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11282 286A                        00            .byte	0
11283 286B                        00            .byte	0
11284 286C                        0C            .byte	$C
11285 286D                        1C            .byte	$1C
11286 286E                        3C            .byte	$3C
11287 286F                        6C            .byte	$6C
11288 2870                        CC            .byte	$CC
11289 2871                        FE            .byte	$FE
11290 2872                        0C            .byte	$C
11291 2873                        0C            .byte	$C
11292 2874                        0C            .byte	$C
11293 2875                        1E            .byte	$1E
11294 2876                        00            .byte	0
11295 2877                        00            .byte	0
11296 2878                        00            .byte	0
11297 2879                        00            .byte	0
11298                                           ! 1273  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00
11299 287A                        00            .byte	0
11300 287B                        00            .byte	0
11301 287C                        FE            .byte	$FE
11302 287D                        C0            .byte	$C0
11303 287E                        C0            .byte	$C0
11304 287F                        C0            .byte	$C0
11305 2880                        FC            .byte	$FC
11306 2881                        06            .byte	6
11307 2882                        06            .byte	6
11308 2883                        06            .byte	6
11309 2884                        C6            .byte	$C6
11310 2885                        7C            .byte	$7C
11311                                           ! 1273 , 0x00, 0x00, 0x00,
11312 2886                        00            .byte	0
11313 2887                        00            .byte	0
11314 2888                        00            .byte	0
11315 2889                        00            .byte	0
11316                                           ! 1274  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11317 288A                        00            .byte	0
11318 288B                        00            .byte	0
11319 288C                        38            .byte	$38
11320 288D                        60            .byte	$60
11321 288E                        C0            .byte	$C0
11322 288F                        C0            .byte	$C0
11323 2890                        FC            .byte	$FC
11324 2891                        C6            .byte	$C6
11325 2892                        C6            .byte	$C6
11326 2893                        C6            .byte	$C6
11327 2894                        C6            .byte	$C6
11328 2895                        7C            .byte	$7C
11329 2896                        00            .byte	0
11330 2897                        00            .byte	0
11331 2898                        00            .byte	0
11332 2899                        00            .byte	0
11333                                           ! 1275  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11334 289A                        00            .byte	0
11335 289B                        00            .byte	0
11336 289C                        FE            .byte	$FE
11337 289D                        C6            .byte	$C6
11338 289E                        06            .byte	6
11339 289F                        06            .byte	6
11340 28A0                        0C            .byte	$C
11341 28A1                        18            .byte	$18
11342 28A2                        30            .byte	$30
11343 28A3                        30            .byte	$30
11344 28A4                        30            .byte	$30
11345 28A5                        30            .byte	$30
11346 28A6                        00            .byte	0
11347 28A7                        00            .byte	0
11348 28A8                        00            .byte	0
11349 28A9                        00            .byte	0
11350                                           ! 1276  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11351 28AA                        00            .byte	0
11352 28AB                        00            .byte	0
11353 28AC                        7C            .byte	$7C
11354 28AD                        C6            .byte	$C6
11355 28AE                        C6            .byte	$C6
11356 28AF                        C6            .byte	$C6
11357 28B0                        7C            .byte	$7C
11358 28B1                        C6            .byte	$C6
11359 28B2                        C6            .byte	$C6
11360 28B3                        C6            .byte	$C6
11361 28B4                        C6            .byte	$C6
11362 28B5                        7C            .byte	$7C
11363 28B6                        00            .byte	0
11364 28B7                        00            .byte	0
11365 28B8                        00            .byte	0
11366 28B9                        00            .byte	0
11367                                           ! 1277  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11368 28BA                        00            .byte	0
11369 28BB                        00            .byte	0
11370 28BC                        7C            .byte	$7C
11371 28BD                        C6            .byte	$C6
11372 28BE                        C6            .byte	$C6
11373 28BF                        C6            .byte	$C6
11374 28C0                        7E            .byte	$7E
11375 28C1                        06            .byte	6
11376 28C2                        06            .byte	6
11377 28C3                        06            .byte	6
11378 28C4                        0C            .byte	$C
11379 28C5                        78            .byte	$78
11380 28C6                        00            .byte	0
11381 28C7                        00            .byte	0
11382 28C8                        00            .byte	0
11383 28C9                        00            .byte	0
11384                                           ! 1278  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11385 28CA                        00            .byte	0
11386 28CB                        00            .byte	0
11387 28CC                        00            .byte	0
11388 28CD                        00            .byte	0
11389 28CE                        18            .byte	$18
11390 28CF                        18            .byte	$18
11391 28D0                        00            .byte	0
11392 28D1                        00            .byte	0
11393 28D2                        00            .byte	0
11394 28D3                        18            .byte	$18
11395 28D4                        18            .byte	$18
11396 28D5                        00            .byte	0
11397 28D6                        00            .byte	0
11398 28D7                        00            .byte	0
11399 28D8                        00            .byte	0
11400 28D9                        00            .byte	0
11401                                           ! 1279  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11402 28DA                        00            .byte	0
11403 28DB                        00            .byte	0
11404 28DC                        00            .byte	0
11405 28DD                        00            .byte	0
11406 28DE                        18            .byte	$18
11407 28DF                        18            .byte	$18
11408 28E0                        00            .byte	0
11409 28E1                        00            .byte	0
11410 28E2                        00            .byte	0
11411 28E3                        18            .byte	$18
11412 28E4                        18            .byte	$18
11413 28E5                        30            .byte	$30
11414 28E6                        00            .byte	0
11415 28E7                        00            .byte	0
11416 28E8                        00            .byte	0
11417 28E9                        00            .byte	0
11418                                           ! 1280  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11419 28EA                        00            .byte	0
11420 28EB                        00            .byte	0
11421 28EC                        00            .byte	0
11422 28ED                        06            .byte	6
11423 28EE                        0C            .byte	$C
11424 28EF                        18            .byte	$18
11425 28F0                        30            .byte	$30
11426 28F1                        60            .byte	$60
11427 28F2                        30            .byte	$30
11428 28F3                        18            .byte	$18
11429 28F4                        0C            .byte	$C
11430 28F5                        06            .byte	6
11431 28F6                        00            .byte	0
11432 28F7                        00            .byte	0
11433 28F8                        00            .byte	0
11434 28F9                        00            .byte	0
11435                                           ! 1281  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11436 28FA                        00            .byte	0
11437 28FB                        00            .byte	0
11438 28FC                        00            .byte	0
11439 28FD                        00            .byte	0
11440 28FE                        00            .byte	0
11441 28FF                        7E            .byte	$7E
11442 2900                        00            .byte	0
11443 2901                        00            .byte	0
11444 2902                        7E            .byte	$7E
11445 2903                        00            .byte	0
11446 2904                        00            .byte	0
11447 2905                        00            .byte	0
11448 2906                        00            .byte	0
11449 2907                        00            .byte	0
11450 2908                        00            .byte	0
11451 2909                        00            .byte	0
11452                                           ! 1282  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11453 290A                        00            .byte	0
11454 290B                        00            .byte	0
11455 290C                        00            .byte	0
11456 290D                        60            .byte	$60
11457 290E                        30            .byte	$30
11458 290F                        18            .byte	$18
11459 2910                        0C            .byte	$C
11460 2911                        06            .byte	6
11461 2912                        0C            .byte	$C
11462 2913                        18            .byte	$18
11463 2914                        30            .byte	$30
11464 2915                        60            .byte	$60
11465 2916                        00            .byte	0
11466 2917                        00            .byte	0
11467 2918                        00            .byte	0
11468 2919                        00            .byte	0
11469                                           ! 1283  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11470 291A                        00            .byte	0
11471 291B                        00            .byte	0
11472 291C                        7C            .byte	$7C
11473 291D                        C6            .byte	$C6
11474 291E                        C6            .byte	$C6
11475 291F                        0C            .byte	$C
11476 2920                        18            .byte	$18
11477 2921                        18            .byte	$18
11478 2922                        18            .byte	$18
11479 2923                        00            .byte	0
11480 2924                        18            .byte	$18
11481 2925                        18            .byte	$18
11482 2926                        00            .byte	0
11483 2927                        00            .byte	0
11484 2928                        00            .byte	0
11485 2929                        00            .byte	0
11486                                           ! 1284  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11487 292A                        00            .byte	0
11488 292B                        00            .byte	0
11489 292C                        00            .byte	0
11490 292D                        7C            .byte	$7C
11491 292E                        C6            .byte	$C6
11492 292F                        C6            .byte	$C6
11493 2930                        DE            .byte	$DE
11494 2931                        DE            .byte	$DE
11495 2932                        DE            .byte	$DE
11496 2933                        DC            .byte	$DC
11497 2934                        C0            .byte	$C0
11498 2935                        7C            .byte	$7C
11499 2936                        00            .byte	0
11500 2937                        00            .byte	0
11501 2938                        00            .byte	0
11502 2939                        00            .byte	0
11503                                           ! 1285  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11504 293A                        00            .byte	0
11505 293B                        00            .byte	0
11506 293C                        10            .byte	$10
11507 293D                        38            .byte	$38
11508 293E                        6C            .byte	$6C
11509 293F                        C6            .byte	$C6
11510 2940                        C6            .byte	$C6
11511 2941                        FE            .byte	$FE
11512 2942                        C6            .byte	$C6
11513 2943                        C6            .byte	$C6
11514 2944                        C6            .byte	$C6
11515 2945                        C6            .byte	$C6
11516 2946                        00            .byte	0
11517 2947                        00            .byte	0
11518 2948                        00            .byte	0
11519 2949                        00            .byte	0
11520                                           ! 1286  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11521 294A                        00            .byte	0
11522 294B                        00            .byte	0
11523 294C                        FC            .byte	$FC
11524 294D                        66            .byte	$66
11525 294E                        66            .byte	$66
11526 294F                        66            .byte	$66
11527 2950                        7C            .byte	$7C
11528 2951                        66            .byte	$66
11529 2952                        66            .byte	$66
11530 2953                        66            .byte	$66
11531 2954                        66            .byte	$66
11532 2955                        FC            .byte	$FC
11533 2956                        00            .byte	0
11534 2957                        00            .byte	0
11535 2958                        00            .byte	0
11536 2959                        00            .byte	0
11537                                           ! 1287  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11538 295A                        00            .byte	0
11539 295B                        00            .byte	0
11540 295C                        3C            .byte	$3C
11541 295D                        66            .byte	$66
11542 295E                        C2            .byte	$C2
11543 295F                        C0            .byte	$C0
11544 2960                        C0            .byte	$C0
11545 2961                        C0            .byte	$C0
11546 2962                        C0            .byte	$C0
11547 2963                        C2            .byte	$C2
11548 2964                        66            .byte	$66
11549 2965                        3C            .byte	$3C
11550 2966                        00            .byte	0
11551 2967                        00            .byte	0
11552 2968                        00            .byte	0
11553 2969                        00            .byte	0
11554                                           ! 1288  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11555 296A                        00            .byte	0
11556 296B                        00            .byte	0
11557 296C                        F8            .byte	$F8
11558 296D                        6C            .byte	$6C
11559 296E                        66            .byte	$66
11560 296F                        66            .byte	$66
11561 2970                        66            .byte	$66
11562 2971                        66            .byte	$66
11563 2972                        66            .byte	$66
11564 2973                        66            .byte	$66
11565 2974                        6C            .byte	$6C
11566 2975                        F8            .byte	$F8
11567 2976                        00            .byte	0
11568 2977                        00            .byte	0
11569 2978                        00            .byte	0
11570 2979                        00            .byte	0
11571                                           ! 1289  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11572 297A                        00            .byte	0
11573 297B                        00            .byte	0
11574 297C                        FE            .byte	$FE
11575 297D                        66            .byte	$66
11576 297E                        62            .byte	$62
11577 297F                        68            .byte	$68
11578 2980                        78            .byte	$78
11579 2981                        68            .byte	$68
11580 2982                        60            .byte	$60
11581 2983                        62            .byte	$62
11582 2984                        66            .byte	$66
11583 2985                        FE            .byte	$FE
11584 2986                        00            .byte	0
11585 2987                        00            .byte	0
11586 2988                        00            .byte	0
11587 2989                        00            .byte	0
11588                                           ! 1290  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11589 298A                        00            .byte	0
11590 298B                        00            .byte	0
11591 298C                        FE            .byte	$FE
11592 298D                        66            .byte	$66
11593 298E                        62            .byte	$62
11594 298F                        68            .byte	$68
11595 2990                        78            .byte	$78
11596 2991                        68            .byte	$68
11597 2992                        60            .byte	$60
11598 2993                        60            .byte	$60
11599 2994                        60            .byte	$60
11600 2995                        F0            .byte	$F0
11601 2996                        00            .byte	0
11602 2997                        00            .byte	0
11603 2998                        00            .byte	0
11604 2999                        00            .byte	0
11605                                           ! 1291  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11606 299A                        00            .byte	0
11607 299B                        00            .byte	0
11608 299C                        3C            .byte	$3C
11609 299D                        66            .byte	$66
11610 299E                        C2            .byte	$C2
11611 299F                        C0            .byte	$C0
11612 29A0                        C0            .byte	$C0
11613 29A1                        DE            .byte	$DE
11614 29A2                        C6            .byte	$C6
11615 29A3                        C6            .byte	$C6
11616 29A4                        66            .byte	$66
11617 29A5                        3A            .byte	$3A
11618 29A6                        00            .byte	0
11619 29A7                        00            .byte	0
11620 29A8                        00            .byte	0
11621 29A9                        00            .byte	0
11622                                           ! 1292  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11623 29AA                        00            .byte	0
11624 29AB                        00            .byte	0
11625 29AC                        C6            .byte	$C6
11626 29AD                        C6            .byte	$C6
11627 29AE                        C6            .byte	$C6
11628 29AF                        C6            .byte	$C6
11629 29B0                        FE            .byte	$FE
11630 29B1                        C6            .byte	$C6
11631 29B2                        C6            .byte	$C6
11632 29B3                        C6            .byte	$C6
11633 29B4                        C6            .byte	$C6
11634 29B5                        C6            .byte	$C6
11635 29B6                        00            .byte	0
11636 29B7                        00            .byte	0
11637 29B8                        00            .byte	0
11638 29B9                        00            .byte	0
11639                                           ! 1293  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11640 29BA                        00            .byte	0
11641 29BB                        00            .byte	0
11642 29BC                        3C            .byte	$3C
11643 29BD                        18            .byte	$18
11644 29BE                        18            .byte	$18
11645 29BF                        18            .byte	$18
11646 29C0                        18            .byte	$18
11647 29C1                        18            .byte	$18
11648 29C2                        18            .byte	$18
11649 29C3                        18            .byte	$18
11650 29C4                        18            .byte	$18
11651 29C5                        3C            .byte	$3C
11652 29C6                        00            .byte	0
11653 29C7                        00            .byte	0
11654 29C8                        00            .byte	0
11655 29C9                        00            .byte	0
11656                                           ! 1294  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x0
11657 29CA                        00            .byte	0
11658 29CB                        00            .byte	0
11659 29CC                        1E            .byte	$1E
11660 29CD                        0C            .byte	$C
11661 29CE                        0C            .byte	$C
11662 29CF                        0C            .byte	$C
11663 29D0                        0C            .byte	$C
11664 29D1                        0C            .byte	$C
11665 29D2                        CC            .byte	$CC
11666 29D3                        CC            .byte	$CC
11667 29D4                        CC            .byte	$CC
11668 29D5                        78            .byte	$78
11669 29D6                        00            .byte	0
11670 29D7                        00            .byte	0
11671                                           ! 1294 0, 0x00,
11672 29D8                        00            .byte	0
11673 29D9                        00            .byte	0
11674                                           ! 1295  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11675 29DA                        00            .byte	0
11676 29DB                        00            .byte	0
11677 29DC                        E6            .byte	$E6
11678 29DD                        66            .byte	$66
11679 29DE                        66            .byte	$66
11680 29DF                        6C            .byte	$6C
11681 29E0                        78            .byte	$78
11682 29E1                        78            .byte	$78
11683 29E2                        6C            .byte	$6C
11684 29E3                        66            .byte	$66
11685 29E4                        66            .byte	$66
11686 29E5                        E6            .byte	$E6
11687 29E6                        00            .byte	0
11688 29E7                        00            .byte	0
11689 29E8                        00            .byte	0
11690 29E9                        00            .byte	0
11691                                           ! 1296  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11692 29EA                        00            .byte	0
11693 29EB                        00            .byte	0
11694 29EC                        F0            .byte	$F0
11695 29ED                        60            .byte	$60
11696 29EE                        60            .byte	$60
11697 29EF                        60            .byte	$60
11698 29F0                        60            .byte	$60
11699 29F1                        60            .byte	$60
11700 29F2                        60            .byte	$60
11701 29F3                        62            .byte	$62
11702 29F4                        66            .byte	$66
11703 29F5                        FE            .byte	$FE
11704 29F6                        00            .byte	0
11705 29F7                        00            .byte	0
11706 29F8                        00            .byte	0
11707 29F9                        00            .byte	0
11708                                           ! 1297  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11709 29FA                        00            .byte	0
11710 29FB                        00            .byte	0
11711 29FC                        C3            .byte	$C3
11712 29FD                        E7            .byte	$E7
11713 29FE                        FF            .byte	$FF
11714 29FF                        FF            .byte	$FF
11715 2A00                        DB            .byte	$DB
11716 2A01                        C3            .byte	$C3
11717 2A02                        C3            .byte	$C3
11718 2A03                        C3            .byte	$C3
11719 2A04                        C3            .byte	$C3
11720 2A05                        C3            .byte	$C3
11721 2A06                        00            .byte	0
11722 2A07                        00            .byte	0
11723 2A08                        00            .byte	0
11724 2A09                        00            .byte	0
11725                                           ! 1298  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11726 2A0A                        00            .byte	0
11727 2A0B                        00            .byte	0
11728 2A0C                        C6            .byte	$C6
11729 2A0D                        E6            .byte	$E6
11730 2A0E                        F6            .byte	$F6
11731 2A0F                        FE            .byte	$FE
11732 2A10                        DE            .byte	$DE
11733 2A11                        CE            .byte	$CE
11734 2A12                        C6            .byte	$C6
11735 2A13                        C6            .byte	$C6
11736 2A14                        C6            .byte	$C6
11737 2A15                        C6            .byte	$C6
11738 2A16                        00            .byte	0
11739 2A17                        00            .byte	0
11740 2A18                        00            .byte	0
11741 2A19                        00            .byte	0
11742                                           ! 1299  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11743 2A1A                        00            .byte	0
11744 2A1B                        00            .byte	0
11745 2A1C                        7C            .byte	$7C
11746 2A1D                        C6            .byte	$C6
11747 2A1E                        C6            .byte	$C6
11748 2A1F                        C6            .byte	$C6
11749 2A20                        C6            .byte	$C6
11750 2A21                        C6            .byte	$C6
11751 2A22                        C6            .byte	$C6
11752 2A23                        C6            .byte	$C6
11753 2A24                        C6            .byte	$C6
11754 2A25                        7C            .byte	$7C
11755 2A26                        00            .byte	0
11756 2A27                        00            .byte	0
11757 2A28                        00            .byte	0
11758 2A29                        00            .byte	0
11759                                           ! 1300  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11760 2A2A                        00            .byte	0
11761 2A2B                        00            .byte	0
11762 2A2C                        FC            .byte	$FC
11763 2A2D                        66            .byte	$66
11764 2A2E                        66            .byte	$66
11765 2A2F                        66            .byte	$66
11766 2A30                        7C            .byte	$7C
11767 2A31                        60            .byte	$60
11768 2A32                        60            .byte	$60
11769 2A33                        60            .byte	$60
11770 2A34                        60            .byte	$60
11771 2A35                        F0            .byte	$F0
11772 2A36                        00            .byte	0
11773 2A37                        00            .byte	0
11774 2A38                        00            .byte	0
11775 2A39                        00            .byte	0
11776                                           ! 1301  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
11777 2A3A                        00            .byte	0
11778 2A3B                        00            .byte	0
11779 2A3C                        7C            .byte	$7C
11780 2A3D                        C6            .byte	$C6
11781 2A3E                        C6            .byte	$C6
11782 2A3F                        C6            .byte	$C6
11783 2A40                        C6            .byte	$C6
11784 2A41                        C6            .byte	$C6
11785 2A42                        C6            .byte	$C6
11786 2A43                        D6            .byte	$D6
11787 2A44                        DE            .byte	$DE
11788 2A45                        7C            .byte	$7C
11789 2A46                        0C            .byte	$C
11790 2A47                        0E            .byte	$E
11791 2A48                        00            .byte	0
11792 2A49                        00            .byte	0
11793                                           ! 1302  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11794 2A4A                        00            .byte	0
11795 2A4B                        00            .byte	0
11796 2A4C                        FC            .byte	$FC
11797 2A4D                        66            .byte	$66
11798 2A4E                        66            .byte	$66
11799 2A4F                        66            .byte	$66
11800 2A50                        7C            .byte	$7C
11801 2A51                        6C            .byte	$6C
11802 2A52                        66            .byte	$66
11803 2A53                        66            .byte	$66
11804 2A54                        66            .byte	$66
11805 2A55                        E6            .byte	$E6
11806 2A56                        00            .byte	0
11807 2A57                        00            .byte	0
11808 2A58                        00            .byte	0
11809 2A59                        00            .byte	0
11810                                           ! 1303  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11811 2A5A                        00            .byte	0
11812 2A5B                        00            .byte	0
11813 2A5C                        7C            .byte	$7C
11814 2A5D                        C6            .byte	$C6
11815 2A5E                        C6            .byte	$C6
11816 2A5F                        60            .byte	$60
11817 2A60                        38            .byte	$38
11818 2A61                        0C            .byte	$C
11819 2A62                        06            .byte	6
11820 2A63                        C6            .byte	$C6
11821 2A64                        C6            .byte	$C6
11822 2A65                        7C            .byte	$7C
11823 2A66                        00            .byte	0
11824 2A67                        00            .byte	0
11825 2A68                        00            .byte	0
11826 2A69                        00            .byte	0
11827                                           ! 1304  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11828 2A6A                        00            .byte	0
11829 2A6B                        00            .byte	0
11830 2A6C                        FF            .byte	$FF
11831 2A6D                        DB            .byte	$DB
11832 2A6E                        99            .byte	$99
11833 2A6F                        18            .byte	$18
11834 2A70                        18            .byte	$18
11835 2A71                        18            .byte	$18
11836 2A72                        18            .byte	$18
11837 2A73                        18            .byte	$18
11838 2A74                        18            .byte	$18
11839 2A75                        3C            .byte	$3C
11840 2A76                        00            .byte	0
11841 2A77                        00            .byte	0
11842 2A78                        00            .byte	0
11843 2A79                        00            .byte	0
11844                                           ! 1305  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11845 2A7A                        00            .byte	0
11846 2A7B                        00            .byte	0
11847 2A7C                        C6            .byte	$C6
11848 2A7D                        C6            .byte	$C6
11849 2A7E                        C6            .byte	$C6
11850 2A7F                        C6            .byte	$C6
11851 2A80                        C6            .byte	$C6
11852 2A81                        C6            .byte	$C6
11853 2A82                        C6            .byte	$C6
11854 2A83                        C6            .byte	$C6
11855 2A84                        C6            .byte	$C6
11856 2A85                        7C            .byte	$7C
11857 2A86                        00            .byte	0
11858 2A87                        00            .byte	0
11859 2A88                        00            .byte	0
11860 2A89                        00            .byte	0
11861                                           ! 1306  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11862 2A8A                        00            .byte	0
11863 2A8B                        00            .byte	0
11864 2A8C                        C3            .byte	$C3
11865 2A8D                        C3            .byte	$C3
11866 2A8E                        C3            .byte	$C3
11867 2A8F                        C3            .byte	$C3
11868 2A90                        C3            .byte	$C3
11869 2A91                        C3            .byte	$C3
11870 2A92                        C3            .byte	$C3
11871 2A93                        66            .byte	$66
11872 2A94                        3C            .byte	$3C
11873 2A95                        18            .byte	$18
11874 2A96                        00            .byte	0
11875 2A97                        00            .byte	0
11876 2A98                        00            .byte	0
11877 2A99                        00            .byte	0
11878                                           ! 1307  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11879 2A9A                        00            .byte	0
11880 2A9B                        00            .byte	0
11881 2A9C                        C3            .byte	$C3
11882 2A9D                        C3            .byte	$C3
11883 2A9E                        C3            .byte	$C3
11884 2A9F                        C3            .byte	$C3
11885 2AA0                        C3            .byte	$C3
11886 2AA1                        DB            .byte	$DB
11887 2AA2                        DB            .byte	$DB
11888 2AA3                        FF            .byte	$FF
11889 2AA4                        66            .byte	$66
11890 2AA5                        66            .byte	$66
11891 2AA6                        00            .byte	0
11892 2AA7                        00            .byte	0
11893 2AA8                        00            .byte	0
11894 2AA9                        00            .byte	0
11895                                           ! 1308  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11896 2AAA                        00            .byte	0
11897 2AAB                        00            .byte	0
11898 2AAC                        C3            .byte	$C3
11899 2AAD                        C3            .byte	$C3
11900 2AAE                        66            .byte	$66
11901 2AAF                        3C            .byte	$3C
11902 2AB0                        18            .byte	$18
11903 2AB1                        18            .byte	$18
11904 2AB2                        3C            .byte	$3C
11905 2AB3                        66            .byte	$66
11906 2AB4                        C3            .byte	$C3
11907 2AB5                        C3            .byte	$C3
11908 2AB6                        00            .byte	0
11909 2AB7                        00            .byte	0
11910 2AB8                        00            .byte	0
11911 2AB9                        00            .byte	0
11912                                           ! 1309  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11913 2ABA                        00            .byte	0
11914 2ABB                        00            .byte	0
11915 2ABC                        C3            .byte	$C3
11916 2ABD                        C3            .byte	$C3
11917 2ABE                        C3            .byte	$C3
11918 2ABF                        66            .byte	$66
11919 2AC0                        3C            .byte	$3C
11920 2AC1                        18            .byte	$18
11921 2AC2                        18            .byte	$18
11922 2AC3                        18            .byte	$18
11923 2AC4                        18            .byte	$18
11924 2AC5                        3C            .byte	$3C
11925 2AC6                        00            .byte	0
11926 2AC7                        00            .byte	0
11927 2AC8                        00            .byte	0
11928 2AC9                        00            .byte	0
11929                                           ! 1310  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
11930 2ACA                        00            .byte	0
11931 2ACB                        00            .byte	0
11932 2ACC                        FF            .byte	$FF
11933 2ACD                        C3            .byte	$C3
11934 2ACE                        86            .byte	$86
11935 2ACF                        0C            .byte	$C
11936 2AD0                        18            .byte	$18
11937 2AD1                        30            .byte	$30
11938 2AD2                        60            .byte	$60
11939 2AD3                        C1            .byte	$C1
11940 2AD4                        C3            .byte	$C3
11941 2AD5                        FF            .byte	$FF
11942 2AD6                        00            .byte	0
11943 2AD7                        00            .byte	0
11944 2AD8                        00            .byte	0
11945 2AD9                        00            .byte	0
11946                                           ! 1311  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
11947 2ADA                        00            .byte	0
11948 2ADB                        00            .byte	0
11949 2ADC                        3C            .byte	$3C
11950 2ADD                        30            .byte	$30
11951 2ADE                        30            .byte	$30
11952 2ADF                        30            .byte	$30
11953 2AE0                        30            .byte	$30
11954 2AE1                        30            .byte	$30
11955 2AE2                        30            .byte	$30
11956 2AE3                        30            .byte	$30
11957 2AE4                        30            .byte	$30
11958 2AE5                        3C            .byte	$3C
11959 2AE6                        00            .byte	0
11960 2AE7                        00            .byte	0
11961 2AE8                        00            .byte	0
11962 2AE9                        00            .byte	0
11963                                           ! 1312  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
11964 2AEA                        00            .byte	0
11965 2AEB                        00            .byte	0
11966 2AEC                        00            .byte	0
11967 2AED                        80            .byte	$80
11968 2AEE                        C0            .byte	$C0
11969 2AEF                        E0            .byte	$E0
11970 2AF0                        70            .byte	$70
11971 2AF1                        38            .byte	$38
11972 2AF2                        1C            .byte	$1C
11973 2AF3                        0E            .byte	$E
11974 2AF4                        06            .byte	6
11975 2AF5                        02            .byte	2
11976 2AF6                        00            .byte	0
11977 2AF7                        00            .byte	0
11978 2AF8                        00            .byte	0
11979 2AF9                        00            .byte	0
11980                                           ! 1313  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
11981 2AFA                        00            .byte	0
11982 2AFB                        00            .byte	0
11983 2AFC                        3C            .byte	$3C
11984 2AFD                        0C            .byte	$C
11985 2AFE                        0C            .byte	$C
11986 2AFF                        0C            .byte	$C
11987 2B00                        0C            .byte	$C
11988 2B01                        0C            .byte	$C
11989 2B02                        0C            .byte	$C
11990 2B03                        0C            .byte	$C
11991 2B04                        0C            .byte	$C
11992 2B05                        3C            .byte	$3C
11993 2B06                        00            .byte	0
11994 2B07                        00            .byte	0
11995 2B08                        00            .byte	0
11996 2B09                        00            .byte	0
11997                                           ! 1314  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11998 2B0A                        10            .byte	$10
11999 2B0B                        38            .byte	$38
12000 2B0C                        6C            .byte	$6C
12001 2B0D                        C6            .byte	$C6
12002 2B0E                        00            .byte	0
12003 2B0F                        00            .byte	0
12004 2B10                        00            .byte	0
12005 2B11                        00            .byte	0
12006 2B12                        00            .byte	0
12007 2B13                        00            .byte	0
12008 2B14                        00            .byte	0
12009 2B15                        00            .byte	0
12010 2B16                        00            .byte	0
12011 2B17                        00            .byte	0
12012 2B18                        00            .byte	0
12013 2B19                        00            .byte	0
12014                                           ! 1315  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12015 2B1A                        00            .byte	0
12016 2B1B                        00            .byte	0
12017 2B1C                        00            .byte	0
12018 2B1D                        00            .byte	0
12019 2B1E                        00            .byte	0
12020 2B1F                        00            .byte	0
12021 2B20                        00            .byte	0
12022 2B21                        00            .byte	0
12023 2B22                        00            .byte	0
12024 2B23                        00            .byte	0
12025 2B24                        00            .byte	0
12026 2B25                        00            .byte	0
12027 2B26                        00            .byte	0
12028 2B27                        FF            .byte	$FF
12029 2B28                        00            .byte	0
12030 2B29                        00            .byte	0
12031                                           ! 1316  0
12032                                           ! 1316 x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12033 2B2A                        30            .byte	$30
12034 2B2B                        30            .byte	$30
12035 2B2C                        18            .byte	$18
12036 2B2D                        00            .byte	0
12037 2B2E                        00            .byte	0
12038 2B2F                        00            .byte	0
12039 2B30                        00            .byte	0
12040 2B31                        00            .byte	0
12041 2B32                        00            .byte	0
12042 2B33                        00            .byte	0
12043 2B34                        00            .byte	0
12044 2B35                        00            .byte	0
12045 2B36                        00            .byte	0
12046 2B37                        00            .byte	0
12047 2B38                        00            .byte	0
12048 2B39                        00            .byte	0
12049                                           ! 1317  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12050 2B3A                        00            .byte	0
12051 2B3B                        00            .byte	0
12052 2B3C                        00            .byte	0
12053 2B3D                        00            .byte	0
12054 2B3E                        00            .byte	0
12055 2B3F                        78            .byte	$78
12056 2B40                        0C            .byte	$C
12057 2B41                        7C            .byte	$7C
12058 2B42                        CC            .byte	$CC
12059 2B43                        CC            .byte	$CC
12060 2B44                        CC            .byte	$CC
12061 2B45                        76            .byte	$76
12062 2B46                        00            .byte	0
12063 2B47                        00            .byte	0
12064 2B48                        00            .byte	0
12065 2B49                        00            .byte	0
12066                                           ! 1318  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12067 2B4A                        00            .byte	0
12068 2B4B                        00            .byte	0
12069 2B4C                        E0            .byte	$E0
12070 2B4D                        60            .byte	$60
12071 2B4E                        60            .byte	$60
12072 2B4F                        78            .byte	$78
12073 2B50                        6C            .byte	$6C
12074 2B51                        66            .byte	$66
12075 2B52                        66            .byte	$66
12076 2B53                        66            .byte	$66
12077 2B54                        66            .byte	$66
12078 2B55                        7C            .byte	$7C
12079 2B56                        00            .byte	0
12080 2B57                        00            .byte	0
12081 2B58                        00            .byte	0
12082 2B59                        00            .byte	0
12083                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12084 2B5A                        00            .byte	0
12085 2B5B                        00            .byte	0
12086 2B5C                        00            .byte	0
12087 2B5D                        00            .byte	0
12088 2B5E                        00            .byte	0
12089 2B5F                        7C            .byte	$7C
12090 2B60                        C6            .byte	$C6
12091 2B61                        C0            .byte	$C0
12092 2B62                        C0            .byte	$C0
12093 2B63                        C0            .byte	$C0
12094 2B64                        C6            .byte	$C6
12095 2B65                        7C            .byte	$7C
12096 2B66                        00            .byte	0
12097 2B67                        00            .byte	0
12098 2B68                        00            .byte	0
12099 2B69                        00            .byte	0
12100                                           ! 1320  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12101 2B6A                        00            .byte	0
12102 2B6B                        00            .byte	0
12103 2B6C                        1C            .byte	$1C
12104 2B6D                        0C            .byte	$C
12105 2B6E                        0C            .byte	$C
12106 2B6F                        3C            .byte	$3C
12107 2B70                        6C            .byte	$6C
12108 2B71                        CC            .byte	$CC
12109 2B72                        CC            .byte	$CC
12110 2B73                        CC            .byte	$CC
12111 2B74                        CC            .byte	$CC
12112 2B75                        76            .byte	$76
12113 2B76                        00            .byte	0
12114 2B77                        00            .byte	0
12115 2B78                        00            .byte	0
12116 2B79                        00            .byte	0
12117                                           ! 1321  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12118 2B7A                        00            .byte	0
12119 2B7B                        00            .byte	0
12120 2B7C                        00            .byte	0
12121 2B7D                        00            .byte	0
12122 2B7E                        00            .byte	0
12123 2B7F                        7C            .byte	$7C
12124 2B80                        C6            .byte	$C6
12125 2B81                        FE            .byte	$FE
12126 2B82                        C0            .byte	$C0
12127 2B83                        C0            .byte	$C0
12128 2B84                        C6            .byte	$C6
12129 2B85                        7C            .byte	$7C
12130 2B86                        00            .byte	0
12131 2B87                        00            .byte	0
12132 2B88                        00            .byte	0
12133 2B89                        00            .byte	0
12134                                           ! 1322  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12135 2B8A                        00            .byte	0
12136 2B8B                        00            .byte	0
12137 2B8C                        38            .byte	$38
12138 2B8D                        6C            .byte	$6C
12139 2B8E                        64            .byte	$64
12140 2B8F                        60            .byte	$60
12141 2B90                        F0            .byte	$F0
12142 2B91                        60            .byte	$60
12143 2B92                        60            .byte	$60
12144 2B93                        60            .byte	$60
12145 2B94                        60            .byte	$60
12146 2B95                        F0            .byte	$F0
12147 2B96                        00            .byte	0
12148 2B97                        00            .byte	0
12149 2B98                        00            .byte	0
12150 2B99                        00            .byte	0
12151                                           ! 1323  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12152 2B9A                        00            .byte	0
12153 2B9B                        00            .byte	0
12154 2B9C                        00            .byte	0
12155 2B9D                        00            .byte	0
12156 2B9E                        00            .byte	0
12157 2B9F                        76            .byte	$76
12158 2BA0                        CC            .byte	$CC
12159 2BA1                        CC            .byte	$CC
12160 2BA2                        CC            .byte	$CC
12161 2BA3                        CC            .byte	$CC
12162 2BA4                        CC            .byte	$CC
12163 2BA5                        7C            .byte	$7C
12164 2BA6                        0C            .byte	$C
12165 2BA7                        CC            .byte	$CC
12166 2BA8                        78            .byte	$78
12167 2BA9                        00            .byte	0
12168                                           ! 1324  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12169 2BAA                        00            .byte	0
12170 2BAB                        00            .byte	0
12171 2BAC                        E0            .byte	$E0
12172 2BAD                        60            .byte	$60
12173 2BAE                        60            .byte	$60
12174 2BAF                        6C            .byte	$6C
12175 2BB0                        76            .byte	$76
12176 2BB1                        66            .byte	$66
12177 2BB2                        66            .byte	$66
12178 2BB3                        66            .byte	$66
12179 2BB4                        66            .byte	$66
12180 2BB5                        E6            .byte	$E6
12181 2BB6                        00            .byte	0
12182 2BB7                        00            .byte	0
12183 2BB8                        00            .byte	0
12184 2BB9                        00            .byte	0
12185                                           ! 1325  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12186 2BBA                        00            .byte	0
12187 2BBB                        00            .byte	0
12188 2BBC                        18            .byte	$18
12189 2BBD                        18            .byte	$18
12190 2BBE                        00            .byte	0
12191 2BBF                        38            .byte	$38
12192 2BC0                        18            .byte	$18
12193 2BC1                        18            .byte	$18
12194 2BC2                        18            .byte	$18
12195 2BC3                        18            .byte	$18
12196 2BC4                        18            .byte	$18
12197 2BC5                        3C            .byte	$3C
12198 2BC6                        00            .byte	0
12199 2BC7                        00            .byte	0
12200 2BC8                        00            .byte	0
12201 2BC9                        00            .byte	0
12202                                           ! 1326  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12203 2BCA                        00            .byte	0
12204 2BCB                        00            .byte	0
12205 2BCC                        06            .byte	6
12206 2BCD                        06            .byte	6
12207 2BCE                        00            .byte	0
12208 2BCF                        0E            .byte	$E
12209 2BD0                        06            .byte	6
12210 2BD1                        06            .byte	6
12211 2BD2                        06            .byte	6
12212 2BD3                        06            .byte	6
12213 2BD4                        06            .byte	6
12214 2BD5                        06            .byte	6
12215 2BD6                        66            .byte	$66
12216 2BD7                        66            .byte	$66
12217 2BD8                        3C            .byte	$3C
12218 2BD9                        00            .byte	0
12219                                           ! 1327  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12220 2BDA                        00            .byte	0
12221 2BDB                        00            .byte	0
12222 2BDC                        E0            .byte	$E0
12223 2BDD                        60            .byte	$60
12224 2BDE                        60            .byte	$60
12225 2BDF                        66            .byte	$66
12226 2BE0                        6C            .byte	$6C
12227 2BE1                        78            .byte	$78
12228 2BE2                        78            .byte	$78
12229 2BE3                        6C            .byte	$6C
12230 2BE4                        66            .byte	$66
12231 2BE5                        E6            .byte	$E6
12232 2BE6                        00            .byte	0
12233 2BE7                        00            .byte	0
12234 2BE8                        00            .byte	0
12235 2BE9                        00            .byte	0
12236                                           ! 1328  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12237 2BEA                        00            .byte	0
12238 2BEB                        00            .byte	0
12239 2BEC                        38            .byte	$38
12240 2BED                        18            .byte	$18
12241 2BEE                        18            .byte	$18
12242 2BEF                        18            .byte	$18
12243 2BF0                        18            .byte	$18
12244 2BF1                        18            .byte	$18
12245 2BF2                        18            .byte	$18
12246 2BF3                        18            .byte	$18
12247 2BF4                        18            .byte	$18
12248 2BF5                        3C            .byte	$3C
12249 2BF6                        00            .byte	0
12250 2BF7                        00            .byte	0
12251 2BF8                        00            .byte	0
12252 2BF9                        00            .byte	0
12253                                           ! 1329  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12254 2BFA                        00            .byte	0
12255 2BFB                        00            .byte	0
12256 2BFC                        00            .byte	0
12257 2BFD                        00            .byte	0
12258 2BFE                        00            .byte	0
12259 2BFF                        E6            .byte	$E6
12260 2C00                        FF            .byte	$FF
12261 2C01                        DB            .byte	$DB
12262 2C02                        DB            .byte	$DB
12263 2C03                        DB            .byte	$DB
12264 2C04                        DB            .byte	$DB
12265 2C05                        DB            .byte	$DB
12266 2C06                        00            .byte	0
12267 2C07                        00            .byte	0
12268 2C08                        00            .byte	0
12269 2C09                        00            .byte	0
12270                                           ! 1330  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12271 2C0A                        00            .byte	0
12272 2C0B                        00            .byte	0
12273 2C0C                        00            .byte	0
12274 2C0D                        00            .byte	0
12275 2C0E                        00            .byte	0
12276 2C0F                        DC            .byte	$DC
12277 2C10                        66            .byte	$66
12278 2C11                        66            .byte	$66
12279 2C12                        66            .byte	$66
12280 2C13                        66            .byte	$66
12281 2C14                        66            .byte	$66
12282 2C15                        66            .byte	$66
12283 2C16                        00            .byte	0
12284 2C17                        00            .byte	0
12285 2C18                        00            .byte	0
12286 2C19                        00            .byte	0
12287                                           ! 1331  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12288 2C1A                        00            .byte	0
12289 2C1B                        00            .byte	0
12290 2C1C                        00            .byte	0
12291 2C1D                        00            .byte	0
12292 2C1E                        00            .byte	0
12293 2C1F                        7C            .byte	$7C
12294 2C20                        C6            .byte	$C6
12295 2C21                        C6            .byte	$C6
12296 2C22                        C6            .byte	$C6
12297 2C23                        C6            .byte	$C6
12298 2C24                        C6            .byte	$C6
12299 2C25                        7C            .byte	$7C
12300 2C26                        00            .byte	0
12301 2C27                        00            .byte	0
12302 2C28                        00            .byte	0
12303 2C29                        00            .byte	0
12304                                           ! 1332  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12305 2C2A                        00            .byte	0
12306 2C2B                        00            .byte	0
12307 2C2C                        00            .byte	0
12308 2C2D                        00            .byte	0
12309 2C2E                        00            .byte	0
12310 2C2F                        DC            .byte	$DC
12311 2C30                        66            .byte	$66
12312 2C31                        66            .byte	$66
12313 2C32                        66            .byte	$66
12314 2C33                        66            .byte	$66
12315 2C34                        66            .byte	$66
12316 2C35                        7C            .byte	$7C
12317 2C36                        60            .byte	$60
12318 2C37                        60            .byte	$60
12319 2C38                        F0            .byte	$F0
12320 2C39                        00            .byte	0
12321                                           ! 1333  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12322 2C3A                        00            .byte	0
12323 2C3B                        00            .byte	0
12324 2C3C                        00            .byte	0
12325 2C3D                        00            .byte	0
12326 2C3E                        00            .byte	0
12327 2C3F                        76            .byte	$76
12328 2C40                        CC            .byte	$CC
12329 2C41                        CC            .byte	$CC
12330 2C42                        CC            .byte	$CC
12331 2C43                        CC            .byte	$CC
12332 2C44                        CC            .byte	$CC
12333 2C45                        7C            .byte	$7C
12334 2C46                        0C            .byte	$C
12335 2C47                        0C            .byte	$C
12336 2C48                        1E            .byte	$1E
12337 2C49                        00            .byte	0
12338                                           ! 1334  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12339 2C4A                        00            .byte	0
12340 2C4B                        00            .byte	0
12341 2C4C                        00            .byte	0
12342 2C4D                        00            .byte	0
12343 2C4E                        00            .byte	0
12344 2C4F                        DC            .byte	$DC
12345 2C50                        76            .byte	$76
12346 2C51                        66            .byte	$66
12347 2C52                        60            .byte	$60
12348 2C53                        60            .byte	$60
12349 2C54                        60            .byte	$60
12350 2C55                        F0            .byte	$F0
12351 2C56                        00            .byte	0
12352 2C57                        00            .byte	0
12353 2C58                        00            .byte	0
12354 2C59                        00            .byte	0
12355                                           ! 1335  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12356 2C5A                        00            .byte	0
12357 2C5B                        00            .byte	0
12358 2C5C                        00            .byte	0
12359 2C5D                        00            .byte	0
12360 2C5E                        00            .byte	0
12361 2C5F                        7C            .byte	$7C
12362 2C60                        C6            .byte	$C6
12363 2C61                        60            .byte	$60
12364 2C62                        38            .byte	$38
12365 2C63                        0C            .byte	$C
12366 2C64                        C6            .byte	$C6
12367 2C65                        7C            .byte	$7C
12368 2C66                        00            .byte	0
12369 2C67                        00            .byte	0
12370 2C68                        00            .byte	0
12371 2C69                        00            .byte	0
12372                                           ! 1336  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12373 2C6A                        00            .byte	0
12374 2C6B                        00            .byte	0
12375 2C6C                        10            .byte	$10
12376 2C6D                        30            .byte	$30
12377 2C6E                        30            .byte	$30
12378 2C6F                        FC            .byte	$FC
12379 2C70                        30            .byte	$30
12380 2C71                        30            .byte	$30
12381 2C72                        30            .byte	$30
12382 2C73                        30            .byte	$30
12383 2C74                        36            .byte	$36
12384 2C75                        1C            .byte	$1C
12385 2C76                        00            .byte	0
12386 2C77                        00            .byte	0
12387 2C78                        00            .byte	0
12388 2C79                        00            .byte	0
12389                                           ! 1337  0x00, 0x00, 
12390 2C7A                        00            .byte	0
12391 2C7B                        00            .byte	0
12392                                           ! 1337 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12393 2C7C                        00            .byte	0
12394 2C7D                        00            .byte	0
12395 2C7E                        00            .byte	0
12396 2C7F                        CC            .byte	$CC
12397 2C80                        CC            .byte	$CC
12398 2C81                        CC            .byte	$CC
12399 2C82                        CC            .byte	$CC
12400 2C83                        CC            .byte	$CC
12401 2C84                        CC            .byte	$CC
12402 2C85                        76            .byte	$76
12403 2C86                        00            .byte	0
12404 2C87                        00            .byte	0
12405 2C88                        00            .byte	0
12406 2C89                        00            .byte	0
12407                                           ! 1338  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12408 2C8A                        00            .byte	0
12409 2C8B                        00            .byte	0
12410 2C8C                        00            .byte	0
12411 2C8D                        00            .byte	0
12412 2C8E                        00            .byte	0
12413 2C8F                        C3            .byte	$C3
12414 2C90                        C3            .byte	$C3
12415 2C91                        C3            .byte	$C3
12416 2C92                        C3            .byte	$C3
12417 2C93                        66            .byte	$66
12418 2C94                        3C            .byte	$3C
12419 2C95                        18            .byte	$18
12420 2C96                        00            .byte	0
12421 2C97                        00            .byte	0
12422 2C98                        00            .byte	0
12423 2C99                        00            .byte	0
12424                                           ! 1339  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12425 2C9A                        00            .byte	0
12426 2C9B                        00            .byte	0
12427 2C9C                        00            .byte	0
12428 2C9D                        00            .byte	0
12429 2C9E                        00            .byte	0
12430 2C9F                        C3            .byte	$C3
12431 2CA0                        C3            .byte	$C3
12432 2CA1                        C3            .byte	$C3
12433 2CA2                        DB            .byte	$DB
12434 2CA3                        DB            .byte	$DB
12435 2CA4                        FF            .byte	$FF
12436 2CA5                        66            .byte	$66
12437 2CA6                        00            .byte	0
12438 2CA7                        00            .byte	0
12439 2CA8                        00            .byte	0
12440 2CA9                        00            .byte	0
12441                                           ! 1340  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12442 2CAA                        00            .byte	0
12443 2CAB                        00            .byte	0
12444 2CAC                        00            .byte	0
12445 2CAD                        00            .byte	0
12446 2CAE                        00            .byte	0
12447 2CAF                        C3            .byte	$C3
12448 2CB0                        66            .byte	$66
12449 2CB1                        3C            .byte	$3C
12450 2CB2                        18            .byte	$18
12451 2CB3                        3C            .byte	$3C
12452 2CB4                        66            .byte	$66
12453 2CB5                        C3            .byte	$C3
12454 2CB6                        00            .byte	0
12455 2CB7                        00            .byte	0
12456 2CB8                        00            .byte	0
12457 2CB9                        00            .byte	0
12458                                           ! 1341  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12459 2CBA                        00            .byte	0
12460 2CBB                        00            .byte	0
12461 2CBC                        00            .byte	0
12462 2CBD                        00            .byte	0
12463 2CBE                        00            .byte	0
12464 2CBF                        C6            .byte	$C6
12465 2CC0                        C6            .byte	$C6
12466 2CC1                        C6            .byte	$C6
12467 2CC2                        C6            .byte	$C6
12468 2CC3                        C6            .byte	$C6
12469 2CC4                        C6            .byte	$C6
12470 2CC5                        7E            .byte	$7E
12471 2CC6                        06            .byte	6
12472 2CC7                        0C            .byte	$C
12473 2CC8                        F8            .byte	$F8
12474 2CC9                        00            .byte	0
12475                                           ! 1342  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12476 2CCA                        00            .byte	0
12477 2CCB                        00            .byte	0
12478 2CCC                        00            .byte	0
12479 2CCD                        00            .byte	0
12480 2CCE                        00            .byte	0
12481 2CCF                        FE            .byte	$FE
12482 2CD0                        CC            .byte	$CC
12483 2CD1                        18            .byte	$18
12484 2CD2                        30            .byte	$30
12485 2CD3                        60            .byte	$60
12486 2CD4                        C6            .byte	$C6
12487 2CD5                        FE            .byte	$FE
12488 2CD6                        00            .byte	0
12489 2CD7                        00            .byte	0
12490 2CD8                        00            .byte	0
12491 2CD9                        00            .byte	0
12492                                           ! 1343  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12493 2CDA                        00            .byte	0
12494 2CDB                        00            .byte	0
12495 2CDC                        0E            .byte	$E
12496 2CDD                        18            .byte	$18
12497 2CDE                        18            .byte	$18
12498 2CDF                        18            .byte	$18
12499 2CE0                        70            .byte	$70
12500 2CE1                        18            .byte	$18
12501 2CE2                        18            .byte	$18
12502 2CE3                        18            .byte	$18
12503 2CE4                        18            .byte	$18
12504 2CE5                        0E            .byte	$E
12505 2CE6                        00            .byte	0
12506 2CE7                        00            .byte	0
12507 2CE8                        00            .byte	0
12508 2CE9                        00            .byte	0
12509                                           ! 1344  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12510 2CEA                        00            .byte	0
12511 2CEB                        00            .byte	0
12512 2CEC                        18            .byte	$18
12513 2CED                        18            .byte	$18
12514 2CEE                        18            .byte	$18
12515 2CEF                        18            .byte	$18
12516 2CF0                        00            .byte	0
12517 2CF1                        18            .byte	$18
12518 2CF2                        18            .byte	$18
12519 2CF3                        18            .byte	$18
12520 2CF4                        18            .byte	$18
12521 2CF5                        18            .byte	$18
12522 2CF6                        00            .byte	0
12523 2CF7                        00            .byte	0
12524 2CF8                        00            .byte	0
12525 2CF9                        00            .byte	0
12526                                           ! 1345  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12527 2CFA                        00            .byte	0
12528 2CFB                        00            .byte	0
12529 2CFC                        70            .byte	$70
12530 2CFD                        18            .byte	$18
12531 2CFE                        18            .byte	$18
12532 2CFF                        18            .byte	$18
12533 2D00                        0E            .byte	$E
12534 2D01                        18            .byte	$18
12535 2D02                        18            .byte	$18
12536 2D03                        18            .byte	$18
12537 2D04                        18            .byte	$18
12538 2D05                        70            .byte	$70
12539 2D06                        00            .byte	0
12540 2D07                        00            .byte	0
12541 2D08                        00            .byte	0
12542 2D09                        00            .byte	0
12543                                           ! 1346  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12544 2D0A                        00            .byte	0
12545 2D0B                        00            .byte	0
12546 2D0C                        76            .byte	$76
12547 2D0D                        DC            .byte	$DC
12548 2D0E                        00            .byte	0
12549 2D0F                        00            .byte	0
12550 2D10                        00            .byte	0
12551 2D11                        00            .byte	0
12552 2D12                        00            .byte	0
12553 2D13                        00            .byte	0
12554 2D14                        00            .byte	0
12555 2D15                        00            .byte	0
12556 2D16                        00            .byte	0
12557 2D17                        00            .byte	0
12558 2D18                        00            .byte	0
12559 2D19                        00            .byte	0
12560                                           ! 1347  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12561 2D1A                        00            .byte	0
12562 2D1B                        00            .byte	0
12563 2D1C                        00            .byte	0
12564 2D1D                        00            .byte	0
12565 2D1E                        10            .byte	$10
12566 2D1F                        38            .byte	$38
12567 2D20                        6C            .byte	$6C
12568 2D21                        C6            .byte	$C6
12569 2D22                        C6            .byte	$C6
12570 2D23                        C6            .byte	$C6
12571 2D24                        FE            .byte	$FE
12572 2D25                        00            .byte	0
12573 2D26                        00            .byte	0
12574 2D27                        00            .byte	0
12575 2D28                        00            .byte	0
12576 2D29                        00            .byte	0
12577                                           ! 1348  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12578 2D2A                        00            .byte	0
12579 2D2B                        00            .byte	0
12580 2D2C                        3C            .byte	$3C
12581 2D2D                        66            .byte	$66
12582 2D2E                        C2            .byte	$C2
12583 2D2F                        C0            .byte	$C0
12584 2D30                        C0            .byte	$C0
12585 2D31                        C0            .byte	$C0
12586 2D32                        C2            .byte	$C2
12587 2D33                        66            .byte	$66
12588 2D34                        3C            .byte	$3C
12589 2D35                        0C            .byte	$C
12590 2D36                        06            .byte	6
12591 2D37                        7C            .byte	$7C
12592 2D38                        00            .byte	0
12593 2D39                        00            .byte	0
12594                                           ! 1349  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12595 2D3A                        00            .byte	0
12596 2D3B                        00            .byte	0
12597 2D3C                        CC            .byte	$CC
12598 2D3D                        00            .byte	0
12599 2D3E                        00            .byte	0
12600 2D3F                        CC            .byte	$CC
12601 2D40                        CC            .byte	$CC
12602 2D41                        CC            .byte	$CC
12603 2D42                        CC            .byte	$CC
12604 2D43                        CC            .byte	$CC
12605 2D44                        CC            .byte	$CC
12606 2D45                        76            .byte	$76
12607 2D46                        00            .byte	0
12608 2D47                        00            .byte	0
12609 2D48                        00            .byte	0
12610 2D49                        00            .byte	0
12611                                           ! 1350  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12612 2D4A                        00            .byte	0
12613 2D4B                        0C            .byte	$C
12614 2D4C                        18            .byte	$18
12615 2D4D                        30            .byte	$30
12616 2D4E                        00            .byte	0
12617 2D4F                        7C            .byte	$7C
12618 2D50                        C6            .byte	$C6
12619 2D51                        FE            .byte	$FE
12620 2D52                        C0            .byte	$C0
12621 2D53                        C0            .byte	$C0
12622 2D54                        C6            .byte	$C6
12623 2D55                        7C            .byte	$7C
12624 2D56                        00            .byte	0
12625 2D57                        00            .byte	0
12626 2D58                        00            .byte	0
12627 2D59                        00            .byte	0
12628                                           ! 1351  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12629 2D5A                        00            .byte	0
12630 2D5B                        10            .byte	$10
12631 2D5C                        38            .byte	$38
12632 2D5D                        6C            .byte	$6C
12633 2D5E                        00            .byte	0
12634 2D5F                        78            .byte	$78
12635 2D60                        0C            .byte	$C
12636 2D61                        7C            .byte	$7C
12637 2D62                        CC            .byte	$CC
12638 2D63                        CC            .byte	$CC
12639 2D64                        CC            .byte	$CC
12640 2D65                        76            .byte	$76
12641 2D66                        00            .byte	0
12642 2D67                        00            .byte	0
12643 2D68                        00            .byte	0
12644 2D69                        00            .byte	0
12645                                           ! 1352  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12646 2D6A                        00            .byte	0
12647 2D6B                        00            .byte	0
12648 2D6C                        CC            .byte	$CC
12649 2D6D                        00            .byte	0
12650 2D6E                        00            .byte	0
12651 2D6F                        78            .byte	$78
12652 2D70                        0C            .byte	$C
12653 2D71                        7C            .byte	$7C
12654 2D72                        CC            .byte	$CC
12655 2D73                        CC            .byte	$CC
12656 2D74                        CC            .byte	$CC
12657 2D75                        76            .byte	$76
12658 2D76                        00            .byte	0
12659 2D77                        00            .byte	0
12660 2D78                        00            .byte	0
12661 2D79                        00            .byte	0
12662                                           ! 1353  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12663 2D7A                        00            .byte	0
12664 2D7B                        60            .byte	$60
12665 2D7C                        30            .byte	$30
12666 2D7D                        18            .byte	$18
12667 2D7E                        00            .byte	0
12668 2D7F                        78            .byte	$78
12669 2D80                        0C            .byte	$C
12670 2D81                        7C            .byte	$7C
12671 2D82                        CC            .byte	$CC
12672 2D83                        CC            .byte	$CC
12673 2D84                        CC            .byte	$CC
12674 2D85                        76            .byte	$76
12675 2D86                        00            .byte	0
12676 2D87                        00            .byte	0
12677 2D88                        00            .byte	0
12678 2D89                        00            .byte	0
12679                                           ! 1354  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12680 2D8A                        00            .byte	0
12681 2D8B                        38            .byte	$38
12682 2D8C                        6C            .byte	$6C
12683 2D8D                        38            .byte	$38
12684 2D8E                        00            .byte	0
12685 2D8F                        78            .byte	$78
12686 2D90                        0C            .byte	$C
12687 2D91                        7C            .byte	$7C
12688 2D92                        CC            .byte	$CC
12689 2D93                        CC            .byte	$CC
12690 2D94                        CC            .byte	$CC
12691 2D95                        76            .byte	$76
12692 2D96                        00            .byte	0
12693 2D97                        00            .byte	0
12694 2D98                        00            .byte	0
12695 2D99                        00            .byte	0
12696                                           ! 1355  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12697 2D9A                        00            .byte	0
12698 2D9B                        00            .byte	0
12699 2D9C                        00            .byte	0
12700 2D9D                        00            .byte	0
12701 2D9E                        3C            .byte	$3C
12702 2D9F                        66            .byte	$66
12703 2DA0                        60            .byte	$60
12704 2DA1                        60            .byte	$60
12705 2DA2                        66            .byte	$66
12706 2DA3                        3C            .byte	$3C
12707 2DA4                        0C            .byte	$C
12708 2DA5                        06            .byte	6
12709 2DA6                        3C            .byte	$3C
12710 2DA7                        00            .byte	0
12711 2DA8                        00            .byte	0
12712 2DA9                        00            .byte	0
12713                                           ! 1356  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12714 2DAA                        00            .byte	0
12715 2DAB                        10            .byte	$10
12716 2DAC                        38            .byte	$38
12717 2DAD                        6C            .byte	$6C
12718 2DAE                        00            .byte	0
12719 2DAF                        7C            .byte	$7C
12720 2DB0                        C6            .byte	$C6
12721 2DB1                        FE            .byte	$FE
12722 2DB2                        C0            .byte	$C0
12723 2DB3                        C0            .byte	$C0
12724 2DB4                        C6            .byte	$C6
12725 2DB5                        7C            .byte	$7C
12726 2DB6                        00            .byte	0
12727 2DB7                        00            .byte	0
12728 2DB8                        00            .byte	0
12729 2DB9                        00            .byte	0
12730                                           ! 1357  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12731 2DBA                        00            .byte	0
12732 2DBB                        00            .byte	0
12733 2DBC                        C6            .byte	$C6
12734 2DBD                        00            .byte	0
12735 2DBE                        00            .byte	0
12736 2DBF                        7C            .byte	$7C
12737 2DC0                        C6            .byte	$C6
12738 2DC1                        FE            .byte	$FE
12739 2DC2                        C0            .byte	$C0
12740 2DC3                        C0            .byte	$C0
12741 2DC4                        C6            .byte	$C6
12742 2DC5                        7C            .byte	$7C
12743 2DC6                        00            .byte	0
12744 2DC7                        00            .byte	0
12745 2DC8                        00            .byte	0
12746 2DC9                        00            .byte	0
12747                                           ! 1358  0x00, 0x60, 0x30, 0x18,
12748 2DCA                        00            .byte	0
12749 2DCB                        60            .byte	$60
12750 2DCC                        30            .byte	$30
12751                                           ! 1358  0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12752 2DCD                        18            .byte	$18
12753 2DCE                        00            .byte	0
12754 2DCF                        7C            .byte	$7C
12755 2DD0                        C6            .byte	$C6
12756 2DD1                        FE            .byte	$FE
12757 2DD2                        C0            .byte	$C0
12758 2DD3                        C0            .byte	$C0
12759 2DD4                        C6            .byte	$C6
12760 2DD5                        7C            .byte	$7C
12761 2DD6                        00            .byte	0
12762 2DD7                        00            .byte	0
12763 2DD8                        00            .byte	0
12764 2DD9                        00            .byte	0
12765                                           ! 1359  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12766 2DDA                        00            .byte	0
12767 2DDB                        00            .byte	0
12768 2DDC                        66            .byte	$66
12769 2DDD                        00            .byte	0
12770 2DDE                        00            .byte	0
12771 2DDF                        38            .byte	$38
12772 2DE0                        18            .byte	$18
12773 2DE1                        18            .byte	$18
12774 2DE2                        18            .byte	$18
12775 2DE3                        18            .byte	$18
12776 2DE4                        18            .byte	$18
12777 2DE5                        3C            .byte	$3C
12778 2DE6                        00            .byte	0
12779 2DE7                        00            .byte	0
12780 2DE8                        00            .byte	0
12781 2DE9                        00            .byte	0
12782                                           ! 1360  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12783 2DEA                        00            .byte	0
12784 2DEB                        18            .byte	$18
12785 2DEC                        3C            .byte	$3C
12786 2DED                        66            .byte	$66
12787 2DEE                        00            .byte	0
12788 2DEF                        38            .byte	$38
12789 2DF0                        18            .byte	$18
12790 2DF1                        18            .byte	$18
12791 2DF2                        18            .byte	$18
12792 2DF3                        18            .byte	$18
12793 2DF4                        18            .byte	$18
12794 2DF5                        3C            .byte	$3C
12795 2DF6                        00            .byte	0
12796 2DF7                        00            .byte	0
12797 2DF8                        00            .byte	0
12798 2DF9                        00            .byte	0
12799                                           ! 1361  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12800 2DFA                        00            .byte	0
12801 2DFB                        60            .byte	$60
12802 2DFC                        30            .byte	$30
12803 2DFD                        18            .byte	$18
12804 2DFE                        00            .byte	0
12805 2DFF                        38            .byte	$38
12806 2E00                        18            .byte	$18
12807 2E01                        18            .byte	$18
12808 2E02                        18            .byte	$18
12809 2E03                        18            .byte	$18
12810 2E04                        18            .byte	$18
12811 2E05                        3C            .byte	$3C
12812 2E06                        00            .byte	0
12813 2E07                        00            .byte	0
12814 2E08                        00            .byte	0
12815 2E09                        00            .byte	0
12816                                           ! 1362  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12817 2E0A                        00            .byte	0
12818 2E0B                        C6            .byte	$C6
12819 2E0C                        00            .byte	0
12820 2E0D                        10            .byte	$10
12821 2E0E                        38            .byte	$38
12822 2E0F                        6C            .byte	$6C
12823 2E10                        C6            .byte	$C6
12824 2E11                        C6            .byte	$C6
12825 2E12                        FE            .byte	$FE
12826 2E13                        C6            .byte	$C6
12827 2E14                        C6            .byte	$C6
12828 2E15                        C6            .byte	$C6
12829 2E16                        00            .byte	0
12830 2E17                        00            .byte	0
12831 2E18                        00            .byte	0
12832 2E19                        00            .byte	0
12833                                           ! 1363  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12834 2E1A                        38            .byte	$38
12835 2E1B                        6C            .byte	$6C
12836 2E1C                        38            .byte	$38
12837 2E1D                        00            .byte	0
12838 2E1E                        38            .byte	$38
12839 2E1F                        6C            .byte	$6C
12840 2E20                        C6            .byte	$C6
12841 2E21                        C6            .byte	$C6
12842 2E22                        FE            .byte	$FE
12843 2E23                        C6            .byte	$C6
12844 2E24                        C6            .byte	$C6
12845 2E25                        C6            .byte	$C6
12846 2E26                        00            .byte	0
12847 2E27                        00            .byte	0
12848 2E28                        00            .byte	0
12849 2E29                        00            .byte	0
12850                                           ! 1364  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
12851 2E2A                        18            .byte	$18
12852 2E2B                        30            .byte	$30
12853 2E2C                        60            .byte	$60
12854 2E2D                        00            .byte	0
12855 2E2E                        FE            .byte	$FE
12856 2E2F                        66            .byte	$66
12857 2E30                        60            .byte	$60
12858 2E31                        7C            .byte	$7C
12859 2E32                        60            .byte	$60
12860 2E33                        60            .byte	$60
12861 2E34                        66            .byte	$66
12862 2E35                        FE            .byte	$FE
12863 2E36                        00            .byte	0
12864 2E37                        00            .byte	0
12865 2E38                        00            .byte	0
12866 2E39                        00            .byte	0
12867                                           ! 1365  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
12868 2E3A                        00            .byte	0
12869 2E3B                        00            .byte	0
12870 2E3C                        00            .byte	0
12871 2E3D                        00            .byte	0
12872 2E3E                        00            .byte	0
12873 2E3F                        6E            .byte	$6E
12874 2E40                        3B            .byte	$3B
12875 2E41                        1B            .byte	$1B
12876 2E42                        7E            .byte	$7E
12877 2E43                        D8            .byte	$D8
12878 2E44                        DC            .byte	$DC
12879 2E45                        77            .byte	$77
12880 2E46                        00            .byte	0
12881 2E47                        00            .byte	0
12882 2E48                        00            .byte	0
12883 2E49                        00            .byte	0
12884                                           ! 1366  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
12885 2E4A                        00            .byte	0
12886 2E4B                        00            .byte	0
12887 2E4C                        3E            .byte	$3E
12888 2E4D                        6C            .byte	$6C
12889 2E4E                        CC            .byte	$CC
12890 2E4F                        CC            .byte	$CC
12891 2E50                        FE            .byte	$FE
12892 2E51                        CC            .byte	$CC
12893 2E52                        CC            .byte	$CC
12894 2E53                        CC            .byte	$CC
12895 2E54                        CC            .byte	$CC
12896 2E55                        CE            .byte	$CE
12897 2E56                        00            .byte	0
12898 2E57                        00            .byte	0
12899 2E58                        00            .byte	0
12900 2E59                        00            .byte	0
12901                                           ! 1367  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12902 2E5A                        00            .byte	0
12903 2E5B                        10            .byte	$10
12904 2E5C                        38            .byte	$38
12905 2E5D                        6C            .byte	$6C
12906 2E5E                        00            .byte	0
12907 2E5F                        7C            .byte	$7C
12908 2E60                        C6            .byte	$C6
12909 2E61                        C6            .byte	$C6
12910 2E62                        C6            .byte	$C6
12911 2E63                        C6            .byte	$C6
12912 2E64                        C6            .byte	$C6
12913 2E65                        7C            .byte	$7C
12914 2E66                        00            .byte	0
12915 2E67                        00            .byte	0
12916 2E68                        00            .byte	0
12917 2E69                        00            .byte	0
12918                                           ! 1368  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12919 2E6A                        00            .byte	0
12920 2E6B                        00            .byte	0
12921 2E6C                        C6            .byte	$C6
12922 2E6D                        00            .byte	0
12923 2E6E                        00            .byte	0
12924 2E6F                        7C            .byte	$7C
12925 2E70                        C6            .byte	$C6
12926 2E71                        C6            .byte	$C6
12927 2E72                        C6            .byte	$C6
12928 2E73                        C6            .byte	$C6
12929 2E74                        C6            .byte	$C6
12930 2E75                        7C            .byte	$7C
12931 2E76                        00            .byte	0
12932 2E77                        00            .byte	0
12933 2E78                        00            .byte	0
12934 2E79                        00            .byte	0
12935                                           ! 1369  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12936 2E7A                        00            .byte	0
12937 2E7B                        60            .byte	$60
12938 2E7C                        30            .byte	$30
12939 2E7D                        18            .byte	$18
12940 2E7E                        00            .byte	0
12941 2E7F                        7C            .byte	$7C
12942 2E80                        C6            .byte	$C6
12943 2E81                        C6            .byte	$C6
12944 2E82                        C6            .byte	$C6
12945 2E83                        C6            .byte	$C6
12946 2E84                        C6            .byte	$C6
12947 2E85                        7C            .byte	$7C
12948 2E86                        00            .byte	0
12949 2E87                        00            .byte	0
12950 2E88                        00            .byte	0
12951 2E89                        00            .byte	0
12952                                           ! 1370  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12953 2E8A                        00            .byte	0
12954 2E8B                        30            .byte	$30
12955 2E8C                        78            .byte	$78
12956 2E8D                        CC            .byte	$CC
12957 2E8E                        00            .byte	0
12958 2E8F                        CC            .byte	$CC
12959 2E90                        CC            .byte	$CC
12960 2E91                        CC            .byte	$CC
12961 2E92                        CC            .byte	$CC
12962 2E93                        CC            .byte	$CC
12963 2E94                        CC            .byte	$CC
12964 2E95                        76            .byte	$76
12965 2E96                        00            .byte	0
12966 2E97                        00            .byte	0
12967 2E98                        00            .byte	0
12968 2E99                        00            .byte	0
12969                                           ! 1371  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12970 2E9A                        00            .byte	0
12971 2E9B                        60            .byte	$60
12972 2E9C                        30            .byte	$30
12973 2E9D                        18            .byte	$18
12974 2E9E                        00            .byte	0
12975 2E9F                        CC            .byte	$CC
12976 2EA0                        CC            .byte	$CC
12977 2EA1                        CC            .byte	$CC
12978 2EA2                        CC            .byte	$CC
12979 2EA3                        CC            .byte	$CC
12980 2EA4                        CC            .byte	$CC
12981 2EA5                        76            .byte	$76
12982 2EA6                        00            .byte	0
12983 2EA7                        00            .byte	0
12984 2EA8                        00            .byte	0
12985 2EA9                        00            .byte	0
12986                                           ! 1372  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
12987 2EAA                        00            .byte	0
12988 2EAB                        00            .byte	0
12989 2EAC                        C6            .byte	$C6
12990 2EAD                        00            .byte	0
12991 2EAE                        00            .byte	0
12992 2EAF                        C6            .byte	$C6
12993 2EB0                        C6            .byte	$C6
12994 2EB1                        C6            .byte	$C6
12995 2EB2                        C6            .byte	$C6
12996 2EB3                        C6            .byte	$C6
12997 2EB4                        C6            .byte	$C6
12998 2EB5                        7E            .byte	$7E
12999 2EB6                        06            .byte	6
13000 2EB7                        0C            .byte	$C
13001 2EB8                        78            .byte	$78
13002 2EB9                        00            .byte	0
13003                                           ! 1373  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13004 2EBA                        00            .byte	0
13005 2EBB                        C6            .byte	$C6
13006 2EBC                        00            .byte	0
13007 2EBD                        7C            .byte	$7C
13008 2EBE                        C6            .byte	$C6
13009 2EBF                        C6            .byte	$C6
13010 2EC0                        C6            .byte	$C6
13011 2EC1                        C6            .byte	$C6
13012 2EC2                        C6            .byte	$C6
13013 2EC3                        C6            .byte	$C6
13014 2EC4                        C6            .byte	$C6
13015 2EC5                        7C            .byte	$7C
13016 2EC6                        00            .byte	0
13017 2EC7                        00            .byte	0
13018 2EC8                        00            .byte	0
13019 2EC9                        00            .byte	0
13020                                           ! 1374  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13021 2ECA                        00            .byte	0
13022 2ECB                        C6            .byte	$C6
13023 2ECC                        00            .byte	0
13024 2ECD                        C6            .byte	$C6
13025 2ECE                        C6            .byte	$C6
13026 2ECF                        C6            .byte	$C6
13027 2ED0                        C6            .byte	$C6
13028 2ED1                        C6            .byte	$C6
13029 2ED2                        C6            .byte	$C6
13030 2ED3                        C6            .byte	$C6
13031 2ED4                        C6            .byte	$C6
13032 2ED5                        7C            .byte	$7C
13033 2ED6                        00            .byte	0
13034 2ED7                        00            .byte	0
13035 2ED8                        00            .byte	0
13036 2ED9                        00            .byte	0
13037                                           ! 1375  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13038 2EDA                        00            .byte	0
13039 2EDB                        18            .byte	$18
13040 2EDC                        18            .byte	$18
13041 2EDD                        7E            .byte	$7E
13042 2EDE                        C3            .byte	$C3
13043 2EDF                        C0            .byte	$C0
13044 2EE0                        C0            .byte	$C0
13045 2EE1                        C0            .byte	$C0
13046 2EE2                        C3            .byte	$C3
13047 2EE3                        7E            .byte	$7E
13048 2EE4                        18            .byte	$18
13049 2EE5                        18            .byte	$18
13050 2EE6                        00            .byte	0
13051 2EE7                        00            .byte	0
13052 2EE8                        00            .byte	0
13053 2EE9                        00            .byte	0
13054                                           ! 1376  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13055 2EEA                        00            .byte	0
13056 2EEB                        38            .byte	$38
13057 2EEC                        6C            .byte	$6C
13058 2EED                        64            .byte	$64
13059 2EEE                        60            .byte	$60
13060 2EEF                        F0            .byte	$F0
13061 2EF0                        60            .byte	$60
13062 2EF1                        60            .byte	$60
13063 2EF2                        60            .byte	$60
13064 2EF3                        60            .byte	$60
13065 2EF4                        E6            .byte	$E6
13066 2EF5                        FC            .byte	$FC
13067 2EF6                        00            .byte	0
13068 2EF7                        00            .byte	0
13069 2EF8                        00            .byte	0
13070 2EF9                        00            .byte	0
13071                                           ! 1377  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13072 2EFA                        00            .byte	0
13073 2EFB                        00            .byte	0
13074 2EFC                        C3            .byte	$C3
13075 2EFD                        66            .byte	$66
13076 2EFE                        3C            .byte	$3C
13077 2EFF                        18            .byte	$18
13078 2F00                        FF            .byte	$FF
13079 2F01                        18            .byte	$18
13080 2F02                        FF            .byte	$FF
13081 2F03                        18            .byte	$18
13082 2F04                        18            .byte	$18
13083 2F05                        18            .byte	$18
13084 2F06                        00            .byte	0
13085 2F07                        00            .byte	0
13086 2F08                        00            .byte	0
13087 2F09                        00            .byte	0
13088                                           ! 1378  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13089 2F0A                        00            .byte	0
13090 2F0B                        FC            .byte	$FC
13091 2F0C                        66            .byte	$66
13092 2F0D                        66            .byte	$66
13093 2F0E                        7C            .byte	$7C
13094 2F0F                        62            .byte	$62
13095 2F10                        66            .byte	$66
13096 2F11                        6F            .byte	$6F
13097 2F12                        66            .byte	$66
13098 2F13                        66            .byte	$66
13099 2F14                        66            .byte	$66
13100 2F15                        F3            .byte	$F3
13101 2F16                        00            .byte	0
13102 2F17                        00            .byte	0
13103 2F18                        00            .byte	0
13104 2F19                        00            .byte	0
13105                                           ! 1379  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18
13106 2F1A                        00            .byte	0
13107 2F1B                        0E            .byte	$E
13108 2F1C                        1B            .byte	$1B
13109 2F1D                        18            .byte	$18
13110 2F1E                        18            .byte	$18
13111                                           ! 1379 , 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13112 2F1F                        18            .byte	$18
13113 2F20                        7E            .byte	$7E
13114 2F21                        18            .byte	$18
13115 2F22                        18            .byte	$18
13116 2F23                        18            .byte	$18
13117 2F24                        18            .byte	$18
13118 2F25                        18            .byte	$18
13119 2F26                        D8            .byte	$D8
13120 2F27                        70            .byte	$70
13121 2F28                        00            .byte	0
13122 2F29                        00            .byte	0
13123                                           ! 1380  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13124 2F2A                        00            .byte	0
13125 2F2B                        18            .byte	$18
13126 2F2C                        30            .byte	$30
13127 2F2D                        60            .byte	$60
13128 2F2E                        00            .byte	0
13129 2F2F                        78            .byte	$78
13130 2F30                        0C            .byte	$C
13131 2F31                        7C            .byte	$7C
13132 2F32                        CC            .byte	$CC
13133 2F33                        CC            .byte	$CC
13134 2F34                        CC            .byte	$CC
13135 2F35                        76            .byte	$76
13136 2F36                        00            .byte	0
13137 2F37                        00            .byte	0
13138 2F38                        00            .byte	0
13139 2F39                        00            .byte	0
13140                                           ! 1381  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13141 2F3A                        00            .byte	0
13142 2F3B                        0C            .byte	$C
13143 2F3C                        18            .byte	$18
13144 2F3D                        30            .byte	$30
13145 2F3E                        00            .byte	0
13146 2F3F                        38            .byte	$38
13147 2F40                        18            .byte	$18
13148 2F41                        18            .byte	$18
13149 2F42                        18            .byte	$18
13150 2F43                        18            .byte	$18
13151 2F44                        18            .byte	$18
13152 2F45                        3C            .byte	$3C
13153 2F46                        00            .byte	0
13154 2F47                        00            .byte	0
13155 2F48                        00            .byte	0
13156 2F49                        00            .byte	0
13157                                           ! 1382  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13158 2F4A                        00            .byte	0
13159 2F4B                        18            .byte	$18
13160 2F4C                        30            .byte	$30
13161 2F4D                        60            .byte	$60
13162 2F4E                        00            .byte	0
13163 2F4F                        7C            .byte	$7C
13164 2F50                        C6            .byte	$C6
13165 2F51                        C6            .byte	$C6
13166 2F52                        C6            .byte	$C6
13167 2F53                        C6            .byte	$C6
13168 2F54                        C6            .byte	$C6
13169 2F55                        7C            .byte	$7C
13170 2F56                        00            .byte	0
13171 2F57                        00            .byte	0
13172 2F58                        00            .byte	0
13173 2F59                        00            .byte	0
13174                                           ! 1383  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13175 2F5A                        00            .byte	0
13176 2F5B                        18            .byte	$18
13177 2F5C                        30            .byte	$30
13178 2F5D                        60            .byte	$60
13179 2F5E                        00            .byte	0
13180 2F5F                        CC            .byte	$CC
13181 2F60                        CC            .byte	$CC
13182 2F61                        CC            .byte	$CC
13183 2F62                        CC            .byte	$CC
13184 2F63                        CC            .byte	$CC
13185 2F64                        CC            .byte	$CC
13186 2F65                        76            .byte	$76
13187 2F66                        00            .byte	0
13188 2F67                        00            .byte	0
13189 2F68                        00            .byte	0
13190 2F69                        00            .byte	0
13191                                           ! 1384  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13192 2F6A                        00            .byte	0
13193 2F6B                        00            .byte	0
13194 2F6C                        76            .byte	$76
13195 2F6D                        DC            .byte	$DC
13196 2F6E                        00            .byte	0
13197 2F6F                        DC            .byte	$DC
13198 2F70                        66            .byte	$66
13199 2F71                        66            .byte	$66
13200 2F72                        66            .byte	$66
13201 2F73                        66            .byte	$66
13202 2F74                        66            .byte	$66
13203 2F75                        66            .byte	$66
13204 2F76                        00            .byte	0
13205 2F77                        00            .byte	0
13206 2F78                        00            .byte	0
13207 2F79                        00            .byte	0
13208                                           ! 1385  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13209 2F7A                        76            .byte	$76
13210 2F7B                        DC            .byte	$DC
13211 2F7C                        00            .byte	0
13212 2F7D                        C6            .byte	$C6
13213 2F7E                        E6            .byte	$E6
13214 2F7F                        F6            .byte	$F6
13215 2F80                        FE            .byte	$FE
13216 2F81                        DE            .byte	$DE
13217 2F82                        CE            .byte	$CE
13218 2F83                        C6            .byte	$C6
13219 2F84                        C6            .byte	$C6
13220 2F85                        C6            .byte	$C6
13221 2F86                        00            .byte	0
13222 2F87                        00            .byte	0
13223 2F88                        00            .byte	0
13224 2F89                        00            .byte	0
13225                                           ! 1386  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13226 2F8A                        00            .byte	0
13227 2F8B                        3C            .byte	$3C
13228 2F8C                        6C            .byte	$6C
13229 2F8D                        6C            .byte	$6C
13230 2F8E                        3E            .byte	$3E
13231 2F8F                        00            .byte	0
13232 2F90                        7E            .byte	$7E
13233 2F91                        00            .byte	0
13234 2F92                        00            .byte	0
13235 2F93                        00            .byte	0
13236 2F94                        00            .byte	0
13237 2F95                        00            .byte	0
13238 2F96                        00            .byte	0
13239 2F97                        00            .byte	0
13240 2F98                        00            .byte	0
13241 2F99                        00            .byte	0
13242                                           ! 1387  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13243 2F9A                        00            .byte	0
13244 2F9B                        38            .byte	$38
13245 2F9C                        6C            .byte	$6C
13246 2F9D                        6C            .byte	$6C
13247 2F9E                        38            .byte	$38
13248 2F9F                        00            .byte	0
13249 2FA0                        7C            .byte	$7C
13250 2FA1                        00            .byte	0
13251 2FA2                        00            .byte	0
13252 2FA3                        00            .byte	0
13253 2FA4                        00            .byte	0
13254 2FA5                        00            .byte	0
13255 2FA6                        00            .byte	0
13256 2FA7                        00            .byte	0
13257 2FA8                        00            .byte	0
13258 2FA9                        00            .byte	0
13259                                           ! 1388  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13260 2FAA                        00            .byte	0
13261 2FAB                        00            .byte	0
13262 2FAC                        30            .byte	$30
13263 2FAD                        30            .byte	$30
13264 2FAE                        00            .byte	0
13265 2FAF                        30            .byte	$30
13266 2FB0                        30            .byte	$30
13267 2FB1                        60            .byte	$60
13268 2FB2                        C0            .byte	$C0
13269 2FB3                        C6            .byte	$C6
13270 2FB4                        C6            .byte	$C6
13271 2FB5                        7C            .byte	$7C
13272 2FB6                        00            .byte	0
13273 2FB7                        00            .byte	0
13274 2FB8                        00            .byte	0
13275 2FB9                        00            .byte	0
13276                                           ! 1389  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13277 2FBA                        00            .byte	0
13278 2FBB                        00            .byte	0
13279 2FBC                        00            .byte	0
13280 2FBD                        00            .byte	0
13281 2FBE                        00            .byte	0
13282 2FBF                        00            .byte	0
13283 2FC0                        FE            .byte	$FE
13284 2FC1                        C0            .byte	$C0
13285 2FC2                        C0            .byte	$C0
13286 2FC3                        C0            .byte	$C0
13287 2FC4                        C0            .byte	$C0
13288 2FC5                        00            .byte	0
13289 2FC6                        00            .byte	0
13290 2FC7                        00            .byte	0
13291 2FC8                        00            .byte	0
13292 2FC9                        00            .byte	0
13293                                           ! 1390  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13294 2FCA                        00            .byte	0
13295 2FCB                        00            .byte	0
13296 2FCC                        00            .byte	0
13297 2FCD                        00            .byte	0
13298 2FCE                        00            .byte	0
13299 2FCF                        00            .byte	0
13300 2FD0                        FE            .byte	$FE
13301 2FD1                        06            .byte	6
13302 2FD2                        06            .byte	6
13303 2FD3                        06            .byte	6
13304 2FD4                        06            .byte	6
13305 2FD5                        00            .byte	0
13306 2FD6                        00            .byte	0
13307 2FD7                        00            .byte	0
13308 2FD8                        00            .byte	0
13309 2FD9                        00            .byte	0
13310                                           ! 1391  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13311 2FDA                        00            .byte	0
13312 2FDB                        C0            .byte	$C0
13313 2FDC                        C0            .byte	$C0
13314 2FDD                        C2            .byte	$C2
13315 2FDE                        C6            .byte	$C6
13316 2FDF                        CC            .byte	$CC
13317 2FE0                        18            .byte	$18
13318 2FE1                        30            .byte	$30
13319 2FE2                        60            .byte	$60
13320 2FE3                        CE            .byte	$CE
13321 2FE4                        9B            .byte	$9B
13322 2FE5                        06            .byte	6
13323 2FE6                        0C            .byte	$C
13324 2FE7                        1F            .byte	$1F
13325 2FE8                        00            .byte	0
13326 2FE9                        00            .byte	0
13327                                           ! 1392  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13328 2FEA                        00            .byte	0
13329 2FEB                        C0            .byte	$C0
13330 2FEC                        C0            .byte	$C0
13331 2FED                        C2            .byte	$C2
13332 2FEE                        C6            .byte	$C6
13333 2FEF                        CC            .byte	$CC
13334 2FF0                        18            .byte	$18
13335 2FF1                        30            .byte	$30
13336 2FF2                        66            .byte	$66
13337 2FF3                        CE            .byte	$CE
13338 2FF4                        96            .byte	$96
13339 2FF5                        3E            .byte	$3E
13340 2FF6                        06            .byte	6
13341 2FF7                        06            .byte	6
13342 2FF8                        00            .byte	0
13343 2FF9                        00            .byte	0
13344                                           ! 1393  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13345 2FFA                        00            .byte	0
13346 2FFB                        00            .byte	0
13347 2FFC                        18            .byte	$18
13348 2FFD                        18            .byte	$18
13349 2FFE                        00            .byte	0
13350 2FFF                        18            .byte	$18
13351 3000                        18            .byte	$18
13352 3001                        18            .byte	$18
13353 3002                        3C            .byte	$3C
13354 3003                        3C            .byte	$3C
13355 3004                        3C            .byte	$3C
13356 3005                        18            .byte	$18
13357 3006                        00            .byte	0
13358 3007                        00            .byte	0
13359 3008                        00            .byte	0
13360 3009                        00            .byte	0
13361                                           ! 1394  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13362 300A                        00            .byte	0
13363 300B                        00            .byte	0
13364 300C                        00            .byte	0
13365 300D                        00            .byte	0
13366 300E                        00            .byte	0
13367 300F                        36            .byte	$36
13368 3010                        6C            .byte	$6C
13369 3011                        D8            .byte	$D8
13370 3012                        6C            .byte	$6C
13371 3013                        36            .byte	$36
13372 3014                        00            .byte	0
13373 3015                        00            .byte	0
13374 3016                        00            .byte	0
13375 3017                        00            .byte	0
13376 3018                        00            .byte	0
13377 3019                        00            .byte	0
13378                                           ! 1395  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13379 301A                        00            .byte	0
13380 301B                        00            .byte	0
13381 301C                        00            .byte	0
13382 301D                        00            .byte	0
13383 301E                        00            .byte	0
13384 301F                        D8            .byte	$D8
13385 3020                        6C            .byte	$6C
13386 3021                        36            .byte	$36
13387 3022                        6C            .byte	$6C
13388 3023                        D8            .byte	$D8
13389 3024                        00            .byte	0
13390 3025                        00            .byte	0
13391 3026                        00            .byte	0
13392 3027                        00            .byte	0
13393 3028                        00            .byte	0
13394 3029                        00            .byte	0
13395                                           ! 1396  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13396 302A                        11            .byte	$11
13397 302B                        44            .byte	$44
13398 302C                        11            .byte	$11
13399 302D                        44            .byte	$44
13400 302E                        11            .byte	$11
13401 302F                        44            .byte	$44
13402 3030                        11            .byte	$11
13403 3031                        44            .byte	$44
13404 3032                        11            .byte	$11
13405 3033                        44            .byte	$44
13406 3034                        11            .byte	$11
13407 3035                        44            .byte	$44
13408 3036                        11            .byte	$11
13409 3037                        44            .byte	$44
13410 3038                        11            .byte	$11
13411 3039                        44            .byte	$44
13412                                           ! 1397  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13413 303A                        55            .byte	$55
13414 303B                        AA            .byte	$AA
13415 303C                        55            .byte	$55
13416 303D                        AA            .byte	$AA
13417 303E                        55            .byte	$55
13418 303F                        AA            .byte	$AA
13419 3040                        55            .byte	$55
13420 3041                        AA            .byte	$AA
13421 3042                        55            .byte	$55
13422 3043                        AA            .byte	$AA
13423 3044                        55            .byte	$55
13424 3045                        AA            .byte	$AA
13425 3046                        55            .byte	$55
13426 3047                        AA            .byte	$AA
13427 3048                        55            .byte	$55
13428 3049                        AA            .byte	$AA
13429                                           ! 1398  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13430 304A                        DD            .byte	$DD
13431 304B                        77            .byte	$77
13432 304C                        DD            .byte	$DD
13433 304D                        77            .byte	$77
13434 304E                        DD            .byte	$DD
13435 304F                        77            .byte	$77
13436 3050                        DD            .byte	$DD
13437 3051                        77            .byte	$77
13438 3052                        DD            .byte	$DD
13439 3053                        77            .byte	$77
13440 3054                        DD            .byte	$DD
13441 3055                        77            .byte	$77
13442 3056                        DD            .byte	$DD
13443 3057                        77            .byte	$77
13444 3058                        DD            .byte	$DD
13445 3059                        77            .byte	$77
13446                                           ! 1399  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13447 305A                        18            .byte	$18
13448 305B                        18            .byte	$18
13449 305C                        18            .byte	$18
13450 305D                        18            .byte	$18
13451 305E                        18            .byte	$18
13452 305F                        18            .byte	$18
13453 3060                        18            .byte	$18
13454 3061                        18            .byte	$18
13455 3062                        18            .byte	$18
13456 3063                        18            .byte	$18
13457 3064                        18            .byte	$18
13458 3065                        18            .byte	$18
13459 3066                        18            .byte	$18
13460 3067                        18            .byte	$18
13461 3068                        18            .byte	$18
13462 3069                        18            .byte	$18
13463                                           ! 1400  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf
13464 306A                        18            .byte	$18
13465 306B                        18            .byte	$18
13466 306C                        18            .byte	$18
13467 306D                        18            .byte	$18
13468 306E                        18            .byte	$18
13469 306F                        18            .byte	$18
13470 3070                        18            .byte	$18
13471                                           ! 1400 8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13472 3071                        F8            .byte	$F8
13473 3072                        18            .byte	$18
13474 3073                        18            .byte	$18
13475 3074                        18            .byte	$18
13476 3075                        18            .byte	$18
13477 3076                        18            .byte	$18
13478 3077                        18            .byte	$18
13479 3078                        18            .byte	$18
13480 3079                        18            .byte	$18
13481                                           ! 1401  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13482 307A                        18            .byte	$18
13483 307B                        18            .byte	$18
13484 307C                        18            .byte	$18
13485 307D                        18            .byte	$18
13486 307E                        18            .byte	$18
13487 307F                        F8            .byte	$F8
13488 3080                        18            .byte	$18
13489 3081                        F8            .byte	$F8
13490 3082                        18            .byte	$18
13491 3083                        18            .byte	$18
13492 3084                        18            .byte	$18
13493 3085                        18            .byte	$18
13494 3086                        18            .byte	$18
13495 3087                        18            .byte	$18
13496 3088                        18            .byte	$18
13497 3089                        18            .byte	$18
13498                                           ! 1402  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13499 308A                        36            .byte	$36
13500 308B                        36            .byte	$36
13501 308C                        36            .byte	$36
13502 308D                        36            .byte	$36
13503 308E                        36            .byte	$36
13504 308F                        36            .byte	$36
13505 3090                        36            .byte	$36
13506 3091                        F6            .byte	$F6
13507 3092                        36            .byte	$36
13508 3093                        36            .byte	$36
13509 3094                        36            .byte	$36
13510 3095                        36            .byte	$36
13511 3096                        36            .byte	$36
13512 3097                        36            .byte	$36
13513 3098                        36            .byte	$36
13514 3099                        36            .byte	$36
13515                                           ! 1403  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13516 309A                        00            .byte	0
13517 309B                        00            .byte	0
13518 309C                        00            .byte	0
13519 309D                        00            .byte	0
13520 309E                        00            .byte	0
13521 309F                        00            .byte	0
13522 30A0                        00            .byte	0
13523 30A1                        FE            .byte	$FE
13524 30A2                        36            .byte	$36
13525 30A3                        36            .byte	$36
13526 30A4                        36            .byte	$36
13527 30A5                        36            .byte	$36
13528 30A6                        36            .byte	$36
13529 30A7                        36            .byte	$36
13530 30A8                        36            .byte	$36
13531 30A9                        36            .byte	$36
13532                                           ! 1404  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13533 30AA                        00            .byte	0
13534 30AB                        00            .byte	0
13535 30AC                        00            .byte	0
13536 30AD                        00            .byte	0
13537 30AE                        00            .byte	0
13538 30AF                        F8            .byte	$F8
13539 30B0                        18            .byte	$18
13540 30B1                        F8            .byte	$F8
13541 30B2                        18            .byte	$18
13542 30B3                        18            .byte	$18
13543 30B4                        18            .byte	$18
13544 30B5                        18            .byte	$18
13545 30B6                        18            .byte	$18
13546 30B7                        18            .byte	$18
13547 30B8                        18            .byte	$18
13548 30B9                        18            .byte	$18
13549                                           ! 1405  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13550 30BA                        36            .byte	$36
13551 30BB                        36            .byte	$36
13552 30BC                        36            .byte	$36
13553 30BD                        36            .byte	$36
13554 30BE                        36            .byte	$36
13555 30BF                        F6            .byte	$F6
13556 30C0                        06            .byte	6
13557 30C1                        F6            .byte	$F6
13558 30C2                        36            .byte	$36
13559 30C3                        36            .byte	$36
13560 30C4                        36            .byte	$36
13561 30C5                        36            .byte	$36
13562 30C6                        36            .byte	$36
13563 30C7                        36            .byte	$36
13564 30C8                        36            .byte	$36
13565 30C9                        36            .byte	$36
13566                                           ! 1406  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13567 30CA                        36            .byte	$36
13568 30CB                        36            .byte	$36
13569 30CC                        36            .byte	$36
13570 30CD                        36            .byte	$36
13571 30CE                        36            .byte	$36
13572 30CF                        36            .byte	$36
13573 30D0                        36            .byte	$36
13574 30D1                        36            .byte	$36
13575 30D2                        36            .byte	$36
13576 30D3                        36            .byte	$36
13577 30D4                        36            .byte	$36
13578 30D5                        36            .byte	$36
13579 30D6                        36            .byte	$36
13580 30D7                        36            .byte	$36
13581 30D8                        36            .byte	$36
13582 30D9                        36            .byte	$36
13583                                           ! 1407  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13584 30DA                        00            .byte	0
13585 30DB                        00            .byte	0
13586 30DC                        00            .byte	0
13587 30DD                        00            .byte	0
13588 30DE                        00            .byte	0
13589 30DF                        FE            .byte	$FE
13590 30E0                        06            .byte	6
13591 30E1                        F6            .byte	$F6
13592 30E2                        36            .byte	$36
13593 30E3                        36            .byte	$36
13594 30E4                        36            .byte	$36
13595 30E5                        36            .byte	$36
13596 30E6                        36            .byte	$36
13597 30E7                        36            .byte	$36
13598 30E8                        36            .byte	$36
13599 30E9                        36            .byte	$36
13600                                           ! 1408  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13601 30EA                        36            .byte	$36
13602 30EB                        36            .byte	$36
13603 30EC                        36            .byte	$36
13604 30ED                        36            .byte	$36
13605 30EE                        36            .byte	$36
13606 30EF                        F6            .byte	$F6
13607 30F0                        06            .byte	6
13608 30F1                        FE            .byte	$FE
13609 30F2                        00            .byte	0
13610 30F3                        00            .byte	0
13611 30F4                        00            .byte	0
13612 30F5                        00            .byte	0
13613 30F6                        00            .byte	0
13614 30F7                        00            .byte	0
13615 30F8                        00            .byte	0
13616 30F9                        00            .byte	0
13617                                           ! 1409  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13618 30FA                        36            .byte	$36
13619 30FB                        36            .byte	$36
13620 30FC                        36            .byte	$36
13621 30FD                        36            .byte	$36
13622 30FE                        36            .byte	$36
13623 30FF                        36            .byte	$36
13624 3100                        36            .byte	$36
13625 3101                        FE            .byte	$FE
13626 3102                        00            .byte	0
13627 3103                        00            .byte	0
13628 3104                        00            .byte	0
13629 3105                        00            .byte	0
13630 3106                        00            .byte	0
13631 3107                        00            .byte	0
13632 3108                        00            .byte	0
13633 3109                        00            .byte	0
13634                                           ! 1410  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13635 310A                        18            .byte	$18
13636 310B                        18            .byte	$18
13637 310C                        18            .byte	$18
13638 310D                        18            .byte	$18
13639 310E                        18            .byte	$18
13640 310F                        F8            .byte	$F8
13641 3110                        18            .byte	$18
13642 3111                        F8            .byte	$F8
13643 3112                        00            .byte	0
13644 3113                        00            .byte	0
13645 3114                        00            .byte	0
13646 3115                        00            .byte	0
13647 3116                        00            .byte	0
13648 3117                        00            .byte	0
13649 3118                        00            .byte	0
13650 3119                        00            .byte	0
13651                                           ! 1411  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13652 311A                        00            .byte	0
13653 311B                        00            .byte	0
13654 311C                        00            .byte	0
13655 311D                        00            .byte	0
13656 311E                        00            .byte	0
13657 311F                        00            .byte	0
13658 3120                        00            .byte	0
13659 3121                        F8            .byte	$F8
13660 3122                        18            .byte	$18
13661 3123                        18            .byte	$18
13662 3124                        18            .byte	$18
13663 3125                        18            .byte	$18
13664 3126                        18            .byte	$18
13665 3127                        18            .byte	$18
13666 3128                        18            .byte	$18
13667 3129                        18            .byte	$18
13668                                           ! 1412  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13669 312A                        18            .byte	$18
13670 312B                        18            .byte	$18
13671 312C                        18            .byte	$18
13672 312D                        18            .byte	$18
13673 312E                        18            .byte	$18
13674 312F                        18            .byte	$18
13675 3130                        18            .byte	$18
13676 3131                        1F            .byte	$1F
13677 3132                        00            .byte	0
13678 3133                        00            .byte	0
13679 3134                        00            .byte	0
13680 3135                        00            .byte	0
13681 3136                        00            .byte	0
13682 3137                        00            .byte	0
13683 3138                        00            .byte	0
13684 3139                        00            .byte	0
13685                                           ! 1413  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13686 313A                        18            .byte	$18
13687 313B                        18            .byte	$18
13688 313C                        18            .byte	$18
13689 313D                        18            .byte	$18
13690 313E                        18            .byte	$18
13691 313F                        18            .byte	$18
13692 3140                        18            .byte	$18
13693 3141                        FF            .byte	$FF
13694 3142                        00            .byte	0
13695 3143                        00            .byte	0
13696 3144                        00            .byte	0
13697 3145                        00            .byte	0
13698 3146                        00            .byte	0
13699 3147                        00            .byte	0
13700 3148                        00            .byte	0
13701 3149                        00            .byte	0
13702                                           ! 1414  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13703 314A                        00            .byte	0
13704 314B                        00            .byte	0
13705 314C                        00            .byte	0
13706 314D                        00            .byte	0
13707 314E                        00            .byte	0
13708 314F                        00            .byte	0
13709 3150                        00            .byte	0
13710 3151                        FF            .byte	$FF
13711 3152                        18            .byte	$18
13712 3153                        18            .byte	$18
13713 3154                        18            .byte	$18
13714 3155                        18            .byte	$18
13715 3156                        18            .byte	$18
13716 3157                        18            .byte	$18
13717 3158                        18            .byte	$18
13718 3159                        18            .byte	$18
13719                                           ! 1415  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13720 315A                        18            .byte	$18
13721 315B                        18            .byte	$18
13722 315C                        18            .byte	$18
13723 315D                        18            .byte	$18
13724 315E                        18            .byte	$18
13725 315F                        18            .byte	$18
13726 3160                        18            .byte	$18
13727 3161                        1F            .byte	$1F
13728 3162                        18            .byte	$18
13729 3163                        18            .byte	$18
13730 3164                        18            .byte	$18
13731 3165                        18            .byte	$18
13732 3166                        18            .byte	$18
13733 3167                        18            .byte	$18
13734 3168                        18            .byte	$18
13735 3169                        18            .byte	$18
13736                                           ! 1416  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13737 316A                        00            .byte	0
13738 316B                        00            .byte	0
13739 316C                        00            .byte	0
13740 316D                        00            .byte	0
13741 316E                        00            .byte	0
13742 316F                        00            .byte	0
13743 3170                        00            .byte	0
13744 3171                        FF            .byte	$FF
13745 3172                        00            .byte	0
13746 3173                        00            .byte	0
13747 3174                        00            .byte	0
13748 3175                        00            .byte	0
13749 3176                        00            .byte	0
13750 3177                        00            .byte	0
13751 3178                        00            .byte	0
13752 3179                        00            .byte	0
13753                                           ! 1417  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13754 317A                        18            .byte	$18
13755 317B                        18            .byte	$18
13756 317C                        18            .byte	$18
13757 317D                        18            .byte	$18
13758 317E                        18            .byte	$18
13759 317F                        18            .byte	$18
13760 3180                        18            .byte	$18
13761 3181                        FF            .byte	$FF
13762 3182                        18            .byte	$18
13763 3183                        18            .byte	$18
13764 3184                        18            .byte	$18
13765 3185                        18            .byte	$18
13766 3186                        18            .byte	$18
13767 3187                        18            .byte	$18
13768 3188                        18            .byte	$18
13769 3189                        18            .byte	$18
13770                                           ! 1418  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13771 318A                        18            .byte	$18
13772 318B                        18            .byte	$18
13773 318C                        18            .byte	$18
13774 318D                        18            .byte	$18
13775 318E                        18            .byte	$18
13776 318F                        1F            .byte	$1F
13777 3190                        18            .byte	$18
13778 3191                        1F            .byte	$1F
13779 3192                        18            .byte	$18
13780 3193                        18            .byte	$18
13781 3194                        18            .byte	$18
13782 3195                        18            .byte	$18
13783 3196                        18            .byte	$18
13784 3197                        18            .byte	$18
13785 3198                        18            .byte	$18
13786 3199                        18            .byte	$18
13787                                           ! 1419  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13788 319A                        36            .byte	$36
13789 319B                        36            .byte	$36
13790 319C                        36            .byte	$36
13791 319D                        36            .byte	$36
13792 319E                        36            .byte	$36
13793 319F                        36            .byte	$36
13794 31A0                        36            .byte	$36
13795 31A1                        37            .byte	$37
13796 31A2                        36            .byte	$36
13797 31A3                        36            .byte	$36
13798 31A4                        36            .byte	$36
13799 31A5                        36            .byte	$36
13800 31A6                        36            .byte	$36
13801 31A7                        36            .byte	$36
13802 31A8                        36            .byte	$36
13803 31A9                        36            .byte	$36
13804                                           ! 1420  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13805 31AA                        36            .byte	$36
13806 31AB                        36            .byte	$36
13807 31AC                        36            .byte	$36
13808 31AD                        36            .byte	$36
13809 31AE                        36            .byte	$36
13810 31AF                        37            .byte	$37
13811 31B0                        30            .byte	$30
13812 31B1                        3F            .byte	$3F
13813 31B2                        00            .byte	0
13814 31B3                        00            .byte	0
13815 31B4                        00            .byte	0
13816 31B5                        00            .byte	0
13817 31B6                        00            .byte	0
13818 31B7                        00            .byte	0
13819 31B8                        00            .byte	0
13820 31B9                        00            .byte	0
13821                                           ! 1421  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x
13822 31BA                        00            .byte	0
13823 31BB                        00            .byte	0
13824 31BC                        00            .byte	0
13825 31BD                        00            .byte	0
13826 31BE                        00            .byte	0
13827 31BF                        3F            .byte	$3F
13828 31C0                        30            .byte	$30
13829 31C1                        37            .byte	$37
13830 31C2                        36            .byte	$36
13831                                           ! 1421 36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13832 31C3                        36            .byte	$36
13833 31C4                        36            .byte	$36
13834 31C5                        36            .byte	$36
13835 31C6                        36            .byte	$36
13836 31C7                        36            .byte	$36
13837 31C8                        36            .byte	$36
13838 31C9                        36            .byte	$36
13839                                           ! 1422  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13840 31CA                        36            .byte	$36
13841 31CB                        36            .byte	$36
13842 31CC                        36            .byte	$36
13843 31CD                        36            .byte	$36
13844 31CE                        36            .byte	$36
13845 31CF                        F7            .byte	$F7
13846 31D0                        00            .byte	0
13847 31D1                        FF            .byte	$FF
13848 31D2                        00            .byte	0
13849 31D3                        00            .byte	0
13850 31D4                        00            .byte	0
13851 31D5                        00            .byte	0
13852 31D6                        00            .byte	0
13853 31D7                        00            .byte	0
13854 31D8                        00            .byte	0
13855 31D9                        00            .byte	0
13856                                           ! 1423  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13857 31DA                        00            .byte	0
13858 31DB                        00            .byte	0
13859 31DC                        00            .byte	0
13860 31DD                        00            .byte	0
13861 31DE                        00            .byte	0
13862 31DF                        FF            .byte	$FF
13863 31E0                        00            .byte	0
13864 31E1                        F7            .byte	$F7
13865 31E2                        36            .byte	$36
13866 31E3                        36            .byte	$36
13867 31E4                        36            .byte	$36
13868 31E5                        36            .byte	$36
13869 31E6                        36            .byte	$36
13870 31E7                        36            .byte	$36
13871 31E8                        36            .byte	$36
13872 31E9                        36            .byte	$36
13873                                           ! 1424  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13874 31EA                        36            .byte	$36
13875 31EB                        36            .byte	$36
13876 31EC                        36            .byte	$36
13877 31ED                        36            .byte	$36
13878 31EE                        36            .byte	$36
13879 31EF                        37            .byte	$37
13880 31F0                        30            .byte	$30
13881 31F1                        37            .byte	$37
13882 31F2                        36            .byte	$36
13883 31F3                        36            .byte	$36
13884 31F4                        36            .byte	$36
13885 31F5                        36            .byte	$36
13886 31F6                        36            .byte	$36
13887 31F7                        36            .byte	$36
13888 31F8                        36            .byte	$36
13889 31F9                        36            .byte	$36
13890                                           ! 1425  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13891 31FA                        00            .byte	0
13892 31FB                        00            .byte	0
13893 31FC                        00            .byte	0
13894 31FD                        00            .byte	0
13895 31FE                        00            .byte	0
13896 31FF                        FF            .byte	$FF
13897 3200                        00            .byte	0
13898 3201                        FF            .byte	$FF
13899 3202                        00            .byte	0
13900 3203                        00            .byte	0
13901 3204                        00            .byte	0
13902 3205                        00            .byte	0
13903 3206                        00            .byte	0
13904 3207                        00            .byte	0
13905 3208                        00            .byte	0
13906 3209                        00            .byte	0
13907                                           ! 1426  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13908 320A                        36            .byte	$36
13909 320B                        36            .byte	$36
13910 320C                        36            .byte	$36
13911 320D                        36            .byte	$36
13912 320E                        36            .byte	$36
13913 320F                        F7            .byte	$F7
13914 3210                        00            .byte	0
13915 3211                        F7            .byte	$F7
13916 3212                        36            .byte	$36
13917 3213                        36            .byte	$36
13918 3214                        36            .byte	$36
13919 3215                        36            .byte	$36
13920 3216                        36            .byte	$36
13921 3217                        36            .byte	$36
13922 3218                        36            .byte	$36
13923 3219                        36            .byte	$36
13924                                           ! 1427  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13925 321A                        18            .byte	$18
13926 321B                        18            .byte	$18
13927 321C                        18            .byte	$18
13928 321D                        18            .byte	$18
13929 321E                        18            .byte	$18
13930 321F                        FF            .byte	$FF
13931 3220                        00            .byte	0
13932 3221                        FF            .byte	$FF
13933 3222                        00            .byte	0
13934 3223                        00            .byte	0
13935 3224                        00            .byte	0
13936 3225                        00            .byte	0
13937 3226                        00            .byte	0
13938 3227                        00            .byte	0
13939 3228                        00            .byte	0
13940 3229                        00            .byte	0
13941                                           ! 1428  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13942 322A                        36            .byte	$36
13943 322B                        36            .byte	$36
13944 322C                        36            .byte	$36
13945 322D                        36            .byte	$36
13946 322E                        36            .byte	$36
13947 322F                        36            .byte	$36
13948 3230                        36            .byte	$36
13949 3231                        FF            .byte	$FF
13950 3232                        00            .byte	0
13951 3233                        00            .byte	0
13952 3234                        00            .byte	0
13953 3235                        00            .byte	0
13954 3236                        00            .byte	0
13955 3237                        00            .byte	0
13956 3238                        00            .byte	0
13957 3239                        00            .byte	0
13958                                           ! 1429  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13959 323A                        00            .byte	0
13960 323B                        00            .byte	0
13961 323C                        00            .byte	0
13962 323D                        00            .byte	0
13963 323E                        00            .byte	0
13964 323F                        FF            .byte	$FF
13965 3240                        00            .byte	0
13966 3241                        FF            .byte	$FF
13967 3242                        18            .byte	$18
13968 3243                        18            .byte	$18
13969 3244                        18            .byte	$18
13970 3245                        18            .byte	$18
13971 3246                        18            .byte	$18
13972 3247                        18            .byte	$18
13973 3248                        18            .byte	$18
13974 3249                        18            .byte	$18
13975                                           ! 1430  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13976 324A                        00            .byte	0
13977 324B                        00            .byte	0
13978 324C                        00            .byte	0
13979 324D                        00            .byte	0
13980 324E                        00            .byte	0
13981 324F                        00            .byte	0
13982 3250                        00            .byte	0
13983 3251                        FF            .byte	$FF
13984 3252                        36            .byte	$36
13985 3253                        36            .byte	$36
13986 3254                        36            .byte	$36
13987 3255                        36            .byte	$36
13988 3256                        36            .byte	$36
13989 3257                        36            .byte	$36
13990 3258                        36            .byte	$36
13991 3259                        36            .byte	$36
13992                                           ! 1431  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13993 325A                        36            .byte	$36
13994 325B                        36            .byte	$36
13995 325C                        36            .byte	$36
13996 325D                        36            .byte	$36
13997 325E                        36            .byte	$36
13998 325F                        36            .byte	$36
13999 3260                        36            .byte	$36
14000 3261                        3F            .byte	$3F
14001 3262                        00            .byte	0
14002 3263                        00            .byte	0
14003 3264                        00            .byte	0
14004 3265                        00            .byte	0
14005 3266                        00            .byte	0
14006 3267                        00            .byte	0
14007 3268                        00            .byte	0
14008 3269                        00            .byte	0
14009                                           ! 1432  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14010 326A                        18            .byte	$18
14011 326B                        18            .byte	$18
14012 326C                        18            .byte	$18
14013 326D                        18            .byte	$18
14014 326E                        18            .byte	$18
14015 326F                        1F            .byte	$1F
14016 3270                        18            .byte	$18
14017 3271                        1F            .byte	$1F
14018 3272                        00            .byte	0
14019 3273                        00            .byte	0
14020 3274                        00            .byte	0
14021 3275                        00            .byte	0
14022 3276                        00            .byte	0
14023 3277                        00            .byte	0
14024 3278                        00            .byte	0
14025 3279                        00            .byte	0
14026                                           ! 1433  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14027 327A                        00            .byte	0
14028 327B                        00            .byte	0
14029 327C                        00            .byte	0
14030 327D                        00            .byte	0
14031 327E                        00            .byte	0
14032 327F                        1F            .byte	$1F
14033 3280                        18            .byte	$18
14034 3281                        1F            .byte	$1F
14035 3282                        18            .byte	$18
14036 3283                        18            .byte	$18
14037 3284                        18            .byte	$18
14038 3285                        18            .byte	$18
14039 3286                        18            .byte	$18
14040 3287                        18            .byte	$18
14041 3288                        18            .byte	$18
14042 3289                        18            .byte	$18
14043                                           ! 1434  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14044 328A                        00            .byte	0
14045 328B                        00            .byte	0
14046 328C                        00            .byte	0
14047 328D                        00            .byte	0
14048 328E                        00            .byte	0
14049 328F                        00            .byte	0
14050 3290                        00            .byte	0
14051 3291                        3F            .byte	$3F
14052 3292                        36            .byte	$36
14053 3293                        36            .byte	$36
14054 3294                        36            .byte	$36
14055 3295                        36            .byte	$36
14056 3296                        36            .byte	$36
14057 3297                        36            .byte	$36
14058 3298                        36            .byte	$36
14059 3299                        36            .byte	$36
14060                                           ! 1435  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14061 329A                        36            .byte	$36
14062 329B                        36            .byte	$36
14063 329C                        36            .byte	$36
14064 329D                        36            .byte	$36
14065 329E                        36            .byte	$36
14066 329F                        36            .byte	$36
14067 32A0                        36            .byte	$36
14068 32A1                        FF            .byte	$FF
14069 32A2                        36            .byte	$36
14070 32A3                        36            .byte	$36
14071 32A4                        36            .byte	$36
14072 32A5                        36            .byte	$36
14073 32A6                        36            .byte	$36
14074 32A7                        36            .byte	$36
14075 32A8                        36            .byte	$36
14076 32A9                        36            .byte	$36
14077                                           ! 1436  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14078 32AA                        18            .byte	$18
14079 32AB                        18            .byte	$18
14080 32AC                        18            .byte	$18
14081 32AD                        18            .byte	$18
14082 32AE                        18            .byte	$18
14083 32AF                        FF            .byte	$FF
14084 32B0                        18            .byte	$18
14085 32B1                        FF            .byte	$FF
14086 32B2                        18            .byte	$18
14087 32B3                        18            .byte	$18
14088 32B4                        18            .byte	$18
14089 32B5                        18            .byte	$18
14090 32B6                        18            .byte	$18
14091 32B7                        18            .byte	$18
14092 32B8                        18            .byte	$18
14093 32B9                        18            .byte	$18
14094                                           ! 1437  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14095 32BA                        18            .byte	$18
14096 32BB                        18            .byte	$18
14097 32BC                        18            .byte	$18
14098 32BD                        18            .byte	$18
14099 32BE                        18            .byte	$18
14100 32BF                        18            .byte	$18
14101 32C0                        18            .byte	$18
14102 32C1                        F8            .byte	$F8
14103 32C2                        00            .byte	0
14104 32C3                        00            .byte	0
14105 32C4                        00            .byte	0
14106 32C5                        00            .byte	0
14107 32C6                        00            .byte	0
14108 32C7                        00            .byte	0
14109 32C8                        00            .byte	0
14110 32C9                        00            .byte	0
14111                                           ! 1438  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14112 32CA                        00            .byte	0
14113 32CB                        00            .byte	0
14114 32CC                        00            .byte	0
14115 32CD                        00            .byte	0
14116 32CE                        00            .byte	0
14117 32CF                        00            .byte	0
14118 32D0                        00            .byte	0
14119 32D1                        1F            .byte	$1F
14120 32D2                        18            .byte	$18
14121 32D3                        18            .byte	$18
14122 32D4                        18            .byte	$18
14123 32D5                        18            .byte	$18
14124 32D6                        18            .byte	$18
14125 32D7                        18            .byte	$18
14126 32D8                        18            .byte	$18
14127 32D9                        18            .byte	$18
14128                                           ! 1439  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14129 32DA                        FF            .byte	$FF
14130 32DB                        FF            .byte	$FF
14131 32DC                        FF            .byte	$FF
14132 32DD                        FF            .byte	$FF
14133 32DE                        FF            .byte	$FF
14134 32DF                        FF            .byte	$FF
14135 32E0                        FF            .byte	$FF
14136 32E1                        FF            .byte	$FF
14137 32E2                        FF            .byte	$FF
14138 32E3                        FF            .byte	$FF
14139 32E4                        FF            .byte	$FF
14140 32E5                        FF            .byte	$FF
14141 32E6                        FF            .byte	$FF
14142 32E7                        FF            .byte	$FF
14143 32E8                        FF            .byte	$FF
14144 32E9                        FF            .byte	$FF
14145                                           ! 1440  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14146 32EA                        00            .byte	0
14147 32EB                        00            .byte	0
14148 32EC                        00            .byte	0
14149 32ED                        00            .byte	0
14150 32EE                        00            .byte	0
14151 32EF                        00            .byte	0
14152 32F0                        00            .byte	0
14153 32F1                        FF            .byte	$FF
14154 32F2                        FF            .byte	$FF
14155 32F3                        FF            .byte	$FF
14156 32F4                        FF            .byte	$FF
14157 32F5                        FF            .byte	$FF
14158 32F6                        FF            .byte	$FF
14159 32F7                        FF            .byte	$FF
14160 32F8                        FF            .byte	$FF
14161 32F9                        FF            .byte	$FF
14162                                           ! 1441  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14163 32FA                        F0            .byte	$F0
14164 32FB                        F0            .byte	$F0
14165 32FC                        F0            .byte	$F0
14166 32FD                        F0            .byte	$F0
14167 32FE                        F0            .byte	$F0
14168 32FF                        F0            .byte	$F0
14169 3300                        F0            .byte	$F0
14170 3301                        F0            .byte	$F0
14171 3302                        F0            .byte	$F0
14172 3303                        F0            .byte	$F0
14173 3304                        F0            .byte	$F0
14174 3305                        F0            .byte	$F0
14175 3306                        F0            .byte	$F0
14176 3307                        F0            .byte	$F0
14177 3308                        F0            .byte	$F0
14178 3309                        F0            .byte	$F0
14179                                           ! 1442  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0
14180 330A                        0F            .byte	$F
14181 330B                        0F            .byte	$F
14182 330C                        0F            .byte	$F
14183 330D                        0F            .byte	$F
14184 330E                        0F            .byte	$F
14185 330F                        0F            .byte	$F
14186 3310                        0F            .byte	$F
14187 3311                        0F            .byte	$F
14188 3312                        0F            .byte	$F
14189 3313                        0F            .byte	$F
14190 3314                        0F            .byte	$F
14191                                           ! 1442 x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14192 3315                        0F            .byte	$F
14193 3316                        0F            .byte	$F
14194 3317                        0F            .byte	$F
14195 3318                        0F            .byte	$F
14196 3319                        0F            .byte	$F
14197                                           ! 1443  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14198 331A                        FF            .byte	$FF
14199 331B                        FF            .byte	$FF
14200 331C                        FF            .byte	$FF
14201 331D                        FF            .byte	$FF
14202 331E                        FF            .byte	$FF
14203 331F                        FF            .byte	$FF
14204 3320                        FF            .byte	$FF
14205 3321                        00            .byte	0
14206 3322                        00            .byte	0
14207 3323                        00            .byte	0
14208 3324                        00            .byte	0
14209 3325                        00            .byte	0
14210 3326                        00            .byte	0
14211 3327                        00            .byte	0
14212 3328                        00            .byte	0
14213 3329                        00            .byte	0
14214                                           ! 1444  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14215 332A                        00            .byte	0
14216 332B                        00            .byte	0
14217 332C                        00            .byte	0
14218 332D                        00            .byte	0
14219 332E                        00            .byte	0
14220 332F                        76            .byte	$76
14221 3330                        DC            .byte	$DC
14222 3331                        D8            .byte	$D8
14223 3332                        D8            .byte	$D8
14224 3333                        D8            .byte	$D8
14225 3334                        DC            .byte	$DC
14226 3335                        76            .byte	$76
14227 3336                        00            .byte	0
14228 3337                        00            .byte	0
14229 3338                        00            .byte	0
14230 3339                        00            .byte	0
14231                                           ! 1445  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14232 333A                        00            .byte	0
14233 333B                        00            .byte	0
14234 333C                        78            .byte	$78
14235 333D                        CC            .byte	$CC
14236 333E                        CC            .byte	$CC
14237 333F                        CC            .byte	$CC
14238 3340                        D8            .byte	$D8
14239 3341                        CC            .byte	$CC
14240 3342                        C6            .byte	$C6
14241 3343                        C6            .byte	$C6
14242 3344                        C6            .byte	$C6
14243 3345                        CC            .byte	$CC
14244 3346                        00            .byte	0
14245 3347                        00            .byte	0
14246 3348                        00            .byte	0
14247 3349                        00            .byte	0
14248                                           ! 1446  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14249 334A                        00            .byte	0
14250 334B                        00            .byte	0
14251 334C                        FE            .byte	$FE
14252 334D                        C6            .byte	$C6
14253 334E                        C6            .byte	$C6
14254 334F                        C0            .byte	$C0
14255 3350                        C0            .byte	$C0
14256 3351                        C0            .byte	$C0
14257 3352                        C0            .byte	$C0
14258 3353                        C0            .byte	$C0
14259 3354                        C0            .byte	$C0
14260 3355                        C0            .byte	$C0
14261 3356                        00            .byte	0
14262 3357                        00            .byte	0
14263 3358                        00            .byte	0
14264 3359                        00            .byte	0
14265                                           ! 1447  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14266 335A                        00            .byte	0
14267 335B                        00            .byte	0
14268 335C                        00            .byte	0
14269 335D                        00            .byte	0
14270 335E                        FE            .byte	$FE
14271 335F                        6C            .byte	$6C
14272 3360                        6C            .byte	$6C
14273 3361                        6C            .byte	$6C
14274 3362                        6C            .byte	$6C
14275 3363                        6C            .byte	$6C
14276 3364                        6C            .byte	$6C
14277 3365                        6C            .byte	$6C
14278 3366                        00            .byte	0
14279 3367                        00            .byte	0
14280 3368                        00            .byte	0
14281 3369                        00            .byte	0
14282                                           ! 1448  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14283 336A                        00            .byte	0
14284 336B                        00            .byte	0
14285 336C                        00            .byte	0
14286 336D                        FE            .byte	$FE
14287 336E                        C6            .byte	$C6
14288 336F                        60            .byte	$60
14289 3370                        30            .byte	$30
14290 3371                        18            .byte	$18
14291 3372                        30            .byte	$30
14292 3373                        60            .byte	$60
14293 3374                        C6            .byte	$C6
14294 3375                        FE            .byte	$FE
14295 3376                        00            .byte	0
14296 3377                        00            .byte	0
14297 3378                        00            .byte	0
14298 3379                        00            .byte	0
14299                                           ! 1449  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14300 337A                        00            .byte	0
14301 337B                        00            .byte	0
14302 337C                        00            .byte	0
14303 337D                        00            .byte	0
14304 337E                        00            .byte	0
14305 337F                        7E            .byte	$7E
14306 3380                        D8            .byte	$D8
14307 3381                        D8            .byte	$D8
14308 3382                        D8            .byte	$D8
14309 3383                        D8            .byte	$D8
14310 3384                        D8            .byte	$D8
14311 3385                        70            .byte	$70
14312 3386                        00            .byte	0
14313 3387                        00            .byte	0
14314 3388                        00            .byte	0
14315 3389                        00            .byte	0
14316                                           ! 1450  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14317 338A                        00            .byte	0
14318 338B                        00            .byte	0
14319 338C                        00            .byte	0
14320 338D                        00            .byte	0
14321 338E                        66            .byte	$66
14322 338F                        66            .byte	$66
14323 3390                        66            .byte	$66
14324 3391                        66            .byte	$66
14325 3392                        66            .byte	$66
14326 3393                        7C            .byte	$7C
14327 3394                        60            .byte	$60
14328 3395                        60            .byte	$60
14329 3396                        C0            .byte	$C0
14330 3397                        00            .byte	0
14331 3398                        00            .byte	0
14332 3399                        00            .byte	0
14333                                           ! 1451  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14334 339A                        00            .byte	0
14335 339B                        00            .byte	0
14336 339C                        00            .byte	0
14337 339D                        00            .byte	0
14338 339E                        76            .byte	$76
14339 339F                        DC            .byte	$DC
14340 33A0                        18            .byte	$18
14341 33A1                        18            .byte	$18
14342 33A2                        18            .byte	$18
14343 33A3                        18            .byte	$18
14344 33A4                        18            .byte	$18
14345 33A5                        18            .byte	$18
14346 33A6                        00            .byte	0
14347 33A7                        00            .byte	0
14348 33A8                        00            .byte	0
14349 33A9                        00            .byte	0
14350                                           ! 1452  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14351 33AA                        00            .byte	0
14352 33AB                        00            .byte	0
14353 33AC                        00            .byte	0
14354 33AD                        7E            .byte	$7E
14355 33AE                        18            .byte	$18
14356 33AF                        3C            .byte	$3C
14357 33B0                        66            .byte	$66
14358 33B1                        66            .byte	$66
14359 33B2                        66            .byte	$66
14360 33B3                        3C            .byte	$3C
14361 33B4                        18            .byte	$18
14362 33B5                        7E            .byte	$7E
14363 33B6                        00            .byte	0
14364 33B7                        00            .byte	0
14365 33B8                        00            .byte	0
14366 33B9                        00            .byte	0
14367                                           ! 1453  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14368 33BA                        00            .byte	0
14369 33BB                        00            .byte	0
14370 33BC                        00            .byte	0
14371 33BD                        38            .byte	$38
14372 33BE                        6C            .byte	$6C
14373 33BF                        C6            .byte	$C6
14374 33C0                        C6            .byte	$C6
14375 33C1                        FE            .byte	$FE
14376 33C2                        C6            .byte	$C6
14377 33C3                        C6            .byte	$C6
14378 33C4                        6C            .byte	$6C
14379 33C5                        38            .byte	$38
14380 33C6                        00            .byte	0
14381 33C7                        00            .byte	0
14382 33C8                        00            .byte	0
14383 33C9                        00            .byte	0
14384                                           ! 1454  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14385 33CA                        00            .byte	0
14386 33CB                        00            .byte	0
14387 33CC                        38            .byte	$38
14388 33CD                        6C            .byte	$6C
14389 33CE                        C6            .byte	$C6
14390 33CF                        C6            .byte	$C6
14391 33D0                        C6            .byte	$C6
14392 33D1                        6C            .byte	$6C
14393 33D2                        6C            .byte	$6C
14394 33D3                        6C            .byte	$6C
14395 33D4                        6C            .byte	$6C
14396 33D5                        EE            .byte	$EE
14397 33D6                        00            .byte	0
14398 33D7                        00            .byte	0
14399 33D8                        00            .byte	0
14400 33D9                        00            .byte	0
14401                                           ! 1455  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14402 33DA                        00            .byte	0
14403 33DB                        00            .byte	0
14404 33DC                        1E            .byte	$1E
14405 33DD                        30            .byte	$30
14406 33DE                        18            .byte	$18
14407 33DF                        0C            .byte	$C
14408 33E0                        3E            .byte	$3E
14409 33E1                        66            .byte	$66
14410 33E2                        66            .byte	$66
14411 33E3                        66            .byte	$66
14412 33E4                        66            .byte	$66
14413 33E5                        3C            .byte	$3C
14414 33E6                        00            .byte	0
14415 33E7                        00            .byte	0
14416 33E8                        00            .byte	0
14417 33E9                        00            .byte	0
14418                                           ! 1456  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14419 33EA                        00            .byte	0
14420 33EB                        00            .byte	0
14421 33EC                        00            .byte	0
14422 33ED                        00            .byte	0
14423 33EE                        00            .byte	0
14424 33EF                        7E            .byte	$7E
14425 33F0                        DB            .byte	$DB
14426 33F1                        DB            .byte	$DB
14427 33F2                        DB            .byte	$DB
14428 33F3                        7E            .byte	$7E
14429 33F4                        00            .byte	0
14430 33F5                        00            .byte	0
14431 33F6                        00            .byte	0
14432 33F7                        00            .byte	0
14433 33F8                        00            .byte	0
14434 33F9                        00            .byte	0
14435                                           ! 1457  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14436 33FA                        00            .byte	0
14437 33FB                        00            .byte	0
14438 33FC                        00            .byte	0
14439 33FD                        03            .byte	3
14440 33FE                        06            .byte	6
14441 33FF                        7E            .byte	$7E
14442 3400                        DB            .byte	$DB
14443 3401                        DB            .byte	$DB
14444 3402                        F3            .byte	$F3
14445 3403                        7E            .byte	$7E
14446 3404                        60            .byte	$60
14447 3405                        C0            .byte	$C0
14448 3406                        00            .byte	0
14449 3407                        00            .byte	0
14450 3408                        00            .byte	0
14451 3409                        00            .byte	0
14452                                           ! 1458  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14453 340A                        00            .byte	0
14454 340B                        00            .byte	0
14455 340C                        1C            .byte	$1C
14456 340D                        30            .byte	$30
14457 340E                        60            .byte	$60
14458 340F                        60            .byte	$60
14459 3410                        7C            .byte	$7C
14460 3411                        60            .byte	$60
14461 3412                        60            .byte	$60
14462 3413                        60            .byte	$60
14463 3414                        30            .byte	$30
14464 3415                        1C            .byte	$1C
14465 3416                        00            .byte	0
14466 3417                        00            .byte	0
14467 3418                        00            .byte	0
14468 3419                        00            .byte	0
14469                                           ! 1459  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14470 341A                        00            .byte	0
14471 341B                        00            .byte	0
14472 341C                        00            .byte	0
14473 341D                        7C            .byte	$7C
14474 341E                        C6            .byte	$C6
14475 341F                        C6            .byte	$C6
14476 3420                        C6            .byte	$C6
14477 3421                        C6            .byte	$C6
14478 3422                        C6            .byte	$C6
14479 3423                        C6            .byte	$C6
14480 3424                        C6            .byte	$C6
14481 3425                        C6            .byte	$C6
14482 3426                        00            .byte	0
14483 3427                        00            .byte	0
14484 3428                        00            .byte	0
14485 3429                        00            .byte	0
14486                                           ! 1460  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14487 342A                        00            .byte	0
14488 342B                        00            .byte	0
14489 342C                        00            .byte	0
14490 342D                        00            .byte	0
14491 342E                        FE            .byte	$FE
14492 342F                        00            .byte	0
14493 3430                        00            .byte	0
14494 3431                        FE            .byte	$FE
14495 3432                        00            .byte	0
14496 3433                        00            .byte	0
14497 3434                        FE            .byte	$FE
14498 3435                        00            .byte	0
14499 3436                        00            .byte	0
14500 3437                        00            .byte	0
14501 3438                        00            .byte	0
14502 3439                        00            .byte	0
14503                                           ! 1461  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14504 343A                        00            .byte	0
14505 343B                        00            .byte	0
14506 343C                        00            .byte	0
14507 343D                        00            .byte	0
14508 343E                        18            .byte	$18
14509 343F                        18            .byte	$18
14510 3440                        7E            .byte	$7E
14511 3441                        18            .byte	$18
14512 3442                        18            .byte	$18
14513 3443                        00            .byte	0
14514 3444                        00            .byte	0
14515 3445                        FF            .byte	$FF
14516 3446                        00            .byte	0
14517 3447                        00            .byte	0
14518 3448                        00            .byte	0
14519 3449                        00            .byte	0
14520                                           ! 1462  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14521 344A                        00            .byte	0
14522 344B                        00            .byte	0
14523 344C                        00            .byte	0
14524 344D                        30            .byte	$30
14525 344E                        18            .byte	$18
14526 344F                        0C            .byte	$C
14527 3450                        06            .byte	6
14528 3451                        0C            .byte	$C
14529 3452                        18            .byte	$18
14530 3453                        30            .byte	$30
14531 3454                        00            .byte	0
14532 3455                        7E            .byte	$7E
14533 3456                        00            .byte	0
14534 3457                        00            .byte	0
14535 3458                        00            .byte	0
14536 3459                        00            .byte	0
14537                                           ! 1463  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 
14538 345A                        00            .byte	0
14539 345B                        00            .byte	0
14540 345C                        00            .byte	0
14541 345D                        0C            .byte	$C
14542 345E                        18            .byte	$18
14543 345F                        30            .byte	$30
14544 3460                        60            .byte	$60
14545 3461                        30            .byte	$30
14546 3462                        18            .byte	$18
14547 3463                        0C            .byte	$C
14548 3464                        00            .byte	0
14549 3465                        7E            .byte	$7E
14550 3466                        00            .byte	0
14551                                           ! 1463 0x00, 0x00, 0x00,
14552 3467                        00            .byte	0
14553 3468                        00            .byte	0
14554 3469                        00            .byte	0
14555                                           ! 1464  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14556 346A                        00            .byte	0
14557 346B                        00            .byte	0
14558 346C                        0E            .byte	$E
14559 346D                        1B            .byte	$1B
14560 346E                        1B            .byte	$1B
14561 346F                        18            .byte	$18
14562 3470                        18            .byte	$18
14563 3471                        18            .byte	$18
14564 3472                        18            .byte	$18
14565 3473                        18            .byte	$18
14566 3474                        18            .byte	$18
14567 3475                        18            .byte	$18
14568 3476                        18            .byte	$18
14569 3477                        18            .byte	$18
14570 3478                        18            .byte	$18
14571 3479                        18            .byte	$18
14572                                           ! 1465  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14573 347A                        18            .byte	$18
14574 347B                        18            .byte	$18
14575 347C                        18            .byte	$18
14576 347D                        18            .byte	$18
14577 347E                        18            .byte	$18
14578 347F                        18            .byte	$18
14579 3480                        18            .byte	$18
14580 3481                        18            .byte	$18
14581 3482                        D8            .byte	$D8
14582 3483                        D8            .byte	$D8
14583 3484                        D8            .byte	$D8
14584 3485                        70            .byte	$70
14585 3486                        00            .byte	0
14586 3487                        00            .byte	0
14587 3488                        00            .byte	0
14588 3489                        00            .byte	0
14589                                           ! 1466  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14590 348A                        00            .byte	0
14591 348B                        00            .byte	0
14592 348C                        00            .byte	0
14593 348D                        00            .byte	0
14594 348E                        18            .byte	$18
14595 348F                        18            .byte	$18
14596 3490                        00            .byte	0
14597 3491                        7E            .byte	$7E
14598 3492                        00            .byte	0
14599 3493                        18            .byte	$18
14600 3494                        18            .byte	$18
14601 3495                        00            .byte	0
14602 3496                        00            .byte	0
14603 3497                        00            .byte	0
14604 3498                        00            .byte	0
14605 3499                        00            .byte	0
14606                                           ! 1467  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14607 349A                        00            .byte	0
14608 349B                        00            .byte	0
14609 349C                        00            .byte	0
14610 349D                        00            .byte	0
14611 349E                        00            .byte	0
14612 349F                        76            .byte	$76
14613 34A0                        DC            .byte	$DC
14614 34A1                        00            .byte	0
14615 34A2                        76            .byte	$76
14616 34A3                        DC            .byte	$DC
14617 34A4                        00            .byte	0
14618 34A5                        00            .byte	0
14619 34A6                        00            .byte	0
14620 34A7                        00            .byte	0
14621 34A8                        00            .byte	0
14622 34A9                        00            .byte	0
14623                                           ! 1468  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14624 34AA                        00            .byte	0
14625 34AB                        38            .byte	$38
14626 34AC                        6C            .byte	$6C
14627 34AD                        6C            .byte	$6C
14628 34AE                        38            .byte	$38
14629 34AF                        00            .byte	0
14630 34B0                        00            .byte	0
14631 34B1                        00            .byte	0
14632 34B2                        00            .byte	0
14633 34B3                        00            .byte	0
14634 34B4                        00            .byte	0
14635 34B5                        00            .byte	0
14636 34B6                        00            .byte	0
14637 34B7                        00            .byte	0
14638 34B8                        00            .byte	0
14639 34B9                        00            .byte	0
14640                                           ! 1469  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14641 34BA                        00            .byte	0
14642 34BB                        00            .byte	0
14643 34BC                        00            .byte	0
14644 34BD                        00            .byte	0
14645 34BE                        00            .byte	0
14646 34BF                        00            .byte	0
14647 34C0                        00            .byte	0
14648 34C1                        18            .byte	$18
14649 34C2                        18            .byte	$18
14650 34C3                        00            .byte	0
14651 34C4                        00            .byte	0
14652 34C5                        00            .byte	0
14653 34C6                        00            .byte	0
14654 34C7                        00            .byte	0
14655 34C8                        00            .byte	0
14656 34C9                        00            .byte	0
14657                                           ! 1470  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14658 34CA                        00            .byte	0
14659 34CB                        00            .byte	0
14660 34CC                        00            .byte	0
14661 34CD                        00            .byte	0
14662 34CE                        00            .byte	0
14663 34CF                        00            .byte	0
14664 34D0                        00            .byte	0
14665 34D1                        00            .byte	0
14666 34D2                        18            .byte	$18
14667 34D3                        00            .byte	0
14668 34D4                        00            .byte	0
14669 34D5                        00            .byte	0
14670 34D6                        00            .byte	0
14671 34D7                        00            .byte	0
14672 34D8                        00            .byte	0
14673 34D9                        00            .byte	0
14674                                           ! 1471  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14675 34DA                        00            .byte	0
14676 34DB                        0F            .byte	$F
14677 34DC                        0C            .byte	$C
14678 34DD                        0C            .byte	$C
14679 34DE                        0C            .byte	$C
14680 34DF                        0C            .byte	$C
14681 34E0                        0C            .byte	$C
14682 34E1                        EC            .byte	$EC
14683 34E2                        6C            .byte	$6C
14684 34E3                        6C            .byte	$6C
14685 34E4                        3C            .byte	$3C
14686 34E5                        1C            .byte	$1C
14687 34E6                        00            .byte	0
14688 34E7                        00            .byte	0
14689 34E8                        00            .byte	0
14690 34E9                        00            .byte	0
14691                                           ! 1472  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14692 34EA                        00            .byte	0
14693 34EB                        D8            .byte	$D8
14694 34EC                        6C            .byte	$6C
14695 34ED                        6C            .byte	$6C
14696 34EE                        6C            .byte	$6C
14697 34EF                        6C            .byte	$6C
14698 34F0                        6C            .byte	$6C
14699 34F1                        00            .byte	0
14700 34F2                        00            .byte	0
14701 34F3                        00            .byte	0
14702 34F4                        00            .byte	0
14703 34F5                        00            .byte	0
14704 34F6                        00            .byte	0
14705 34F7                        00            .byte	0
14706 34F8                        00            .byte	0
14707 34F9                        00            .byte	0
14708                                           ! 1473  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14709 34FA                        00            .byte	0
14710 34FB                        70            .byte	$70
14711 34FC                        D8            .byte	$D8
14712 34FD                        30            .byte	$30
14713 34FE                        60            .byte	$60
14714 34FF                        C8            .byte	$C8
14715 3500                        F8            .byte	$F8
14716 3501                        00            .byte	0
14717 3502                        00            .byte	0
14718 3503                        00            .byte	0
14719 3504                        00            .byte	0
14720 3505                        00            .byte	0
14721 3506                        00            .byte	0
14722 3507                        00            .byte	0
14723 3508                        00            .byte	0
14724 3509                        00            .byte	0
14725                                           ! 1474  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
14726 350A                        00            .byte	0
14727 350B                        00            .byte	0
14728 350C                        00            .byte	0
14729 350D                        00            .byte	0
14730 350E                        7C            .byte	$7C
14731 350F                        7C            .byte	$7C
14732 3510                        7C            .byte	$7C
14733 3511                        7C            .byte	$7C
14734 3512                        7C            .byte	$7C
14735 3513                        7C            .byte	$7C
14736 3514                        7C            .byte	$7C
14737 3515                        00            .byte	0
14738 3516                        00            .byte	0
14739 3517                        00            .byte	0
14740 3518                        00            .byte	0
14741 3519                        00            .byte	0
14742                                           ! 1475  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
14743 351A                        00            .byte	0
14744 351B                        00            .byte	0
14745 351C                        00            .byte	0
14746 351D                        00            .byte	0
14747 351E                        00            .byte	0
14748 351F                        00            .byte	0
14749 3520                        00            .byte	0
14750 3521                        00            .byte	0
14751 3522                        00            .byte	0
14752 3523                        00            .byte	0
14753 3524                        00            .byte	0
14754 3525                        00            .byte	0
14755 3526                        00            .byte	0
14756 3527                        00            .byte	0
14757 3528                        00            .byte	0
14758                                           ! 1476 };
14759 3529                        00            .byte	0
14760                                           !BCC_EOS
14761                                           ! 1477 static Bit8u vgafont14alt[1]={0x00};
14762                       0000352A            _vgafont14alt:
14763 352A                        00            .byte	0
14764                                           !BCC_EOS
14765                                           ! 1478 static Bit8u vgafont16alt[1]={0x00};
14766                       0000352B            _vgafont16alt:
14767 352B                        00            .byte	0
14768                                           !BCC_EOS
14769                                           ! 1479 #asm
14770                                           !BCC_ASM
14771                       0000352C            init_vga_card:
14772                                           ;; switch to color mode and enable CPU access 480 lines
14773 352C           BA                   03C2    mov dx, #0x3C2
14774 352F           B0                     C3    mov al, #0xC3
14775 3531           EE                           outb dx,al
14776                                           ;; more than 64k 3C4/04
14777 3532           BA                   03C4    mov dx, #0x3C4
14778 3535           B0                     04    mov al, #0x04
14779 3537           EE                           outb dx,al
14780 3538           BA                   03C5    mov dx, #0x3C5
14781 353B           B0                     02    mov al, #0x02
14782 353D           EE                           outb dx,al
14783 353E           BB                   3548    mov bx, #msg_vga_init
14784 3541           53                           push bx
14785 3542           E8         4696              call _printf
14786 3545           44                           inc sp
14787 3546           44                           inc sp
14788 3547           C3                           ret
14789                       00003548            msg_vga_init:
14790 3548                        56            .ascii "VGABios $Id: vgabios.c,v 1.69 2009/04/07 18:18:20 vruppert Exp $"
14791 3588                        0D            .byte 0x0d,0x0a,0x00
14792                                           ! 1501 endasm
14793                                           !BCC_ENDASM
14794                                           ! 1502 #asm
14795                                           !BCC_ASM
14796                       0000358B            init_bios_area:
14797 358B           1E                           push ds
14798 358C           B8                   0040    mov ax, # 0x40
14799 358F           8ED8                         mov ds, ax
14800                                           ;; init detected hardware BIOS Area
14801 3591           BB                   0010    mov bx, # 0x10
14802 3594           8B07                         mov ax, [bx]
14803 3596           25                   FFCF    and ax, #0xffcf
14804                                           ;; set 80x25 color (not clear from RBIL but usual)
14805 3599           0D                   0020    or ax, #0x0020
14806 359C           8907                         mov [bx], ax
14807                                           ;; Just for the first int10 find its children
14808                                           ;; the default char height
14809 359E           BB                   0085    mov bx, # 0x85
14810 35A1           B0                     10    mov al, #0x10
14811 35A3           8807                         mov [bx], al
14812                                           ;; Clear the screen
14813 35A5           BB                   0087    mov bx, # 0x87
14814 35A8           B0                     60    mov al, #0x60
14815 35AA           8807                         mov [bx], al
14816                                           ;; Set the basic screen we have
14817 35AC           BB                   0088    mov bx, # 0x88
14818 35AF           B0                     F9    mov al, #0xf9
14819 35B1           8807                         mov [bx], al
14820                                           ;; Set the basic modeset options
14821 35B3           BB                   0089    mov bx, # 0x89
14822 35B6           B0                     51    mov al, #0x51
14823 35B8           8807                         mov [bx], al
14824                                           ;; Set the default MSR
14825 35BA           BB                   0065    mov bx, # 0x65
14826 35BD           B0                     09    mov al, #0x09
14827 35BF           8807                         mov [bx], al
14828 35C1           1F                           pop ds
14829 35C2           C3                           ret
14830                       000035C3            _video_save_pointer_table:
14831 35C3                      025A              .word _video_param_table
14832 35C5                      C000              .word 0xc000
14833 35C7                      0000              .word 0
14834 35C9                      0000              .word 0
14835 35CB                      0000              .word 0
14836 35CD                      0000              .word 0
14837 35CF                      0000              .word 0
14838 35D1                      0000              .word 0
14839 35D3                      0000              .word 0
14840 35D5                      0000              .word 0
14841 35D7                      0000              .word 0
14842 35D9                      0000              .word 0
14843 35DB                      0000              .word 0
14844 35DD                      0000              .word 0
14845                                           ! 1552 endasm
14846                                           !BCC_ENDASM
14847                                           ! 1553 static void display_splash_screen()
14848                                           ! 1554 {
14849                                           
14850                       000035DF            _display_splash_screen:
14851                                           ! 1555 }
14852 35DF           C3                         ret
14853                                           ! 1556 static void display_info()
14854                                           ! 1557 {
14855                       000035E0            _display_info:
14856                                           ! 1558 #asm
14857                                           !BCC_ASM
14858 35E0           B8                   C000   mov ax,#0xc000
14859 35E3           8ED8                        mov ds,ax
14860 35E5           BE                   0022   mov si,#vgabios_name
14861 35E8           E8         0013             call _display_string
14862 35EB           BE                   0038   mov si,#vgabios_version
14863 35EE           E8         000D             call _display_string
14864                                            ;;mov si,#vgabios_copyright
14865                                            ;;call _display_string
14866                                            ;;mov si,#crlf
14867                                            ;;call _display_string
14868 35F1           BE                   007E   mov si,#vgabios_license
14869 35F4           E8         0007             call _display_string
14870 35F7           BE                   00B3   mov si,#vgabios_website
14871 35FA           E8         0001             call _display_string
14872                                           ! 1573 endasm
14873                                           !BCC_ENDASM
14874                                           ! 1574 }
14875 35FD           C3                         ret
14876                                           ! 1575 static void display_string()
14877                                           ! 1576 {
14878                       000035FE            _display_string:
14879                                           ! 1577 #asm
14880                                           !BCC_ASM
14881 35FE           8CD8                        mov ax,ds
14882 3600           8EC0                        mov es,ax
14883 3602           89F7                        mov di,si
14884 3604           31C9                        xor cx,cx
14885 3606           F7D1                        not cx
14886 3608           30C0                        xor al,al
14887 360A           FC                          cld
14888 360B           F2                          repne
14889 360C           AE                           scasb
14890 360D           F7D1                        not cx
14891 360F           49                          dec cx
14892 3610           51                          push cx
14893 3611           B8                   0300   mov ax,#0x0300
14894 3614           BB                   0000   mov bx,#0x0000
14895 3617           CD                     10   int #0x10
14896 3619           59                          pop cx
14897 361A           B8                   1301   mov ax,#0x1301
14898 361D           BB                   000B   mov bx,#0x000b
14899 3620           89F5                        mov bp,si
14900 3622           CD                     10   int #0x10
14901                                           ! 1598 endasm
14902                                           !BCC_ENDASM
14903                                           ! 1599 }
14904 3624           C3                         ret
14905                                           ! 1600 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
14906                                           ! 1601   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
14907                       00003625            _int10_func:
14908                                           !BCC_EOS
14909                                           ! 1602 {
14910                                           ! 1603  switch(( AX >> 8 ))
14911 3625           55                         push	bp
14912 3626           89E5                       mov	bp,sp
14913                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
14914 3628           8B46         12            mov	ax,$12[bp]
14915 362B           88E0                       mov	al,ah
14916 362D           30E4                       xor	ah,ah
14917                                           ! 1604   {
14918 362F           E9         0433            br 	.3
14919                                           ! 1605    case 0x00:
14920                                           ! 1606      biosfn_set_video_mode(( AX & 0x00ff ));
14921                       00003632            .4:
14922                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14923 3632           8A46         12            mov	al,$12[bp]
14924                                           ! Debug: list unsigned char = al+0 (used reg = )
14925 3635           30E4                       xor	ah,ah
14926 3637           50                         push	ax
14927                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
14928 3638           E8         047C            call	_biosfn_set_video_mode
14929 363B           44                         inc	sp
14930 363C           44                         inc	sp
14931                                           !BCC_EOS
14932                                           ! 1607      switch(( AX & 0x00ff )&0x7F)
14933                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14934 363D           8A46         12            mov	al,$12[bp]
14935                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
14936 3640           24                     7F  and	al,*$7F
14937                                           ! 1608       {case 6:
14938 3642           EB           24            jmp .7
14939                                           ! 1609         AX = ((AX & 0xff00) | (0x3F));
14940                       00003644            .8:
14941                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14942 3644           8B46         12            mov	ax,$12[bp]
14943 3647           30C0                       xor	al,al
14944                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
14945 3649           0C                     3F  or	al,*$3F
14946                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14947 364B           8946         12            mov	$12[bp],ax
14948                                           !BCC_EOS
14949                                           ! 1610         break;
14950 364E           EB           3D            jmp .5
14951                                           !BCC_EOS
14952                                           ! 1611        case 0:
14953                                           ! 1612        case 1:
14954                       00003650            .9:
14955                                           ! 1613        case 2:
14956                       00003650            .A:
14957                                           ! 1614        case 3:
14958                       00003650            .B:
14959                                           ! 1615        case 4:
14960                       00003650            .C:
14961                                           ! 1616        case 5:
14962                       00003650            .D:
14963                                           ! 1617        case 7:
14964                       00003650            .E:
14965                                           ! 1618         AX = ((AX & 0xff00) | (0x30));
14966                       00003650            .F:
14967                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14968 3650           8B46         12            mov	ax,$12[bp]
14969 3653           30C0                       xor	al,al
14970                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
14971 3655           0C                     30  or	al,*$30
14972                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14973 3657           8946         12            mov	$12[bp],ax
14974                                           !BCC_EOS
14975                                           ! 1619         break;
14976 365A           EB           31            jmp .5
14977                                           !BCC_EOS
14978                                           ! 1620       default:
14979                                           ! 1621         AX = ((AX & 0xff00) | (0x20));
14980                       0000365C            .10:
14981                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14982 365C           8B46         12            mov	ax,$12[bp]
14983 365F           30C0                       xor	al,al
14984                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
14985 3661           0C                     20  or	al,*$20
14986                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14987 3663           8946         12            mov	$12[bp],ax
14988                                           !BCC_EOS
14989                                           ! 1622       }
14990                                           ! 1623      break;
14991 3666           EB           25            jmp .5
14992                       00003668            .7:
14993 3668           2C                     00  sub	al,*0
14994 366A           72           F0            jb 	.10
14995 366C           3C                     07  cmp	al,*7
14996 366E           77           1B            ja  	.11
14997 3670           30E4                       xor	ah,ah
14998 3672           D1E0                       shl	ax,*1
14999 3674           89C3                       mov	bx,ax
15000 3676           2E                         seg	cs
15001 3677           FFA7       367B            br	.12[bx]
15002                       0000367B            .12:
15003 367B                      3650            .word	.9
15004 367D                      3650            .word	.A
15005 367F                      3650            .word	.B
15006 3681                      3650            .word	.C
15007 3683                      3650            .word	.D
15008 3685                      3650            .word	.E
15009 3687                      3644            .word	.8
15010 3689                      3650            .word	.F
15011                       0000368B            .11:
15012 368B           EB           CF            jmp	.10
15013                       0000368D            .5:
15014 368D           E9         0425            br 	.1
15015                                           !BCC_EOS
15016                                           ! 1624    case 0x01:
15017                                           ! 1625      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15018                       00003690            .13:
15019                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15020 3690           8A46         10            mov	al,$10[bp]
15021                                           ! Debug: list unsigned char = al+0 (used reg = )
15022 3693           30E4                       xor	ah,ah
15023 3695           50                         push	ax
15024                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15025 3696           8B46         10            mov	ax,$10[bp]
15026 3699           88E0                       mov	al,ah
15027 369B           30E4                       xor	ah,ah
15028                                           ! Debug: list unsigned int = ax+0 (used reg = )
15029 369D           50                         push	ax
15030                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15031 369E           E8         0AA2            call	_biosfn_set_cursor_shape
15032 36A1           83C4                   04  add	sp,*4
15033                                           !BCC_EOS
15034                                           ! 1626      break;
15035 36A4           E9         040E            br 	.1
15036                                           !BCC_EOS
15037                                           ! 1627    case 0x02:
15038                                           ! 1628      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15039                       000036A7            .14:
15040                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15041 36A7           FF76         0E            push	$E[bp]
15042                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15043 36AA           8B46         0C            mov	ax,$C[bp]
15044 36AD           88E0                       mov	al,ah
15045 36AF           30E4                       xor	ah,ah
15046                                           ! Debug: list unsigned int = ax+0 (used reg = )
15047 36B1           50                         push	ax
15048                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15049 36B2           E8         0BA9            call	_biosfn_set_cursor_pos
15050 36B5           83C4                   04  add	sp,*4
15051                                           !BCC_EOS
15052                                           ! 1629      break;
15053 36B8           E9         03FA            br 	.1
15054                                           !BCC_EOS
15055                                           ! 1630    case 0x03:
15056                                           ! 1631      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15057                       000036BB            .15:
15058                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15059 36BB           8D5E         0E            lea	bx,$E[bp]
15060 36BE           53                         push	bx
15061                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15062 36BF           8D5E         10            lea	bx,$10[bp]
15063 36C2           53                         push	bx
15064                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15065 36C3           8B46         0C            mov	ax,$C[bp]
15066 36C6           88E0                       mov	al,ah
15067 36C8           30E4                       xor	ah,ah
15068                                           ! Debug: list unsigned int = ax+0 (used reg = )
15069 36CA           50                         push	ax
15070                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15071 36CB           E8         0C91            call	_biosfn_get_cursor_pos
15072 36CE           83C4                   06  add	sp,*6
15073                                           !BCC_EOS
15074                                           ! 1632      break;
15075 36D1           E9         03E1            br 	.1
15076                                           !BCC_EOS
15077                                           ! 1633    case 0x04:
15078                                           ! 1634      AX=0x00;
15079                       000036D4            .16:
15080                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15081 36D4           31C0                       xor	ax,ax
15082 36D6           8946         12            mov	$12[bp],ax
15083                                           !BCC_EOS
15084                                           ! 1635      BX=0x00;
15085                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15086 36D9           31C0                       xor	ax,ax
15087 36DB           8946         0C            mov	$C[bp],ax
15088                                           !BCC_EOS
15089                                           ! 1636      CX=0x00;
15090                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15091 36DE           31C0                       xor	ax,ax
15092 36E0           8946         10            mov	$10[bp],ax
15093                                           !BCC_EOS
15094                                           ! 1637      DX=0x00;
15095                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15096 36E3           31C0                       xor	ax,ax
15097 36E5           8946         0E            mov	$E[bp],ax
15098                                           !BCC_EOS
15099                                           ! 1638      break;
15100 36E8           E9         03CA            br 	.1
15101                                           !BCC_EOS
15102                                           ! 1639    case 0x05:
15103                                           ! 1640      biosfn_set_active_pa
15104                                           ! 1640 ge(( AX & 0x00ff ));
15105                       000036EB            .17:
15106                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15107 36EB           8A46         12            mov	al,$12[bp]
15108                                           ! Debug: list unsigned char = al+0 (used reg = )
15109 36EE           30E4                       xor	ah,ah
15110 36F0           50                         push	ax
15111                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15112 36F1           E8         0CE0            call	_biosfn_set_active_page
15113 36F4           44                         inc	sp
15114 36F5           44                         inc	sp
15115                                           !BCC_EOS
15116                                           ! 1641      break;
15117 36F6           E9         03BC            br 	.1
15118                                           !BCC_EOS
15119                                           ! 1642    case 0x06:
15120                                           ! 1643      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15121                       000036F9            .18:
15122                                           ! Debug: list int = const 1 (used reg = )
15123 36F9           B8                   0001  mov	ax,*1
15124 36FC           50                         push	ax
15125                                           ! Debug: list int = const $FF (used reg = )
15126 36FD           B8                   00FF  mov	ax,#$FF
15127 3700           50                         push	ax
15128                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15129 3701           8A46         0E            mov	al,$E[bp]
15130                                           ! Debug: list unsigned char = al+0 (used reg = )
15131 3704           30E4                       xor	ah,ah
15132 3706           50                         push	ax
15133                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15134 3707           8B46         0E            mov	ax,$E[bp]
15135 370A           88E0                       mov	al,ah
15136 370C           30E4                       xor	ah,ah
15137                                           ! Debug: list unsigned int = ax+0 (used reg = )
15138 370E           50                         push	ax
15139                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15140 370F           8A46         10            mov	al,$10[bp]
15141                                           ! Debug: list unsigned char = al+0 (used reg = )
15142 3712           30E4                       xor	ah,ah
15143 3714           50                         push	ax
15144                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15145 3715           8B46         10            mov	ax,$10[bp]
15146 3718           88E0                       mov	al,ah
15147 371A           30E4                       xor	ah,ah
15148                                           ! Debug: list unsigned int = ax+0 (used reg = )
15149 371C           50                         push	ax
15150                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15151 371D           8B46         0C            mov	ax,$C[bp]
15152 3720           88E0                       mov	al,ah
15153 3722           30E4                       xor	ah,ah
15154                                           ! Debug: list unsigned int = ax+0 (used reg = )
15155 3724           50                         push	ax
15156                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15157 3725           8A46         12            mov	al,$12[bp]
15158                                           ! Debug: list unsigned char = al+0 (used reg = )
15159 3728           30E4                       xor	ah,ah
15160 372A           50                         push	ax
15161                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15162 372B           E8         112A            call	_biosfn_scroll
15163 372E           83C4                   10  add	sp,*$10
15164                                           !BCC_EOS
15165                                           ! 1644      break;
15166 3731           E9         0381            br 	.1
15167                                           !BCC_EOS
15168                                           ! 1645    case 0x07:
15169                                           ! 1646      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15170                       00003734            .19:
15171                                           ! Debug: list int = const 0 (used reg = )
15172 3734           31C0                       xor	ax,ax
15173 3736           50                         push	ax
15174                                           ! Debug: list int = const $FF (used reg = )
15175 3737           B8                   00FF  mov	ax,#$FF
15176 373A           50                         push	ax
15177                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15178 373B           8A46         0E            mov	al,$E[bp]
15179                                           ! Debug: list unsigned char = al+0 (used reg = )
15180 373E           30E4                       xor	ah,ah
15181 3740           50                         push	ax
15182                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15183 3741           8B46         0E            mov	ax,$E[bp]
15184 3744           88E0                       mov	al,ah
15185 3746           30E4                       xor	ah,ah
15186                                           ! Debug: list unsigned int = ax+0 (used reg = )
15187 3748           50                         push	ax
15188                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15189 3749           8A46         10            mov	al,$10[bp]
15190                                           ! Debug: list unsigned char = al+0 (used reg = )
15191 374C           30E4                       xor	ah,ah
15192 374E           50                         push	ax
15193                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15194 374F           8B46         10            mov	ax,$10[bp]
15195 3752           88E0                       mov	al,ah
15196 3754           30E4                       xor	ah,ah
15197                                           ! Debug: list unsigned int = ax+0 (used reg = )
15198 3756           50                         push	ax
15199                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15200 3757           8B46         0C            mov	ax,$C[bp]
15201 375A           88E0                       mov	al,ah
15202 375C           30E4                       xor	ah,ah
15203                                           ! Debug: list unsigned int = ax+0 (used reg = )
15204 375E           50                         push	ax
15205                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15206 375F           8A46         12            mov	al,$12[bp]
15207                                           ! Debug: list unsigned char = al+0 (used reg = )
15208 3762           30E4                       xor	ah,ah
15209 3764           50                         push	ax
15210                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15211 3765           E8         10F0            call	_biosfn_scroll
15212 3768           83C4                   10  add	sp,*$10
15213                                           !BCC_EOS
15214                                           ! 1647      break;
15215 376B           E9         0347            br 	.1
15216                                           !BCC_EOS
15217                                           ! 1648    case 0x08:
15218                                           ! 1649      biosfn_read_char_attr(( BX >> 8 ),&AX);
15219                       0000376E            .1A:
15220                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15221 376E           8D5E         12            lea	bx,$12[bp]
15222 3771           53                         push	bx
15223                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15224 3772           8B46         0C            mov	ax,$C[bp]
15225 3775           88E0                       mov	al,ah
15226 3777           30E4                       xor	ah,ah
15227                                           ! Debug: list unsigned int = ax+0 (used reg = )
15228 3779           50                         push	ax
15229                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15230 377A           E8         17EE            call	_biosfn_read_char_attr
15231 377D           83C4                   04  add	sp,*4
15232                                           !BCC_EOS
15233                                           ! 1650      break;
15234 3780           E9         0332            br 	.1
15235                                           !BCC_EOS
15236                                           ! 1651    case 0x09:
15237                                           ! 1652      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15238                       00003783            .1B:
15239                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15240 3783           FF76         10            push	$10[bp]
15241                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15242 3786           8A46         0C            mov	al,$C[bp]
15243                                           ! Debug: list unsigned char = al+0 (used reg = )
15244 3789           30E4                       xor	ah,ah
15245 378B           50                         push	ax
15246                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15247 378C           8B46         0C            mov	ax,$C[bp]
15248 378F           88E0                       mov	al,ah
15249 3791           30E4                       xor	ah,ah
15250                                           ! Debug: list unsigned int = ax+0 (used reg = )
15251 3793           50                         push	ax
15252                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15253 3794           8A46         12            mov	al,$12[bp]
15254                                           ! Debug: list unsigned char = al+0 (used reg = )
15255 3797           30E4                       xor	ah,ah
15256 3799           50                         push	ax
15257                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15258 379A           E8         1D19            call	_biosfn_write_char_attr
15259 379D           83C4                   08  add	sp,*8
15260                                           !BCC_EOS
15261                                           ! 1653      break;
15262 37A0           E9         0312            br 	.1
15263                                           !BCC_EOS
15264                                           ! 1654    case 0x0A:
15265                                           ! 1655      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15266                       000037A3            .1C:
15267                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15268 37A3           FF76         10            push	$10[bp]
15269                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15270 37A6           8A46         0C            mov	al,$C[bp]
15271                                           ! Debug: list unsigned char = al+0 (used reg = )
15272 37A9           30E4                       xor	ah,ah
15273 37AB           50                         push	ax
15274                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15275 37AC           8B46         0C            mov	ax,$C[bp]
15276 37AF           88E0                       mov	al,ah
15277 37B1           30E4                       xor	ah,ah
15278                                           ! Debug: list unsigned int = ax+0 (used reg = )
15279 37B3           50                         push	ax
15280                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15281 37B4           8A46         12            mov	al,$12[bp]
15282                                           ! Debug: list unsigned char = al+0 (used reg = )
15283 37B7           30E4                       xor	ah,ah
15284 37B9           50                         push	ax
15285                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15286 37BA           E8         1EEE            call	_biosfn_write_char_only
15287 37BD           83C4                   08  add	sp,*8
15288                                           !BCC_EOS
15289                                           ! 1656      break;
15290 37C0           E9         02F2            br 	.1
15291                                           !BCC_EOS
15292                                           ! 1657    case 0x0C:
15293                                           ! 1658      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15294                       000037C3            .1D:
15295                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15296 37C3           FF76         0E            push	$E[bp]
15297                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15298 37C6           FF76         10            push	$10[bp]
15299                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15300 37C9           8A46         12            mov	al,$12[bp]
15301                                           ! Debug: list unsigned char = al+0 (used reg = )
15302 37CC           30E4                       xor	ah,ah
15303 37CE           50                         push	ax
15304                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15305 37CF           8B46         0C            mov	ax,$C[bp]
15306 37D2           88E0                       mov	al,ah
15307 37D4           30E4                       xor	ah,ah
15308                                           ! Debug: list unsigned int = ax+0 (used reg = )
15309 37D6           50                         push	ax
15310                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15311 37D7           E8         2142            call	_biosfn_write_pixel
15312 37DA           83C4                   08  add	sp,*8
15313                                           !BCC_EOS
15314                                           ! 1659      break;
15315 37DD           E9         02D5            br 	.1
15316                                           !BCC_EOS
15317                                           ! 1660    case 0x0D:
15318                                           ! 1661      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15319                       000037E0            .1E:
15320                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15321 37E0           8D5E         12            lea	bx,$12[bp]
15322 37E3           53                         push	bx
15323                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15324 37E4           FF76         0E            push	$E[bp]
15325                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15326 37E7           FF76         10            push	$10[bp]
15327                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15328 37EA           8B46         0C            mov	ax,$C[bp]
15329 37ED           88E0                       mov	al,ah
15330 37EF           30E4                       xor	ah,ah
15331                                           ! Debug: list unsigned int = ax+0 (used reg = )
15332 37F1           50                         push	ax
15333                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15334 37F2           E8         23C6            call	_biosfn_read_pixel
15335 37F5           83C4                   08  add	sp,*8
15336                                           !BCC_EOS
15337                                           ! 1662      break;
15338 37F8           E9         02BA            br 	.1
15339                                           !BCC_EOS
15340                                           ! 1663    case 0x0E:
15341                                           ! 1664      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15342                       000037FB            .1F:
15343                                           ! Debug: list int = const 2 (used reg = )
15344 37FB           B8                   0002  mov	ax,*2
15345 37FE           50                         push	ax
15346                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15347 37FF           8A46         0C            mov	al,$C[bp]
15348                                           ! Debug: list unsigned char = al+0 (used reg = )
15349 3802           30E4                       xor	ah,ah
15350 3804           50                         push	ax
15351                                           ! Debug: list int = const $FF (used reg = )
15352 3805           B8                   00FF  mov	ax,#$FF
15353 3808           50                         push	ax
15354                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15355 3809           8A46         12            mov	al,$12[bp]
15356                                           ! Debug: list unsigned char = al+0 (used reg = )
15357 380C           30E4                       xor	ah,ah
15358 380E           50                         push	ax
15359                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15360 380F           E8         25B2            call	_biosfn_write_teletype
15361 3812           83C4                   08  add	sp,*8
15362                                           !BCC_EOS
15363                                           ! 1665      break;
15364 3815           E9         029D            br 	.1
15365                                           !BCC_EOS
15366                                           ! 1666    case 0x10:
15367                                           ! 1667      biosfn_perform_gray_scale_summing(BX,CX);
15368                       00003818            .20:
15369                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15370 3818           FF76         10            push	$10[bp]
15371                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15372 381B           FF76         0C            push	$C[bp]
15373                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15374 381E           E8         2C19            call	_biosfn_perform_gray_scale_summing
15375 3821           83C4                   04  add	sp,*4
15376                                           !BCC_EOS
15377                                           ! 1668      break;
15378 3824           E9         028E            br 	.1
15379                                           !BCC_EOS
15380                                           ! 1669    case 0x11:
15381                                           ! 1670      switch(( AX & 0x00ff ))
15382                       00003827            .21:
15383                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15384 3827           8A46         12            mov	al,$12[bp]
15385                                           ! 1671       {
15386 382A           E9         00E1            br 	.24
15387                                           ! 1672        case 0x00:
15388                                           ! 1673        case 0x10:
15389                       0000382D            .25:
15390                                           ! 1674         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15391                       0000382D            .26:
15392                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15393 382D           8B46         0C            mov	ax,$C[bp]
15394 3830           88E0                       mov	al,ah
15395 3832           30E4                       xor	ah,ah
15396                                           ! Debug: list unsigned int = ax+0 (used reg = )
15397 3834           50                         push	ax
15398                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15399 3835           8A46         0C            mov	al,$C[bp]
15400                                           ! Debug: list unsigned char = al+0 (used reg = )
15401 3838           30E4                       xor	ah,ah
15402 383A           50                         push	ax
15403                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15404 383B           FF76         0E            push	$E[bp]
15405                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15406 383E           FF76         10            push	$10[bp]
15407                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15408 3841           FF76         08            push	8[bp]
15409                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15410 3844           FF76         16            push	$16[bp]
15411                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15412 3847           8A46         12            mov	al,$12[bp]
15413                                           ! Debug: list unsigned char = al+0 (used reg = )
15414 384A           30E4                       xor	ah,ah
15415 384C           50                         push	ax
15416                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15417 384D           E8         2E93            call	_biosfn_load_text_user_pat
15418 3850           83C4                   0E  add	sp,*$E
15419                                           !BCC_EOS
15420                                           ! 1675         break;
15421 3853           E9         011A            br 	.22
15422                                           !BCC_EOS
15423                                           ! 1676        case 0x01:
15424                                           ! 1677        case 0x11:
15425                       00003856            .27:
15426                                           ! 1678         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15427                       00003856            .28:
15428                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15429 3856           8A46         0C            mov	al,$C[bp]
15430                                           ! Debug: list unsigned char = al+0 (used reg = )
15431 3859           30E4                       xor	ah,ah
15432 385B           50                         push	ax
15433                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15434 385C           8A46         12            mov	al,$12[bp]
15435                                           ! Debug: list unsigned char = al+0 (used reg = )
15436 385F           30E4                       xor	ah,ah
15437 3861           50                         push	ax
15438                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15439 3862           E8         2F1A            call	_biosfn_load_text_8_14_pat
15440 3865           83C4                   04  add	sp,*4
15441                                           !BCC_EOS
15442                                           ! 1679         break;
15443 3868           E9         0105            br 	.22
15444                                           !BCC_EOS
15445                                           ! 1680        case 0x02:
15446                                           ! 1681        case 0x12:
15447                       0000386B            .29:
15448                                           ! 1682         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15449                       0000386B            .2A:
15450                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15451 386B           8A46         0C            mov	al,$C[bp]
15452                                           ! Debug: list unsigned char = al+0 (used reg = )
15453 386E           30E4                       xor	ah,ah
15454 3870           50                         push	ax
15455                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15456 3871           8A46         12            mov	al,$12[bp]
15457                                           ! Debug: list unsigned char = al+0 (used reg = )
15458 3874           30E4                       xor	ah,ah
15459 3876           50                         push	ax
15460                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15461 3877           E8         2F9C            call	_biosfn_load_text_8_8_pat
15462 387A           83C4                   04  add	sp,*4
15463                                           !BCC_EOS
15464                                           ! 1683         break;
15465 387D           E9         00F0            br 	.22
15466                                           !BCC_EOS
15467                                           ! 1684        case 0x04:
15468                                           ! 1685        case 0x14:
15469                       00003880            .2B:
15470                                           ! 1686         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15471                       00003880            .2C:
15472                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15473 3880           8A46         0C            mov	al,$C[bp]
15474                                           ! Debug: list unsigned char = al+0 (used reg = )
15475 3883           30E4                       xor	ah,ah
15476 3885           50                         push	ax
15477                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15478 3886           8A46         12            mov	al,$12[bp]
15479                                           ! Debug: list unsigned char = al+0 (used reg = )
15480 3889           30E4                       xor	ah,ah
15481 388B           50                         push	ax
15482                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15483 388C           E8         3025            call	_biosfn_load_text_8_16_pat
15484 388F           83C4                   04  add	sp,*4
15485                                           !BCC_EOS
15486                                           ! 1687         break;
15487 3892           E9         00DB            br 	.22
15488                                           !BCC_EOS
15489                                           ! 1688        case 0x20:
15490                                           ! 1689         biosfn_load_gfx_8_8_chars(ES,BP);
15491                       00003895            .2D:
15492                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15493 3895           FF76         08            push	8[bp]
15494                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15495 3898           FF76         16            push	$16[bp]
15496                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15497 389B           E8         30A7            call	_biosfn_load_gfx_8_8_chars
15498 389E           83C4                   04  add	sp,*4
15499                                           !BCC_EOS
15500                                           ! 1690         break;
15501 38A1           E9         00CC            br 	.22
15502                                           !BCC_EOS
15503                                           ! 1691        case 0x21:
15504                                           ! 1692         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15505                       000038A4            .2E:
15506                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15507 38A4           8A46         0E            mov	al,$E[bp]
15508                                           ! Debug: list unsigned char = al+0 (used reg = )
15509 38A7           30E4                       xor	ah,ah
15510 38A9           50                         push	ax
15511                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15512 38AA           8A46         0C            mov	al,$C[bp]
15513                                           ! Debug: list unsigned char = al+0 (used reg = )
15514 38AD           30E4                       xor	ah,ah
15515 38AF           50                         push	ax
15516                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15517 38B0           FF76         10            push	$10[bp]
15518                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15519 38B3           FF76         08            push	8[bp]
15520                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15521 38B6           FF76         16            push	$16[bp]
15522                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15523 38B9           E8         308A            call	_biosfn_load_gfx_user_chars
15524 38BC           83C4                   0A  add	sp,*$A
15525                                           !BCC_EOS
15526                                           ! 1693         break;
15527 38BF           E9         00AE            br 	.22
15528                                           !BCC_EOS
15529                                           ! 1694        case 0x22:
15530                                           ! 1695         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15531                       000038C2            .2F:
15532                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15533 38C2           8A46         0C            mov	al,$C[bp]
15534                                           ! Debug: list unsigned char = al+0 (used reg = )
15535 38C5           30E4                       xor	ah,ah
15536 38C7           50                         push	ax
15537                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15538 38C8           E8         307C            call	_biosfn_load_gfx_8_14_chars
15539 38CB           44                         inc	sp
15540 38CC           44                         inc	sp
15541                                           !BCC_EOS
15542                                           ! 1696         break;
15543 38CD           E9         00A0            br 	.22
15544                                           !BCC_EOS
15545                                           ! 1697        case 0x23:
15546                                           ! 1698         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15547                       000038D0            .30:
15548                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15549 38D0           8A46         0C            mov	al,$C[bp]
15550                                           ! Debug: list unsigned char = al+0 (used reg = )
15551 38D3           30E4                       xor	ah,ah
15552 38D5           50                         push	ax
15553                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15554 38D6           E8         306F            call	_biosfn_load_gfx_8_8_dd_chars
15555 38D9           44                         inc	sp
15556 38DA           44                         inc	sp
15557                                           !BCC_EOS
15558                                           ! 1699         break;
15559 38DB           E9         0092            br 	.22
15560                                           !BCC_EOS
15561                                           ! 1700        case 0x24:
15562                                           ! 1701         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15563                       000038DE            .31:
15564                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15565 38DE           8A46         0C            mov	al,$C[bp]
15566                                           ! Debug: list unsigned char = al+0 (used reg = )
15567 38E1           30E4                       xor	ah,ah
15568 38E3           50                         push	ax
15569                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15570 38E4           E8         3062            call	_biosfn_load_gfx_8_16_chars
15571 38E7           44                         inc	sp
15572 38E8           44                         inc	sp
15573                                           !BCC_EOS
15574                                           ! 1702         break;
15575 38E9           E9         0084            br 	.22
15576                                           !BCC_EOS
15577                                           ! 1703        case 0x30:
15578                                           ! 1704         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15579                       000038EC            .32:
15580                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15581 38EC           8D5E         0E            lea	bx,$E[bp]
15582 38EF           53                         push	bx
15583                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15584 38F0           8D5E         10            lea	bx,$10[bp]
15585 38F3           53                         push	bx
15586                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15587 38F4           8D5E         08            lea	bx,8[bp]
15588 38F7           53                         push	bx
15589                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15590 38F8           8D5E         16            lea	bx,$16[bp]
15591 38FB           53                         push	bx
15592                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15593 38FC           8B46         0C            mov	ax,$C[bp]
15594 38FF           88E0                       mov	al,ah
15595 3901           30E4                       xor	ah,ah
15596                                           ! Debug: list unsigned int = ax+0 (used reg = )
15597 3903           50                         push	ax
15598                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15599 3904           E8         3043            call	_biosfn_get_font_info
15600 3907           83C4                   0A  add	sp,*$A
15601                                           !BCC_EOS
15602                                           ! 1705         break;
15603 390A           EB           64            jmp .22
15604                                           !BCC_EOS
15605                                           ! 1706       }
15606                                           ! 1707      break;
15607 390C           EB           62            jmp .22
15608                       0000390E            .24:
15609 390E           2C                     00  sub	al,*0
15610 3910   7503    E9         FF18            beq 	.25
15611 3915           2C                     01  sub	al,*1
15612 3917   7503    E9         FF3A            beq 	.27
15613 391C           2C                     01  sub	al,*1
15614 391E   7503    E9         FF48            beq 	.29
15615 3923           2C                     02  sub	al,*2
15616 3925   7503    E9         FF56            beq 	.2B
15617 392A           2C                     0C  sub	al,*$C
15618 392C   7503    E9         FEFC            beq 	.26
15619 3931           2C                     01  sub	al,*1
15620 3933   7503    E9         FF1E            beq 	.28
15621 3938           2C                     01  sub	al,*1
15622 393A   7503    E9         FF2C            beq 	.2A
15623 393F           2C                     02  sub	al,*2
15624 3941   7503    E9         FF3A            beq 	.2C
15625 3946           2C                     0C  sub	al,*$C
15626 3948   7503    E9         FF48            beq 	.2D
15627 394D           2C                     01  sub	al,*1
15628 394F   7503    E9         FF50            beq 	.2E
15629 3954           2C                     01  sub	al,*1
15630 3956   7503    E9         FF67            beq 	.2F
15631 395B           2C                     01  sub	al,*1
15632 395D   7503    E9         FF6E            beq 	.30
15633 3962           2C                     01  sub	al,*1
15634 3964   7503    E9         FF75            beq 	.31
15635 3969           2C                     0C  sub	al,*$C
15636 396B   7503    E9         FF7C            beq 	.32
15637                       00003970            .22:
15638 3970           E9         0142            br 	.1
15639                                           !BCC_EOS
15640                                           ! 1708    case 0x12:
15641                                           ! 1709      switch(( 
15642                       00003973            .33:
15643                                           ! 1709 BX & 0x00ff ))
15644                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15645 3973           8A46         0C            mov	al,$C[bp]
15646                                           ! 1710       {
15647 3976           EB           3C            jmp .36
15648                                           ! 1711        case 0x20:
15649                                           ! 1712         biosfn_alternate_prtsc();
15650                       00003978            .37:
15651                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15652 3978           E8         31A9            call	_biosfn_alternate_prtsc
15653                                           !BCC_EOS
15654                                           ! 1713         break;
15655 397B           EB           43            jmp .34
15656                                           !BCC_EOS
15657                                           ! 1714        case 0x35:
15658                                           ! 1715         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
15659                       0000397D            .38:
15660                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15661 397D           FF76         0E            push	$E[bp]
15662                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15663 3980           FF76         16            push	$16[bp]
15664                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15665 3983           8A46         12            mov	al,$12[bp]
15666                                           ! Debug: list unsigned char = al+0 (used reg = )
15667 3986           30E4                       xor	ah,ah
15668 3988           50                         push	ax
15669                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15670 3989           E8         3275            call	_biosfn_switch_video_interface
15671 398C           83C4                   06  add	sp,*6
15672                                           !BCC_EOS
15673                                           ! 1716         AX = ((AX & 0xff00) | (0x12));
15674                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15675 398F           8B46         12            mov	ax,$12[bp]
15676 3992           30C0                       xor	al,al
15677                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15678 3994           0C                     12  or	al,*$12
15679                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15680 3996           8946         12            mov	$12[bp],ax
15681                                           !BCC_EOS
15682                                           ! 1717         break;
15683 3999           EB           25            jmp .34
15684                                           !BCC_EOS
15685                                           ! 1718        case 0x36:
15686                                           ! 1719         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15687                       0000399B            .39:
15688                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15689 399B           8A46         12            mov	al,$12[bp]
15690                                           ! Debug: list unsigned char = al+0 (used reg = )
15691 399E           30E4                       xor	ah,ah
15692 39A0           50                         push	ax
15693                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15694 39A1           E8         325E            call	_biosfn_enable_video_refresh_control
15695 39A4           44                         inc	sp
15696 39A5           44                         inc	sp
15697                                           !BCC_EOS
15698                                           ! 1720         AX = ((AX & 0xff00) | (0x12));
15699                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15700 39A6           8B46         12            mov	ax,$12[bp]
15701 39A9           30C0                       xor	al,al
15702                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15703 39AB           0C                     12  or	al,*$12
15704                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15705 39AD           8946         12            mov	$12[bp],ax
15706                                           !BCC_EOS
15707                                           ! 1721         break;
15708 39B0           EB           0E            jmp .34
15709                                           !BCC_EOS
15710                                           ! 1722       }
15711                                           ! 1723      break;
15712 39B2           EB           0C            jmp .34
15713                       000039B4            .36:
15714 39B4           2C                     20  sub	al,*$20
15715 39B6           74           C0            je 	.37
15716 39B8           2C                     15  sub	al,*$15
15717 39BA           74           C1            je 	.38
15718 39BC           2C                     01  sub	al,*1
15719 39BE           74           DB            je 	.39
15720                       000039C0            .34:
15721 39C0           E9         00F2            br 	.1
15722                                           !BCC_EOS
15723                                           ! 1724    case 0x13:
15724                                           ! 1725      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
15725                       000039C3            .3A:
15726                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15727 39C3           FF76         08            push	8[bp]
15728                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15729 39C6           FF76         16            push	$16[bp]
15730                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15731 39C9           8A46         0E            mov	al,$E[bp]
15732                                           ! Debug: list unsigned char = al+0 (used reg = )
15733 39CC           30E4                       xor	ah,ah
15734 39CE           50                         push	ax
15735                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15736 39CF           8B46         0E            mov	ax,$E[bp]
15737 39D2           88E0                       mov	al,ah
15738 39D4           30E4                       xor	ah,ah
15739                                           ! Debug: list unsigned int = ax+0 (used reg = )
15740 39D6           50                         push	ax
15741                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
15742 39D7           FF76         10            push	$10[bp]
15743                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
15744 39DA           8A46         0C            mov	al,$C[bp]
15745                                           ! Debug: list unsigned char = al+0 (used reg = )
15746 39DD           30E4                       xor	ah,ah
15747 39DF           50                         push	ax
15748                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15749 39E0           8B46         0C            mov	ax,$C[bp]
15750 39E3           88E0                       mov	al,ah
15751 39E5           30E4                       xor	ah,ah
15752                                           ! Debug: list unsigned int = ax+0 (used reg = )
15753 39E7           50                         push	ax
15754                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15755 39E8           8A46         12            mov	al,$12[bp]
15756                                           ! Debug: list unsigned char = al+0 (used reg = )
15757 39EB           30E4                       xor	ah,ah
15758 39ED           50                         push	ax
15759                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
15760 39EE           E8         3212            call	_biosfn_write_string
15761 39F1           83C4                   10  add	sp,*$10
15762                                           !BCC_EOS
15763                                           ! 1726      break;
15764 39F4           E9         00BE            br 	.1
15765                                           !BCC_EOS
15766                                           ! 1727    case 0x1B:
15767                                           ! 1728      biosfn_read_state_info(BX,ES,DI);
15768                       000039F7            .3B:
15769                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
15770 39F7           FF76         04            push	4[bp]
15771                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15772 39FA           FF76         16            push	$16[bp]
15773                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15774 39FD           FF76         0C            push	$C[bp]
15775                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
15776 3A00           E8         330C            call	_biosfn_read_state_info
15777 3A03           83C4                   06  add	sp,*6
15778                                           !BCC_EOS
15779                                           ! 1729      AX = ((AX & 0xff00) | (0x1B));
15780                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15781 3A06           8B46         12            mov	ax,$12[bp]
15782 3A09           30C0                       xor	al,al
15783                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
15784 3A0B           0C                     1B  or	al,*$1B
15785                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15786 3A0D           8946         12            mov	$12[bp],ax
15787                                           !BCC_EOS
15788                                           ! 1730      break;
15789 3A10           E9         00A2            br 	.1
15790                                           !BCC_EOS
15791                                           ! 1731    case 0x1C:
15792                                           ! 1732      switch(( AX & 0x00ff ))
15793                       00003A13            .3C:
15794                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15795 3A13           8A46         12            mov	al,$12[bp]
15796                                           ! 1733       {
15797 3A16           EB           33            jmp .3F
15798                                           ! 1734        case 0x00:
15799                                           ! 1735         biosfn_read_video_state_size(CX,&BX);
15800                       00003A18            .40:
15801                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
15802 3A18           8D5E         0C            lea	bx,$C[bp]
15803 3A1B           53                         push	bx
15804                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15805 3A1C           FF76         10            push	$10[bp]
15806                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
15807 3A1F           E8         346C            call	_biosfn_read_video_state_size
15808 3A22           83C4                   04  add	sp,*4
15809                                           !BCC_EOS
15810                                           ! 1736         break;
15811 3A25           EB           30            jmp .3D
15812                                           !BCC_EOS
15813                                           ! 1737        case 0x01:
15814                                           ! 1738         biosfn_save_video_state(CX,ES,BX);
15815                       00003A27            .41:
15816                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15817 3A27           FF76         0C            push	$C[bp]
15818                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15819 3A2A           FF76         16            push	$16[bp]
15820                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15821 3A2D           FF76         10            push	$10[bp]
15822                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
15823 3A30           E8         347F            call	_biosfn_save_video_state
15824 3A33           83C4                   06  add	sp,*6
15825                                           !BCC_EOS
15826                                           ! 1739         break;
15827 3A36           EB           1F            jmp .3D
15828                                           !BCC_EOS
15829                                           ! 1740        case 0x02:
15830                                           ! 1741         biosfn_restore_video_state(CX,ES,BX);
15831                       00003A38            .42:
15832                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15833 3A38           FF76         0C            push	$C[bp]
15834                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15835 3A3B           FF76         16            push	$16[bp]
15836                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15837 3A3E           FF76         10            push	$10[bp]
15838                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
15839 3A41           E8         3A3B            call	_biosfn_restore_video_state
15840 3A44           83C4                   06  add	sp,*6
15841                                           !BCC_EOS
15842                                           ! 1742         break;
15843 3A47           EB           0E            jmp .3D
15844                                           !BCC_EOS
15845                                           ! 1743       }
15846                                           ! 1744      AX = ((AX & 0xff00) | (0x1C));
15847 3A49           EB           0C            jmp .3D
15848                       00003A4B            .3F:
15849 3A4B           2C                     00  sub	al,*0
15850 3A4D           74           C9            je 	.40
15851 3A4F           2C                     01  sub	al,*1
15852 3A51           74           D4            je 	.41
15853 3A53           2C                     01  sub	al,*1
15854 3A55           74           E1            je 	.42
15855                       00003A57            .3D:
15856                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15857 3A57           8B46         12            mov	ax,$12[bp]
15858 3A5A           30C0                       xor	al,al
15859                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
15860 3A5C           0C                     1C  or	al,*$1C
15861                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15862 3A5E           8946         12            mov	$12[bp],ax
15863                                           !BCC_EOS
15864                                           ! 1745      break;
15865 3A61           EB           52            jmp .1
15866                                           !BCC_EOS
15867                                           ! 1746   }
15868                                           ! 1747 }
15869 3A63           EB           50            jmp .1
15870                       00003A65            .3:
15871 3A65           2D                   0000  sub	ax,*0
15872 3A68           7C           4B            jl  	.1
15873 3A6A           3D                   001C  cmp	ax,*$1C
15874 3A6D   7603    E9         0043            bhi 	.43
15875 3A72           D1E0                       shl	ax,*1
15876 3A74           89C3                       mov	bx,ax
15877 3A76           2E                         seg	cs
15878 3A77           FFA7       3A7B            br	.44[bx]
15879                       00003A7B            .44:
15880 3A7B                      3632            .word	.4
15881 3A7D                      3690            .word	.13
15882 3A7F                      36A7            .word	.14
15883 3A81                      36BB            .word	.15
15884 3A83                      36D4            .word	.16
15885 3A85                      36EB            .word	.17
15886 3A87                      36F9            .word	.18
15887 3A89                      3734            .word	.19
15888 3A8B                      376E            .word	.1A
15889 3A8D                      3783            .word	.1B
15890 3A8F                      37A3            .word	.1C
15891 3A91                      3AB5            .word	.1
15892 3A93                      37C3            .word	.1D
15893 3A95                      37E0            .word	.1E
15894 3A97                      37FB            .word	.1F
15895 3A99                      3AB5            .word	.1
15896 3A9B                      3818            .word	.20
15897 3A9D                      3827            .word	.21
15898 3A9F                      3973            .word	.33
15899 3AA1                      39C3            .word	.3A
15900 3AA3                      3AB5            .word	.1
15901 3AA5                      3AB5            .word	.1
15902 3AA7                      3AB5            .word	.1
15903 3AA9                      3AB5            .word	.1
15904 3AAB                      3AB5            .word	.1
15905 3AAD                      3AB5            .word	.1
15906 3AAF                      3AB5            .word	.1
15907 3AB1                      39F7            .word	.3B
15908 3AB3                      3A13            .word	.3C
15909                       00003AB5            .43:
15910                       00003AB5            .1:
15911                       FFFFFFFE            ..FFFF	=	-2
15912 3AB5           5D                         pop	bp
15913 3AB6           C3                         ret
15914                                           ! 1748 static void biosfn_set_video_mode(mode) Bit8u mode;
15915                                           ! Register BX used in function int10_func
15916                       00003AB7            _biosfn_set_video_mode:
15917                                           !BCC_EOS
15918                                           ! 1749 {
15919                                           ! 1750  Bit8u noclearmem=mode&0x80;
15920 3AB7           55                         push	bp
15921 3AB8           89E5                       mov	bp,sp
15922 3ABA           4C                         dec	sp
15923                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
15924 3ABB           8A46         04            mov	al,4[bp]
15925 3ABE           24                     80  and	al,#$80
15926                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
15927 3AC0           8846         FF            mov	-1[bp],al
15928                                           !BCC_EOS
15929                                           ! 1751  Bit8u line,mmask,*palette,vpti;
15930                                           !BCC_EOS
15931                                           ! 1752  Bit16u i,twidth,theightm1,cheight;
15932                                           !BCC_EOS
15933                                           ! 1753  Bit8u modeset_ctl,video_ctl,vga_switches;
15934                                           !BCC_EOS
15935                                           ! 1754  Bit16u crtc_addr;
15936                                           !BCC_EOS
15937                                           ! 1755  mode=mode&0x7f;
15938 3AC3           83C4                   EB  add	sp,*-$15
15939                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
15940 3AC6           8A46         04            mov	al,4[bp]
15941 3AC9           24                     7F  and	al,*$7F
15942                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
15943 3ACB           8846         04            mov	4[bp],al
15944                                           !BCC_EOS
15945                                           ! 1756  line=find_vga_entry(mode);
15946                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
15947 3ACE           8A46         04            mov	al,4[bp]
15948 3AD1           30E4                       xor	ah,ah
15949 3AD3           50                         push	ax
15950                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
15951 3AD4           E8         3F89            call	_find_vga_entry
15952 3AD7           44                         inc	sp
15953 3AD8           44                         inc	sp
15954                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
15955 3AD9           8846         FE            mov	-2[bp],al
15956                                           !BCC_EOS
15957                                           ! 1757  if(line==0xFF)
15958                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
15959 3ADC           8A46         FE            mov	al,-2[bp]
15960 3ADF           3C                     FF  cmp	al,#$FF
15961 3AE1           75           04            jne 	.45
15962                       00003AE3            .46:
15963                                           ! 1758   return;
15964 3AE3           89EC                       mov	sp,bp
15965 3AE5           5D                         pop	bp
15966 3AE6           C3                         ret
15967                                           !BCC_EOS
15968                                           ! 1759  vpti=line_to_vpti[line];
15969                       00003AE7            .45:
15970                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
15971 3AE7           8A46         FE            mov	al,-2[bp]
15972 3AEA           30E4                       xor	ah,ah
15973 3AEC           89C3                       mov	bx,ax
15974                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
15975 3AEE           8A87       0246            mov	al,_line_to_vpti[bx]
15976 3AF2           8846         F9            mov	-7[bp],al
15977                                           !BCC_EOS
15978                                           ! 1760  twidth=video_param_table[vpti].twidth;
15979                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
15980 3AF5           8A46         F9            mov	al,-7[bp]
15981 3AF8           30E4                       xor	ah,ah
15982 3AFA           B1                     06  mov	cl,*6
15983 3AFC           D3E0                       shl	ax,cl
15984 3AFE           89C3                       mov	bx,ax
15985                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
15986 3B00           8A87       025A            mov	al,_video_param_table[bx]
15987 3B04           30E4                       xor	ah,ah
15988 3B06           8946         F4            mov	-$C[bp],ax
15989                                           !BCC_EOS
15990                                           ! 1761  theightm1=video_param_table[vpti].theightm1;
15991                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
15992 3B09           8A46         F9            mov	al,-7[bp]
15993 3B0C           30E4                       xor	ah,ah
15994 3B0E           B1                     06  mov	cl,*6
15995 3B10           D3E0                       shl	ax,cl
15996 3B12           89C3                       mov	bx,ax
15997 3B14           81C3                 025A  add	bx,#_video_param_table
15998                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
15999 3B18           8A47         01            mov	al,1[bx]
16000 3B1B           30E4                       xor	ah,ah
16001 3B1D           8946         F2            mov	-$E[bp],ax
16002                                           !BCC_EOS
16003                                           ! 1762  cheight=video_param_table[vpti].cheight;
16004                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16005 3B20           8A46         F9            mov	al,-7[bp]
16006 3B23           30E4                       xor	ah,ah
16007 3B25           B1                     06  mov	cl,*6
16008 3B27           D3E0                       shl	ax,cl
16009 3B29           89C3                       mov	bx,ax
16010 3B2B           81C3                 025A  add	bx,#_video_param_table
16011                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16012 3B2F           8A47         02            mov	al,2[bx]
16013 3B32           30E4                       xor	ah,ah
16014 3B34           8946         F0            mov	-$10[bp],ax
16015                                           !BCC_EOS
16016                                           ! 1763  video_ctl=read_byte(0x40,0x87);
16017                                           ! Debug: list int = const $87 (used reg = )
16018 3B37           B8                   0087  mov	ax,#$87
16019 3B3A           50                         push	ax
16020                                           ! Debug: list int = const $40 (used reg = )
16021 3B3B           B8                   0040  mov	ax,*$40
16022 3B3E           50                         push	ax
16023                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16024 3B3F           E8         400A            call	_read_byte
16025 3B42           83C4                   04  add	sp,*4
16026                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16027 3B45           8846         EE            mov	-$12[bp],al
16028                                           !BCC_EOS
16029                                           ! 1764  vga_switches=read_byte(0x40,0x88);
16030                                           ! Debug: list int = const $88 (used reg = )
16031 3B48           B8                   0088  mov	ax,#$88
16032 3B4B           50                         push	ax
16033                                           ! Debug: list int = const $40 (used reg = )
16034 3B4C           B8                   0040  mov	ax,*$40
16035 3B4F           50                         push	ax
16036                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16037 3B50           E8         3FF9            call	_read_byte
16038 3B53           83C4                   04  add	sp,*4
16039                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16040 3B56           8846         ED            mov	-$13[bp],al
16041                                           !BCC_EOS
16042                                           ! 1765  modeset_ctl=read_byte(0x40,0x89);
16043                                           ! Debug: list int = const $89 (used reg = )
16044 3B59           B8                   0089  mov	ax,#$89
16045 3B5C           50                         push	ax
16046                                           ! Debug: list int = const $40 (used reg = )
16047 3B5D           B8                   0040  mov	ax,*$40
16048 3B60           50                         push	ax
16049                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16050 3B61           E8         3FE8            call	_read_byte
16051 3B64           83C4                   04  add	sp,*4
16052                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16053 3B67           8846         EF            mov	-$11[bp],al
16054                                           !BCC_EOS
16055                                           ! 1766  if((modeset_ctl&0x08)==0)
16056                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16057 3B6A           8A46         EF            mov	al,-$11[bp]
16058 3B6D           24                     08  and	al,*8
16059                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16060 3B6F           84C0                       test	al,al
16061 3B71   7403    E9         0146            bne 	.47
16062                       00003B76            .48:
16063                                           ! 1767   {
16064                                           ! 1768    outb(0x3c6,vga_modes[line].pelmask);
16065                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16066 3B76           8A46         FE            mov	al,-2[bp]
16067 3B79           30E4                       xor	ah,ah
16068 3B7B           B1                     03  mov	cl,*3
16069 3B7D           D3E0                       shl	ax,cl
16070 3B7F           89C3                       mov	bx,ax
16071 3B81           81C3                 01C6  add	bx,#_vga_modes
16072                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16073 3B85           8A47         06            mov	al,6[bx]
16074 3B88           30E4                       xor	ah,ah
16075 3B8A           50                         push	ax
16076                                           ! Debug: list int = const $3C6 (used reg = )
16077 3B8B           B8                   03C6  mov	ax,#$3C6
16078 3B8E           50                         push	ax
16079                                           ! Debug: func () void = outb+0 (used reg = )
16080 3B8F           E8         4026            call	_outb
16081 3B92           83C4                   04  add	sp,*4
16082                                           !BCC_EOS
16083                                           ! 1769    outb(0x3c8,0x00);
16084                                           ! Debug: list int = const 0 (used reg = )
16085 3B95           31C0                       xor	ax,ax
16086 3B97           50                         push	ax
16087                                           ! Debug: list int = const $3C8 (used reg = )
16088 3B98           B8                   03C8  mov	ax,#$3C8
16089 3B9B           50                         push	ax
16090                                           ! Debug: func () void = outb+0 (used reg = )
16091 3B9C           E8         4019            call	_outb
16092 3B9F           83C4                   04  add	sp,*4
16093                                           !BCC_EOS
16094                                           ! 1770    switch(vga_modes[line].dacmodel)
16095                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16096 3BA2           8A46         FE            mov	al,-2[bp]
16097 3BA5           30E4                       xor	ah,ah
16098 3BA7           B1                     03  mov	cl,*3
16099 3BA9           D3E0                       shl	ax,cl
16100 3BAB           89C3                       mov	bx,ax
16101 3BAD           81C3                 01C6  add	bx,#_vga_modes
16102 3BB1           8A47         07            mov	al,7[bx]
16103                                           ! 1771     {case 0:
16104 3BB4           EB           22            jmp .4B
16105                                           ! 1772       palette=&palette0;
16106                       00003BB6            .4C:
16107                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16108 3BB6           BB                   09DA  mov	bx,#_palette0
16109 3BB9           895E         FA            mov	-6[bp],bx
16110                                           !BCC_EOS
16111                                           ! 1773       break;
16112 3BBC           EB           2A            jmp .49
16113                                           !BCC_EOS
16114                                           ! 1774      case 1:
16115                                           ! 1775       palette=&palette1;
16116                       00003BBE            .4D:
16117                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16118 3BBE           BB                   0A9A  mov	bx,#_palette1
16119 3BC1           895E         FA            mov	-6[bp],bx
16120                                           !BCC_EOS
16121                                           ! 1776       break;
16122 3BC4           EB           22            jmp .49
16123                                           !BCC_EOS
16124                                           ! 1777      case 2:
16125                                           ! 1778       palette=&palette2;
16126                       00003BC6            .4E:
16127                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16128 3BC6           BB                   0B5A  mov	bx,#_palette2
16129 3BC9           895E         FA            mov	-6[bp],bx
16130                                           !BCC_EOS
16131                                           ! 1779       break;
16132 3BCC           EB           1A            jmp .49
16133                                           !BCC_EOS
16134                                           ! 1780      case 3:
16135                                           ! 1781       palette=&palette3;
16136                       00003BCE            .4F:
16137                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16138 3BCE           BB                   0C1A  mov	bx,#_palette3
16139 3BD1           895E         FA            mov	-6[bp],bx
16140                                           !BCC_EOS
16141                                           ! 1782       break;
16142 3BD4           EB           12            jmp .49
16143                                           !BCC_EOS
16144                                           ! 1783     }
16145                                           ! 1784    for(i=0;i<0x0100;i++)
16146 3BD6           EB           10            jmp .49
16147                       00003BD8            .4B:
16148 3BD8           2C                     00  sub	al,*0
16149 3BDA           74           DA            je 	.4C
16150 3BDC           2C                     01  sub	al,*1
16151 3BDE           74           DE            je 	.4D
16152 3BE0           2C                     01  sub	al,*1
16153 3BE2           74           E2            je 	.4E
16154 3BE4           2C                     01  sub	al,*1
16155 3BE6           74           E6            je 	.4F
16156                       00003BE8            .49:
16157                       FFFFFFE8            ..FFFE	=	-$18
16158                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16159 3BE8           31C0                       xor	ax,ax
16160 3BEA           8946         F6            mov	-$A[bp],ax
16161                                           !BCC_EOS
16162                                           !BCC_EOS
16163                                           ! 1785     {if(i<=dac_regs[vga_modes[line].dacmodel])
16164 3BED           E9         00AB            br 	.52
16165                       00003BF0            .53:
16166                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16167 3BF0           8A46         FE            mov	al,-2[bp]
16168 3BF3           30E4                       xor	ah,ah
16169 3BF5           B1                     03  mov	cl,*3
16170 3BF7           D3E0                       shl	ax,cl
16171 3BF9           89C3                       mov	bx,ax
16172 3BFB           81C3                 01C6  add	bx,#_vga_modes
16173                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16174 3BFF           8A47         07            mov	al,7[bx]
16175 3C02           30E4                       xor	ah,ah
16176 3C04           89C3                       mov	bx,ax
16177                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16178 3C06           8A87       0256            mov	al,_dac_regs[bx]
16179 3C0A           30E4                       xor	ah,ah
16180 3C0C           3B46         F6            cmp	ax,-$A[bp]
16181 3C0F           72           5C            jb  	.54
16182                       00003C11            .55:
16183                                           ! 1786       {outb(0x3c9,palette[(i*3)+0]);
16184                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16185 3C11           8B46         F6            mov	ax,-$A[bp]
16186 3C14           89C2                       mov	dx,ax
16187 3C16           D1E0                       shl	ax,*1
16188 3C18           01D0                       add	ax,dx
16189                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16190                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16191 3C1A           0346         FA            add	ax,-6[bp]
16192 3C1D           89C3                       mov	bx,ax
16193                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16194 3C1F           8A07                       mov	al,[bx]
16195 3C21           30E4                       xor	ah,ah
16196 3C23           50                         push	ax
16197                                           ! Debug: list int = const $3C9 (used reg = )
16198 3C24           B8                   03C9  mov	ax,#$3C9
16199 3C27           50                         push	ax
16200                                           ! Debug: func () void = outb+0 (used reg = )
16201 3C28           E8         3F8D            call	_outb
16202 3C2B           83C4                   04  add	sp,*4
16203                                           !BCC_EOS
16204                                           ! 1787        outb(0x3c9,palette[(i*3)+1]);
16205                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16206 3C2E           8B46         F6            mov	ax,-$A[bp]
16207 3C31           89C2                       mov	dx,ax
16208 3C33           D1E0                       shl	ax,*1
16209 3C35           01D0                       add	ax,dx
16210                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16211                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16212 3C37           40                         inc	ax
16213 3C38           0346         FA            add	ax,-6[bp]
16214 3C3B           89C3                       mov	bx,ax
16215                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16216 3C3D           8A07                       mov	al,[bx]
16217 3C3F           30E4                       xor	ah,ah
16218 3C41           50                         push	ax
16219                                           ! Debug: list int = const $3C9 (used reg = )
16220 3C42           B8                   03C9  mov	ax,#$3C9
16221 3C45           50                         push	ax
16222                                           ! Debug: func () void = outb+0 (used reg = )
16223 3C46           E8         3F6F            call	_outb
16224 3C49           83C4                   04  add	sp,*4
16225                                           !BCC_EOS
16226                                           ! 1788        outb(0x3c9,palette[(i*3)+2]);
16227                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16228 3C4C           8B46         F6            mov	ax,-$A[bp]
16229 3C4F           89C2                       mov	dx,ax
16230 3C51           D1E0                       shl	ax,*1
16231 3C53           01D0                       add	ax,dx
16232                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16233                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16234 3C55           40                         inc	ax
16235 3C56           40                         inc	ax
16236 3C57           0346         FA            add	ax,-6[bp]
16237 3C5A           89C3                       mov	bx,ax
16238                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16239 3C5C           8A07                       mov	al,[bx]
16240 3C5E           30E4                       xor	ah,ah
16241 3C60           50                         push	ax
16242                                           ! Debug: list int = const $3C9 (used reg = )
16243 3C61           B8                   03C9  mov	ax,#$3C9
16244 3C64           50                         push	ax
16245                                           ! Debug: func () void = outb+0 (used reg = )
16246 3C65           E8         3F50            call	_outb
16247 3C68           83C4                   04  add	sp,*4
16248                                           !BCC_EOS
16249                                           ! 1789       }
16250                                           ! 1790      else
16251                                           ! 1791       
16252                                           ! 1791 {outb(0x3c9,0);
16253 3C6B           EB           27            jmp .56
16254                       00003C6D            .54:
16255                                           ! Debug: list int = const 0 (used reg = )
16256 3C6D           31C0                       xor	ax,ax
16257 3C6F           50                         push	ax
16258                                           ! Debug: list int = const $3C9 (used reg = )
16259 3C70           B8                   03C9  mov	ax,#$3C9
16260 3C73           50                         push	ax
16261                                           ! Debug: func () void = outb+0 (used reg = )
16262 3C74           E8         3F41            call	_outb
16263 3C77           83C4                   04  add	sp,*4
16264                                           !BCC_EOS
16265                                           ! 1792        outb(0x3c9,0);
16266                                           ! Debug: list int = const 0 (used reg = )
16267 3C7A           31C0                       xor	ax,ax
16268 3C7C           50                         push	ax
16269                                           ! Debug: list int = const $3C9 (used reg = )
16270 3C7D           B8                   03C9  mov	ax,#$3C9
16271 3C80           50                         push	ax
16272                                           ! Debug: func () void = outb+0 (used reg = )
16273 3C81           E8         3F34            call	_outb
16274 3C84           83C4                   04  add	sp,*4
16275                                           !BCC_EOS
16276                                           ! 1793        outb(0x3c9,0);
16277                                           ! Debug: list int = const 0 (used reg = )
16278 3C87           31C0                       xor	ax,ax
16279 3C89           50                         push	ax
16280                                           ! Debug: list int = const $3C9 (used reg = )
16281 3C8A           B8                   03C9  mov	ax,#$3C9
16282 3C8D           50                         push	ax
16283                                           ! Debug: func () void = outb+0 (used reg = )
16284 3C8E           E8         3F27            call	_outb
16285 3C91           83C4                   04  add	sp,*4
16286                                           !BCC_EOS
16287                                           ! 1794       }
16288                                           ! 1795     }
16289                       00003C94            .56:
16290                                           ! 1796    if((modeset_ctl&0x02)==0x02)
16291                       00003C94            .51:
16292                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16293 3C94           8B46         F6            mov	ax,-$A[bp]
16294 3C97           40                         inc	ax
16295 3C98           8946         F6            mov	-$A[bp],ax
16296                       00003C9B            .52:
16297                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16298 3C9B           8B46         F6            mov	ax,-$A[bp]
16299 3C9E           3D                   0100  cmp	ax,#$100
16300 3CA1   7303    E9         FF4A            blo 	.53
16301                       00003CA6            .57:
16302                       00003CA6            .50:
16303                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16304 3CA6           8A46         EF            mov	al,-$11[bp]
16305 3CA9           24                     02  and	al,*2
16306                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16307 3CAB           3C                     02  cmp	al,*2
16308 3CAD           75           0D            jne 	.58
16309                       00003CAF            .59:
16310                                           ! 1797     {
16311                                           ! 1798      biosfn_perform_gray_scale_summing(0x00, 0x100);
16312                                           ! Debug: list int = const $100 (used reg = )
16313 3CAF           B8                   0100  mov	ax,#$100
16314 3CB2           50                         push	ax
16315                                           ! Debug: list int = const 0 (used reg = )
16316 3CB3           31C0                       xor	ax,ax
16317 3CB5           50                         push	ax
16318                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16319 3CB6           E8         2781            call	_biosfn_perform_gray_scale_summing
16320 3CB9           83C4                   04  add	sp,*4
16321                                           !BCC_EOS
16322                                           ! 1799     }
16323                                           ! 1800   }
16324                       00003CBC            .58:
16325                                           ! 1801  inb(0x3da);
16326                       00003CBC            .47:
16327                                           ! Debug: list int = const $3DA (used reg = )
16328 3CBC           B8                   03DA  mov	ax,#$3DA
16329 3CBF           50                         push	ax
16330                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16331 3CC0           E8         3EDF            call	_inb
16332 3CC3           44                         inc	sp
16333 3CC4           44                         inc	sp
16334                                           !BCC_EOS
16335                                           ! 1802  for(i=0;i<=0x13;i++)
16336                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16337 3CC5           31C0                       xor	ax,ax
16338 3CC7           8946         F6            mov	-$A[bp],ax
16339                                           !BCC_EOS
16340                                           !BCC_EOS
16341                                           ! 1803   {outb(0x3c0,i);
16342 3CCA           EB           38            jmp .5C
16343                       00003CCC            .5D:
16344                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16345 3CCC           FF76         F6            push	-$A[bp]
16346                                           ! Debug: list int = const $3C0 (used reg = )
16347 3CCF           B8                   03C0  mov	ax,#$3C0
16348 3CD2           50                         push	ax
16349                                           ! Debug: func () void = outb+0 (used reg = )
16350 3CD3           E8         3EE2            call	_outb
16351 3CD6           83C4                   04  add	sp,*4
16352                                           !BCC_EOS
16353                                           ! 1804    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16354                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16355 3CD9           8A46         F9            mov	al,-7[bp]
16356 3CDC           30E4                       xor	ah,ah
16357 3CDE           B1                     06  mov	cl,*6
16358 3CE0           D3E0                       shl	ax,cl
16359 3CE2           89C3                       mov	bx,ax
16360 3CE4           81C3                 025A  add	bx,#_video_param_table
16361                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16362 3CE8           8B46         F6            mov	ax,-$A[bp]
16363 3CEB           01C3                       add	bx,ax
16364                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16365 3CED           8A47         23            mov	al,$23[bx]
16366 3CF0           30E4                       xor	ah,ah
16367 3CF2           50                         push	ax
16368                                           ! Debug: list int = const $3C0 (used reg = )
16369 3CF3           B8                   03C0  mov	ax,#$3C0
16370 3CF6           50                         push	ax
16371                                           ! Debug: func () void = outb+0 (used reg = )
16372 3CF7           E8         3EBE            call	_outb
16373 3CFA           83C4                   04  add	sp,*4
16374                                           !BCC_EOS
16375                                           ! 1805   }
16376                                           ! 1806  outb(0x3c0,0x14);
16377                       00003CFD            .5B:
16378                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16379 3CFD           8B46         F6            mov	ax,-$A[bp]
16380 3D00           40                         inc	ax
16381 3D01           8946         F6            mov	-$A[bp],ax
16382                       00003D04            .5C:
16383                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16384 3D04           8B46         F6            mov	ax,-$A[bp]
16385 3D07           3D                   0013  cmp	ax,*$13
16386 3D0A           76           C0            jbe	.5D
16387                       00003D0C            .5E:
16388                       00003D0C            .5A:
16389                                           ! Debug: list int = const $14 (used reg = )
16390 3D0C           B8                   0014  mov	ax,*$14
16391 3D0F           50                         push	ax
16392                                           ! Debug: list int = const $3C0 (used reg = )
16393 3D10           B8                   03C0  mov	ax,#$3C0
16394 3D13           50                         push	ax
16395                                           ! Debug: func () void = outb+0 (used reg = )
16396 3D14           E8         3EA1            call	_outb
16397 3D17           83C4                   04  add	sp,*4
16398                                           !BCC_EOS
16399                                           ! 1807  outb(0x3c0,0x00);
16400                                           ! Debug: list int = const 0 (used reg = )
16401 3D1A           31C0                       xor	ax,ax
16402 3D1C           50                         push	ax
16403                                           ! Debug: list int = const $3C0 (used reg = )
16404 3D1D           B8                   03C0  mov	ax,#$3C0
16405 3D20           50                         push	ax
16406                                           ! Debug: func () void = outb+0 (used reg = )
16407 3D21           E8         3E94            call	_outb
16408 3D24           83C4                   04  add	sp,*4
16409                                           !BCC_EOS
16410                                           ! 1808  outb(0x3c4,0);
16411                                           ! Debug: list int = const 0 (used reg = )
16412 3D27           31C0                       xor	ax,ax
16413 3D29           50                         push	ax
16414                                           ! Debug: list int = const $3C4 (used reg = )
16415 3D2A           B8                   03C4  mov	ax,#$3C4
16416 3D2D           50                         push	ax
16417                                           ! Debug: func () void = outb+0 (used reg = )
16418 3D2E           E8         3E87            call	_outb
16419 3D31           83C4                   04  add	sp,*4
16420                                           !BCC_EOS
16421                                           ! 1809  outb(0x3c5,0x03);
16422                                           ! Debug: list int = const 3 (used reg = )
16423 3D34           B8                   0003  mov	ax,*3
16424 3D37           50                         push	ax
16425                                           ! Debug: list int = const $3C5 (used reg = )
16426 3D38           B8                   03C5  mov	ax,#$3C5
16427 3D3B           50                         push	ax
16428                                           ! Debug: func () void = outb+0 (used reg = )
16429 3D3C           E8         3E79            call	_outb
16430 3D3F           83C4                   04  add	sp,*4
16431                                           !BCC_EOS
16432                                           ! 1810  for(i=1;i<=4;i++)
16433                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16434 3D42           B8                   0001  mov	ax,*1
16435 3D45           8946         F6            mov	-$A[bp],ax
16436                                           !BCC_EOS
16437                                           !BCC_EOS
16438                                           ! 1811   {outb(0x3c4,i);
16439 3D48           EB           3F            jmp .61
16440                       00003D4A            .62:
16441                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16442 3D4A           FF76         F6            push	-$A[bp]
16443                                           ! Debug: list int = const $3C4 (used reg = )
16444 3D4D           B8                   03C4  mov	ax,#$3C4
16445 3D50           50                         push	ax
16446                                           ! Debug: func () void = outb+0 (used reg = )
16447 3D51           E8         3E64            call	_outb
16448 3D54           83C4                   04  add	sp,*4
16449                                           !BCC_EOS
16450                                           ! 1812    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16451                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16452 3D57           8B46         F6            mov	ax,-$A[bp]
16453 3D5A           48                         dec	ax
16454 3D5B           50                         push	ax
16455                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16456 3D5C           8A46         F9            mov	al,-7[bp]
16457 3D5F           30E4                       xor	ah,ah
16458 3D61           B1                     06  mov	cl,*6
16459 3D63           D3E0                       shl	ax,cl
16460 3D65           89C3                       mov	bx,ax
16461 3D67           81C3                 025A  add	bx,#_video_param_table
16462                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16463 3D6B           8B46         E8            mov	ax,-$18[bp]
16464 3D6E           01C3                       add	bx,ax
16465 3D70           44                         inc	sp
16466 3D71           44                         inc	sp
16467                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16468 3D72           8A47         05            mov	al,5[bx]
16469 3D75           30E4                       xor	ah,ah
16470 3D77           50                         push	ax
16471                                           ! Debug: list int = const $3C5 (used reg = )
16472 3D78           B8                   03C5  mov	ax,#$3C5
16473 3D7B           50                         push	ax
16474                                           ! Debug: func () void = outb+0 (used reg = )
16475 3D7C           E8         3E39            call	_outb
16476 3D7F           83C4                   04  add	sp,*4
16477                                           !BCC_EOS
16478                                           ! 1813   }
16479                                           ! 1814  for(i=0;i<=8;i++)
16480                       00003D82            .60:
16481                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16482 3D82           8B46         F6            mov	ax,-$A[bp]
16483 3D85           40                         inc	ax
16484 3D86           8946         F6            mov	-$A[bp],ax
16485                       00003D89            .61:
16486                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16487 3D89           8B46         F6            mov	ax,-$A[bp]
16488 3D8C           3D                   0004  cmp	ax,*4
16489 3D8F           76           B9            jbe	.62
16490                       00003D91            .63:
16491                       00003D91            .5F:
16492                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16493 3D91           31C0                       xor	ax,ax
16494 3D93           8946         F6            mov	-$A[bp],ax
16495                                           !BCC_EOS
16496                                           !BCC_EOS
16497                                           ! 1815   {outb(0x3ce,i);
16498 3D96           EB           38            jmp .66
16499                       00003D98            .67:
16500                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16501 3D98           FF76         F6            push	-$A[bp]
16502                                           ! Debug: list int = const $3CE (used reg = )
16503 3D9B           B8                   03CE  mov	ax,#$3CE
16504 3D9E           50                         push	ax
16505                                           ! Debug: func () void = outb+0 (used reg = )
16506 3D9F           E8         3E16            call	_outb
16507 3DA2           83C4                   04  add	sp,*4
16508                                           !BCC_EOS
16509                                           ! 1816    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16510                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16511 3DA5           8A46         F9            mov	al,-7[bp]
16512 3DA8           30E4                       xor	ah,ah
16513 3DAA           B1                     06  mov	cl,*6
16514 3DAC           D3E0                       shl	ax,cl
16515 3DAE           89C3                       mov	bx,ax
16516 3DB0           81C3                 025A  add	bx,#_video_param_table
16517                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16518 3DB4           8B46         F6            mov	ax,-$A[bp]
16519 3DB7           01C3                       add	bx,ax
16520                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16521 3DB9           8A47         37            mov	al,$37[bx]
16522 3DBC           30E4                       xor	ah,ah
16523 3DBE           50                         push	ax
16524                                           ! Debug: list int = const $3CF (used reg = )
16525 3DBF           B8                   03CF  mov	ax,#$3CF
16526 3DC2           50                         push	ax
16527                                           ! Debug: func () void = outb+0 (used reg = )
16528 3DC3           E8         3DF2            call	_outb
16529 3DC6           83C4                   04  add	sp,*4
16530                                           !BCC_EOS
16531                                           ! 1817   }
16532                                           ! 1818  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
16533                       00003DC9            .65:
16534                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16535 3DC9           8B46         F6            mov	ax,-$A[bp]
16536 3DCC           40                         inc	ax
16537 3DCD           8946         F6            mov	-$A[bp],ax
16538                       00003DD0            .66:
16539                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
16540 3DD0           8B46         F6            mov	ax,-$A[bp]
16541 3DD3           3D                   0008  cmp	ax,*8
16542 3DD6           76           C0            jbe	.67
16543                       00003DD8            .68:
16544                       00003DD8            .64:
16545                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16546 3DD8           8A46         FE            mov	al,-2[bp]
16547 3DDB           30E4                       xor	ah,ah
16548 3DDD           B1                     03  mov	cl,*3
16549 3DDF           D3E0                       shl	ax,cl
16550 3DE1           89C3                       mov	bx,ax
16551 3DE3           81C3                 01C6  add	bx,#_vga_modes
16552                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
16553 3DE7           8A47         02            mov	al,2[bx]
16554 3DEA           3C                     01  cmp	al,*1
16555 3DEC           75           05            jne 	.69
16556                       00003DEE            .6A:
16557 3DEE           B8                   03B4  mov	ax,#$3B4
16558 3DF1           EB           03            jmp .6B
16559                       00003DF3            .69:
16560 3DF3           B8                   03D4  mov	ax,#$3D4
16561                       00003DF6            .6B:
16562                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
16563 3DF6           8946         EA            mov	-$16[bp],ax
16564                                           !BCC_EOS
16565                                           ! 1819  outw(crtc_addr,0x0011);
16566                                           ! Debug: list int = const $11 (used reg = )
16567 3DF9           B8                   0011  mov	ax,*$11
16568 3DFC           50                         push	ax
16569                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16570 3DFD           FF76         EA            push	-$16[bp]
16571                                           ! Debug: func () void = outw+0 (used reg = )
16572 3E00           E8         3DC5            call	_outw
16573 3E03           83C4                   04  add	sp,*4
16574                                           !BCC_EOS
16575                                           ! 1820  for(i=0;i<=0x18;i++)
16576                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16577 3E06           31C0                       xor	ax,ax
16578 3E08           8946         F6            mov	-$A[bp],ax
16579                                           !BCC_EOS
16580                                           !BCC_EOS
16581                                           ! 1821   {outb(crtc_addr,i);
16582 3E0B           EB           38            jmp .6E
16583                       00003E0D            .6F:
16584                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16585 3E0D           FF76         F6            push	-$A[bp]
16586                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16587 3E10           FF76         EA            push	-$16[bp]
16588                                           ! Debug: func () void = outb+0 (used reg = )
16589 3E13           E8         3DA2            call	_outb
16590 3E16           83C4                   04  add	sp,*4
16591                                           !BCC_EOS
16592                                           ! 1822    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
16593                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16594 3E19           8A46         F9            mov	al,-7[bp]
16595 3E1C           30E4                       xor	ah,ah
16596 3E1E           B1                     06  mov	cl,*6
16597 3E20           D3E0                       shl	ax,cl
16598 3E22           89C3                       mov	bx,ax
16599 3E24           81C3                 025A  add	bx,#_video_param_table
16600                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
16601 3E28           8B46         F6            mov	ax,-$A[bp]
16602 3E2B           01C3                       add	bx,ax
16603                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
16604 3E2D           8A47         0A            mov	al,$A[bx]
16605 3E30           30E4                       xor	ah,ah
16606 3E32           50                         push	ax
16607                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16608 3E33           8B46         EA            mov	ax,-$16[bp]
16609                                           ! Debug: list unsigned int = ax+1 (used reg = )
16610 3E36           40                         inc	ax
16611 3E37           50                         push	ax
16612                                           ! Debug: func () void = outb+0 (used reg = )
16613 3E38           E8         3D7D            call	_outb
16614 3E3B           83C4                   04  add	sp,*4
16615                                           !BCC_EOS
16616                                           ! 1823   }
16617                                           ! 1824  outb(0x3c2,video_param_table[vpti].miscreg);
16618                       00003E3E            .6D:
16619                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16620 3E3E           8B46         F6            mov	ax,-$A[bp]
16621 3E41           40                         inc	ax
16622 3E42           8946         F6            mov	-$A[bp],ax
16623                       00003E45            .6E:
16624                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
16625 3E45           8B46         F6            mov	ax,-$A[bp]
16626 3E48           3D                   0018  cmp	ax,*$18
16627 3E4B           76           C0            jbe	.6F
16628                       00003E4D            .70:
16629                       00003E4D            .6C:
16630                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16631 3E4D           8A46         F9            mov	al,-7[bp]
16632 3E50           30E4                       xor	ah,ah
16633 3E52           B1                     06  mov	cl,*6
16634 3E54           D3E0                       shl	ax,cl
16635 3E56           89C3                       mov	bx,ax
16636 3E58           81C3                 025A  add	bx,#_video_param_table
16637                                           ! Debug: list unsigned char = [bx+9] (used reg = )
16638 3E5C           8A47         09            mov	al,9[bx]
16639 3E5F           30E4                       xor	ah,ah
16640 3E61           50                         push	ax
16641                                           ! Debug: list int = const $3C2 (used reg = )
16642 3E62           B8                   03C2  mov	ax,#$3C2
16643 3E65           50                         push	ax
16644                                           ! Debug: func () void = outb+0 (used reg = )
16645 3E66           E8         3D4F            call	_outb
16646 3E69           83C4                   04  add	sp,*4
16647                                           !BCC_EOS
16648                                           ! 1825  outb(0x3c0,0x20);
16649                                           ! Debug: list int = const $20 (used reg = )
16650 3E6C           B8                   0020  mov	ax,*$20
16651 3E6F           50                         push	ax
16652                                           ! Debug: list int = const $3C0 (used reg = )
16653 3E70           B8                   03C0  mov	ax,#$3C0
16654 3E73           50                         push	ax
16655                                           ! Debug: func () void = outb+0 (used reg = )
16656 3E74           E8         3D41            call	_outb
16657 3E77           83C4                   04  add	sp,*4
16658                                           !BCC_EOS
16659                                           ! 1826  inb(0x3da);
16660                                           ! Debug: list int = const $3DA (used reg = )
16661 3E7A           B8                   03DA  mov	ax,#$3DA
16662 3E7D           50                         push	ax
16663                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16664 3E7E           E8         3D21            call	_inb
16665 3E81           44                         inc	sp
16666 3E82           44                         inc	sp
16667                                           !BCC_EOS
16668                                           ! 1827  if(noclearmem==0x00)
16669                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
16670 3E83           8A46         FF            mov	al,-1[bp]
16671 3E86           84C0                       test	al,al
16672 3E88   7403    E9         00C1            bne 	.71
16673                       00003E8D            .72:
16674                                           ! 1828   {
16675                                           ! 1829    if(vga_modes[line].class==0x00)
16676                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16677 3E8D           8A46         FE            mov	al,-2[bp]
16678 3E90           30E4                       xor	ah,ah
16679 3E92           B1                     03  mov	cl,*3
16680 3E94           D3E0                       shl	ax,cl
16681 3E96           89C3                       mov	bx,ax
16682 3E98           81C3                 01C6  add	bx,#_vga_modes
16683                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
16684 3E9C           8A47         01            mov	al,1[bx]
16685 3E9F           84C0                       test	al,al
16686 3EA1           75           26            jne 	.73
16687                       00003EA3            .74:
16688                                           ! 1830     {
16689                                           ! 1831      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
16690                                           ! Debug: list int = const $4000 (used reg = )
16691 3EA3           B8                   4000  mov	ax,#$4000
16692 3EA6           50                         push	ax
16693                                           ! Debug: list int = const $720 (used reg = )
16694 3EA7           B8                   0720  mov	ax,#$720
16695 3EAA           50                         push	ax
16696                                           ! Debug: list int = const 0 (used reg = )
16697 3EAB           31C0                       xor	ax,ax
16698 3EAD           50                         push	ax
16699                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16700 3EAE           8A46         FE            mov	al,-2[bp]
16701 3EB1           30E4                       xor	ah,ah
16702 3EB3           B1                     03  mov	cl,*3
16703 3EB5           D3E0                       shl	ax,cl
16704 3EB7           89C3                       mov	bx,ax
16705 3EB9           81C3                 01C6  add	bx,#_vga_modes
16706                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16707 3EBD           FF77         04            push	4[bx]
16708                                           ! Debug: func () void = memsetw+0 (used reg = )
16709 3EC0           E8         3C04            call	_memsetw
16710 3EC3           83C4                   08  add	sp,*8
16711                                           !BCC_EOS
16712                                           ! 1832     }
16713                                           ! 1833    else
16714                                           ! 1834     {
16715 3EC6           E9         0085            br 	.75
16716                       00003EC9            .73:
16717                                           ! 1835      if(mode<0x0d)
16718                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
16719 3EC9           8A46         04            mov	al,4[bp]
16720 3ECC           3C                     0D  cmp	al,*$D
16721 3ECE           73           24            jae 	.76
16722                       00003ED0            .77:
16723                                           ! 1836       {
16724                                           ! 1837        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
16725                                           ! Debug: list int = const $4000 (used reg = )
16726 3ED0           B8                   4000  mov	ax,#$4000
16727 3ED3           50                         push	ax
16728                                           ! Debug: list int = const 0 (used reg = )
16729 3ED4           31C0                       xor	ax,ax
16730 3ED6           50                         push	ax
16731                                           ! Debug: list int = const 0 (used reg = )
16732 3ED7           31C0                       xor	ax,ax
16733 3ED9           50                         push	ax
16734                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16735 3EDA           8A46         FE            mov	al,-2[bp]
16736 3EDD           30E4                       xor	ah,ah
16737 3EDF           B1                     03  mov	cl,*3
16738 3EE1           D3E0                       shl	ax,cl
16739 3EE3           89C3                       mov	bx,ax
16740 3EE5           81C3                 01C6  add	bx,#_vga_modes
16741                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16742 3EE9           FF77         04            push	4[bx]
16743                                           ! Debug: func () void = memsetw+0 (used reg = )
16744 3EEC           E8         3BD8            call	_memsetw
16745 3EEF           83C4                   08  add	sp,*8
16746                                           !BCC_EOS
16747                                           ! 1838       }
16748                                           ! 1839      else
16749                                           ! 1840       {
16750 3EF2           EB           5A            jmp .78
16751                       00003EF4            .76:
16752                                           ! 1841        outb( 0x3c4, 0x02 );
16753                                           ! Debug: list int = const 2 (used reg = )
16754 3EF4           B8                   0002  mov	ax,*2
16755 3EF7           50                         push	ax
16756                                           ! Debug: list int = const $3C4 (used reg = )
16757 3EF8           B8                   03C4  mov	ax,#$3C4
16758 3EFB           50                         push	ax
16759                                           ! Debug: func () void = outb+0 (used reg = )
16760 3EFC           E8         3CB9            call	_outb
16761 3EFF           83C4                   04  add	sp,*4
16762                                           !BCC_EOS
16763                                           ! 1842        mmask = inb( 0x3c5 );
16764                                           ! Debug: list int = const $3C5 (used reg = )
16765 3F02           B8                   03C5  mov	ax,#$3C5
16766 3F05           50                         push	ax
16767                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16768 3F06           E8         3C99            call	_inb
16769 3F09           44                         inc	sp
16770 3F0A           44                         inc	sp
16771                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
16772 3F0B           8846         FD            mov	-3[bp],al
16773                                           !BCC_EOS
16774                                           ! 1843        outb( 0x3c5, 0x0f );
16775                                           ! Debug: list int = const $F (used reg = )
16776 3F0E           B8                   000F  mov	ax,*$F
16777 3F11           50                         push	ax
16778                                           ! Debug: list int = const $3C5 (used reg = )
16779 3F12           B8                   03C5  mov	ax,#$3C5
16780 3F15           50                         push	ax
16781                                           ! Debug: func () void = outb+0 (used reg = )
16782 3F16           E8         3C9F            call	_outb
16783 3F19           83C4                   04  add	sp,*4
16784                                           !BCC_EOS
16785                                           ! 1844        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
16786                                           ! Debug: list unsigned int = const $8000 (used reg = )
16787 3F1C           B8                   8000  mov	ax,#$8000
16788 3F1F           50                         push	ax
16789                                           ! Debug: list int = const 0 (used reg = )
16790 3F20           31C0                       xor	ax,ax
16791 3F22           50                         push	ax
16792                                           ! Debug: list int = const 0 (used reg = )
16793 3F23           31C0                       xor	ax,ax
16794 3F25           50                         push	ax
16795                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16796 3F26           8A46         FE            mov	al,-2[bp]
16797 3F29           30E4                       xor	ah,ah
16798 3F2B           B1                     03  mov	cl,*3
16799 3F2D           D3E0                       shl	ax,cl
16800 3F2F           89C3                       mov	bx,ax
16801 3F31           81C3                 01C6  add	bx,#_vga_modes
16802                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16803 3F35           FF77         04            push	4[bx]
16804                                           ! Debug: func () void = memsetw+0 (used reg = )
16805 3F38           E8         3B8C            call	_memsetw
16806 3F3B           83C4                   08  add	sp,*8
16807                                           !BCC_EOS
16808                                           ! 1845        outb( 0x3c5, mmask );
16809                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
16810 3F3E           8A46         FD            mov	al,-3[bp]
16811 3F41           30E4                       xor	ah,ah
16812 3F43           50                         push	ax
16813                                           ! Debug: list int = const $3C5 (used reg = )
16814 3F44           B8                   03C5  mov	ax,#$3C5
16815 3F47           50                         push	ax
16816                                           ! Debug: func () void = outb+0 (used reg = )
16817 3F48           E8         3C6D            call	_outb
16818 3F4B           83C4                   04  add	sp,*4
16819                                           !BCC_EOS
16820                                           ! 1846       }
16821                                           ! 1847     }
16822                       00003F4E            .78:
16823                                           ! 1848   }
16824                       00003F4E            .75:
16825                                           ! 1849  write_byte(0x40,0x49,mode);
16826                       00003F4E            .71:
16827                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16828 3F4E           8A46         04            mov	al,4[bp]
16829 3F51           30E4                       xor	ah,ah
16830 3F53           50                         push	ax
16831                                           ! Debug: list int = const $49 (used reg = )
16832 3F54           B8                   0049  mov	ax,*$49
16833 3F57           50                         push	ax
16834                                           ! Debug: list int = const $40 (used reg = )
16835 3F58           B8                   0040  mov	ax,*$40
16836 3F5B           50                         push	ax
16837                                           ! Debug: func () void = write_byte+0 (used reg = )
16838 3F5C           E8         3C13            call	_write_byte
16839 3F5F           83C4                   06  add	sp,*6
16840                                           !BCC_EOS
16841                                           ! 1850  write_word(0x40,0x4A,twidth);
16842                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
16843 3F62           FF76         F4            push	-$C[bp]
16844                                           ! Debug: list int = const $4A (used reg = )
16845 3F65           B8                   004A  mov	ax,*$4A
16846 3F68           50                         push	ax
16847                                           ! Debug: list int = const $40 (used reg = )
16848 3F69           B8                   0040  mov	ax,*$40
16849 3F6C           50                         push	ax
16850                                           ! Debug: func () void = write_word+0 (used reg = )
16851 3F6D           E8         3C1A            call	_write_word
16852 3F70           83C4                   06  add	sp,*6
16853                                           !BCC_EOS
16854                                           ! 1851  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
16855                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16856 3F73           8A46         F9            mov	al,-7[bp]
16857 3F76           30E4                       xor	ah,ah
16858 3F78           B1                     06  mov	cl,*6
16859 3F7A           D3E0                       shl	ax,cl
16860 3F7C           89C3                       mov	bx,ax
16861 3F7E           81C3                 025A  add	bx,#_video_param_table
16862                                           ! Debug: address unsigned char = [bx+3] (used reg = )
16863                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
16864                                           ! Debug: list unsigned short = [bx+3] (used reg = )
16865 3F82           FF77         03            push	3[bx]
16866                                           ! Debug: list int = const $4C (used reg = )
16867 3F85           B8                   004C  mov	ax,*$4C
16868 3F88           50                         push	ax
16869                                           ! Debug: list int = const $40 (used reg = )
16870 3F89           B8                   0040  mov	ax,*$40
16871 3F8C           50                         push	ax
16872                                           ! Debug: func () void = write_word+0 (used reg = )
16873 3F8D           E8         3BFA            call	_write_word
16874 3F90           83C4                   06  add	sp,*6
16875                                           !BCC_EOS
16876                                           ! 1852  write_word(0x40,0x63,crtc_addr);
16877                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
16878 3F93           FF76         EA            push	-$16[bp]
16879                                           ! Debug: list int = const $63 (used reg = )
16880 3F96           B8                   0063  mov	ax,*$63
16881 3F99           50                         push	ax
16882                                           ! Debug: list int = const $40 (used reg = )
16883 3F9A           B8                   0040  mov	ax,*$40
16884 3F9D           50                         push	ax
16885                                           ! Debug: func () void = write_word+0 (used reg = )
16886 3F9E           E8         3BE9            call	_write_word
16887 3FA1           83C4                   06  add	sp,*6
16888                                           !BCC_EOS
16889                                           ! 1853  write_byte(0x40,0x84,theightm1);
16890                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
16891 3FA4           FF76         F2            push	-$E[bp]
16892                                           ! Debug: list int = const $84 (used reg = )
16893 3FA7           B8                   0084  mov	ax,#$84
16894 3FAA           50                         push	ax
16895                                           ! Debug: list int = const $40 (used reg = )
16896 3FAB           B8                   0040  mov	ax,*$40
16897 3FAE           50                         push	ax
16898                                           ! Debug: func () void = write_byte+0 (used reg = )
16899 3FAF           E8         3BC0            call	_write_byte
16900 3FB2           83C4                   06  add	sp,*6
16901                                           !BCC_EOS
16902                                           ! 1854  write_word(0x40,0x85,cheight);
16903                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
16904 3FB5           FF76         F0            push	-$10[bp]
16905                                           ! Debug: list int = const $85 (used reg = )
16906 3FB8           B8                   0085  mov	ax,#$85
16907 3FBB           50                         push	ax
16908                                           ! Debug: list int = const $40 (used reg = )
16909 3FBC           B8                   0040  mov	ax,*$40
16910 3FBF           50                         push	ax
16911                                           ! Debug: func () void = write_word+0 (used reg = )
16912 3FC0           E8         3BC7            call	_write_word
16913 3FC3           83C4                   06  add	sp,*6
16914                                           !BCC_EOS
16915                                           ! 1855  write_byte(0x40,0x87,(0x60|noclearmem));
16916                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
16917                                           ! Debug: expression subtree swapping
16918 3FC6           8A46         FF            mov	al,-1[bp]
16919 3FC9           0C                     60  or	al,*$60
16920                                           ! Debug: list unsigned char = al+0 (used reg = )
16921 3FCB           30E4                       xor	ah,ah
16922 3FCD           50                         push	ax
16923                                           ! Debug: list int = const $87 (used reg = )
16924 3FCE           B8                   0087  mov	ax,#$87
16925 3FD1           50                         push	ax
16926                                           ! Debug: list int = const $40 (used reg = )
16927 3FD2           B8                   0040  mov	ax,*$40
16928 3FD5           50                         push	ax
16929                                           ! Debug: func () void = write_byte+0 (used reg = )
16930 3FD6           E8         3B99            call	_write_byte
16931 3FD9           83C4                   06  add	sp,*6
16932                                           !BCC_EOS
16933                                           ! 1856  write_byte(0x40,0x88,0xF9);
16934                                           ! Debug: list int = const $F9 (used reg = )
16935 3FDC           B8                   00F9  mov	ax,#$F9
16936 3FDF           50                         push	ax
16937                                           ! Debug: list int = const $88 (used reg = )
16938 3FE0           B8                   0088  mov	ax,#$88
16939 3FE3           50                         push	ax
16940                                           ! Debug: list int = const $40 (used reg = )
16941 3FE4           B8                   0040  mov	ax,*$40
16942 3FE7           50                         push	ax
16943                                           ! Debug: func () void = write_byte+0 (used reg = )
16944 3FE8           E8         3B87            call	_write_byte
16945 3FEB           83C4                   06  add	sp,*6
16946                                           !BCC_EOS
16947                                           ! 1857  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
16948                                           ! Debug: list int = const $89 (used reg = )
16949 3FEE           B8                   0089  mov	ax,#$89
16950 3FF1           50                         push	ax
16951                                           ! Debug: list int = const $40 (used reg = )
16952 3FF2           B8                   0040  mov	ax,*$40
16953 3FF5           50                         push	ax
16954                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16955 3FF6           E8         3B53            call	_read_byte
16956 3FF9           83C4                   04  add	sp,*4
16957                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
16958 3FFC           24                     7F  and	al,*$7F
16959                                           ! Debug: list unsigned char = al+0 (used reg = )
16960 3FFE           30E4                       xor	ah,ah
16961 4000           50                         push	ax
16962                                           ! Debug: list int = const $89 (used reg = )
16963 4001           B8                   0089  mov	ax,#$89
16964 4004           50                         push	ax
16965                                           ! Debug: list int = const $40 (used reg = )
16966 4005           B8                   0040  mov	ax,*$40
16967 4008           50                         push	ax
16968                                           ! Debug: func () void = write_byte+0 (used reg = )
16969 4009           E8         3B66            call	_write_byte
16970 400C           83C4                   06  add	sp,*6
16971                                           !BCC_EOS
16972                                           ! 1858  write_byte(0x40,0x8A,0x08);
16973                                           ! Debug: list int = const 8 (used reg = )
16974 400F           B8                   0008  mov	ax,*8
16975 4012           50                         push	ax
16976                                           ! Debug: list int = const $8A (used reg = )
16977 4013           B8                   008A  mov	ax,#$8A
16978 4016           50                         push	ax
16979                                           ! Debug: list int = const $40 (used reg = )
16980 4017           B8                   0040  mov	ax,*$40
16981 401A           50                         push	ax
16982                                           ! Debug: func () void = write_byte+0 (used reg = )
16983 401B           E8         3B54            call	_write_byte
16984 401E           83C4                   06  add	sp,*6
16985                                           !BCC_EOS
16986                                           ! 1859  write_word(0x40,0xA8, video_save_pointer_table);
16987                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
16988 4021           BB                   35C3  mov	bx,#_video_save_pointer_table
16989 4024           53                         push	bx
16990                                           ! Debug: list int = const $A8 (used reg = )
16991 4025           B8                   00A8  mov	ax,#$A8
16992 4028           50                         push	ax
16993                                           ! Debug: list int = const $40 (used reg = )
16994 4029           B8                   0040  mov	ax,*$40
16995 402C           50                         push	ax
16996                                           ! Debug: func () void = write_word+0 (used reg = )
16997 402D           E8         3B5A            call	_write_word
16998 4030           83C4                   06  add	sp,*6
16999                                           !BCC_EOS
17000                                           ! 1860  write_word(0x40,0xA8 +2, 0xc000);
17001                                           ! Debug: list unsigned int = const $C000 (used reg = )
17002 4033           B8                   C000  mov	ax,#$C000
17003 4036           50                         push	ax
17004                                           ! Debug: list int = const $AA (used reg = )
17005 4037           B8                   00AA  mov	ax,#$AA
17006 403A           50                         push	ax
17007                                           ! Debug: list int = const $40 (used reg = )
17008 403B           B8                   0040  mov	ax,*$40
17009 403E           50                         push	ax
17010                                           ! Debug: func () void = write_word+0 (used reg = )
17011 403F           E8         3B48            call	_write_word
17012 4042           83C4                   06  add	sp,*6
17013                                           !BCC_EOS
17014                                           ! 1861  write_byte(0x40,0x65,0x00);
17015                                           ! Debug: list int = const 0 (used reg = )
17016 4045           31C0                       xor	ax,ax
17017 4047           50                         push	ax
17018                                           ! Debug: list int = const $65 (used reg = )
17019 4048           B8                   0065  mov	ax,*$65
17020 404B           50                         push	ax
17021                                           ! Debug: list int = const $40 (used reg = )
17022 404C           B8                   0040  mov	ax,*$40
17023 404F           50                         push	ax
17024                                           ! Debug: func () void = write_byte+0 (used reg = )
17025 4050           E8         3B1F            call	_write_byte
17026 4053           83C4                   06  add	sp,*6
17027                                           !BCC_EOS
17028                                           ! 1862  write_byte(0x40,0x66,0x00);
17029                                           ! Debug: list int = const 0 (used reg = )
17030 4056           31C0                       xor	ax,ax
17031 4058           50                         push	ax
17032                                           ! Debug: list int = const $66 (used reg = )
17033 4059           B8                   0066  mov	ax,*$66
17034 405C           50                         push	ax
17035                                           ! Debug: list int = const $40 (used reg = )
17036 405D           B8                   0040  mov	ax,*$40
17037 4060           50                         push	ax
17038                                           ! Debug: func () void = write_byte+0 (used reg = )
17039 4061           E8         3B0E            call	_write_byte
17040 4064           83C4                   06  add	sp,*6
17041                                           !BCC_EOS
17042                                           ! 1863  if(vga_modes[line].class==0x00)
17043                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17044 4067           8A46         FE            mov	al,-2[bp]
17045 406A           30E4                       xor	ah,ah
17046 406C           B1                     03  mov	cl,*3
17047 406E           D3E0                       shl	ax,cl
17048 4070           89C3                       mov	bx,ax
17049 4072           81C3                 01C6  add	bx,#_vga_modes
17050                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17051 4076           8A47         01            mov	al,1[bx]
17052 4079           84C0                       test	al,al
17053 407B           75           0E            jne 	.79
17054                       0000407D            .7A:
17055                                           ! 1864   {
17056                                           ! 1865    biosfn_set_cursor_shape(0x06,0x07);
17057                                           ! Debug: list int = const 7 (used reg = )
17058 407D           B8                   0007  mov	ax,*7
17059 4080           50                         push	ax
17060                                           ! Debug: list int = const 6 (used reg = )
17061 4081           B8                   0006  mov	ax,*6
17062 4084           50                         push	ax
17063                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17064 4085           E8         00BB            call	_biosfn_set_cursor_shape
17065 4088           83C4                   04  add	sp,*4
17066                                           !BCC_EOS
17067                                           ! 1866   }
17068                                           ! 1867  for(i=0;i<8;i++)
17069                       0000408B            .79:
17070                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17071 408B           31C0                       xor	ax,ax
17072 408D           8946         F6            mov	-$A[bp],ax
17073                                           !BCC_EOS
17074                                           !BCC_EOS
17075                                           ! 1868   biosfn_set_cursor_pos(i,0x0000);
17076 4090           EB           13            jmp .7D
17077                       00004092            .7E:
17078                                           ! Debug: list int = const 0 (used reg = )
17079 4092           31C0                       xor	ax,ax
17080 4094           50                         push	ax
17081                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17082 4095           FF76         F6            push	-$A[bp]
17083                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17084 4098           E8         01C3            call	_biosfn_set_cursor_pos
17085 409B           83C4                   04  add	sp,*4
17086                                           !BCC_EOS
17087                                           ! 1869  biosfn_set_active_page(0x00);
17088                       0000409E            .7C:
17089                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17090 409E           8B46         F6            mov	ax,-$A[bp]
17091 40A1           40                         inc	ax
17092 40A2           8946         F6            mov	-$A[bp],ax
17093                       000040A5            .7D:
17094                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17095 40A5           8B46         F6            mov	ax,-$A[bp]
17096 40A8           3D                   0008  cmp	ax,*8
17097 40AB           72           E5            jb 	.7E
17098                       000040AD            .7F:
17099                       000040AD            .7B:
17100                                           ! Debug: list int = const 0 (used reg = )
17101 40AD           31C0                       xor	ax,ax
17102 40AF           50                         push	ax
17103                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17104 40B0           E8         0321            call	_biosfn_set_active_page
17105 40B3           44                         inc	sp
17106 40B4           44                         inc	sp
17107                                           !BCC_EOS
17108                                           ! 1870  if(vga_modes[line].class==0x00)
17109                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17110 40B5           8A46         FE            mov	al,-2[bp]
17111 40B8           30E4                       xor	ah,ah
17112 40BA           B1                     03  mov	cl,*3
17113 40BC           D3E0                       shl	ax,cl
17114 40BE           89C3                       mov	bx,ax
17115 40C0           81C3                 01C6  add	bx,#_vga_modes
17116                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17117 40C4           8A47         01            mov	al,1[bx]
17118 40C7           84C0                       test	al,al
17119 40C9           75           0E            jne 	.80
17120                       000040CB            .81:
17121                                           ! 1871   {
17122                                           ! 1872 #asm
17123                                           !BCC_EOS
17124                                           !BCC_ASM
17125                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17126                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17127                       00000008            _biosfn_set_video_mode.theightm1	set	8
17128                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17129                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17130                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17131                       00000014            _biosfn_set_video_mode.line	set	$14
17132                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17133                       00000006            _biosfn_set_video_mode.cheight	set	6
17134                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17135                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17136                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17137                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17138                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17139                       0000000C            _biosfn_set_video_mode.i	set	$C
17140                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17141                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17142                       00000004            .biosfn_set_video_mode.mode	set	4
17143                       00000010            _biosfn_set_video_mode.palette	set	$10
17144                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17145                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17146                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17147                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17148                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17149                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17150                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17151                       00000013            _biosfn_set_video_mode.mmask	set	$13
17152                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17153                                             ;; copy and activate 8x16 font
17154 40CB           B8                   1104    mov ax, #0x1104
17155 40CE           B3                     00    mov bl, #0x00
17156 40D0           CD                     10    int #0x10
17157 40D2           B8                   1103    mov ax, #0x1103
17158 40D5           B3                     00    mov bl, #0x00
17159 40D7           CD                     10    int #0x10
17160                                           ! 1880 endasm
17161                                           !BCC_ENDASM
17162                                           !BCC_EOS
17163                                           ! 1881   }
17164                                           ! 1882 #asm
17165                       000040D9            .80:
17166                                           !BCC_EOS
17167                                           !BCC_ASM
17168                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17169                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17170                       00000008            _biosfn_set_video_mode.theightm1	set	8
17171                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17172                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17173                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17174                       00000014            _biosfn_set_video_mode.line	set	$14
17175                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17176                       00000006            _biosfn_set_video_mode.cheight	set	6
17177                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17178                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17179                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17180                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17181                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17182                       0000000C            _biosfn_set_video_mode.i	set	$C
17183                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17184                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17185                       00000004            .biosfn_set_video_mode.mode	set	4
17186                       00000010            _biosfn_set_video_mode.palette	set	$10
17187                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17188                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17189                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17190                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17191                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17192                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17193                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17194                       00000013            _biosfn_set_video_mode.mmask	set	$13
17195                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17196                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   40D9           1E                           push ds
 +a   40DA           31C0                         xor ax, ax
 +a   40DC           8ED8                         mov ds, ax
 +a   40DE           B8                   132A    mov ax,  #_vgafont8+128*8
 +a   40E1           A3         007C              mov 0x1f*4, ax
 +a   40E4           B8                   C000    mov ax,  #0xC000
 +a   40E7           A3         007E              mov 0x1f*4+2, ax
 +a   40EA           1F                           pop ds
17197                                           ! 1884 endasm
17198                                           !BCC_ENDASM
17199                                           !BCC_EOS
17200                                           ! 1885   switch(cheight)
17201 40EB           8B46         F0            mov	ax,-$10[bp]
17202                                           ! 1886    {case 8:
17203 40EE           E9         003F            br 	.84
17204                                           ! 1887 #asm
17205                       000040F1            .85:
17206                                           !BCC_EOS
17207                                           !BCC_ASM
17208                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17209                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17210                       00000008            _biosfn_set_video_mode.theightm1	set	8
17211                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17212                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17213                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17214                       00000014            _biosfn_set_video_mode.line	set	$14
17215                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17216                       00000006            _biosfn_set_video_mode.cheight	set	6
17217                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17218                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17219                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17220                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17221                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17222                       0000000C            _biosfn_set_video_mode.i	set	$C
17223                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17224                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17225                       00000004            .biosfn_set_video_mode.mode	set	4
17226                       00000010            _biosfn_set_video_mode.palette	set	$10
17227                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17228                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17229                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17230                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17231                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17232                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17233                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17234                       00000013            _biosfn_set_video_mode.mmask	set	$13
17235                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17236                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   40F1           1E                           push ds
 +a   40F2           31C0                         xor ax, ax
 +a   40F4           8ED8                         mov ds, ax
 +a   40F6           B8                   0F2A    mov ax,  #_vgafont8
 +a   40F9           A3         010C              mov 0x43*4, ax
 +a   40FC           B8                   C000    mov ax,  #0xC000
 +a   40FF           A3         010E              mov 0x43*4+2, ax
 +a   4102           1F                           pop ds
17237                                           ! 1889 endasm
17238                                           !BCC_ENDASM
17239                                           !BCC_EOS
17240                                           ! 1890      break;
17241 4103           E9         0039            br 	.82
17242                                           !BCC_EOS
17243                                           ! 1891     case 14:
17244                                           ! 1892 #asm
17245                       00004106            .86:
17246                                           !BCC_EOS
17247                                           !BCC_ASM
17248                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17249                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17250                       00000008            _biosfn_set_video_mode.theightm1	set	8
17251                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17252                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17253                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17254                       00000014            _biosfn_set_video_mode.line	set	$14
17255                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17256                       00000006            _biosfn_set_video_mode.cheight	set	6
17257                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17258                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17259                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17260                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17261                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17262                       0000000C            _biosfn_set_video_mode.i	set	$C
17263                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17264                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17265                       00000004            .biosfn_set_video_mode.mode	set	4
17266                       00000010            _biosfn_set_video_mode.palette	set	$10
17267                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17268                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17269                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17270                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17271                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17272                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17273                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17274                       00000013            _biosfn_set_video_mode.mmask	set	$13
17275                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17276                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   4106           1E                           push ds
 +a   4107           31C0                         xor ax, ax
 +a   4109           8ED8                         mov ds, ax
 +a   410B           B8                   172A    mov ax,  #_vgafont14
 +a   410E           A3         010C              mov 0x43*4, ax
 +a   4111           B8                   C000    mov ax,  #0xC000
 +a   4114           A3         010E              mov 0x43*4+2, ax
 +a   4117           1F                           pop ds
17277                                           ! 1894 endasm
17278                                           !BCC_ENDASM
17279                                           !BCC_EOS
17280                                           ! 1895      break;
17281 4118           EB           25            jmp .82
17282                                           !BCC_EOS
17283                                           ! 1896     case 16:
17284                                           ! 1897 #asm
17285                       0000411A            .87:
17286                                           !BCC_EOS
17287                                           !BCC_ASM
17288                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17289                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17290                       00000008            _biosfn_set_video_mode.theightm1	set	8
17291                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17292                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17293                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17294                       00000014            _biosfn_set_video_mode.line	set	$14
17295                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17296                       00000006            _biosfn_set_video_mode.cheight	set	6
17297                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17298                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17299                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17300                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17301                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17302                       0000000C            _biosfn_set_video_mode.i	set	$C
17303                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17304                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17305                       00000004            .biosfn_set_video_mode.mode	set	4
17306                       00000010            _biosfn_set_video_mode.palette	set	$10
17307                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17308                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17309                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17310                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17311                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17312                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17313                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17314                       00000013            _biosfn_set_video_mode.mmask	set	$13
17315                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17316                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   411A           1E                           push ds
 +a   411B           31C0                         xor ax, ax
 +a   411D           8ED8                         mov ds, ax
 +a   411F           B8                   252A    mov ax,  #_vgafont16
 +a   4122           A3         010C              mov 0x43*4, ax
 +a   4125           B8                   C000    mov ax,  #0xC000
 +a   4128           A3         010E              mov 0x43*4+2, ax
 +a   412B           1F                           pop ds
17317                                           ! 1899 endasm
17318                                           !BCC_ENDASM
17319                                           !BCC_EOS
17320                                           ! 1900      break;
17321 412C           EB           11            jmp .82
17322                                           !BCC_EOS
17323                                           ! 1901    }
17324                                           ! 1902 }
17325 412E           EB           0F            jmp .82
17326                       00004130            .84:
17327 4130           2D                   0008  sub	ax,*8
17328 4133           74           BC            je 	.85
17329 4135           2D                   0006  sub	ax,*6
17330 4138           74           CC            je 	.86
17331 413A           2D                   0002  sub	ax,*2
17332 413D           74           DB            je 	.87
17333                       0000413F            .82:
17334                       FFFFFFE8            ..FFFD	=	-$18
17335 413F           89EC                       mov	sp,bp
17336 4141           5D                         pop	bp
17337 4142           C3                         ret
17338                                           ! 1903 static void biosfn_set_cursor_shape (CH,CL)
17339                                           ! Register BX used in function biosfn_set_video_mode
17340                                           ! 1904 Bit8u CH;Bit8u CL;
17341                       00004143            _biosfn_set_cursor_shape:
17342                                           !BCC_EOS
17343                                           !BCC_EOS
17344                                           ! 1905 {Bit16u cheight,curs,crtc_addr;
17345                                           !BCC_EOS
17346                                           ! 1906  Bit8u modeset_ctl;
17347                                           !BCC_EOS
17348                                           ! 1907  CH&=0x3f;
17349 4143           55                         push	bp
17350 4144           89E5                       mov	bp,sp
17351 4146           83C4                   F8  add	sp,*-8
17352                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17353 4149           8A46         04            mov	al,4[bp]
17354 414C           24                     3F  and	al,*$3F
17355 414E           8846         04            mov	4[bp],al
17356                                           !BCC_EOS
17357                                           ! 1908  CL&=0x1f;
17358                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17359 4151           8A46         06            mov	al,6[bp]
17360 4154           24                     1F  and	al,*$1F
17361 4156           8846         06            mov	6[bp],al
17362                                           !BCC_EOS
17363                                           ! 1909  curs=(CH<<8)+CL;
17364                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17365 4159           8A46         04            mov	al,4[bp]
17366 415C           30E4                       xor	ah,ah
17367 415E           88C4                       mov	ah,al
17368 4160           30C0                       xor	al,al
17369                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17370 4162           0246         06            add	al,6[bp]
17371 4165           80D4                   00  adc	ah,*0
17372                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17373 4168           8946         FC            mov	-4[bp],ax
17374                                           !BCC_EOS
17375                                           ! 1910  write_word(0x40,0x60,curs);
17376                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17377 416B           FF76         FC            push	-4[bp]
17378                                           ! Debug: list int = const $60 (used reg = )
17379 416E           B8                   0060  mov	ax,*$60
17380 4171           50                         push	ax
17381                                           ! Debug: list int = const $40 (used reg = )
17382 4172           B8                   0040  mov	ax,*$40
17383 4175           50                         push	ax
17384                                           ! Debug: func () void = write_word+0 (used reg = )
17385 4176           E8         3A11            call	_write_word
17386 4179           83C4                   06  add	sp,*6
17387                                           !BCC_EOS
17388                                           ! 1911  modeset_ctl=read_byte(0x40,0x89);
17389                                           ! Debug: list int = const $89 (used reg = )
17390 417C           B8                   0089  mov	ax,#$89
17391 417F           50                         push	ax
17392                                           ! Debug: list int = const $40 (used reg = )
17393 4180           B8                   0040  mov	ax,*$40
17394 4183           50                         push	ax
17395                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17396 4184           E8         39C5            call	_read_byte
17397 4187           83C4                   04  add	sp,*4
17398                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17399 418A           8846         F9            mov	-7[bp],al
17400                                           !BCC_EOS
17401                                           ! 1912  cheight = read_word(0x40,0x85);
17402                                           ! Debug: list int = const $85 (used reg = )
17403 418D           B8                   0085  mov	ax,#$85
17404 4190           50                         push	ax
17405                                           ! Debug: list int = const $40 (used reg = )
17406 4191           B8                   0040  mov	ax,*$40
17407 4194           50                         push	ax
17408                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17409 4195           E8         39C7            call	_read_word
17410 4198           83C4                   04  add	sp,*4
17411                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17412 419B           8946         FE            mov	-2[bp],ax
17413                                           !BCC_EOS
17414                                           ! 1913  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17415                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17416 419E           8A46         F9            mov	al,-7[bp]
17417 41A1           24                     01  and	al,*1
17418 41A3           84C0                       test	al,al
17419 41A5           74           66            je  	.88
17420                       000041A7            .8C:
17421                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17422 41A7           8B46         FE            mov	ax,-2[bp]
17423 41AA           3D                   0008  cmp	ax,*8
17424 41AD           76           5E            jbe 	.88
17425                       000041AF            .8B:
17426                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17427 41AF           8A46         06            mov	al,6[bp]
17428 41B2           3C                     08  cmp	al,*8
17429 41B4           73           57            jae 	.88
17430                       000041B6            .8A:
17431                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17432 41B6           8A46         04            mov	al,4[bp]
17433 41B9           3C                     20  cmp	al,*$20
17434 41BB           73           50            jae 	.88
17435                       000041BD            .89:
17436                                           ! 1914   {
17437                                           ! 1915    if(CL!=(CH+1))
17438                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17439 41BD           8A46         04            mov	al,4[bp]
17440 41C0           30E4                       xor	ah,ah
17441                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17442                                           ! Debug: expression subtree swapping
17443 41C2           40                         inc	ax
17444 41C3           50                         push	ax
17445 41C4           8A46         06            mov	al,6[bp]
17446 41C7           30E4                       xor	ah,ah
17447 41C9           3B46         F6            cmp	ax,-$A[bp]
17448 41CC           8D66         F8            lea	sp,-8[bp]
17449 41CF           74           15            je  	.8D
17450                       000041D1            .8E:
17451                                           ! 1916     {
17452                                           ! 1917      CH = ((CH+1) * cheight / 8) -1;
17453                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17454 41D1           8A46         04            mov	al,4[bp]
17455 41D4           30E4                       xor	ah,ah
17456                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17457 41D6           40                         inc	ax
17458 41D7           8B4E         FE            mov	cx,-2[bp]
17459 41DA           F7E9                       imul	cx
17460                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17461 41DC           B1                     03  mov	cl,*3
17462 41DE           D3E8                       shr	ax,cl
17463                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17464                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17465 41E0           48                         dec	ax
17466 41E1           8846         04            mov	4[bp],al
17467                                           !BCC_EOS
17468                                           ! 1918     }
17469                                           ! 1919    else
17470                                           ! 1920     {
17471 41E4           EB           14            jmp .8F
17472                       000041E6            .8D:
17473                                           ! 1921      CH = ((CL+1) * cheight / 8) - 2;
17474                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17475 41E6           8A46         06            mov	al,6[bp]
17476 41E9           30E4                       xor	ah,ah
17477                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17478 41EB           40                         inc	ax
17479 41EC           8B4E         FE            mov	cx,-2[bp]
17480 41EF           F7E9                       imul	cx
17481                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17482 41F1           B1                     03  mov	cl,*3
17483 41F3           D3E8                       shr	ax,cl
17484                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17485                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17486 41F5           48                         dec	ax
17487 41F6           48                         dec	ax
17488 41F7           8846         04            mov	4[bp],al
17489                                           !BCC_EOS
17490                                           ! 1922     }
17491                                           ! 1923    CL = ((CL+1) * cheight / 8) - 1;
17492                       000041FA            .8F:
17493                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17494 41FA           8A46         06            mov	al,6[bp]
17495 41FD           30E4                       xor	ah,ah
17496                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17497 41FF           40                         inc	ax
17498 4200           8B4E         FE            mov	cx,-2[bp]
17499 4203           F7E9                       imul	cx
17500                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17501 4205           B1                     03  mov	cl,*3
17502 4207           D3E8                       shr	ax,cl
17503                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17504                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17505 4209           48                         dec	ax
17506 420A           8846         06            mov	6[bp],al
17507                                           !BCC_EOS
17508                                           ! 1924   }
17509                                           ! 1925  crtc_addr=read_word(0x40,0x63);
17510                       0000420D            .88:
17511                                           ! Debug: list int = const $63 (used reg = )
17512 420D           B8                   0063  mov	ax,*$63
17513 4210           50                         push	ax
17514                                           ! Debug: list int = const $40 (used reg = )
17515 4211           B8                   0040  mov	ax,*$40
17516 4214           50                         push	ax
17517                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17518 4215           E8         3947            call	_read_word
17519 4218           83C4                   04  add	sp,*4
17520                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17521 421B           8946         FA            mov	-6[bp],ax
17522                                           !BCC_EOS
17523                                           ! 1926  outb(crtc_addr,0x0a);
17524                                           ! Debug: list int = const $A (used reg = )
17525 421E           B8                   000A  mov	ax,*$A
17526 4221           50                         push	ax
17527                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17528 4222           FF76         FA            push	-6[bp]
17529                                           ! Debug: func () void = outb+0 (used reg = )
17530 4225           E8         3990            call	_outb
17531 4228           83C4                   04  add	sp,*4
17532                                           !BCC_EOS
17533                                           ! 1927  outb(crtc_addr+1,CH);
17534                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
17535 422B           8A46         04            mov	al,4[bp]
17536 422E           30E4                       xor	ah,ah
17537 4230           50                         push	ax
17538                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17539 4231           8B46         FA            mov	ax,-6[bp]
17540                                           ! Debug: list unsigned int = ax+1 (used reg = )
17541 4234           40                         inc	ax
17542 4235           50                         push	ax
17543                                           ! Debug: func () void = outb+0 (used reg = )
17544 4236           E8         397F            call	_outb
17545 4239           83C4                   04  add	sp,*4
17546                                           !BCC_EOS
17547                                           ! 1928  outb(crtc_addr,0x0b);
17548                                           ! Debug: list int = const $B (used reg = )
17549 423C           B8                   000B  mov	ax,*$B
17550 423F           50                         push	ax
17551                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17552 4240           FF76         FA            push	-6[bp]
17553                                           ! Debug: func () void = outb+0 (used reg = )
17554 4243           E8         3972            call	_outb
17555 4246           83C4                   04  add	sp,*4
17556                                           !BCC_EOS
17557                                           ! 1929  outb(crtc_addr+1,CL);
17558                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
17559 4249           8A46         06            mov	al,6[bp]
17560 424C           30E4                       xor	ah,ah
17561 424E           50                         push	ax
17562                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17563 424F           8B46         FA            mov	ax,-6[bp]
17564                                           ! Debug: list unsigned int = ax+1 (used reg = )
17565 4252           40                         inc	ax
17566 4253           50                         push	ax
17567                                           ! Debug: func () void = outb+0 (used reg = )
17568 4254           E8         3961            call	_outb
17569 4257           83C4                   04  add	sp,*4
17570                                           !BCC_EOS
17571                                           ! 1930 }
17572 425A           89EC                       mov	sp,bp
17573 425C           5D                         pop	bp
17574 425D           C3                         ret
17575                                           ! 1931 static void biosfn_set_cursor_pos (page, cursor)
17576                                           ! 1932 Bit8u page;Bit16u cursor;
17577                       0000425E            _biosfn_set_cursor_pos:
17578                                           !BCC_EOS
17579                                           !BCC_EOS
17580                                           ! 1933 {
17581                                           ! 1934  Bit8u xcurs,ycurs,current;
17582                                           !BCC_EOS
17583                                           ! 1935  Bit16u nbcols,nbrows,address,crtc_addr;
17584                                           !BCC_EOS
17585                                           ! 1936  if(page>7)return;
17586 425E           55                         push	bp
17587 425F           89E5                       mov	bp,sp
17588 4261           83C4                   F4  add	sp,*-$C
17589                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
17590 4264           8A46         04            mov	al,4[bp]
17591 4267           3C                     07  cmp	al,*7
17592 4269           76           04            jbe 	.90
17593                       0000426B            .91:
17594 426B           89EC                       mov	sp,bp
17595 426D           5D                         pop	bp
17596 426E           C3                         ret
17597                                           !BCC_EOS
17598                                           ! 1937  write_word(0x40, 0x50 +2*page, cursor);
17599                       0000426F            .90:
17600                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
17601 426F           FF76         06            push	6[bp]
17602                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
17603                                           ! Debug: expression subtree swapping
17604 4272           8A46         04            mov	al,4[bp]
17605 4275           30E4                       xor	ah,ah
17606 4277           D1E0                       shl	ax,*1
17607                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17608                                           ! Debug: expression subtree swapping
17609                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17610 4279           05                   0050  add	ax,*$50
17611 427C           50                         push	ax
17612                                           ! Debug: list int = const $40 (used reg = )
17613 427D           B8                   0040  mov	ax,*$40
17614 4280           50                         push	ax
17615                                           ! Debug: func () void = write_word+0 (used reg = )
17616 4281           E8         3906            call	_write_word
17617 4284           83C4                   06  add	sp,*6
17618                                           !BCC_EOS
17619                                           ! 1938  current=read_byte(0x40,0x62);
17620                                           ! Debug: list int = const $62 (used reg = )
17621 4287           B8                   0062  mov	ax,*$62
17622 428A           50                         push	ax
17623                                           ! Debug: list int = const $40 (used reg = )
17624 428B           B8                   0040  mov	ax,*$40
17625 428E           50                         push	ax
17626                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17627 428F           E8         38BA            call	_read_byte
17628 4292           83C4                   04  add	sp,*4
17629                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
17630 4295           8846         FD            mov	-3[bp],al
17631                                           !BCC_EOS
17632                                           ! 1939  if(page==current)
17633                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
17634 4298           8A46         04            mov	al,4[bp]
17635 429B           3A46         FD            cmp	al,-3[bp]
17636 429E   7403    E9         00B8            bne 	.92
17637                       000042A3            .93:
17638                                           ! 1940   {
17639                                           ! 1941    nbcols=read_word(0x40,0x4A);
17640                                           ! Debug: list int = const $4A (used reg = )
17641 42A3           B8                   004A  mov	ax,*$4A
17642 42A6           50                         push	ax
17643                                           ! Debug: list int = const $40 (used reg = )
17644 42A7           B8                   0040  mov	ax,*$40
17645 42AA           50                         push	ax
17646                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17647 42AB           E8         38B1            call	_read_word
17648 42AE           83C4                   04  add	sp,*4
17649                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
17650 42B1           8946         FA            mov	-6[bp],ax
17651                                           !BCC_EOS
17652                                           ! 1942    nbrows=read_byte(0x40,0x84)+1;
17653                                           ! Debug: list int = const $84 (used reg = )
17654 42B4           B8                   0084  mov	ax,#$84
17655 42B7           50                         push	ax
17656                                           ! Debug: list int = const $40 (used reg = )
17657 42B8           B8                   0040  mov	ax,*$40
17658 42BB           50                         push	ax
17659                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17660 42BC           E8         388D            call	_read_byte
17661 42BF           83C4                   04  add	sp,*4
17662                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
17663 42C2           30E4                       xor	ah,ah
17664                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
17665 42C4           40                         inc	ax
17666 42C5           8946         F8            mov	-8[bp],ax
17667                                           !BCC_EOS
17668                                           ! 1943    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
17669                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
17670 42C8           8A46         06            mov	al,6[bp]
17671                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
17672 42CB           8846         FF            mov	-1[bp],al
17673                                           !BCC_EOS
17674                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
17675 42CE           8B46         06            mov	ax,6[bp]
17676 42D1           30C0                       xor	al,al
17677                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17678 42D3           88E0                       mov	al,ah
17679 42D5           30E4                       xor	ah,ah
17680                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
17681 42D7           8846         FE            mov	-2[bp],al
17682                                           !BCC_EOS
17683                                           ! 1944    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
17684                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
17685 42DA           8A46         FE            mov	al,-2[bp]
17686 42DD           30E4                       xor	ah,ah
17687 42DF           8B4E         FA            mov	cx,-6[bp]
17688 42E2           F7E9                       imul	cx
17689 42E4           50                         push	ax
17690                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
17691 42E5           8B46         FA            mov	ax,-6[bp]
17692 42E8           8B4E         F8            mov	cx,-8[bp]
17693 42EB           F7E9                       imul	cx
17694                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
17695 42ED           0C                     FF  or	al,#$FF
17696                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
17697                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
17698 42EF           89C3                       mov	bx,ax
17699 42F1           8A46         04            mov	al,4[bp]
17700 42F4           30E4                       xor	ah,ah
17701 42F6           93                         xchg	ax,bx
17702 42F7           40                         inc	ax
17703 42F8           89D9                       mov	cx,bx
17704 42FA           F7E9                       imul	cx
17705                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
17706 42FC           0246         FF            add	al,-1[bp]
17707 42FF           80D4                   00  adc	ah,*0
17708                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
17709 4302           0346         F2            add	ax,-$E[bp]
17710 4305           44                         inc	sp
17711 4306           44                         inc	sp
17712                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
17713 4307           8946         F6            mov	-$A[bp],ax
17714                                           !BCC_EOS
17715                                           ! 1945    crtc_addr=read_word(0x40,0x63);
17716                                           ! Debug: list int = const $63 (used reg = )
17717 430A           B8                   0063  mov	ax,*$63
17718 430D           50                         push	ax
17719                                           ! Debug: list int = const $40 (used reg = )
17720 430E           B8                   0040  mov	ax,*$40
17721 4311           50                         push	ax
17722                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17723 4312           E8         384A            call	_read_word
17724 4315           83C4                   04  add	sp,*4
17725                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
17726 4318           8946         F4            mov	-$C[bp],ax
17727                                           !BCC_EOS
17728                                           ! 1946    outb(crtc_addr,0x0e);
17729                                           ! Debug: list int = const $E (used reg = )
17730 431B           B8                   000E  mov	ax,*$E
17731 431E           50                         push	ax
17732                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17733 431F           FF76         F4            push	-$C[bp]
17734                                           ! Debug: func () void = outb+0 (used reg = )
17735 4322           E8         3893            call	_outb
17736 4325           83C4                   04  add	sp,*4
17737                                           !BCC_EOS
17738                                           ! 1947    outb(crtc_addr+1,(address&0xff00)>>8);
17739                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
17740 4328           8B46         F6            mov	ax,-$A[bp]
17741 432B           30C0                       xor	al,al
17742                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17743 432D           88E0                       mov	al,ah
17744 432F           30E4                       xor	ah,ah
17745                                           ! Debug: list unsigned int = ax+0 (used reg = )
17746 4331           50                         push	ax
17747                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17748 4332           8B46         F4            mov	ax,-$C[bp]
17749                                           ! Debug: list unsigned int = ax+1 (used reg = )
17750 4335           40                         inc	ax
17751 4336           50                         push	ax
17752                                           ! Debug: func () void = outb+0 (used reg = )
17753 4337           E8         387E            call	_outb
17754 433A           83C4                   04  add	sp,*4
17755                                           !BCC_EOS
17756                                           ! 1948    outb(crtc_addr,0x0f);
17757                                           ! Debug: list int = const $F (used reg = )
17758 433D           B8                   000F  mov	ax,*$F
17759 4340           50                         push	ax
17760                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17761 4341           FF76         F4            push	-$C[bp]
17762                                           ! Debug: func () void = outb+0 (used reg = )
17763 4344           E8         3871            call	_outb
17764 4347           83C4                   04  add	sp,*4
17765                                           !BCC_EOS
17766                                           ! 1949    outb(crtc_addr+1,address&0x00ff);
17767                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
17768 434A           8A46         F6            mov	al,-$A[bp]
17769                                           ! Debug: list unsigned char = al+0 (used reg = )
17770 434D           30E4                       xor	ah,ah
17771 434F           50                         push	ax
17772                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17773 4350           8B46         F4            mov	ax,-$C[bp]
17774                                           ! Debug: list unsigned int = ax+1 (used reg = )
17775 4353           40                         inc	ax
17776 4354           50                         push	ax
17777                                           ! Debug: func () void = outb+0 (used reg = )
17778 4355           E8         3860            call	_outb
17779 4358           83C4                   04  add	sp,*4
17780                                           !BCC_EOS
17781                                           ! 1950   }
17782                                           ! 1951 }
17783                       0000435B            .92:
17784 435B           89EC                       mov	sp,bp
17785 435D           5D                         pop	bp
17786 435E           C3                         ret
17787                                           ! 1952 static void biosfn_get_cursor_pos (page,shape, pos)
17788                                           ! Register BX used in function biosfn_set_cursor_pos
17789                                           ! 1953 Bit8u page;Bit16u *shape;Bit16u *pos;
17790                       0000435F            _biosfn_get_cursor_pos:
17791                                           !BCC_EOS
17792                                           !BCC_EOS
17793                                           !BCC_EOS
17794                                           ! 1954 {
17795                                           ! 1955  Bit16u ss=get_SS();
17796 435F           55                         push	bp
17797 4360           89E5                       mov	bp,sp
17798 4362           4C                         dec	sp
17799 4363           4C                         dec	sp
17800                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
17801 4364           E8         3871            call	_get_SS
17802                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
17803 4367           8946         FE            mov	-2[bp],ax
17804                                           !BCC_EOS
17805                                           ! 1956  write_word(ss, shape, 0);
17806                                           ! Debug: list int = const 0 (used reg = )
17807 436A           31C0                       xor	ax,ax
17808 436C           50                         push	ax
17809                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17810 436D           FF76         06            push	6[bp]
17811                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17812 4370           FF76         FE            push	-2[bp]
17813                                           ! Debug: func () void = write_word+0 (used reg = )
17814 4373           E8         3814            call	_write_word
17815 4376           83C4                   06  add	sp,*6
17816                                           !BCC_EOS
17817                                           ! 1957  write_word(ss, pos, 0);
17818                                           ! Debug: list int = const 0 (used reg = )
17819 4379           31C0                       xor	ax,ax
17820 437B           50                         push	ax
17821                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17822 437C           FF76         08            push	8[bp]
17823                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17824 437F           FF76         FE            push	-2[bp]
17825                                           ! Debug: func () void = write_word+0 (used reg = )
17826 4382           E8         3805            call	_write_word
17827 4385           83C4                   06  add	sp,*6
17828                                           !BCC_EOS
17829                                           ! 1958  if(page>7)return;
17830                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
17831 4388           8A46         04            mov	al,4[bp]
17832 438B           3C                     07  cmp	al,*7
17833 438D           76           04            jbe 	.94
17834                       0000438F            .95:
17835 438F           89EC                       mov	sp,bp
17836 4391           5D                         pop	bp
17837 4392           C3                         ret
17838                                           !BCC_EOS
17839                                           ! 1959  write_word(ss,shape,read_word(0x40,0x60));
17840                       00004393            .94:
17841                                           ! Debug: list int = const $60 (used reg = )
17842 4393           B8                   0060  mov	ax,*$60
17843 4396           50                         push	ax
17844                                           ! Debug: list int = const $40 (used reg = )
17845 4397           B8                   0040  mov	ax,*$40
17846 439A           50                         push	ax
17847                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17848 439B           E8         37C1            call	_read_word
17849 439E           83C4                   04  add	sp,*4
17850                                           ! Debug: list unsigned short = ax+0 (used reg = )
17851 43A1           50                         push	ax
17852                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17853 43A2           FF76         06            push	6[bp]
17854                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17855 43A5           FF76         FE            push	-2[bp]
17856                                           ! Debug: func () void = write_word+0 (used reg = )
17857 43A8           E8         37DF            call	_write_word
17858 43AB           83C4                   06  add	sp,*6
17859                                           !BCC_EOS
17860                                           ! 1960  write_word(ss,pos,read_word(0x40,0x50 +page*2));
17861                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
17862 43AE           8A46         04            mov	al,4[bp]
17863 43B1           30E4                       xor	ah,ah
17864 43B3           D1E0                       shl	ax,*1
17865                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17866                                           ! Debug: expression subtree swapping
17867                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17868 43B5           05                   0050  add	ax,*$50
17869 43B8           50                         push	ax
17870                                           ! Debug: list int = const $40 (used reg = )
17871 43B9           B8                   0040  mov	ax,*$40
17872 43BC           50                         push	ax
17873                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17874 43BD           E8         379F            call	_read_word
17875 43C0           83C4                   04  add	sp,*4
17876                                           ! Debug: list unsigned short = ax+0 (used reg = )
17877 43C3           50                         push	ax
17878                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17879 43C4           FF76         08            push	8[bp]
17880                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17881 43C7           FF76         FE            push	-2[bp]
17882                                           ! Debug: func () void = write_word+0 (used reg = )
17883 43CA           E8         37BD            call	_write_word
17884 43CD           83C4                   06  add	sp,*6
17885                                           !BCC_EOS
17886                                           ! 1961 }
17887 43D0           89EC                       mov	sp,bp
17888 43D2           5D                         pop	bp
17889 43D3           C3                         ret
17890                                           ! 1962 static void biosfn_set_active_page (page)
17891                                           ! 1963 Bit8u page;
17892                       000043D4            _biosfn_set_active_page:
17893                                           !BCC_EOS
17894                                           ! 1964 {
17895                                           ! 1965  Bit16u cursor,dummy,crtc_addr;
17896                                           !BCC_EOS
17897                                           ! 1966  Bit16u nbcols,nbrows,address;
17898                                           !BCC_EOS
17899                                           ! 1967  Bit8u mode,l
17900                                           ! 1967 ine;
17901                                           !BCC_EOS
17902                                           ! 1968  if(page>7)return;
17903 43D4           55                         push	bp
17904 43D5           89E5                       mov	bp,sp
17905 43D7           83C4                   F2  add	sp,*-$E
17906                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
17907 43DA           8A46         04            mov	al,4[bp]
17908 43DD           3C                     07  cmp	al,*7
17909 43DF           76           04            jbe 	.96
17910                       000043E1            .97:
17911 43E1           89EC                       mov	sp,bp
17912 43E3           5D                         pop	bp
17913 43E4           C3                         ret
17914                                           !BCC_EOS
17915                                           ! 1969  mode=read_byte(0x40,0x49);
17916                       000043E5            .96:
17917                                           ! Debug: list int = const $49 (used reg = )
17918 43E5           B8                   0049  mov	ax,*$49
17919 43E8           50                         push	ax
17920                                           ! Debug: list int = const $40 (used reg = )
17921 43E9           B8                   0040  mov	ax,*$40
17922 43EC           50                         push	ax
17923                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17924 43ED           E8         375C            call	_read_byte
17925 43F0           83C4                   04  add	sp,*4
17926                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
17927 43F3           8846         F3            mov	-$D[bp],al
17928                                           !BCC_EOS
17929                                           ! 1970  line=find_vga_entry(mode);
17930                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
17931 43F6           8A46         F3            mov	al,-$D[bp]
17932 43F9           30E4                       xor	ah,ah
17933 43FB           50                         push	ax
17934                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
17935 43FC           E8         3661            call	_find_vga_entry
17936 43FF           44                         inc	sp
17937 4400           44                         inc	sp
17938                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
17939 4401           8846         F2            mov	-$E[bp],al
17940                                           !BCC_EOS
17941                                           ! 1971  if(line==0xFF)return;
17942                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
17943 4404           8A46         F2            mov	al,-$E[bp]
17944 4407           3C                     FF  cmp	al,#$FF
17945 4409           75           04            jne 	.98
17946                       0000440B            .99:
17947 440B           89EC                       mov	sp,bp
17948 440D           5D                         pop	bp
17949 440E           C3                         ret
17950                                           !BCC_EOS
17951                                           ! 1972  biosfn_get_cursor_pos(page,&dummy,&cursor);
17952                       0000440F            .98:
17953                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
17954 440F           8D5E         FE            lea	bx,-2[bp]
17955 4412           53                         push	bx
17956                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
17957 4413           8D5E         FC            lea	bx,-4[bp]
17958 4416           53                         push	bx
17959                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
17960 4417           8A46         04            mov	al,4[bp]
17961 441A           30E4                       xor	ah,ah
17962 441C           50                         push	ax
17963                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
17964 441D           E8         FF3F            call	_biosfn_get_cursor_pos
17965 4420           83C4                   06  add	sp,*6
17966                                           !BCC_EOS
17967                                           ! 1973  if(vga_modes[line].class==0x00)
17968                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
17969 4423           8A46         F2            mov	al,-$E[bp]
17970 4426           30E4                       xor	ah,ah
17971 4428           B1                     03  mov	cl,*3
17972 442A           D3E0                       shl	ax,cl
17973 442C           89C3                       mov	bx,ax
17974 442E           81C3                 01C6  add	bx,#_vga_modes
17975                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17976 4432           8A47         01            mov	al,1[bx]
17977 4435           84C0                       test	al,al
17978 4437           75           6E            jne 	.9A
17979                       00004439            .9B:
17980                                           ! 1974   {
17981                                           ! 1975    nbcols=read_word(0x40,0x4A);
17982                                           ! Debug: list int = const $4A (used reg = )
17983 4439           B8                   004A  mov	ax,*$4A
17984 443C           50                         push	ax
17985                                           ! Debug: list int = const $40 (used reg = )
17986 443D           B8                   0040  mov	ax,*$40
17987 4440           50                         push	ax
17988                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17989 4441           E8         371B            call	_read_word
17990 4444           83C4                   04  add	sp,*4
17991                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
17992 4447           8946         F8            mov	-8[bp],ax
17993                                           !BCC_EOS
17994                                           ! 1976    nbrows=read_byte(0x40,0x84)+1;
17995                                           ! Debug: list int = const $84 (used reg = )
17996 444A           B8                   0084  mov	ax,#$84
17997 444D           50                         push	ax
17998                                           ! Debug: list int = const $40 (used reg = )
17999 444E           B8                   0040  mov	ax,*$40
18000 4451           50                         push	ax
18001                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18002 4452           E8         36F7            call	_read_byte
18003 4455           83C4                   04  add	sp,*4
18004                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18005 4458           30E4                       xor	ah,ah
18006                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18007 445A           40                         inc	ax
18008 445B           8946         F6            mov	-$A[bp],ax
18009                                           !BCC_EOS
18010                                           ! 1977    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18011                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18012 445E           8B46         F8            mov	ax,-8[bp]
18013 4461           8B4E         F6            mov	cx,-$A[bp]
18014 4464           F7E9                       imul	cx
18015                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18016 4466           D1E0                       shl	ax,*1
18017                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18018 4468           0C                     FF  or	al,#$FF
18019                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18020                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18021 446A           89C3                       mov	bx,ax
18022 446C           8A46         04            mov	al,4[bp]
18023 446F           30E4                       xor	ah,ah
18024 4471           93                         xchg	ax,bx
18025 4472           40                         inc	ax
18026 4473           89D9                       mov	cx,bx
18027 4475           F7E9                       imul	cx
18028                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18029 4477           8946         F4            mov	-$C[bp],ax
18030                                           !BCC_EOS
18031                                           ! 1978    write_word(0x40,0x4E,address);
18032                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18033 447A           FF76         F4            push	-$C[bp]
18034                                           ! Debug: list int = const $4E (used reg = )
18035 447D           B8                   004E  mov	ax,*$4E
18036 4480           50                         push	ax
18037                                           ! Debug: list int = const $40 (used reg = )
18038 4481           B8                   0040  mov	ax,*$40
18039 4484           50                         push	ax
18040                                           ! Debug: func () void = write_word+0 (used reg = )
18041 4485           E8         3702            call	_write_word
18042 4488           83C4                   06  add	sp,*6
18043                                           !BCC_EOS
18044                                           ! 1979    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18045                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18046 448B           8B46         F8            mov	ax,-8[bp]
18047 448E           8B4E         F6            mov	cx,-$A[bp]
18048 4491           F7E9                       imul	cx
18049                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18050 4493           0C                     FF  or	al,#$FF
18051                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18052                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18053 4495           89C3                       mov	bx,ax
18054 4497           8A46         04            mov	al,4[bp]
18055 449A           30E4                       xor	ah,ah
18056 449C           93                         xchg	ax,bx
18057 449D           40                         inc	ax
18058 449E           89D9                       mov	cx,bx
18059 44A0           F7E9                       imul	cx
18060                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18061 44A2           8946         F4            mov	-$C[bp],ax
18062                                           !BCC_EOS
18063                                           ! 1980   }
18064                                           ! 1981  else
18065                                           ! 1982   {
18066 44A5           EB           24            jmp .9C
18067                       000044A7            .9A:
18068                                           ! 1983    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18069                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18070 44A7           8A46         F2            mov	al,-$E[bp]
18071 44AA           30E4                       xor	ah,ah
18072 44AC           89C3                       mov	bx,ax
18073                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18074 44AE           8A87       0246            mov	al,_line_to_vpti[bx]
18075 44B2           30E4                       xor	ah,ah
18076 44B4           B1                     06  mov	cl,*6
18077 44B6           D3E0                       shl	ax,cl
18078 44B8           89C3                       mov	bx,ax
18079 44BA           81C3                 025A  add	bx,#_video_param_table
18080                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18081                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18082                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18083 44BE           8A46         04            mov	al,4[bp]
18084 44C1           30E4                       xor	ah,ah
18085 44C3           8B4F         03            mov	cx,3[bx]
18086 44C6           F7E9                       imul	cx
18087                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18088 44C8           8946         F4            mov	-$C[bp],ax
18089                                           !BCC_EOS
18090                                           ! 1984   }
18091                                           ! 1985  crtc_addr=read_word(0x40,0x63);
18092                       000044CB            .9C:
18093                                           ! Debug: list int = const $63 (used reg = )
18094 44CB           B8                   0063  mov	ax,*$63
18095 44CE           50                         push	ax
18096                                           ! Debug: list int = const $40 (used reg = )
18097 44CF           B8                   0040  mov	ax,*$40
18098 44D2           50                         push	ax
18099                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18100 44D3           E8         3689            call	_read_word
18101 44D6           83C4                   04  add	sp,*4
18102                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18103 44D9           8946         FA            mov	-6[bp],ax
18104                                           !BCC_EOS
18105                                           ! 1986  outb(crtc_addr,0x0c);
18106                                           ! Debug: list int = const $C (used reg = )
18107 44DC           B8                   000C  mov	ax,*$C
18108 44DF           50                         push	ax
18109                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18110 44E0           FF76         FA            push	-6[bp]
18111                                           ! Debug: func () void = outb+0 (used reg = )
18112 44E3           E8         36D2            call	_outb
18113 44E6           83C4                   04  add	sp,*4
18114                                           !BCC_EOS
18115                                           ! 1987  outb(crtc_addr+1,(address&0xff00)>>8);
18116                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18117 44E9           8B46         F4            mov	ax,-$C[bp]
18118 44EC           30C0                       xor	al,al
18119                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18120 44EE           88E0                       mov	al,ah
18121 44F0           30E4                       xor	ah,ah
18122                                           ! Debug: list unsigned int = ax+0 (used reg = )
18123 44F2           50                         push	ax
18124                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18125 44F3           8B46         FA            mov	ax,-6[bp]
18126                                           ! Debug: list unsigned int = ax+1 (used reg = )
18127 44F6           40                         inc	ax
18128 44F7           50                         push	ax
18129                                           ! Debug: func () void = outb+0 (used reg = )
18130 44F8           E8         36BD            call	_outb
18131 44FB           83C4                   04  add	sp,*4
18132                                           !BCC_EOS
18133                                           ! 1988  outb(crtc_addr,0x0d);
18134                                           ! Debug: list int = const $D (used reg = )
18135 44FE           B8                   000D  mov	ax,*$D
18136 4501           50                         push	ax
18137                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18138 4502           FF76         FA            push	-6[bp]
18139                                           ! Debug: func () void = outb+0 (used reg = )
18140 4505           E8         36B0            call	_outb
18141 4508           83C4                   04  add	sp,*4
18142                                           !BCC_EOS
18143                                           ! 1989  outb(crtc_addr+1,address&0x00ff);
18144                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18145 450B           8A46         F4            mov	al,-$C[bp]
18146                                           ! Debug: list unsigned char = al+0 (used reg = )
18147 450E           30E4                       xor	ah,ah
18148 4510           50                         push	ax
18149                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18150 4511           8B46         FA            mov	ax,-6[bp]
18151                                           ! Debug: list unsigned int = ax+1 (used reg = )
18152 4514           40                         inc	ax
18153 4515           50                         push	ax
18154                                           ! Debug: func () void = outb+0 (used reg = )
18155 4516           E8         369F            call	_outb
18156 4519           83C4                   04  add	sp,*4
18157                                           !BCC_EOS
18158                                           ! 1990  write_byte(0x40,0x62,page);
18159                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18160 451C           8A46         04            mov	al,4[bp]
18161 451F           30E4                       xor	ah,ah
18162 4521           50                         push	ax
18163                                           ! Debug: list int = const $62 (used reg = )
18164 4522           B8                   0062  mov	ax,*$62
18165 4525           50                         push	ax
18166                                           ! Debug: list int = const $40 (used reg = )
18167 4526           B8                   0040  mov	ax,*$40
18168 4529           50                         push	ax
18169                                           ! Debug: func () void = write_byte+0 (used reg = )
18170 452A           E8         3645            call	_write_byte
18171 452D           83C4                   06  add	sp,*6
18172                                           !BCC_EOS
18173                                           ! 1991  biosfn_set_cursor_pos(page,cursor);
18174                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18175 4530           FF76         FE            push	-2[bp]
18176                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18177 4533           8A46         04            mov	al,4[bp]
18178 4536           30E4                       xor	ah,ah
18179 4538           50                         push	ax
18180                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18181 4539           E8         FD22            call	_biosfn_set_cursor_pos
18182 453C           83C4                   04  add	sp,*4
18183                                           !BCC_EOS
18184                                           ! 1992 }
18185 453F           89EC                       mov	sp,bp
18186 4541           5D                         pop	bp
18187 4542           C3                         ret
18188                                           ! 1993 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18189                                           ! Register BX used in function biosfn_set_active_page
18190                                           ! 1994 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18191                       00004543            _vgamem_copy_pl4:
18192                                           !BCC_EOS
18193                                           !BCC_EOS
18194                                           !BCC_EOS
18195                                           !BCC_EOS
18196                                           !BCC_EOS
18197                                           !BCC_EOS
18198                                           ! 1995 {
18199                                           ! 1996  Bit16u src,dest;
18200                                           !BCC_EOS
18201                                           ! 1997  Bit8u i;
18202                                           !BCC_EOS
18203                                           ! 1998  src=ysrc*cheight*nbcols+xstart;
18204 4543           55                         push	bp
18205 4544           89E5                       mov	bp,sp
18206 4546           83C4                   FA  add	sp,*-6
18207                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18208 4549           8A46         0E            mov	al,$E[bp]
18209 454C           30E4                       xor	ah,ah
18210 454E           89C3                       mov	bx,ax
18211 4550           8A46         06            mov	al,6[bp]
18212 4553           30E4                       xor	ah,ah
18213 4555           89D9                       mov	cx,bx
18214 4557           F7E9                       imul	cx
18215                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18216 4559           89C3                       mov	bx,ax
18217 455B           8A46         0C            mov	al,$C[bp]
18218 455E           30E4                       xor	ah,ah
18219 4560           93                         xchg	ax,bx
18220 4561           89D9                       mov	cx,bx
18221 4563           F7E9                       imul	cx
18222                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18223 4565           0246         04            add	al,4[bp]
18224 4568           80D4                   00  adc	ah,*0
18225                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18226 456B           8946         FE            mov	-2[bp],ax
18227                                           !BCC_EOS
18228                                           ! 1999  dest=ydest*cheight*nbcols+xstart;
18229                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18230 456E           8A46         0E            mov	al,$E[bp]
18231 4571           30E4                       xor	ah,ah
18232 4573           89C3                       mov	bx,ax
18233 4575           8A46         08            mov	al,8[bp]
18234 4578           30E4                       xor	ah,ah
18235 457A           89D9                       mov	cx,bx
18236 457C           F7E9                       imul	cx
18237                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18238 457E           89C3                       mov	bx,ax
18239 4580           8A46         0C            mov	al,$C[bp]
18240 4583           30E4                       xor	ah,ah
18241 4585           93                         xchg	ax,bx
18242 4586           89D9                       mov	cx,bx
18243 4588           F7E9                       imul	cx
18244                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18245 458A           0246         04            add	al,4[bp]
18246 458D           80D4                   00  adc	ah,*0
18247                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18248 4590           8946         FC            mov	-4[bp],ax
18249                                           !BCC_EOS
18250                                           ! 2000  outw(0x3ce, 0x0105);
18251                                           ! Debug: list int = const $105 (used reg = )
18252 4593           B8                   0105  mov	ax,#$105
18253 4596           50                         push	ax
18254                                           ! Debug: list int = const $3CE (used reg = )
18255 4597           B8                   03CE  mov	ax,#$3CE
18256 459A           50                         push	ax
18257                                           ! Debug: func () void = outw+0 (used reg = )
18258 459B           E8         362A            call	_outw
18259 459E           83C4                   04  add	sp,*4
18260                                           !BCC_EOS
18261                                           ! 2001  for(i=0;i<cheight;i++)
18262                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18263 45A1           30C0                       xor	al,al
18264 45A3           8846         FB            mov	-5[bp],al
18265                                           !BCC_EOS
18266                                           !BCC_EOS
18267                                           ! 2002   {
18268 45A6           EB           43            jmp .9F
18269                       000045A8            .A0:
18270                                           ! 2003    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18271                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18272 45A8           8A46         0A            mov	al,$A[bp]
18273 45AB           30E4                       xor	ah,ah
18274 45AD           50                         push	ax
18275                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18276 45AE           8A46         0C            mov	al,$C[bp]
18277 45B1           30E4                       xor	ah,ah
18278 45B3           89C3                       mov	bx,ax
18279 45B5           8A46         FB            mov	al,-5[bp]
18280 45B8           30E4                       xor	ah,ah
18281 45BA           89D9                       mov	cx,bx
18282 45BC           F7E9                       imul	cx
18283                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18284                                           ! Debug: expression subtree swapping
18285 45BE           0346         FE            add	ax,-2[bp]
18286                                           ! Debug: list unsigned int = ax+0 (used reg = )
18287 45C1           50                         push	ax
18288                                           ! Debug: list unsigned int = const $A000 (used reg = )
18289 45C2           B8                   A000  mov	ax,#$A000
18290 45C5           50                         push	ax
18291                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18292 45C6           8A46         0C            mov	al,$C[bp]
18293 45C9           30E4                       xor	ah,ah
18294 45CB           89C3                       mov	bx,ax
18295 45CD           8A46         FB            mov	al,-5[bp]
18296 45D0           30E4                       xor	ah,ah
18297 45D2           89D9                       mov	cx,bx
18298 45D4           F7E9                       imul	cx
18299                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18300                                           ! Debug: expression subtree swapping
18301 45D6           0346         FC            add	ax,-4[bp]
18302                                           ! Debug: list unsigned int = ax+0 (used reg = )
18303 45D9           50                         push	ax
18304                                           ! Debug: list unsigned int = const $A000 (used reg = )
18305 45DA           B8                   A000  mov	ax,#$A000
18306 45DD           50                         push	ax
18307                                           ! Debug: func () void = memcpyb+0 (used reg = )
18308 45DE           E8         350B            call	_memcpyb
18309 45E1           83C4                   0A  add	sp,*$A
18310                                           !BCC_EOS
18311                                           ! 2004   }
18312                                           ! 2005  outw(0x3ce, 0x0005);
18313                       000045E4            .9E:
18314                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18315 45E4           8A46         FB            mov	al,-5[bp]
18316 45E7           40                         inc	ax
18317 45E8           8846         FB            mov	-5[bp],al
18318                       000045EB            .9F:
18319                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18320 45EB           8A46         FB            mov	al,-5[bp]
18321 45EE           3A46         0E            cmp	al,$E[bp]
18322 45F1           72           B5            jb 	.A0
18323                       000045F3            .A1:
18324                       000045F3            .9D:
18325                                           ! Debug: list int = const 5 (used reg = )
18326 45F3           B8                   0005  mov	ax,*5
18327 45F6           50                         push	ax
18328                                           ! Debug: list int = const $3CE (used reg = )
18329 45F7           B8                   03CE  mov	ax,#$3CE
18330 45FA           50                         push	ax
18331                                           ! Debug: func () void = outw+0 (used reg = )
18332 45FB           E8         35CA            call	_outw
18333 45FE           83C4                   04  add	sp,*4
18334                                           !BCC_EOS
18335                                           ! 2006 }
18336 4601           89EC                       mov	sp,bp
18337 4603           5D                         pop	bp
18338 4604           C3                         ret
18339                                           ! 2007 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18340                                           ! Register BX used in function vgamem_copy_pl4
18341                                           ! 2008 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18342                       00004605            _vgamem_fill_pl4:
18343                                           !BCC_EOS
18344                                           !BCC_EOS
18345                                           !BCC_EOS
18346                                           !BCC_EOS
18347                                           !BCC_EOS
18348                                           !BCC_EOS
18349                                           ! 2009 {
18350                                           ! 2010  Bit16u dest;
18351                                           !BCC_EOS
18352                                           ! 2011  Bit8u i;
18353                                           !BCC_EOS
18354                                           ! 2012  dest=ystart*cheight*nbcols+xstart;
18355 4605           55                         push	bp
18356 4606           89E5                       mov	bp,sp
18357 4608           83C4                   FC  add	sp,*-4
18358                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18359 460B           8A46         0C            mov	al,$C[bp]
18360 460E           30E4                       xor	ah,ah
18361 4610           89C3                       mov	bx,ax
18362 4612           8A46         06            mov	al,6[bp]
18363 4615           30E4                       xor	ah,ah
18364 4617           89D9                       mov	cx,bx
18365 4619           F7E9                       imul	cx
18366                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18367 461B           89C3                       mov	bx,ax
18368 461D           8A46         0A            mov	al,$A[bp]
18369 4620           30E4                       xor	ah,ah
18370 4622           93                         xchg	ax,bx
18371 4623           89D9                       mov	cx,bx
18372 4625           F7E9                       imul	cx
18373                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18374 4627           0246         04            add	al,4[bp]
18375 462A           80D4                   00  adc	ah,*0
18376                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18377 462D           8946         FE            mov	-2[bp],ax
18378                                           !BCC_EOS
18379                                           ! 2013  outw(0x3ce, 0x0205);
18380                                           ! Debug: list int = const $205 (used reg = )
18381 4630           B8                   0205  mov	ax,#$205
18382 4633           50                         push	ax
18383                                           ! Debug: list int = const $3CE (used reg = )
18384 4634           B8                   03CE  mov	ax,#$3CE
18385 4637           50                         push	ax
18386                                           ! Debug: func () void = outw+0 (used reg = )
18387 4638           E8         358D            call	_outw
18388 463B           83C4                   04  add	sp,*4
18389                                           !BCC_EOS
18390                                           ! 2014  for(i=0;i<cheight;i++)
18391                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18392 463E           30C0                       xor	al,al
18393 4640           8846         FD            mov	-3[bp],al
18394                                           !BCC_EOS
18395                                           !BCC_EOS
18396                                           ! 2015   {
18397 4643           EB           31            jmp .A4
18398                       00004645            .A5:
18399                                           ! 2016    memsetb(0xa000,dest+i*nbcols,attr,cols);
18400                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18401 4645           8A46         08            mov	al,8[bp]
18402 4648           30E4                       xor	ah,ah
18403 464A           50                         push	ax
18404                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18405 464B           8A46         0E            mov	al,$E[bp]
18406 464E           30E4                       xor	ah,ah
18407 4650           50                         push	ax
18408                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18409 4651           8A46         0A            mov	al,$A[bp]
18410 4654           30E4                       xor	ah,ah
18411 4656           89C3                       mov	bx,ax
18412 4658           8A46         FD            mov	al,-3[bp]
18413 465B           30E4                       xor	ah,ah
18414 465D           89D9                       mov	cx,bx
18415 465F           F7E9                       imul	cx
18416                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18417                                           ! Debug: expression subtree swapping
18418 4661           0346         FE            add	ax,-2[bp]
18419                                           ! Debug: list unsigned int = ax+0 (used reg = )
18420 4664           50                         push	ax
18421                                           ! Debug: list unsigned int = const $A000 (used reg = )
18422 4665           B8                   A000  mov	ax,#$A000
18423 4668           50                         push	ax
18424                                           ! Debug: func () void = memsetb+0 (used reg = )
18425 4669           E8         3436            call	_memsetb
18426 466C           83C4                   08  add	sp,*8
18427                                           !BCC_EOS
18428                                           ! 2017   }
18429                                           ! 2018  outw(0x3ce, 0x0005);
18430                       0000466F            .A3:
18431                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18432 466F           8A46         FD            mov	al,-3[bp]
18433 4672           40                         inc	ax
18434 4673           8846         FD            mov	-3[bp],al
18435                       00004676            .A4:
18436                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18437 4676           8A46         FD            mov	al,-3[bp]
18438 4679           3A46         0C            cmp	al,$C[bp]
18439 467C           72           C7            jb 	.A5
18440                       0000467E            .A6:
18441                       0000467E            .A2:
18442                                           ! Debug: list int = const 5 (used reg = )
18443 467E           B8                   0005  mov	ax,*5
18444 4681           50                         push	ax
18445                                           ! Debug: list int = const $3CE (used reg = )
18446 4682           B8                   03CE  mov	ax,#$3CE
18447 4685           50                         push	ax
18448                                           ! Debug: func () void = outw+0 (used reg = )
18449 4686           E8         353F            call	_outw
18450 4689           83C4                   04  add	sp,*4
18451                                           !BCC_EOS
18452                                           ! 2019 }
18453 468C           89EC                       mov	sp,bp
18454 468E           5D                         pop	bp
18455 468F           C3                         ret
18456                                           ! 2020 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18457                                           ! Register BX used in function vgamem_fill_pl4
18458                                           ! 2021 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18459                       00004690            _vgamem_copy_cga:
18460                                           !BCC_EOS
18461                                           !BCC_EOS
18462                                           !BCC_EOS
18463                                           !BCC_EOS
18464                                           !BCC_EOS
18465                                           !BCC_EOS
18466                                           ! 2022 {
18467                                           ! 2023  Bit16u src,dest;
18468                                           !BCC_EOS
18469                                           ! 2024  Bit8u i;
18470                                           !BCC_EOS
18471                                           ! 2025  src=((ysrc*cheight*nbcols)>>1)+xstart;
18472 4690           55                         push	bp
18473 4691           89E5                       mov	bp,sp
18474 4693           83C4                   FA  add	sp,*-6
18475                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18476 4696           8A46         0E            mov	al,$E[bp]
18477 4699           30E4                       xor	ah,ah
18478 469B           89C3                       mov	bx,ax
18479 469D           8A46         06            mov	al,6[bp]
18480 46A0           30E4                       xor	ah,ah
18481 46A2           89D9                       mov	cx,bx
18482 46A4           F7E9                       imul	cx
18483                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18484 46A6           89C3                       mov	bx,ax
18485 46A8           8A46         0C            mov	al,$C[bp]
18486 46AB           30E4                       xor	ah,ah
18487 46AD           93                         xchg	ax,bx
18488 46AE           89D9                       mov	cx,bx
18489 46B0           F7E9                       imul	cx
18490                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18491 46B2           D1E8                       shr	ax,*1
18492                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18493 46B4           0246         04            add	al,4[bp]
18494 46B7           80D4                   00  adc	ah,*0
18495                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18496 46BA           8946         FE            mov	-2[bp],ax
18497                                           !BCC_EOS
18498                                           ! 2026  dest=((ydest*cheight*nbcols)>>1)+xstart;
18499                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18500 46BD           8A46         0E            mov	al,$E[bp]
18501 46C0           30E4                       xor	ah,ah
18502 46C2           89C3                       mov	bx,ax
18503 46C4           8A46         08            mov	al,8[bp]
18504 46C7           30E4                       xor	ah,ah
18505 46C9           89D9                       mov	cx,bx
18506 46CB           F7E9                       imul	cx
18507                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18508 46CD           89C3                       mov	bx,ax
18509 46CF           8A46         0C            mov	al,$C[bp]
18510 46D2           30E4                       xor	ah,ah
18511 46D4           93                         xchg	ax,bx
18512 46D5           89D9                       mov	cx,bx
18513 46D7           F7E9                       imul	cx
18514                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18515 46D9           D1E8                       shr	ax,*1
18516                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18517 46DB           0246         04            add	al,4[bp]
18518 46DE           80D4                   00  adc	ah,*0
18519                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18520 46E1           8946         FC            mov	-4[bp],ax
18521                                           !BCC_EOS
18522                                           ! 2027  for(i=0;i<cheight;i++)
18523                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18524 46E4           30C0                       xor	al,al
18525 46E6           8846         FB            mov	-5[bp],al
18526                                           !BCC_EOS
18527                                           !BCC_EOS
18528                                           ! 2028   {
18529 46E9           E9         00A8            br 	.A9
18530                       000046EC            .AA:
18531                                           ! 2029    if (i & 1)
18532                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
18533 46EC           8A46         FB            mov	al,-5[bp]
18534 46EF           24                     01  and	al,*1
18535 46F1           84C0                       test	al,al
18536 46F3           74           56            je  	.AB
18537                       000046F5            .AC:
18538                                           ! 2030      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
18539                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18540 46F5           8A46         0A            mov	al,$A[bp]
18541 46F8           30E4                       xor	ah,ah
18542 46FA           50                         push	ax
18543                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18544 46FB           8A46         FB            mov	al,-5[bp]
18545 46FE           30E4                       xor	ah,ah
18546 4700           D1E8                       shr	ax,*1
18547                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18548 4702           89C3                       mov	bx,ax
18549 4704           8A46         0C            mov	al,$C[bp]
18550 4707           30E4                       xor	ah,ah
18551 4709           93                         xchg	ax,bx
18552 470A           89D9                       mov	cx,bx
18553 470C           F7E9                       imul	cx
18554 470E           50                         push	ax
18555                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
18556                                           ! Debug: expression subtree swapping
18557 470F           8B46         FE            mov	ax,-2[bp]
18558                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18559 4712           05                   2000  add	ax,#$2000
18560 4715           0346         F6            add	ax,-$A[bp]
18561 4718           44                         inc	sp
18562 4719           44                         inc	sp
18563                                           ! Debug: list unsigned int = ax+0 (used reg = )
18564 471A           50                         push	ax
18565                                           ! Debug: list unsigned int = const $B800 (used reg = )
18566 471B           B8                   B800  mov	ax,#$B800
18567 471E           50                         push	ax
18568                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18569 471F           8A46         FB            mov	al,-5[bp]
18570 4722           30E4                       xor	ah,ah
18571 4724           D1E8                       shr	ax,*1
18572                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18573 4726           89C3                       mov	bx,ax
18574 4728           8A46         0C            mov	al,$C[bp]
18575 472B           30E4                       xor	ah,ah
18576 472D           93                         xchg	ax,bx
18577 472E           89D9                       mov	cx,bx
18578 4730           F7E9                       imul	cx
18579 4732           50                         push	ax
18580                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
18581                                           ! Debug: expression subtree swapping
18582 4733           8B46         FC            mov	ax,-4[bp]
18583                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
18584 4736           05                   2000  add	ax,#$2000
18585 4739           0346         F2            add	ax,-$E[bp]
18586 473C           44                         inc	sp
18587 473D           44                         inc	sp
18588                                           ! Debug: list unsigned int = ax+0 (used reg = )
18589 473E           50                         push	ax
18590                                           ! Debug: list unsigned int = const $B800 (used reg = )
18591 473F           B8                   B800  mov	ax,#$B800
18592 4742           50                         push	ax
18593                                           ! Debug: func () void = memcpyb+0 (used reg = )
18594 4743           E8         33A6            call	_memcpyb
18595 4746           83C4                   0A  add	sp,*$A
18596                                           !BCC_EOS
18597                                           ! 2031    else
18598                                           ! 2032      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
18599 4749           EB           42            jmp .AD
18600                       0000474B            .AB:
18601                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18602 474B           8A46         0A            mov	al,$A[bp]
18603 474E           30E4                       xor	ah,ah
18604 4750           50                         push	ax
18605                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18606 4751           8A46         FB            mov	al,-5[bp]
18607 4754           30E4                       xor	ah,ah
18608 4756           D1E8                       shr	ax,*1
18609                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18610 4758           89C3                       mov	bx,ax
18611 475A           8A46         0C            mov	al,$C[bp]
18612 475D           30E4                       xor	ah,ah
18613 475F           93                         xchg	ax,bx
18614 4760           89D9                       mov	cx,bx
18615 4762           F7E9                       imul	cx
18616                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18617                                           ! Debug: expression subtree swapping
18618 4764           0346         FE            add	ax,-2[bp]
18619                                           ! Debug: list unsigned int = ax+0 (used reg = )
18620 4767           50                         push	ax
18621                                           ! Debug: list unsigned int = const $B800 (used reg = )
18622 4768           B8                   B800  mov	ax,#$B800
18623 476B           50                         push	ax
18624                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18625 476C           8A46         FB            mov	al,-5[bp]
18626 476F           30E4                       xor	ah,ah
18627 4771           D1E8                       shr	ax,*1
18628                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18629 4773           89C3                       mov	bx,ax
18630 4775           8A46         0C            mov	al,$C[bp]
18631 4778           30E4                       xor	ah,ah
18632 477A           93                         xchg	ax,bx
18633 477B           89D9                       mov	cx,bx
18634 477D           F7E9                       imul	cx
18635                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18636                                           ! Debug: expression subtree swapping
18637 477F           0346         FC            add	ax,-4[bp]
18638                                           ! Debug: list unsigned int = ax+0 (used reg = )
18639 4782           50                         push	ax
18640                                           ! Debug: list unsigned int = const $B800 (used reg = )
18641 4783           B8                   B800  mov	ax,#$B800
18642 4786           50                         push	ax
18643                                           ! Debug: func () void = memcpyb+0 (used reg = )
18644 4787           E8         3362            call	_memcpyb
18645 478A           83C4                   0A  add	sp,*$A
18646                                           !BCC_EOS
18647                                           ! 2033   }
18648                       0000478D            .AD:
18649                                           ! 2034 }
18650                       0000478D            .A8:
18651                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18652 478D           8A46         FB            mov	al,-5[bp]
18653 4790           40                         inc	ax
18654 4791           8846         FB            mov	-5[bp],al
18655                       00004794            .A9:
18656                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18657 4794           8A46         FB            mov	al,-5[bp]
18658 4797           3A46         0E            cmp	al,$E[bp]
18659 479A   7303    E9         FF4D            blo 	.AA
18660                       0000479F            .AE:
18661                       0000479F            .A7:
18662 479F           89EC                       mov	sp,bp
18663 47A1           5D                         pop	bp
18664 47A2           C3                         ret
18665                                           ! 2035 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
18666                                           ! Register BX used in function vgamem_copy_cga
18667                                           ! 2036 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18668                       000047A3            _vgamem_fill_cga:
18669                                           !BCC_EOS
18670                                           !BCC_EOS
18671                                           !BCC_EOS
18672                                           !BCC_EOS
18673                                           !BCC_EOS
18674                                           !BCC_EOS
18675                                           ! 2037 {
18676                                           ! 2038  Bit16u dest;
18677                                           !BCC_EOS
18678                                           ! 2039  Bit8u i;
18679                                           !BCC_EOS
18680                                           ! 2040  
18681                                           ! 2040 dest=((ystart*cheight*nbcols)>>1)+xstart;
18682 47A3           55                         push	bp
18683 47A4           89E5                       mov	bp,sp
18684 47A6           83C4                   FC  add	sp,*-4
18685                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18686 47A9           8A46         0C            mov	al,$C[bp]
18687 47AC           30E4                       xor	ah,ah
18688 47AE           89C3                       mov	bx,ax
18689 47B0           8A46         06            mov	al,6[bp]
18690 47B3           30E4                       xor	ah,ah
18691 47B5           89D9                       mov	cx,bx
18692 47B7           F7E9                       imul	cx
18693                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18694 47B9           89C3                       mov	bx,ax
18695 47BB           8A46         0A            mov	al,$A[bp]
18696 47BE           30E4                       xor	ah,ah
18697 47C0           93                         xchg	ax,bx
18698 47C1           89D9                       mov	cx,bx
18699 47C3           F7E9                       imul	cx
18700                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18701 47C5           D1E8                       shr	ax,*1
18702                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18703 47C7           0246         04            add	al,4[bp]
18704 47CA           80D4                   00  adc	ah,*0
18705                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18706 47CD           8946         FE            mov	-2[bp],ax
18707                                           !BCC_EOS
18708                                           ! 2041  for(i=0;i<cheight;i++)
18709                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18710 47D0           30C0                       xor	al,al
18711 47D2           8846         FD            mov	-3[bp],al
18712                                           !BCC_EOS
18713                                           !BCC_EOS
18714                                           ! 2042   {
18715 47D5           EB           75            jmp .B1
18716                       000047D7            .B2:
18717                                           ! 2043    if (i & 1)
18718                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
18719 47D7           8A46         FD            mov	al,-3[bp]
18720 47DA           24                     01  and	al,*1
18721 47DC           84C0                       test	al,al
18722 47DE           74           38            je  	.B3
18723                       000047E0            .B4:
18724                                           ! 2044      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
18725                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18726 47E0           8A46         08            mov	al,8[bp]
18727 47E3           30E4                       xor	ah,ah
18728 47E5           50                         push	ax
18729                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18730 47E6           8A46         0E            mov	al,$E[bp]
18731 47E9           30E4                       xor	ah,ah
18732 47EB           50                         push	ax
18733                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18734 47EC           8A46         FD            mov	al,-3[bp]
18735 47EF           30E4                       xor	ah,ah
18736 47F1           D1E8                       shr	ax,*1
18737                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18738 47F3           89C3                       mov	bx,ax
18739 47F5           8A46         0A            mov	al,$A[bp]
18740 47F8           30E4                       xor	ah,ah
18741 47FA           93                         xchg	ax,bx
18742 47FB           89D9                       mov	cx,bx
18743 47FD           F7E9                       imul	cx
18744 47FF           50                         push	ax
18745                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
18746                                           ! Debug: expression subtree swapping
18747 4800           8B46         FE            mov	ax,-2[bp]
18748                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18749 4803           05                   2000  add	ax,#$2000
18750 4806           0346         F6            add	ax,-$A[bp]
18751 4809           44                         inc	sp
18752 480A           44                         inc	sp
18753                                           ! Debug: list unsigned int = ax+0 (used reg = )
18754 480B           50                         push	ax
18755                                           ! Debug: list unsigned int = const $B800 (used reg = )
18756 480C           B8                   B800  mov	ax,#$B800
18757 480F           50                         push	ax
18758                                           ! Debug: func () void = memsetb+0 (used reg = )
18759 4810           E8         328F            call	_memsetb
18760 4813           83C4                   08  add	sp,*8
18761                                           !BCC_EOS
18762                                           ! 2045    else
18763                                           ! 2046      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
18764 4816           EB           2D            jmp .B5
18765                       00004818            .B3:
18766                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18767 4818           8A46         08            mov	al,8[bp]
18768 481B           30E4                       xor	ah,ah
18769 481D           50                         push	ax
18770                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18771 481E           8A46         0E            mov	al,$E[bp]
18772 4821           30E4                       xor	ah,ah
18773 4823           50                         push	ax
18774                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18775 4824           8A46         FD            mov	al,-3[bp]
18776 4827           30E4                       xor	ah,ah
18777 4829           D1E8                       shr	ax,*1
18778                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18779 482B           89C3                       mov	bx,ax
18780 482D           8A46         0A            mov	al,$A[bp]
18781 4830           30E4                       xor	ah,ah
18782 4832           93                         xchg	ax,bx
18783 4833           89D9                       mov	cx,bx
18784 4835           F7E9                       imul	cx
18785                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18786                                           ! Debug: expression subtree swapping
18787 4837           0346         FE            add	ax,-2[bp]
18788                                           ! Debug: list unsigned int = ax+0 (used reg = )
18789 483A           50                         push	ax
18790                                           ! Debug: list unsigned int = const $B800 (used reg = )
18791 483B           B8                   B800  mov	ax,#$B800
18792 483E           50                         push	ax
18793                                           ! Debug: func () void = memsetb+0 (used reg = )
18794 483F           E8         3260            call	_memsetb
18795 4842           83C4                   08  add	sp,*8
18796                                           !BCC_EOS
18797                                           ! 2047   }
18798                       00004845            .B5:
18799                                           ! 2048 }
18800                       00004845            .B0:
18801                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18802 4845           8A46         FD            mov	al,-3[bp]
18803 4848           40                         inc	ax
18804 4849           8846         FD            mov	-3[bp],al
18805                       0000484C            .B1:
18806                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18807 484C           8A46         FD            mov	al,-3[bp]
18808 484F           3A46         0C            cmp	al,$C[bp]
18809 4852           72           83            jb 	.B2
18810                       00004854            .B6:
18811                       00004854            .AF:
18812 4854           89EC                       mov	sp,bp
18813 4856           5D                         pop	bp
18814 4857           C3                         ret
18815                                           ! 2049 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
18816                                           ! Register BX used in function vgamem_fill_cga
18817                                           ! 2050 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
18818                       00004858            _biosfn_scroll:
18819                                           !BCC_EOS
18820                                           !BCC_EOS
18821                                           !BCC_EOS
18822                                           !BCC_EOS
18823                                           !BCC_EOS
18824                                           !BCC_EOS
18825                                           !BCC_EOS
18826                                           !BCC_EOS
18827                                           ! 2051 {
18828                                           ! 2052  Bit8u mode,line,cheight,bpp,cols;
18829                                           !BCC_EOS
18830                                           ! 2053  Bit16u nbcols,nbrows,i;
18831                                           !BCC_EOS
18832                                           ! 2054  Bit16u address;
18833                                           !BCC_EOS
18834                                           ! 2055  if(rul>rlr)return;
18835 4858           55                         push	bp
18836 4859           89E5                       mov	bp,sp
18837 485B           83C4                   F2  add	sp,*-$E
18838                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
18839 485E           8A46         08            mov	al,8[bp]
18840 4861           3A46         0C            cmp	al,$C[bp]
18841 4864           76           04            jbe 	.B7
18842                       00004866            .B8:
18843 4866           89EC                       mov	sp,bp
18844 4868           5D                         pop	bp
18845 4869           C3                         ret
18846                                           !BCC_EOS
18847                                           ! 2056  if(cul>clr)return;
18848                       0000486A            .B7:
18849                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
18850 486A           8A46         0A            mov	al,$A[bp]
18851 486D           3A46         0E            cmp	al,$E[bp]
18852 4870           76           04            jbe 	.B9
18853                       00004872            .BA:
18854 4872           89EC                       mov	sp,bp
18855 4874           5D                         pop	bp
18856 4875           C3                         ret
18857                                           !BCC_EOS
18858                                           ! 2057  mode=read_byte(0x40,0x49);
18859                       00004876            .B9:
18860                                           ! Debug: list int = const $49 (used reg = )
18861 4876           B8                   0049  mov	ax,*$49
18862 4879           50                         push	ax
18863                                           ! Debug: list int = const $40 (used reg = )
18864 487A           B8                   0040  mov	ax,*$40
18865 487D           50                         push	ax
18866                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18867 487E           E8         32CB            call	_read_byte
18868 4881           83C4                   04  add	sp,*4
18869                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
18870 4884           8846         FF            mov	-1[bp],al
18871                                           !BCC_EOS
18872                                           ! 2058  line=find_vga_entry(mode);
18873                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
18874 4887           8A46         FF            mov	al,-1[bp]
18875 488A           30E4                       xor	ah,ah
18876 488C           50                         push	ax
18877                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18878 488D           E8         31D0            call	_find_vga_entry
18879 4890           44                         inc	sp
18880 4891           44                         inc	sp
18881                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
18882 4892           8846         FE            mov	-2[bp],al
18883                                           !BCC_EOS
18884                                           ! 2059  if(line==0xFF)return;
18885                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
18886 4895           8A46         FE            mov	al,-2[bp]
18887 4898           3C                     FF  cmp	al,#$FF
18888 489A           75           04            jne 	.BB
18889                       0000489C            .BC:
18890 489C           89EC                       mov	sp,bp
18891 489E           5D                         pop	bp
18892 489F           C3                         ret
18893                                           !BCC_EOS
18894                                           ! 2060  nbrows=read_byte(0x40,0x84)+1;
18895                       000048A0            .BB:
18896                                           ! Debug: list int = const $84 (used reg = )
18897 48A0           B8                   0084  mov	ax,#$84
18898 48A3           50                         push	ax
18899                                           ! Debug: list int = const $40 (used reg = )
18900 48A4           B8                   0040  mov	ax,*$40
18901 48A7           50                         push	ax
18902                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18903 48A8           E8         32A1            call	_read_byte
18904 48AB           83C4                   04  add	sp,*4
18905                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18906 48AE           30E4                       xor	ah,ah
18907                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18908 48B0           40                         inc	ax
18909 48B1           8946         F6            mov	-$A[bp],ax
18910                                           !BCC_EOS
18911                                           ! 2061  nbcols=read_word(0x40,0x4A);
18912                                           ! Debug: list int = const $4A (used reg = )
18913 48B4           B8                   004A  mov	ax,*$4A
18914 48B7           50                         push	ax
18915                                           ! Debug: list int = const $40 (used reg = )
18916 48B8           B8                   0040  mov	ax,*$40
18917 48BB           50                         push	ax
18918                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18919 48BC           E8         32A0            call	_read_word
18920 48BF           83C4                   04  add	sp,*4
18921                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18922 48C2           8946         F8            mov	-8[bp],ax
18923                                           !BCC_EOS
18924                                           ! 2062  if(page==0xFF)
18925                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
18926 48C5           8A46         10            mov	al,$10[bp]
18927 48C8           3C                     FF  cmp	al,#$FF
18928 48CA           75           11            jne 	.BD
18929                       000048CC            .BE:
18930                                           ! 2063   page=read_byte(0x40,0x62);
18931                                           ! Debug: list int = const $62 (used reg = )
18932 48CC           B8                   0062  mov	ax,*$62
18933 48CF           50                         push	ax
18934                                           ! Debug: list int = const $40 (used reg = )
18935 48D0           B8                   0040  mov	ax,*$40
18936 48D3           50                         push	ax
18937                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18938 48D4           E8         3275            call	_read_byte
18939 48D7           83C4                   04  add	sp,*4
18940                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
18941 48DA           8846         10            mov	$10[bp],al
18942                                           !BCC_EOS
18943                                           ! 2064  if(rlr>=nbrows)rlr=nbrows-1;
18944                       000048DD            .BD:
18945                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
18946 48DD           8A46         0C            mov	al,$C[bp]
18947 48E0           30E4                       xor	ah,ah
18948 48E2           3B46         F6            cmp	ax,-$A[bp]
18949 48E5           72           07            jb  	.BF
18950                       000048E7            .C0:
18951                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18952 48E7           8B46         F6            mov	ax,-$A[bp]
18953                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
18954 48EA           48                         dec	ax
18955 48EB           8846         0C            mov	$C[bp],al
18956                                           !BCC_EOS
18957                                           ! 2065  if(clr>=nbcols)clr=nbcols-1;
18958                       000048EE            .BF:
18959                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
18960 48EE           8A46         0E            mov	al,$E[bp]
18961 48F1           30E4                       xor	ah,ah
18962 48F3           3B46         F8            cmp	ax,-8[bp]
18963 48F6           72           07            jb  	.C1
18964                       000048F8            .C2:
18965                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
18966 48F8           8B46         F8            mov	ax,-8[bp]
18967                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
18968 48FB           48                         dec	ax
18969 48FC           8846         0E            mov	$E[bp],al
18970                                           !BCC_EOS
18971                                           ! 2066  if(nblines>nbrows)nblines=0;
18972                       000048FF            .C1:
18973                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
18974 48FF           8A46         04            mov	al,4[bp]
18975 4902           30E4                       xor	ah,ah
18976 4904           3B46         F6            cmp	ax,-$A[bp]
18977 4907           76           05            jbe 	.C3
18978                       00004909            .C4:
18979                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
18980 4909           30C0                       xor	al,al
18981 490B           8846         04            mov	4[bp],al
18982                                           !BCC_EOS
18983                                           ! 2067  cols=clr-cul+1;
18984                       0000490E            .C3:
18985                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
18986 490E           8A46         0E            mov	al,$E[bp]
18987 4911           30E4                       xor	ah,ah
18988 4913           2A46         0A            sub	al,$A[bp]
18989 4916           80DC                   00  sbb	ah,*0
18990                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18991                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
18992 4919           40                         inc	ax
18993 491A           8846         FB            mov	-5[bp],al
18994                                           !BCC_EOS
18995                                           ! 2068  if(vga_modes[line].class==0x00)
18996                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
18997 491D           8A46         FE            mov	al,-2[bp]
18998 4920           30E4                       xor	ah,ah
18999 4922           B1                     03  mov	cl,*3
19000 4924           D3E0                       shl	ax,cl
19001 4926           89C3                       mov	bx,ax
19002 4928           81C3                 01C6  add	bx,#_vga_modes
19003                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19004 492C           8A47         01            mov	al,1[bx]
19005 492F           84C0                       test	al,al
19006 4931   7403    E9         0253            bne 	.C5
19007                       00004936            .C6:
19008                                           ! 2069   {
19009                                           ! 2070    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19010                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19011 4936           8B46         F8            mov	ax,-8[bp]
19012 4939           8B4E         F6            mov	cx,-$A[bp]
19013 493C           F7E9                       imul	cx
19014                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19015 493E           D1E0                       shl	ax,*1
19016                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19017 4940           0C                     FF  or	al,#$FF
19018                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19019                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19020 4942           89C3                       mov	bx,ax
19021 4944           8A46         10            mov	al,$10[bp]
19022 4947           30E4                       xor	ah,ah
19023 4949           93                         xchg	ax,bx
19024 494A           40                         inc	ax
19025 494B           89D9                       mov	cx,bx
19026 494D           F7E9                       imul	cx
19027                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19028 494F           8946         F2            mov	-$E[bp],ax
19029                                           !BCC_EOS
19030                                           ! 2071    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19031                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19032 4952           8A46         04            mov	al,4[bp]
19033 4955           84C0                       test	al,al
19034 4957           75           67            jne 	.C7
19035                       00004959            .CC:
19036                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19037 4959           8A46         08            mov	al,8[bp]
19038 495C           84C0                       test	al,al
19039 495E           75           60            jne 	.C7
19040                       00004960            .CB:
19041                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19042 4960           8A46         0A            mov	al,$A[bp]
19043 4963           84C0                       test	al,al
19044 4965           75           59            jne 	.C7
19045                       00004967            .CA:
19046                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19047 4967           8B46         F6            mov	ax,-$A[bp]
19048                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19049                                           ! Debug: expression subtree swapping
19050 496A           48                         dec	ax
19051 496B           50                         push	ax
19052 496C           8A46         0C            mov	al,$C[bp]
19053 496F           30E4                       xor	ah,ah
19054 4971           3B46         F0            cmp	ax,-$10[bp]
19055 4974           8D66         F2            lea	sp,-$E[bp]
19056 4977           75           47            jne 	.C7
19057                       00004979            .C9:
19058                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19059 4979           8B46         F8            mov	ax,-8[bp]
19060                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19061                                           ! Debug: expression subtree swapping
19062 497C           48                         dec	ax
19063 497D           50                         push	ax
19064 497E           8A46         0E            mov	al,$E[bp]
19065 4981           30E4                       xor	ah,ah
19066 4983           3B46         F0            cmp	ax,-$10[bp]
19067 4986           8D66         F2            lea	sp,-$E[bp]
19068 4989           75           35            jne 	.C7
19069                       0000498B            .C8:
19070                                           ! 2072     {
19071                                           ! 2073      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19072                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19073 498B           8B46         F6            mov	ax,-$A[bp]
19074 498E           8B4E         F8            mov	cx,-8[bp]
19075 4991           F7E9                       imul	cx
19076                                           ! Debug: list unsigned int = ax+0 (used reg = )
19077 4993           50                         push	ax
19078                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19079 4994           8A46         06            mov	al,6[bp]
19080 4997           30E4                       xor	ah,ah
19081                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19082 4999           B9                   0100  mov	cx,#$100
19083 499C           F7E9                       imul	cx
19084                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19085                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19086 499E           05                   0020  add	ax,*$20
19087 49A1           50                         push	ax
19088                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19089 49A2           FF76         F2            push	-$E[bp]
19090                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19091 49A5           8A46         FE            mov	al,-2[bp]
19092 49A8           30E4                       xor	ah,ah
19093 49AA           B1                     03  mov	cl,*3
19094 49AC           D3E0                       shl	ax,cl
19095 49AE           89C3                       mov	bx,ax
19096 49B0           81C3                 01C6  add	bx,#_vga_modes
19097                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19098 49B4           FF77         04            push	4[bx]
19099                                           ! Debug: func () void = memsetw+0 (used reg = )
19100 49B7           E8         310D            call	_memsetw
19101 49BA           83C4                   08  add	sp,*8
19102                                           !BCC_EOS
19103                                           ! 2074     }
19104                                           ! 2075    else
19105                                           ! 2076     {
19106 49BD           E9         01C6            br 	.CD
19107                       000049C0            .C7:
19108                                           ! 2077      if(dir==1)
19109                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19110 49C0           8A46         12            mov	al,$12[bp]
19111 49C3           3C                     01  cmp	al,*1
19112 49C5   7403    E9         00DD            bne 	.CE
19113                       000049CA            .CF:
19114                                           ! 2078       {for(i=rul;i<=rlr;i++)
19115                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19116 49CA           8A46         08            mov	al,8[bp]
19117 49CD           30E4                       xor	ah,ah
19118 49CF           8946         F4            mov	-$C[bp],ax
19119                                           !BCC_EOS
19120                                           !BCC_EOS
19121                                           ! 2079         {
19122 49D2           E9         00C2            br 	.D2
19123                       000049D5            .D3:
19124                                           ! 2080          if((i+nblines>rlr)||(nblines==0))
19125                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19126 49D5           8B46         F4            mov	ax,-$C[bp]
19127 49D8           0246         04            add	al,4[bp]
19128 49DB           80D4                   00  adc	ah,*0
19129                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19130 49DE           50                         push	ax
19131 49DF           8A46         0C            mov	al,$C[bp]
19132 49E2           30E4                       xor	ah,ah
19133 49E4           3B46         F0            cmp	ax,-$10[bp]
19134 49E7           8D66         F2            lea	sp,-$E[bp]
19135 49EA           72           07            jb  	.D5
19136                       000049EC            .D6:
19137                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19138 49EC           8A46         04            mov	al,4[bp]
19139 49EF           84C0                       test	al,al
19140 49F1           75           42            jne 	.D4
19141                       000049F3            .D5:
19142                                           ! 2081           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19143                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19144 49F3           8A46         FB            mov	al,-5[bp]
19145 49F6           30E4                       xor	ah,ah
19146 49F8           50                         push	ax
19147                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19148 49F9           8A46         06            mov	al,6[bp]
19149 49FC           30E4                       xor	ah,ah
19150                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19151 49FE           B9                   0100  mov	cx,#$100
19152 4A01           F7E9                       imul	cx
19153                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19154                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19155 4A03           05                   0020  add	ax,*$20
19156 4A06           50                         push	ax
19157                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19158 4A07           8B46         F4            mov	ax,-$C[bp]
19159 4A0A           8B4E         F8            mov	cx,-8[bp]
19160 4A0D           F7E9                       imul	cx
19161                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19162 4A0F           0246         0A            add	al,$A[bp]
19163 4A12           80D4                   00  adc	ah,*0
19164                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19165 4A15           D1E0                       shl	ax,*1
19166                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19167                                           ! Debug: expression subtree swapping
19168 4A17           0346         F2            add	ax,-$E[bp]
19169                                           ! Debug: list unsigned int = ax+0 (used reg = )
19170 4A1A           50                         push	ax
19171                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19172 4A1B           8A46         FE            mov	al,-2[bp]
19173 4A1E           30E4                       xor	ah,ah
19174 4A20           B1                     03  mov	cl,*3
19175 4A22           D3E0                       shl	ax,cl
19176 4A24           89C3                       mov	bx,ax
19177 4A26           81C3                 01C6  add	bx,#_vga_modes
19178                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19179 4A2A           FF77         04            push	4[bx]
19180                                           ! Debug: func () void = memsetw+0 (used reg = )
19181 4A2D           E8         3097            call	_memsetw
19182 4A30           83C4                   08  add	sp,*8
19183                                           !BCC_EOS
19184                                           ! 2082          else
19185                                           ! 2083           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19186 4A33           EB           5B            jmp .D7
19187                       00004A35            .D4:
19188                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19189 4A35           8A46         FB            mov	al,-5[bp]
19190 4A38           30E4                       xor	ah,ah
19191 4A3A           50                         push	ax
19192                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19193 4A3B           8B46         F4            mov	ax,-$C[bp]
19194 4A3E           0246         04            add	al,4[bp]
19195 4A41           80D4                   00  adc	ah,*0
19196                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19197 4A44           8B4E         F8            mov	cx,-8[bp]
19198 4A47           F7E9                       imul	cx
19199                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19200 4A49           0246         0A            add	al,$A[bp]
19201 4A4C           80D4                   00  adc	ah,*0
19202                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19203 4A4F           D1E0                       shl	ax,*1
19204                                           ! Debug: list unsigned int = ax+0 (used reg = )
19205 4A51           50                         push	ax
19206                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19207 4A52           8A46         FE            mov	al,-2[bp]
19208 4A55           30E4                       xor	ah,ah
19209 4A57           B1                     03  mov	cl,*3
19210 4A59           D3E0                       shl	ax,cl
19211 4A5B           89C3                       mov	bx,ax
19212 4A5D           81C3                 01C6  add	bx,#_vga_modes
19213                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19214 4A61           FF77         04            push	4[bx]
19215                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19216 4A64           8B46         F4            mov	ax,-$C[bp]
19217 4A67           8B4E         F8            mov	cx,-8[bp]
19218 4A6A           F7E9                       imul	cx
19219                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19220 4A6C           0246         0A            add	al,$A[bp]
19221 4A6F           80D4                   00  adc	ah,*0
19222                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19223 4A72           D1E0                       shl	ax,*1
19224                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19225                                           ! Debug: expression subtree swapping
19226 4A74           0346         F2            add	ax,-$E[bp]
19227                                           ! Debug: list unsigned int = ax+0 (used reg = )
19228 4A77           50                         push	ax
19229                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19230 4A78           8A46         FE            mov	al,-2[bp]
19231 4A7B           30E4                       xor	ah,ah
19232 4A7D           B1                     03  mov	cl,*3
19233 4A7F           D3E0                       shl	ax,cl
19234 4A81           89C3                       mov	bx,ax
19235 4A83           81C3                 01C6  add	bx,#_vga_modes
19236                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19237 4A87           FF77         04            push	4[bx]
19238                                           ! Debug: func () void = memcpyw+0 (used reg = )
19239 4A8A           E8         308F            call	_memcpyw
19240 4A8D           83C4                   0A  add	sp,*$A
19241                                           !BCC_EOS
19242                                           ! 2084         }
19243                       00004A90            .D7:
19244                                           ! 2085       }
19245                       00004A90            .D1:
19246                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19247 4A90           8B46         F4            mov	ax,-$C[bp]
19248 4A93           40                         inc	ax
19249 4A94           8946         F4            mov	-$C[bp],ax
19250                       00004A97            .D2:
19251                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19252 4A97           8A46         0C            mov	al,$C[bp]
19253 4A9A           30E4                       xor	ah,ah
19254 4A9C           3B46         F4            cmp	ax,-$C[bp]
19255 4A9F   7203    E9         FF31            bhis	.D3
19256                       00004AA4            .D8:
19257                       00004AA4            .D0:
19258                                           ! 2086      else
19259                                           ! 2087       {for(i=rlr;i>=rul;i--)
19260 4AA4           E9         00DF            br 	.D9
19261                       00004AA7            .CE:
19262                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19263 4AA7           8A46         0C            mov	al,$C[bp]
19264 4AAA           30E4                       xor	ah,ah
19265 4AAC           8946         F4            mov	-$C[bp],ax
19266                                           !BCC_EOS
19267                                           !BCC_EOS
19268                                           ! 2088         {
19269 4AAF           E9         00C7            br 	.DC
19270                       00004AB2            .DD:
19271                                           ! 2089          if((i<rul+nblines)||(nblines==0))
19272                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19273 4AB2           8A46         08            mov	al,8[bp]
19274 4AB5           30E4                       xor	ah,ah
19275 4AB7           0246         04            add	al,4[bp]
19276 4ABA           80D4                   00  adc	ah,*0
19277                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19278 4ABD           3B46         F4            cmp	ax,-$C[bp]
19279 4AC0           77           07            ja  	.DF
19280                       00004AC2            .E0:
19281                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19282 4AC2           8A46         04            mov	al,4[bp]
19283 4AC5           84C0                       test	al,al
19284 4AC7           75           42            jne 	.DE
19285                       00004AC9            .DF:
19286                                           ! 2090           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19287                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19288 4AC9           8A46         FB            mov	al,-5[bp]
19289 4ACC           30E4                       xor	ah,ah
19290 4ACE           50                         push	ax
19291                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19292 4ACF           8A46         06            mov	al,6[bp]
19293 4AD2           30E4                       xor	ah,ah
19294                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19295 4AD4           B9                   0100  mov	cx,#$100
19296 4AD7           F7E9                       imul	cx
19297                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19298                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19299 4AD9           05                   0020  add	ax,*$20
19300 4ADC           50                         push	ax
19301                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19302 4ADD           8B46         F4            mov	ax,-$C[bp]
19303 4AE0           8B4E         F8            mov	cx,-8[bp]
19304 4AE3           F7E9                       imul	cx
19305                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19306 4AE5           0246         0A            add	al,$A[bp]
19307 4AE8           80D4                   00  adc	ah,*0
19308                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19309 4AEB           D1E0                       shl	ax,*1
19310                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19311                                           ! Debug: expression subtree swapping
19312 4AED           0346         F2            add	ax,-$E[bp]
19313                                           ! Debug: list unsigned int = ax+0 (used reg = )
19314 4AF0           50                         push	ax
19315                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19316 4AF1           8A46         FE            mov	al,-2[bp]
19317 4AF4           30E4                       xor	ah,ah
19318 4AF6           B1                     03  mov	cl,*3
19319 4AF8           D3E0                       shl	ax,cl
19320 4AFA           89C3                       mov	bx,ax
19321 4AFC           81C3                 01C6  add	bx,#_vga_modes
19322                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19323 4B00           FF77         04            push	4[bx]
19324                                           ! Debug: func () void = memsetw+0 (used reg = )
19325 4B03           E8         2FC1            call	_memsetw
19326 4B06           83C4                   08  add	sp,*8
19327                                           !BCC_EOS
19328                                           ! 2091          else
19329                                           ! 2092           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19330 4B09           EB           5B            jmp .E1
19331                       00004B0B            .DE:
19332                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19333 4B0B           8A46         FB            mov	al,-5[bp]
19334 4B0E           30E4                       xor	ah,ah
19335 4B10           50                         push	ax
19336                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19337 4B11           8B46         F4            mov	ax,-$C[bp]
19338 4B14           2A46         04            sub	al,4[bp]
19339 4B17           80DC                   00  sbb	ah,*0
19340                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19341 4B1A           8B4E         F8            mov	cx,-8[bp]
19342 4B1D           F7E9                       imul	cx
19343                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19344 4B1F           0246         0A            add	al,$A[bp]
19345 4B22           80D4                   00  adc	ah,*0
19346                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19347 4B25           D1E0                       shl	ax,*1
19348                                           ! Debug: list unsigned int = ax+0 (used reg = )
19349 4B27           50                         push	ax
19350                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19351 4B28           8A46         FE            mov	al,-2[bp]
19352 4B2B           30E4                       xor	ah,ah
19353 4B2D           B1                     03  mov	cl,*3
19354 4B2F           D3E0                       shl	ax,cl
19355 4B31           89C3                       mov	bx,ax
19356 4B33           81C3                 01C6  add	bx,#_vga_modes
19357                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19358 4B37           FF77         04            push	4[bx]
19359                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19360 4B3A           8B46         F4            mov	ax,-$C[bp]
19361 4B3D           8B4E         F8            mov	cx,-8[bp]
19362 4B40           F7E9                       imul	cx
19363                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19364 4B42           0246         0A            add	al,$A[bp]
19365 4B45           80D4                   00  adc	ah,*0
19366                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19367 4B48           D1E0                       shl	ax,*1
19368                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19369                                           ! Debug: expression subtree swapping
19370 4B4A           0346         F2            add	ax,-$E[bp]
19371                                           ! Debug: list unsigned int = ax+0 (used reg = )
19372 4B4D           50                         push	ax
19373                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19374 4B4E           8A46         FE            mov	al,-2[bp]
19375 4B51           30E4                       xor	ah,ah
19376 4B53           B1                     03  mov	cl,*3
19377 4B55           D3E0                       shl	ax,cl
19378 4B57           89C3                       mov	bx,ax
19379 4B59           81C3                 01C6  add	bx,#_vga_modes
19380                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19381 4B5D           FF77         04            push	4[bx]
19382                                           ! Debug: func () void = memcpyw+0 (used reg = )
19383 4B60           E8         2FB9            call	_memcpyw
19384 4B63           83C4                   0A  add	sp,*$A
19385                                           !BCC_EOS
19386                                           ! 2093          if (i>rlr) break;
19387                       00004B66            .E1:
19388                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19389 4B66           8A46         0C            mov	al,$C[bp]
19390 4B69           30E4                       xor	ah,ah
19391 4B6B           3B46         F4            cmp	ax,-$C[bp]
19392 4B6E           73           02            jae 	.E2
19393                       00004B70            .E3:
19394 4B70           EB           14            jmp .DA
19395                                           !BCC_EOS
19396                                           ! 2094         }
19397                       00004B72            .E2:
19398                                           ! 2095       }
19399                       00004B72            .DB:
19400                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19401 4B72           8B46         F4            mov	ax,-$C[bp]
19402 4B75           48                         dec	ax
19403 4B76           8946         F4            mov	-$C[bp],ax
19404                       00004B79            .DC:
19405                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19406 4B79           8A46         08            mov	al,8[bp]
19407 4B7C           30E4                       xor	ah,ah
19408 4B7E           3B46         F4            cmp	ax,-$C[bp]
19409 4B81   7703    E9         FF2C            blos	.DD
19410                       00004B86            .E4:
19411                       00004B86            .DA:
19412                                           ! 2096     }
19413                       00004B86            .D9:
19414                                           ! 2097   }
19415                       00004B86            .CD:
19416                                           ! 2098  else
19417                                           ! 2099   {
19418 4B86           E9         03DE            br 	.E5
19419                       00004B89            .C5:
19420                                           ! 2100    cheight=video_param_table[line_to_vpti[line]].cheight;
19421                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19422 4B89           8A46         FE            mov	al,-2[bp]
19423 4B8C           30E4                       xor	ah,ah
19424 4B8E           89C3                       mov	bx,ax
19425                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19426 4B90           8A87       0246            mov	al,_line_to_vpti[bx]
19427 4B94           30E4                       xor	ah,ah
19428 4B96           B1                     06  mov	cl,*6
19429 4B98           D3E0                       shl	ax,cl
19430 4B9A           89C3                       mov	bx,ax
19431 4B9C           81C3                 025A  add	bx,#_video_param_table
19432                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19433 4BA0           8A47         02            mov	al,2[bx]
19434 4BA3           8846         FD            mov	-3[bp],al
19435                                           !BCC_EOS
19436                                           ! 2101    switch(vga_modes[line].memmodel)
19437                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19438 4BA6           8A46         FE            mov	al,-2[bp]
19439 4BA9           30E4                       xor	ah,ah
19440 4BAB           B1                     03  mov	cl,*3
19441 4BAD           D3E0                       shl	ax,cl
19442 4BAF           89C3                       mov	bx,ax
19443 4BB1           81C3                 01C6  add	bx,#_vga_modes
19444 4BB5           8A47         02            mov	al,2[bx]
19445                                           ! 2102     {
19446 4BB8           E9         0397            br 	.E8
19447                                           ! 2103      case 0x04:
19448                                           ! 2104      case 0x03:
19449                       00004BBB            .E9:
19450                                           ! 2105        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19451                       00004BBB            .EA:
19452                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19453 4BBB           8A46         04            mov	al,4[bp]
19454 4BBE           84C0                       test	al,al
19455 4BC0   7403    E9         008A            bne 	.EB
19456                       00004BC5            .F0:
19457                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19458 4BC5           8A46         08            mov	al,8[bp]
19459 4BC8           84C0                       test	al,al
19460 4BCA   7403    E9         0080            bne 	.EB
19461                       00004BCF            .EF:
19462                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19463 4BCF           8A46         0A            mov	al,$A[bp]
19464 4BD2           84C0                       test	al,al
19465 4BD4           75           79            jne 	.EB
19466                       00004BD6            .EE:
19467                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19468 4BD6           8B46         F6            mov	ax,-$A[bp]
19469                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19470                                           ! Debug: expression subtree swapping
19471 4BD9           48                         dec	ax
19472 4BDA           50                         push	ax
19473 4BDB           8A46         0C            mov	al,$C[bp]
19474 4BDE           30E4                       xor	ah,ah
19475 4BE0           3B46         F0            cmp	ax,0+..FFFC[bp]
19476 4BE3           8D66         F2            lea	sp,2+..FFFC[bp]
19477 4BE6           75           67            jne 	.EB
19478                       00004BE8            .ED:
19479                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19480 4BE8           8B46         F8            mov	ax,-8[bp]
19481                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19482                                           ! Debug: expression subtree swapping
19483 4BEB           48                         dec	ax
19484 4BEC           50                         push	ax
19485 4BED           8A46         0E            mov	al,$E[bp]
19486 4BF0           30E4                       xor	ah,ah
19487 4BF2           3B46         F0            cmp	ax,0+..FFFC[bp]
19488 4BF5           8D66         F2            lea	sp,2+..FFFC[bp]
19489 4BF8           75           55            jne 	.EB
19490                       00004BFA            .EC:
19491                                           ! 2106         {
19492                                           ! 2107          outw(0x3ce, 0x0205);
19493                                           ! Debug: list int = const $205 (used reg = )
19494 4BFA           B8                   0205  mov	ax,#$205
19495 4BFD           50                         push	ax
19496                                           ! Debug: list int = const $3CE (used reg = )
19497 4BFE           B8                   03CE  mov	ax,#$3CE
19498 4C01           50                         push	ax
19499                                           ! Debug: func () void = outw+0 (used reg = )
19500 4C02           E8         2FC3            call	_outw
19501 4C05           83C4                   04  add	sp,*4
19502                                           !BCC_EOS
19503                                           ! 2108          memsetb(vga_modes[line].ssta
19504                                           ! 2108 rt,0,attr,nbrows*nbcols*cheight);
19505                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19506 4C08           8B46         F6            mov	ax,-$A[bp]
19507 4C0B           8B4E         F8            mov	cx,-8[bp]
19508 4C0E           F7E9                       imul	cx
19509                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19510 4C10           89C3                       mov	bx,ax
19511 4C12           8A46         FD            mov	al,-3[bp]
19512 4C15           30E4                       xor	ah,ah
19513 4C17           93                         xchg	ax,bx
19514 4C18           89D9                       mov	cx,bx
19515 4C1A           F7E9                       imul	cx
19516                                           ! Debug: list unsigned int = ax+0 (used reg = )
19517 4C1C           50                         push	ax
19518                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19519 4C1D           8A46         06            mov	al,6[bp]
19520 4C20           30E4                       xor	ah,ah
19521 4C22           50                         push	ax
19522                                           ! Debug: list int = const 0 (used reg = )
19523 4C23           31C0                       xor	ax,ax
19524 4C25           50                         push	ax
19525                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19526 4C26           8A46         FE            mov	al,-2[bp]
19527 4C29           30E4                       xor	ah,ah
19528 4C2B           B1                     03  mov	cl,*3
19529 4C2D           D3E0                       shl	ax,cl
19530 4C2F           89C3                       mov	bx,ax
19531 4C31           81C3                 01C6  add	bx,#_vga_modes
19532                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19533 4C35           FF77         04            push	4[bx]
19534                                           ! Debug: func () void = memsetb+0 (used reg = )
19535 4C38           E8         2E67            call	_memsetb
19536 4C3B           83C4                   08  add	sp,*8
19537                                           !BCC_EOS
19538                                           ! 2109          outw(0x3ce, 0x0005);
19539                                           ! Debug: list int = const 5 (used reg = )
19540 4C3E           B8                   0005  mov	ax,*5
19541 4C41           50                         push	ax
19542                                           ! Debug: list int = const $3CE (used reg = )
19543 4C42           B8                   03CE  mov	ax,#$3CE
19544 4C45           50                         push	ax
19545                                           ! Debug: func () void = outw+0 (used reg = )
19546 4C46           E8         2F7F            call	_outw
19547 4C49           83C4                   04  add	sp,*4
19548                                           !BCC_EOS
19549                                           ! 2110         }
19550                                           ! 2111        else
19551                                           ! 2112         {
19552 4C4C           E9         0123            br 	.F1
19553                       00004C4F            .EB:
19554                                           ! 2113          if(dir==1)
19555                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19556 4C4F           8A46         12            mov	al,$12[bp]
19557 4C52           3C                     01  cmp	al,*1
19558 4C54   7403    E9         008A            bne 	.F2
19559                       00004C59            .F3:
19560                                           ! 2114           {for(i=rul;i<=rlr;i++)
19561                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19562 4C59           8A46         08            mov	al,8[bp]
19563 4C5C           30E4                       xor	ah,ah
19564 4C5E           8946         F4            mov	-$C[bp],ax
19565                                           !BCC_EOS
19566                                           !BCC_EOS
19567                                           ! 2115             {
19568 4C61           EB           73            jmp .F6
19569                       00004C63            .F7:
19570                                           ! 2116              if((i+nblines>rlr)||(nblines==0))
19571                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19572 4C63           8B46         F4            mov	ax,-$C[bp]
19573 4C66           0246         04            add	al,4[bp]
19574 4C69           80D4                   00  adc	ah,*0
19575                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19576 4C6C           50                         push	ax
19577 4C6D           8A46         0C            mov	al,$C[bp]
19578 4C70           30E4                       xor	ah,ah
19579 4C72           3B46         F0            cmp	ax,0+..FFFC[bp]
19580 4C75           8D66         F2            lea	sp,2+..FFFC[bp]
19581 4C78           72           07            jb  	.F9
19582                       00004C7A            .FA:
19583                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19584 4C7A           8A46         04            mov	al,4[bp]
19585 4C7D           84C0                       test	al,al
19586 4C7F           75           26            jne 	.F8
19587                       00004C81            .F9:
19588                                           ! 2117               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19589                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19590 4C81           8A46         06            mov	al,6[bp]
19591 4C84           30E4                       xor	ah,ah
19592 4C86           50                         push	ax
19593                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19594 4C87           8A46         FD            mov	al,-3[bp]
19595 4C8A           30E4                       xor	ah,ah
19596 4C8C           50                         push	ax
19597                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19598 4C8D           FF76         F8            push	-8[bp]
19599                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19600 4C90           8A46         FB            mov	al,-5[bp]
19601 4C93           30E4                       xor	ah,ah
19602 4C95           50                         push	ax
19603                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19604 4C96           FF76         F4            push	-$C[bp]
19605                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19606 4C99           8A46         0A            mov	al,$A[bp]
19607 4C9C           30E4                       xor	ah,ah
19608 4C9E           50                         push	ax
19609                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19610 4C9F           E8         F963            call	_vgamem_fill_pl4
19611 4CA2           83C4                   0C  add	sp,*$C
19612                                           !BCC_EOS
19613                                           ! 2118              else
19614                                           ! 2119               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
19615 4CA5           EB           28            jmp .FB
19616                       00004CA7            .F8:
19617                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19618 4CA7           8A46         FD            mov	al,-3[bp]
19619 4CAA           30E4                       xor	ah,ah
19620 4CAC           50                         push	ax
19621                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19622 4CAD           FF76         F8            push	-8[bp]
19623                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19624 4CB0           8A46         FB            mov	al,-5[bp]
19625 4CB3           30E4                       xor	ah,ah
19626 4CB5           50                         push	ax
19627                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19628 4CB6           FF76         F4            push	-$C[bp]
19629                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19630 4CB9           8B46         F4            mov	ax,-$C[bp]
19631 4CBC           0246         04            add	al,4[bp]
19632 4CBF           80D4                   00  adc	ah,*0
19633                                           ! Debug: list unsigned int = ax+0 (used reg = )
19634 4CC2           50                         push	ax
19635                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19636 4CC3           8A46         0A            mov	al,$A[bp]
19637 4CC6           30E4                       xor	ah,ah
19638 4CC8           50                         push	ax
19639                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19640 4CC9           E8         F877            call	_vgamem_copy_pl4
19641 4CCC           83C4                   0C  add	sp,*$C
19642                                           !BCC_EOS
19643                                           ! 2120             }
19644                       00004CCF            .FB:
19645                                           ! 2121           }
19646                       00004CCF            .F5:
19647                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19648 4CCF           8B46         F4            mov	ax,-$C[bp]
19649 4CD2           40                         inc	ax
19650 4CD3           8946         F4            mov	-$C[bp],ax
19651                       00004CD6            .F6:
19652                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19653 4CD6           8A46         0C            mov	al,$C[bp]
19654 4CD9           30E4                       xor	ah,ah
19655 4CDB           3B46         F4            cmp	ax,-$C[bp]
19656 4CDE           73           83            jae	.F7
19657                       00004CE0            .FC:
19658                       00004CE0            .F4:
19659                                           ! 2122          else
19660                                           ! 2123           {for(i=rlr;i>=rul;i--)
19661 4CE0           E9         008F            br 	.FD
19662                       00004CE3            .F2:
19663                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19664 4CE3           8A46         0C            mov	al,$C[bp]
19665 4CE6           30E4                       xor	ah,ah
19666 4CE8           8946         F4            mov	-$C[bp],ax
19667                                           !BCC_EOS
19668                                           !BCC_EOS
19669                                           ! 2124             {
19670 4CEB           EB           78            jmp .100
19671                       00004CED            .101:
19672                                           ! 2125              if((i<rul+nblines)||(nblines==0))
19673                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19674 4CED           8A46         08            mov	al,8[bp]
19675 4CF0           30E4                       xor	ah,ah
19676 4CF2           0246         04            add	al,4[bp]
19677 4CF5           80D4                   00  adc	ah,*0
19678                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19679 4CF8           3B46         F4            cmp	ax,-$C[bp]
19680 4CFB           77           07            ja  	.103
19681                       00004CFD            .104:
19682                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19683 4CFD           8A46         04            mov	al,4[bp]
19684 4D00           84C0                       test	al,al
19685 4D02           75           26            jne 	.102
19686                       00004D04            .103:
19687                                           ! 2126               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19688                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19689 4D04           8A46         06            mov	al,6[bp]
19690 4D07           30E4                       xor	ah,ah
19691 4D09           50                         push	ax
19692                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19693 4D0A           8A46         FD            mov	al,-3[bp]
19694 4D0D           30E4                       xor	ah,ah
19695 4D0F           50                         push	ax
19696                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19697 4D10           FF76         F8            push	-8[bp]
19698                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19699 4D13           8A46         FB            mov	al,-5[bp]
19700 4D16           30E4                       xor	ah,ah
19701 4D18           50                         push	ax
19702                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19703 4D19           FF76         F4            push	-$C[bp]
19704                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19705 4D1C           8A46         0A            mov	al,$A[bp]
19706 4D1F           30E4                       xor	ah,ah
19707 4D21           50                         push	ax
19708                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19709 4D22           E8         F8E0            call	_vgamem_fill_pl4
19710 4D25           83C4                   0C  add	sp,*$C
19711                                           !BCC_EOS
19712                                           ! 2127              else
19713                                           ! 2128               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
19714 4D28           EB           28            jmp .105
19715                       00004D2A            .102:
19716                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19717 4D2A           8A46         FD            mov	al,-3[bp]
19718 4D2D           30E4                       xor	ah,ah
19719 4D2F           50                         push	ax
19720                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19721 4D30           FF76         F8            push	-8[bp]
19722                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19723 4D33           8A46         FB            mov	al,-5[bp]
19724 4D36           30E4                       xor	ah,ah
19725 4D38           50                         push	ax
19726                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
19727 4D39           8B46         F4            mov	ax,-$C[bp]
19728 4D3C           2A46         04            sub	al,4[bp]
19729 4D3F           80DC                   00  sbb	ah,*0
19730                                           ! Debug: list unsigned int = ax+0 (used reg = )
19731 4D42           50                         push	ax
19732                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19733 4D43           FF76         F4            push	-$C[bp]
19734                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19735 4D46           8A46         0A            mov	al,$A[bp]
19736 4D49           30E4                       xor	ah,ah
19737 4D4B           50                         push	ax
19738                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19739 4D4C           E8         F7F4            call	_vgamem_copy_pl4
19740 4D4F           83C4                   0C  add	sp,*$C
19741                                           !BCC_EOS
19742                                           ! 2129              if (i>rlr) break;
19743                       00004D52            .105:
19744                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19745 4D52           8A46         0C            mov	al,$C[bp]
19746 4D55           30E4                       xor	ah,ah
19747 4D57           3B46         F4            cmp	ax,-$C[bp]
19748 4D5A           73           02            jae 	.106
19749                       00004D5C            .107:
19750 4D5C           EB           14            jmp .FE
19751                                           !BCC_EOS
19752                                           ! 2130             }
19753                       00004D5E            .106:
19754                                           ! 2131           }
19755                       00004D5E            .FF:
19756                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19757 4D5E           8B46         F4            mov	ax,-$C[bp]
19758 4D61           48                         dec	ax
19759 4D62           8946         F4            mov	-$C[bp],ax
19760                       00004D65            .100:
19761                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19762 4D65           8A46         08            mov	al,8[bp]
19763 4D68           30E4                       xor	ah,ah
19764 4D6A           3B46         F4            cmp	ax,-$C[bp]
19765 4D6D   7703    E9         FF7B            blos	.101
19766                       00004D72            .108:
19767                       00004D72            .FE:
19768                                           ! 2132         }
19769                       00004D72            .FD:
19770                                           ! 2133        break;
19771                       00004D72            .F1:
19772 4D72           E9         01F2            br 	.E6
19773                                           !BCC_EOS
19774                                           ! 2134      case 0x02:
19775                                           ! 2135        bpp=vga_modes[line].pixbits;
19776                       00004D75            .109:
19777                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19778 4D75           8A46         FE            mov	al,-2[bp]
19779 4D78           30E4                       xor	ah,ah
19780 4D7A           B1                     03  mov	cl,*3
19781 4D7C           D3E0                       shl	ax,cl
19782 4D7E           89C3                       mov	bx,ax
19783 4D80           81C3                 01C6  add	bx,#_vga_modes
19784                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
19785 4D84           8A47         03            mov	al,3[bx]
19786 4D87           8846         FC            mov	-4[bp],al
19787                                           !BCC_EOS
19788                                           ! 2136        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19789                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19790 4D8A           8A46         04            mov	al,4[bp]
19791 4D8D           84C0                       test	al,al
19792 4D8F           75           77            jne 	.10A
19793                       00004D91            .10F:
19794                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19795 4D91           8A46         08            mov	al,8[bp]
19796 4D94           84C0                       test	al,al
19797 4D96           75           70            jne 	.10A
19798                       00004D98            .10E:
19799                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19800 4D98           8A46         0A            mov	al,$A[bp]
19801 4D9B           84C0                       test	al,al
19802 4D9D           75           69            jne 	.10A
19803                       00004D9F            .10D:
19804                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19805 4D9F           8B46         F6            mov	ax,-$A[bp]
19806                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19807                                           ! Debug: expression subtree swapping
19808 4DA2           48                         dec	ax
19809 4DA3           50                         push	ax
19810 4DA4           8A46         0C            mov	al,$C[bp]
19811 4DA7           30E4                       xor	ah,ah
19812 4DA9           3B46         F0            cmp	ax,0+..FFFC[bp]
19813 4DAC           8D66         F2            lea	sp,2+..FFFC[bp]
19814 4DAF           75           57            jne 	.10A
19815                       00004DB1            .10C:
19816                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19817 4DB1           8B46         F8            mov	ax,-8[bp]
19818                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19819                                           ! Debug: expression subtree swapping
19820 4DB4           48                         dec	ax
19821 4DB5           50                         push	ax
19822 4DB6           8A46         0E            mov	al,$E[bp]
19823 4DB9           30E4                       xor	ah,ah
19824 4DBB           3B46         F0            cmp	ax,0+..FFFC[bp]
19825 4DBE           8D66         F2            lea	sp,2+..FFFC[bp]
19826 4DC1           75           45            jne 	.10A
19827                       00004DC3            .10B:
19828                                           ! 2137         {
19829                                           ! 2138          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
19830                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19831 4DC3           8B46         F6            mov	ax,-$A[bp]
19832 4DC6           8B4E         F8            mov	cx,-8[bp]
19833 4DC9           F7E9                       imul	cx
19834                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19835 4DCB           89C3                       mov	bx,ax
19836 4DCD           8A46         FD            mov	al,-3[bp]
19837 4DD0           30E4                       xor	ah,ah
19838 4DD2           93                         xchg	ax,bx
19839 4DD3           89D9                       mov	cx,bx
19840 4DD5           F7E9                       imul	cx
19841                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
19842 4DD7           89C3                       mov	bx,ax
19843 4DD9           8A46         FC            mov	al,-4[bp]
19844 4DDC           30E4                       xor	ah,ah
19845 4DDE           93                         xchg	ax,bx
19846 4DDF           89D9                       mov	cx,bx
19847 4DE1           F7E9                       imul	cx
19848                                           ! Debug: list unsigned int = ax+0 (used reg = )
19849 4DE3           50                         push	ax
19850                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19851 4DE4           8A46         06            mov	al,6[bp]
19852 4DE7           30E4                       xor	ah,ah
19853 4DE9           50                         push	ax
19854                                           ! Debug: list int = const 0 (used reg = )
19855 4DEA           31C0                       xor	ax,ax
19856 4DEC           50                         push	ax
19857                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19858 4DED           8A46         FE            mov	al,-2[bp]
19859 4DF0           30E4                       xor	ah,ah
19860 4DF2           B1                     03  mov	cl,*3
19861 4DF4           D3E0                       shl	ax,cl
19862 4DF6           89C3                       mov	bx,ax
19863 4DF8           81C3                 01C6  add	bx,#_vga_modes
19864                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19865 4DFC           FF77         04            push	4[bx]
19866                                           ! Debug: func () void = memsetb+0 (used reg = )
19867 4DFF           E8         2CA0            call	_memsetb
19868 4E02           83C4                   08  add	sp,*8
19869                                           !BCC_EOS
19870                                           ! 2139         }
19871                                           ! 2140        else
19872                                           ! 2141         {
19873 4E05           E9         0146            br 	.110
19874                       00004E08            .10A:
19875                                           ! 2142          if(bpp==2)
19876                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
19877 4E08           8A46         FC            mov	al,-4[bp]
19878 4E0B           3C                     02  cmp	al,*2
19879 4E0D           75           1C            jne 	.111
19880                       00004E0F            .112:
19881                                           ! 2143           {
19882                                           ! 2144            cul<<=1;
19883                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
19884 4E0F           8A46         0A            mov	al,$A[bp]
19885 4E12           30E4                       xor	ah,ah
19886 4E14           D1E0                       shl	ax,*1
19887 4E16           8846         0A            mov	$A[bp],al
19888                                           !BCC_EOS
19889                                           ! 2145            cols<<=1;
19890                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
19891 4E19           8A46         FB            mov	al,-5[bp]
19892 4E1C           30E4                       xor	ah,ah
19893 4E1E           D1E0                       shl	ax,*1
19894 4E20           8846         FB            mov	-5[bp],al
19895                                           !BCC_EOS
19896                                           ! 2146            nbcols<<=1;
19897                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19898 4E23           8B46         F8            mov	ax,-8[bp]
19899 4E26           D1E0                       shl	ax,*1
19900 4E28           8946         F8            mov	-8[bp],ax
19901                                           !BCC_EOS
19902                                           ! 2147           }
19903                                           ! 2148          if(dir==1)
19904                       00004E2B            .111:
19905                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19906 4E2B           8A46         12            mov	al,$12[bp]
19907 4E2E           3C                     01  cmp	al,*1
19908 4E30   7403    E9         008A            bne 	.113
19909                       00004E35            .114:
19910                                           ! 2149           {for(i=rul;i<=rlr;i++)
19911                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19912 4E35           8A46         08            mov	al,8[bp]
19913 4E38           30E4                       xor	ah,ah
19914 4E3A           8946         F4            mov	-$C[bp],ax
19915                                           !BCC_EOS
19916                                           !BCC_EOS
19917                                           ! 2150             {
19918 4E3D           EB           73            jmp .117
19919                       00004E3F            .118:
19920                                           ! 2151              if((i+nblines>rlr)||(nblines==0))
19921                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19922 4E3F           8B46         F4            mov	ax,-$C[bp]
19923 4E42           0246         04            add	al,4[bp]
19924 4E45           80D4                   00  adc	ah,*0
19925                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19926 4E48           50                         push	ax
19927 4E49           8A46         0C            mov	al,$C[bp]
19928 4E4C           30E4                       xor	ah,ah
19929 4E4E           3B46         F0            cmp	ax,0+..FFFC[bp]
19930 4E51           8D66         F2            lea	sp,2+..FFFC[bp]
19931 4E54           72           07            jb  	.11A
19932                       00004E56            .11B:
19933                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19934 4E56           8A46         04            mov	al,4[bp]
19935 4E59           84C0                       test	al,al
19936 4E5B           75           26            jne 	.119
19937                       00004E5D            .11A:
19938                                           ! 2152               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
19939                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19940 4E5D           8A46         06            mov	al,6[bp]
19941 4E60           30E4                       xor	ah,ah
19942 4E62           50                         push	ax
19943                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19944 4E63           8A46         FD            mov	al,-3[bp]
19945 4E66           30E4                       xor	ah,ah
19946 4E68           50                         push	ax
19947                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19948 4E69           FF76         F8            push	-8[bp]
19949                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19950 4E6C           8A46         FB            mov	al,-5[bp]
19951 4E6F           30E4                       xor	ah,ah
19952 4E71           50                         push	ax
19953                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19954 4E72           FF76         F4            push	-$C[bp]
19955                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19956 4E75           8A46         0A            mov	al,$A[bp]
19957 4E78           30E4                       xor	ah,ah
19958 4E7A           50                         push	ax
19959                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
19960 4E7B           E8         F925            call	_vgamem_fill_cga
19961 4E7E           83C4                   0C  add	sp,*$C
19962                                           !BCC_EOS
19963                                           ! 2153              else
19964                                           ! 2154               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
19965 4E81           EB           28            jmp .11C
19966                       00004E83            .119:
19967                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19968 4E83           8A46         FD            mov	al,-3[bp]
19969 4E86           30E4                       xor	ah,ah
19970 4E88           50                         push	ax
19971                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19972 4E89           FF76         F8            push	-8[bp]
19973                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19974 4E8C           8A46         FB            mov	al,-5[bp]
19975 4E8F           30E4                       xor	ah,ah
19976 4E91           50                         push	ax
19977                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19978 4E92           FF76         F4            push	-$C[bp]
19979                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19980 4E95           8B46         F4            mov	ax,-$C[bp]
19981 4E98           0246         04            add	al,4[bp]
19982 4E9B           80D4                   00  adc	ah,*0
19983                                           ! Debug: list unsigned int = ax+0 (used reg = )
19984 4E9E           50                         push	ax
19985                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19986 4E9F           8A46         0A            mov	al,$A[bp]
19987 4EA2           30E4                       xor	ah,ah
19988 4EA4           50                         push	ax
19989                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
19990 4EA5           E8         F7E8            call	_vgamem_copy_cga
19991 4EA8           83C4                   0C  add	sp,*$C
19992                                           !BCC_EOS
19993                                           ! 2155             }
19994                       00004EAB            .11C:
19995                                           ! 2156           }
19996                       00004EAB            .116:
19997                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19998 4EAB           8B46         F4            mov	ax,-$C[bp]
19999 4EAE           40                         inc	ax
20000 4EAF           8946         F4            mov	-$C[bp],ax
20001                       00004EB2            .117:
20002                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20003 4EB2           8A46         0C            mov	al,$C[bp]
20004 4EB5           30E4                       xor	ah,ah
20005 4EB7           3B46         F4            cmp	ax,-$C[bp]
20006 4EBA           73           83            jae	.118
20007                       00004EBC            .11D:
20008                       00004EBC            .115:
20009                                           ! 2157          else
20010                                           ! 2158           {for(i=rlr;i>=rul;i--)
20011 4EBC           E9         008F            br 	.11E
20012                       00004EBF            .113:
20013                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20014 4EBF           8A46         0C            mov	al,$C[bp]
20015 4EC2           30E4                       xor	ah,ah
20016 4EC4           8946         F4            mov	-$C[bp],ax
20017                                           !BCC_EOS
20018                                           !BCC_EOS
20019                                           ! 2159             {
20020 4EC7           EB           78            jmp .121
20021                       00004EC9            .122:
20022                                           ! 2160              if((i<rul+nblines)||(nblines==0))
20023                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20024 4EC9           8A46         08            mov	al,8[bp]
20025 4ECC           30E4                       xor	ah,ah
20026 4ECE           0246         04            add	al,4[bp]
20027 4ED1           80D4                   00  adc	ah,*0
20028                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20029 4ED4           3B46         F4            cmp	ax,-$C[bp]
20030 4ED7           77           07            ja  	.124
20031                       00004ED9            .125:
20032                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20033 4ED9           8A46         04            mov	al,4[bp]
20034 4EDC           84C0                       test	al,al
20035 4EDE           75           26            jne 	.123
20036                       00004EE0            .124:
20037                                           ! 2161               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20038                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20039 4EE0           8A46         06            mov	al,6[bp]
20040 4EE3           30E4                       xor	ah,ah
20041 4EE5           50                         push	ax
20042                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20043 4EE6           8A46         FD            mov	al,-3[bp]
20044 4EE9           30E4                       xor	ah,ah
20045 4EEB           50                         push	ax
20046                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20047 4EEC           FF76         F8            push	-8[bp]
20048                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20049 4EEF           8A46         FB            mov	al,-5[bp]
20050 4EF2           30E4                       xor	ah,ah
20051 4EF4           50                         push	ax
20052                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20053 4EF5           FF76         F4            push	-$C[bp]
20054                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20055 4EF8           8A46         0A            mov	al,$A[bp]
20056 4EFB           30E4                       xor	ah,ah
20057 4EFD           50                         push	ax
20058                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20059 4EFE           E8         F8A2            call	_vgamem_fill_cga
20060 4F01           83C4                   0C  add	sp,*$C
20061                                           !BCC_EOS
20062                                           ! 2162              else
20063                                           ! 2163               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20064 4F04           EB           28            jmp .126
20065                       00004F06            .123:
20066                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20067 4F06           8A46         FD            mov	al,-3[bp]
20068 4F09           30E4                       xor	ah,ah
20069 4F0B           50                         push	ax
20070                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20071 4F0C           FF76         F8            push	-8[bp]
20072                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20073 4F0F           8A46         FB            mov	al,-5[bp]
20074 4F12           30E4                       xor	ah,ah
20075 4F14           50                         push	ax
20076                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20077 4F15           8B46         F4            mov	ax,-$C[bp]
20078 4F18           2A46         04            sub	al,4[bp]
20079 4F1B           80DC                   00  sbb	ah,*0
20080                                           ! Debug: list unsigned int = ax+0 (used reg = )
20081 4F1E           50                         push	ax
20082                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20083 4F1F           FF76         F4            push	-$C[bp]
20084                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20085 4F22           8A46         0A            mov	al,$A[bp]
20086 4F25           30E4                       xor	ah,ah
20087 4F27           50                         push	ax
20088                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20089 4F28           E8         F765            call	_vgamem_copy_cga
20090 4F2B           83C4                   0C  add	sp,*$C
20091                                           !BCC_EOS
20092                                           ! 2164              if (i>rlr) break;
20093                       00004F2E            .126:
20094                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20095 4F2E           8A46         0C            mov	al,$C[bp]
20096 4F31           30E4                       xor	ah,ah
20097 4F33           3B46         F4            cmp	ax,-$C[bp]
20098 4F36           73           02            jae 	.127
20099                       00004F38            .128:
20100 4F38           EB           14            jmp .11F
20101                                           !BCC_EOS
20102                                           ! 2165             }
20103                       00004F3A            .127:
20104                                           ! 2166           }
20105                       00004F3A            .120:
20106                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20107 4F3A           8B46         F4            mov	ax,-$C[bp]
20108 4F3D           48                         dec	ax
20109 4F3E           8946         F4            mov	-$C[bp],ax
20110                       00004F41            .121:
20111                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20112 4F41           8A46         08            mov	al,8[bp]
20113 4F44           30E4                       xor	ah,ah
20114 4F46           3B46         F4            cmp	ax,-$C[bp]
20115 4F49   7703    E9         FF7B            blos	.122
20116                       00004F4E            .129:
20117                       00004F4E            .11F:
20118                                           ! 2167         }
20119                       00004F4E            .11E:
20120                                           ! 2168        break;
20121                       00004F4E            .110:
20122 4F4E           EB           17            jmp .E6
20123                                           !BCC_EOS
20124                                           ! 2169     }
20125                                           ! 2170   }
20126 4F50           EB           15            jmp .E6
20127                       00004F52            .E8:
20128 4F52           2C                     02  sub	al,*2
20129 4F54   7503    E9         FE1C            beq 	.109
20130 4F59           2C                     01  sub	al,*1
20131 4F5B   7503    E9         FC5B            beq 	.EA
20132 4F60           2C                     01  sub	al,*1
20133 4F62   7503    E9         FC54            beq 	.E9
20134                       00004F67            .E6:
20135                       FFFFFFF0            ..FFFC	=	-$10
20136                                           ! 2171 }
20137                       00004F67            .E5:
20138 4F67           89EC                       mov	sp,bp
20139 4F69           5D                         pop	bp
20140 4F6A           C3                         ret
20141                                           ! 2172 static void biosfn_read_char_attr (page,car)
20142                                           ! Register BX used in function biosfn_scroll
20143                                           ! 2173 Bit8u page;Bit16u *car;
20144                       00004F6B            _biosfn_read_char_attr:
20145                                           !BCC_EOS
20146                                           !BCC_EOS
20147                                           ! 2174 {Bit16u ss=get_SS();
20148 4F6B           55                         push	bp
20149 4F6C           89E5                       mov	bp,sp
20150 4F6E           4C                         dec	sp
20151 4F6F           4C                         dec	sp
20152                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20153 4F70           E8         2C65            call	_get_SS
20154                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20155 4F73           8946         FE            mov	-2[bp],ax
20156                                           !BCC_EOS
20157                                           ! 2175  Bit8u xcurs,ycurs,mode,line;
20158                                           !BCC_EOS
20159                                           ! 2176  Bit16u nbcols,nbrows,address;
20160                                           !BCC_EOS
20161                                           ! 2177  Bit16u cursor,dummy;
20162                                           !BCC_EOS
20163                                           ! 2178  mode=read_byte(0x40,0x49);
20164 4F76           83C4                   F2  add	sp,*-$E
20165                                           ! Debug: list int = const $49 (used reg = )
20166 4F79           B8                   0049  mov	ax,*$49
20167 4F7C           50                         push	ax
20168                                           ! Debug: list int = const $40 (used reg = )
20169 4F7D           B8                   0040  mov	ax,*$40
20170 4F80           50                         push	ax
20171                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20172 4F81           E8         2BC8            call	_read_byte
20173 4F84           83C4                   04  add	sp,*4
20174                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20175 4F87           8846         FB            mov	-5[bp],al
20176                                           !BCC_EOS
20177                                           ! 2179  line=find_vga_entry(mode);
20178                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20179 4F8A           8A46         FB            mov	al,-5[bp]
20180 4F8D           30E4                       xor	ah,ah
20181 4F8F           50                         push	ax
20182                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20183 4F90           E8         2ACD            call	_find_vga_entry
20184 4F93           44                         inc	sp
20185 4F94           44                         inc	sp
20186                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20187 4F95           8846         FA            mov	-6[bp],al
20188                                           !BCC_EOS
20189                                           ! 2180  if(line==0xFF)return;
20190                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20191 4F98           8A46         FA            mov	al,-6[bp]
20192 4F9B           3C                     FF  cmp	al,#$FF
20193 4F9D           75           04            jne 	.12A
20194                       00004F9F            .12B:
20195 4F9F           89EC                       mov	sp,bp
20196 4FA1           5D                         pop	bp
20197 4FA2           C3                         ret
20198                                           !BCC_EOS
20199                                           ! 2181  biosfn_get_cursor_pos(page,&dummy,&cursor);
20200                       00004FA3            .12A:
20201                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20202 4FA3           8D5E         F2            lea	bx,-$E[bp]
20203 4FA6           53                         push	bx
20204                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20205 4FA7           8D5E         F0            lea	bx,-$10[bp]
20206 4FAA           53                         push	bx
20207                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20208 4FAB           8A46         04            mov	al,4[bp]
20209 4FAE           30E4                       xor	ah,ah
20210 4FB0           50                         push	ax
20211                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20212 4FB1           E8         F3AB            call	_biosfn_get_cursor_pos
20213 4FB4           83C4                   06  add	sp,*6
20214                                           !BCC_EOS
20215                                           ! 2182  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>
20216                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20217 4FB7           8A46         F2            mov	al,-$E[bp]
20218                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20219 4FBA           8846         FD            mov	-3[bp],al
20220                                           !BCC_EOS
20221                                           ! 2182 8;
20222                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20223 4FBD           8B46         F2            mov	ax,-$E[bp]
20224 4FC0           30C0                       xor	al,al
20225                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20226 4FC2           88E0                       mov	al,ah
20227 4FC4           30E4                       xor	ah,ah
20228                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20229 4FC6           8846         FC            mov	-4[bp],al
20230                                           !BCC_EOS
20231                                           ! 2183  nbrows=read_byte(0x40,0x84)+1;
20232                                           ! Debug: list int = const $84 (used reg = )
20233 4FC9           B8                   0084  mov	ax,#$84
20234 4FCC           50                         push	ax
20235                                           ! Debug: list int = const $40 (used reg = )
20236 4FCD           B8                   0040  mov	ax,*$40
20237 4FD0           50                         push	ax
20238                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20239 4FD1           E8         2B78            call	_read_byte
20240 4FD4           83C4                   04  add	sp,*4
20241                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20242 4FD7           30E4                       xor	ah,ah
20243                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20244 4FD9           40                         inc	ax
20245 4FDA           8946         F6            mov	-$A[bp],ax
20246                                           !BCC_EOS
20247                                           ! 2184  nbcols=read_word(0x40,0x4A);
20248                                           ! Debug: list int = const $4A (used reg = )
20249 4FDD           B8                   004A  mov	ax,*$4A
20250 4FE0           50                         push	ax
20251                                           ! Debug: list int = const $40 (used reg = )
20252 4FE1           B8                   0040  mov	ax,*$40
20253 4FE4           50                         push	ax
20254                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20255 4FE5           E8         2B77            call	_read_word
20256 4FE8           83C4                   04  add	sp,*4
20257                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20258 4FEB           8946         F8            mov	-8[bp],ax
20259                                           !BCC_EOS
20260                                           ! 2185  if(vga_modes[line].class==0x00)
20261                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20262 4FEE           8A46         FA            mov	al,-6[bp]
20263 4FF1           30E4                       xor	ah,ah
20264 4FF3           B1                     03  mov	cl,*3
20265 4FF5           D3E0                       shl	ax,cl
20266 4FF7           89C3                       mov	bx,ax
20267 4FF9           81C3                 01C6  add	bx,#_vga_modes
20268                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20269 4FFD           8A47         01            mov	al,1[bx]
20270 5000           84C0                       test	al,al
20271 5002           75           5E            jne 	.12C
20272                       00005004            .12D:
20273                                           ! 2186   {
20274                                           ! 2187    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20275                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20276 5004           8A46         FC            mov	al,-4[bp]
20277 5007           30E4                       xor	ah,ah
20278 5009           8B4E         F8            mov	cx,-8[bp]
20279 500C           F7E9                       imul	cx
20280                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20281                                           ! Debug: expression subtree swapping
20282 500E           0246         FD            add	al,-3[bp]
20283 5011           80D4                   00  adc	ah,*0
20284                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20285 5014           D1E0                       shl	ax,*1
20286 5016           50                         push	ax
20287                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20288 5017           8B46         F8            mov	ax,-8[bp]
20289 501A           8B4E         F6            mov	cx,-$A[bp]
20290 501D           F7E9                       imul	cx
20291                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20292 501F           D1E0                       shl	ax,*1
20293                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20294 5021           0C                     FF  or	al,#$FF
20295                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20296                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20297 5023           89C3                       mov	bx,ax
20298 5025           8A46         04            mov	al,4[bp]
20299 5028           30E4                       xor	ah,ah
20300 502A           93                         xchg	ax,bx
20301 502B           40                         inc	ax
20302 502C           89D9                       mov	cx,bx
20303 502E           F7E9                       imul	cx
20304                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20305 5030           0346         EE            add	ax,-$12[bp]
20306 5033           44                         inc	sp
20307 5034           44                         inc	sp
20308                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20309 5035           8946         F4            mov	-$C[bp],ax
20310                                           !BCC_EOS
20311                                           ! 2188    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20312                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20313 5038           FF76         F4            push	-$C[bp]
20314                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20315 503B           8A46         FA            mov	al,-6[bp]
20316 503E           30E4                       xor	ah,ah
20317 5040           B1                     03  mov	cl,*3
20318 5042           D3E0                       shl	ax,cl
20319 5044           89C3                       mov	bx,ax
20320 5046           81C3                 01C6  add	bx,#_vga_modes
20321                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20322 504A           FF77         04            push	4[bx]
20323                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20324 504D           E8         2B0F            call	_read_word
20325 5050           83C4                   04  add	sp,*4
20326                                           ! Debug: list unsigned short = ax+0 (used reg = )
20327 5053           50                         push	ax
20328                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20329 5054           FF76         06            push	6[bp]
20330                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20331 5057           FF76         FE            push	-2[bp]
20332                                           ! Debug: func () void = write_word+0 (used reg = )
20333 505A           E8         2B2D            call	_write_word
20334 505D           83C4                   06  add	sp,*6
20335                                           !BCC_EOS
20336                                           ! 2189   }
20337                                           ! 2190  else
20338                                           ! 2191   {
20339 5060           EB           00            jmp .12E
20340                       00005062            .12C:
20341                                           ! 2192   }
20342                                           ! 2193 }
20343                       00005062            .12E:
20344 5062           89EC                       mov	sp,bp
20345 5064           5D                         pop	bp
20346 5065           C3                         ret
20347                                           ! 2194 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20348                                           ! Register BX used in function biosfn_read_char_attr
20349                                           ! 2195 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20350                       00005066            _write_gfx_char_pl4:
20351                                           !BCC_EOS
20352                                           !BCC_EOS
20353                                           !BCC_EOS
20354                                           !BCC_EOS
20355                                           !BCC_EOS
20356                                           !BCC_EOS
20357                                           ! 2196 {
20358                                           ! 2197  Bit8u i,j,mask;
20359                                           !BCC_EOS
20360                                           ! 2198  Bit8u *fdata;
20361                                           !BCC_EOS
20362                                           ! 2199  Bit16u addr,dest,src;
20363                                           !BCC_EOS
20364                                           ! 2200  switch(cheight)
20365 5066           55                         push	bp
20366 5067           89E5                       mov	bp,sp
20367 5069           83C4                   F4  add	sp,*-$C
20368 506C           8A46         0E            mov	al,$E[bp]
20369                                           ! 2201   {case 14:
20370 506F           EB           18            jmp .131
20371                                           ! 2202     fdata = &vgafont14;
20372                       00005071            .132:
20373                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20374 5071           BB                   172A  mov	bx,#_vgafont14
20375 5074           895E         FA            mov	-6[bp],bx
20376                                           !BCC_EOS
20377                                           ! 2203     break;
20378 5077           EB           1A            jmp .12F
20379                                           !BCC_EOS
20380                                           ! 2204    case 16:
20381                                           ! 2205     fdata = &vgafont16;
20382                       00005079            .133:
20383                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20384 5079           BB                   252A  mov	bx,#_vgafont16
20385 507C           895E         FA            mov	-6[bp],bx
20386                                           !BCC_EOS
20387                                           ! 2206     break;
20388 507F           EB           12            jmp .12F
20389                                           !BCC_EOS
20390                                           ! 2207    default:
20391                                           ! 2208     fdata = &vgafont8;
20392                       00005081            .134:
20393                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20394 5081           BB                   0F2A  mov	bx,#_vgafont8
20395 5084           895E         FA            mov	-6[bp],bx
20396                                           !BCC_EOS
20397                                           ! 2209   }
20398                                           ! 2210  addr=xcurs+ycurs*cheight*nbcols;
20399 5087           EB           0A            jmp .12F
20400                       00005089            .131:
20401 5089           2C                     0E  sub	al,*$E
20402 508B           74           E4            je 	.132
20403 508D           2C                     02  sub	al,*2
20404 508F           74           E8            je 	.133
20405 5091           EB           EE            jmp	.134
20406                       00005093            .12F:
20407                       FFFFFFF2            ..FFFB	=	-$E
20408                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20409 5093           8A46         0E            mov	al,$E[bp]
20410 5096           30E4                       xor	ah,ah
20411 5098           89C3                       mov	bx,ax
20412 509A           8A46         0A            mov	al,$A[bp]
20413 509D           30E4                       xor	ah,ah
20414 509F           89D9                       mov	cx,bx
20415 50A1           F7E9                       imul	cx
20416                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20417 50A3           89C3                       mov	bx,ax
20418 50A5           8A46         0C            mov	al,$C[bp]
20419 50A8           30E4                       xor	ah,ah
20420 50AA           93                         xchg	ax,bx
20421 50AB           89D9                       mov	cx,bx
20422 50AD           F7E9                       imul	cx
20423                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20424                                           ! Debug: expression subtree swapping
20425 50AF           0246         08            add	al,8[bp]
20426 50B2           80D4                   00  adc	ah,*0
20427                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20428 50B5           8946         F8            mov	-8[bp],ax
20429                                           !BCC_EOS
20430                                           ! 2211  src = car * cheight;
20431                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20432 50B8           8A46         0E            mov	al,$E[bp]
20433 50BB           30E4                       xor	ah,ah
20434 50BD           89C3                       mov	bx,ax
20435 50BF           8A46         04            mov	al,4[bp]
20436 50C2           30E4                       xor	ah,ah
20437 50C4           89D9                       mov	cx,bx
20438 50C6           F7E9                       imul	cx
20439                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20440 50C8           8946         F4            mov	-$C[bp],ax
20441                                           !BCC_EOS
20442                                           ! 2212  outw(0x3c4, 0x0f02);
20443                                           ! Debug: list int = const $F02 (used reg = )
20444 50CB           B8                   0F02  mov	ax,#$F02
20445 50CE           50                         push	ax
20446                                           ! Debug: list int = const $3C4 (used reg = )
20447 50CF           B8                   03C4  mov	ax,#$3C4
20448 50D2           50                         push	ax
20449                                           ! Debug: func () void = outw+0 (used reg = )
20450 50D3           E8         2AF2            call	_outw
20451 50D6           83C4                   04  add	sp,*4
20452                                           !BCC_EOS
20453                                           ! 2213  outw(0x3ce, 0x0205);
20454                                           ! Debug: list int = const $205 (used reg = )
20455 50D9           B8                   0205  mov	ax,#$205
20456 50DC           50                         push	ax
20457                                           ! Debug: list int = const $3CE (used reg = )
20458 50DD           B8                   03CE  mov	ax,#$3CE
20459 50E0           50                         push	ax
20460                                           ! Debug: func () void = outw+0 (used reg = )
20461 50E1           E8         2AE4            call	_outw
20462 50E4           83C4                   04  add	sp,*4
20463                                           !BCC_EOS
20464                                           ! 2214  if(attr&0x80)
20465                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20466 50E7           8A46         06            mov	al,6[bp]
20467 50EA           24                     80  and	al,#$80
20468 50EC           84C0                       test	al,al
20469 50EE           74           10            je  	.135
20470                       000050F0            .136:
20471                                           ! 2215   {
20472                                           ! 2216    outw(0x3ce, 0x1803);
20473                                           ! Debug: list int = const $1803 (used reg = )
20474 50F0           B8                   1803  mov	ax,#$1803
20475 50F3           50                         push	ax
20476                                           ! Debug: list int = const $3CE (used reg = )
20477 50F4           B8                   03CE  mov	ax,#$3CE
20478 50F7           50                         push	ax
20479                                           ! Debug: func () void = outw+0 (used reg = )
20480 50F8           E8         2ACD            call	_outw
20481 50FB           83C4                   04  add	sp,*4
20482                                           !BCC_EOS
20483                                           ! 2217   }
20484                                           ! 2218  else
20485                                           ! 2219   {
20486 50FE           EB           0E            jmp .137
20487                       00005100            .135:
20488                                           ! 2220    outw(0x3ce, 0x0003);
20489                                           ! Debug: list int = const 3 (used reg = )
20490 5100           B8                   0003  mov	ax,*3
20491 5103           50                         push	ax
20492                                           ! Debug: list int = const $3CE (used reg = )
20493 5104           B8                   03CE  mov	ax,#$3CE
20494 5107           50                         push	ax
20495                                           ! Debug: func () void = outw+0 (used reg = )
20496 5108           E8         2ABD            call	_outw
20497 510B           83C4                   04  add	sp,*4
20498                                           !BCC_EOS
20499                                           ! 2221   }
20500                                           ! 2222  for(i=0;i<cheight;i++)
20501                       0000510E            .137:
20502                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20503 510E           30C0                       xor	al,al
20504 5110           8846         FF            mov	-1[bp],al
20505                                           !BCC_EOS
20506                                           !BCC_EOS
20507                                           ! 2223   {
20508 5113           E9         00A7            br 	.13A
20509                       00005116            .13B:
20510                                           ! 2224    dest=addr+i*nbcols;
20511                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20512 5116           8A46         0C            mov	al,$C[bp]
20513 5119           30E4                       xor	ah,ah
20514 511B           89C3                       mov	bx,ax
20515 511D           8A46         FF            mov	al,-1[bp]
20516 5120           30E4                       xor	ah,ah
20517 5122           89D9                       mov	cx,bx
20518 5124           F7E9                       imul	cx
20519                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20520                                           ! Debug: expression subtree swapping
20521 5126           0346         F8            add	ax,-8[bp]
20522                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20523 5129           8946         F6            mov	-$A[bp],ax
20524                                           !BCC_EOS
20525                                           ! 2225    for(j=0;j<8;j++)
20526                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20527 512C           30C0                       xor	al,al
20528 512E           8846         FE            mov	-2[bp],al
20529                                           !BCC_EOS
20530                                           !BCC_EOS
20531                                           ! 2226     {
20532 5131           EB           79            jmp .13E
20533                       00005133            .13F:
20534                                           ! 2227      mask=0x80>>j;
20535                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
20536 5133           8A46         FE            mov	al,-2[bp]
20537 5136           30E4                       xor	ah,ah
20538 5138           89C3                       mov	bx,ax
20539 513A           B8                   0080  mov	ax,#$80
20540 513D           89D9                       mov	cx,bx
20541 513F           D3F8                       sar	ax,cl
20542                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
20543 5141           8846         FD            mov	-3[bp],al
20544                                           !BCC_EOS
20545                                           ! 2228      outw(0x3ce, (mask << 8) | 0x08);
20546                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
20547 5144           8A46         FD            mov	al,-3[bp]
20548 5147           30E4                       xor	ah,ah
20549 5149           88C4                       mov	ah,al
20550 514B           30C0                       xor	al,al
20551                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
20552 514D           0C                     08  or	al,*8
20553                                           ! Debug: list unsigned int = ax+0 (used reg = )
20554 514F           50                         push	ax
20555                                           ! Debug: list int = const $3CE (used reg = )
20556 5150           B8                   03CE  mov	ax,#$3CE
20557 5153           50                         push	ax
20558                                           ! Debug: func () void = outw+0 (used reg = )
20559 5154           E8         2A71            call	_outw
20560 5157           83C4                   04  add	sp,*4
20561                                           !BCC_EOS
20562                                           ! 2229      read_byte(0xa000,dest);
20563                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20564 515A           FF76         F6            push	-$A[bp]
20565                                           ! Debug: list unsigned int = const $A000 (used reg = )
20566 515D           B8                   A000  mov	ax,#$A000
20567 5160           50                         push	ax
20568                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20569 5161           E8         29E8            call	_read_byte
20570 5164           83C4                   04  add	sp,*4
20571                                           !BCC_EOS
20572                                           ! 2230      if(fdata[src+i]&mask)
20573                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20574 5167           8B46         F4            mov	ax,-$C[bp]
20575 516A           0246         FF            add	al,-1[bp]
20576 516D           80D4                   00  adc	ah,*0
20577                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20578 5170           0346         FA            add	ax,-6[bp]
20579 5173           89C3                       mov	bx,ax
20580                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20581 5175           8A07                       mov	al,[bx]
20582 5177           2246         FD            and	al,-3[bp]
20583 517A           84C0                       test	al,al
20584 517C           74           17            je  	.140
20585                       0000517E            .141:
20586                                           ! 2231       {
20587                                           ! 2232        write_byte(0xa000,dest,attr&0x0f);
20588                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
20589 517E           8A46         06            mov	al,6[bp]
20590 5181           24                     0F  and	al,*$F
20591                                           ! Debug: list unsigned char = al+0 (used reg = )
20592 5183           30E4                       xor	ah,ah
20593 5185           50                         push	ax
20594                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20595 5186           FF76         F6            push	-$A[bp]
20596                                           ! Debug: list unsigned int = const $A000 (used reg = )
20597 5189           B8                   A000  mov	ax,#$A000
20598 518C           50                         push	ax
20599                                           ! Debug: func () void = write_byte+0 (used reg = )
20600 518D           E8         29E2            call	_write_byte
20601 5190           83C4                   06  add	sp,*6
20602                                           !BCC_EOS
20603                                           ! 2233       }
20604                                           ! 2234      else
20605                                           ! 2235       {
20606 5193           EB           10            jmp .142
20607                       00005195            .140:
20608                                           ! 2236        write_byte(0xa000,dest,0x00);
20609                                           ! Debug: list int = const 0 (used reg = )
20610 5195           31C0                       xor	ax,ax
20611 5197           50                         push	ax
20612                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20613 5198           FF76         F6            push	-$A[bp]
20614                                           ! Debug: list unsigned int = const $A000 (used reg = )
20615 519B           B8                   A000  mov	ax,#$A000
20616 519E           50                         push	ax
20617                                           ! Debug: func () void = write_byte+0 (used reg = )
20618 519F           E8         29D0            call	_write_byte
20619 51A2           83C4                   06  add	sp,*6
20620                                           !BCC_EOS
20621                                           ! 2237       }
20622                                           ! 2238     }
20623                       000051A5            .142:
20624                                           ! 2239   }
20625                       000051A5            .13D:
20626                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20627 51A5           8A46         FE            mov	al,-2[bp]
20628 51A8           40                         inc	ax
20629 51A9           8846         FE            mov	-2[bp],al
20630                       000051AC            .13E:
20631                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20632 51AC           8A46         FE            mov	al,-2[bp]
20633 51AF           3C                     08  cmp	al,*8
20634 51B1   7303    E9         FF7D            blo 	.13F
20635                       000051B6            .143:
20636                       000051B6            .13C:
20637                                           ! 2240 #asm
20638                       000051B6            .139:
20639                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
20640 51B6           8A46         FF            mov	al,-1[bp]
20641 51B9           40                         inc	ax
20642 51BA           8846         FF            mov	-1[bp],al
20643                       000051BD            .13A:
20644                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
20645 51BD           8A46         FF            mov	al,-1[bp]
20646 51C0           3A46         0E            cmp	al,$E[bp]
20647 51C3   7303    E9         FF4E            blo 	.13B
20648                       000051C8            .144:
20649                       000051C8            .138:
20650                                           !BCC_EOS
20651                                           !BCC_ASM
20652                       0000000A            _write_gfx_char_pl4.j	set	$A
20653                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
20654                       00000006            _write_gfx_char_pl4.fdata	set	6
20655                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
20656                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
20657                       0000000E            .write_gfx_char_pl4.cheight	set	$E
20658                       00000018            _write_gfx_char_pl4.nbcols	set	$18
20659                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
20660                       0000000B            _write_gfx_char_pl4.i	set	$B
20661                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
20662                       00000016            _write_gfx_char_pl4.ycurs	set	$16
20663                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
20664                       00000009            _write_gfx_char_pl4.mask	set	9
20665                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
20666                       00000002            _write_gfx_char_pl4.dest	set	2
20667                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
20668                       00000014            _write_gfx_char_pl4.xcurs	set	$14
20669                       00000008            .write_gfx_char_pl4.xcurs	set	8
20670                       00000000            _write_gfx_char_pl4.src	set	0
20671                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
20672                       00000012            _write_gfx_char_pl4.attr	set	$12
20673                       00000006            .write_gfx_char_pl4.attr	set	6
20674                       00000010            _write_gfx_char_pl4.car	set	$10
20675                       00000004            .write_gfx_char_pl4.car	set	4
20676                       00000004            _write_gfx_char_pl4.addr	set	4
20677                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
20678 51C8           BA                   03CE    mov dx, # 0x3ce
20679 51CB           B8                   FF08    mov ax, #0xff08
20680 51CE           EF                           out dx, ax
20681 51CF           B8                   0005    mov ax, #0x0005
20682 51D2           EF                           out dx, ax
20683 51D3           B8                   0003    mov ax, #0x0003
20684 51D6           EF                           out dx, ax
20685                                           ! 2248 endasm
20686                                           !BCC_ENDASM
20687                                           !BCC_EOS
20688                                           ! 2249 }
20689 51D7           89EC                       mov	sp,bp
20690 51D9           5D                         pop	bp
20691 51DA           C3                         ret
20692                                           ! 2250 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
20693                                           ! Register BX used in function write_gfx_char_pl4
20694                                           ! 2251 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
20695                       000051DB            _write_gfx_char_cga:
20696                                           !BCC_EOS
20697                                           !BCC_EOS
20698                                           !BCC_EOS
20699                                           !BCC_EOS
20700                                           !BCC_EOS
20701                                           !BCC_EOS
20702                                           ! 2252 {
20703                                           ! 2253  Bit8u i,j,mask,data;
20704                                           !BCC_EOS
20705                                           ! 2254  Bit8u *fdata;
20706                                           !BCC_EOS
20707                                           ! 2255  Bit16u addr,dest,src;
20708                                           !BCC_EOS
20709                                           ! 2256  fdata = &vgafont8;
20710 51DB           55                         push	bp
20711 51DC           89E5                       mov	bp,sp
20712 51DE           83C4                   F4  add	sp,*-$C
20713                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20714 51E1           BB                   0F2A  mov	bx,#_vgafont8
20715 51E4           895E         FA            mov	-6[bp],bx
20716                                           !BCC_EOS
20717                                           ! 2257  addr=(xcurs*bpp)+ycurs*320;
20718                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
20719 51E7           8A46         0A            mov	al,$A[bp]
20720 51EA           30E4                       xor	ah,ah
20721 51EC           B9                   0140  mov	cx,#$140
20722 51EF           F7E9                       imul	cx
20723 51F1           50                         push	ax
20724                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
20725 51F2           8A46         0E            mov	al,$E[bp]
20726 51F5           30E4                       xor	ah,ah
20727 51F7           89C3                       mov	bx,ax
20728 51F9           8A46         08            mov	al,8[bp]
20729 51FC           30E4                       xor	ah,ah
20730 51FE           89D9                       mov	cx,bx
20731 5200           F7E9                       imul	cx
20732                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
20733 5202           0346         F2            add	ax,-$E[bp]
20734 5205           44                         inc	sp
20735 5206           44                         inc	sp
20736                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20737 5207           8946         F8            mov	-8[bp],ax
20738                                           !BCC_EOS
20739                                           ! 2258  src = car * 8;
20740                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
20741 520A           8A46         04            mov	al,4[bp]
20742 520D           30E4                       xor	ah,ah
20743 520F           B1                     03  mov	cl,*3
20744 5211           D3E0                       shl	ax,cl
20745                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20746 5213           8946         F4            mov	-$C[bp],ax
20747                                           !BCC_EOS
20748                                           ! 2259  for(i=0;i<8;i++)
20749                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20750 5216           30C0                       xor	al,al
20751 5218           8846         FF            mov	-1[bp],al
20752                                           !BCC_EOS
20753                                           !BCC_EOS
20754                                           ! 2260   {
20755 521B           E9         01B5            br 	.147
20756                       0000521E            .148:
20757                                           ! 2261    dest=addr+(i>>1)*80;
20758                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20759 521E           8A46         FF            mov	al,-1[bp]
20760 5221           30E4                       xor	ah,ah
20761 5223           D1E8                       shr	ax,*1
20762                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
20763 5225           B9                   0050  mov	cx,*$50
20764 5228           F7E9                       imul	cx
20765                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20766                                           ! Debug: expression subtree swapping
20767 522A           0346         F8            add	ax,-8[bp]
20768                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20769 522D           8946         F6            mov	-$A[bp],ax
20770                                           !BCC_EOS
20771                                           ! 2262    if (i & 1) dest += 0x2000;
20772                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20773 5230           8A46         FF            mov	al,-1[bp]
20774 5233           24                     01  and	al,*1
20775 5235           84C0                       test	al,al
20776 5237           74           09            je  	.149
20777                       00005239            .14A:
20778                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
20779 5239           8B46         F6            mov	ax,-$A[bp]
20780 523C           05                   2000  add	ax,#$2000
20781 523F           8946         F6            mov	-$A[bp],ax
20782                                           !BCC_EOS
20783                                           ! 2263    mask = 0x80;
20784                       00005242            .149:
20785                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
20786 5242           B0                     80  mov	al,#$80
20787 5244           8846         FD            mov	-3[bp],al
20788                                           !BCC_EOS
20789                                           ! 2264    if (bpp == 1)
20790                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
20791 5247           8A46         0E            mov	al,$E[bp]
20792 524A           3C                     01  cmp	al,*1
20793 524C   7403    E9         00B3            bne 	.14B
20794                       00005251            .14C:
20795                                           ! 2265     {
20796                                           ! 2266      if (attr & 0x80)
20797                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20798 5251           8A46         06            mov	al,6[bp]
20799 5254           24                     80  and	al,#$80
20800 5256           84C0                       test	al,al
20801 5258           74           12            je  	.14D
20802                       0000525A            .14E:
20803                                           ! 2267       {
20804                                           ! 2268        data = read_byte(0xb800,dest);
20805                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20806 525A           FF76         F6            push	-$A[bp]
20807                                           ! Debug: list unsigned int = const $B800 (used reg = )
20808 525D           B8                   B800  mov	ax,#$B800
20809 5260           50                         push	ax
20810                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20811 5261           E8         28E8            call	_read_byte
20812 5264           83C4                   04  add	sp,*4
20813                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20814 5267           8846         FC            mov	-4[bp],al
20815                                           !BCC_EOS
20816                                           ! 2269       }
20817                                           ! 2270      else
20818                                           ! 2271       {
20819 526A           EB           05            jmp .14F
20820                       0000526C            .14D:
20821                                           ! 2272        data = 0x00;
20822                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20823 526C           30C0                       xor	al,al
20824 526E           8846         FC            mov	-4[bp],al
20825                                           !BCC_EOS
20826                                           ! 2273       }
20827                                           ! 2274      for(j=0;j<8;j++)
20828                       00005271            .14F:
20829                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20830 5271           30C0                       xor	al,al
20831 5273           8846         FE            mov	-2[bp],al
20832                                           !BCC_EOS
20833                                           !BCC_EOS
20834                                           ! 2275       {
20835 5276           EB           6F            jmp .152
20836                       00005278            .153:
20837                                           ! 2276        if (fdata[src+i] & mask)
20838                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20839 5278           8B46         F4            mov	ax,-$C[bp]
20840 527B           0246         FF            add	al,-1[bp]
20841 527E           80D4                   00  adc	ah,*0
20842                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20843 5281           0346         FA            add	ax,-6[bp]
20844 5284           89C3                       mov	bx,ax
20845                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20846 5286           8A07                       mov	al,[bx]
20847 5288           2246         FD            and	al,-3[bp]
20848 528B           84C0                       test	al,al
20849 528D           74           47            je  	.154
20850                       0000528F            .155:
20851                                           ! 2277         {
20852                                           ! 2278          if (attr & 0x80)
20853                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20854 528F           8A46         06            mov	al,6[bp]
20855 5292           24                     80  and	al,#$80
20856 5294           84C0                       test	al,al
20857 5296           74           20            je  	.156
20858                       00005298            .157:
20859                                           ! 2279           {
20860                                           ! 2280            data ^= (attr & 0x01) << (7-j);
20861                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
20862 5298           B8                   0007  mov	ax,*7
20863 529B           2A46         FE            sub	al,-2[bp]
20864 529E           80DC                   00  sbb	ah,*0
20865 52A1           50                         push	ax
20866                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
20867 52A2           8A46         06            mov	al,6[bp]
20868 52A5           24                     01  and	al,*1
20869                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
20870 52A7           30E4                       xor	ah,ah
20871 52A9           8B4E         F2            mov	cx,-$E[bp]
20872 52AC           D3E0                       shl	ax,cl
20873 52AE           44                         inc	sp
20874 52AF           44                         inc	sp
20875                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
20876 52B0           3246         FC            xor	al,-4[bp]
20877 52B3           8846         FC            mov	-4[bp],al
20878                                           !BCC_EOS
20879                                           ! 2281           }
20880                                           ! 2282          else
20881                                           ! 2283           {
20882 52B6           EB           1E            jmp .158
20883                       000052B8            .156:
20884                                           ! 2284            data |= (attr & 0x01) << (7-j);
20885                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
20886 52B8           B8                   0007  mov	ax,*7
20887 52BB           2A46         FE            sub	al,-2[bp]
20888 52BE           80DC                   00  sbb	ah,*0
20889 52C1           50                         push	ax
20890                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
20891 52C2           8A46         06            mov	al,6[bp]
20892 52C5           24                     01  and	al,*1
20893                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
20894 52C7           30E4                       xor	ah,ah
20895 52C9           8B4E         F2            mov	cx,-$E[bp]
20896 52CC           D3E0                       shl	ax,cl
20897 52CE           44                         inc	sp
20898 52CF           44                         inc	sp
20899                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
20900 52D0           0A46         FC            or	al,-4[bp]
20901 52D3           8846         FC            mov	-4[bp],al
20902                                           !BCC_EOS
20903                                           ! 2285           }
20904                                           ! 2286         }
20905                       000052D6            .158:
20906                                           ! 2287        mask >>= 1;
20907                       000052D6            .154:
20908                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
20909 52D6           8A46         FD            mov	al,-3[bp]
20910 52D9           30E4                       xor	ah,ah
20911 52DB           D1E8                       shr	ax,*1
20912 52DD           8846         FD            mov	-3[bp],al
20913                                           !BCC_EOS
20914                                           ! 2288       }
20915                                           ! 2289      write_byte(0xb800,dest,
20916                       000052E0            .151:
20917                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20918 52E0           8A46         FE            mov	al,-2[bp]
20919 52E3           40                         inc	ax
20920 52E4           8846         FE            mov	-2[bp],al
20921                       000052E7            .152:
20922                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20923 52E7           8A46         FE            mov	al,-2[bp]
20924 52EA           3C                     08  cmp	al,*8
20925 52EC           72           8A            jb 	.153
20926                       000052EE            .159:
20927                       000052EE            .150:
20928                                           ! 2289 data);
20929                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
20930 52EE           8A46         FC            mov	al,-4[bp]
20931 52F1           30E4                       xor	ah,ah
20932 52F3           50                         push	ax
20933                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20934 52F4           FF76         F6            push	-$A[bp]
20935                                           ! Debug: list unsigned int = const $B800 (used reg = )
20936 52F7           B8                   B800  mov	ax,#$B800
20937 52FA           50                         push	ax
20938                                           ! Debug: func () void = write_byte+0 (used reg = )
20939 52FB           E8         2874            call	_write_byte
20940 52FE           83C4                   06  add	sp,*6
20941                                           !BCC_EOS
20942                                           ! 2290     }
20943                                           ! 2291    else
20944                                           ! 2292     {
20945 5301           E9         00C8            br 	.15A
20946                       00005304            .14B:
20947                                           ! 2293      while (mask > 0)
20948                                           ! 2294       {
20949 5304           E9         00BB            br 	.15C
20950                       00005307            .15D:
20951                                           ! 2295        if (attr & 0x80)
20952                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20953 5307           8A46         06            mov	al,6[bp]
20954 530A           24                     80  and	al,#$80
20955 530C           84C0                       test	al,al
20956 530E           74           12            je  	.15E
20957                       00005310            .15F:
20958                                           ! 2296         {
20959                                           ! 2297          data = read_byte(0xb800,dest);
20960                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20961 5310           FF76         F6            push	-$A[bp]
20962                                           ! Debug: list unsigned int = const $B800 (used reg = )
20963 5313           B8                   B800  mov	ax,#$B800
20964 5316           50                         push	ax
20965                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20966 5317           E8         2832            call	_read_byte
20967 531A           83C4                   04  add	sp,*4
20968                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20969 531D           8846         FC            mov	-4[bp],al
20970                                           !BCC_EOS
20971                                           ! 2298         }
20972                                           ! 2299        else
20973                                           ! 2300         {
20974 5320           EB           05            jmp .160
20975                       00005322            .15E:
20976                                           ! 2301          data = 0x00;
20977                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20978 5322           30C0                       xor	al,al
20979 5324           8846         FC            mov	-4[bp],al
20980                                           !BCC_EOS
20981                                           ! 2302         }
20982                                           ! 2303        for(j=0;j<4;j++)
20983                       00005327            .160:
20984                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20985 5327           30C0                       xor	al,al
20986 5329           8846         FE            mov	-2[bp],al
20987                                           !BCC_EOS
20988                                           !BCC_EOS
20989                                           ! 2304         {
20990 532C           EB           73            jmp .163
20991                       0000532E            .164:
20992                                           ! 2305          if (fdata[src+i] & mask)
20993                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20994 532E           8B46         F4            mov	ax,-$C[bp]
20995 5331           0246         FF            add	al,-1[bp]
20996 5334           80D4                   00  adc	ah,*0
20997                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20998 5337           0346         FA            add	ax,-6[bp]
20999 533A           89C3                       mov	bx,ax
21000                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21001 533C           8A07                       mov	al,[bx]
21002 533E           2246         FD            and	al,-3[bp]
21003 5341           84C0                       test	al,al
21004 5343           74           4B            je  	.165
21005                       00005345            .166:
21006                                           ! 2306           {
21007                                           ! 2307            if (attr & 0x80)
21008                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21009 5345           8A46         06            mov	al,6[bp]
21010 5348           24                     80  and	al,#$80
21011 534A           84C0                       test	al,al
21012 534C           74           22            je  	.167
21013                       0000534E            .168:
21014                                           ! 2308             {
21015                                           ! 2309              data ^= (attr & 0x03) << ((3-j)*2);
21016                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21017 534E           B8                   0003  mov	ax,*3
21018 5351           2A46         FE            sub	al,-2[bp]
21019 5354           80DC                   00  sbb	ah,*0
21020                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21021 5357           D1E0                       shl	ax,*1
21022 5359           50                         push	ax
21023                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21024 535A           8A46         06            mov	al,6[bp]
21025 535D           24                     03  and	al,*3
21026                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21027 535F           30E4                       xor	ah,ah
21028 5361           8B4E         F2            mov	cx,-$E[bp]
21029 5364           D3E0                       shl	ax,cl
21030 5366           44                         inc	sp
21031 5367           44                         inc	sp
21032                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21033 5368           3246         FC            xor	al,-4[bp]
21034 536B           8846         FC            mov	-4[bp],al
21035                                           !BCC_EOS
21036                                           ! 2310             }
21037                                           ! 2311            else
21038                                           ! 2312             {
21039 536E           EB           20            jmp .169
21040                       00005370            .167:
21041                                           ! 2313              data |= (attr & 0x03) << ((3-j)*2);
21042                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21043 5370           B8                   0003  mov	ax,*3
21044 5373           2A46         FE            sub	al,-2[bp]
21045 5376           80DC                   00  sbb	ah,*0
21046                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21047 5379           D1E0                       shl	ax,*1
21048 537B           50                         push	ax
21049                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21050 537C           8A46         06            mov	al,6[bp]
21051 537F           24                     03  and	al,*3
21052                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21053 5381           30E4                       xor	ah,ah
21054 5383           8B4E         F2            mov	cx,-$E[bp]
21055 5386           D3E0                       shl	ax,cl
21056 5388           44                         inc	sp
21057 5389           44                         inc	sp
21058                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21059 538A           0A46         FC            or	al,-4[bp]
21060 538D           8846         FC            mov	-4[bp],al
21061                                           !BCC_EOS
21062                                           ! 2314             }
21063                                           ! 2315           }
21064                       00005390            .169:
21065                                           ! 2316          mask >>= 1;
21066                       00005390            .165:
21067                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21068 5390           8A46         FD            mov	al,-3[bp]
21069 5393           30E4                       xor	ah,ah
21070 5395           D1E8                       shr	ax,*1
21071 5397           8846         FD            mov	-3[bp],al
21072                                           !BCC_EOS
21073                                           ! 2317         }
21074                                           ! 2318        write_byte(0xb800,dest,data);
21075                       0000539A            .162:
21076                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21077 539A           8A46         FE            mov	al,-2[bp]
21078 539D           40                         inc	ax
21079 539E           8846         FE            mov	-2[bp],al
21080                       000053A1            .163:
21081                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21082 53A1           8A46         FE            mov	al,-2[bp]
21083 53A4           3C                     04  cmp	al,*4
21084 53A6           72           86            jb 	.164
21085                       000053A8            .16A:
21086                       000053A8            .161:
21087                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21088 53A8           8A46         FC            mov	al,-4[bp]
21089 53AB           30E4                       xor	ah,ah
21090 53AD           50                         push	ax
21091                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21092 53AE           FF76         F6            push	-$A[bp]
21093                                           ! Debug: list unsigned int = const $B800 (used reg = )
21094 53B1           B8                   B800  mov	ax,#$B800
21095 53B4           50                         push	ax
21096                                           ! Debug: func () void = write_byte+0 (used reg = )
21097 53B5           E8         27BA            call	_write_byte
21098 53B8           83C4                   06  add	sp,*6
21099                                           !BCC_EOS
21100                                           ! 2319        dest += 1;
21101                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21102 53BB           8B46         F6            mov	ax,-$A[bp]
21103 53BE           40                         inc	ax
21104 53BF           8946         F6            mov	-$A[bp],ax
21105                                           !BCC_EOS
21106                                           ! 2320       }
21107                                           ! 2321     }
21108                       000053C2            .15C:
21109                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21110 53C2           8A46         FD            mov	al,-3[bp]
21111 53C5           84C0                       test	al,al
21112 53C7   7403    E9         FF3B            bne 	.15D
21113                       000053CC            .16B:
21114                       000053CC            .15B:
21115                                           ! 2322   }
21116                       000053CC            .15A:
21117                                           ! 2323 }
21118                       000053CC            .146:
21119                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21120 53CC           8A46         FF            mov	al,-1[bp]
21121 53CF           40                         inc	ax
21122 53D0           8846         FF            mov	-1[bp],al
21123                       000053D3            .147:
21124                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21125 53D3           8A46         FF            mov	al,-1[bp]
21126 53D6           3C                     08  cmp	al,*8
21127 53D8   7303    E9         FE41            blo 	.148
21128                       000053DD            .16C:
21129                       000053DD            .145:
21130 53DD           89EC                       mov	sp,bp
21131 53DF           5D                         pop	bp
21132 53E0           C3                         ret
21133                                           ! 2324 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21134                                           ! Register BX used in function write_gfx_char_cga
21135                                           ! 2325 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21136                       000053E1            _write_gfx_char_lin:
21137                                           !BCC_EOS
21138                                           !BCC_EOS
21139                                           !BCC_EOS
21140                                           !BCC_EOS
21141                                           !BCC_EOS
21142                                           ! 2326 {
21143                                           ! 2327  Bit8u i,j,mask,data;
21144                                           !BCC_EOS
21145                                           ! 2328  Bit8u *fdata;
21146                                           !BCC_EOS
21147                                           ! 2329  Bit16u addr,dest,src;
21148                                           !BCC_EOS
21149                                           ! 2330  fdata = &vgafont8;
21150 53E1           55                         push	bp
21151 53E2           89E5                       mov	bp,sp
21152 53E4           83C4                   F4  add	sp,*-$C
21153                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21154 53E7           BB                   0F2A  mov	bx,#_vgafont8
21155 53EA           895E         FA            mov	-6[bp],bx
21156                                           !BCC_EOS
21157                                           ! 2331  addr=xcurs*8+ycurs*nbcols*64;
21158                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21159 53ED           8A46         0C            mov	al,$C[bp]
21160 53F0           30E4                       xor	ah,ah
21161 53F2           89C3                       mov	bx,ax
21162 53F4           8A46         0A            mov	al,$A[bp]
21163 53F7           30E4                       xor	ah,ah
21164 53F9           89D9                       mov	cx,bx
21165 53FB           F7E9                       imul	cx
21166                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21167 53FD           B1                     06  mov	cl,*6
21168 53FF           D3E0                       shl	ax,cl
21169 5401           50                         push	ax
21170                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21171 5402           8A46         08            mov	al,8[bp]
21172 5405           30E4                       xor	ah,ah
21173 5407           B1                     03  mov	cl,*3
21174 5409           D3E0                       shl	ax,cl
21175                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21176 540B           0346         F2            add	ax,-$E[bp]
21177 540E           44                         inc	sp
21178 540F           44                         inc	sp
21179                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21180 5410           8946         F8            mov	-8[bp],ax
21181                                           !BCC_EOS
21182                                           ! 2332  src = car * 8;
21183                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21184 5413           8A46         04            mov	al,4[bp]
21185 5416           30E4                       xor	ah,ah
21186 5418           B1                     03  mov	cl,*3
21187 541A           D3E0                       shl	ax,cl
21188                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21189 541C           8946         F4            mov	-$C[bp],ax
21190                                           !BCC_EOS
21191                                           ! 2333  for(i=0;i<8;i++)
21192                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21193 541F           30C0                       xor	al,al
21194 5421           8846         FF            mov	-1[bp],al
21195                                           !BCC_EOS
21196                                           !BCC_EOS
21197                                           ! 2334   {
21198 5424           E9         0081            br 	.16F
21199                       00005427            .170:
21200                                           ! 2335    dest=addr+i*nbcols*8;
21201                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21202 5427           8A46         0C            mov	al,$C[bp]
21203 542A           30E4                       xor	ah,ah
21204 542C           89C3                       mov	bx,ax
21205 542E           8A46         FF            mov	al,-1[bp]
21206 5431           30E4                       xor	ah,ah
21207 5433           89D9                       mov	cx,bx
21208 5435           F7E9                       imul	cx
21209                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21210 5437           B1                     03  mov	cl,*3
21211 5439           D3E0                       shl	ax,cl
21212                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21213                                           ! Debug: expression subtree swapping
21214 543B           0346         F8            add	ax,-8[bp]
21215                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21216 543E           8946         F6            mov	-$A[bp],ax
21217                                           !BCC_EOS
21218                                           ! 2336    mask = 0x80;
21219                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21220 5441           B0                     80  mov	al,#$80
21221 5443           8846         FD            mov	-3[bp],al
21222                                           !BCC_EOS
21223                                           ! 2337    for(j=0;j<8;j++)
21224                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21225 5446           30C0                       xor	al,al
21226 5448           8846         FE            mov	-2[bp],al
21227                                           !BCC_EOS
21228                                           !BCC_EOS
21229                                           ! 2338     {
21230 544B           EB           4D            jmp .173
21231                       0000544D            .174:
21232                                           ! 2339      data = 0x00;
21233                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21234 544D           30C0                       xor	al,al
21235 544F           8846         FC            mov	-4[bp],al
21236                                           !BCC_EOS
21237                                           ! 2340      if (fdata[src+i] & mask)
21238                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21239 5452           8B46         F4            mov	ax,-$C[bp]
21240 5455           0246         FF            add	al,-1[bp]
21241 5458           80D4                   00  adc	ah,*0
21242                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21243 545B           0346         FA            add	ax,-6[bp]
21244 545E           89C3                       mov	bx,ax
21245                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21246 5460           8A07                       mov	al,[bx]
21247 5462           2246         FD            and	al,-3[bp]
21248 5465           84C0                       test	al,al
21249 5467           74           06            je  	.175
21250                       00005469            .176:
21251                                           ! 2341       {
21252                                           ! 2342        data = attr;
21253                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21254 5469           8A46         06            mov	al,6[bp]
21255 546C           8846         FC            mov	-4[bp],al
21256                                           !BCC_EOS
21257                                           ! 2343       }
21258                                           ! 2344      write_byte(0xa000,dest+j,data);
21259                       0000546F            .175:
21260                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21261 546F           8A46         FC            mov	al,-4[bp]
21262 5472           30E4                       xor	ah,ah
21263 5474           50                         push	ax
21264                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21265 5475           8B46         F6            mov	ax,-$A[bp]
21266 5478           0246         FE            add	al,-2[bp]
21267 547B           80D4                   00  adc	ah,*0
21268                                           ! Debug: list unsigned int = ax+0 (used reg = )
21269 547E           50                         push	ax
21270                                           ! Debug: list unsigned int = const $A000 (used reg = )
21271 547F           B8                   A000  mov	ax,#$A000
21272 5482           50                         push	ax
21273                                           ! Debug: func () void = write_byte+0 (used reg = )
21274 5483           E8         26EC            call	_write_byte
21275 5486           83C4                   06  add	sp,*6
21276                                           !BCC_EOS
21277                                           ! 2345      mask >>= 1;
21278                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21279 5489           8A46         FD            mov	al,-3[bp]
21280 548C           30E4                       xor	ah,ah
21281 548E           D1E8                       shr	ax,*1
21282 5490           8846         FD            mov	-3[bp],al
21283                                           !BCC_EOS
21284                                           ! 2346     }
21285                                           ! 2347   }
21286                       00005493            .172:
21287                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21288 5493           8A46         FE            mov	al,-2[bp]
21289 5496           40                         inc	ax
21290 5497           8846         FE            mov	-2[bp],al
21291                       0000549A            .173:
21292                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21293 549A           8A46         FE            mov	al,-2[bp]
21294 549D           3C                     08  cmp	al,*8
21295 549F           72           AC            jb 	.174
21296                       000054A1            .177:
21297                       000054A1            .171:
21298                                           ! 2348 }
21299                       000054A1            .16E:
21300                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21301 54A1           8A46         FF            mov	al,-1[bp]
21302 54A4           40                         inc	ax
21303 54A5           8846         FF            mov	-1[bp],al
21304                       000054A8            .16F:
21305                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21306 54A8           8A46         FF            mov	al,-1[bp]
21307 54AB           3C                     08  cmp	al,*8
21308 54AD   7303    E9         FF75            blo 	.170
21309                       000054B2            .178:
21310                       000054B2            .16D:
21311 54B2           89EC                       mov	sp,bp
21312 54B4           5D                         pop	bp
21313 54B5           C3                         ret
21314                                           ! 2349 static void biosfn_write_char_attr (car,page,attr,count)
21315                                           ! Register BX used in function write_gfx_char_lin
21316                                           ! 2350 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21317                       000054B6            _biosfn_write_char_attr:
21318                                           !BCC_EOS
21319                                           !BCC_EOS
21320                                           !BCC_EOS
21321                                           !BCC_EOS
21322                                           ! 2351 {
21323                                           ! 2352  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21324                                           !BCC_EOS
21325                                           ! 2353  Bit16u nbcols,nbrows,address;
21326                                           !BCC_EOS
21327                                           ! 2354  Bit16u cursor,dummy;
21328                                           !BCC_EOS
21329                                           ! 2355  mode=read_byte(0x40,0x49);
21330 54B6           55                         push	bp
21331 54B7           89E5                       mov	bp,sp
21332 54B9           83C4                   F0  add	sp,*-$10
21333                                           ! Debug: list int = const $49 (used reg = )
21334 54BC           B8                   0049  mov	ax,*$49
21335 54BF           50                         push	ax
21336                                           ! Debug: list int = const $40 (used reg = )
21337 54C0           B8                   0040  mov	ax,*$40
21338 54C3           50                         push	ax
21339                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21340 54C4           E8         2685            call	_read_byte
21341 54C7           83C4                   04  add	sp,*4
21342                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21343 54CA           8846         FC            mov	-4[bp],al
21344                                           !BCC_EOS
21345                                           ! 2356  line=find_vga_entry(mode);
21346                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21347 54CD           8A46         FC            mov	al,-4[bp]
21348 54D0           30E4                       xor	ah,ah
21349 54D2           50                         push	ax
21350                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21351 54D3           E8         258A            call	_find_vga_entry
21352 54D6           44                         inc	sp
21353 54D7           44                         inc	sp
21354                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21355 54D8           8846         FB            mov	-5[bp],al
21356                                           !BCC_EOS
21357                                           ! 2357  if(line==0xFF)return;
21358                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21359 54DB           8A46         FB            mov	al,-5[bp]
21360 54DE           3C                     FF  cmp	al,#$FF
21361 54E0           75           04            jne 	.179
21362                       000054E2            .17A:
21363 54E2           89EC                       mov	sp,bp
21364 54E4           5D                         pop	bp
21365 54E5           C3                         ret
21366                                           !BCC_EOS
21367                                           ! 2358  biosfn_get_cursor_pos(page,&dummy,&cursor);
21368                       000054E6            .179:
21369                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21370 54E6           8D5E         F2            lea	bx,-$E[bp]
21371 54E9           53                         push	bx
21372                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21373 54EA           8D5E         F0            lea	bx,-$10[bp]
21374 54ED           53                         push	bx
21375                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21376 54EE           8A46         06            mov	al,6[bp]
21377 54F1           30E4                       xor	ah,ah
21378 54F3           50                         push	ax
21379                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21380 54F4           E8         EE68            call	_biosfn_get_cursor_pos
21381 54F7           83C4                   06  add	sp,*6
21382                                           !BCC_EOS
21383                                           ! 2359  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21384                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21385 54FA           8A46         F2            mov	al,-$E[bp]
21386                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21387 54FD           8846         FE            mov	-2[bp],al
21388                                           !BCC_EOS
21389                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21390 5500           8B46         F2            mov	ax,-$E[bp]
21391 5503           30C0                       xor	al,al
21392                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21393 5505           88E0                       mov	al,ah
21394 5507           30E4                       xor	ah,ah
21395                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21396 5509           8846         FD            mov	-3[bp],al
21397                                           !BCC_EOS
21398                                           ! 2360  nbrows=read_byte(0x40,0x84)+1;
21399                                           ! Debug: list int = const $84 (used reg = )
21400 550C           B8                   0084  mov	ax,#$84
21401 550F           50                         push	ax
21402                                           ! Debug: list int = const $40 (used reg = )
21403 5510           B8                   0040  mov	ax,*$40
21404 5513           50                         push	ax
21405                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21406 5514           E8         2635            call	_read_byte
21407 5517           83C4                   04  add	sp,*4
21408                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21409 551A           30E4                       xor	ah,ah
21410                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21411 551C           40                         inc	ax
21412 551D           8946         F6            mov	-$A[bp],ax
21413                                           !BCC_EOS
21414                                           ! 2361  nbcols=read_word(0x40,0x4A);
21415                                           ! Debug: list int = const $4A (used reg = )
21416 5520           B8                   004A  mov	ax,*$4A
21417 5523           50                         push	ax
21418                                           ! Debug: list int = const $40 (used reg = )
21419 5524           B8                   0040  mov	ax,*$40
21420 5527           50                         push	ax
21421                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21422 5528           E8         2634            call	_read_word
21423 552B           83C4                   04  add	sp,*4
21424                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21425 552E           8946         F8            mov	-8[bp],ax
21426                                           !BCC_EOS
21427                                           ! 2362  if(vga_modes[line].class==0x00)
21428                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21429 5531           8A46         FB            mov	al,-5[bp]
21430 5534           30E4                       xor	ah,ah
21431 5536           B1                     03  mov	cl,*3
21432 5538           D3E0                       shl	ax,cl
21433 553A           89C3                       mov	bx,ax
21434 553C           81C3                 01C6  add	bx,#_vga_modes
21435                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21436 5540           8A47         01            mov	al,1[bx]
21437 5543           84C0                       test	al,al
21438 5545           75           6A            jne 	.17B
21439                       00005547            .17C:
21440                                           ! 2363   {
21441                                           ! 2364    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21442                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21443 5547           8A46         FD            mov	al,-3[bp]
21444 554A           30E4                       xor	ah,ah
21445 554C           8B4E         F8            mov	cx,-8[bp]
21446 554F           F7E9                       imul	cx
21447                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21448                                           ! Debug: expression subtree swapping
21449 5551           0246         FE            add	al,-2[bp]
21450 5554           80D4                   00  adc	ah,*0
21451                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21452 5557           D1E0                       shl	ax,*1
21453 5559           50                         push	ax
21454                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21455 555A           8B46         F8            mov	ax,-8[bp]
21456 555D           8B4E         F6            mov	cx,-$A[bp]
21457 5560           F7E9                       imul	cx
21458                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21459 5562           D1E0                       shl	ax,*1
21460                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21461 5564           0C                     FF  or	al,#$FF
21462                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21463                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21464 5566           89C3                       mov	bx,ax
21465 5568           8A46         06            mov	al,6[bp]
21466 556B           30E4                       xor	ah,ah
21467 556D           93                         xchg	ax,bx
21468 556E           40                         inc	ax
21469 556F           89D9                       mov	cx,bx
21470 5571           F7E9                       imul	cx
21471                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21472 5573           0346         EE            add	ax,-$12[bp]
21473 5576           44                         inc	sp
21474 5577           44                         inc	sp
21475                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21476 5578           8946         F4            mov	-$C[bp],ax
21477                                           !BCC_EOS
21478                                           ! 2365    dummy=((Bit16u)attr<<8)+car;
21479                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21480 557B           8A46         08            mov	al,8[bp]
21481 557E           30E4                       xor	ah,ah
21482                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21483 5580           88C4                       mov	ah,al
21484 5582           30C0                       xor	al,al
21485                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21486 5584           0246         04            add	al,4[bp]
21487 5587           80D4                   00  adc	ah,*0
21488                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21489 558A           8946         F0            mov	-$10[bp],ax
21490                                           !BCC_EOS
21491                                           ! 2366    memsetw(vga_modes[line].sstart,address,dummy,count);
21492                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21493 558D           FF76         0A            push	$A[bp]
21494                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21495 5590           FF76         F0            push	-$10[bp]
21496                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21497 5593           FF76         F4            push	-$C[bp]
21498                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21499 5596           8A46         FB            mov	al,-5[bp]
21500 5599           30E4                       xor	ah,ah
21501 559B           B1                     03  mov	cl,*3
21502 559D           D3E0                       shl	ax,cl
21503 559F           89C3                       mov	bx,ax
21504 55A1           81C3                 01C6  add	bx,#_vga_modes
21505                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21506 55A5           FF77         04            push	4[bx]
21507                                           ! Debug: func () void = memsetw+0 (used reg = )
21508 55A8           E8         251C            call	_memsetw
21509 55AB           83C4                   08  add	sp,*8
21510                                           !BCC_EOS
21511                                           ! 2367   }
21512                                           ! 2368  else
21513                                           ! 2369   {
21514 55AE           E9         00F6            br 	.17D
21515                       000055B1            .17B:
21516                                           ! 2370    cheight=video_param_table[line_to_vpti[line]].cheight;
21517                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21518 55B1           8A46         FB            mov	al,-5[bp]
21519 55B4           30E4                       xor	ah,ah
21520 55B6           89C3                       mov	bx,ax
21521                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21522 55B8           8A87       0246            mov	al,_line_to_vpti[bx]
21523 55BC           30E4                       xor	ah,ah
21524 55BE           B1                     06  mov	cl,*6
21525 55C0           D3E0                       shl	ax,cl
21526 55C2           89C3                       mov	bx,ax
21527 55C4           81C3                 025A  add	bx,#_video_param_table
21528                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21529 55C8           8A47         02            mov	al,2[bx]
21530 55CB           8846         FF            mov	-1[bp],al
21531                                           !BCC_EOS
21532                                           ! 2371    bpp=vga_modes[line].pixbits;
21533                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21534 55CE           8A46         FB            mov	al,-5[bp]
21535 55D1           30E4                       xor	ah,ah
21536 55D3           B1                     03  mov	cl,*3
21537 55D5           D3E0                       shl	ax,cl
21538 55D7           89C3                       mov	bx,ax
21539 55D9           81C3                 01C6  add	bx,#_vga_modes
21540                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21541 55DD           8A47         03            mov	al,3[bx]
21542 55E0           8846         FA            mov	-6[bp],al
21543                                           !BCC_EOS
21544                                           ! 2372    while((count-->0) && (xcurs<nbcols))
21545                                           ! 2373     {
21546 55E3           E9         00A8            br 	.17F
21547                       000055E6            .180:
21548                                           ! 2374      switch(vga_modes[line].memmodel)
21549                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21550 55E6           8A46         FB            mov	al,-5[bp]
21551 55E9           30E4                       xor	ah,ah
21552 55EB           B1                     03  mov	cl,*3
21553 55ED           D3E0                       shl	ax,cl
21554 55EF           89C3                       mov	bx,ax
21555 55F1           81C3                 01C6  add	bx,#_vga_modes
21556 55F5           8A47         02            mov	al,2[bx]
21557                                           ! 2375       {
21558 55F8           EB           77            jmp .183
21559                                           ! 2376        case 0x04:
21560                                           ! 2377        case 0x03:
21561                       000055FA            .184:
21562                                           ! 2378          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
21563                       000055FA            .185:
21564                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21565 55FA           8A46         FF            mov	al,-1[bp]
21566 55FD           30E4                       xor	ah,ah
21567 55FF           50                         push	ax
21568                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21569 5600           FF76         F8            push	-8[bp]
21570                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21571 5603           8A46         FD            mov	al,-3[bp]
21572 5606           30E4                       xor	ah,ah
21573 5608           50                         push	ax
21574                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21575 5609           8A46         FE            mov	al,-2[bp]
21576 560C           30E4                       xor	ah,ah
21577 560E           50                         push	ax
21578                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21579 560F           8A46         08            mov	al,8[bp]
21580 5612           30E4                       xor	ah,ah
21581 5614           50                         push	ax
21582                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21583 5615           8A46         04            mov	al,4[bp]
21584 5618           30E4                       xor	ah,ah
21585 561A           50                         push	ax
21586                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21587 561B           E8         FA48            call	_write_gfx_char_pl4
21588 561E           83C4                   0C  add	sp,*$C
21589                                           !BCC_EOS
21590                                           ! 2379          break;
21591 5621           EB           64            jmp .181
21592                                           !BCC_EOS
21593                                           ! 2380        case 0x02:
21594                                           ! 2381        
21595                                           ! 2381   write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21596                       00005623            .186:
21597                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21598 5623           8A46         FA            mov	al,-6[bp]
21599 5626           30E4                       xor	ah,ah
21600 5628           50                         push	ax
21601                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21602 5629           FF76         F8            push	-8[bp]
21603                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21604 562C           8A46         FD            mov	al,-3[bp]
21605 562F           30E4                       xor	ah,ah
21606 5631           50                         push	ax
21607                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21608 5632           8A46         FE            mov	al,-2[bp]
21609 5635           30E4                       xor	ah,ah
21610 5637           50                         push	ax
21611                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21612 5638           8A46         08            mov	al,8[bp]
21613 563B           30E4                       xor	ah,ah
21614 563D           50                         push	ax
21615                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21616 563E           8A46         04            mov	al,4[bp]
21617 5641           30E4                       xor	ah,ah
21618 5643           50                         push	ax
21619                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
21620 5644           E8         FB94            call	_write_gfx_char_cga
21621 5647           83C4                   0C  add	sp,*$C
21622                                           !BCC_EOS
21623                                           ! 2382          break;
21624 564A           EB           3B            jmp .181
21625                                           !BCC_EOS
21626                                           ! 2383        case 0x05:
21627                                           ! 2384          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
21628                       0000564C            .187:
21629                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
21630 564C           FF76         F8            push	-8[bp]
21631                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
21632 564F           8A46         FD            mov	al,-3[bp]
21633 5652           30E4                       xor	ah,ah
21634 5654           50                         push	ax
21635                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
21636 5655           8A46         FE            mov	al,-2[bp]
21637 5658           30E4                       xor	ah,ah
21638 565A           50                         push	ax
21639                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
21640 565B           8A46         08            mov	al,8[bp]
21641 565E           30E4                       xor	ah,ah
21642 5660           50                         push	ax
21643                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
21644 5661           8A46         04            mov	al,4[bp]
21645 5664           30E4                       xor	ah,ah
21646 5666           50                         push	ax
21647                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
21648 5667           E8         FD77            call	_write_gfx_char_lin
21649 566A           83C4                   0A  add	sp,*$A
21650                                           !BCC_EOS
21651                                           ! 2385          break;
21652 566D           EB           18            jmp .181
21653                                           !BCC_EOS
21654                                           ! 2386       }
21655                                           ! 2387      xcurs++;
21656 566F           EB           16            jmp .181
21657                       00005671            .183:
21658 5671           2C                     02  sub	al,*2
21659 5673           74           AE            je 	.186
21660 5675           2C                     01  sub	al,*1
21661 5677   7503    E9         FF7E            beq 	.185
21662 567C           2C                     01  sub	al,*1
21663 567E   7503    E9         FF77            beq 	.184
21664 5683           2C                     01  sub	al,*1
21665 5685           74           C5            je 	.187
21666                       00005687            .181:
21667                       FFFFFFEE            ..FFFA	=	-$12
21668                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
21669 5687           8A46         FE            mov	al,-2[bp]
21670 568A           40                         inc	ax
21671 568B           8846         FE            mov	-2[bp],al
21672                                           !BCC_EOS
21673                                           ! 2388     }
21674                                           ! 2389   }
21675                       0000568E            .17F:
21676                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21677 568E           8B46         0A            mov	ax,$A[bp]
21678 5691           48                         dec	ax
21679 5692           8946         0A            mov	$A[bp],ax
21680                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21681 5695           3D                   FFFF  cmp	ax,*-1
21682 5698           74           0D            je  	.188
21683                       0000569A            .189:
21684                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
21685 569A           8A46         FE            mov	al,-2[bp]
21686 569D           30E4                       xor	ah,ah
21687 569F           3B46         F8            cmp	ax,-8[bp]
21688 56A2   7303    E9         FF3F            blo 	.180
21689                       000056A7            .188:
21690                       000056A7            .17E:
21691                                           ! 2390 }
21692                       000056A7            .17D:
21693 56A7           89EC                       mov	sp,bp
21694 56A9           5D                         pop	bp
21695 56AA           C3                         ret
21696                                           ! 2391 static void biosfn_write_char_only (car,page,attr,count)
21697                                           ! Register BX used in function biosfn_write_char_attr
21698                                           ! 2392 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21699                       000056AB            _biosfn_write_char_only:
21700                                           !BCC_EOS
21701                                           !BCC_EOS
21702                                           !BCC_EOS
21703                                           !BCC_EOS
21704                                           ! 2393 {
21705                                           ! 2394  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21706                                           !BCC_EOS
21707                                           ! 2395  Bit16u nbcols,nbrows,address;
21708                                           !BCC_EOS
21709                                           ! 2396  Bit16u cursor,dummy;
21710                                           !BCC_EOS
21711                                           ! 2397  mode=read_byte(0x40,0x49);
21712 56AB           55                         push	bp
21713 56AC           89E5                       mov	bp,sp
21714 56AE           83C4                   F0  add	sp,*-$10
21715                                           ! Debug: list int = const $49 (used reg = )
21716 56B1           B8                   0049  mov	ax,*$49
21717 56B4           50                         push	ax
21718                                           ! Debug: list int = const $40 (used reg = )
21719 56B5           B8                   0040  mov	ax,*$40
21720 56B8           50                         push	ax
21721                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21722 56B9           E8         2490            call	_read_byte
21723 56BC           83C4                   04  add	sp,*4
21724                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21725 56BF           8846         FC            mov	-4[bp],al
21726                                           !BCC_EOS
21727                                           ! 2398  line=find_vga_entry(mode);
21728                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21729 56C2           8A46         FC            mov	al,-4[bp]
21730 56C5           30E4                       xor	ah,ah
21731 56C7           50                         push	ax
21732                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21733 56C8           E8         2395            call	_find_vga_entry
21734 56CB           44                         inc	sp
21735 56CC           44                         inc	sp
21736                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21737 56CD           8846         FB            mov	-5[bp],al
21738                                           !BCC_EOS
21739                                           ! 2399  if(line==0xFF)return;
21740                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21741 56D0           8A46         FB            mov	al,-5[bp]
21742 56D3           3C                     FF  cmp	al,#$FF
21743 56D5           75           04            jne 	.18A
21744                       000056D7            .18B:
21745 56D7           89EC                       mov	sp,bp
21746 56D9           5D                         pop	bp
21747 56DA           C3                         ret
21748                                           !BCC_EOS
21749                                           ! 2400  biosfn_get_cursor_pos(page,&dummy,&cursor);
21750                       000056DB            .18A:
21751                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21752 56DB           8D5E         F2            lea	bx,-$E[bp]
21753 56DE           53                         push	bx
21754                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21755 56DF           8D5E         F0            lea	bx,-$10[bp]
21756 56E2           53                         push	bx
21757                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21758 56E3           8A46         06            mov	al,6[bp]
21759 56E6           30E4                       xor	ah,ah
21760 56E8           50                         push	ax
21761                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21762 56E9           E8         EC73            call	_biosfn_get_cursor_pos
21763 56EC           83C4                   06  add	sp,*6
21764                                           !BCC_EOS
21765                                           ! 2401  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21766                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21767 56EF           8A46         F2            mov	al,-$E[bp]
21768                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21769 56F2           8846         FE            mov	-2[bp],al
21770                                           !BCC_EOS
21771                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21772 56F5           8B46         F2            mov	ax,-$E[bp]
21773 56F8           30C0                       xor	al,al
21774                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21775 56FA           88E0                       mov	al,ah
21776 56FC           30E4                       xor	ah,ah
21777                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21778 56FE           8846         FD            mov	-3[bp],al
21779                                           !BCC_EOS
21780                                           ! 2402  nbrows=read_byte(0x40,0x84)+1;
21781                                           ! Debug: list int = const $84 (used reg = )
21782 5701           B8                   0084  mov	ax,#$84
21783 5704           50                         push	ax
21784                                           ! Debug: list int = const $40 (used reg = )
21785 5705           B8                   0040  mov	ax,*$40
21786 5708           50                         push	ax
21787                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21788 5709           E8         2440            call	_read_byte
21789 570C           83C4                   04  add	sp,*4
21790                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21791 570F           30E4                       xor	ah,ah
21792                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21793 5711           40                         inc	ax
21794 5712           8946         F6            mov	-$A[bp],ax
21795                                           !BCC_EOS
21796                                           ! 2403  nbcols=read_word(0x40,0x4A);
21797                                           ! Debug: list int = const $4A (used reg = )
21798 5715           B8                   004A  mov	ax,*$4A
21799 5718           50                         push	ax
21800                                           ! Debug: list int = const $40 (used reg = )
21801 5719           B8                   0040  mov	ax,*$40
21802 571C           50                         push	ax
21803                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21804 571D           E8         243F            call	_read_word
21805 5720           83C4                   04  add	sp,*4
21806                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21807 5723           8946         F8            mov	-8[bp],ax
21808                                           !BCC_EOS
21809                                           ! 2404  if(vga_modes[line].class==0x00)
21810                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21811 5726           8A46         FB            mov	al,-5[bp]
21812 5729           30E4                       xor	ah,ah
21813 572B           B1                     03  mov	cl,*3
21814 572D           D3E0                       shl	ax,cl
21815 572F           89C3                       mov	bx,ax
21816 5731           81C3                 01C6  add	bx,#_vga_modes
21817                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21818 5735           8A47         01            mov	al,1[bx]
21819 5738           84C0                       test	al,al
21820 573A           75           6E            jne 	.18C
21821                       0000573C            .18D:
21822                                           ! 2405   {
21823                                           ! 2406    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21824                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21825 573C           8A46         FD            mov	al,-3[bp]
21826 573F           30E4                       xor	ah,ah
21827 5741           8B4E         F8            mov	cx,-8[bp]
21828 5744           F7E9                       imul	cx
21829                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21830                                           ! Debug: expression subtree swapping
21831 5746           0246         FE            add	al,-2[bp]
21832 5749           80D4                   00  adc	ah,*0
21833                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21834 574C           D1E0                       shl	ax,*1
21835 574E           50                         push	ax
21836                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21837 574F           8B46         F8            mov	ax,-8[bp]
21838 5752           8B4E         F6            mov	cx,-$A[bp]
21839 5755           F7E9                       imul	cx
21840                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21841 5757           D1E0                       shl	ax,*1
21842                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21843 5759           0C                     FF  or	al,#$FF
21844                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21845                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21846 575B           89C3                       mov	bx,ax
21847 575D           8A46         06            mov	al,6[bp]
21848 5760           30E4                       xor	ah,ah
21849 5762           93                         xchg	ax,bx
21850 5763           40                         inc	ax
21851 5764           89D9                       mov	cx,bx
21852 5766           F7E9                       imul	cx
21853                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21854 5768           0346         EE            add	ax,-$12[bp]
21855 576B           44                         inc	sp
21856 576C           44                         inc	sp
21857                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21858 576D           8946         F4            mov	-$C[bp],ax
21859                                           !BCC_EOS
21860                                           ! 2407    while(count-->0)
21861                                           ! 2408     {write_byte(vga_modes[line].sstart,address,car);
21862 5770           EB           29            jmp .18F
21863                       00005772            .190:
21864                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
21865 5772           8A46         04            mov	al,4[bp]
21866 5775           30E4                       xor	ah,ah
21867 5777           50                         push	ax
21868                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
21869 5778           FF76         F4            push	-$C[bp]
21870                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
21871 577B           8A46         FB            mov	al,-5[bp]
21872 577E           30E4                       xor	ah,ah
21873 5780           B1                     03  mov	cl,*3
21874 5782           D3E0                       shl	ax,cl
21875 5784           89C3                       mov	bx,ax
21876 5786           81C3                 01C6  add	bx,#_vga_modes
21877                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21878 578A           FF77         04            push	4[bx]
21879                                           ! Debug: func () void = write_byte+0 (used reg = )
21880 578D           E8         23E2            call	_write_byte
21881 5790           83C4                   06  add	sp,*6
21882                                           !BCC_EOS
21883                                           ! 2409      address+=2;
21884                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
21885 5793           8B46         F4            mov	ax,-$C[bp]
21886 5796           40                         inc	ax
21887 5797           40                         inc	ax
21888 5798           8946         F4            mov	-$C[bp],ax
21889                                           !BCC_EOS
21890                                           ! 2410     }
21891                                           ! 2411   }
21892                       0000579B            .18F:
21893                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21894 579B           8B46         0A            mov	ax,$A[bp]
21895 579E           48                         dec	ax
21896 579F           8946         0A            mov	$A[bp],ax
21897                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21898 57A2           3D                   FFFF  cmp	ax,*-1
21899 57A5           75           CB            jne	.190
21900                       000057A7            .191:
21901                       000057A7            .18E:
21902                                           ! 2412  else
21903                                           ! 2413   {
21904 57A7           E9         00F6            br 	.192
21905                       000057AA            .18C:
21906                                           ! 2414    cheight=video_param_table[line_to_vpti[line]].cheight;
21907                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21908 57AA           8A46         FB            mov	al,-5[bp]
21909 57AD           30E4                       xor	ah,ah
21910 57AF           89C3                       mov	bx,ax
21911                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21912 57B1           8A87       0246            mov	al,_line_to_vpti[bx]
21913 57B5           30E4                       xor	ah,ah
21914 57B7           B1                     06  mov	cl,*6
21915 57B9           D3E0                       shl	ax,cl
21916 57BB           89C3                       mov	bx,ax
21917 57BD           81C3                 025A  add	bx,#_video_param_table
21918                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21919 57C1           8A47         02            mov	al,2[bx]
21920 57C4           8846         FF            mov	-1[bp],al
21921                                           !BCC_EOS
21922                                           ! 2415    bpp=vga_modes[line].pixbits;
21923                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21924 57C7           8A46         FB            mov	al,-5[bp]
21925 57CA           30E4                       xor	ah,ah
21926 57CC           B1                     03  mov	cl,*3
21927 57CE           D3E0                       shl	ax,cl
21928 57D0           89C3                       mov	bx,ax
21929 57D2           81C3                 01C6  add	bx,#_vga_modes
21930                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21931 57D6           8A47         03            mov	al,3[bx]
21932 57D9           8846         FA            mov	-6[bp],al
21933                                           !BCC_EOS
21934                                           ! 2416    while((count-->0) && (xcurs<nbcols))
21935                                           ! 2417     {
21936 57DC           E9         00A8            br 	.194
21937                       000057DF            .195:
21938                                           ! 2418      switch(vga_modes[line].memmodel)
21939                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21940 57DF           8A46         FB            mov	al,-5[bp]
21941 57E2           30E4                       xor	ah,ah
21942 57E4           B1                     03  mov	cl,*3
21943 57E6           D3E0                       shl	ax,cl
21944 57E8           89C3                       mov	bx,ax
21945 57EA           81C3                 01C6  add	bx,#_vga_modes
21946 57EE           8A47         02            mov	al,2[bx]
21947                                           ! 2419       {
21948 57F1           EB           77            jmp .198
21949                                           ! 2420        case 0x04:
21950                                           ! 2421        case 0x03:
21951                       000057F3            .199:
21952                                           ! 2422          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
21953                       000057F3            .19A:
21954                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21955 57F3           8A46         FF            mov	al,-1[bp]
21956 57F6           30E4                       xor	ah,ah
21957 57F8           50                         push	ax
21958                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21959 57F9           FF76         F8            push	-8[bp]
21960                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21961 57FC           8A46         FD            mov	al,-3[bp]
21962 57FF           30E4                       xor	ah,ah
21963 5801           50                         push	ax
21964                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21965 5802           8A46         FE            mov	al,-2[bp]
21966 5805           30E4                       xor	ah,ah
21967 5807           50                         push	ax
21968                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21969 5808           8A46         08            mov	al,8[bp]
21970 580B           30E4                       xor	ah,ah
21971 580D           50                         push	ax
21972                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21973 580E           8A46         04            mov	al,4[bp]
21974 5811           30E4                       xor	ah,ah
21975 5813           50                         push	ax
21976                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21977 5814           E8         F84F            call	_write_gfx_char_pl4
21978 5817           83C4                   0C  add	sp,*$C
21979                                           !BCC_EOS
21980                                           ! 2423          break;
21981 581A           EB           64            jmp .196
21982                                           !BCC_EOS
21983                                           ! 2424        case 0x02:
21984                                           ! 2425          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21985                       0000581C            .19B:
21986                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21987 581C           8A46         FA            mov	al,-6[bp]
21988 581F           30E4                       xor	ah,ah
21989 5821           50                         push	ax
21990                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21991 5822           FF76         F8            push	-8[bp]
21992                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21993 5825           8A46         FD            mov	al,-3[bp]
21994 5828           30E4                       xor	ah,ah
21995 582A           50                         push	ax
21996                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21997 582B           8A46         FE            mov	al,-2[bp]
21998 582E           30E4                       xor	ah,ah
21999 5830           50                         push	ax
22000                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22001 5831           8A46         08            mov	al,8[bp]
22002 5834           30E4                       xor	ah,ah
22003 5836           50                         push	ax
22004                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22005 5837           8A46         04            mov	al,4[bp]
22006 583A           30E4                       xor	ah,ah
22007 583C           50                         push	ax
22008                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22009 583D           E8         F99B            call	_write_gfx_char_cga
22010 5840           83C4                   0C  add	sp,*$C
22011                                           !BCC_EOS
22012                                           ! 2426          break;
22013 5843           EB           3B            jmp .196
22014                                           !BCC_EOS
22015                                           ! 2427        case 0x05:
22016                                           ! 2428          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22017                       00005845            .19C:
22018                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22019 5845           FF76         F8            push	-8[bp]
22020                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22021 5848           8A46         FD            mov	al,-3[bp]
22022 584B           30E4                       xor	ah,ah
22023 584D           50                         push	ax
22024                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22025 584E           8A46         FE            mov	al,-2[bp]
22026 5851           30E4                       xor	ah,ah
22027 5853           50                         push	ax
22028                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22029 5854           8A46         08            mov	al,8[bp]
22030 5857           30E4                       xor	ah,ah
22031 5859           50                         push	ax
22032                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22033 585A           8A46         04            mov	al,4[bp]
22034 585D           30E4                       xor	ah,ah
22035 585F           50                         push	ax
22036                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22037 5860           E8         FB7E            call	_write_gfx_char_lin
22038 5863           83C4                   0A  add	sp,*$A
22039                                           !BCC_EOS
22040                                           ! 2429          break;
22041 5866           EB           18            jmp .196
22042                                           !BCC_EOS
22043                                           ! 2430       }
22044                                           ! 2431      xcurs++;
22045 5868           EB           16            jmp .196
22046                       0000586A            .198:
22047 586A           2C                     02  sub	al,*2
22048 586C           74           AE            je 	.19B
22049 586E           2C                     01  sub	al,*1
22050 5870   7503    E9         FF7E            beq 	.19A
22051 5875           2C                     01  sub	al,*1
22052 5877   7503    E9         FF77            beq 	.199
22053 587C           2C                     01  sub	al,*1
22054 587E           74           C5            je 	.19C
22055                       00005880            .196:
22056                       FFFFFFEE            ..FFF9	=	-$12
22057                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22058 5880           8A46         FE            mov	al,-2[bp]
22059 5883           40                         inc	ax
22060 5884           8846         FE            mov	-2[bp],al
22061                                           !BCC_EOS
22062                                           ! 2432     }
22063                                           ! 2433   }
22064                       00005887            .194:
22065                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22066 5887           8B46         0A            mov	ax,$A[bp]
22067 588A           48                         dec	ax
22068 588B           8946         0A            mov	$A[bp],ax
22069                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22070 588E           3D                   FFFF  cmp	ax,*-1
22071 5891           74           0D            je  	.19D
22072                       00005893            .19E:
22073                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22074 5893           8A46         FE            mov	al,-2[bp]
22075 5896           30E4                       xor	ah,ah
22076 5898           3B46         F8            cmp	ax,-8[bp]
22077 589B   7303    E9         FF3F            blo 	.195
22078                       000058A0            .19D:
22079                       000058A0            .193:
22080                                           ! 2434 }
22081                       000058A0            .192:
22082 58A0           89EC                       mov	sp,bp
22083 58A2           5D                         pop	bp
22084 58A3           C3                         ret
22085                                           ! 2435 #asm
22086                                           !BCC_ASM
22087                       00000008            _biosfn_write_char_only.count	set	8
22088                       00000006            _biosfn_write_char_only.attr	set	6
22089                       00000004            _biosfn_write_char_only.page	set	4
22090                       00000002            _biosfn_write_char_only.car	set	2
22091                       000058A4            biosfn_group_0B:
22092 58A4           80FF                   00    cmp bh, #0x00
22093 58A7           74           06              je biosfn_set_border_color
22094 58A9           80FF                   01    cmp bh, #0x01
22095 58AC           74           40              je biosfn_set_palette
22096 58AE           C3                           ret
22097                       000058AF            biosfn_set_border_color:
22098 58AF           50                           push ax
22099 58B0           53                           push bx
22100 58B1           51                           push cx
22101 58B2           52                           push dx
22102 58B3           BA                   03DA    mov dx, # 0x3da
22103 58B6           EC                           in al, dx
22104 58B7           BA                   03C0    mov dx, # 0x3c0
22105 58BA           B0                     00    mov al, #0x00
22106 58BC           EE                           out dx, al
22107 58BD           88D8                         mov al, bl
22108 58BF           24                     0F    and al, #0x0f
22109 58C1           A8                     08    test al, #0x08
22110 58C3           74           02              jz set_low_border
22111 58C5           04                     08    add al, #0x08
22112                       000058C7            set_low_border:
22113 58C7           EE                           out dx, al
22114 58C8           B1                     01    mov cl, #0x01
22115 58CA           80E3                   10    and bl, #0x10
22116                       000058CD            set_intensity_loop:
22117 58CD           BA                   03C0    mov dx, # 0x3c0
22118 58D0           88C8                         mov al, cl
22119 58D2           EE                           out dx, al
22120 58D3           BA                   03C1    mov dx, # 0x3c1
22121 58D6           EC                           in al, dx
22122 58D7           24                     EF    and al, #0xef
22123 58D9           08D8                         or al, bl
22124 58DB           BA                   03C0    mov dx, # 0x3c0
22125 58DE           EE                           out dx, al
22126 58DF           FEC1                         inc cl
22127 58E1           80F9                   04    cmp cl, #0x04
22128 58E4           75           E7              jne set_intensity_loop
22129 58E6           B0                     20    mov al, #0x20
22130 58E8           EE                           out dx, al
22131 58E9           5A                           pop dx
22132 58EA           59                           pop cx
22133 58EB           5B                           pop bx
22134 58EC           58                           pop ax
22135 58ED           C3                           ret
22136                       000058EE            biosfn_set_palette:
22137 58EE           50                           push ax
22138 58EF           53                           push bx
22139 58F0           51                           push cx
22140 58F1           52                           push dx
22141 58F2           BA                   03DA    mov dx, # 0x3da
22142 58F5           EC                           in al, dx
22143 58F6           B1                     01    mov cl, #0x01
22144 58F8           80E3                   01    and bl, #0x01
22145                       000058FB            set_cga_palette_loop:
22146 58FB           BA                   03C0    mov dx, # 0x3c0
22147 58FE           88C8                         mov al, cl
22148 5900           EE                           out dx, al
22149 5901           BA                   03C1    mov dx, # 0x3c1
22150 5904           EC                           in al, dx
22151 5905           24                     FE    and al, #0xfe
22152 5907           08D8                         or al, bl
22153 5909           BA                   03C0    mov dx, # 0x3c0
22154 590C           EE                           out dx, al
22155 590D           FEC1                         inc cl
22156 590F           80F9                   04    cmp cl, #0x04
22157 5912           75           E7              jne set_cga_palette_loop
22158 5914           B0                     20    mov al, #0x20
22159 5916           EE                           out dx, al
22160 5917           5A                           pop dx
22161 5918           59                           pop cx
22162 5919           5B                           pop bx
22163 591A           58                           pop ax
22164 591B           C3                           ret
22165                                           ! 2510 endasm
22166                                           !BCC_ENDASM
22167                                           ! 2511 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22168                                           ! Register BX used in function biosfn_write_char_only
22169                       0000591C            _biosfn_write_pixel:
22170                                           !BCC_EOS
22171                                           !BCC_EOS
22172                                           !BCC_EOS
22173                                           !BCC_EOS
22174                                           ! 2512 {
22175                                           ! 2513  Bit8u mode,line,mask,attr,data;
22176                                           !BCC_EOS
22177                                           ! 2514  Bit16u addr;
22178                                           !BCC_EOS
22179                                           ! 2515  mode=read_byte(0x40,0x49);
22180 591C           55                         push	bp
22181 591D           89E5                       mov	bp,sp
22182 591F           83C4                   F8  add	sp,*-8
22183                                           ! Debug: list int = const $49 (used reg = )
22184 5922           B8                   0049  mov	ax,*$49
22185 5925           50                         push	ax
22186                                           ! Debug: list int = const $40 (used reg = )
22187 5926           B8                   0040  mov	ax,*$40
22188 5929           50                         push	ax
22189                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22190 592A           E8         221F            call	_read_byte
22191 592D           83C4                   04  add	sp,*4
22192                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22193 5930           8846         FF            mov	-1[bp],al
22194                                           !BCC_EOS
22195                                           ! 2516  line=find_vga_entry(mode);
22196                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22197 5933           8A46         FF            mov	al,-1[bp]
22198 5936           30E4                       xor	ah,ah
22199 5938           50                         push	ax
22200                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22201 5939           E8         2124            call	_find_vga_entry
22202 593C           44                         inc	sp
22203 593D           44                         inc	sp
22204                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22205 593E           8846         FE            mov	-2[bp],al
22206                                           !BCC_EOS
22207                                           ! 2517  if(line==0xFF)return;
22208                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22209 5941           8A46         FE            mov	al,-2[bp]
22210 5944           3C                     FF  cmp	al,#$FF
22211 5946           75           04            jne 	.19F
22212                       00005948            .1A0:
22213 5948           89EC                       mov	sp,bp
22214 594A           5D                         pop	bp
22215 594B           C3                         ret
22216                                           !BCC_EOS
22217                                           ! 2518  if(vga_modes[line].class==0x00)return;
22218                       0000594C            .19F:
22219                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22220 594C           8A46         FE            mov	al,-2[bp]
22221 594F           30E4                       xor	ah,ah
22222 5951           B1                     03  mov	cl,*3
22223 5953           D3E0                       shl	ax,cl
22224 5955           89C3                       mov	bx,ax
22225 5957           81C3                 01C6  add	bx,#_vga_modes
22226                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22227 595B           8A47         01            mov	al,1[bx]
22228 595E           84C0                       test	al,al
22229 5960           75           04            jne 	.1A1
22230                       00005962            .1A2:
22231 5962           89EC                       mov	sp,bp
22232 5964           5D                         pop	bp
22233 5965           C3                         ret
22234                                           !BCC_EOS
22235                                           ! 2519  switch(vga_modes[line].memmodel)
22236                       00005966            .1A1:
22237                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22238 5966           8A46         FE            mov	al,-2[bp]
22239 5969           30E4                       xor	ah,ah
22240 596B           B1                     03  mov	cl,*3
22241 596D           D3E0                       shl	ax,cl
22242 596F           89C3                       mov	bx,ax
22243 5971           81C3                 01C6  add	bx,#_vga_modes
22244 5975           8A47         02            mov	al,2[bx]
22245                                           ! 2520   {
22246 5978           E9         0223            br 	.1A5
22247                                           ! 2521    case 0x04:
22248                                           ! 2522    case 0x03:
22249                       0000597B            .1A6:
22250                                           ! 2523      addr = CX/8+DX*read_word(0x40,0x4A);
22251                       0000597B            .1A7:
22252                                           ! Debug: list int = const $4A (used reg = )
22253 597B           B8                   004A  mov	ax,*$4A
22254 597E           50                         push	ax
22255                                           ! Debug: list int = const $40 (used reg = )
22256 597F           B8                   0040  mov	ax,*$40
22257 5982           50                         push	ax
22258                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22259 5983           E8         21D9            call	_read_word
22260 5986           83C4                   04  add	sp,*4
22261                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22262                                           ! Debug: expression subtree swapping
22263 5989           8B4E         0A            mov	cx,$A[bp]
22264 598C           F7E9                       imul	cx
22265 598E           50                         push	ax
22266                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22267 598F           8B46         08            mov	ax,8[bp]
22268 5992           B1                     03  mov	cl,*3
22269 5994           D3E8                       shr	ax,cl
22270                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22271 5996           0346         F6            add	ax,0+..FFF8[bp]
22272 5999           44                         inc	sp
22273 599A           44                         inc	sp
22274                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22275 599B           8946         F8            mov	-8[bp],ax
22276                                           !BCC_EOS
22277                                           ! 2524      mask = 0x80 >> (CX & 0x07);
22278                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22279 599E           8A46         08            mov	al,8[bp]
22280 59A1           24                     07  and	al,*7
22281                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22282 59A3           30E4                       xor	ah,ah
22283 59A5           89C3                       mov	bx,ax
22284 59A7           B8                   0080  mov	ax,#$80
22285 59AA           89D9                       mov	cx,bx
22286 59AC           D3F8                       sar	ax,cl
22287                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22288 59AE           8846         FD            mov	-3[bp],al
22289                                           !BCC_EOS
22290                                           ! 2525      outw(0x3ce, (mask << 8) | 0x08);
22291                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22292 59B1           8A46         FD            mov	al,-3[bp]
22293 59B4           30E4                       xor	ah,ah
22294 59B6           88C4                       mov	ah,al
22295 59B8           30C0                       xor	al,al
22296                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22297 59BA           0C                     08  or	al,*8
22298                                           ! Debug: list unsigned int = ax+0 (used reg = )
22299 59BC           50                         push	ax
22300                                           ! Debug: list int = const $3CE (used reg = )
22301 59BD           B8                   03CE  mov	ax,#$3CE
22302 59C0           50                         push	ax
22303                                           ! Debug: func () void = outw+0 (used reg = )
22304 59C1           E8         2204            call	_outw
22305 59C4           83C4                   04  add	sp,*4
22306                                           !BCC_EOS
22307                                           ! 2526      outw(0x3ce, 0x0205);
22308                                           ! Debug: list int = const $205 (used reg = )
22309 59C7           B8                   0205  mov	ax,#$205
22310 59CA           50                         push	ax
22311                                           ! Debug: list int = const $3CE (used reg = )
22312 59CB           B8                   03CE  mov	ax,#$3CE
22313 59CE           50                         push	ax
22314                                           ! Debug: func () void = outw+0 (used reg = )
22315 59CF           E8         21F6            call	_outw
22316 59D2           83C4                   04  add	sp,*4
22317                                           !BCC_EOS
22318                                           ! 2527      data = read_byte(0xa000,addr);
22319                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22320 59D5           FF76         F8            push	-8[bp]
22321                                           ! Debug: list unsigned int = const $A000 (used reg = )
22322 59D8           B8                   A000  mov	ax,#$A000
22323 59DB           50                         push	ax
22324                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22325 59DC           E8         216D            call	_read_byte
22326 59DF           83C4                   04  add	sp,*4
22327                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22328 59E2           8846         FB            mov	-5[bp],al
22329                                           !BCC_EOS
22330                                           ! 2528      if (AL & 0x80)
22331                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22332 59E5           8A46         06            mov	al,6[bp]
22333 59E8           24                     80  and	al,#$80
22334 59EA           84C0                       test	al,al
22335 59EC           74           0E            je  	.1A8
22336                       000059EE            .1A9:
22337                                           ! 2529       {
22338                                           ! 2530        outw(0x3ce, 0x1803);
22339                                           ! Debug: list int = const $1803 (used reg = )
22340 59EE           B8                   1803  mov	ax,#$1803
22341 59F1           50                         push	ax
22342                                           ! Debug: list int = const $3CE (used reg = )
22343 59F2           B8                   03CE  mov	ax,#$3CE
22344 59F5           50                         push	ax
22345                                           ! Debug: func () void = outw+0 (used reg = )
22346 59F6           E8         21CF            call	_outw
22347 59F9           83C4                   04  add	sp,*4
22348                                           !BCC_EOS
22349                                           ! 2531       }
22350                                           ! 2532      write_byte(0xa000,addr,AL);
22351                       000059FC            .1A8:
22352                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22353 59FC           8A46         06            mov	al,6[bp]
22354 59FF           30E4                       xor	ah,ah
22355 5A01           50                         push	ax
22356                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22357 5A02           FF76         F8            push	-8[bp]
22358                                           ! Debug: list unsigned int = const $A000 (used reg = )
22359 5A05           B8                   A000  mov	ax,#$A000
22360 5A08           50                         push	ax
22361                                           ! Debug: func () void = write_byte+0 (used reg = )
22362 5A09           E8         2166            call	_write_byte
22363 5A0C           83C4                   06  add	sp,*6
22364                                           !BCC_EOS
22365                                           ! 2533 #asm
22366                                           !BCC_EOS
22367                                           !BCC_ASM
22368                       0000000C            _biosfn_write_pixel.BH	set	$C
22369                       00000004            .biosfn_write_pixel.BH	set	4
22370                       00000010            _biosfn_write_pixel.CX	set	$10
22371                       00000008            .biosfn_write_pixel.CX	set	8
22372                       00000006            _biosfn_write_pixel.line	set	6
22373                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22374                       0000000E            _biosfn_write_pixel.AL	set	$E
22375                       00000006            .biosfn_write_pixel.AL	set	6
22376                       00000003            _biosfn_write_pixel.data	set	3
22377                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22378                       00000012            _biosfn_write_pixel.DX	set	$12
22379                       0000000A            .biosfn_write_pixel.DX	set	$A
22380                       00000005            _biosfn_write_pixel.mask	set	5
22381                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22382                       00000004            _biosfn_write_pixel.attr	set	4
22383                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22384                       00000007            _biosfn_write_pixel.mode	set	7
22385                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22386                       00000000            _biosfn_write_pixel.addr	set	0
22387                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22388 5A0F           BA                   03CE       mov dx, # 0x3ce
22389 5A12           B8                   FF08       mov ax, #0xff08
22390 5A15           EF                              out dx, ax
22391 5A16           B8                   0005       mov ax, #0x0005
22392 5A19           EF                              out dx, ax
22393 5A1A           B8                   0003       mov ax, #0x0003
22394 5A1D           EF                              out dx, ax
22395                                           ! 2541 endasm
22396                                           !BCC_ENDASM
22397                                           !BCC_EOS
22398                                           ! 2542      break;
22399 5A1E           E9         0196            br 	.1A3
22400                                           !BCC_EOS
22401                                           ! 2543    case 0x02:
22402                                           ! 2544      if(vga_modes[line].pixbits==2)
22403                       00005A21            .1AA:
22404                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22405 5A21           8A46         FE            mov	al,-2[bp]
22406 5A24           30E4                       xor	ah,ah
22407 5A26           B1                     03  mov	cl,*3
22408 5A28           D3E0                       shl	ax,cl
22409 5A2A           89C3                       mov	bx,ax
22410 5A2C           81C3                 01C6  add	bx,#_vga_modes
22411                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22412 5A30           8A47         03            mov	al,3[bx]
22413 5A33           3C                     02  cmp	al,*2
22414 5A35           75           1C            jne 	.1AB
22415                       00005A37            .1AC:
22416                                           ! 2545       {
22417                                           ! 2546        addr=(CX>>2)+(DX>>1)*80;
22418                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22419 5A37           8B46         0A            mov	ax,$A[bp]
22420 5A3A           D1E8                       shr	ax,*1
22421                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22422 5A3C           B9                   0050  mov	cx,*$50
22423 5A3F           F7E9                       imul	cx
22424 5A41           50                         push	ax
22425                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22426 5A42           8B46         08            mov	ax,8[bp]
22427 5A45           D1E8                       shr	ax,*1
22428 5A47           D1E8                       shr	ax,*1
22429                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22430 5A49           0346         F6            add	ax,0+..FFF8[bp]
22431 5A4C           44                         inc	sp
22432 5A4D           44                         inc	sp
22433                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22434 5A4E           8946         F8            mov	-8[bp],ax
22435                                           !BCC_EOS
22436                                           ! 2547       }
22437                                           ! 2548      else
22438                                           ! 2549       {
22439 5A51           EB           1A            jmp .1AD
22440                       00005A53            .1AB:
22441                                           ! 2550        addr=(CX>>3)+(DX>>1)*80;
22442                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22443 5A53           8B46         0A            mov	ax,$A[bp]
22444 5A56           D1E8                       shr	ax,*1
22445                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22446 5A58           B9                   0050  mov	cx,*$50
22447 5A5B           F7E9                       imul	cx
22448 5A5D           50                         push	ax
22449                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22450 5A5E           8B46         08            mov	ax,8[bp]
22451 5A61           B1                     03  mov	cl,*3
22452 5A63           D3E8                       shr	ax,cl
22453                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22454 5A65           0346         F6            add	ax,0+..FFF8[bp]
22455 5A68           44                         inc	sp
22456 5A69           44                         inc	sp
22457                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22458 5A6A           8946         F8            mov	-8[bp],ax
22459                                           !BCC_EOS
22460                                           ! 2551       }
22461                                           ! 2552      if (DX & 1) addr += 0x2000;
22462                       00005A6D            .1AD:
22463                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22464 5A6D           8A46         0A            mov	al,$A[bp]
22465 5A70           24                     01  and	al,*1
22466 5A72           84C0                       test	al,al
22467 5A74           74           09            je  	.1AE
22468                       00005A76            .1AF:
22469                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22470 5A76           8B46         F8            mov	ax,-8[bp]
22471 5A79           05                   2000  add	ax,#$2000
22472 5A7C           8946         F8            mov	-8[bp],ax
22473                                           !BCC_EOS
22474                                           ! 2553      data = read_byte(0xb800,addr);
22475                       00005A7F            .1AE:
22476                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22477 5A7F           FF76         F8            push	-8[bp]
22478                                           ! Debug: list unsigned int = const $B800 (used reg = )
22479 5A82           B8                   B800  mov	ax,#$B800
22480 5A85           50                         push	ax
22481                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22482 5A86           E8         20C3            call	_read_byte
22483 5A89           83C4                   04  add	sp,*4
22484                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22485 5A8C           8846         FB            mov	-5[bp],al
22486                                           !BCC_EOS
22487                                           ! 2554      if(vga_modes[line].pixbits==2)
22488                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22489 5A8F           8A46         FE            mov	al,-2[bp]
22490 5A92           30E4                       xor	ah,ah
22491 5A94           B1                     03  mov	cl,*3
22492 5A96           D3E0                       shl	ax,cl
22493 5A98           89C3                       mov	bx,ax
22494 5A9A           81C3                 01C6  add	bx,#_vga_modes
22495                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22496 5A9E           8A47         03            mov	al,3[bx]
22497 5AA1           3C                     02  cmp	al,*2
22498 5AA3           75           46            jne 	.1B0
22499                       00005AA5            .1B1:
22500                                           ! 2555       {
22501                                           ! 2556        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22502                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22503 5AA5           8A46         08            mov	al,8[bp]
22504 5AA8           24                     03  and	al,*3
22505                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22506 5AAA           50                         push	ax
22507 5AAB           B8                   0003  mov	ax,*3
22508 5AAE           2A46         F6            sub	al,0+..FFF8[bp]
22509 5AB1           80DC                   00  sbb	ah,*0
22510 5AB4           44                         inc	sp
22511 5AB5           44                         inc	sp
22512                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22513 5AB6           D1E0                       shl	ax,*1
22514 5AB8           50                         push	ax
22515                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22516 5AB9           8A46         06            mov	al,6[bp]
22517 5ABC           24                     03  and	al,*3
22518                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22519 5ABE           30E4                       xor	ah,ah
22520 5AC0           8B4E         F6            mov	cx,0+..FFF8[bp]
22521 5AC3           D3E0                       shl	ax,cl
22522 5AC5           44                         inc	sp
22523 5AC6           44                         inc	sp
22524                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22525 5AC7           8846         FC            mov	-4[bp],al
22526                                           !BCC_EOS
22527                                           ! 2557        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
22528                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22529 5ACA           8A46         08            mov	al,8[bp]
22530 5ACD           24                     03  and	al,*3
22531                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22532 5ACF           50                         push	ax
22533 5AD0           B8                   0003  mov	ax,*3
22534 5AD3           2A46         F6            sub	al,0+..FFF8[bp]
22535 5AD6           80DC                   00  sbb	ah,*0
22536 5AD9           44                         inc	sp
22537 5ADA           44                         inc	sp
22538                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22539 5ADB           D1E0                       shl	ax,*1
22540                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
22541 5ADD           89C3                       mov	bx,ax
22542 5ADF           B8                   0003  mov	ax,*3
22543 5AE2           89D9                       mov	cx,bx
22544 5AE4           D3E0                       shl	ax,cl
22545                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22546 5AE6           8846         FD            mov	-3[bp],al
22547                                           !BCC_EOS
22548                                           ! 2558       }
22549                                           ! 2559      else
22550                                           ! 2560       {
22551 5AE9           EB           40            jmp .1B2
22552                       00005AEB            .1B0:
22553                                           ! 2561        attr = (AL & 0x01) << (7 - (CX & 0x07));
22554                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22555 5AEB           8A46         08            mov	al,8[bp]
22556 5AEE           24                     07  and	al,*7
22557                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22558 5AF0           50                         push	ax
22559 5AF1           B8                   0007  mov	ax,*7
22560 5AF4           2A46         F6            sub	al,0+..FFF8[bp]
22561 5AF7           80DC                   00  sbb	ah,*0
22562 5AFA           44                         inc	sp
22563 5AFB           44                         inc	sp
22564 5AFC           50                         push	ax
22565                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
22566 5AFD           8A46         06            mov	al,6[bp]
22567 5B00           24                     01  and	al,*1
22568                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22569 5B02           30E4                       xor	ah,ah
22570 5B04           8B4E         F6            mov	cx,0+..FFF8[bp]
22571 5B07           D3E0                       shl	ax,cl
22572 5B09           44                         inc	sp
22573 5B0A           44                         inc	sp
22574                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22575 5B0B           8846         FC            mov	-4[bp],al
22576                                           !BCC_EOS
22577                                           ! 2562        mask = 0x01 << (7 - (CX & 0x07));
22578                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22579 5B0E           8A46         08            mov	al,8[bp]
22580 5B11           24                     07  and	al,*7
22581                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22582 5B13           50                         push	ax
22583 5B14           B8                   0007  mov	ax,*7
22584 5B17           2A46         F6            sub	al,0+..FFF8[bp]
22585 5B1A           80DC                   00  sbb	ah,*0
22586 5B1D           44                         inc	sp
22587 5B1E           44                         inc	sp
22588                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
22589 5B1F           89C3                       mov	bx,ax
22590 5B21           B8                   0001  mov	ax,*1
22591 5B24           89D9                       mov	cx,bx
22592 5B26           D3E0                       shl	ax,cl
22593                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22594 5B28           8846         FD            mov	-3[bp],al
22595                                           !BCC_EOS
22596                                           ! 2563       }
22597                                           ! 2564      if (AL & 0x80)
22598                       00005B2B            .1B2:
22599                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22600 5B2B           8A46         06            mov	al,6[bp]
22601 5B2E           24                     80  and	al,#$80
22602 5B30           84C0                       test	al,al
22603 5B32           74           0B            je  	.1B3
22604                       00005B34            .1B4:
22605                                           ! 2565       {
22606                                           ! 2566        data ^= attr;
22607                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22608 5B34           8A46         FB            mov	al,-5[bp]
22609 5B37           3246         FC            xor	al,-4[bp]
22610 5B3A           8846         FB            mov	-5[bp],al
22611                                           !BCC_EOS
22612                                           ! 2567       }
22613                                           ! 2568      else
22614                                           ! 2569       {
22615 5B3D           EB           16            jmp .1B5
22616                       00005B3F            .1B3:
22617                                           ! 2570        data &= ~mask;
22618                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
22619 5B3F           8A46         FD            mov	al,-3[bp]
22620 5B42           30E4                       xor	ah,ah
22621 5B44           F7D0                       not	ax
22622                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
22623 5B46           2246         FB            and	al,-5[bp]
22624 5B49           8846         FB            mov	-5[bp],al
22625                                           !BCC_EOS
22626                                           ! 2571        data |= attr;
22627                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22628 5B4C           8A46         FB            mov	al,-5[bp]
22629 5B4F           0A46         FC            or	al,-4[bp]
22630 5B52           8846         FB            mov	-5[bp],al
22631                                           !BCC_EOS
22632                                           ! 2572       }
22633                                           ! 2573      write_byte(0xb800,addr,data);
22634                       00005B55            .1B5:
22635                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
22636 5B55           8A46         FB            mov	al,-5[bp]
22637 5B58           30E4                       xor	ah,ah
22638 5B5A           50                         push	ax
22639                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22640 5B5B           FF76         F8            push	-8[bp]
22641                                           ! Debug: list unsigned int = const $B800 (used reg = )
22642 5B5E           B8                   B800  mov	ax,#$B800
22643 5B61           50                         push	ax
22644                                           ! Debug: func () void = write_byte+0 (used reg = )
22645 5B62           E8         200D            call	_write_byte
22646 5B65           83C4                   06  add	sp,*6
22647                                           !BCC_EOS
22648                                           ! 2574      break;
22649 5B68           EB           4D            jmp .1A3
22650                                           !BCC_EOS
22651                                           ! 2575    case 0x05:
22652                                           ! 2576      addr=CX+DX*(read_word(0x40,0x4A)*8);
22653                       00005B6A            .1B6:
22654                                           ! Debug: list int = const $4A (used reg = )
22655 5B6A           B8                   004A  mov	ax,*$4A
22656 5B6D           50                         push	ax
22657                                           ! Debug: list int = const $40 (used reg = )
22658 5B6E           B8                   0040  mov	ax,*$40
22659 5B71           50                         push	ax
22660                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22661 5B72           E8         1FEA            call	_read_word
22662 5B75           83C4                   04  add	sp,*4
22663                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
22664 5B78           B1                     03  mov	cl,*3
22665 5B7A           D3E0                       shl	ax,cl
22666                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22667                                           ! Debug: expression subtree swapping
22668 5B7C           8B4E         0A            mov	cx,$A[bp]
22669 5B7F           F7E9                       imul	cx
22670                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
22671                                           ! Debug: expression subtree swapping
22672 5B81           0346         08            add	ax,8[bp]
22673                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22674 5B84           8946         F8            mov	-8[bp],ax
22675                                           !BCC_EOS
22676                                           ! 2577      write_byte(0xa000,addr,AL);
22677                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22678 5B87           8A46         06            mov	al,6[bp]
22679 5B8A           30E4                       xor	ah,ah
22680 5B8C           50                         push	ax
22681                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22682 5B8D           FF76         F8            push	-8[bp]
22683                                           ! Debug: list unsigned int = const $A000 (used reg = )
22684 5B90           B8                   A000  mov	ax,#$A000
22685 5B93           50                         push	ax
22686                                           ! Debug: func () void = write_byte+0 (used reg = )
22687 5B94           E8         1FDB            call	_write_byte
22688 5B97           83C4                   06  add	sp,*6
22689                                           !BCC_EOS
22690                                           ! 2578      break;
22691 5B9A           EB           1B            jmp .1A3
22692                                           !BCC_EOS
22693                                           ! 2579   }
22694                                           ! 2580 }
22695 5B9C           EB           19            jmp .1A3
22696                       00005B9E            .1A5:
22697 5B9E           2C                     02  sub	al,*2
22698 5BA0   7503    E9         FE7C            beq 	.1AA
22699 5BA5           2C                     01  sub	al,*1
22700 5BA7   7503    E9         FDCF            beq 	.1A7
22701 5BAC           2C                     01  sub	al,*1
22702 5BAE   7503    E9         FDC8            beq 	.1A6
22703 5BB3           2C                     01  sub	al,*1
22704 5BB5           74           B3            je 	.1B6
22705                       00005BB7            .1A3:
22706                       FFFFFFF6            ..FFF8	=	-$A
22707 5BB7           89EC                       mov	sp,bp
22708 5BB9           5D                         pop	bp
22709 5BBA           C3                         ret
22710                                           ! 2581 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
22711                                           ! Register BX used in function biosfn_write_pixel
22712                       00005BBB            _biosfn_read_pixel:
22713                                           !BCC_EOS
22714                                           !BCC_EOS
22715                                           !BCC_EOS
22716                                           !BCC_EOS
22717                                           ! 2582 {
22718                                           ! 2583  Bit8u mode,line,mask,attr,data,i;
22719                                           !BCC_EOS
22720                                           ! 2584  B
22721                                           ! 2584 it16u addr;
22722                                           !BCC_EOS
22723                                           ! 2585  Bit16u ss=get_SS();
22724 5BBB           55                         push	bp
22725 5BBC           89E5                       mov	bp,sp
22726 5BBE           83C4                   F6  add	sp,*-$A
22727                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
22728 5BC1           E8         2014            call	_get_SS
22729                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
22730 5BC4           8946         F6            mov	-$A[bp],ax
22731                                           !BCC_EOS
22732                                           ! 2586  mode=read_byte(0x40,0x49);
22733                                           ! Debug: list int = const $49 (used reg = )
22734 5BC7           B8                   0049  mov	ax,*$49
22735 5BCA           50                         push	ax
22736                                           ! Debug: list int = const $40 (used reg = )
22737 5BCB           B8                   0040  mov	ax,*$40
22738 5BCE           50                         push	ax
22739                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22740 5BCF           E8         1F7A            call	_read_byte
22741 5BD2           83C4                   04  add	sp,*4
22742                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
22743 5BD5           8846         FF            mov	-1[bp],al
22744                                           !BCC_EOS
22745                                           ! 2587  line=find_vga_entry(mode);
22746                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
22747 5BD8           8A46         FF            mov	al,-1[bp]
22748 5BDB           30E4                       xor	ah,ah
22749 5BDD           50                         push	ax
22750                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22751 5BDE           E8         1E7F            call	_find_vga_entry
22752 5BE1           44                         inc	sp
22753 5BE2           44                         inc	sp
22754                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
22755 5BE3           8846         FE            mov	-2[bp],al
22756                                           !BCC_EOS
22757                                           ! 2588  if(line==0xFF)return;
22758                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
22759 5BE6           8A46         FE            mov	al,-2[bp]
22760 5BE9           3C                     FF  cmp	al,#$FF
22761 5BEB           75           04            jne 	.1B7
22762                       00005BED            .1B8:
22763 5BED           89EC                       mov	sp,bp
22764 5BEF           5D                         pop	bp
22765 5BF0           C3                         ret
22766                                           !BCC_EOS
22767                                           ! 2589  if(vga_modes[line].class==0x00)return;
22768                       00005BF1            .1B7:
22769                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22770 5BF1           8A46         FE            mov	al,-2[bp]
22771 5BF4           30E4                       xor	ah,ah
22772 5BF6           B1                     03  mov	cl,*3
22773 5BF8           D3E0                       shl	ax,cl
22774 5BFA           89C3                       mov	bx,ax
22775 5BFC           81C3                 01C6  add	bx,#_vga_modes
22776                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22777 5C00           8A47         01            mov	al,1[bx]
22778 5C03           84C0                       test	al,al
22779 5C05           75           04            jne 	.1B9
22780                       00005C07            .1BA:
22781 5C07           89EC                       mov	sp,bp
22782 5C09           5D                         pop	bp
22783 5C0A           C3                         ret
22784                                           !BCC_EOS
22785                                           ! 2590  switch(vga_modes[line].memmodel)
22786                       00005C0B            .1B9:
22787                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22788 5C0B           8A46         FE            mov	al,-2[bp]
22789 5C0E           30E4                       xor	ah,ah
22790 5C10           B1                     03  mov	cl,*3
22791 5C12           D3E0                       shl	ax,cl
22792 5C14           89C3                       mov	bx,ax
22793 5C16           81C3                 01C6  add	bx,#_vga_modes
22794 5C1A           8A47         02            mov	al,2[bx]
22795                                           ! 2591   {
22796 5C1D           E9         0167            br 	.1BD
22797                                           ! 2592    case 0x04:
22798                                           ! 2593    case 0x03:
22799                       00005C20            .1BE:
22800                                           ! 2594      addr = CX/8+DX*read_word(0x40,0x4A);
22801                       00005C20            .1BF:
22802                                           ! Debug: list int = const $4A (used reg = )
22803 5C20           B8                   004A  mov	ax,*$4A
22804 5C23           50                         push	ax
22805                                           ! Debug: list int = const $40 (used reg = )
22806 5C24           B8                   0040  mov	ax,*$40
22807 5C27           50                         push	ax
22808                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22809 5C28           E8         1F34            call	_read_word
22810 5C2B           83C4                   04  add	sp,*4
22811                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
22812                                           ! Debug: expression subtree swapping
22813 5C2E           8B4E         08            mov	cx,8[bp]
22814 5C31           F7E9                       imul	cx
22815 5C33           50                         push	ax
22816                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
22817 5C34           8B46         06            mov	ax,6[bp]
22818 5C37           B1                     03  mov	cl,*3
22819 5C39           D3E8                       shr	ax,cl
22820                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22821 5C3B           0346         F4            add	ax,0+..FFF7[bp]
22822 5C3E           44                         inc	sp
22823 5C3F           44                         inc	sp
22824                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22825 5C40           8946         F8            mov	-8[bp],ax
22826                                           !BCC_EOS
22827                                           ! 2595      mask = 0x80 >> (CX & 0x07);
22828                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
22829 5C43           8A46         06            mov	al,6[bp]
22830 5C46           24                     07  and	al,*7
22831                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22832 5C48           30E4                       xor	ah,ah
22833 5C4A           89C3                       mov	bx,ax
22834 5C4C           B8                   0080  mov	ax,#$80
22835 5C4F           89D9                       mov	cx,bx
22836 5C51           D3F8                       sar	ax,cl
22837                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
22838 5C53           8846         FD            mov	-3[bp],al
22839                                           !BCC_EOS
22840                                           ! 2596      attr = 0x00;
22841                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
22842 5C56           30C0                       xor	al,al
22843 5C58           8846         FC            mov	-4[bp],al
22844                                           !BCC_EOS
22845                                           ! 2597      for(i=0;i<4;i++)
22846                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
22847 5C5B           30C0                       xor	al,al
22848 5C5D           8846         FA            mov	-6[bp],al
22849                                           !BCC_EOS
22850                                           !BCC_EOS
22851                                           ! 2598       {
22852 5C60           EB           4B            jmp .1C2
22853                       00005C62            .1C3:
22854                                           ! 2599        outw(0x3ce, (i << 8) | 0x04);
22855                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
22856 5C62           8A46         FA            mov	al,-6[bp]
22857 5C65           30E4                       xor	ah,ah
22858 5C67           88C4                       mov	ah,al
22859 5C69           30C0                       xor	al,al
22860                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
22861 5C6B           0C                     04  or	al,*4
22862                                           ! Debug: list unsigned int = ax+0 (used reg = )
22863 5C6D           50                         push	ax
22864                                           ! Debug: list int = const $3CE (used reg = )
22865 5C6E           B8                   03CE  mov	ax,#$3CE
22866 5C71           50                         push	ax
22867                                           ! Debug: func () void = outw+0 (used reg = )
22868 5C72           E8         1F53            call	_outw
22869 5C75           83C4                   04  add	sp,*4
22870                                           !BCC_EOS
22871                                           ! 2600        data = read_byte(0xa000,addr) & mask;
22872                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22873 5C78           FF76         F8            push	-8[bp]
22874                                           ! Debug: list unsigned int = const $A000 (used reg = )
22875 5C7B           B8                   A000  mov	ax,#$A000
22876 5C7E           50                         push	ax
22877                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22878 5C7F           E8         1ECA            call	_read_byte
22879 5C82           83C4                   04  add	sp,*4
22880                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
22881 5C85           2246         FD            and	al,-3[bp]
22882                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
22883 5C88           8846         FB            mov	-5[bp],al
22884                                           !BCC_EOS
22885                                           ! 2601        if (data > 0) attr |= (0x01 << i);
22886                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
22887 5C8B           8A46         FB            mov	al,-5[bp]
22888 5C8E           84C0                       test	al,al
22889 5C90           74           14            je  	.1C4
22890                       00005C92            .1C5:
22891                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
22892 5C92           8A46         FA            mov	al,-6[bp]
22893 5C95           30E4                       xor	ah,ah
22894 5C97           89C3                       mov	bx,ax
22895 5C99           B8                   0001  mov	ax,*1
22896 5C9C           89D9                       mov	cx,bx
22897 5C9E           D3E0                       shl	ax,cl
22898                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
22899 5CA0           0A46         FC            or	al,-4[bp]
22900 5CA3           8846         FC            mov	-4[bp],al
22901                                           !BCC_EOS
22902                                           ! 2602       }
22903                       00005CA6            .1C4:
22904                                           ! 2603      break;
22905                       00005CA6            .1C1:
22906                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
22907 5CA6           8A46         FA            mov	al,-6[bp]
22908 5CA9           40                         inc	ax
22909 5CAA           8846         FA            mov	-6[bp],al
22910                       00005CAD            .1C2:
22911                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
22912 5CAD           8A46         FA            mov	al,-6[bp]
22913 5CB0           3C                     04  cmp	al,*4
22914 5CB2           72           AE            jb 	.1C3
22915                       00005CB4            .1C6:
22916                       00005CB4            .1C0:
22917 5CB4           E9         00EB            br 	.1BB
22918                                           !BCC_EOS
22919                                           ! 2604    case 0x02:
22920                                           ! 2605      addr=(CX>>2)+(DX>>1)*80;
22921                       00005CB7            .1C7:
22922                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
22923 5CB7           8B46         08            mov	ax,8[bp]
22924 5CBA           D1E8                       shr	ax,*1
22925                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22926 5CBC           B9                   0050  mov	cx,*$50
22927 5CBF           F7E9                       imul	cx
22928 5CC1           50                         push	ax
22929                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
22930 5CC2           8B46         06            mov	ax,6[bp]
22931 5CC5           D1E8                       shr	ax,*1
22932 5CC7           D1E8                       shr	ax,*1
22933                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22934 5CC9           0346         F4            add	ax,0+..FFF7[bp]
22935 5CCC           44                         inc	sp
22936 5CCD           44                         inc	sp
22937                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22938 5CCE           8946         F8            mov	-8[bp],ax
22939                                           !BCC_EOS
22940                                           ! 2606      if (DX & 1) addr += 0x2000;
22941                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
22942 5CD1           8A46         08            mov	al,8[bp]
22943 5CD4           24                     01  and	al,*1
22944 5CD6           84C0                       test	al,al
22945 5CD8           74           09            je  	.1C8
22946                       00005CDA            .1C9:
22947                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
22948 5CDA           8B46         F8            mov	ax,-8[bp]
22949 5CDD           05                   2000  add	ax,#$2000
22950 5CE0           8946         F8            mov	-8[bp],ax
22951                                           !BCC_EOS
22952                                           ! 2607      data = read_byte(0xb800,addr);
22953                       00005CE3            .1C8:
22954                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22955 5CE3           FF76         F8            push	-8[bp]
22956                                           ! Debug: list unsigned int = const $B800 (used reg = )
22957 5CE6           B8                   B800  mov	ax,#$B800
22958 5CE9           50                         push	ax
22959                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22960 5CEA           E8         1E5F            call	_read_byte
22961 5CED           83C4                   04  add	sp,*4
22962                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
22963 5CF0           8846         FB            mov	-5[bp],al
22964                                           !BCC_EOS
22965                                           ! 2608      if(vga_modes[line].pixbits==2)
22966                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22967 5CF3           8A46         FE            mov	al,-2[bp]
22968 5CF6           30E4                       xor	ah,ah
22969 5CF8           B1                     03  mov	cl,*3
22970 5CFA           D3E0                       shl	ax,cl
22971 5CFC           89C3                       mov	bx,ax
22972 5CFE           81C3                 01C6  add	bx,#_vga_modes
22973                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22974 5D02           8A47         03            mov	al,3[bx]
22975 5D05           3C                     02  cmp	al,*2
22976 5D07           75           25            jne 	.1CA
22977                       00005D09            .1CB:
22978                                           ! 2609       {
22979                                           ! 2610        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
22980                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
22981 5D09           8A46         06            mov	al,6[bp]
22982 5D0C           24                     03  and	al,*3
22983                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22984 5D0E           50                         push	ax
22985 5D0F           B8                   0003  mov	ax,*3
22986 5D12           2A46         F4            sub	al,0+..FFF7[bp]
22987 5D15           80DC                   00  sbb	ah,*0
22988 5D18           44                         inc	sp
22989 5D19           44                         inc	sp
22990                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22991 5D1A           D1E0                       shl	ax,*1
22992                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
22993 5D1C           89C3                       mov	bx,ax
22994 5D1E           8A46         FB            mov	al,-5[bp]
22995 5D21           30E4                       xor	ah,ah
22996 5D23           89D9                       mov	cx,bx
22997 5D25           D3E8                       shr	ax,cl
22998                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
22999 5D27           24                     03  and	al,*3
23000                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23001 5D29           8846         FC            mov	-4[bp],al
23002                                           !BCC_EOS
23003                                           ! 2611       }
23004                                           ! 2612      else
23005                                           ! 2613       {
23006 5D2C           EB           21            jmp .1CC
23007                       00005D2E            .1CA:
23008                                           ! 2614        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23009                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23010 5D2E           8A46         06            mov	al,6[bp]
23011 5D31           24                     07  and	al,*7
23012                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23013 5D33           50                         push	ax
23014 5D34           B8                   0007  mov	ax,*7
23015 5D37           2A46         F4            sub	al,0+..FFF7[bp]
23016 5D3A           80DC                   00  sbb	ah,*0
23017 5D3D           44                         inc	sp
23018 5D3E           44                         inc	sp
23019                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23020 5D3F           89C3                       mov	bx,ax
23021 5D41           8A46         FB            mov	al,-5[bp]
23022 5D44           30E4                       xor	ah,ah
23023 5D46           89D9                       mov	cx,bx
23024 5D48           D3E8                       shr	ax,cl
23025                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23026 5D4A           24                     01  and	al,*1
23027                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23028 5D4C           8846         FC            mov	-4[bp],al
23029                                           !BCC_EOS
23030                                           ! 2615       }
23031                                           ! 2616      break;
23032                       00005D4F            .1CC:
23033 5D4F           EB           51            jmp .1BB
23034                                           !BCC_EOS
23035                                           ! 2617    case 0x05:
23036                                           ! 2618      addr=CX+DX*(read_word(0x40,0x4A)*8);
23037                       00005D51            .1CD:
23038                                           ! Debug: list int = const $4A (used reg = )
23039 5D51           B8                   004A  mov	ax,*$4A
23040 5D54           50                         push	ax
23041                                           ! Debug: list int = const $40 (used reg = )
23042 5D55           B8                   0040  mov	ax,*$40
23043 5D58           50                         push	ax
23044                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23045 5D59           E8         1E03            call	_read_word
23046 5D5C           83C4                   04  add	sp,*4
23047                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23048 5D5F           B1                     03  mov	cl,*3
23049 5D61           D3E0                       shl	ax,cl
23050                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23051                                           ! Debug: expression subtree swapping
23052 5D63           8B4E         08            mov	cx,8[bp]
23053 5D66           F7E9                       imul	cx
23054                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23055                                           ! Debug: expression subtree swapping
23056 5D68           0346         06            add	ax,6[bp]
23057                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23058 5D6B           8946         F8            mov	-8[bp],ax
23059                                           !BCC_EOS
23060                                           ! 2619      attr=read_byte(0xa000,addr);
23061                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23062 5D6E           FF76         F8            push	-8[bp]
23063                                           ! Debug: list unsigned int = const $A000 (used reg = )
23064 5D71           B8                   A000  mov	ax,#$A000
23065 5D74           50                         push	ax
23066                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23067 5D75           E8         1DD4            call	_read_byte
23068 5D78           83C4                   04  add	sp,*4
23069                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23070 5D7B           8846         FC            mov	-4[bp],al
23071                                           !BCC_EOS
23072                                           ! 2620      break;
23073 5D7E           EB           22            jmp .1BB
23074                                           !BCC_EOS
23075                                           ! 2621    default:
23076                                           ! 2622      attr = 0;
23077                       00005D80            .1CE:
23078                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23079 5D80           30C0                       xor	al,al
23080 5D82           8846         FC            mov	-4[bp],al
23081                                           !BCC_EOS
23082                                           ! 2623   }
23083                                           ! 2624  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23084 5D85           EB           1B            jmp .1BB
23085                       00005D87            .1BD:
23086 5D87           2C                     02  sub	al,*2
23087 5D89   7503    E9         FF29            beq 	.1C7
23088 5D8E           2C                     01  sub	al,*1
23089 5D90   7503    E9         FE8B            beq 	.1BF
23090 5D95           2C                     01  sub	al,*1
23091 5D97   7503    E9         FE84            beq 	.1BE
23092 5D9C           2C                     01  sub	al,*1
23093 5D9E           74           B1            je 	.1CD
23094 5DA0           EB           DE            jmp	.1CE
23095                       00005DA2            .1BB:
23096                       FFFFFFF4            ..FFF7	=	-$C
23097                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23098 5DA2           FF76         0A            push	$A[bp]
23099                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23100 5DA5           FF76         F6            push	-$A[bp]
23101                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23102 5DA8           E8         1DB4            call	_read_word
23103 5DAB           83C4                   04  add	sp,*4
23104                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23105 5DAE           30C0                       xor	al,al
23106                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23107 5DB0           0A46         FC            or	al,-4[bp]
23108                                           ! Debug: list unsigned int = ax+0 (used reg = )
23109 5DB3           50                         push	ax
23110                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23111 5DB4           FF76         0A            push	$A[bp]
23112                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23113 5DB7           FF76         F6            push	-$A[bp]
23114                                           ! Debug: func () void = write_word+0 (used reg = )
23115 5DBA           E8         1DCD            call	_write_word
23116 5DBD           83C4                   06  add	sp,*6
23117                                           !BCC_EOS
23118                                           ! 2625 }
23119 5DC0           89EC                       mov	sp,bp
23120 5DC2           5D                         pop	bp
23121 5DC3           C3                         ret
23122                                           ! 2626 static void biosfn_write_teletype (car, page, attr, flag)
23123                                           ! Register BX used in function biosfn_read_pixel
23124                                           ! 2627 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23125                       00005DC4            _biosfn_write_teletype:
23126                                           !BCC_EOS
23127                                           !BCC_EOS
23128                                           !BCC_EOS
23129                                           !BCC_EOS
23130                                           ! 2628 {
23131                                           ! 2629  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23132                                           !BCC_EOS
23133                                           ! 2630  Bit16u nbcols,nbrows,address;
23134                                           !BCC_EOS
23135                                           ! 2631  Bit16u cursor,dummy;
23136                                           !BCC_EOS
23137                                           ! 2632  if(page==0xff)
23138 5DC4           55                         push	bp
23139 5DC5           89E5                       mov	bp,sp
23140 5DC7           83C4                   F0  add	sp,*-$10
23141                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23142 5DCA           8A46         06            mov	al,6[bp]
23143 5DCD           3C                     FF  cmp	al,#$FF
23144 5DCF           75           11            jne 	.1CF
23145                       00005DD1            .1D0:
23146                                           ! 2633   page=read_byte(0x40,0x62);
23147                                           ! Debug: list int = const $62 (used reg = )
23148 5DD1           B8                   0062  mov	ax,*$62
23149 5DD4           50                         push	ax
23150                                           ! Debug: list int = const $40 (used reg = )
23151 5DD5           B8                   0040  mov	ax,*$40
23152 5DD8           50                         push	ax
23153                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23154 5DD9           E8         1D70            call	_read_byte
23155 5DDC           83C4                   04  add	sp,*4
23156                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23157 5DDF           8846         06            mov	6[bp],al
23158                                           !BCC_EOS
23159                                           ! 2634  mode=read_byte(0x40,0x49);
23160                       00005DE2            .1CF:
23161                                           ! Debug: list int = const $49 (used reg = )
23162 5DE2           B8                   0049  mov	ax,*$49
23163 5DE5           50                         push	ax
23164                                           ! Debug: list int = const $40 (used reg = )
23165 5DE6           B8                   0040  mov	ax,*$40
23166 5DE9           50                         push	ax
23167                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23168 5DEA           E8         1D5F            call	_read_byte
23169 5DED           83C4                   04  add	sp,*4
23170                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23171 5DF0           8846         FC            mov	-4[bp],al
23172                                           !BCC_EOS
23173                                           ! 2635  line=find_vga_entry(mode);
23174                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23175 5DF3           8A46         FC            mov	al,-4[bp]
23176 5DF6           30E4                       xor	ah,ah
23177 5DF8           50                         push	ax
23178                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23179 5DF9           E8         1C64            call	_find_vga_entry
23180 5DFC           44                         inc	sp
23181 5DFD           44                         inc	sp
23182                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23183 5DFE           8846         FB            mov	-5[bp],al
23184                                           !BCC_EOS
23185                                           ! 2636  if(line==0xFF)return;
23186                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23187 5E01           8A46         FB            mov	al,-5[bp]
23188 5E04           3C                     FF  cmp	al,#$FF
23189 5E06           75           04            jne 	.1D1
23190                       00005E08            .1D2:
23191 5E08           89EC                       mov	sp,bp
23192 5E0A           5D                         pop	bp
23193 5E0B           C3                         ret
23194                                           !BCC_EOS
23195                                           ! 2637  biosfn_get_cursor_pos(page,&dummy,&cursor);
23196                       00005E0C            .1D1:
23197                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23198 5E0C           8D5E         F2            lea	bx,-$E[bp]
23199 5E0F           53                         push	bx
23200                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23201 5E10           8D5E         F0            lea	bx,-$10[bp]
23202 5E13           53                         push	bx
23203                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23204 5E14           8A46         06            mov	al,6[bp]
23205 5E17           30E4                       xor	ah,ah
23206 5E19           50                         push	ax
23207                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23208 5E1A           E8         E542            call	_biosfn_get_cursor_pos
23209 5E1D           83C4                   06  add	sp,*6
23210                                           !BCC_EOS
23211                                           ! 2638  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23212                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23213 5E20           8A46         F2            mov	al,-$E[bp]
23214                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23215 5E23           8846         FE            mov	-2[bp],al
23216                                           !BCC_EOS
23217                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23218 5E26           8B46         F2            mov	ax,-$E[bp]
23219 5E29           30C0                       xor	al,al
23220                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23221 5E2B           88E0                       mov	al,ah
23222 5E2D           30E4                       xor	ah,ah
23223                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23224 5E2F           8846         FD            mov	-3[bp],al
23225                                           !BCC_EOS
23226                                           ! 2639  nbrows=read_byte(0x40,0x84)+1;
23227                                           ! Debug: list int = const $84 (used reg = )
23228 5E32           B8                   0084  mov	ax,#$84
23229 5E35           50                         push	ax
23230                                           ! Debug: list int = const $40 (used reg = )
23231 5E36           B8                   0040  mov	ax,*$40
23232 5E39           50                         push	ax
23233                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23234 5E3A           E8         1D0F            call	_read_byte
23235 5E3D           83C4                   04  add	sp,*4
23236                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23237 5E40           30E4                       xor	ah,ah
23238                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23239 5E42           40                         inc	ax
23240 5E43           8946         F6            mov	-$A[bp],ax
23241                                           !BCC_EOS
23242                                           ! 2640  nbcols=read_word(0x40,0x4A);
23243                                           ! Debug: list int = const $4A (used reg = )
23244 5E46           B8                   004A  mov	ax,*$4A
23245 5E49           50                         push	ax
23246                                           ! Debug: list int = const $40 (used reg = )
23247 5E4A           B8                   0040  mov	ax,*$40
23248 5E4D           50                         push	ax
23249                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23250 5E4E           E8         1D0E            call	_read_word
23251 5E51           83C4                   04  add	sp,*4
23252                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23253 5E54           8946         F8            mov	-8[bp],ax
23254                                           !BCC_EOS
23255                                           ! 2641  switch(car)
23256 5E57           8A46         04            mov	al,4[bp]
23257                                           ! 2642   {
23258 5E5A           E9         01EE            br 	.1D5
23259                                           ! 2643    case 7:
23260                                           ! 2644     break;
23261                       00005E5D            .1D6:
23262 5E5D           E9         0211            br 	.1D3
23263                                           !BCC_EOS
23264                                           ! 2645    case 8:
23265                                           ! 2646     if(xcurs>0)xcurs--;
23266                       00005E60            .1D7:
23267                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23268 5E60           8A46         FE            mov	al,-2[bp]
23269 5E63           84C0                       test	al,al
23270 5E65           74           07            je  	.1D8
23271                       00005E67            .1D9:
23272                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23273 5E67           8A46         FE            mov	al,-2[bp]
23274 5E6A           48                         dec	ax
23275 5E6B           8846         FE            mov	-2[bp],al
23276                                           !BCC_EOS
23277                                           ! 2647     break;
23278                       00005E6E            .1D8:
23279 5E6E           E9         0200            br 	.1D3
23280                                           !BCC_EOS
23281                                           ! 2648    case '\r':
23282                                           ! 2649     xcurs=0;
23283                       00005E71            .1DA:
23284                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23285 5E71           30C0                       xor	al,al
23286 5E73           8846         FE            mov	-2[bp],al
23287                                           !BCC_EOS
23288                                           ! 2650     break;
23289 5E76           E9         01F8            br 	.1D3
23290                                           !BCC_EOS
23291                                           ! 2651    case '\n':
23292                                           ! 2652     ycurs++;
23293                       00005E79            .1DB:
23294                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23295 5E79           8A46         FD            mov	al,-3[bp]
23296 5E7C           40                         inc	ax
23297 5E7D           8846         FD            mov	-3[bp],al
23298                                           !BCC_EOS
23299                                           ! 2653     break;
23300 5E80           E9         01EE            br 	.1D3
23301                                           !BCC_EOS
23302                                           ! 2654    case '\t':
23303                                           ! 2655     do
23304                       00005E83            .1DC:
23305                                           ! 2656      {
23306                       00005E83            .1DF:
23307                                           ! 2657       biosfn_write_teletype(' ',page,attr,flag);
23308                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23309 5E83           8A46         0A            mov	al,$A[bp]
23310 5E86           30E4                       xor	ah,ah
23311 5E88           50                         push	ax
23312                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23313 5E89           8A46         08            mov	al,8[bp]
23314 5E8C           30E4                       xor	ah,ah
23315 5E8E           50                         push	ax
23316                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23317 5E8F           8A46         06            mov	al,6[bp]
23318 5E92           30E4                       xor	ah,ah
23319 5E94           50                         push	ax
23320                                           ! Debug: list int = const $20 (used reg = )
23321 5E95           B8                   0020  mov	ax,*$20
23322 5E98           50                         push	ax
23323                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23324 5E99           E8         FF28            call	_biosfn_write_teletype
23325 5E9C           83C4                   08  add	sp,*8
23326                                           !BCC_EOS
23327                                           ! 2658       biosfn_get_cursor_pos(page,&dummy,&cursor);
23328                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23329 5E9F           8D5E         F2            lea	bx,-$E[bp]
23330 5EA2           53                         push	bx
23331                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23332 5EA3           8D5E         F0            lea	bx,-$10[bp]
23333 5EA6           53                         push	bx
23334                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23335 5EA7           8A46         06            mov	al,6[bp]
23336 5EAA           30E4                       xor	ah,ah
23337 5EAC           50                         push	ax
23338                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23339 5EAD           E8         E4AF            call	_biosfn_get_cursor_pos
23340 5EB0           83C4                   06  add	sp,*6
23341                                           !BCC_EOS
23342                                           ! 2659       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23343                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23344 5EB3           8A46         F2            mov	al,-$E[bp]
23345                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23346 5EB6           8846         FE            mov	-2[bp],al
23347                                           !BCC_EOS
23348                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23349 5EB9           8B46         F2            mov	ax,-$E[bp]
23350 5EBC           30C0                       xor	al,al
23351                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23352 5EBE           88E0                       mov	al,ah
23353 5EC0           30E4                       xor	ah,ah
23354                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23355 5EC2           8846         FD            mov	-3[bp],al
23356                                           !BCC_EOS
23357                                           ! 2660      }while(xcurs%8==0);
23358                       00005EC5            .1DE:
23359                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23360 5EC5           8A46         FE            mov	al,-2[bp]
23361 5EC8           30E4                       xor	ah,ah
23362 5ECA           24                     07  and	al,*7
23363                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23364 5ECC           84C0                       test	al,al
23365 5ECE           74           B3            je 	.1DF
23366                       00005ED0            .1E0:
23367                                           !BCC_EOS
23368                                           ! 2661     break;
23369                       00005ED0            .1DD:
23370 5ED0           E9         019E            br 	.1D3
23371                                           !BCC_EOS
23372                                           ! 2662    default:
23373                                           ! 2663     if(vga_modes[line].class==0x00)
23374                       00005ED3            .1E1:
23375                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23376 5ED3           8A46         FB            mov	al,-5[bp]
23377 5ED6           30E4                       xor	ah,ah
23378 5ED8           B1                     03  mov	cl,*3
23379 5EDA           D3E0                       shl	ax,cl
23380 5EDC           89C3                       mov	bx,ax
23381 5EDE           81C3                 01C6  add	bx,#_vga_modes
23382                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23383 5EE2           8A47         01            mov	al,1[bx]
23384 5EE5           84C0                       test	al,al
23385 5EE7   7403    E9         0082            bne 	.1E2
23386                       00005EEC            .1E3:
23387                                           ! 2664      {
23388                                           ! 2665       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23389                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23390 5EEC           8A46         FD            mov	al,-3[bp]
23391 5EEF           30E4                       xor	ah,ah
23392 5EF1           8B4E         F8            mov	cx,-8[bp]
23393 5EF4           F7E9                       imul	cx
23394                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23395                                           ! Debug: expression subtree swapping
23396 5EF6           0246         FE            add	al,-2[bp]
23397 5EF9           80D4                   00  adc	ah,*0
23398                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23399 5EFC           D1E0                       shl	ax,*1
23400 5EFE           50                         push	ax
23401                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23402 5EFF           8B46         F8            mov	ax,-8[bp]
23403 5F02           8B4E         F6            mov	cx,-$A[bp]
23404 5F05           F7E9                       imul	cx
23405                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23406 5F07           D1E0                       shl	ax,*1
23407                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23408 5F09           0C                     FF  or	al,#$FF
23409                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23410                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23411 5F0B           89C3                       mov	bx,ax
23412 5F0D           8A46         06            mov	al,6[bp]
23413 5F10           30E4                       xor	ah,ah
23414 5F12           93                         xchg	ax,bx
23415 5F13           40                         inc	ax
23416 5F14           89D9                       mov	cx,bx
23417 5F16           F7E9                       imul	cx
23418                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23419 5F18           0346         EE            add	ax,0+..FFF6[bp]
23420 5F1B           44                         inc	sp
23421 5F1C           44                         inc	sp
23422                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23423 5F1D           8946         F4            mov	-$C[bp],ax
23424                                           !BCC_EOS
23425                                           ! 2666       write_byte(vga_modes[line].sstart,address,car);
23426                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23427 5F20           8A46         04            mov	al,4[bp]
23428 5F23           30E4                       xor	ah,ah
23429 5F25           50                         push	ax
23430                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23431 5F26           FF76         F4            push	-$C[bp]
23432                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23433 5F29           8A46         FB            mov	al,-5[bp]
23434 5F2C           30E4                       xor	ah,ah
23435 5F2E           B1                     03  mov	cl,*3
23436 5F30           D3E0                       shl	ax,cl
23437 5F32           89C3                       mov	bx,ax
23438 5F34           81C3                 01C6  add	bx,#_vga_modes
23439                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23440 5F38           FF77         04            push	4[bx]
23441                                           ! Debug: func () void = write_byte+0 (used reg = )
23442 5F3B           E8         1C34            call	_write_byte
23443 5F3E           83C4                   06  add	sp,*6
23444                                           !BCC_EOS
23445                                           ! 2667       if(flag==3)
23446                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23447 5F41           8A46         0A            mov	al,$A[bp]
23448 5F44           3C                     03  cmp	al,*3
23449 5F46           75           23            jne 	.1E4
23450                       00005F48            .1E5:
23451                                           ! 2668        w
23452                                           ! 2668 rite_byte(vga_modes[line].sstart,address+1,attr);
23453                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23454 5F48           8A46         08            mov	al,8[bp]
23455 5F4B           30E4                       xor	ah,ah
23456 5F4D           50                         push	ax
23457                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23458 5F4E           8B46         F4            mov	ax,-$C[bp]
23459                                           ! Debug: list unsigned int = ax+1 (used reg = )
23460 5F51           40                         inc	ax
23461 5F52           50                         push	ax
23462                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23463 5F53           8A46         FB            mov	al,-5[bp]
23464 5F56           30E4                       xor	ah,ah
23465 5F58           B1                     03  mov	cl,*3
23466 5F5A           D3E0                       shl	ax,cl
23467 5F5C           89C3                       mov	bx,ax
23468 5F5E           81C3                 01C6  add	bx,#_vga_modes
23469                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23470 5F62           FF77         04            push	4[bx]
23471                                           ! Debug: func () void = write_byte+0 (used reg = )
23472 5F65           E8         1C0A            call	_write_byte
23473 5F68           83C4                   06  add	sp,*6
23474                                           !BCC_EOS
23475                                           ! 2669      }
23476                       00005F6B            .1E4:
23477                                           ! 2670     else
23478                                           ! 2671      {
23479 5F6B           E9         00D4            br 	.1E6
23480                       00005F6E            .1E2:
23481                                           ! 2672       cheight=video_param_table[line_to_vpti[line]].cheight;
23482                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23483 5F6E           8A46         FB            mov	al,-5[bp]
23484 5F71           30E4                       xor	ah,ah
23485 5F73           89C3                       mov	bx,ax
23486                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23487 5F75           8A87       0246            mov	al,_line_to_vpti[bx]
23488 5F79           30E4                       xor	ah,ah
23489 5F7B           B1                     06  mov	cl,*6
23490 5F7D           D3E0                       shl	ax,cl
23491 5F7F           89C3                       mov	bx,ax
23492 5F81           81C3                 025A  add	bx,#_video_param_table
23493                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23494 5F85           8A47         02            mov	al,2[bx]
23495 5F88           8846         FF            mov	-1[bp],al
23496                                           !BCC_EOS
23497                                           ! 2673       bpp=vga_modes[line].pixbits;
23498                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23499 5F8B           8A46         FB            mov	al,-5[bp]
23500 5F8E           30E4                       xor	ah,ah
23501 5F90           B1                     03  mov	cl,*3
23502 5F92           D3E0                       shl	ax,cl
23503 5F94           89C3                       mov	bx,ax
23504 5F96           81C3                 01C6  add	bx,#_vga_modes
23505                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23506 5F9A           8A47         03            mov	al,3[bx]
23507 5F9D           8846         FA            mov	-6[bp],al
23508                                           !BCC_EOS
23509                                           ! 2674       switch(vga_modes[line].memmodel)
23510                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23511 5FA0           8A46         FB            mov	al,-5[bp]
23512 5FA3           30E4                       xor	ah,ah
23513 5FA5           B1                     03  mov	cl,*3
23514 5FA7           D3E0                       shl	ax,cl
23515 5FA9           89C3                       mov	bx,ax
23516 5FAB           81C3                 01C6  add	bx,#_vga_modes
23517 5FAF           8A47         02            mov	al,2[bx]
23518                                           ! 2675        {
23519 5FB2           E9         0077            br 	.1E9
23520                                           ! 2676         case 0x04:
23521                                           ! 2677         case 0x03:
23522                       00005FB5            .1EA:
23523                                           ! 2678           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
23524                       00005FB5            .1EB:
23525                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
23526 5FB5           8A46         FF            mov	al,-1[bp]
23527 5FB8           30E4                       xor	ah,ah
23528 5FBA           50                         push	ax
23529                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23530 5FBB           FF76         F8            push	-8[bp]
23531                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23532 5FBE           8A46         FD            mov	al,-3[bp]
23533 5FC1           30E4                       xor	ah,ah
23534 5FC3           50                         push	ax
23535                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23536 5FC4           8A46         FE            mov	al,-2[bp]
23537 5FC7           30E4                       xor	ah,ah
23538 5FC9           50                         push	ax
23539                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23540 5FCA           8A46         08            mov	al,8[bp]
23541 5FCD           30E4                       xor	ah,ah
23542 5FCF           50                         push	ax
23543                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23544 5FD0           8A46         04            mov	al,4[bp]
23545 5FD3           30E4                       xor	ah,ah
23546 5FD5           50                         push	ax
23547                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
23548 5FD6           E8         F08D            call	_write_gfx_char_pl4
23549 5FD9           83C4                   0C  add	sp,*$C
23550                                           !BCC_EOS
23551                                           ! 2679           break;
23552 5FDC           EB           64            jmp .1E7
23553                                           !BCC_EOS
23554                                           ! 2680         case 0x02:
23555                                           ! 2681           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
23556                       00005FDE            .1EC:
23557                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
23558 5FDE           8A46         FA            mov	al,-6[bp]
23559 5FE1           30E4                       xor	ah,ah
23560 5FE3           50                         push	ax
23561                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23562 5FE4           FF76         F8            push	-8[bp]
23563                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23564 5FE7           8A46         FD            mov	al,-3[bp]
23565 5FEA           30E4                       xor	ah,ah
23566 5FEC           50                         push	ax
23567                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23568 5FED           8A46         FE            mov	al,-2[bp]
23569 5FF0           30E4                       xor	ah,ah
23570 5FF2           50                         push	ax
23571                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23572 5FF3           8A46         08            mov	al,8[bp]
23573 5FF6           30E4                       xor	ah,ah
23574 5FF8           50                         push	ax
23575                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23576 5FF9           8A46         04            mov	al,4[bp]
23577 5FFC           30E4                       xor	ah,ah
23578 5FFE           50                         push	ax
23579                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
23580 5FFF           E8         F1D9            call	_write_gfx_char_cga
23581 6002           83C4                   0C  add	sp,*$C
23582                                           !BCC_EOS
23583                                           ! 2682           break;
23584 6005           EB           3B            jmp .1E7
23585                                           !BCC_EOS
23586                                           ! 2683         case 0x05:
23587                                           ! 2684           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
23588                       00006007            .1ED:
23589                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
23590 6007           FF76         F8            push	-8[bp]
23591                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
23592 600A           8A46         FD            mov	al,-3[bp]
23593 600D           30E4                       xor	ah,ah
23594 600F           50                         push	ax
23595                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
23596 6010           8A46         FE            mov	al,-2[bp]
23597 6013           30E4                       xor	ah,ah
23598 6015           50                         push	ax
23599                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
23600 6016           8A46         08            mov	al,8[bp]
23601 6019           30E4                       xor	ah,ah
23602 601B           50                         push	ax
23603                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
23604 601C           8A46         04            mov	al,4[bp]
23605 601F           30E4                       xor	ah,ah
23606 6021           50                         push	ax
23607                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
23608 6022           E8         F3BC            call	_write_gfx_char_lin
23609 6025           83C4                   0A  add	sp,*$A
23610                                           !BCC_EOS
23611                                           ! 2685           break;
23612 6028           EB           18            jmp .1E7
23613                                           !BCC_EOS
23614                                           ! 2686        }
23615                                           ! 2687      }
23616 602A           EB           16            jmp .1E7
23617                       0000602C            .1E9:
23618 602C           2C                     02  sub	al,*2
23619 602E           74           AE            je 	.1EC
23620 6030           2C                     01  sub	al,*1
23621 6032   7503    E9         FF7E            beq 	.1EB
23622 6037           2C                     01  sub	al,*1
23623 6039   7503    E9         FF77            beq 	.1EA
23624 603E           2C                     01  sub	al,*1
23625 6040           74           C5            je 	.1ED
23626                       00006042            .1E7:
23627                                           ! 2688     xcurs++;
23628                       00006042            .1E6:
23629                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
23630 6042           8A46         FE            mov	al,-2[bp]
23631 6045           40                         inc	ax
23632 6046           8846         FE            mov	-2[bp],al
23633                                           !BCC_EOS
23634                                           ! 2689   }
23635                                           ! 2690  if(xcurs==nbcols)
23636 6049           EB           26            jmp .1D3
23637                       0000604B            .1D5:
23638 604B           2C                     07  sub	al,*7
23639 604D   7503    E9         FE0B            beq 	.1D6
23640 6052           2C                     01  sub	al,*1
23641 6054   7503    E9         FE07            beq 	.1D7
23642 6059           2C                     01  sub	al,*1
23643 605B   7503    E9         FE23            beq 	.1DC
23644 6060           2C                     01  sub	al,*1
23645 6062   7503    E9         FE12            beq 	.1DB
23646 6067           2C                     03  sub	al,*3
23647 6069   7503    E9         FE03            beq 	.1DA
23648 606E           E9         FE62            br 	.1E1
23649                       00006071            .1D3:
23650                       FFFFFFEE            ..FFF6	=	-$12
23651                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
23652 6071           8A46         FE            mov	al,-2[bp]
23653 6074           30E4                       xor	ah,ah
23654 6076           3B46         F8            cmp	ax,-8[bp]
23655 6079           75           0C            jne 	.1EE
23656                       0000607B            .1EF:
23657                                           ! 2691   {xcurs=0;
23658                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23659 607B           30C0                       xor	al,al
23660 607D           8846         FE            mov	-2[bp],al
23661                                           !BCC_EOS
23662                                           ! 2692    ycurs++;
23663                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23664 6080           8A46         FD            mov	al,-3[bp]
23665 6083           40                         inc	ax
23666 6084           8846         FD            mov	-3[bp],al
23667                                           !BCC_EOS
23668                                           ! 2693   }
23669                                           ! 2694  if(ycurs==nbrows)
23670                       00006087            .1EE:
23671                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
23672 6087           8A46         FD            mov	al,-3[bp]
23673 608A           30E4                       xor	ah,ah
23674 608C           3B46         F6            cmp	ax,-$A[bp]
23675 608F   7403    E9         00CA            bne 	.1F0
23676                       00006094            .1F1:
23677                                           ! 2695   {
23678                                           ! 2696    if(vga_modes[line].class==0x00)
23679                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23680 6094           8A46         FB            mov	al,-5[bp]
23681 6097           30E4                       xor	ah,ah
23682 6099           B1                     03  mov	cl,*3
23683 609B           D3E0                       shl	ax,cl
23684 609D           89C3                       mov	bx,ax
23685 609F           81C3                 01C6  add	bx,#_vga_modes
23686                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23687 60A3           8A47         01            mov	al,1[bx]
23688 60A6           84C0                       test	al,al
23689 60A8   7403    E9         0081            bne 	.1F2
23690                       000060AD            .1F3:
23691                                           ! 2697     {
23692                                           ! 2698      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
23693                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
23694 60AD           8A46         FD            mov	al,-3[bp]
23695 60B0           30E4                       xor	ah,ah
23696                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
23697 60B2           48                         dec	ax
23698 60B3           8B4E         F8            mov	cx,-8[bp]
23699 60B6           F7E9                       imul	cx
23700                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23701                                           ! Debug: expression subtree swapping
23702 60B8           0246         FE            add	al,-2[bp]
23703 60BB           80D4                   00  adc	ah,*0
23704                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23705 60BE           D1E0                       shl	ax,*1
23706 60C0           50                         push	ax
23707                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23708 60C1           8B46         F8            mov	ax,-8[bp]
23709 60C4           8B4E         F6            mov	cx,-$A[bp]
23710 60C7           F7E9                       imul	cx
23711                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23712 60C9           D1E0                       shl	ax,*1
23713                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23714 60CB           0C                     FF  or	al,#$FF
23715                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23716                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23717 60CD           89C3                       mov	bx,ax
23718 60CF           8A46         06            mov	al,6[bp]
23719 60D2           30E4                       xor	ah,ah
23720 60D4           93                         xchg	ax,bx
23721 60D5           40                         inc	ax
23722 60D6           89D9                       mov	cx,bx
23723 60D8           F7E9                       imul	cx
23724                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23725 60DA           0346         EE            add	ax,-$12[bp]
23726 60DD           44                         inc	sp
23727 60DE           44                         inc	sp
23728                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23729 60DF           8946         F4            mov	-$C[bp],ax
23730                                           !BCC_EOS
23731                                           ! 2699      attr=read_byte(vga_modes[line].sstart,address+1);
23732                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
23733 60E2           8B46         F4            mov	ax,-$C[bp]
23734                                           ! Debug: list unsigned int = ax+1 (used reg = )
23735 60E5           40                         inc	ax
23736 60E6           50                         push	ax
23737                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$10] struct  = vga_modes+0 (used reg = )
23738 60E7           8A46         FB            mov	al,-5[bp]
23739 60EA           30E4                       xor	ah,ah
23740 60EC           B1                     03  mov	cl,*3
23741 60EE           D3E0                       shl	ax,cl
23742 60F0           89C3                       mov	bx,ax
23743 60F2           81C3                 01C6  add	bx,#_vga_modes
23744                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23745 60F6           FF77         04            push	4[bx]
23746                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23747 60F9           E8         1A50            call	_read_byte
23748 60FC           83C4                   04  add	sp,*4
23749                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
23750 60FF           8846         08            mov	8[bp],al
23751                                           !BCC_EOS
23752                                           ! 2700      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
23753                                           ! Debug: list int = const 1 (used reg = )
23754 6102           B8                   0001  mov	ax,*1
23755 6105           50                         push	ax
23756                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23757 6106           8A46         06            mov	al,6[bp]
23758 6109           30E4                       xor	ah,ah
23759 610B           50                         push	ax
23760                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23761 610C           8B46         F8            mov	ax,-8[bp]
23762                                           ! Debug: list unsigned int = ax-1 (used reg = )
23763 610F           48                         dec	ax
23764 6110           50                         push	ax
23765                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23766 6111           8B46         F6            mov	ax,-$A[bp]
23767                                           ! Debug: list unsigned int = ax-1 (used reg = )
23768 6114           48                         dec	ax
23769 6115           50                         push	ax
23770                                           ! Debug: list int = const 0 (used reg = )
23771 6116           31C0                       xor	ax,ax
23772 6118           50                         push	ax
23773                                           ! Debug: list int = const 0 (used reg = )
23774 6119           31C0                       xor	ax,ax
23775 611B           50                         push	ax
23776                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
23777 611C           8A46         08            mov	al,8[bp]
23778 611F           30E4                       xor	ah,ah
23779 6121           50                         push	ax
23780                                           ! Debug: list int = const 1 (used reg = )
23781 6122           B8                   0001  mov	ax,*1
23782 6125           50                         push	ax
23783                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23784 6126           E8         E72F            call	_biosfn_scroll
23785 6129           83C4                   10  add	sp,*$10
23786                                           !BCC_EOS
23787                                           ! 2701     }
23788                                           ! 2702    else
23789                                           ! 2703     {
23790 612C           EB           27            jmp .1F4
23791                       0000612E            .1F2:
23792                                           ! 2704      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
23793                                           ! Debug: list int = const 1 (used reg = )
23794 612E           B8                   0001  mov	ax,*1
23795 6131           50                         push	ax
23796                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23797 6132           8A46         06            mov	al,6[bp]
23798 6135           30E4                       xor	ah,ah
23799 6137           50                         push	ax
23800                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23801 6138           8B46         F8            mov	ax,-8[bp]
23802                                           ! Debug: list unsigned int = ax-1 (used reg = )
23803 613B           48                         dec	ax
23804 613C           50                         push	ax
23805                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23806 613D           8B46         F6            mov	ax,-$A[bp]
23807                                           ! Debug: list unsigned int = ax-1 (used reg = )
23808 6140           48                         dec	ax
23809 6141           50                         push	ax
23810                                           ! Debug: list int = const 0 (used reg = )
23811 6142           31C0                       xor	ax,ax
23812 6144           50                         push	ax
23813                                           ! Debug: list int = const 0 (used reg = )
23814 6145           31C0                       xor	ax,ax
23815 6147           50                         push	ax
23816                                           ! Debug: list int = const 0 (used reg = )
23817 6148           31C0                       xor	ax,ax
23818 614A           50                         push	ax
23819                                           ! Debug: list int = const 1 (used reg = )
23820 614B           B8                   0001  mov	ax,*1
23821 614E           50                         push	ax
23822                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23823 614F           E8         E706            call	_biosfn_scroll
23824 6152           83C4                   10  add	sp,*$10
23825                                           !BCC_EOS
23826                                           ! 2705     }
23827                                           ! 2706    ycurs-=1;
23828                       00006155            .1F4:
23829                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
23830 6155           8A46         FD            mov	al,-3[bp]
23831 6158           30E4                       xor	ah,ah
23832 615A           48                         dec	ax
23833 615B           8846         FD            mov	-3[bp],al
23834                                           !BCC_EOS
23835                                           ! 2707   }
23836                                           ! 2708  cursor=ycurs; cursor<<=8; cursor+=xcurs;
23837                       0000615E            .1F0:
23838                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
23839 615E           8A46         FD            mov	al,-3[bp]
23840 6161           30E4                       xor	ah,ah
23841 6163           8946         F2            mov	-$E[bp],ax
23842                                           !BCC_EOS
23843                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
23844 6166           8B46         F2            mov	ax,-$E[bp]
23845 6169           88C4                       mov	ah,al
23846 616B           30C0                       xor	al,al
23847 616D           8946         F2            mov	-$E[bp],ax
23848                                           !BCC_EOS
23849                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
23850 6170           8B46         F2            mov	ax,-$E[bp]
23851 6173           0246         FE            add	al,-2[bp]
23852 6176           80D4                   00  adc	ah,*0
23853 6179           8946         F2            mov	-$E[bp],ax
23854                                           !BCC_EOS
23855                                           ! 2709  biosfn_set_cursor_pos(page,cursor);
23856                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
23857 617C           FF76         F2            push	-$E[bp]
23858                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23859 617F           8A46         06            mov	al,6[bp]
23860 6182           30E4                       xor	ah,ah
23861 6184           50                         push	ax
23862                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
23863 6185           E8         E0D6            call	_biosfn_set_cursor_pos
23864 6188           83C4                   04  add	sp,*4
23865                                           !BCC_EOS
23866                                           ! 2710 }
23867 618B           89EC                       mov	sp,bp
23868 618D           5D                         pop	bp
23869 618E           C3                         ret
23870                                           ! 2711 #asm
23871                                           !BCC_ASM
23872                       00000008            _biosfn_write_teletype.flag	set	8
23873                       00000006            _biosfn_write_teletype.attr	set	6
23874                       00000004            _biosfn_write_teletype.page	set	4
23875                       00000002            _biosfn_write_teletype.car	set	2
23876                       0000618F            biosfn_get_video_mode:
23877 618F           1E                           push ds
23878 6190           B8                   0040    mov ax, # 0x40
23879 6193           8ED8                         mov ds, ax
23880 6195           53                           push bx
23881 6196           BB                   0062    mov bx, # 0x62
23882 6199           8A07                         mov al, [bx]
23883 619B           5B                           pop bx
23884 619C           88C7                         mov bh, al
23885 619E           53                           push bx
23886 619F           BB                   0087    mov bx, # 0x87
23887 61A2           8A27                         mov ah, [bx]
23888 61A4           80E4                   80    and ah, #0x80
23889 61A7           BB                   0049    mov bx, # 0x49
23890 61AA           8A07                         mov al, [bx]
23891 61AC           08E0                         or al, ah
23892 61AE           BB                   004A    mov bx, # 0x4A
23893 61B1           8A27                         mov ah, [bx]
23894 61B3           5B                           pop bx
23895 61B4           1F                           pop ds
23896 61B5           C3                           ret
23897                                           ! 2733 endasm
23898                                           !BCC_ENDASM
23899                                           ! 2734 #asm
23900                                           !BCC_ASM
23901                       00000008            _biosfn_write_teletype.flag	set	8
23902                       00000006            _biosfn_write_teletype.attr	set	6
23903                       00000004            _biosfn_write_teletype.page	set	4
23904                       00000002            _biosfn_write_teletype.car	set	2
23905                       000061B6            biosfn_group_10:
23906 61B6           3C                     00    cmp al, #0x00
23907 61B8           75           02              jne int10_test_1001
23908 61BA           EB           61              jmp biosfn_set_single_palette_reg
23909                       000061BC            int10_test_1001:
23910 61BC           3C                     01    cmp al, #0x01
23911 61BE           75           02              jne int10_test_1002
23912 61C0           EB           75              jmp biosfn_set_overscan_border_color
23913                       000061C2            int10_test_1002:
23914 61C2           3C                     02    cmp al, #0x02
23915 61C4           75           02              jne int10_test_1003
23916 61C6           EB           77              jmp biosfn_set_all_palette_reg
23917                       000061C8            int10_test_1003:
23918 61C8           3C                     03    cmp al, #0x03
23919 61CA           75           03              jne int10_test_1007
23920 61CC           E9         009D              jmp biosfn_toggle_intensity
23921                       000061CF            int10_test_1007:
23922 61CF           3C                     07    cmp al, #0x07
23923 61D1           75           03              jne int10_test_1008
23924 61D3           E9         00BF              jmp biosfn_get_single_palette_reg
23925                       000061D6            int10_test_1008:
23926 61D6           3C                     08    cmp al, #0x08
23927 61D8           75           03              jne int10_test_1009
23928 61DA           E9         00DC              jmp biosfn_read_overscan_border_color
23929                       000061DD            int10_test_1009:
23930 61DD           3C                     09    cmp al, #0x09
23931 61DF           75           03              jne int10_test_1010
23932 61E1           E9         00E3              jmp biosfn_get_all_palette_reg
23933                       000061E4            int10_test_1010:
23934 61E4           3C                     10    cmp al, #0x10
23935 61E6           75           03              jne int10_test_1012
23936 61E8           E9         011D              jmp biosfn_set_single_dac_reg
23937                       000061EB            int10_test_1012:
23938 61EB           3C                     12    cmp al, #0x12
23939 61ED           75           03              jne int10_test_1013
23940 61EF           E9         012F              jmp biosfn_set_all_dac_reg
23941                       000061F2            int10_test_1013:
23942 61F2           3C                     13    cmp al, #0x13
23943 61F4           75           03              jne int10_test_1015
23944 61F6           E9         0150              jmp biosfn_select_video_dac_color_page
23945                       000061F9            int10_test_1015:
23946 61F9           3C                     15    cmp al, #0x15
23947 61FB           75           03              jne int10_test_1017
23948 61FD           E9         0198              jmp biosfn_read_single_dac_reg
23949                       00006200            int10_test_1017:
23950 6200           3C                     17    cmp al, #0x17
23951 6202           75           03              jne int10_test_1018
23952 6204           E9         01AC              jmp biosfn_read_all_dac_reg
23953                       00006207            int10_test_1018:
23954 6207           3C                     18    cmp al, #0x18
23955 6209           75           03              jne int10_test_1019
23956 620B           E9         01CD              jmp biosfn_set_pel_mask
23957                       0000620E            int10_test_1019:
23958 620E           3C                     19    cmp al, #0x19
23959 6210           75           03              jne int10_test_101A
23960 6212           E9         01D1              jmp biosfn_read_pel_mask
23961                       00006215            int10_test_101A:
23962 6215           3C                     1A    cmp al, #0x1a
23963 6217           75           03              jne int10_group_10_unknown
23964 6219           E9         01D5              jmp biosfn_read_video_dac_state
23965                       0000621C            int10_group_10_unknown:
23966 621C           C3                           ret
23967                       0000621D            biosfn_set_single_palette_reg:
23968 621D           80FB                   14    cmp bl, #0x14
23969 6220           77           14              ja no_actl_reg1
23970 6222           50                           push ax
23971 6223           52                           push dx
23972 6224           BA                   03DA    mov dx, # 0x3da
23973 6227           EC                           in al, dx
23974 6228           BA                   03C0    mov dx, # 0x3c0
23975 622B           88D8                         mov al, bl
23976 622D           EE                           out dx, al
23977 622E           88F8                         mov al, bh
23978 6230           EE                           out dx, al
23979 6231           B0                     20    mov al, #0x20
23980 6233           EE                           out dx, al
23981 6234           5A                           pop dx
23982 6235           58                           pop ax
23983                       00006236            no_actl_reg1:
23984 6236           C3                           ret
23985                                           ! 2815 endasm
23986                                           !BCC_ENDASM
23987                                           ! 2816 #asm
23988                                           !BCC_ASM
23989                       00000008            _biosfn_write_teletype.flag	set	8
23990                       00000006            _biosfn_write_teletype.attr	set	6
23991                       00000004            _biosfn_write_teletype.page	set	4
23992                       00000002            _biosfn_write_teletype.car	set	2
23993                       00006237            biosfn_set_overscan_border_color:
23994 6237           53                           push bx
23995 6238           B3                     11    mov bl, #0x11
23996 623A           E8         FFE0              call biosfn_set_single_palette_reg
23997 623D           5B                           pop bx
23998 623E           C3                           ret
23999                                           ! 2823 endasm
24000                                           !BCC_ENDASM
24001                                           ! 2824 #asm
24002                                           !BCC_ASM
24003                       00000008            _biosfn_write_teletype.flag	set	8
24004                       00000006            _biosfn_write_teletype.attr	set	6
24005                       00000004            _biosfn_write_teletype.page	set	4
24006                       00000002            _biosfn_write_teletype.car	set	2
24007                       0000623F            biosfn_set_all_palette_reg:
24008 623F           50                           push ax
24009 6240           53                           push bx
24010 6241           51                           push cx
24011 6242           52                           push dx
24012 6243           89D3                         mov bx, dx
24013 6245           BA                   03DA    mov dx, # 0x3da
24014 6248           EC                           in al, dx
24015 6249           B1                     00    mov cl, #0x00
24016 624B           BA                   03C0    mov dx, # 0x3c0
24017                       0000624E            set_palette_loop:
24018 624E           88C8                         mov al, cl
24019 6250           EE                           out dx, al
24020 6251           26                           seg es
24021 6252           8A07                         mov al, [bx]
24022 6254           EE                           out dx, al
24023 6255           43                           inc bx
24024 6256           FEC1                         inc cl
24025 6258           80F9                   10    cmp cl, #0x10
24026 625B           75           F1              jne set_palette_loop
24027 625D           B0                     11    mov al, #0x11
24028 625F           EE                           out dx, al
24029 6260           26                           seg es
24030 6261           8A07                         mov al, [bx]
24031 6263           EE                           out dx, al
24032 6264           B0                     20    mov al, #0x20
24033 6266           EE                           out dx, al
24034 6267           5A                           pop dx
24035 6268           59                           pop cx
24036 6269           5B                           pop bx
24037 626A           58                           pop ax
24038 626B           C3                           ret
24039                                           ! 2857 endasm
24040                                           !BCC_ENDASM
24041                                           ! 2858 #asm
24042                                           !BCC_ASM
24043                       00000008            _biosfn_write_teletype.flag	set	8
24044                       00000006            _biosfn_write_teletype.attr	set	6
24045                       00000004            _biosfn_write_teletype.page	set	4
24046                       00000002            _biosfn_write_teletype.car	set	2
24047                       0000626C            biosfn_toggle_intensity:
24048 626C           50                           push ax
24049 626D           53                           push bx
24050 626E           52                           push dx
24051 626F           BA                   03DA    mov dx, # 0x3da
24052 6272           EC                           in al, dx
24053 6273           BA                   03C0    mov dx, # 0x3c0
24054 6276           B0                     10    mov al, #0x10
24055 6278           EE                           out dx, al
24056 6279           BA                   03C1    mov dx, # 0x3c1
24057 627C           EC                           in al, dx
24058 627D           24                     F7    and al, #0xf7
24059 627F           80E3                   01    and bl, #0x01
24060                                             ;shl bl, 3
24061 6282           D0E3                         shl bl, 1
24062 6284           D0E3                         shl bl, 1
24063 6286           D0E3                         shl bl, 1
24064 6288           08D8                         or al, bl
24065 628A           BA                   03C0    mov dx, # 0x3c0
24066 628D           EE                           out dx, al
24067 628E           B0                     20    mov al, #0x20
24068 6290           EE                           out dx, al
24069 6291           5A                           pop dx
24070 6292           5B                           pop bx
24071 6293           58                           pop ax
24072 6294           C3                           ret
24073                                           ! 2885 endasm
24074                                           !BCC_ENDASM
24075                                           ! 2886 #asm
24076                                           !BCC_ASM
24077                       00000008            _biosfn_write_teletype.flag	set	8
24078                       00000006            _biosfn_write_teletype.attr	set	6
24079                       00000004            _biosfn_write_teletype.page	set	4
24080                       00000002            _biosfn_write_teletype.car	set	2
24081                       00006295            biosfn_get_single_palette_reg:
24082 6295           80FB                   14    cmp bl, #0x14
24083 6298           77           1E              ja no_actl_reg2
24084 629A           50                           push ax
24085 629B           52                           push dx
24086 629C           BA                   03DA    mov dx, # 0x3da
24087 629F           EC                           in al, dx
24088 62A0           BA                   03C0    mov dx, # 0x3c0
24089 62A3           88D8                         mov al, bl
24090 62A5           EE                           out dx, al
24091 62A6           BA                   03C1    mov dx, # 0x3c1
24092 62A9           EC                           in al, dx
24093 62AA           88C7                         mov bh, al
24094 62AC           BA                   03DA    mov dx, # 0x3da
24095 62AF           EC                           in al, dx
24096 62B0           BA                   03C0    mov dx, # 0x3c0
24097 62B3           B0                     20    mov al, #0x20
24098 62B5           EE                           out dx, al
24099 62B6           5A                           pop dx
24100 62B7           58                           pop ax
24101                       000062B8            no_actl_reg2:
24102 62B8           C3                           ret
24103                                           ! 2909 endasm
24104                                           !BCC_ENDASM
24105                                           ! 2910 #asm
24106                                           !BCC_ASM
24107                       00000008            _biosfn_write_teletype.flag	set	8
24108                       00000006            _biosfn_write_teletype.attr	set	6
24109                       00000004            _biosfn_write_teletype.page	set	4
24110                       00000002            _biosfn_write_teletype.car	set	2
24111                       000062B9            biosfn_read_overscan_border_color:
24112 62B9           50                           push ax
24113 62BA           53                           push bx
24114 62BB           B3                     11    mov bl, #0x11
24115 62BD           E8         FFD5              call biosfn_get_single_palette_reg
24116 62C0           88F8                         mov al, bh
24117 62C2           5B                           pop bx
24118 62C3           88C7                         mov bh, al
24119 62C5           58                           pop ax
24120 62C6           C3                           ret
24121                                           ! 2921 endasm
24122                                           !BCC_ENDASM
24123                                           ! 2922 #asm
24124                                           !BCC_ASM
24125                       00000008            _biosfn_write_teletype.flag	set	8
24126                       00000006            _biosfn_write_teletype.attr	set	6
24127                       00000004            _biosfn_write_teletype.page	set	4
24128                       00000002            _biosfn_write_teletype.car	set	2
24129                       000062C7            biosfn_get_all_palette_reg:
24130 62C7           50                           push ax
24131 62C8           53                           push bx
24132 62C9           51                           push cx
24133 62CA           52                           push dx
24134 62CB           89D3                         mov bx, dx
24135 62CD           B1                     00    mov cl, #0x00
24136                       000062CF            get_palette_loop:
24137 62CF           BA                   03DA    mov dx, # 0x3da
24138 62D2           EC                           in al, dx
24139 62D3           BA                   03C0    mov dx, # 0x3c0
24140 62D6           88C8                         mov al, cl
24141 62D8           EE                           out dx, al
24142 62D9           BA                   03C1    mov dx, # 0x3c1
24143 62DC           EC                           in al, dx
24144 62DD           26                           seg es
24145 62DE           8807                         mov [bx], al
24146 62E0           43                           inc bx
24147 62E1           FEC1                         inc cl
24148 62E3           80F9                   10    cmp cl, #0x10
24149 62E6           75           E7              jne get_palette_loop
24150 62E8           BA                   03DA    mov dx, # 0x3da
24151 62EB           EC                           in al, dx
24152 62EC           BA                   03C0    mov dx, # 0x3c0
24153 62EF           B0                     11    mov al, #0x11
24154 62F1           EE                           out dx, al
24155 62F2           BA                   03C1    mov dx, # 0x3c1
24156 62F5           EC                           in al, dx
24157 62F6           26                           seg es
24158 62F7           8807                         mov [bx], al
24159 62F9           BA                   03DA    mov dx, # 0x3da
24160 62FC           EC                           in al, dx
24161 62FD           BA                   03C0    mov dx, # 0x3c0
24162 6300           B0                     20    mov al, #0x20
24163 6302           EE                           out dx, al
24164 6303           5A                           pop dx
24165 6304           59                           pop cx
24166 6305           5B                           pop bx
24167 6306           58                           pop ax
24168 6307           C3                           ret
24169                                           ! 2963 endasm
24170                                           !BCC_ENDASM
24171                                           ! 2964 #asm
24172                                           !BCC_ASM
24173                       00000008            _biosfn_write_teletype.flag	set	8
24174                       00000006            _biosfn_write_teletype.attr	set	6
24175                       00000004            _biosfn_write_teletype.page	set	4
24176                       00000002            _biosfn_write_teletype.car	set	2
24177                       00006308            biosfn_set_single_dac_reg:
24178 6308           50                           push ax
24179 6309           52                           push dx
24180 630A           BA                   03C8    mov dx, # 0x3c8
24181 630D           88D8                         mov al, bl
24182 630F           EE                           out dx, al
24183 6310           BA                   03C9    mov dx, # 0x3c9
24184 6313           58                           pop ax
24185 6314           50                           push ax
24186 6315           88E0                         mov al, ah
24187 6317           EE                           out dx, al
24188 6318           88E8                         mov al, ch
24189 631A           EE                           out dx, al
24190 631B           88C8                         mov al, cl
24191 631D           EE                           out dx, al
24192 631E           5A                           pop dx
24193 631F           58                           pop ax
24194 6320           C3                           ret
24195                                           ! 2983 endasm
24196                                           !BCC_ENDASM
24197                                           ! 2984 #asm
24198                                           !BCC_ASM
24199                       00000008            _biosfn_write_teletype.flag	set	8
24200                       00000006            _biosfn_write_teletype.attr	set	6
24201                       00000004            _biosfn_write_teletype.page	set	4
24202                       00000002            _biosfn_write_teletype.car	set	2
24203                       00006321            biosfn_set_all_dac_reg:
24204 6321           50                           push ax
24205 6322           53                           push bx
24206 6323           51                           push cx
24207 6324           52                           push dx
24208 6325           BA                   03C8    mov dx, # 0x3c8
24209 6328           88D8                         mov al, bl
24210 632A           EE                           out dx, al
24211 632B           5A                           pop dx
24212 632C           52                           push dx
24213 632D           89D3                         mov bx, dx
24214 632F           BA                   03C9    mov dx, # 0x3c9
24215                       00006332            set_dac_loop:
24216 6332           26                           seg es
24217 6333           8A07                         mov al, [bx]
24218 6335           EE                           out dx, al
24219 6336           43                           inc bx
24220 6337           26                           seg es
24221 6338           8A07                         mov al, [bx]
24222 633A           EE                           out dx, al
24223 633B           43                           inc bx
24224 633C           26                           seg es
24225 633D           8A07                         mov al, [bx]
24226 633F           EE                           out dx, al
24227 6340           43                           inc bx
24228 6341           49                           dec cx
24229 6342           75           EE              jnz set_dac_loop
24230 6344           5A                           pop dx
24231 6345           59                           pop cx
24232 6346           5B                           pop bx
24233 6347           58                           pop ax
24234 6348           C3                           ret
24235                                           ! 3017 endasm
24236                                           !BCC_ENDASM
24237                                           ! 3018 #asm
24238                                           !BCC_ASM
24239                       00000008            _biosfn_write_teletype.flag	set	8
24240                       00000006            _biosfn_write_teletype.attr	set	6
24241                       00000004            _biosfn_write_teletype.page	set	4
24242                       00000002            _biosfn_write_teletype.car	set	2
24243                       00006349            biosfn_select_video_dac_color_page:
24244 6349           50                           push ax
24245 634A           53                           push bx
24246 634B           52                           push dx
24247 634C           BA                   03DA    mov dx, # 0x3da
24248 634F           EC                           in al, dx
24249 6350           BA                   03C0    mov dx, # 0x3c0
24250 6353           B0                     10    mov al, #0x10
24251 6355           EE                           out dx, al
24252 6356           BA                   03C1    mov dx, # 0x3c1
24253 6359           EC                           in al, dx
24254 635A           80E3                   01    and bl, #0x01
24255 635D           75           18              jnz set_dac_page
24256 635F           24                     7F    and al, #0x7f
24257                                             ;shl bh, 7
24258 6361           D0E7                         shl bh, 1
24259 6363           D0E7                         shl bh, 1
24260 6365           D0E7                         shl bh, 1
24261 6367           D0E7                         shl bh, 1
24262 6369           D0E7                         shl bh, 1
24263 636B           D0E7                         shl bh, 1
24264 636D           D0E7                         shl bh, 1
24265 636F           08F8                         or al, bh
24266 6371           BA                   03C0    mov dx, # 0x3c0
24267 6374           EE                           out dx, al
24268 6375           EB           1A              jmp set_actl_normal
24269                       00006377            set_dac_page:
24270 6377           50                           push ax
24271 6378           BA                   03DA    mov dx, # 0x3da
24272 637B           EC                           in al, dx
24273 637C           BA                   03C0    mov dx, # 0x3c0
24274 637F           B0                     14    mov al, #0x14
24275 6381           EE                           out dx, al
24276 6382           58                           pop ax
24277 6383           24                     80    and al, #0x80
24278 6385           75           04              jnz set_dac_16_page
24279                                             ;shl bh, 2
24280 6387           D0E7                         shl bh, 1
24281 6389           D0E7                         shl bh, 1
24282                       0000638B            set_dac_16_page:
24283 638B           80E7                   0F    and bh, #0x0f
24284 638E           88F8                         mov al, bh
24285 6390           EE                           out dx, al
24286                       00006391            set_actl_normal:
24287 6391           B0                     20    mov al, #0x20
24288 6393           EE                           out dx, al
24289 6394           5A                           pop dx
24290 6395           5B                           pop bx
24291 6396           58                           pop ax
24292 6397           C3                           ret
24293                                           ! 3069 endasm
24294                                           !BCC_ENDASM
24295                                           ! 3070 #asm
24296                                           !BCC_ASM
24297                       00000008            _biosfn_write_teletype.flag	set	8
24298                       00000006            _biosfn_write_teletype.attr	set	6
24299                       00000004            _biosfn_write_teletype.page	set	4
24300                       00000002            _biosfn_write_teletype.car	set	2
24301                       00006398            biosfn_read_single_dac_reg:
24302 6398           50                           push ax
24303 6399           52                           push dx
24304 639A           BA                   03C7    mov dx, # 0x3c7
24305 639D           88D8                         mov al, bl
24306 639F           EE                           out dx, al
24307 63A0           58                           pop ax
24308 63A1           88C4                         mov ah, al
24309 63A3           BA                   03C9    mov dx, # 0x3c9
24310 63A6           EC                           in al, dx
24311 63A7           86E0                         xchg al, ah
24312 63A9           50                           push ax
24313 63AA           EC                           in al, dx
24314 63AB           88C5                         mov ch, al
24315 63AD           EC                           in al, dx
24316 63AE           88C1                         mov cl, al
24317 63B0           5A                           pop dx
24318 63B1           58                           pop ax
24319 63B2           C3                           ret
24320                                           ! 3090 endasm
24321                                           !BCC_ENDASM
24322                                           ! 3091 #asm
24323                                           !BCC_ASM
24324                       00000008            _biosfn_write_teletype.flag	set	8
24325                       00000006            _biosfn_write_teletype.attr	set	6
24326                       00000004            _biosfn_write_teletype.page	set	4
24327                       00000002            _biosfn_write_teletype.car	set	2
24328                       000063B3            biosfn_read_all_dac_reg:
24329 63B3           50                           push ax
24330 63B4           53                           push bx
24331 63B5           51                           push cx
24332 63B6           52                           push dx
24333 63B7           BA                   03C7    mov dx, # 0x3c7
24334 63BA           88D8                         mov al, bl
24335 63BC           EE                           out dx, al
24336 63BD           5A                           pop dx
24337 63BE           52                           push dx
24338 63BF           89D3                         mov bx, dx
24339 63C1           BA                   03C9    mov dx, # 0x3c9
24340                       000063C4            read_dac_loop:
24341 63C4           EC                           in al, dx
24342 63C5           26                           seg es
24343 63C6           8807                         mov [bx], al
24344 63C8           43                           inc bx
24345 63C9           EC                           in al, dx
24346 63CA           26                           seg es
24347 63CB           8807                         mov [bx], al
24348 63CD           43                           inc bx
24349 63CE           EC                           in al, dx
24350 63CF           26                           seg es
24351 63D0           8807                         mov [bx], al
24352 63D2           43                           inc bx
24353 63D3           49                           dec cx
24354 63D4           75           EE              jnz read_dac_loop
24355 63D6           5A                           pop dx
24356 63D7           59                           pop cx
24357 63D8           5B                           pop bx
24358 63D9           58                           pop ax
24359 63DA           C3                           ret
24360                                           ! 3124 endasm
24361                                           !BCC_ENDASM
24362                                           ! 3125 #asm
24363                                           !BCC_ASM
24364                       00000008            _biosfn_write_teletype.flag	set	8
24365                       00000006            _biosfn_write_teletype.attr	set	6
24366                       00000004            _biosfn_write_teletype.page	set	4
24367                       00000002            _biosfn_write_teletype.car	set	2
24368                       000063DB            biosfn_set_pel_mask:
24369 63DB           50                           push ax
24370 63DC           52                           push dx
24371 63DD           BA                   03C6    mov dx, # 0x3c6
24372 63E0           88D8                         mov al, bl
24373 63E2           EE                           out dx, al
24374 63E3           5A                           pop dx
24375 63E4           58                           pop ax
24376 63E5           C3                           ret
24377                                           ! 3135 endasm
24378                                           !BCC_ENDASM
24379                                           ! 3136 #asm
24380                                           !BCC_ASM
24381                       00000008            _biosfn_write_teletype.flag	set	8
24382                       00000006            _biosfn_write_teletype.attr	set	6
24383                       00000004            _biosfn_write_teletype.page	set	4
24384                       00000002            _biosfn_write_teletype.car	set	2
24385                       000063E6            biosfn_read_pel_mask:
24386 63E6           50                           push ax
24387 63E7           52                           push dx
24388 63E8           BA                   03C6    mov dx, # 0x3c6
24389 63EB           EC                           in al, dx
24390 63EC           88C3                         mov bl, al
24391 63EE           5A                           pop dx
24392 63EF           58                           pop ax
24393 63F0           C3                           ret
24394                                           ! 3146 endasm
24395                                           !BCC_ENDASM
24396                                           ! 3147 #asm
24397                                           !BCC_ASM
24398                       00000008            _biosfn_write_teletype.flag	set	8
24399                       00000006            _biosfn_write_teletype.attr	set	6
24400                       00000004            _biosfn_write_teletype.page	set	4
24401                       00000002            _biosfn_write_teletype.car	set	2
24402                       000063F1            biosfn_read_video_dac_state:
24403 63F1           50                           push ax
24404 63F2           52                           push dx
24405 63F3           BA                   03DA    mov dx, # 0x3da
24406 63F6           EC                           in al, dx
24407 63F7           BA                   03C0    mov dx, # 0x3c0
24408 63FA           B0                     10    mov al, #0x10
24409 63FC           EE                           out dx, al
24410 63FD           BA                   03C1    mov dx, # 0x3c1
24411 6400           EC                           in al, dx
24412 6401           88C3                         mov bl, al
24413                                             ;shr bl, 7
24414 6403           D0EB                         shr bl, 1
24415 6405           D0EB                         shr bl, 1
24416 6407           D0EB                         shr bl, 1
24417 6409           D0EB                         shr bl, 1
24418 640B           D0EB                         shr bl, 1
24419 640D           D0EB                         shr bl, 1
24420 640F           D0EB                         shr bl, 1
24421 6411           BA                   03DA    mov dx, # 0x3da
24422 6414           EC                           in al, dx
24423 6415           BA                   03C0    mov dx, # 0x3c0
24424 6418           B0                     14    mov al, #0x14
24425 641A           EE                           out dx, al
24426 641B           BA                   03C1    mov dx, # 0x3c1
24427 641E           EC                           in al, dx
24428 641F           88C7                         mov bh, al
24429 6421           80E7                   0F    and bh, #0x0f
24430 6424           F6C3                   01    test bl, #0x01
24431 6427           75           04              jnz get_dac_16_page
24432                                             ;shr bh, 2
24433 6429           D0EF                         shr bh, 1
24434 642B           D0EF                         shr bh, 1
24435                       0000642D            get_dac_16_page:
24436 642D           BA                   03DA    mov dx, # 0x3da
24437 6430           EC                           in al, dx
24438 6431           BA                   03C0    mov dx, # 0x3c0
24439 6434           B0                     20    mov al, #0x20
24440 6436           EE                           out dx, al
24441 6437           5A                           pop dx
24442 6438           58                           pop ax
24443 6439           C3                           ret
24444                                           ! 3190 endasm
24445                                           !BCC_ENDASM
24446                                           ! 3191 static void biosfn_perform_gray_scale_summing (start,count)
24447                                           ! Register BX used in function biosfn_write_teletype
24448                                           ! 3192 Bit16u start;Bit16u count;
24449                       0000643A            _biosfn_perform_gray_scale_summing:
24450                                           !BCC_EOS
24451                                           !BCC_EOS
24452                                           ! 3193 {Bit8u r,g,b;
24453                                           !BCC_EOS
24454                                           ! 3194  Bit16u i;
24455                                           !BCC_EOS
24456                                           ! 3195  Bit16u index;
24457                                           !BCC_EOS
24458                                           ! 3196  inb(0x3da);
24459 643A           55                         push	bp
24460 643B           89E5                       mov	bp,sp
24461 643D           83C4                   F8  add	sp,*-8
24462                                           ! Debug: list int = const $3DA (used reg = )
24463 6440           B8                   03DA  mov	ax,#$3DA
24464 6443           50                         push	ax
24465                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24466 6444           E8         175B            call	_inb
24467 6447           44                         inc	sp
24468 6448           44                         inc	sp
24469                                           !BCC_EOS
24470                                           ! 3197  outb(0x3c0,0x00);
24471                                           ! Debug: list int = const 0 (used reg = )
24472 6449           31C0                       xor	ax,ax
24473 644B           50                         push	ax
24474                                           ! Debug: list int = const $3C0 (used reg = )
24475 644C           B8                   03C0  mov	ax,#$3C0
24476 644F           50                         push	ax
24477                                           ! Debug: func () void = outb+0 (used reg = )
24478 6450           E8         1765            call	_outb
24479 6453           83C4                   04  add	sp,*4
24480                                           !BCC_EOS
24481                                           ! 3198  for( index = 0; index < count; index++ )
24482                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24483 6456           31C0                       xor	ax,ax
24484 6458           8946         F8            mov	-8[bp],ax
24485                                           !BCC_EOS
24486                                           !BCC_EOS
24487                                           ! 3199   {
24488 645B           E9         00BE            br 	.1F7
24489                       0000645E            .1F8:
24490                                           ! 3200    outb(0x3c7,start);
24491                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24492 645E           FF76         04            push	4[bp]
24493                                           ! Debug: list int = const $3C7 (used reg = )
24494 6461           B8                   03C7  mov	ax,#$3C7
24495 6464           50                         push	ax
24496                                           ! Debug: func () void = outb+0 (used reg = )
24497 6465           E8         1750            call	_outb
24498 6468           83C4                   04  add	sp,*4
24499                                           !BCC_EOS
24500                                           ! 3201    r=inb( 0x3c9 );
24501                                           ! Debug: list int = const $3C9 (used reg = )
24502 646B           B8                   03C9  mov	ax,#$3C9
24503 646E           50                         push	ax
24504                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24505 646F           E8         1730            call	_inb
24506 6472           44                         inc	sp
24507 6473           44                         inc	sp
24508                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24509 6474           8846         FF            mov	-1[bp],al
24510                                           !BCC_EOS
24511                                           ! 3202    g=inb( 0x3c9 );
24512                                           ! Debug: list int = const $3C9 (used reg = )
24513 6477           B8                   03C9  mov	ax,#$3C9
24514 647A           50                         push	ax
24515                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24516 647B           E8         1724            call	_inb
24517 647E           44                         inc	sp
24518 647F           44                         inc	sp
24519                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24520 6480           8846         FE            mov	-2[bp],al
24521                                           !BCC_EOS
24522                                           ! 3203    b=inb( 0x3c9 );
24523                                           ! Debug: list int = const $3C9 (used reg = )
24524 6483           B8                   03C9  mov	ax,#$3C9
24525 6486           50                         push	ax
24526                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24527 6487           E8         1718            call	_inb
24528 648A           44                         inc	sp
24529 648B           44                         inc	sp
24530                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24531 648C           8846         FD            mov	-3[bp],al
24532                                           !BCC_EOS
24533                                           ! 3204    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24534                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24535                                           ! Debug: expression subtree swapping
24536 648F           8A46         FD            mov	al,-3[bp]
24537 6492           30E4                       xor	ah,ah
24538 6494           B9                   001C  mov	cx,*$1C
24539 6497           F7E9                       imul	cx
24540 6499           50                         push	ax
24541                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
24542                                           ! Debug: expression subtree swapping
24543 649A           8A46         FE            mov	al,-2[bp]
24544 649D           30E4                       xor	ah,ah
24545 649F           B9                   0097  mov	cx,#$97
24546 64A2           F7E9                       imul	cx
24547 64A4           50                         push	ax
24548                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
24549                                           ! Debug: expression subtree swapping
24550 64A5           8A46         FF            mov	al,-1[bp]
24551 64A8           30E4                       xor	ah,ah
24552 64AA           B9                   004D  mov	cx,*$4D
24553 64AD           F7E9                       imul	cx
24554                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
24555 64AF           0346         F4            add	ax,-$C[bp]
24556 64B2           44                         inc	sp
24557 64B3           44                         inc	sp
24558                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24559 64B4           0346         F6            add	ax,-$A[bp]
24560 64B7           44                         inc	sp
24561 64B8           44                         inc	sp
24562                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
24563                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
24564 64B9           05                   0080  add	ax,#$80
24565 64BC           88E0                       mov	al,ah
24566 64BE           30E4                       xor	ah,ah
24567                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
24568 64C0           8946         FA            mov	-6[bp],ax
24569                                           !BCC_EOS
24570                                           ! 3205    if(i>0x3f)i=0x3f;
24571                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24572 64C3           8B46         FA            mov	ax,-6[bp]
24573 64C6           3D                   003F  cmp	ax,*$3F
24574 64C9           76           06            jbe 	.1F9
24575                       000064CB            .1FA:
24576                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24577 64CB           B8                   003F  mov	ax,*$3F
24578 64CE           8946         FA            mov	-6[bp],ax
24579                                           !BCC_EOS
24580                                           ! 3206    outb(0x3c8,star
24581                       000064D1            .1F9:
24582                                           ! 3206 t);
24583                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24584 64D1           FF76         04            push	4[bp]
24585                                           ! Debug: list int = const $3C8 (used reg = )
24586 64D4           B8                   03C8  mov	ax,#$3C8
24587 64D7           50                         push	ax
24588                                           ! Debug: func () void = outb+0 (used reg = )
24589 64D8           E8         16DD            call	_outb
24590 64DB           83C4                   04  add	sp,*4
24591                                           !BCC_EOS
24592                                           ! 3207    outb( 0x3c9, i&0xff );
24593                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24594 64DE           8A46         FA            mov	al,-6[bp]
24595                                           ! Debug: list unsigned char = al+0 (used reg = )
24596 64E1           30E4                       xor	ah,ah
24597 64E3           50                         push	ax
24598                                           ! Debug: list int = const $3C9 (used reg = )
24599 64E4           B8                   03C9  mov	ax,#$3C9
24600 64E7           50                         push	ax
24601                                           ! Debug: func () void = outb+0 (used reg = )
24602 64E8           E8         16CD            call	_outb
24603 64EB           83C4                   04  add	sp,*4
24604                                           !BCC_EOS
24605                                           ! 3208    outb( 0x3c9, i&0xff );
24606                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24607 64EE           8A46         FA            mov	al,-6[bp]
24608                                           ! Debug: list unsigned char = al+0 (used reg = )
24609 64F1           30E4                       xor	ah,ah
24610 64F3           50                         push	ax
24611                                           ! Debug: list int = const $3C9 (used reg = )
24612 64F4           B8                   03C9  mov	ax,#$3C9
24613 64F7           50                         push	ax
24614                                           ! Debug: func () void = outb+0 (used reg = )
24615 64F8           E8         16BD            call	_outb
24616 64FB           83C4                   04  add	sp,*4
24617                                           !BCC_EOS
24618                                           ! 3209    outb( 0x3c9, i&0xff );
24619                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24620 64FE           8A46         FA            mov	al,-6[bp]
24621                                           ! Debug: list unsigned char = al+0 (used reg = )
24622 6501           30E4                       xor	ah,ah
24623 6503           50                         push	ax
24624                                           ! Debug: list int = const $3C9 (used reg = )
24625 6504           B8                   03C9  mov	ax,#$3C9
24626 6507           50                         push	ax
24627                                           ! Debug: func () void = outb+0 (used reg = )
24628 6508           E8         16AD            call	_outb
24629 650B           83C4                   04  add	sp,*4
24630                                           !BCC_EOS
24631                                           ! 3210    start++;
24632                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
24633 650E           8B46         04            mov	ax,4[bp]
24634 6511           40                         inc	ax
24635 6512           8946         04            mov	4[bp],ax
24636                                           !BCC_EOS
24637                                           ! 3211   }
24638                                           ! 3212  inb(0x3da);
24639                       00006515            .1F6:
24640                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
24641 6515           8B46         F8            mov	ax,-8[bp]
24642 6518           40                         inc	ax
24643 6519           8946         F8            mov	-8[bp],ax
24644                       0000651C            .1F7:
24645                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
24646 651C           8B46         F8            mov	ax,-8[bp]
24647 651F           3B46         06            cmp	ax,6[bp]
24648 6522   7303    E9         FF37            blo 	.1F8
24649                       00006527            .1FB:
24650                       00006527            .1F5:
24651                                           ! Debug: list int = const $3DA (used reg = )
24652 6527           B8                   03DA  mov	ax,#$3DA
24653 652A           50                         push	ax
24654                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24655 652B           E8         1674            call	_inb
24656 652E           44                         inc	sp
24657 652F           44                         inc	sp
24658                                           !BCC_EOS
24659                                           ! 3213  outb(0x3c0,0x20);
24660                                           ! Debug: list int = const $20 (used reg = )
24661 6530           B8                   0020  mov	ax,*$20
24662 6533           50                         push	ax
24663                                           ! Debug: list int = const $3C0 (used reg = )
24664 6534           B8                   03C0  mov	ax,#$3C0
24665 6537           50                         push	ax
24666                                           ! Debug: func () void = outb+0 (used reg = )
24667 6538           E8         167D            call	_outb
24668 653B           83C4                   04  add	sp,*4
24669                                           !BCC_EOS
24670                                           ! 3214 }
24671 653E           89EC                       mov	sp,bp
24672 6540           5D                         pop	bp
24673 6541           C3                         ret
24674                                           ! 3215 static void get_font_access()
24675                                           ! 3216 {
24676                       00006542            _get_font_access:
24677                                           ! 3217 #asm
24678                                           !BCC_ASM
24679 6542           BA                   03C4   mov dx, # 0x3c4
24680 6545           B8                   0100   mov ax, #0x0100
24681 6548           EF                          out dx, ax
24682 6549           B8                   0402   mov ax, #0x0402
24683 654C           EF                          out dx, ax
24684 654D           B8                   0704   mov ax, #0x0704
24685 6550           EF                          out dx, ax
24686 6551           B8                   0300   mov ax, #0x0300
24687 6554           EF                          out dx, ax
24688 6555           BA                   03CE   mov dx, # 0x3ce
24689 6558           B8                   0204   mov ax, #0x0204
24690 655B           EF                          out dx, ax
24691 655C           B8                   0005   mov ax, #0x0005
24692 655F           EF                          out dx, ax
24693 6560           B8                   0406   mov ax, #0x0406
24694 6563           EF                          out dx, ax
24695                                           ! 3234 endasm
24696                                           !BCC_ENDASM
24697                                           ! 3235 }
24698 6564           C3                         ret
24699                                           ! 3236 static void release_font_access()
24700                                           ! 3237 {
24701                       00006565            _release_font_access:
24702                                           ! 3238 #asm
24703                                           !BCC_ASM
24704 6565           BA                   03C4   mov dx, # 0x3c4
24705 6568           B8                   0100   mov ax, #0x0100
24706 656B           EF                          out dx, ax
24707 656C           B8                   0302   mov ax, #0x0302
24708 656F           EF                          out dx, ax
24709 6570           B8                   0304   mov ax, #0x0304
24710 6573           EF                          out dx, ax
24711 6574           B8                   0300   mov ax, #0x0300
24712 6577           EF                          out dx, ax
24713 6578           BA                   03CC   mov dx, # 0x3cc
24714 657B           EC                          in al, dx
24715 657C           24                     01   and al, #0x01
24716                                            ;shl al, 2
24717 657E           D0E0                        shl al, 1
24718 6580           D0E0                        shl al, 1
24719 6582           0C                     0A   or al, #0x0a
24720 6584           88C4                        mov ah, al
24721 6586           B0                     06   mov al, #0x06
24722 6588           BA                   03CE   mov dx, # 0x3ce
24723 658B           EF                          out dx, ax
24724 658C           B8                   0004   mov ax, #0x0004
24725 658F           EF                          out dx, ax
24726 6590           B8                   1005   mov ax, #0x1005
24727 6593           EF                          out dx, ax
24728                                           ! 3263 endasm
24729                                           !BCC_ENDASM
24730                                           ! 3264 }
24731 6594           C3                         ret
24732                                           ! 3265 #asm
24733                                           !BCC_ASM
24734                       00006595            idiv_u:
24735 6595           31D2                         xor dx,dx
24736 6597           F7F3                         div bx
24737 6599           C3                           ret
24738                                           ! 3270 endasm
24739                                           !BCC_ENDASM
24740                                           ! 3271 static void set_scan_lines(lines) Bit8u lines;
24741                       0000659A            _set_scan_lines:
24742                                           !BCC_EOS
24743                                           ! 3272 {
24744                                           ! 3273  Bit16u crtc_addr,cols,page,vde;
24745                                           !BCC_EOS
24746                                           ! 3274  Bit8u crtc_r9,ovl,rows;
24747                                           !BCC_EOS
24748                                           ! 3275  crtc_addr = read_word(0x40,0x63);
24749 659A           55                         push	bp
24750 659B           89E5                       mov	bp,sp
24751 659D           83C4                   F4  add	sp,*-$C
24752                                           ! Debug: list int = const $63 (used reg = )
24753 65A0           B8                   0063  mov	ax,*$63
24754 65A3           50                         push	ax
24755                                           ! Debug: list int = const $40 (used reg = )
24756 65A4           B8                   0040  mov	ax,*$40
24757 65A7           50                         push	ax
24758                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24759 65A8           E8         15B4            call	_read_word
24760 65AB           83C4                   04  add	sp,*4
24761                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24762 65AE           8946         FE            mov	-2[bp],ax
24763                                           !BCC_EOS
24764                                           ! 3276  outb(crtc_addr, 0x09);
24765                                           ! Debug: list int = const 9 (used reg = )
24766 65B1           B8                   0009  mov	ax,*9
24767 65B4           50                         push	ax
24768                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24769 65B5           FF76         FE            push	-2[bp]
24770                                           ! Debug: func () void = outb+0 (used reg = )
24771 65B8           E8         15FD            call	_outb
24772 65BB           83C4                   04  add	sp,*4
24773                                           !BCC_EOS
24774                                           ! 3277  crtc_r9 = inb(crtc_addr+1);
24775                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24776 65BE           8B46         FE            mov	ax,-2[bp]
24777                                           ! Debug: list unsigned int = ax+1 (used reg = )
24778 65C1           40                         inc	ax
24779 65C2           50                         push	ax
24780                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24781 65C3           E8         15DC            call	_inb
24782 65C6           44                         inc	sp
24783 65C7           44                         inc	sp
24784                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24785 65C8           8846         F7            mov	-9[bp],al
24786                                           !BCC_EOS
24787                                           ! 3278  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
24788                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
24789 65CB           8A46         04            mov	al,4[bp]
24790 65CE           30E4                       xor	ah,ah
24791 65D0           48                         dec	ax
24792 65D1           50                         push	ax
24793                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
24794 65D2           8A46         F7            mov	al,-9[bp]
24795 65D5           24                     E0  and	al,#$E0
24796                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
24797 65D7           30E4                       xor	ah,ah
24798 65D9           0B46         F2            or	ax,-$E[bp]
24799 65DC           44                         inc	sp
24800 65DD           44                         inc	sp
24801                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24802 65DE           8846         F7            mov	-9[bp],al
24803                                           !BCC_EOS
24804                                           ! 3279  outb(crtc_addr+1, crtc_r9);
24805                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24806 65E1           8A46         F7            mov	al,-9[bp]
24807 65E4           30E4                       xor	ah,ah
24808 65E6           50                         push	ax
24809                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
24810 65E7           8B46         FE            mov	ax,-2[bp]
24811                                           ! Debug: list unsigned int = ax+1 (used reg = )
24812 65EA           40                         inc	ax
24813 65EB           50                         push	ax
24814                                           ! Debug: func () void = outb+0 (used reg = )
24815 65EC           E8         15C9            call	_outb
24816 65EF           83C4                   04  add	sp,*4
24817                                           !BCC_EOS
24818                                           ! 3280  if(lines==8)
24819                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
24820 65F2           8A46         04            mov	al,4[bp]
24821 65F5           3C                     08  cmp	al,*8
24822 65F7           75           10            jne 	.1FC
24823                       000065F9            .1FD:
24824                                           ! 3281   {
24825                                           ! 3282    biosfn_set_cursor_shape(0x06,0x07);
24826                                           ! Debug: list int = const 7 (used reg = )
24827 65F9           B8                   0007  mov	ax,*7
24828 65FC           50                         push	ax
24829                                           ! Debug: list int = const 6 (used reg = )
24830 65FD           B8                   0006  mov	ax,*6
24831 6600           50                         push	ax
24832                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24833 6601           E8         DB3F            call	_biosfn_set_cursor_shape
24834 6604           83C4                   04  add	sp,*4
24835                                           !BCC_EOS
24836                                           ! 3283   }
24837                                           ! 3284  else
24838                                           ! 3285   {
24839 6607           EB           18            jmp .1FE
24840                       00006609            .1FC:
24841                                           ! 3286    biosfn_set_cursor_shape(lines-4,lines-3);
24842                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
24843 6609           8A46         04            mov	al,4[bp]
24844 660C           30E4                       xor	ah,ah
24845                                           ! Debug: list unsigned int = ax-3 (used reg = )
24846 660E           05                   FFFD  add	ax,*-3
24847 6611           50                         push	ax
24848                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
24849 6612           8A46         04            mov	al,4[bp]
24850 6615           30E4                       xor	ah,ah
24851                                           ! Debug: list unsigned int = ax-4 (used reg = )
24852 6617           05                   FFFC  add	ax,*-4
24853 661A           50                         push	ax
24854                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24855 661B           E8         DB25            call	_biosfn_set_cursor_shape
24856 661E           83C4                   04  add	sp,*4
24857                                           !BCC_EOS
24858                                           ! 3287   }
24859                                           ! 3288  write_word(0x40,0x85, lines);
24860                       00006621            .1FE:
24861                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
24862 6621           8A46         04            mov	al,4[bp]
24863 6624           30E4                       xor	ah,ah
24864 6626           50                         push	ax
24865                                           ! Debug: list int = const $85 (used reg = )
24866 6627           B8                   0085  mov	ax,#$85
24867 662A           50                         push	ax
24868                                           ! Debug: list int = const $40 (used reg = )
24869 662B           B8                   0040  mov	ax,*$40
24870 662E           50                         push	ax
24871                                           ! Debug: func () void = write_word+0 (used reg = )
24872 662F           E8         1558            call	_write_word
24873 6632           83C4                   06  add	sp,*6
24874                                           !BCC_EOS
24875                                           ! 3289  outb(crtc_addr, 0x12);
24876                                           ! Debug: list int = const $12 (used reg = )
24877 6635           B8                   0012  mov	ax,*$12
24878 6638           50                         push	ax
24879                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24880 6639           FF76         FE            push	-2[bp]
24881                                           ! Debug: func () void = outb+0 (used reg = )
24882 663C           E8         1579            call	_outb
24883 663F           83C4                   04  add	sp,*4
24884                                           !BCC_EOS
24885                                           ! 3290  vde = inb(crtc_addr+1);
24886                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24887 6642           8B46         FE            mov	ax,-2[bp]
24888                                           ! Debug: list unsigned int = ax+1 (used reg = )
24889 6645           40                         inc	ax
24890 6646           50                         push	ax
24891                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24892 6647           E8         1558            call	_inb
24893 664A           44                         inc	sp
24894 664B           44                         inc	sp
24895                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
24896 664C           30E4                       xor	ah,ah
24897 664E           8946         F8            mov	-8[bp],ax
24898                                           !BCC_EOS
24899                                           ! 3291  outb(crtc_addr, 0x07);
24900                                           ! Debug: list int = const 7 (used reg = )
24901 6651           B8                   0007  mov	ax,*7
24902 6654           50                         push	ax
24903                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24904 6655           FF76         FE            push	-2[bp]
24905                                           ! Debug: func () void = outb+0 (used reg = )
24906 6658           E8         155D            call	_outb
24907 665B           83C4                   04  add	sp,*4
24908                                           !BCC_EOS
24909                                           ! 3292  ovl = inb(crtc_addr+1);
24910                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24911 665E           8B46         FE            mov	ax,-2[bp]
24912                                           ! Debug: list unsigned int = ax+1 (used reg = )
24913 6661           40                         inc	ax
24914 6662           50                         push	ax
24915                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24916 6663           E8         153C            call	_inb
24917 6666           44                         inc	sp
24918 6667           44                         inc	sp
24919                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
24920 6668           8846         F6            mov	-$A[bp],al
24921                                           !BCC_EOS
24922                                           ! 3293  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
24923                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
24924 666B           8A46         F6            mov	al,-$A[bp]
24925 666E           24                     40  and	al,*$40
24926                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
24927 6670           30E4                       xor	ah,ah
24928 6672           B1                     03  mov	cl,*3
24929 6674           D3E0                       shl	ax,cl
24930 6676           50                         push	ax
24931                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
24932 6677           8A46         F6            mov	al,-$A[bp]
24933 667A           24                     02  and	al,*2
24934                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
24935 667C           30E4                       xor	ah,ah
24936 667E           B1                     07  mov	cl,*7
24937 6680           D3E0                       shl	ax,cl
24938                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
24939 6682           0346         F2            add	ax,-$E[bp]
24940 6685           44                         inc	sp
24941 6686           44                         inc	sp
24942                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24943                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
24944 6687           40                         inc	ax
24945 6688           0346         F8            add	ax,-8[bp]
24946 668B           8946         F8            mov	-8[bp],ax
24947                                           !BCC_EOS
24948                                           ! 3294  rows = vde / lines;
24949                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
24950 668E           8A46         04            mov	al,4[bp]
24951 6691           30E4                       xor	ah,ah
24952 6693           89C3                       mov	bx,ax
24953 6695           8B46         F8            mov	ax,-8[bp]
24954 6698           E8         FEFA            call	idiv_u
24955                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
24956 669B           8846         F5            mov	-$B[bp],al
24957                                           !BCC_EOS
24958                                           ! 3295  write_byte(0x40,0x84, rows-1);
24959                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
24960 669E           8A46         F5            mov	al,-$B[bp]
24961 66A1           30E4                       xor	ah,ah
24962                                           ! Debug: list unsigned int = ax-1 (used reg = )
24963 66A3           48                         dec	ax
24964 66A4           50                         push	ax
24965                                           ! Debug: list int = const $84 (used reg = )
24966 66A5           B8                   0084  mov	ax,#$84
24967 66A8           50                         push	ax
24968                                           ! Debug: list int = const $40 (used reg = )
24969 66A9           B8                   0040  mov	ax,*$40
24970 66AC           50                         push	ax
24971                                           ! Debug: func () void = write_byte+0 (used reg = )
24972 66AD           E8         14C2            call	_write_byte
24973 66B0           83C4                   06  add	sp,*6
24974                                           !BCC_EOS
24975                                           ! 3296  cols = read_word(0x40,0x4A);
24976                                           ! Debug: list int = const $4A (used reg = )
24977 66B3           B8                   004A  mov	ax,*$4A
24978 66B6           50                         push	ax
24979                                           ! Debug: list int = const $40 (used reg = )
24980 66B7           B8                   0040  mov	ax,*$40
24981 66BA           50                         push	ax
24982                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24983 66BB           E8         14A1            call	_read_word
24984 66BE           83C4                   04  add	sp,*4
24985                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
24986 66C1           8946         FC            mov	-4[bp],ax
24987                                           !BCC_EOS
24988                                           ! 3297  write_word(0x40,0x4C, rows * cols * 2);
24989                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
24990 66C4           8A46         F5            mov	al,-$B[bp]
24991 66C7           30E4                       xor	ah,ah
24992 66C9           8B4E         FC            mov	cx,-4[bp]
24993 66CC           F7E9                       imul	cx
24994                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24995 66CE           D1E0                       shl	ax,*1
24996                                           ! Debug: list unsigned int = ax+0 (used reg = )
24997 66D0           50                         push	ax
24998                                           ! Debug: list int = const $4C (used reg = )
24999 66D1           B8                   004C  mov	ax,*$4C
25000 66D4           50                         push	ax
25001                                           ! Debug: list int = const $40 (used reg = )
25002 66D5           B8                   0040  mov	ax,*$40
25003 66D8           50                         push	ax
25004                                           ! Debug: func () void = write_word+0 (used reg = )
25005 66D9           E8         14AE            call	_write_word
25006 66DC           83C4                   06  add	sp,*6
25007                                           !BCC_EOS
25008                                           ! 3298 }
25009 66DF           89EC                       mov	sp,bp
25010 66E1           5D                         pop	bp
25011 66E2           C3                         ret
25012                                           ! 3299 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25013                                           ! Register BX used in function set_scan_lines
25014                       000066E3            _biosfn_load_text_user_pat:
25015                                           !BCC_EOS
25016                                           !BCC_EOS
25017                                           !BCC_EOS
25018                                           !BCC_EOS
25019                                           !BCC_EOS
25020                                           !BCC_EOS
25021                                           !BCC_EOS
25022                                           ! 3300 {
25023                                           ! 3301  Bit16u blockaddr,dest,i,src;
25024                                           !BCC_EOS
25025                                           ! 3302  get_font_access();
25026 66E3           55                         push	bp
25027 66E4           89E5                       mov	bp,sp
25028 66E6           83C4                   F8  add	sp,*-8
25029                                           ! Debug: func () void = get_font_access+0 (used reg = )
25030 66E9           E8         FE56            call	_get_font_access
25031                                           !BCC_EOS
25032                                           ! 3303  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25033                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25034 66EC           8A46         0E            mov	al,$E[bp]
25035 66EF           24                     04  and	al,*4
25036                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25037 66F1           30E4                       xor	ah,ah
25038 66F3           88C4                       mov	ah,al
25039 66F5           30C0                       xor	al,al
25040 66F7           B1                     03  mov	cl,*3
25041 66F9           D3E0                       shl	ax,cl
25042 66FB           50                         push	ax
25043                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25044 66FC           8A46         0E            mov	al,$E[bp]
25045 66FF           24                     03  and	al,*3
25046                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25047 6701           30E4                       xor	ah,ah
25048 6703           88C4                       mov	ah,al
25049 6705           30C0                       xor	al,al
25050 6707           B1                     06  mov	cl,*6
25051 6709           D3E0                       shl	ax,cl
25052                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25053 670B           0346         F6            add	ax,-$A[bp]
25054 670E           44                         inc	sp
25055 670F           44                         inc	sp
25056                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25057 6710           8946         FE            mov	-2[bp],ax
25058                                           !BCC_EOS
25059                                           ! 3304  for(i=0;i<CX;i++)
25060                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25061 6713           31C0                       xor	ax,ax
25062 6715           8946         FA            mov	-6[bp],ax
25063                                           !BCC_EOS
25064                                           !BCC_EOS
25065                                           ! 3305   {
25066 6718           EB           44            jmp .201
25067                       0000671A            .202:
25068                                           ! 3306    src = BP + i * BH;
25069                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25070 671A           8A46         10            mov	al,$10[bp]
25071 671D           30E4                       xor	ah,ah
25072 671F           89C3                       mov	bx,ax
25073 6721           8B46         FA            mov	ax,-6[bp]
25074 6724           89D9                       mov	cx,bx
25075 6726           F7E9                       imul	cx
25076                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25077                                           ! Debug: expression subtree swapping
25078 6728           0346         08            add	ax,8[bp]
25079                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25080 672B           8946         F8            mov	-8[bp],ax
25081                                           !BCC_EOS
25082                                           ! 3307    dest = blockaddr + (DX + i) * 32;
25083                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25084 672E           8B46         0C            mov	ax,$C[bp]
25085 6731           0346         FA            add	ax,-6[bp]
25086                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25087 6734           B1                     05  mov	cl,*5
25088 6736           D3E0                       shl	ax,cl
25089                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25090                                           ! Debug: expression subtree swapping
25091 6738           0346         FE            add	ax,-2[bp]
25092                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25093 673B           8946         FC            mov	-4[bp],ax
25094                                           !BCC_EOS
25095                                           ! 3308    memcpyb(0xA000, dest, ES, src, BH);
25096                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25097 673E           8A46         10            mov	al,$10[bp]
25098 6741           30E4                       xor	ah,ah
25099 6743           50                         push	ax
25100                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25101 6744           FF76         F8            push	-8[bp]
25102                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25103 6747           FF76         06            push	6[bp]
25104                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25105 674A           FF76         FC            push	-4[bp]
25106                                           ! Debug: list unsigned int = const $A000 (used reg = )
25107 674D           B8                   A000  mov	ax,#$A000
25108 6750           50                         push	ax
25109                                           ! Debug: func () void = memcpyb+0 (used reg = )
25110 6751           E8         1398            call	_memcpyb
25111 6754           83C4                   0A  add	sp,*$A
25112                                           !BCC_EOS
25113                                           ! 3309   }
25114                                           ! 3310  release_font_access();
25115                       00006757            .200:
25116                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25117 6757           8B46         FA            mov	ax,-6[bp]
25118 675A           40                         inc	ax
25119 675B           8946         FA            mov	-6[bp],ax
25120                       0000675E            .201:
25121                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25122 675E           8B46         FA            mov	ax,-6[bp]
25123 6761           3B46         0A            cmp	ax,$A[bp]
25124 6764           72           B4            jb 	.202
25125                       00006766            .203:
25126                       00006766            .1FF:
25127                                           ! Debug: func () void = release_font_access+0 (used reg = )
25128 6766           E8         FDFC            call	_release_font_access
25129                                           !BCC_EOS
25130                                           ! 3311  if(AL>=0x10)
25131                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25132 6769           8A46         04            mov	al,4[bp]
25133 676C           3C                     10  cmp	al,*$10
25134 676E           72           0B            jb  	.204
25135                       00006770            .205:
25136                                           ! 3312   {
25137                                           ! 3313    set_scan_lines(BH);
25138                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25139 6770           8A46         10            mov	al,$10[bp]
25140 6773           30E4                       xor	ah,ah
25141 6775           50                         push	ax
25142                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25143 6776           E8         FE21            call	_set_scan_lines
25144 6779           44                         inc	sp
25145 677A           44                         inc	sp
25146                                           !BCC_EOS
25147                                           ! 3314   }
25148                                           ! 3315 }
25149                       0000677B            .204:
25150 677B           89EC                       mov	sp,bp
25151 677D           5D                         pop	bp
25152 677E           C3                         ret
25153                                           ! 3316 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL
25154                                           ! Register BX used in function biosfn_load_text_user_pat
25155                       0000677F            _biosfn_load_text_8_14_pat:
25156                                           !BCC_EOS
25157                                           ! 3316 ;
25158                                           !BCC_EOS
25159                                           ! 3317 {
25160                                           ! 3318  Bit16u blockaddr,dest,i,src;
25161                                           !BCC_EOS
25162                                           ! 3319  get_font_access();
25163 677F           55                         push	bp
25164 6780           89E5                       mov	bp,sp
25165 6782           83C4                   F8  add	sp,*-8
25166                                           ! Debug: func () void = get_font_access+0 (used reg = )
25167 6785           E8         FDBA            call	_get_font_access
25168                                           !BCC_EOS
25169                                           ! 3320  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25170                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25171 6788           8A46         06            mov	al,6[bp]
25172 678B           24                     04  and	al,*4
25173                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25174 678D           30E4                       xor	ah,ah
25175 678F           88C4                       mov	ah,al
25176 6791           30C0                       xor	al,al
25177 6793           B1                     03  mov	cl,*3
25178 6795           D3E0                       shl	ax,cl
25179 6797           50                         push	ax
25180                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25181 6798           8A46         06            mov	al,6[bp]
25182 679B           24                     03  and	al,*3
25183                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25184 679D           30E4                       xor	ah,ah
25185 679F           88C4                       mov	ah,al
25186 67A1           30C0                       xor	al,al
25187 67A3           B1                     06  mov	cl,*6
25188 67A5           D3E0                       shl	ax,cl
25189                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25190 67A7           0346         F6            add	ax,-$A[bp]
25191 67AA           44                         inc	sp
25192 67AB           44                         inc	sp
25193                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25194 67AC           8946         FE            mov	-2[bp],ax
25195                                           !BCC_EOS
25196                                           ! 3321  for(i=0;i<0x100;i++)
25197                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25198 67AF           31C0                       xor	ax,ax
25199 67B1           8946         FA            mov	-6[bp],ax
25200                                           !BCC_EOS
25201                                           !BCC_EOS
25202                                           ! 3322   {
25203 67B4           EB           41            jmp .208
25204                       000067B6            .209:
25205                                           ! 3323    src = i * 14;
25206                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25207 67B6           8B46         FA            mov	ax,-6[bp]
25208 67B9           89C2                       mov	dx,ax
25209 67BB           B1                     03  mov	cl,*3
25210 67BD           D3E0                       shl	ax,cl
25211 67BF           29D0                       sub	ax,dx
25212 67C1           D1E0                       shl	ax,*1
25213                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25214 67C3           8946         F8            mov	-8[bp],ax
25215                                           !BCC_EOS
25216                                           ! 3324    dest = blockaddr + i * 32;
25217                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25218 67C6           8B46         FA            mov	ax,-6[bp]
25219 67C9           B1                     05  mov	cl,*5
25220 67CB           D3E0                       shl	ax,cl
25221                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25222                                           ! Debug: expression subtree swapping
25223 67CD           0346         FE            add	ax,-2[bp]
25224                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25225 67D0           8946         FC            mov	-4[bp],ax
25226                                           !BCC_EOS
25227                                           ! 3325    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25228                                           ! Debug: list int = const $E (used reg = )
25229 67D3           B8                   000E  mov	ax,*$E
25230 67D6           50                         push	ax
25231                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25232 67D7           8B5E         F8            mov	bx,-8[bp]
25233                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25234                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25235 67DA           81C3                 172A  add	bx,#_vgafont14
25236 67DE           53                         push	bx
25237                                           ! Debug: list unsigned int = const $C000 (used reg = )
25238 67DF           B8                   C000  mov	ax,#$C000
25239 67E2           50                         push	ax
25240                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25241 67E3           FF76         FC            push	-4[bp]
25242                                           ! Debug: list unsigned int = const $A000 (used reg = )
25243 67E6           B8                   A000  mov	ax,#$A000
25244 67E9           50                         push	ax
25245                                           ! Debug: func () void = memcpyb+0 (used reg = )
25246 67EA           E8         12FF            call	_memcpyb
25247 67ED           83C4                   0A  add	sp,*$A
25248                                           !BCC_EOS
25249                                           ! 3326   }
25250                                           ! 3327  release_font_access();
25251                       000067F0            .207:
25252                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25253 67F0           8B46         FA            mov	ax,-6[bp]
25254 67F3           40                         inc	ax
25255 67F4           8946         FA            mov	-6[bp],ax
25256                       000067F7            .208:
25257                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25258 67F7           8B46         FA            mov	ax,-6[bp]
25259 67FA           3D                   0100  cmp	ax,#$100
25260 67FD           72           B7            jb 	.209
25261                       000067FF            .20A:
25262                       000067FF            .206:
25263                                           ! Debug: func () void = release_font_access+0 (used reg = )
25264 67FF           E8         FD63            call	_release_font_access
25265                                           !BCC_EOS
25266                                           ! 3328  if(AL>=0x10)
25267                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25268 6802           8A46         04            mov	al,4[bp]
25269 6805           3C                     10  cmp	al,*$10
25270 6807           72           09            jb  	.20B
25271                       00006809            .20C:
25272                                           ! 3329   {
25273                                           ! 3330    set_scan_lines(14);
25274                                           ! Debug: list int = const $E (used reg = )
25275 6809           B8                   000E  mov	ax,*$E
25276 680C           50                         push	ax
25277                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25278 680D           E8         FD8A            call	_set_scan_lines
25279 6810           44                         inc	sp
25280 6811           44                         inc	sp
25281                                           !BCC_EOS
25282                                           ! 3331   }
25283                                           ! 3332 }
25284                       00006812            .20B:
25285 6812           89EC                       mov	sp,bp
25286 6814           5D                         pop	bp
25287 6815           C3                         ret
25288                                           ! 3333 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25289                                           ! Register BX used in function biosfn_load_text_8_14_pat
25290                       00006816            _biosfn_load_text_8_8_pat:
25291                                           !BCC_EOS
25292                                           !BCC_EOS
25293                                           ! 3334 {
25294                                           ! 3335  Bit16u blockaddr,dest,i,src;
25295                                           !BCC_EOS
25296                                           ! 3336  get_font_access();
25297 6816           55                         push	bp
25298 6817           89E5                       mov	bp,sp
25299 6819           83C4                   F8  add	sp,*-8
25300                                           ! Debug: func () void = get_font_access+0 (used reg = )
25301 681C           E8         FD23            call	_get_font_access
25302                                           !BCC_EOS
25303                                           ! 3337  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25304                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25305 681F           8A46         06            mov	al,6[bp]
25306 6822           24                     04  and	al,*4
25307                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25308 6824           30E4                       xor	ah,ah
25309 6826           88C4                       mov	ah,al
25310 6828           30C0                       xor	al,al
25311 682A           B1                     03  mov	cl,*3
25312 682C           D3E0                       shl	ax,cl
25313 682E           50                         push	ax
25314                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25315 682F           8A46         06            mov	al,6[bp]
25316 6832           24                     03  and	al,*3
25317                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25318 6834           30E4                       xor	ah,ah
25319 6836           88C4                       mov	ah,al
25320 6838           30C0                       xor	al,al
25321 683A           B1                     06  mov	cl,*6
25322 683C           D3E0                       shl	ax,cl
25323                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25324 683E           0346         F6            add	ax,-$A[bp]
25325 6841           44                         inc	sp
25326 6842           44                         inc	sp
25327                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25328 6843           8946         FE            mov	-2[bp],ax
25329                                           !BCC_EOS
25330                                           ! 3338  for(i=0;i<0x100;i++)
25331                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25332 6846           31C0                       xor	ax,ax
25333 6848           8946         FA            mov	-6[bp],ax
25334                                           !BCC_EOS
25335                                           !BCC_EOS
25336                                           ! 3339   {
25337 684B           EB           3B            jmp .20F
25338                       0000684D            .210:
25339                                           ! 3340    src = i * 8;
25340                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25341 684D           8B46         FA            mov	ax,-6[bp]
25342 6850           B1                     03  mov	cl,*3
25343 6852           D3E0                       shl	ax,cl
25344                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25345 6854           8946         F8            mov	-8[bp],ax
25346                                           !BCC_EOS
25347                                           ! 3341    dest = blockaddr + i * 32;
25348                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25349 6857           8B46         FA            mov	ax,-6[bp]
25350 685A           B1                     05  mov	cl,*5
25351 685C           D3E0                       shl	ax,cl
25352                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25353                                           ! Debug: expression subtree swapping
25354 685E           0346         FE            add	ax,-2[bp]
25355                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25356 6861           8946         FC            mov	-4[bp],ax
25357                                           !BCC_EOS
25358                                           ! 3342    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25359                                           ! Debug: list int = const 8 (used reg = )
25360 6864           B8                   0008  mov	ax,*8
25361 6867           50                         push	ax
25362                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25363 6868           8B5E         F8            mov	bx,-8[bp]
25364                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25365                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25366 686B           81C3                 0F2A  add	bx,#_vgafont8
25367 686F           53                         push	bx
25368                                           ! Debug: list unsigned int = const $C000 (used reg = )
25369 6870           B8                   C000  mov	ax,#$C000
25370 6873           50                         push	ax
25371                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25372 6874           FF76         FC            push	-4[bp]
25373                                           ! Debug: list unsigned int = const $A000 (used reg = )
25374 6877           B8                   A000  mov	ax,#$A000
25375 687A           50                         push	ax
25376                                           ! Debug: func () void = memcpyb+0 (used reg = )
25377 687B           E8         126E            call	_memcpyb
25378 687E           83C4                   0A  add	sp,*$A
25379                                           !BCC_EOS
25380                                           ! 3343   }
25381                                           ! 3344  release_font_access();
25382                       00006881            .20E:
25383                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25384 6881           8B46         FA            mov	ax,-6[bp]
25385 6884           40                         inc	ax
25386 6885           8946         FA            mov	-6[bp],ax
25387                       00006888            .20F:
25388                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25389 6888           8B46         FA            mov	ax,-6[bp]
25390 688B           3D                   0100  cmp	ax,#$100
25391 688E           72           BD            jb 	.210
25392                       00006890            .211:
25393                       00006890            .20D:
25394                                           ! Debug: func () void = release_font_access+0 (used reg = )
25395 6890           E8         FCD2            call	_release_font_access
25396                                           !BCC_EOS
25397                                           ! 3345  if(AL>=0x10)
25398                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25399 6893           8A46         04            mov	al,4[bp]
25400 6896           3C                     10  cmp	al,*$10
25401 6898           72           09            jb  	.212
25402                       0000689A            .213:
25403                                           ! 3346   {
25404                                           ! 3347    set_scan_lines(8);
25405                                           ! Debug: list int = const 8 (used reg = )
25406 689A           B8                   0008  mov	ax,*8
25407 689D           50                         push	ax
25408                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25409 689E           E8         FCF9            call	_set_scan_lines
25410 68A1           44                         inc	sp
25411 68A2           44                         inc	sp
25412                                           !BCC_EOS
25413                                           ! 3348   }
25414                                           ! 3349 }
25415                       000068A3            .212:
25416 68A3           89EC                       mov	sp,bp
25417 68A5           5D                         pop	bp
25418 68A6           C3                         ret
25419                                           ! 3350 #asm
25420                                           !BCC_ASM
25421                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25422                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25423                       000068A7            biosfn_set_text_block_specifier:
25424 68A7           50                           push ax
25425 68A8           52                           push dx
25426 68A9           BA                   03C4    mov dx, # 0x3c4
25427 68AC           88DC                         mov ah, bl
25428 68AE           B0                     03    mov al, #0x03
25429 68B0           EF                           out dx, ax
25430 68B1           5A                           pop dx
25431 68B2           58                           pop ax
25432 68B3           C3                           ret
25433                                           ! 3361 endasm
25434                                           !BCC_ENDASM
25435                                           ! 3362 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25436                                           ! Register BX used in function biosfn_load_text_8_8_pat
25437                       000068B4            _biosfn_load_text_8_16_pat:
25438                                           !BCC_EOS
25439                                           !BCC_EOS
25440                                           ! 3363 {
25441                                           ! 3364  Bit16u blockaddr,dest,i,src;
25442                                           !BCC_EOS
25443                                           ! 3365  get_font_access();
25444 68B4           55                         push	bp
25445 68B5           89E5                       mov	bp,sp
25446 68B7           83C4                   F8  add	sp,*-8
25447                                           ! Debug: func () void = get_font_access+0 (used reg = )
25448 68BA           E8         FC85            call	_get_font_access
25449                                           !BCC_EOS
25450                                           ! 3366  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25451                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25452 68BD           8A46         06            mov	al,6[bp]
25453 68C0           24                     04  and	al,*4
25454                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25455 68C2           30E4                       xor	ah,ah
25456 68C4           88C4                       mov	ah,al
25457 68C6           30C0                       xor	al,al
25458 68C8           B1                     03  mov	cl,*3
25459 68CA           D3E0                       shl	ax,cl
25460 68CC           50                         push	ax
25461                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25462 68CD           8A46         06            mov	al,6[bp]
25463 68D0           24                     03  and	al,*3
25464                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25465 68D2           30E4                       xor	ah,ah
25466 68D4           88C4                       mov	ah,al
25467 68D6           30C0                       xor	al,al
25468 68D8           B1                     06  mov	cl,*6
25469 68DA           D3E0                       shl	ax,cl
25470                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25471 68DC           0346         F6            add	ax,-$A[bp]
25472 68DF           44                         inc	sp
25473 68E0           44                         inc	sp
25474                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25475 68E1           8946         FE            mov	-2[bp],ax
25476                                           !BCC_EOS
25477                                           ! 3367  for(i=0;i<0x100;i++)
25478                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25479 68E4           31C0                       xor	ax,ax
25480 68E6           8946         FA            mov	-6[bp],ax
25481                                           !BCC_EOS
25482                                           !BCC_EOS
25483                                           ! 3368   {
25484 68E9           EB           3B            jmp .216
25485                       000068EB            .217:
25486                                           ! 3369    src = i * 16;
25487                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25488 68EB           8B46         FA            mov	ax,-6[bp]
25489 68EE           B1                     04  mov	cl,*4
25490 68F0           D3E0                       shl	ax,cl
25491                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25492 68F2           8946         F8            mov	-8[bp],ax
25493                                           !BCC_EOS
25494                                           ! 3370    dest = blockaddr + i * 32;
25495                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25496 68F5           8B46         FA            mov	ax,-6[bp]
25497 68F8           B1                     05  mov	cl,*5
25498 68FA           D3E0                       shl	ax,cl
25499                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25500                                           ! Debug: expression subtree swapping
25501 68FC           0346         FE            add	ax,-2[bp]
25502                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25503 68FF           8946         FC            mov	-4[bp],ax
25504                                           !BCC_EOS
25505                                           ! 3371    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25506                                           ! Debug: list int = const $10 (used reg = )
25507 6902           B8                   0010  mov	ax,*$10
25508 6905           50                         push	ax
25509                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25510 6906           8B5E         F8            mov	bx,-8[bp]
25511                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25512                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25513 6909           81C3                 252A  add	bx,#_vgafont16
25514 690D           53                         push	bx
25515                                           ! Debug: list unsigned int = const $C000 (used reg = )
25516 690E           B8                   C000  mov	ax,#$C000
25517 6911           50                         push	ax
25518                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25519 6912           FF76         FC            push	-4[bp]
25520                                           ! Debug: list unsigned int = const $A000 (used reg = )
25521 6915           B8                   A000  mov	ax,#$A000
25522 6918           50                         push	ax
25523                                           ! Debug: func () void = memcpyb+0 (used reg = )
25524 6919           E8         11D0            call	_memcpyb
25525 691C           83C4                   0A  add	sp,*$A
25526                                           !BCC_EOS
25527                                           ! 3372   }
25528                                           ! 3373  release_font_access();
25529                       0000691F            .215:
25530                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25531 691F           8B46         FA            mov	ax,-6[bp]
25532 6922           40                         inc	ax
25533 6923           8946         FA            mov	-6[bp],ax
25534                       00006926            .216:
25535                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25536 6926           8B46         FA            mov	ax,-6[bp]
25537 6929           3D                   0100  cmp	ax,#$100
25538 692C           72           BD            jb 	.217
25539                       0000692E            .218:
25540                       0000692E            .214:
25541                                           ! Debug: func () void = release_font_access+0 (used reg = )
25542 692E           E8         FC34            call	_release_font_access
25543                                           !BCC_EOS
25544                                           ! 3374  if(AL>=0x10)
25545                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25546 6931           8A46         04            mov	al,4[bp]
25547 6934           3C                     10  cmp	al,*$10
25548 6936           72           09            jb  	.219
25549                       00006938            .21A:
25550                                           ! 3375   {
25551                                           ! 3376    set_scan_lines(16);
25552                                           ! Debug: list int = const $10 (used reg = )
25553 6938           B8                   0010  mov	ax,*$10
25554 693B           50                         push	ax
25555                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25556 693C           E8         FC5B            call	_set_scan_lines
25557 693F           44                         inc	sp
25558 6940           44                         inc	sp
25559                                           !BCC_EOS
25560                                           ! 3377   }
25561                                           ! 3378 }
25562                       00006941            .219:
25563 6941           89EC                       mov	sp,bp
25564 6943           5D                         pop	bp
25565 6944           C3                         ret
25566                                           ! 3379 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
25567                                           ! Register BX used in function biosfn_load_text_8_16_pat
25568                       00006945            _biosfn_load_gfx_8_8_chars:
25569                                           !BCC_EOS
25570                                           !BCC_EOS
25571                                           ! 3380 {
25572                                           ! 3381 }
25573 6945           C3                         ret
25574                                           ! 3382 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
25575                       00006946            _biosfn_load_gfx_user_chars:
25576                                           !BCC_EOS
25577                                           !BCC_EOS
25578                                           !BCC_EOS
25579                                           !BCC_EOS
25580                                           !BCC_EOS
25581                                           ! 3383 {
25582                                           ! 3384 }
25583 6946           C3                         ret
25584                                           ! 3385 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
25585                       00006947            _biosfn_load_gfx_8_14_chars:
25586                                           !BCC_EOS
25587                                           ! 3386 {
25588                                           ! 3387 }
25589 6947           C3                         ret
25590                                           ! 3388 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
25591                       00006948            _biosfn_load_gfx_8_8_dd_chars:
25592                                           !BCC_EOS
25593                                           ! 3389 {
25594                                           ! 3390 }
25595 6948           C3                         ret
25596                                           ! 3391 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
25597                       00006949            _biosfn_load_gfx_8_16_chars:
25598                                           !BCC_EOS
25599                                           ! 3392 {
25600                                           ! 3393 }
25601 6949           C3                         ret
25602                                           ! 3394 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
25603                                           ! 3395 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
25604                       0000694A            _biosfn_get_font_info:
25605                                           !BCC_EOS
25606                                           !BCC_EOS
25607                                           !BCC_EOS
25608                                           !BCC_EOS
25609                                           !BCC_EOS
25610                                           ! 3396 {Bit16u ss=get_SS();
25611 694A           55                         push	bp
25612 694B           89E5                       mov	bp,sp
25613 694D           4C                         dec	sp
25614 694E           4C                         dec	sp
25615                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
25616 694F           E8         1286            call	_get_SS
25617                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
25618 6952           8946         FE            mov	-2[bp],ax
25619                                           !BCC_EOS
25620                                           ! 3397  switch(BH)
25621 6955           8A46         04            mov	al,4[bp]
25622                                           ! 3398   {case 0x00:
25623 6958           E9         0143            br 	.21D
25624                                           ! 3399     write_word(ss,ES,read_word(0x00,0x1f*4));
25625                       0000695B            .21E:
25626                                           ! Debug: list int = const $7C (used reg = )
25627 695B           B8                   007C  mov	ax,*$7C
25628 695E           50                         push	ax
25629                                           ! Debug: list int = const 0 (used reg = )
25630 695F           31C0                       xor	ax,ax
25631 6961           50                         push	ax
25632                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25633 6962           E8         11FA            call	_read_word
25634 6965           83C4                   04  add	sp,*4
25635                                           ! Debug: list unsigned short = ax+0 (used reg = )
25636 6968           50                         push	ax
25637                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25638 6969           FF76         06            push	6[bp]
25639                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25640 696C           FF76         FE            push	-2[bp]
25641                                           ! Debug: func () void = write_word+0 (used reg = )
25642 696F           E8         1218            call	_write_word
25643 6972           83C4                   06  add	sp,*6
25644                                           !BCC_EOS
25645                                           ! 3400     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
25646                                           ! Debug: list int = const $7E (used reg = )
25647 6975           B8                   007E  mov	ax,*$7E
25648 6978           50                         push	ax
25649                                           ! Debug: list int = const 0 (used reg = )
25650 6979           31C0                       xor	ax,ax
25651 697B           50                         push	ax
25652                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25653 697C           E8         11E0            call	_read_word
25654 697F           83C4                   04  add	sp,*4
25655                                           ! Debug: list unsigned short = ax+0 (used reg = )
25656 6982           50                         push	ax
25657                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25658 6983           FF76         08            push	8[bp]
25659                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25660 6986           FF76         FE            push	-2[bp]
25661                                           ! Debug: func () void = write_word+0 (used reg = )
25662 6989           E8         11FE            call	_write_word
25663 698C           83C4                   06  add	sp,*6
25664                                           !BCC_EOS
25665                                           ! 3401     break;
25666 698F           E9         0131            br 	.21B
25667                                           !BCC_EOS
25668                                           ! 3402    case 0x01:
25669                                           ! 3403     write_word(ss,ES,read_word(0x00,0x43*4));
25670                       00006992            .21F:
25671                                           ! Debug: list int = const $10C (used reg = )
25672 6992           B8                   010C  mov	ax,#$10C
25673 6995           50                         push	ax
25674                                           ! Debug: list int = const 0 (used reg = )
25675 6996           31C0                       xor	ax,ax
25676 6998           50                         push	ax
25677                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25678 6999           E8         11C3            call	_read_word
25679 699C           83C4                   04  add	sp,*4
25680                                           ! Debug: list unsigned short = ax+0 (used reg = )
25681 699F           50                         push	ax
25682                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25683 69A0           FF76         06            push	6[bp]
25684                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25685 69A3           FF76         FE            push	-2[bp]
25686                                           ! Debug: func () void = write_word+0 (used reg = )
25687 69A6           E8         11E1            call	_write_word
25688 69A9           83C4                   06  add	sp,*6
25689                                           !BCC_EOS
25690                                           ! 3404     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
25691                                           ! Debug: list int = const $10E (used reg = )
25692 69AC           B8                   010E  mov	ax,#$10E
25693 69AF           50                         push	ax
25694                                           ! Debug: list int = const 0 (used reg = )
25695 69B0           31C0                       xor	ax,ax
25696 69B2           50                         push	ax
25697                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25698 69B3           E8         11A9            call	_read_word
25699 69B6           83C4                   04  add	sp,*4
25700                                           ! Debug: list unsigned short = ax+0 (used reg = )
25701 69B9           50                         push	ax
25702                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25703 69BA           FF76         08            push	8[bp]
25704                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25705 69BD           FF76         FE            push	-2[bp]
25706                                           ! Debug: func () void = write_word+0 (used reg = )
25707 69C0           E8         11C7            call	_write_word
25708 69C3           83C4                   06  add	sp,*6
25709                                           !BCC_EOS
25710                                           ! 3405     break;
25711 69C6           E9         00FA            br 	.21B
25712                                           !BCC_EOS
25713                                           ! 3406    case 0x02:
25714                                           ! 3407     write_word(ss,ES,0xC000);
25715                       000069C9            .220:
25716                                           ! Debug: list unsigned int = const $C000 (used reg = )
25717 69C9           B8                   C000  mov	ax,#$C000
25718 69CC           50                         push	ax
25719                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25720 69CD           FF76         06            push	6[bp]
25721                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25722 69D0           FF76         FE            push	-2[bp]
25723                                           ! Debug: func () void = write_word+0 (used reg = )
25724 69D3           E8         11B4            call	_write_word
25725 69D6           83C4                   06  add	sp,*6
25726                                           !BCC_EOS
25727                                           ! 3408     write_word(ss,BP,vgafont14);
25728                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
25729 69D9           BB                   172A  mov	bx,#_vgafont14
25730 69DC           53                         push	bx
25731                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25732 69DD           FF76         08            push	8[bp]
25733                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25734 69E0           FF76         FE            push	-2[bp]
25735                                           ! Debug: func () void = write_word+0 (used reg = )
25736 69E3           E8         11A4            call	_write_word
25737 69E6           83C4                   06  add	sp,*6
25738                                           !BCC_EOS
25739                                           ! 3409     break;
25740 69E9           E9         00D7            br 	.21B
25741                                           !BCC_EOS
25742                                           ! 3410    case 0x03:
25743                                           ! 3411     wri
25744                                           ! 3411 te_word(ss,ES,0xC000);
25745                       000069EC            .221:
25746                                           ! Debug: list unsigned int = const $C000 (used reg = )
25747 69EC           B8                   C000  mov	ax,#$C000
25748 69EF           50                         push	ax
25749                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25750 69F0           FF76         06            push	6[bp]
25751                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25752 69F3           FF76         FE            push	-2[bp]
25753                                           ! Debug: func () void = write_word+0 (used reg = )
25754 69F6           E8         1191            call	_write_word
25755 69F9           83C4                   06  add	sp,*6
25756                                           !BCC_EOS
25757                                           ! 3412     write_word(ss,BP,vgafont8);
25758                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
25759 69FC           BB                   0F2A  mov	bx,#_vgafont8
25760 69FF           53                         push	bx
25761                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25762 6A00           FF76         08            push	8[bp]
25763                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25764 6A03           FF76         FE            push	-2[bp]
25765                                           ! Debug: func () void = write_word+0 (used reg = )
25766 6A06           E8         1181            call	_write_word
25767 6A09           83C4                   06  add	sp,*6
25768                                           !BCC_EOS
25769                                           ! 3413     break;
25770 6A0C           E9         00B4            br 	.21B
25771                                           !BCC_EOS
25772                                           ! 3414    case 0x04:
25773                                           ! 3415     write_word(ss,ES,0xC000);
25774                       00006A0F            .222:
25775                                           ! Debug: list unsigned int = const $C000 (used reg = )
25776 6A0F           B8                   C000  mov	ax,#$C000
25777 6A12           50                         push	ax
25778                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25779 6A13           FF76         06            push	6[bp]
25780                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25781 6A16           FF76         FE            push	-2[bp]
25782                                           ! Debug: func () void = write_word+0 (used reg = )
25783 6A19           E8         116E            call	_write_word
25784 6A1C           83C4                   06  add	sp,*6
25785                                           !BCC_EOS
25786                                           ! 3416     write_word(ss,BP,vgafont8+128*8);
25787                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
25788 6A1F           BB                   132A  mov	bx,#_vgafont8+$400
25789 6A22           53                         push	bx
25790                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25791 6A23           FF76         08            push	8[bp]
25792                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25793 6A26           FF76         FE            push	-2[bp]
25794                                           ! Debug: func () void = write_word+0 (used reg = )
25795 6A29           E8         115E            call	_write_word
25796 6A2C           83C4                   06  add	sp,*6
25797                                           !BCC_EOS
25798                                           ! 3417     break;
25799 6A2F           E9         0091            br 	.21B
25800                                           !BCC_EOS
25801                                           ! 3418    case 0x05:
25802                                           ! 3419     write_word(ss,ES,0xC000);
25803                       00006A32            .223:
25804                                           ! Debug: list unsigned int = const $C000 (used reg = )
25805 6A32           B8                   C000  mov	ax,#$C000
25806 6A35           50                         push	ax
25807                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25808 6A36           FF76         06            push	6[bp]
25809                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25810 6A39           FF76         FE            push	-2[bp]
25811                                           ! Debug: func () void = write_word+0 (used reg = )
25812 6A3C           E8         114B            call	_write_word
25813 6A3F           83C4                   06  add	sp,*6
25814                                           !BCC_EOS
25815                                           ! 3420     write_word(ss,BP,vgafont14alt);
25816                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
25817 6A42           BB                   352A  mov	bx,#_vgafont14alt
25818 6A45           53                         push	bx
25819                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25820 6A46           FF76         08            push	8[bp]
25821                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25822 6A49           FF76         FE            push	-2[bp]
25823                                           ! Debug: func () void = write_word+0 (used reg = )
25824 6A4C           E8         113B            call	_write_word
25825 6A4F           83C4                   06  add	sp,*6
25826                                           !BCC_EOS
25827                                           ! 3421     break;
25828 6A52           EB           6F            jmp .21B
25829                                           !BCC_EOS
25830                                           ! 3422    case 0x06:
25831                                           ! 3423     write_word(ss,ES,0xC000);
25832                       00006A54            .224:
25833                                           ! Debug: list unsigned int = const $C000 (used reg = )
25834 6A54           B8                   C000  mov	ax,#$C000
25835 6A57           50                         push	ax
25836                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25837 6A58           FF76         06            push	6[bp]
25838                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25839 6A5B           FF76         FE            push	-2[bp]
25840                                           ! Debug: func () void = write_word+0 (used reg = )
25841 6A5E           E8         1129            call	_write_word
25842 6A61           83C4                   06  add	sp,*6
25843                                           !BCC_EOS
25844                                           ! 3424     write_word(ss,BP,vgafont16);
25845                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
25846 6A64           BB                   252A  mov	bx,#_vgafont16
25847 6A67           53                         push	bx
25848                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25849 6A68           FF76         08            push	8[bp]
25850                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25851 6A6B           FF76         FE            push	-2[bp]
25852                                           ! Debug: func () void = write_word+0 (used reg = )
25853 6A6E           E8         1119            call	_write_word
25854 6A71           83C4                   06  add	sp,*6
25855                                           !BCC_EOS
25856                                           ! 3425     break;
25857 6A74           EB           4D            jmp .21B
25858                                           !BCC_EOS
25859                                           ! 3426    case 0x07:
25860                                           ! 3427     write_word(ss,ES,0xC000);
25861                       00006A76            .225:
25862                                           ! Debug: list unsigned int = const $C000 (used reg = )
25863 6A76           B8                   C000  mov	ax,#$C000
25864 6A79           50                         push	ax
25865                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25866 6A7A           FF76         06            push	6[bp]
25867                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25868 6A7D           FF76         FE            push	-2[bp]
25869                                           ! Debug: func () void = write_word+0 (used reg = )
25870 6A80           E8         1107            call	_write_word
25871 6A83           83C4                   06  add	sp,*6
25872                                           !BCC_EOS
25873                                           ! 3428     write_word(ss,BP,vgafont16alt);
25874                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
25875 6A86           BB                   352B  mov	bx,#_vgafont16alt
25876 6A89           53                         push	bx
25877                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25878 6A8A           FF76         08            push	8[bp]
25879                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25880 6A8D           FF76         FE            push	-2[bp]
25881                                           ! Debug: func () void = write_word+0 (used reg = )
25882 6A90           E8         10F7            call	_write_word
25883 6A93           83C4                   06  add	sp,*6
25884                                           !BCC_EOS
25885                                           ! 3429     break;
25886 6A96           EB           2B            jmp .21B
25887                                           !BCC_EOS
25888                                           ! 3430    default:
25889                                           ! 3431     return;
25890                       00006A98            .226:
25891 6A98           89EC                       mov	sp,bp
25892 6A9A           5D                         pop	bp
25893 6A9B           C3                         ret
25894                                           !BCC_EOS
25895                                           ! 3432   }
25896                                           ! 3433  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
25897 6A9C           EB           25            jmp .21B
25898                       00006A9E            .21D:
25899 6A9E           2C                     00  sub	al,*0
25900 6AA0           72           F6            jb 	.226
25901 6AA2           3C                     07  cmp	al,*7
25902 6AA4           77           1B            ja  	.227
25903 6AA6           30E4                       xor	ah,ah
25904 6AA8           D1E0                       shl	ax,*1
25905 6AAA           89C3                       mov	bx,ax
25906 6AAC           2E                         seg	cs
25907 6AAD           FFA7       6AB1            br	.228[bx]
25908                       00006AB1            .228:
25909 6AB1                      695B            .word	.21E
25910 6AB3                      6992            .word	.21F
25911 6AB5                      69C9            .word	.220
25912 6AB7                      69EC            .word	.221
25913 6AB9                      6A0F            .word	.222
25914 6ABB                      6A32            .word	.223
25915 6ABD                      6A54            .word	.224
25916 6ABF                      6A76            .word	.225
25917                       00006AC1            .227:
25918 6AC1           EB           D5            jmp	.226
25919                       00006AC3            .21B:
25920                       FFFFFFFC            ..FFF5	=	-4
25921                                           ! Debug: list int = const $85 (used reg = )
25922 6AC3           B8                   0085  mov	ax,#$85
25923 6AC6           50                         push	ax
25924                                           ! Debug: list int = const $40 (used reg = )
25925 6AC7           B8                   0040  mov	ax,*$40
25926 6ACA           50                         push	ax
25927                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
25928 6ACB           E8         107E            call	_read_byte
25929 6ACE           83C4                   04  add	sp,*4
25930                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
25931 6AD1           30E4                       xor	ah,ah
25932                                           ! Debug: list unsigned short = ax+0 (used reg = )
25933 6AD3           50                         push	ax
25934                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
25935 6AD4           FF76         0A            push	$A[bp]
25936                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25937 6AD7           FF76         FE            push	-2[bp]
25938                                           ! Debug: func () void = write_word+0 (used reg = )
25939 6ADA           E8         10AD            call	_write_word
25940 6ADD           83C4                   06  add	sp,*6
25941                                           !BCC_EOS
25942                                           ! 3434  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
25943                                           ! Debug: list int = const $84 (used reg = )
25944 6AE0           B8                   0084  mov	ax,#$84
25945 6AE3           50                         push	ax
25946                                           ! Debug: list int = const $40 (used reg = )
25947 6AE4           B8                   0040  mov	ax,*$40
25948 6AE7           50                         push	ax
25949                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
25950 6AE8           E8         1061            call	_read_byte
25951 6AEB           83C4                   04  add	sp,*4
25952                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
25953 6AEE           30E4                       xor	ah,ah
25954                                           ! Debug: list unsigned short = ax+0 (used reg = )
25955 6AF0           50                         push	ax
25956                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
25957 6AF1           FF76         0C            push	$C[bp]
25958                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25959 6AF4           FF76         FE            push	-2[bp]
25960                                           ! Debug: func () void = write_word+0 (used reg = )
25961 6AF7           E8         1090            call	_write_word
25962 6AFA           83C4                   06  add	sp,*6
25963                                           !BCC_EOS
25964                                           ! 3435 }
25965 6AFD           89EC                       mov	sp,bp
25966 6AFF           5D                         pop	bp
25967 6B00           C3                         ret
25968                                           ! 3436 #asm
25969                                           !BCC_ASM
25970                       00000006            _biosfn_get_font_info.BP	set	6
25971                       00000002            _biosfn_get_font_info.BH	set	2
25972                       00000008            _biosfn_get_font_info.CX	set	8
25973                       0000000A            _biosfn_get_font_info.DX	set	$A
25974                       00000004            _biosfn_get_font_info.ES	set	4
25975                       00006B01            biosfn_get_ega_info:
25976 6B01           1E                           push ds
25977 6B02           50                           push ax
25978 6B03           B8                   0040    mov ax, # 0x40
25979 6B06           8ED8                         mov ds, ax
25980 6B08           30ED                         xor ch, ch
25981 6B0A           BB                   0088    mov bx, # 0x88
25982 6B0D           8A0F                         mov cl, [bx]
25983 6B0F           80E1                   0F    and cl, #0x0f
25984 6B12           BB                   0063    mov bx, # 0x63
25985 6B15           8B07                         mov ax, [bx]
25986 6B17           BB                   0003    mov bx, #0x0003
25987 6B1A           3D                   03B4    cmp ax, # 0x3b4
25988 6B1D           75           02              jne mode_ega_color
25989 6B1F           B7                     01    mov bh, #0x01
25990                       00006B21            mode_ega_color:
25991 6B21           58                           pop ax
25992 6B22           1F                           pop ds
25993 6B23           C3                           ret
25994                                           ! 3456 endasm
25995                                           !BCC_ENDASM
25996                                           ! 3457 static void biosfn_alternate_prtsc()
25997                                           ! Register BX used in function biosfn_get_font_info
25998                                           ! 3458 {
25999                       00006B24            _biosfn_alternate_prtsc:
26000                                           ! 3459 }
26001 6B24           C3                         ret
26002                                           ! 3460 #asm
26003                                           !BCC_ASM
26004                       00006B25            biosfn_select_vert_res:
26005                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26006 6B25           1E                           push ds
26007 6B26           53                           push bx
26008 6B27           52                           push dx
26009 6B28           88C2                         mov dl, al
26010 6B2A           B8                   0040    mov ax, # 0x40
26011 6B2D           8ED8                         mov ds, ax
26012 6B2F           BB                   0089    mov bx, # 0x89
26013 6B32           8A07                         mov al, [bx]
26014 6B34           BB                   0088    mov bx, # 0x88
26015 6B37           8A27                         mov ah, [bx]
26016 6B39           80FA                   01    cmp dl, #0x01
26017 6B3C           74           15              je vert_res_350
26018 6B3E           72           1D              jb vert_res_200
26019 6B40           80FA                   02    cmp dl, #0x02
26020 6B43           74           02              je vert_res_400
26021 6B45           EB           2A              jmp set_retcode
26022                       00006B47            vert_res_400:
26023                                             ; reset modeset ctl bit 7 and set bit 4
26024                                             ; set switches bit 3-0 to 0x09
26025 6B47           24                     7F    and al, #0x7f
26026 6B49           0C                     10    or al, #0x10
26027 6B4B           80E4                   F0    and ah, #0xf0
26028 6B4E           80CC                   09    or ah, #0x09
26029 6B51           75           14              jnz set_vert_res
26030                       00006B53            vert_res_350:
26031                                             ; reset modeset ctl bit 7 and bit 4
26032                                             ; set switches bit 3-0 to 0x09
26033 6B53           24                     6F    and al, #0x6f
26034 6B55           80E4                   F0    and ah, #0xf0
26035 6B58           80CC                   09    or ah, #0x09
26036 6B5B           75           0A              jnz set_vert_res
26037                       00006B5D            vert_res_200:
26038                                             ; set modeset ctl bit 7 and reset bit 4
26039                                             ; set switches bit 3-0 to 0x08
26040 6B5D           24                     EF    and al, #0xef
26041 6B5F           0C                     80    or al, #0x80
26042 6B61           80E4                   F0    and ah, #0xf0
26043 6B64           80CC                   08    or ah, #0x08
26044                       00006B67            set_vert_res:
26045 6B67           BB                   0089    mov bx, # 0x89
26046 6B6A           8807                         mov [bx], al
26047 6B6C           BB                   0088    mov bx, # 0x88
26048 6B6F           8827                         mov [bx], ah
26049                       00006B71            set_retcode:
26050 6B71           B8                   1212    mov ax, #0x1212
26051 6B74           5A                           pop dx
26052 6B75           5B                           pop bx
26053 6B76           1F                           pop ds
26054 6B77           C3                           ret
26055                       00006B78            biosfn_enable_default_palette_loading:
26056 6B78           1E                           push ds
26057 6B79           53                           push bx
26058 6B7A           52                           push dx
26059 6B7B           88C2                         mov dl, al
26060 6B7D           80E2                   01    and dl, #0x01
26061                                             ;shl dl, 3
26062 6B80           D0E2                         shl dl, 1
26063 6B82           D0E2                         shl dl, 1
26064 6B84           D0E2                         shl dl, 1
26065 6B86           B8                   0040    mov ax, # 0x40
26066 6B89           8ED8                         mov ds, ax
26067 6B8B           BB                   0089    mov bx, # 0x89
26068 6B8E           8A07                         mov al, [bx]
26069 6B90           24                     F7    and al, #0xf7
26070 6B92           08D0                         or al, dl
26071 6B94           8807                         mov [bx], al
26072 6B96           B8                   1212    mov ax, #0x1212
26073 6B99           5A                           pop dx
26074 6B9A           5B                           pop bx
26075 6B9B           1F                           pop ds
26076 6B9C           C3                           ret
26077                       00006B9D            biosfn_enable_video_addressing:
26078 6B9D           53                           push bx
26079 6B9E           52                           push dx
26080 6B9F           88C3                         mov bl, al
26081 6BA1           80E3                   01    and bl, #0x01
26082 6BA4           80F3                   01    xor bl, #0x01
26083 6BA7           D0E3                         shl bl, 1
26084 6BA9           BA                   03CC    mov dx, # 0x3cc
26085 6BAC           EC                           in al, dx
26086 6BAD           24                     FD    and al, #0xfd
26087 6BAF           08D8                         or al, bl
26088 6BB1           BA                   03C2    mov dx, # 0x3c2
26089 6BB4           EE                           out dx, al
26090 6BB5           B8                   1212    mov ax, #0x1212
26091 6BB8           5A                           pop dx
26092 6BB9           5B                           pop bx
26093 6BBA           C3                           ret
26094                       00006BBB            biosfn_enable_grayscale_summing:
26095 6BBB           1E                           push ds
26096 6BBC           53                           push bx
26097 6BBD           52                           push dx
26098 6BBE           88C2                         mov dl, al
26099 6BC0           80E2                   01    and dl, #0x01
26100 6BC3           80F2                   01    xor dl, #0x01
26101 6BC6           D0E2                         shl dl, 1
26102 6BC8           B8                   0040    mov ax, # 0x40
26103 6BCB           8ED8                         mov ds, ax
26104 6BCD           BB                   0089    mov bx, # 0x89
26105 6BD0           8A07                         mov al, [bx]
26106 6BD2           24                     FD    and al, #0xfd
26107 6BD4           08D0                         or al, dl
26108 6BD6           8807                         mov [bx], al
26109 6BD8           B8                   1212    mov ax, #0x1212
26110 6BDB           5A                           pop dx
26111 6BDC           5B                           pop bx
26112 6BDD           1F                           pop ds
26113 6BDE           C3                           ret
26114                       00006BDF            biosfn_enable_cursor_emulation:
26115 6BDF           1E                           push ds
26116 6BE0           53                           push bx
26117 6BE1           52                           push dx
26118 6BE2           88C2                         mov dl, al
26119 6BE4           80E2                   01    and dl, #0x01
26120 6BE7           80F2                   01    xor dl, #0x01
26121 6BEA           B8                   0040    mov ax, # 0x40
26122 6BED           8ED8                         mov ds, ax
26123 6BEF           BB                   0089    mov bx, # 0x89
26124 6BF2           8A07                         mov al, [bx]
26125 6BF4           24                     FE    and al, #0xfe
26126 6BF6           08D0                         or al, dl
26127 6BF8           8807                         mov [bx], al
26128 6BFA           B8                   1212    mov ax, #0x1212
26129 6BFD           5A                           pop dx
26130 6BFE           5B                           pop bx
26131 6BFF           1F                           pop ds
26132 6C00           C3                           ret
26133                                           ! 3590 endasm
26134                                           !BCC_ENDASM
26135                                           ! 3591 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26136                       00006C01            _biosfn_switch_video_interface:
26137                                           !BCC_EOS
26138                                           !BCC_EOS
26139                                           !BCC_EOS
26140                                           ! 3592 {
26141                                           ! 3593 }
26142 6C01           C3                         ret
26143                                           ! 3594 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26144                       00006C02            _biosfn_enable_video_refresh_control:
26145                                           !BCC_EOS
26146                                           ! 3595 {
26147                                           ! 3596 }
26148 6C02           C3                         ret
26149                                           ! 3597 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26150                                           ! 3598 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26151                       00006C03            _biosfn_write_string:
26152                                           !BCC_EOS
26153                                           !BCC_EOS
26154                                           !BCC_EOS
26155                                           !BCC_EOS
26156                                           !BCC_EOS
26157                                           !BCC_EOS
26158                                           !BCC_EOS
26159                                           !BCC_EOS
26160                                           ! 3599 {
26161                                           ! 3600  Bit16u newcurs,oldcurs,dummy;
26162                                           !BCC_EOS
26163                                           ! 3601  Bit8u car,carattr;
26164                                           !BCC_EOS
26165                                           ! 3602  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26166 6C03           55                         push	bp
26167 6C04           89E5                       mov	bp,sp
26168 6C06           83C4                   F8  add	sp,*-8
26169                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26170 6C09           8D5E         FC            lea	bx,-4[bp]
26171 6C0C           53                         push	bx
26172                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26173 6C0D           8D5E         FA            lea	bx,-6[bp]
26174 6C10           53                         push	bx
26175                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26176 6C11           8A46         06            mov	al,6[bp]
26177 6C14           30E4                       xor	ah,ah
26178 6C16           50                         push	ax
26179                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26180 6C17           E8         D745            call	_biosfn_get_cursor_pos
26181 6C1A           83C4                   06  add	sp,*6
26182                                           !BCC_EOS
26183                                           ! 3603  if(row==0xff)
26184                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26185 6C1D           8A46         0C            mov	al,$C[bp]
26186 6C20           3C                     FF  cmp	al,#$FF
26187 6C22           75           12            jne 	.229
26188                       00006C24            .22A:
26189                                           ! 3604   {col=oldcurs&0x00ff;
26190                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26191 6C24           8A46         FC            mov	al,-4[bp]
26192                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26193 6C27           8846         0E            mov	$E[bp],al
26194                                           !BCC_EOS
26195                                           ! 3605    row=(oldcurs&0xff00)>>8;
26196                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26197 6C2A           8B46         FC            mov	ax,-4[bp]
26198 6C2D           30C0                       xor	al,al
26199                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26200 6C2F           88E0                       mov	al,ah
26201 6C31           30E4                       xor	ah,ah
26202                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26203 6C33           8846         0C            mov	$C[bp],al
26204                                           !BCC_EOS
26205                                           ! 3606   }
26206                                           ! 3607  newcurs=row; newcurs<<=8; newcurs+=col;
26207                       00006C36            .229:
26208                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26209 6C36           8A46         0C            mov	al,$C[bp]
26210 6C39           30E4                       xor	ah,ah
26211 6C3B           8946         FE            mov	-2[bp],ax
26212                                           !BCC_EOS
26213                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26214 6C3E           8B46         FE            mov	ax,-2[bp]
26215 6C41           88C4                       mov	ah,al
26216 6C43           30C0                       xor	al,al
26217 6C45           8946         FE            mov	-2[bp],ax
26218                                           !BCC_EOS
26219                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26220 6C48           8B46         FE            mov	ax,-2[bp]
26221 6C4B           0246         0E            add	al,$E[bp]
26222 6C4E           80D4                   00  adc	ah,*0
26223 6C51           8946         FE            mov	-2[bp],ax
26224                                           !BCC_EOS
26225                                           ! 3608  biosfn_set_cursor_pos(page,newcurs);
26226                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26227 6C54           FF76         FE            push	-2[bp]
26228                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26229 6C57           8A46         06            mov	al,6[bp]
26230 6C5A           30E4                       xor	ah,ah
26231 6C5C           50                         push	ax
26232                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26233 6C5D           E8         D5FE            call	_biosfn_set_cursor_pos
26234 6C60           83C4                   04  add	sp,*4
26235                                           !BCC_EOS
26236                                           ! 3609  while(count--!=0)
26237                                           ! 3610   {
26238 6C63           EB           4F            jmp .22C
26239                       00006C65            .22D:
26240                                           ! 3611    car=read_byte(seg,offset++);
26241                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26242 6C65           8B46         12            mov	ax,$12[bp]
26243 6C68           40                         inc	ax
26244 6C69           8946         12            mov	$12[bp],ax
26245                                           ! Debug: list unsigned short = ax-1 (used reg = )
26246 6C6C           48                         dec	ax
26247 6C6D           50                         push	ax
26248                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26249 6C6E           FF76         10            push	$10[bp]
26250                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26251 6C71           E8         0ED8            call	_read_byte
26252 6C74           83C4                   04  add	sp,*4
26253                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26254 6C77           8846         F9            mov	-7[bp],al
26255                                           !BCC_EOS
26256                                           ! 3612    if((flag&0x02)!=0)
26257                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26258 6C7A           8A46         04            mov	al,4[bp]
26259 6C7D           24                     02  and	al,*2
26260                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26261 6C7F           84C0                       test	al,al
26262 6C81           74           15            je  	.22E
26263                       00006C83            .22F:
26264                                           ! 3613     attr=read_byte(seg,offset++);
26265                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26266 6C83           8B46         12            mov	ax,$12[bp]
26267 6C86           40                         inc	ax
26268 6C87           8946         12            mov	$12[bp],ax
26269                                           ! Debug: list unsigned short = ax-1 (used reg = )
26270 6C8A           48                         dec	ax
26271 6C8B           50                         push	ax
26272                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26273 6C8C           FF76         10            push	$10[bp]
26274                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26275 6C8F           E8         0EBA            call	_read_byte
26276 6C92           83C4                   04  add	sp,*4
26277                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26278 6C95           8846         08            mov	8[bp],al
26279                                           !BCC_EOS
26280                                           ! 3614    biosfn_write_teletype(car,page,attr,3);
26281                       00006C98            .22E:
26282                                           ! Debug: list int = const 3 (used reg = )
26283 6C98           B8                   0003  mov	ax,*3
26284 6C9B           50                         push	ax
26285                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26286 6C9C           8A46         08            mov	al,8[bp]
26287 6C9F           30E4                       xor	ah,ah
26288 6CA1           50                         push	ax
26289                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26290 6CA2           8A46         06            mov	al,6[bp]
26291 6CA5           30E4                       xor	ah,ah
26292 6CA7           50                         push	ax
26293                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26294 6CA8           8A46         F9            mov	al,-7[bp]
26295 6CAB           30E4                       xor	ah,ah
26296 6CAD           50                         push	ax
26297                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26298 6CAE           E8         F113            call	_biosfn_write_teletype
26299 6CB1           83C4                   08  add	sp,*8
26300                                           !BCC_EOS
26301                                           ! 3615   }
26302                                           ! 3616  if((flag&0x01)==0)
26303                       00006CB4            .22C:
26304                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26305 6CB4           8B46         0A            mov	ax,$A[bp]
26306 6CB7           48                         dec	ax
26307 6CB8           8946         0A            mov	$A[bp],ax
26308                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26309 6CBB           3D                   FFFF  cmp	ax,*-1
26310 6CBE           75           A5            jne	.22D
26311                       00006CC0            .230:
26312                       00006CC0            .22B:
26313                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26314 6CC0           8A46         04            mov	al,4[bp]
26315 6CC3           24                     01  and	al,*1
26316                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26317 6CC5           84C0                       test	al,al
26318 6CC7           75           0F            jne 	.231
26319                       00006CC9            .232:
26320                                           ! 3617   biosfn_set_cursor_pos(page,oldcurs);
26321                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26322 6CC9           FF76         FC            push	-4[bp]
26323                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26324 6CCC           8A46         06            mov	al,6[bp]
26325 6CCF           30E4                       xor	ah,ah
26326 6CD1           50                         push	ax
26327                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26328 6CD2           E8         D589            call	_biosfn_set_cursor_pos
26329 6CD5           83C4                   04  add	sp,*4
26330                                           !BCC_EOS
26331                                           ! 3618 }
26332                       00006CD8            .231:
26333 6CD8           89EC                       mov	sp,bp
26334 6CDA           5D                         pop	bp
26335 6CDB           C3                         ret
26336                                           ! 3619 #asm
26337                                           !BCC_ASM
26338                       00000008            _biosfn_write_string.count	set	8
26339                       0000000E            _biosfn_write_string.seg	set	$E
26340                       0000000C            _biosfn_write_string.col	set	$C
26341                       00000002            _biosfn_write_string.flag	set	2
26342                       00000006            _biosfn_write_string.attr	set	6
26343                       00000004            _biosfn_write_string.page	set	4
26344                       0000000A            _biosfn_write_string.row	set	$A
26345                       00000010            _biosfn_write_string.offset	set	$10
26346                       00006CDC            biosfn_group_1A:
26347 6CDC           3C                     00    cmp al, #0x00
26348 6CDE           74           05              je biosfn_read_display_code
26349 6CE0           3C                     01    cmp al, #0x01
26350 6CE2           74           16              je biosfn_set_display_code
26351 6CE4           C3                           ret
26352                       00006CE5            biosfn_read_display_code:
26353 6CE5           1E                           push ds
26354 6CE6           50                           push ax
26355 6CE7           B8                   0040    mov ax, # 0x40
26356 6CEA           8ED8                         mov ds, ax
26357 6CEC           BB                   008A    mov bx, # 0x8A
26358 6CEF           8A07                         mov al, [bx]
26359 6CF1           88C3                         mov bl, al
26360 6CF3           30FF                         xor bh, bh
26361 6CF5           58                           pop ax
26362 6CF6           88E0                         mov al, ah
26363 6CF8           1F                           pop ds
26364 6CF9           C3                           ret
26365                       00006CFA            biosfn_set_display_code:
26366 6CFA           1E                           push ds
26367 6CFB           50                           push ax
26368 6CFC           53                           push bx
26369 6CFD           B8                   0040    mov ax, # 0x40
26370 6D00           8ED8                         mov ds, ax
26371 6D02           89D8                         mov ax, bx
26372 6D04           BB                   008A    mov bx, # 0x8A
26373 6D07           8807                         mov [bx], al
26374 6D09           5B                           pop bx
26375 6D0A           58                           pop ax
26376 6D0B           88E0                         mov al, ah
26377 6D0D           1F                           pop ds
26378 6D0E           C3                           ret
26379                                           ! 3653 endasm
26380                                           !BCC_ENDASM
26381                                           ! 3654 static void biosfn_read_state_info (BX,ES,DI)
26382                                           ! Register BX used in function biosfn_write_string
26383                                           ! 3655 Bit16u BX;Bit16u ES;Bit16u DI;
26384                       00006D0F            _biosfn_read_state_info:
26385                                           !BCC_EOS
26386                                           !BCC_EOS
26387                                           !BCC_EOS
26388                                           ! 3656 {
26389                                           ! 3657  write_word(ES,DI+0x00,&static_functionality);
26390 6D0F           55                         push	bp
26391 6D10           89E5                       mov	bp,sp
26392                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26393 6D12           BB                   0F1A  mov	bx,#_static_functionality
26394 6D15           53                         push	bx
26395                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26396 6D16           8B46         08            mov	ax,8[bp]
26397                                           ! Debug: list unsigned int = ax+0 (used reg = )
26398 6D19           50                         push	ax
26399                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26400 6D1A           FF76         06            push	6[bp]
26401                                           ! Debug: func () void = write_word+0 (used reg = )
26402 6D1D           E8         0E6A            call	_write_word
26403 6D20           89EC                       mov	sp,bp
26404                                           !BCC_EOS
26405                                           ! 3658  write_word(ES,DI+0x02,0xC000);
26406                                           ! Debug: list unsigned int = const $C000 (used reg = )
26407 6D22           B8                   C000  mov	ax,#$C000
26408 6D25           50                         push	ax
26409                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26410 6D26           8B46         08            mov	ax,8[bp]
26411                                           ! Debug: list unsigned int = ax+2 (used reg = )
26412 6D29           40                         inc	ax
26413 6D2A           40                         inc	ax
26414 6D2B           50                         push	ax
26415                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26416 6D2C           FF76         06            push	6[bp]
26417                                           ! Debug: func () void = write_word+0 (used reg = )
26418 6D2F           E8         0E58            call	_write_word
26419 6D32           89EC                       mov	sp,bp
26420                                           !BCC_EOS
26421                                           ! 3659  memcpyb(ES,DI+0x04,0x40,0x49,30);
26422                                           ! Debug: list int = const $1E (used reg = )
26423 6D34           B8                   001E  mov	ax,*$1E
26424 6D37           50                         push	ax
26425                                           ! Debug: list int = const $49 (used reg = )
26426 6D38           B8                   0049  mov	ax,*$49
26427 6D3B           50                         push	ax
26428                                           ! Debug: list int = const $40 (used reg = )
26429 6D3C           B8                   0040  mov	ax,*$40
26430 6D3F           50                         push	ax
26431                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26432 6D40           8B46         08            mov	ax,8[bp]
26433                                           ! Debug: list unsigned int = ax+4 (used reg = )
26434 6D43           05                   0004  add	ax,*4
26435 6D46           50                         push	ax
26436                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26437 6D47           FF76         06            push	6[bp]
26438                                           ! Debug: func () void = memcpyb+0 (used reg = )
26439 6D4A           E8         0D9F            call	_memcpyb
26440 6D4D           89EC                       mov	sp,bp
26441                                           !BCC_EOS
26442                                           ! 3660  memcpyb(ES,DI+0x22,0x40,0x84,3);
26443                                           ! Debug: list int = const 3 (used reg = )
26444 6D4F           B8                   0003  mov	ax,*3
26445 6D52           50                         push	ax
26446                                           ! Debug: list int = const $84 (used reg = )
26447 6D53           B8                   0084  mov	ax,#$84
26448 6D56           50                         push	ax
26449                                           ! Debug: list int = const $40 (used reg = )
26450 6D57           B8                   0040  mov	ax,*$40
26451 6D5A           50                         push	ax
26452                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26453 6D5B           8B46         08            mov	ax,8[bp]
26454                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26455 6D5E           05                   0022  add	ax,*$22
26456 6D61           50                         push	ax
26457                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26458 6D62           FF76         06            push	6[bp]
26459                                           ! Debug: func () void = memcpyb+0 (used reg = )
26460 6D65           E8         0D84            call	_memcpyb
26461 6D68           89EC                       mov	sp,bp
26462                                           !BCC_EOS
26463                                           ! 3661  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26464                                           ! Debug: list int = const $8A (used reg = )
26465 6D6A           B8                   008A  mov	ax,#$8A
26466 6D6D           50                         push	ax
26467                                           ! Debug: list int = const $40 (used reg = )
26468 6D6E           B8                   0040  mov	ax,*$40
26469 6D71           50                         push	ax
26470                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26471 6D72           E8         0DD7            call	_read_byte
26472 6D75           89EC                       mov	sp,bp
26473                                           ! Debug: list unsigned char = al+0 (used reg = )
26474 6D77           30E4                       xor	ah,ah
26475 6D79           50                         push	ax
26476                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26477 6D7A           8B46         08            mov	ax,8[bp]
26478                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26479 6D7D           05                   0025  add	ax,*$25
26480 6D80           50                         push	ax
26481                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26482 6D81           FF76         06            push	6[bp]
26483                                           ! Debug: func () void = write_byte+0 (used reg = )
26484 6D84           E8         0DEB            call	_write_byte
26485 6D87           89EC                       mov	sp,bp
26486                                           !BCC_EOS
26487                                           ! 3662  write_byte(ES,DI+0x26,0);
26488                                           ! Debug: list int = const 0 (used reg = )
26489 6D89           31C0                       xor	ax,ax
26490 6D8B           50                         push	ax
26491                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26492 6D8C           8B46         08            mov	ax,8[bp]
26493                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26494 6D8F           05                   0026  add	ax,*$26
26495 6D92           50                         push	ax
26496                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26497 6D93           FF76         06            push	6[bp]
26498                                           ! Debug: func () void = write_byte+0 (used reg = )
26499 6D96           E8         0DD9            call	_write_byte
26500 6D99           89EC                       mov	sp,bp
26501                                           !BCC_EOS
26502                                           ! 3663  write_byte(ES,DI+0x27,16);
26503                                           ! Debug: list int = const $10 (used reg = )
26504 6D9B           B8                   0010  mov	ax,*$10
26505 6D9E           50                         push	ax
26506                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26507 6D9F           8B46         08            mov	ax,8[bp]
26508                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26509 6DA2           05                   0027  add	ax,*$27
26510 6DA5           50                         push	ax
26511                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26512 6DA6           FF76         06            push	6[bp]
26513                                           ! Debug: func () void = write_byte+0 (used reg = )
26514 6DA9           E8         0DC6            call	_write_byte
26515 6DAC           89EC                       mov	sp,bp
26516                                           !BCC_EOS
26517                                           ! 3664  write_byte(ES,DI+0x28,0);
26518                                           ! Debug: list int = const 0 (used reg = )
26519 6DAE           31C0                       xor	ax,ax
26520 6DB0           50                         push	ax
26521                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26522 6DB1           8B46         08            mov	ax,8[bp]
26523                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26524 6DB4           05                   0028  add	ax,*$28
26525 6DB7           50                         push	ax
26526                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26527 6DB8           FF76         06            push	6[bp]
26528                                           ! Debug: func () void = write_byte+0 (used reg = )
26529 6DBB           E8         0DB4            call	_write_byte
26530 6DBE           89EC                       mov	sp,bp
26531                                           !BCC_EOS
26532                                           ! 3665  write_byte(ES,DI+0x29,8);
26533                                           ! Debug: list int = const 8 (used reg = )
26534 6DC0           B8                   0008  mov	ax,*8
26535 6DC3           50                         push	ax
26536                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26537 6DC4           8B46         08            mov	ax,8[bp]
26538                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26539 6DC7           05                   0029  add	ax,*$29
26540 6DCA           50                         push	ax
26541                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26542 6DCB           FF76         06            push	6[bp]
26543                                           ! Debug: func () void = write_byte+0 (used reg = )
26544 6DCE           E8         0DA1            call	_write_byte
26545 6DD1           89EC                       mov	sp,bp
26546                                           !BCC_EOS
26547                                           ! 3666  write_byte(ES,DI+0x2a,2);
26548                                           ! Debug: list int = const 2 (used reg = )
26549 6DD3           B8                   0002  mov	ax,*2
26550 6DD6           50                         push	ax
26551                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
26552 6DD7           8B46         08            mov	ax,8[bp]
26553                                           ! Debug: list unsigned int = ax+$2A (used reg = )
26554 6DDA           05                   002A  add	ax,*$2A
26555 6DDD           50                         push	ax
26556                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26557 6DDE           FF76         06            push	6[bp]
26558                                           ! Debug: func () void = write_byte+0 (used reg = )
26559 6DE1           E8         0D8E            call	_write_byte
26560 6DE4           89EC                       mov	sp,bp
26561                                           !BCC_EOS
26562                                           ! 3667  write_byte(ES,DI+0x2b,0);
26563                                           ! Debug: list int = const 0 (used reg = )
26564 6DE6           31C0                       xor	ax,ax
26565 6DE8           50                         push	ax
26566                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
26567 6DE9           8B46         08            mov	ax,8[bp]
26568                                           ! Debug: list unsigned int = ax+$2B (used reg = )
26569 6DEC           05                   002B  add	ax,*$2B
26570 6DEF           50                         push	ax
26571                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26572 6DF0           FF76         06            push	6[bp]
26573                                           ! Debug: func () void = write_byte+0 (used reg = )
26574 6DF3           E8         0D7C            call	_write_byte
26575 6DF6           89EC                       mov	sp,bp
26576                                           !BCC_EOS
26577                                           ! 3668  write_byte(ES,DI+0x2c,0);
26578                                           ! Debug: list int = const 0 (used reg = )
26579 6DF8           31C0                       xor	ax,ax
26580 6DFA           50                         push	ax
26581                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
26582 6DFB           8B46         08            mov	ax,8[bp]
26583                                           ! Debug: list unsigned int = ax+$2C (used reg = )
26584 6DFE           05                   002C  add	ax,*$2C
26585 6E01           50                         push	ax
26586                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26587 6E02           FF76         06            push	6[bp]
26588                                           ! Debug: func () void = write_byte+0 (used reg = )
26589 6E05           E8         0D6A            call	_write_byte
26590 6E08           89EC                       mov	sp,bp
26591                                           !BCC_EOS
26592                                           ! 3669  write_byte(ES,DI+0x31,3);
26593                                           ! Debug: list int = const 3 (used reg = )
26594 6E0A           B8                   0003  mov	ax,*3
26595 6E0D           50                         push	ax
26596                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
26597 6E0E           8B46         08            mov	ax,8[bp]
26598                                           ! Debug: list unsigned int = ax+$31 (used reg = )
26599 6E11           05                   0031  add	ax,*$31
26600 6E14           50                         push	ax
26601                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26602 6E15           FF76         06            push	6[bp]
26603                                           ! Debug: func () void = write_byte+0 (used reg = )
26604 6E18           E8         0D57            call	_write_byte
26605 6E1B           89EC                       mov	sp,bp
26606                                           !BCC_EOS
26607                                           ! 3670  write_byte(ES,DI+0x32,0);
26608                                           ! Debug: list int = const 0 (used reg = )
26609 6E1D           31C0                       xor	ax,ax
26610 6E1F           50                         push	ax
26611                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
26612 6E20           8B46         08            mov	ax,8[bp]
26613                                           ! Debug: list unsigned int = ax+$32 (used reg = )
26614 6E23           05                   0032  add	ax,*$32
26615 6E26           50                         push	ax
26616                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26617 6E27           FF76         06            push	6[bp]
26618                                           ! Debug: func () void = write_byte+0 (used reg = )
26619 6E2A           E8         0D45            call	_write_byte
26620 6E2D           89EC                       mov	sp,bp
26621                                           !BCC_EOS
26622                                           ! 3671  memsetb(ES,DI+0x33,0,13);
26623                                           ! Debug: list int = const $D (used reg = )
26624 6E2F           B8                   000D  mov	ax,*$D
26625 6E32           50                         push	ax
26626                                           ! Debug: list int = const 0 (used reg = )
26627 6E33           31C0                       xor	ax,ax
26628 6E35           50                         push	ax
26629                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
26630 6E36           8B46         08            mov	ax,8[bp]
26631                                           ! Debug: list unsigned int = ax+$33 (used reg = )
26632 6E39           05                   0033  add	ax,*$33
26633 6E3C           50                         push	ax
26634                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
26635 6E3D           FF76         06            push	6[bp]
26636                                           ! Debug: func () void = memsetb+0 (used reg = )
26637 6E40           E8         0C5F            call	_memsetb
26638 6E43           89EC                       mov	sp,bp
26639                                           !BCC_EOS
26640                                           ! 3672 }
26641 6E45           5D                         pop	bp
26642 6E46           C3                         ret
26643                                           ! 3673 static Bit16u biosfn_read_video_state_size2 (CX)
26644                                           ! Register BX used in function biosfn_read_state_info
26645                                           ! 3674      Bit16u CX;
26646                       00006E47            _biosfn_read_video_state_size2:
26647                                           !BCC_EOS
26648                                           ! 3675 {
26649                                           ! 3676     Bit16u size;
26650                                           !BCC_EOS
26651                                           ! 3677     size = 0;
26652 6E47           55                         push	bp
26653 6E48           89E5                       mov	bp,sp
26654 6E4A           4C                         dec	sp
26655 6E4B           4C                         dec	sp
26656                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
26657 6E4C           31C0                       xor	ax,ax
26658 6E4E           8946         FE            mov	-2[bp],ax
26659                                           !BCC_EOS
26660                                           ! 3678     if (CX & 1) {
26661                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
26662 6E51           8A46         04            mov	al,4[bp]
26663 6E54           24                     01  and	al,*1
26664 6E56           84C0                       test	al,al
26665 6E58           74           09            je  	.233
26666                       00006E5A            .234:
26667                                           ! 3679         size += 0x46;
26668                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
26669 6E5A           8B46         FE            mov	ax,-2[bp]
26670 6E5D           05                   0046  add	ax,*$46
26671 6E60           8946         FE            mov	-2[bp],ax
26672                                           !BCC_EOS
26673                                           ! 3680     }
26674                                           ! 3681     if (CX & 2) {
26675                       00006E63            .233:
26676                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
26677 6E63           8A46         04            mov	al,4[bp]
26678 6E66           24                     02  and	al,*2
26679 6E68           84C0                       test	al,al
26680 6E6A           74           09            je  	.235
26681                       00006E6C            .236:
26682                                           ! 3682         size += (5 + 8 + 5) * 2 + 6;
26683                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
26684 6E6C           8B46         FE            mov	ax,-2[bp]
26685 6E6F           05                   002A  add	ax,*$2A
26686 6E72           8946         FE            mov	-2[bp],ax
26687                                           !BCC_EOS
26688                                           ! 3683     }
26689                                           ! 3684     if (CX & 4) {
26690                       00006E75            .235:
26691                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
26692 6E75           8A46         04            mov	al,4[bp]
26693 6E78           24                     04  and	al,*4
26694 6E7A           84C0                       test	al,al
26695 6E7C           74           09            je  	.237
26696                       00006E7E            .238:
26697                                           ! 3685         size += 3 + 256 * 3 + 1;
26698                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
26699 6E7E           8B46         FE            mov	ax,-2[bp]
26700 6E81           05                   0304  add	ax,#$304
26701 6E84           8946         FE            mov	-2[bp],ax
26702                                           !BCC_EOS
26703                                           ! 3686 }
26704                                           ! 3687     return size;
26705                       00006E87            .237:
26706 6E87           8B46         FE            mov	ax,-2[bp]
26707 6E8A           89EC                       mov	sp,bp
26708 6E8C           5D                         pop	bp
26709 6E8D           C3                         ret
26710                                           !BCC_EOS
26711                                           ! 3688 }
26712                                           ! 3689 static void biosfn_read_video_state_size (CX, BX)
26713                                           ! 3690      Bit16u CX; Bit16u *BX;
26714                       00006E8E            _biosfn_read_video_state_size:
26715                                           !BCC_EOS
26716                                           !BCC_EOS
26717                                           ! 3691 {
26718                                           ! 3692     Bit16u ss=get_SS();
26719 6E8E           55                         push	bp
26720 6E8F           89E5                       mov	bp,sp
26721 6E91           4C                         dec	sp
26722 6E92           4C                         dec	sp
26723                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26724 6E93           E8         0D42            call	_get_SS
26725                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26726 6E96           8946         FE            mov	-2[bp],ax
26727                                           !BCC_EOS
26728                                           ! 3693     write_word(ss, BX, biosfn_read_video_state_size2(CX));
26729                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
26730 6E99           FF76         04            push	4[bp]
26731                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
26732 6E9C           E8         FFA8            call	_biosfn_read_video_state_size2
26733 6E9F           44                         inc	sp
26734 6EA0           44                         inc	sp
26735                                           ! Debug: list unsigned short = ax+0 (used reg = )
26736 6EA1           50                         push	ax
26737                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
26738 6EA2           FF76         06            push	6[bp]
26739                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26740 6EA5           FF76         FE            push	-2[bp]
26741                                           ! Debug: func () void = write_word+0 (used reg = )
26742 6EA8           E8         0CDF            call	_write_word
26743 6EAB           83C4                   06  add	sp,*6
26744                                           !BCC_EOS
26745                                           ! 3694 }
26746 6EAE           89EC                       mov	sp,bp
26747 6EB0           5D                         pop	bp
26748 6EB1           C3                         ret
26749                                           ! 3695 static Bit16u biosfn_save_video_state (CX,ES,BX)
26750                                           ! 3696      Bit16u CX;Bit16u ES;Bit16u BX;
26751                       00006EB2            _biosfn_save_video_state:
26752                                           !BCC_EOS
26753                                           !BCC_EOS
26754                                           !BCC_EOS
26755                                           ! 3697 {
26756                                           ! 3698     Bit16u i, v, crtc_addr, ar_index;
26757                                           !BCC_EOS
26758                                           ! 3699     crtc_addr = read_word(0x40, 0x63);
26759 6EB2           55                         push	bp
26760 6EB3           89E5                       mov	bp,sp
26761 6EB5           83C4                   F8  add	sp,*-8
26762                                           ! Debug: list int = const $63 (used reg = )
26763 6EB8           B8                   0063  mov	ax,*$63
26764 6EBB           50                         push	ax
26765                                           ! Debug: list int = const $40 (used reg = )
26766 6EBC           B8                   0040  mov	ax,*$40
26767 6EBF           50                         push	ax
26768                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26769 6EC0           E8         0C9C            call	_read_word
26770 6EC3           83C4                   04  add	sp,*4
26771                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
26772 6EC6           8946         FA            mov	-6[bp],ax
26773                                           !BCC_EOS
26774                                           ! 3700     if (CX & 1) {
26775                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
26776 6EC9           8A46         04            mov	al,4[bp]
26777 6ECC           24                     01  and	al,*1
26778 6ECE           84C0                       test	al,al
26779 6ED0   7503    E9         0266            beq 	.239
26780                       00006ED5            .23A:
26781                                           ! 3701         write_byte(ES, BX, inb(0x3c4)); BX++;
26782                                           ! Debug: list int = const $3C4 (used reg = )
26783 6ED5           B8                   03C4  mov	ax,#$3C4
26784 6ED8           50                         push	ax
26785                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26786 6ED9           E8         0CC6            call	_inb
26787 6EDC           44                         inc	sp
26788 6EDD           44                         inc	sp
26789                                           ! Debug: list unsigned char = al+0 (used reg = )
26790 6EDE           30E4                       xor	ah,ah
26791 6EE0           50                         push	ax
26792                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26793 6EE1           FF76         08            push	8[bp]
26794                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26795 6EE4           FF76         06            push	6[bp]
26796                                           ! Debug: func () void = write_byte+0 (used reg = )
26797 6EE7           E8         0C88            call	_write_byte
26798 6EEA           83C4                   06  add	sp,*6
26799                                           !BCC_EOS
26800                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26801 6EED           8B46         08            mov	ax,8[bp]
26802 6EF0           40                         inc	ax
26803 6EF1           8946         08            mov	8[bp],ax
26804                                           !BCC_EOS
26805                                           ! 3702         write_byte(ES, BX, inb(crtc_addr)); BX++;
26806                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
26807 6EF4           FF76         FA            push	-6[bp]
26808                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26809 6EF7           E8         0CA8            call	_inb
26810 6EFA           44                         inc	sp
26811 6EFB           44                         inc	sp
26812                                           ! Debug: list unsigned char = al+0 (used reg = )
26813 6EFC           30E4                       xor	ah,ah
26814 6EFE           50                         push	ax
26815                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26816 6EFF           FF76         08            push	8[bp]
26817                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26818 6F02           FF76         06            push	6[bp]
26819                                           ! Debug: func () void = write_byte+0 (used reg = )
26820 6F05           E8         0C6A            call	_write_byte
26821 6F08           83C4                   06  add	sp,*6
26822                                           !BCC_EOS
26823                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26824 6F0B           8B46         08            mov	ax,8[bp]
26825 6F0E           40                         inc	ax
26826 6F0F           8946         08            mov	8[bp],ax
26827                                           !BCC_EOS
26828                                           ! 3703         write_byte(ES, BX, inb(0x3ce)); BX++;
26829                                           ! Debug: list int = const $3CE (used reg = )
26830 6F12           B8                   03CE  mov	ax,#$3CE
26831 6F15           50                         push	ax
26832                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26833 6F16           E8         0C89            call	_inb
26834 6F19           44                         inc	sp
26835 6F1A           44                         inc	sp
26836                                           ! Debug: list unsigned char = al+0 (used reg = )
26837 6F1B           30E4                       xor	ah,ah
26838 6F1D           50                         push	ax
26839                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26840 6F1E           FF76         08            push	8[bp]
26841                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26842 6F21           FF76         06            push	6[bp]
26843                                           ! Debug: func () void = write_byte+0 (used reg = )
26844 6F24           E8         0C4B            call	_write_byte
26845 6F27           83C4                   06  add	sp,*6
26846                                           !BCC_EOS
26847                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26848 6F2A           8B46         08            mov	ax,8[bp]
26849 6F2D           40                         inc	ax
26850 6F2E           8946         08            mov	8[bp],ax
26851                                           !BCC_EOS
26852                                           ! 3704         inb(0x3da);
26853                                           ! Debug: list int = const $3DA (used reg = )
26854 6F31           B8                   03DA  mov	ax,#$3DA
26855 6F34           50                         push	ax
26856                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26857 6F35           E8         0C6A            call	_inb
26858 6F38           44                         inc	sp
26859 6F39           44                         inc	sp
26860                                           !BCC_EOS
26861                                           ! 3705         ar_index = inb(0x3c0);
26862                                           ! Debug: list int = const $3C0 (used reg = )
26863 6F3A           B8                   03C0  mov	ax,#$3C0
26864 6F3D           50                         push	ax
26865                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26866 6F3E           E8         0C61            call	_inb
26867 6F41           44                         inc	sp
26868 6F42           44                         inc	sp
26869                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
26870 6F43           30E4                       xor	ah,ah
26871 6F45           8946         F8            mov	-8[bp],ax
26872                                           !BCC_EOS
26873                                           ! 3706         write_byte(ES, BX, ar_index); BX++;
26874                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
26875 6F48           FF76         F8            push	-8[bp]
26876                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26877 6F4B           FF76         08            push	8[bp]
26878                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26879 6F4E           FF76         06            push	6[bp]
26880                                           ! Debug: func () void = write_byte+0 (used reg = )
26881 6F51           E8         0C1E            call	_write_byte
26882 6F54           83C4                   06  add	sp,*6
26883                                           !BCC_EOS
26884                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26885 6F57           8B46         08            mov	ax,8[bp]
26886 6F5A           40                         inc	ax
26887 6F5B           8946         08            mov	8[bp],ax
26888                                           !BCC_EOS
26889                                           ! 3707         write_byte(ES, BX, inb(0x3ca)); BX++;
26890                                           ! Debug: list int = const $3CA (used reg = )
26891 6F5E           B8                   03CA  mov	ax,#$3CA
26892 6F61           50                         push	ax
26893                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26894 6F62           E8         0C3D            call	_inb
26895 6F65           44                         inc	sp
26896 6F66           44                         inc	sp
26897                                           ! Debug: list unsigned char = al+0 (used reg = )
26898 6F67           30E4                       xor	ah,ah
26899 6F69           50                         push	ax
26900                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26901 6F6A           FF76         08            push	8[bp]
26902                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26903 6F6D           FF76         06            push	6[bp]
26904                                           ! Debug: func () void = write_byte+0 (used reg = )
26905 6F70           E8         0BFF            call	_write_byte
26906 6F73           83C4                   06  add	sp,*6
26907                                           !BCC_EOS
26908                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26909 6F76           8B46         08            mov	ax,8[bp]
26910 6F79           40                         inc	ax
26911 6F7A           8946         08            mov	8[bp],ax
26912                                           !BCC_EOS
26913                                           ! 3708         for(i=1;i<=4;i++){
26914                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
26915 6F7D           B8                   0001  mov	ax,*1
26916 6F80           8946         FE            mov	-2[bp],ax
26917                                           !BCC_EOS
26918                                           !BCC_EOS
26919 6F83           EB           33            jmp .23D
26920                       00006F85            .23E:
26921                                           ! 3709             outb(0x3c4, i);
26922                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
26923 6F85           FF76         FE            push	-2[bp]
26924                                           ! Debug: list int = const $3C4 (used reg = )
26925 6F88           B8                   03C4  mov	ax,#$3C4
26926 6F8B           50                         push	ax
26927                                           ! Debug: func () void = outb+0 (used reg = )
26928 6F8C           E8         0C29            call	_outb
26929 6F8F           83C4                   04  add	sp,*4
26930                                           !BCC_EOS
26931                                           ! 3710             write_byte(ES, BX, inb(0x3c5)); BX++;
26932                                           ! Debug: list int = const $3C5 (used reg = )
26933 6F92           B8                   03C5  mov	ax,#$3C5
26934 6F95           50                         push	ax
26935                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26936 6F96           E8         0C09            call	_inb
26937 6F99           44                         inc	sp
26938 6F9A           44                         inc	sp
26939                                           ! Debug: list unsigned char = al+0 (used reg = )
26940 6F9B           30E4                       xor	ah,ah
26941 6F9D           50                         push	ax
26942                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26943 6F9E           FF76         08            push	8[bp]
26944                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26945 6FA1           FF76         06            push	6[bp]
26946                                           ! Debug: func () void = write_byte+0 (used reg = )
26947 6FA4           E8         0BCB            call	_write_byte
26948 6FA7           83C4                   06  add	sp,*6
26949                                           !BCC_EOS
26950                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26951 6FAA           8B46         08            mov	ax,8[bp]
26952 6FAD           40                         inc	ax
26953 6FAE           8946         08            mov	8[bp],ax
26954                                           !BCC_EOS
26955                                           ! 3711         }
26956                                           ! 3712         outb(0x3c4, 0);
26957                       00006FB1            .23C:
26958                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
26959 6FB1           8B46         FE            mov	ax,-2[bp]
26960 6FB4           40                         inc	ax
26961 6FB5           8946         FE            mov	-2[bp],ax
26962                       00006FB8            .23D:
26963                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
26964 6FB8           8B46         FE            mov	ax,-2[bp]
26965 6FBB           3D                   0004  cmp	ax,*4
26966 6FBE           76           C5            jbe	.23E
26967                       00006FC0            .23F:
26968                       00006FC0            .23B:
26969                                           ! Debug: list int = const 0 (used reg = )
26970 6FC0           31C0                       xor	ax,ax
26971 6FC2           50                         push	ax
26972                                           ! Debug: list int = const $3C4 (used reg = )
26973 6FC3           B8                   03C4  mov	ax,#$3C4
26974 6FC6           50                         push	ax
26975                                           ! Debug: func () void = outb+0 (used reg = )
26976 6FC7           E8         0BEE            call	_outb
26977 6FCA           83C4                   04  add	sp,*4
26978                                           !BCC_EOS
26979                                           ! 3713         write_byte(ES, BX, inb(0x3c5)); BX++;
26980                                           ! Debug: list int = const $3C5 (used reg = )
26981 6FCD           B8                   03C5  mov	ax,#$3C5
26982 6FD0           50                         push	ax
26983                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26984 6FD1           E8         0BCE            call	_inb
26985 6FD4           44                         inc	sp
26986 6FD5           44                         inc	sp
26987                                           ! Debug: list unsigned char = al+0 (used reg = )
26988 6FD6           30E4                       xor	ah,ah
26989 6FD8           50                         push	ax
26990                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26991 6FD9           FF76         08            push	8[bp]
26992                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26993 6FDC           FF76         06            push	6[bp]
26994                                           ! Debug: func () void = write_byte+0 (used reg = )
26995 6FDF           E8         0B90            call	_write_byte
26996 6FE2           83C4                   06  add	sp,*6
26997                                           !BCC_EOS
26998                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26999 6FE5           8B46         08            mov	ax,8[bp]
27000 6FE8           40                         inc	ax
27001 6FE9           8946         08            mov	8[bp],ax
27002                                           !BCC_EOS
27003                                           ! 3714         for(i=0;i<=0x18;i++) {
27004                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27005 6FEC           31C0                       xor	ax,ax
27006 6FEE           8946         FE            mov	-2[bp],ax
27007                                           !BCC_EOS
27008                                           !BCC_EOS
27009 6FF1           EB           33            jmp .242
27010                       00006FF3            .243:
27011                                           ! 3715             outb(crtc_addr,i);
27012                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27013 6FF3           FF76         FE            push	-2[bp]
27014                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27015 6FF6           FF76         FA            push	-6[bp]
27016                                           ! Debug: func () void = outb+0 (used reg = )
27017 6FF9           E8         0BBC            call	_outb
27018 6FFC           83C4                   04  add	sp,*4
27019                                           !BCC_EOS
27020                                           ! 3716             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27021                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27022 6FFF           8B46         FA            mov	ax,-6[bp]
27023                                           ! Debug: list unsigned int = ax+1 (used reg = )
27024 7002           40                         inc	ax
27025 7003           50                         push	ax
27026                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27027 7004           E8         0B9B            call	_inb
27028 7007           44                         inc	sp
27029 7008           44                         inc	sp
27030                                           ! Debug: list unsigned char = al+0 (used reg = )
27031 7009           30E4                       xor	ah,ah
27032 700B           50                         push	ax
27033                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27034 700C           FF76         08            push	8[bp]
27035                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27036 700F           FF76         06            push	6[bp]
27037                                           ! Debug: func () void = write_byte+0 (used reg = )
27038 7012           E8         0B5D            call	_write_byte
27039 7015           83C4                   06  add	sp,*6
27040                                           !BCC_EOS
27041                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27042 7018           8B46         08            mov	ax,8[bp]
27043 701B           40                         inc	ax
27044 701C           8946         08            mov	8[bp],ax
27045                                           !BCC_EOS
27046                                           ! 3717         }
27047                                           ! 3718         for(i=0;i<=0x13;i++) {
27048                       0000701F            .241:
27049                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27050 701F           8B46         FE            mov	ax,-2[bp]
27051 7022           40                         inc	ax
27052 7023           8946         FE            mov	-2[bp],ax
27053                       00007026            .242:
27054                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27055 7026           8B46         FE            mov	ax,-2[bp]
27056 7029           3D                   0018  cmp	ax,*$18
27057 702C           76           C5            jbe	.243
27058                       0000702E            .244:
27059                       0000702E            .240:
27060                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27061 702E           31C0                       xor	ax,ax
27062 7030           8946         FE            mov	-2[bp],ax
27063                                           !BCC_EOS
27064                                           !BCC_EOS
27065 7033           EB           44            jmp .247
27066                       00007035            .248:
27067                                           ! 3719             inb(0x3da);
27068                                           ! Debug: list int = const $3DA (used reg = )
27069 7035           B8                   03DA  mov	ax,#$3DA
27070 7038           50                         push	ax
27071                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27072 7039           E8         0B66            call	_inb
27073 703C           44                         inc	sp
27074 703D           44                         inc	sp
27075                                           !BCC_EOS
27076                                           ! 3720             outb(0x3c0, i | (ar_index & 0x20));
27077                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27078 703E           8A46         F8            mov	al,-8[bp]
27079 7041           24                     20  and	al,*$20
27080                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27081                                           ! Debug: expression subtree swapping
27082 7043           30E4                       xor	ah,ah
27083 7045           0B46         FE            or	ax,-2[bp]
27084                                           ! Debug: list unsigned int = ax+0 (used reg = )
27085 7048           50                         push	ax
27086                                           ! Debug: list int = const $3C0 (used reg = )
27087 7049           B8                   03C0  mov	ax,#$3C0
27088 704C           50                         push	ax
27089                                           ! Debug: func () void = outb+0 (used reg = )
27090 704D           E8         0B68            call	_outb
27091 7050           83C4                   04  add	sp,*4
27092                                           !BCC_EOS
27093                                           ! 3721             write_byte(ES, BX, inb(0x3c1)); BX++;
27094                                           ! Debug: list int = const $3C1 (used reg = )
27095 7053           B8                   03C1  mov	ax,#$3C1
27096 7056           50                         push	ax
27097                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27098 7057           E8         0B48            call	_inb
27099 705A           44                         inc	sp
27100 705B           44                         inc	sp
27101                                           ! Debug: list unsigned char = al+0 (used reg = )
27102 705C           30E4                       xor	ah,ah
27103 705E           50                         push	ax
27104                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27105 705F           FF76         08            push	8[bp]
27106                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27107 7062           FF76         06            push	6[bp]
27108                                           ! Debug: func () void = write_byte+0 (used reg = )
27109 7065           E8         0B0A            call	_write_byte
27110 7068           83C4                   06  add	sp,*6
27111                                           !BCC_EOS
27112                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27113 706B           8B46         08            mov	ax,8[bp]
27114 706E           40                         inc	ax
27115 706F           8946         08            mov	8[bp],ax
27116                                           !BCC_EOS
27117                                           ! 3722         }
27118                                           ! 3723         inb(0x3da);
27119                       00007072            .246:
27120                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27121 7072           8B46         FE            mov	ax,-2[bp]
27122 7075           40                         inc	ax
27123 7076           8946         FE            mov	-2[bp],ax
27124                       00007079            .247:
27125                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27126 7079           8B46         FE            mov	ax,-2[bp]
27127 707C           3D                   0013  cmp	ax,*$13
27128 707F           76           B4            jbe	.248
27129                       00007081            .249:
27130                       00007081            .245:
27131                                           ! Debug: list int = const $3DA (used reg = )
27132 7081           B8                   03DA  mov	ax,#$3DA
27133 7084           50                         push	ax
27134                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27135 7085           E8         0B1A            call	_inb
27136 7088           44                         inc	sp
27137 7089           44                         inc	sp
27138                                           !BCC_EOS
27139                                           ! 3724         for(i=0;i<=8;i+
27140                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27141 708A           31C0                       xor	ax,ax
27142 708C           8946         FE            mov	-2[bp],ax
27143                                           !BCC_EOS
27144                                           !BCC_EOS
27145                                           ! 3724 +) {
27146 708F           EB           33            jmp .24C
27147                       00007091            .24D:
27148                                           ! 3725             outb(0x3ce,i);
27149                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27150 7091           FF76         FE            push	-2[bp]
27151                                           ! Debug: list int = const $3CE (used reg = )
27152 7094           B8                   03CE  mov	ax,#$3CE
27153 7097           50                         push	ax
27154                                           ! Debug: func () void = outb+0 (used reg = )
27155 7098           E8         0B1D            call	_outb
27156 709B           83C4                   04  add	sp,*4
27157                                           !BCC_EOS
27158                                           ! 3726             write_byte(ES, BX, inb(0x3cf)); BX++;
27159                                           ! Debug: list int = const $3CF (used reg = )
27160 709E           B8                   03CF  mov	ax,#$3CF
27161 70A1           50                         push	ax
27162                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27163 70A2           E8         0AFD            call	_inb
27164 70A5           44                         inc	sp
27165 70A6           44                         inc	sp
27166                                           ! Debug: list unsigned char = al+0 (used reg = )
27167 70A7           30E4                       xor	ah,ah
27168 70A9           50                         push	ax
27169                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27170 70AA           FF76         08            push	8[bp]
27171                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27172 70AD           FF76         06            push	6[bp]
27173                                           ! Debug: func () void = write_byte+0 (used reg = )
27174 70B0           E8         0ABF            call	_write_byte
27175 70B3           83C4                   06  add	sp,*6
27176                                           !BCC_EOS
27177                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27178 70B6           8B46         08            mov	ax,8[bp]
27179 70B9           40                         inc	ax
27180 70BA           8946         08            mov	8[bp],ax
27181                                           !BCC_EOS
27182                                           ! 3727         }
27183                                           ! 3728         write_word(ES, BX, crtc_addr); BX+= 2;
27184                       000070BD            .24B:
27185                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27186 70BD           8B46         FE            mov	ax,-2[bp]
27187 70C0           40                         inc	ax
27188 70C1           8946         FE            mov	-2[bp],ax
27189                       000070C4            .24C:
27190                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27191 70C4           8B46         FE            mov	ax,-2[bp]
27192 70C7           3D                   0008  cmp	ax,*8
27193 70CA           76           C5            jbe	.24D
27194                       000070CC            .24E:
27195                       000070CC            .24A:
27196                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27197 70CC           FF76         FA            push	-6[bp]
27198                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27199 70CF           FF76         08            push	8[bp]
27200                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27201 70D2           FF76         06            push	6[bp]
27202                                           ! Debug: func () void = write_word+0 (used reg = )
27203 70D5           E8         0AB2            call	_write_word
27204 70D8           83C4                   06  add	sp,*6
27205                                           !BCC_EOS
27206                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27207 70DB           8B46         08            mov	ax,8[bp]
27208 70DE           40                         inc	ax
27209 70DF           40                         inc	ax
27210 70E0           8946         08            mov	8[bp],ax
27211                                           !BCC_EOS
27212                                           ! 3729         write_byte(ES, BX, 0); BX++;
27213                                           ! Debug: list int = const 0 (used reg = )
27214 70E3           31C0                       xor	ax,ax
27215 70E5           50                         push	ax
27216                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27217 70E6           FF76         08            push	8[bp]
27218                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27219 70E9           FF76         06            push	6[bp]
27220                                           ! Debug: func () void = write_byte+0 (used reg = )
27221 70EC           E8         0A83            call	_write_byte
27222 70EF           83C4                   06  add	sp,*6
27223                                           !BCC_EOS
27224                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27225 70F2           8B46         08            mov	ax,8[bp]
27226 70F5           40                         inc	ax
27227 70F6           8946         08            mov	8[bp],ax
27228                                           !BCC_EOS
27229                                           ! 3730         write_byte(ES, BX, 0); BX++;
27230                                           ! Debug: list int = const 0 (used reg = )
27231 70F9           31C0                       xor	ax,ax
27232 70FB           50                         push	ax
27233                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27234 70FC           FF76         08            push	8[bp]
27235                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27236 70FF           FF76         06            push	6[bp]
27237                                           ! Debug: func () void = write_byte+0 (used reg = )
27238 7102           E8         0A6D            call	_write_byte
27239 7105           83C4                   06  add	sp,*6
27240                                           !BCC_EOS
27241                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27242 7108           8B46         08            mov	ax,8[bp]
27243 710B           40                         inc	ax
27244 710C           8946         08            mov	8[bp],ax
27245                                           !BCC_EOS
27246                                           ! 3731         write_byte(ES, BX, 0); BX++;
27247                                           ! Debug: list int = const 0 (used reg = )
27248 710F           31C0                       xor	ax,ax
27249 7111           50                         push	ax
27250                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27251 7112           FF76         08            push	8[bp]
27252                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27253 7115           FF76         06            push	6[bp]
27254                                           ! Debug: func () void = write_byte+0 (used reg = )
27255 7118           E8         0A57            call	_write_byte
27256 711B           83C4                   06  add	sp,*6
27257                                           !BCC_EOS
27258                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27259 711E           8B46         08            mov	ax,8[bp]
27260 7121           40                         inc	ax
27261 7122           8946         08            mov	8[bp],ax
27262                                           !BCC_EOS
27263                                           ! 3732         write_byte(ES, BX, 0); BX++;
27264                                           ! Debug: list int = const 0 (used reg = )
27265 7125           31C0                       xor	ax,ax
27266 7127           50                         push	ax
27267                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27268 7128           FF76         08            push	8[bp]
27269                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27270 712B           FF76         06            push	6[bp]
27271                                           ! Debug: func () void = write_byte+0 (used reg = )
27272 712E           E8         0A41            call	_write_byte
27273 7131           83C4                   06  add	sp,*6
27274                                           !BCC_EOS
27275                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27276 7134           8B46         08            mov	ax,8[bp]
27277 7137           40                         inc	ax
27278 7138           8946         08            mov	8[bp],ax
27279                                           !BCC_EOS
27280                                           ! 3733     }
27281                                           ! 3734     if (CX & 2) {
27282                       0000713B            .239:
27283                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27284 713B           8A46         04            mov	al,4[bp]
27285 713E           24                     02  and	al,*2
27286 7140           84C0                       test	al,al
27287 7142   7503    E9         0270            beq 	.24F
27288                       00007147            .250:
27289                                           ! 3735         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27290                                           ! Debug: list int = const $49 (used reg = )
27291 7147           B8                   0049  mov	ax,*$49
27292 714A           50                         push	ax
27293                                           ! Debug: list int = const $40 (used reg = )
27294 714B           B8                   0040  mov	ax,*$40
27295 714E           50                         push	ax
27296                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27297 714F           E8         09FA            call	_read_byte
27298 7152           83C4                   04  add	sp,*4
27299                                           ! Debug: list unsigned char = al+0 (used reg = )
27300 7155           30E4                       xor	ah,ah
27301 7157           50                         push	ax
27302                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27303 7158           FF76         08            push	8[bp]
27304                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27305 715B           FF76         06            push	6[bp]
27306                                           ! Debug: func () void = write_byte+0 (used reg = )
27307 715E           E8         0A11            call	_write_byte
27308 7161           83C4                   06  add	sp,*6
27309                                           !BCC_EOS
27310                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27311 7164           8B46         08            mov	ax,8[bp]
27312 7167           40                         inc	ax
27313 7168           8946         08            mov	8[bp],ax
27314                                           !BCC_EOS
27315                                           ! 3736         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27316                                           ! Debug: list int = const $4A (used reg = )
27317 716B           B8                   004A  mov	ax,*$4A
27318 716E           50                         push	ax
27319                                           ! Debug: list int = const $40 (used reg = )
27320 716F           B8                   0040  mov	ax,*$40
27321 7172           50                         push	ax
27322                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27323 7173           E8         09E9            call	_read_word
27324 7176           83C4                   04  add	sp,*4
27325                                           ! Debug: list unsigned short = ax+0 (used reg = )
27326 7179           50                         push	ax
27327                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27328 717A           FF76         08            push	8[bp]
27329                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27330 717D           FF76         06            push	6[bp]
27331                                           ! Debug: func () void = write_word+0 (used reg = )
27332 7180           E8         0A07            call	_write_word
27333 7183           83C4                   06  add	sp,*6
27334                                           !BCC_EOS
27335                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27336 7186           8B46         08            mov	ax,8[bp]
27337 7189           40                         inc	ax
27338 718A           40                         inc	ax
27339 718B           8946         08            mov	8[bp],ax
27340                                           !BCC_EOS
27341                                           ! 3737         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27342                                           ! Debug: list int = const $4C (used reg = )
27343 718E           B8                   004C  mov	ax,*$4C
27344 7191           50                         push	ax
27345                                           ! Debug: list int = const $40 (used reg = )
27346 7192           B8                   0040  mov	ax,*$40
27347 7195           50                         push	ax
27348                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27349 7196           E8         09C6            call	_read_word
27350 7199           83C4                   04  add	sp,*4
27351                                           ! Debug: list unsigned short = ax+0 (used reg = )
27352 719C           50                         push	ax
27353                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27354 719D           FF76         08            push	8[bp]
27355                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27356 71A0           FF76         06            push	6[bp]
27357                                           ! Debug: func () void = write_word+0 (used reg = )
27358 71A3           E8         09E4            call	_write_word
27359 71A6           83C4                   06  add	sp,*6
27360                                           !BCC_EOS
27361                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27362 71A9           8B46         08            mov	ax,8[bp]
27363 71AC           40                         inc	ax
27364 71AD           40                         inc	ax
27365 71AE           8946         08            mov	8[bp],ax
27366                                           !BCC_EOS
27367                                           ! 3738         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27368                                           ! Debug: list int = const $63 (used reg = )
27369 71B1           B8                   0063  mov	ax,*$63
27370 71B4           50                         push	ax
27371                                           ! Debug: list int = const $40 (used reg = )
27372 71B5           B8                   0040  mov	ax,*$40
27373 71B8           50                         push	ax
27374                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27375 71B9           E8         09A3            call	_read_word
27376 71BC           83C4                   04  add	sp,*4
27377                                           ! Debug: list unsigned short = ax+0 (used reg = )
27378 71BF           50                         push	ax
27379                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27380 71C0           FF76         08            push	8[bp]
27381                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27382 71C3           FF76         06            push	6[bp]
27383                                           ! Debug: func () void = write_word+0 (used reg = )
27384 71C6           E8         09C1            call	_write_word
27385 71C9           83C4                   06  add	sp,*6
27386                                           !BCC_EOS
27387                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27388 71CC           8B46         08            mov	ax,8[bp]
27389 71CF           40                         inc	ax
27390 71D0           40                         inc	ax
27391 71D1           8946         08            mov	8[bp],ax
27392                                           !BCC_EOS
27393                                           ! 3739         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27394                                           ! Debug: list int = const $84 (used reg = )
27395 71D4           B8                   0084  mov	ax,#$84
27396 71D7           50                         push	ax
27397                                           ! Debug: list int = const $40 (used reg = )
27398 71D8           B8                   0040  mov	ax,*$40
27399 71DB           50                         push	ax
27400                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27401 71DC           E8         096D            call	_read_byte
27402 71DF           83C4                   04  add	sp,*4
27403                                           ! Debug: list unsigned char = al+0 (used reg = )
27404 71E2           30E4                       xor	ah,ah
27405 71E4           50                         push	ax
27406                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27407 71E5           FF76         08            push	8[bp]
27408                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27409 71E8           FF76         06            push	6[bp]
27410                                           ! Debug: func () void = write_byte+0 (used reg = )
27411 71EB           E8         0984            call	_write_byte
27412 71EE           83C4                   06  add	sp,*6
27413                                           !BCC_EOS
27414                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27415 71F1           8B46         08            mov	ax,8[bp]
27416 71F4           40                         inc	ax
27417 71F5           8946         08            mov	8[bp],ax
27418                                           !BCC_EOS
27419                                           ! 3740         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27420                                           ! Debug: list int = const $85 (used reg = )
27421 71F8           B8                   0085  mov	ax,#$85
27422 71FB           50                         push	ax
27423                                           ! Debug: list int = const $40 (used reg = )
27424 71FC           B8                   0040  mov	ax,*$40
27425 71FF           50                         push	ax
27426                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27427 7200           E8         095C            call	_read_word
27428 7203           83C4                   04  add	sp,*4
27429                                           ! Debug: list unsigned short = ax+0 (used reg = )
27430 7206           50                         push	ax
27431                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27432 7207           FF76         08            push	8[bp]
27433                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27434 720A           FF76         06            push	6[bp]
27435                                           ! Debug: func () void = write_word+0 (used reg = )
27436 720D           E8         097A            call	_write_word
27437 7210           83C4                   06  add	sp,*6
27438                                           !BCC_EOS
27439                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27440 7213           8B46         08            mov	ax,8[bp]
27441 7216           40                         inc	ax
27442 7217           40                         inc	ax
27443 7218           8946         08            mov	8[bp],ax
27444                                           !BCC_EOS
27445                                           ! 3741         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27446                                           ! Debug: list int = const $87 (used reg = )
27447 721B           B8                   0087  mov	ax,#$87
27448 721E           50                         push	ax
27449                                           ! Debug: list int = const $40 (used reg = )
27450 721F           B8                   0040  mov	ax,*$40
27451 7222           50                         push	ax
27452                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27453 7223           E8         0926            call	_read_byte
27454 7226           83C4                   04  add	sp,*4
27455                                           ! Debug: list unsigned char = al+0 (used reg = )
27456 7229           30E4                       xor	ah,ah
27457 722B           50                         push	ax
27458                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27459 722C           FF76         08            push	8[bp]
27460                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27461 722F           FF76         06            push	6[bp]
27462                                           ! Debug: func () void = write_byte+0 (used reg = )
27463 7232           E8         093D            call	_write_byte
27464 7235           83C4                   06  add	sp,*6
27465                                           !BCC_EOS
27466                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27467 7238           8B46         08            mov	ax,8[bp]
27468 723B           40                         inc	ax
27469 723C           8946         08            mov	8[bp],ax
27470                                           !BCC_EOS
27471                                           ! 3742         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27472                                           ! Debug: list int = const $88 (used reg = )
27473 723F           B8                   0088  mov	ax,#$88
27474 7242           50                         push	ax
27475                                           ! Debug: list int = const $40 (used reg = )
27476 7243           B8                   0040  mov	ax,*$40
27477 7246           50                         push	ax
27478                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27479 7247           E8         0902            call	_read_byte
27480 724A           83C4                   04  add	sp,*4
27481                                           ! Debug: list unsigned char = al+0 (used reg = )
27482 724D           30E4                       xor	ah,ah
27483 724F           50                         push	ax
27484                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27485 7250           FF76         08            push	8[bp]
27486                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27487 7253           FF76         06            push	6[bp]
27488                                           ! Debug: func () void = write_byte+0 (used reg = )
27489 7256           E8         0919            call	_write_byte
27490 7259           83C4                   06  add	sp,*6
27491                                           !BCC_EOS
27492                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27493 725C           8B46         08            mov	ax,8[bp]
27494 725F           40                         inc	ax
27495 7260           8946         08            mov	8[bp],ax
27496                                           !BCC_EOS
27497                                           ! 3743         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27498                                           ! Debug: list int = const $89 (used reg = )
27499 7263           B8                   0089  mov	ax,#$89
27500 7266           50                         push	ax
27501                                           ! Debug: list int = const $40 (used reg = )
27502 7267           B8                   0040  mov	ax,*$40
27503 726A           50                         push	ax
27504                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27505 726B           E8         08DE            call	_read_byte
27506 726E           83C4                   04  add	sp,*4
27507                                           ! Debug: list unsigned char = al+0 (used reg = )
27508 7271           30E4                       xor	ah,ah
27509 7273           50                         push	ax
27510                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27511 7274           FF76         08            push	8[bp]
27512                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27513 7277           FF76         06            push	6[bp]
27514                                           ! Debug: func () void = write_byte+0 (used reg = )
27515 727A           E8         08F5            call	_write_byte
27516 727D           83C4                   06  add	sp,*6
27517                                           !BCC_EOS
27518                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27519 7280           8B46         08            mov	ax,8[bp]
27520 7283           40                         inc	ax
27521 7284           8946         08            mov	8[bp],ax
27522                                           !BCC_EOS
27523                                           ! 3744         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27524                                           ! Debug: list int = const $60 (used reg = )
27525 7287           B8                   0060  mov	ax,*$60
27526 728A           50                         push	ax
27527                                           ! Debug: list int = const $40 (used reg = )
27528 728B           B8                   0040  mov	ax,*$40
27529 728E           50                         push	ax
27530                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27531 728F           E8         08CD            call	_read_word
27532 7292           83C4                   04  add	sp,*4
27533                                           ! Debug: list unsigned short = ax+0 (used reg = )
27534 7295           50                         push	ax
27535                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27536 7296           FF76         08            push	8[bp]
27537                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27538 7299           FF76         06            push	6[bp]
27539                                           ! Debug: func () void = write_word+0 (used reg = )
27540 729C           E8         08EB            call	_write_word
27541 729F           83C4                   06  add	sp,*6
27542                                           !BCC_EOS
27543                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27544 72A2           8B46         08            mov	ax,8[bp]
27545 72A5           40                         inc	ax
27546 72A6           40                         inc	ax
27547 72A7           8946         08            mov	8[bp],ax
27548                                           !BCC_EOS
27549                                           ! 3745         for(i=0;i<8;i++) {
27550                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27551 72AA           31C0                       xor	ax,ax
27552 72AC           8946         FE            mov	-2[bp],ax
27553                                           !BCC_EOS
27554                                           !BCC_EOS
27555 72AF           EB           2F            jmp .253
27556                       000072B1            .254:
27557                                           ! 3746             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
27558                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
27559                                           ! Debug: expression subtree swapping
27560 72B1           8B46         FE            mov	ax,-2[bp]
27561 72B4           D1E0                       shl	ax,*1
27562                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
27563                                           ! Debug: expression subtree swapping
27564                                           ! Debug: list unsigned int = ax+$50 (used reg = )
27565 72B6           05                   0050  add	ax,*$50
27566 72B9           50                         push	ax
27567                                           ! Debug: list int = const $40 (used reg = )
27568 72BA           B8                   0040  mov	ax,*$40
27569 72BD           50                         push	ax
27570                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27571 72BE           E8         089E            call	_read_word
27572 72C1           83C4                   04  add	sp,*4
27573                                           ! Debug: list unsigned short = ax+0 (used reg = )
27574 72C4           50                         push	ax
27575                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27576 72C5           FF76         08            push	8[bp]
27577                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27578 72C8           FF76         06            push	6[bp]
27579                                           ! Debug: func () void = write_word+0 (used reg = )
27580 72CB           E8         08BC            call	_write_word
27581 72CE           83C4                   06  add	sp,*6
27582                                           !BCC_EOS
27583                                           ! 3747             BX += 2;
27584                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27585 72D1           8B46         08            mov	ax,8[bp]
27586 72D4           40                         inc	ax
27587 72D5           40                         inc	ax
27588 72D6           8946         08            mov	8[bp],ax
27589                                           !BCC_EOS
27590                                           ! 3748         }
27591                                           ! 3749         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
27592                       000072D9            .252:
27593                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27594 72D9           8B46         FE            mov	ax,-2[bp]
27595 72DC           40                         inc	ax
27596 72DD           8946         FE            mov	-2[bp],ax
27597                       000072E0            .253:
27598                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27599 72E0           8B46         FE            mov	ax,-2[bp]
27600 72E3           3D                   0008  cmp	ax,*8
27601 72E6           72           C9            jb 	.254
27602                       000072E8            .255:
27603                       000072E8            .251:
27604                                           ! Debug: list int = const $4E (used reg = )
27605 72E8           B8                   004E  mov	ax,*$4E
27606 72EB           50                         push	ax
27607                                           ! Debug: list int = const $40 (used reg = )
27608 72EC           B8                   0040  mov	ax,*$40
27609 72EF           50                         push	ax
27610                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27611 72F0           E8         086C            call	_read_word
27612 72F3           83C4                   04  add	sp,*4
27613                                           ! Debug: list unsigned short = ax+0 (used reg = )
27614 72F6           50                         push	ax
27615                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27616 72F7           FF76         08            push	8[bp]
27617                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27618 72FA           FF76         06            push	6[bp]
27619                                           ! Debug: func () void = write_word+0 (used reg = )
27620 72FD           E8         088A            call	_write_word
27621 7300           83C4                   06  add	sp,*6
27622                                           !BCC_EOS
27623                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27624 7303           8B46         08            mov	ax,8[bp]
27625 7306           40                         inc	ax
27626 7307           40                         inc	ax
27627 7308           8946         08            mov	8[bp],ax
27628                                           !BCC_EOS
27629                                           ! 3750         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
27630                                           ! Debug: list int = const $62 (used reg = )
27631 730B           B8                   0062  mov	ax,*$62
27632 730E           50                         push	ax
27633                                           ! Debug: list int = const $40 (used reg = )
27634 730F           B8                   0040  mov	ax,*$40
27635 7312           50                         push	ax
27636                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27637 7313           E8         0836            call	_read_byte
27638 7316           83C4                   04  add	sp,*4
27639                                           ! Debug: list unsigned char = al+0 (used reg = )
27640 7319           30E4                       xor	ah,ah
27641 731B           50                         push	ax
27642                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27643 731C           FF76         08            push	8[bp]
27644                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27645 731F           FF76         06            push	6[bp]
27646                                           ! Debug: func () void = write_byte+0 (used reg = )
27647 7322           E8         084D            call	_write_byte
27648 7325           83C4                   06  add	sp,*6
27649                                           !BCC_EOS
27650                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27651 7328           8B46         08            mov	ax,8[bp]
27652 732B           40                         inc	ax
27653 732C           8946         08            mov	8[bp],ax
27654                                           !BCC_EOS
27655                                           ! 3751         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
27656                                           ! Debug: list int = const $7C (used reg = )
27657 732F           B8                   007C  mov	ax,*$7C
27658 7332           50                         push	ax
27659                                           ! Debug: list int = const 0 (used reg = )
27660 7333           31C0                       xor	ax,ax
27661 7335           50                         push	ax
27662                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27663 7336           E8         0826            call	_read_word
27664 7339           83C4                   04  add	sp,*4
27665                                           ! Debug: list unsigned short = ax+0 (used reg = )
27666 733C           50                         push	ax
27667                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27668 733D           FF76         08            push	8[bp]
27669                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27670 7340           FF76         06            push	6[bp]
27671                                           ! Debug: func () void = write_word+0 (used reg = )
27672 7343           E8         0844            call	_write_word
27673 7346           83C4                   06  add	sp,*6
27674                                           !BCC_EOS
27675                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27676 7349           8B46         08            mov	ax,8[bp]
27677 734C           40                         inc	ax
27678 734D           40                         inc	ax
27679 734E           8946         08            mov	8[bp],ax
27680                                           !BCC_EOS
27681                                           ! 3752         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
27682                                           ! Debug: list int = const $7E (used reg = )
27683 7351           B8                   007E  mov	ax,*$7E
27684 7354           50                         push	ax
27685                                           ! Debug: list int = const 0 (used reg = )
27686 7355           31C0                       xor	ax,ax
27687 7357           50                         push	ax
27688                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27689 7358           E8         0804            call	_read_word
27690 735B           83C4                   04  add	sp,*4
27691                                           ! Debug: list unsigned short = ax+0 (used reg = )
27692 735E           50                         push	ax
27693                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27694 735F           FF76         08            push	8[bp]
27695                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27696 7362           FF76         06            push	6[bp]
27697                                           ! Debug: func () void = write_word+0 (used reg = )
27698 7365           E8         0822            call	_write_word
27699 7368           83C4                   06  add	sp,*6
27700                                           !BCC_EOS
27701                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27702 736B           8B46         08            mov	ax,8[bp]
27703 736E           40                         inc	ax
27704 736F           40                         inc	ax
27705 7370           8946         08            mov	8[bp],ax
27706                                           !BCC_EOS
27707                                           ! 3753         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
27708                                           ! Debug: list int = const $10C (used reg = )
27709 7373           B8                   010C  mov	ax,#$10C
27710 7376           50                         push	ax
27711                                           ! Debug: list int = const 0 (used reg = )
27712 7377           31C0                       xor	ax,ax
27713 7379           50                         push	ax
27714                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27715 737A           E8         07E2            call	_read_word
27716 737D           83C4                   04  add	sp,*4
27717                                           ! Debug: list unsigned short = ax+0 (used reg = )
27718 7380           50                         push	ax
27719                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27720 7381           FF76         08            push	8[bp]
27721                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27722 7384           FF76         06            push	6[bp]
27723                                           ! Debug: func () void = write_word+0 (used reg = )
27724 7387           E8         0800            call	_write_word
27725 738A           83C4                   06  add	sp,*6
27726                                           !BCC_EOS
27727                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27728 738D           8B46         08            mov	ax,8[bp]
27729 7390           40                         inc	ax
27730 7391           40                         inc	ax
27731 7392           8946         08            mov	8[bp],ax
27732                                           !BCC_EOS
27733                                           ! 3754         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
27734                                           ! Debug: list int = const $10E (used reg = )
27735 7395           B8                   010E  mov	ax,#$10E
27736 7398           50                         push	ax
27737                                           ! Debug: list int = const 0 (used reg = )
27738 7399           31C0                       xor	ax,ax
27739 739B           50                         push	ax
27740                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27741 739C           E8         07C0            call	_read_word
27742 739F           83C4                   04  add	sp,*4
27743                                           ! Debug: list unsigned short = ax+0 (used reg = )
27744 73A2           50                         push	ax
27745                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27746 73A3           FF76         08            push	8[bp]
27747                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27748 73A6           FF76         06            push	6[bp]
27749                                           ! Debug: func () void = write_word+0 (used reg = )
27750 73A9           E8         07DE            call	_write_word
27751 73AC           83C4                   06  add	sp,*6
27752                                           !BCC_EOS
27753                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27754 73AF           8B46         08            mov	ax,8[bp]
27755 73B2           40                         inc	ax
27756 73B3           40                         inc	ax
27757 73B4           8946         08            mov	8[bp],ax
27758                                           !BCC_EOS
27759                                           ! 3755     }
27760                                           ! 3756     if (CX & 4) {
27761                       000073B7            .24F:
27762                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
27763 73B7           8A46         04            mov	al,4[bp]
27764 73BA           24                     04  and	al,*4
27765 73BC           84C0                       test	al,al
27766 73BE   7503    E9         00B5            beq 	.256
27767                       000073C3            .257:
27768                                           ! 3757         write_byte(ES, BX, inb(0x3c7)); BX++;
27769                                           ! Debug: list int = const $3C7 (used reg = )
27770 73C3           B8                   03C7  mov	ax,#$3C7
27771 73C6           50                         push	ax
27772                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27773 73C7           E8         07D8            call	_inb
27774 73CA           44                         inc	sp
27775 73CB           44                         inc	sp
27776                                           ! Debug: list unsigned char = al+0 (used reg = )
27777 73CC           30E4                       xor	ah,ah
27778 73CE           50                         push	ax
27779                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27780 73CF           FF76         08            push	8[bp]
27781                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27782 73D2           FF76         06            push	6[bp]
27783                                           ! Debug: func () void = write_byte+0 (used reg = )
27784 73D5           E8         079A            call	_write_byte
27785 73D8           83C4                   06  add	sp,*6
27786                                           !BCC_EOS
27787                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27788 73DB           8B46         08            mov	ax,8[bp]
27789 73DE           40                         inc	ax
27790 73DF           8946         08            mov	8[bp],ax
27791                                           !BCC_EOS
27792                                           ! 3758         write_byte(ES, BX, inb(0x3c8)); BX++;
27793                                           ! Debug: list int = const $3C8 (used reg = )
27794 73E2           B8                   03C8  mov	ax,#$3C8
27795 73E5           50                         push	ax
27796                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27797 73E6           E8         07B9            call	_inb
27798 73E9           44                         inc	sp
27799 73EA           44                         inc	sp
27800                                           ! Debug: list unsigned char = al+0 (used reg = )
27801 73EB           30E4                       xor	ah,ah
27802 73ED           50                         push	ax
27803                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27804 73EE           FF76         08            push	8[bp]
27805                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27806 73F1           FF76         06            push	6[bp]
27807                                           ! Debug: func () void = write_byte+0 (used reg = )
27808 73F4           E8         077B            call	_write_byte
27809 73F7           83C4                   06  add	sp,*6
27810                                           !BCC_EOS
27811                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27812 73FA           8B46         08            mov	ax,8[bp]
27813 73FD           40                         inc	ax
27814 73FE           8946         08            mov	8[bp],ax
27815                                           !BCC_EOS
27816                                           ! 3759         write_byte(ES, BX, inb(0x3c6)); BX++;
27817                                           ! Debug: list int = const $3C6 (used reg = )
27818 7401           B8                   03C6  mov	ax,#$3C6
27819 7404           50                         push	ax
27820                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27821 7405           E8         079A            call	_inb
27822 7408           44                         inc	sp
27823 7409           44                         inc	sp
27824                                           ! Debug: list unsigned char = al+0 (used reg = )
27825 740A           30E4                       xor	ah,ah
27826 740C           50                         push	ax
27827                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27828 740D           FF76         08            push	8[bp]
27829                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27830 7410           FF76         06            push	6[bp]
27831                                           ! Debug: func () void = write_byte+0 (used reg = )
27832 7413           E8         075C            call	_write_byte
27833 7416           83C4                   06  add	sp,*6
27834                                           !BCC_EOS
27835                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27836 7419           8B46         08            mov	ax,8[bp]
27837 741C           40                         inc	ax
27838 741D           8946         08            mov	8[bp],ax
27839                                           !BCC_EOS
27840                                           ! 3760         outb(0x3c8,0x00);
27841                                           ! Debug: list int = const 0 (used reg = )
27842 7420           31C0                       xor	ax,ax
27843 7422           50                         push	ax
27844                                           ! Debug: list int = const $3C8 (used reg = )
27845 7423           B8                   03C8  mov	ax,#$3C8
27846 7426           50                         push	ax
27847                                           ! Debug: func () void = outb+0 (used reg = )
27848 7427           E8         078E            call	_outb
27849 742A           83C4                   04  add	sp,*4
27850                                           !BCC_EOS
27851                                           ! 3761         for(i=0;i<256*3;i++) {
27852                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27853 742D           31C0                       xor	ax,ax
27854 742F           8946         FE            mov	-2[bp],ax
27855                                           !BCC_EOS
27856                                           !BCC_EOS
27857 7432           EB           26            jmp .25A
27858                       00007434            .25B:
27859                                           ! 3762             write_byte(ES, BX, inb(0x3c9)); BX++;
27860                                           ! Debug: list int = const $3C9 (used reg = )
27861 7434           B8                   03C9  mov	ax,#$3C9
27862 7437           50                         push	ax
27863                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27864 7438           E8         0767            call	_inb
27865 743B           44                         inc	sp
27866 743C           44                         inc	sp
27867                                           ! Debug: list unsigned char = al+0 (used reg = )
27868 743D           30E4                       xor	ah,ah
27869 743F           50                         push	ax
27870                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27871 7440           FF76         08            push	8[bp]
27872                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27873 7443           FF76         06            push	6[bp]
27874                                           ! Debug: func () void = write_byte+0 (used reg = )
27875 7446           E8         0729            call	_write_byte
27876 7449           83C4                   06  add	sp,*6
27877                                           !BCC_EOS
27878                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27879 744C           8B46         08            mov	ax,8[bp]
27880 744F           40                         inc	ax
27881 7450           8946         08            mov	8[bp],ax
27882                                           !BCC_EOS
27883                                           ! 3763         }
27884                                           ! 3764         write_byte(ES, BX, 0); BX++;
27885                       00007453            .259:
27886                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27887 7453           8B46         FE            mov	ax,-2[bp]
27888 7456           40                         inc	ax
27889 7457           8946         FE            mov	-2[bp],ax
27890                       0000745A            .25A:
27891                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
27892 745A           8B46         FE            mov	ax,-2[bp]
27893 745D           3D                   0300  cmp	ax,#$300
27894 7460           72           D2            jb 	.25B
27895                       00007462            .25C:
27896                       00007462            .258:
27897                                           ! Debug: list int = const 0 (used reg = )
27898 7462           31C0                       xor	ax,ax
27899 7464           50                         push	ax
27900                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27901 7465           FF76         08            push	8[bp]
27902                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27903 7468           FF76         06            push	6[bp]
27904                                           ! Debug: func () void = write_byte+0 (used reg = )
27905 746B           E8         0704            call	_write_byte
27906 746E           83C4                   06  add	sp,*6
27907                                           !BCC_EOS
27908                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27909 7471           8B46         08            mov	ax,8[bp]
27910 7474           40                         inc	ax
27911 7475           8946         08            mov	8[bp],ax
27912                                           !BCC_EOS
27913                                           ! 3765     }
27914                                           ! 3766     return BX;
27915                       00007478            .256:
27916 7478           8B46         08            mov	ax,8[bp]
27917 747B           89EC                       mov	sp,bp
27918 747D           5D                         pop	bp
27919 747E           C3                         ret
27920                                           !BCC_EOS
27921                                           ! 3767 }
27922                                           ! 3768 static Bit16u biosfn_restore_video_state (CX,ES,BX)
27923                                           ! 3769      Bit16u CX;Bit16u ES;Bit16u BX;
27924                       0000747F            _biosfn_restore_video_state:
27925                                           !BCC_EOS
27926                                           !BCC_EOS
27927                                           !BCC_EOS
27928                                           ! 3770 {
27929                                           ! 3771     Bit16u i, crtc_addr, v, addr1, ar_index;
27930                                           !BCC_EOS
27931                                           ! 3772     if (CX & 1) {
27932 747F           55                         push	bp
27933 7480           89E5                       mov	bp,sp
27934 7482           83C4                   F6  add	sp,*-$A
27935                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
27936 7485           8A46         04            mov	al,4[bp]
27937 7488           24                     01  and	al,*1
27938 748A           84C0                       test	al,al
27939 748C   7503    E9         02AA            beq 	.25D
27940                       00007491            .25E:
27941                                           ! 3773         inb(0x3da);
27942                                           ! Debug: list int = const $3DA (used reg = )
27943 7491           B8                   03DA  mov	ax,#$3DA
27944 7494           50                         push	ax
27945                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27946 7495           E8         070A            call	_inb
27947 7498           44                         inc	sp
27948 7499           44                         inc	sp
27949                                           !BCC_EOS
27950                                           ! 3774         crtc_addr = read_word(ES, BX + 0x40);
27951                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
27952 749A           8B46         08            mov	ax,8[bp]
27953                                           ! Debug: list unsigned int = ax+$40 (used reg = )
27954 749D           05                   0040  add	ax,*$40
27955 74A0           50                         push	ax
27956                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27957 74A1           FF76         06            push	6[bp]
27958                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27959 74A4           E8         06B8            call	_read_word
27960 74A7           83C4                   04  add	sp,*4
27961                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
27962 74AA           8946         FC            mov	-4[bp],ax
27963                                           !BCC_EOS
27964                                           ! 3775         addr1 = BX;
27965                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
27966 74AD           8B46         08            mov	ax,8[bp]
27967 74B0           8946         F8            mov	-8[bp],ax
27968                                           !BCC_EOS
27969                                           ! 3776         BX += 5;
27970                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
27971 74B3           8B46         08            mov	ax,8[bp]
27972 74B6           05                   0005  add	ax,*5
27973 74B9           8946         08            mov	8[bp],ax
27974                                           !BCC_EOS
27975                                           ! 3777         for(i=1;i<=4;i++){
27976                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
27977 74BC           B8                   0001  mov	ax,*1
27978 74BF           8946         FE            mov	-2[bp],ax
27979                                           !BCC_EOS
27980                                           !BCC_EOS
27981 74C2           EB           34            jmp .261
27982                       000074C4            .262:
27983                                           ! 3778             outb(0x3c4, i);
27984                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
27985 74C4           FF76         FE            push	-2[bp]
27986                                           ! Debug: list int = const $3C4 (used reg = )
27987 74C7           B8                   03C4  mov	ax,#$3C4
27988 74CA           50                         push	ax
27989                                           ! Debug: func () void = outb+0 (used reg = )
27990 74CB           E8         06EA            call	_outb
27991 74CE           83C4                   04  add	sp,*4
27992                                           !BCC_EOS
27993                                           ! 3779             outb(0x3c5, rea
27994                                           ! 3779 d_byte(ES, BX)); BX++;
27995                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27996 74D1           FF76         08            push	8[bp]
27997                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27998 74D4           FF76         06            push	6[bp]
27999                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28000 74D7           E8         0672            call	_read_byte
28001 74DA           83C4                   04  add	sp,*4
28002                                           ! Debug: list unsigned char = al+0 (used reg = )
28003 74DD           30E4                       xor	ah,ah
28004 74DF           50                         push	ax
28005                                           ! Debug: list int = const $3C5 (used reg = )
28006 74E0           B8                   03C5  mov	ax,#$3C5
28007 74E3           50                         push	ax
28008                                           ! Debug: func () void = outb+0 (used reg = )
28009 74E4           E8         06D1            call	_outb
28010 74E7           83C4                   04  add	sp,*4
28011                                           !BCC_EOS
28012                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28013 74EA           8B46         08            mov	ax,8[bp]
28014 74ED           40                         inc	ax
28015 74EE           8946         08            mov	8[bp],ax
28016                                           !BCC_EOS
28017                                           ! 3780         }
28018                                           ! 3781         outb(0x3c4, 0);
28019                       000074F1            .260:
28020                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28021 74F1           8B46         FE            mov	ax,-2[bp]
28022 74F4           40                         inc	ax
28023 74F5           8946         FE            mov	-2[bp],ax
28024                       000074F8            .261:
28025                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28026 74F8           8B46         FE            mov	ax,-2[bp]
28027 74FB           3D                   0004  cmp	ax,*4
28028 74FE           76           C4            jbe	.262
28029                       00007500            .263:
28030                       00007500            .25F:
28031                                           ! Debug: list int = const 0 (used reg = )
28032 7500           31C0                       xor	ax,ax
28033 7502           50                         push	ax
28034                                           ! Debug: list int = const $3C4 (used reg = )
28035 7503           B8                   03C4  mov	ax,#$3C4
28036 7506           50                         push	ax
28037                                           ! Debug: func () void = outb+0 (used reg = )
28038 7507           E8         06AE            call	_outb
28039 750A           83C4                   04  add	sp,*4
28040                                           !BCC_EOS
28041                                           ! 3782         outb(0x3c5, read_byte(ES, BX)); BX++;
28042                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28043 750D           FF76         08            push	8[bp]
28044                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28045 7510           FF76         06            push	6[bp]
28046                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28047 7513           E8         0636            call	_read_byte
28048 7516           83C4                   04  add	sp,*4
28049                                           ! Debug: list unsigned char = al+0 (used reg = )
28050 7519           30E4                       xor	ah,ah
28051 751B           50                         push	ax
28052                                           ! Debug: list int = const $3C5 (used reg = )
28053 751C           B8                   03C5  mov	ax,#$3C5
28054 751F           50                         push	ax
28055                                           ! Debug: func () void = outb+0 (used reg = )
28056 7520           E8         0695            call	_outb
28057 7523           83C4                   04  add	sp,*4
28058                                           !BCC_EOS
28059                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28060 7526           8B46         08            mov	ax,8[bp]
28061 7529           40                         inc	ax
28062 752A           8946         08            mov	8[bp],ax
28063                                           !BCC_EOS
28064                                           ! 3783         outw(crtc_addr,0x0011);
28065                                           ! Debug: list int = const $11 (used reg = )
28066 752D           B8                   0011  mov	ax,*$11
28067 7530           50                         push	ax
28068                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28069 7531           FF76         FC            push	-4[bp]
28070                                           ! Debug: func () void = outw+0 (used reg = )
28071 7534           E8         0691            call	_outw
28072 7537           83C4                   04  add	sp,*4
28073                                           !BCC_EOS
28074                                           ! 3784         for(i=0;i<=0x18;i++) {
28075                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28076 753A           31C0                       xor	ax,ax
28077 753C           8946         FE            mov	-2[bp],ax
28078                                           !BCC_EOS
28079                                           !BCC_EOS
28080 753F           EB           3C            jmp .266
28081                       00007541            .267:
28082                                           ! 3785             if (i != 0x11) {
28083                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28084 7541           8B46         FE            mov	ax,-2[bp]
28085 7544           3D                   0011  cmp	ax,*$11
28086 7547           74           26            je  	.268
28087                       00007549            .269:
28088                                           ! 3786                 outb(crtc_addr,i);
28089                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28090 7549           FF76         FE            push	-2[bp]
28091                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28092 754C           FF76         FC            push	-4[bp]
28093                                           ! Debug: func () void = outb+0 (used reg = )
28094 754F           E8         0666            call	_outb
28095 7552           83C4                   04  add	sp,*4
28096                                           !BCC_EOS
28097                                           ! 3787                 outb(crtc_addr+1, read_byte(ES, BX));
28098                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28099 7555           FF76         08            push	8[bp]
28100                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28101 7558           FF76         06            push	6[bp]
28102                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28103 755B           E8         05EE            call	_read_byte
28104 755E           83C4                   04  add	sp,*4
28105                                           ! Debug: list unsigned char = al+0 (used reg = )
28106 7561           30E4                       xor	ah,ah
28107 7563           50                         push	ax
28108                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28109 7564           8B46         FC            mov	ax,-4[bp]
28110                                           ! Debug: list unsigned int = ax+1 (used reg = )
28111 7567           40                         inc	ax
28112 7568           50                         push	ax
28113                                           ! Debug: func () void = outb+0 (used reg = )
28114 7569           E8         064C            call	_outb
28115 756C           83C4                   04  add	sp,*4
28116                                           !BCC_EOS
28117                                           ! 3788             }
28118                                           ! 3789             BX++;
28119                       0000756F            .268:
28120                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28121 756F           8B46         08            mov	ax,8[bp]
28122 7572           40                         inc	ax
28123 7573           8946         08            mov	8[bp],ax
28124                                           !BCC_EOS
28125                                           ! 3790         }
28126                                           ! 3791         v = inb(0x3cc) & ~0x01;
28127                       00007576            .265:
28128                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28129 7576           8B46         FE            mov	ax,-2[bp]
28130 7579           40                         inc	ax
28131 757A           8946         FE            mov	-2[bp],ax
28132                       0000757D            .266:
28133                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28134 757D           8B46         FE            mov	ax,-2[bp]
28135 7580           3D                   0018  cmp	ax,*$18
28136 7583           76           BC            jbe	.267
28137                       00007585            .26A:
28138                       00007585            .264:
28139                                           ! Debug: list int = const $3CC (used reg = )
28140 7585           B8                   03CC  mov	ax,#$3CC
28141 7588           50                         push	ax
28142                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28143 7589           E8         0616            call	_inb
28144 758C           44                         inc	sp
28145 758D           44                         inc	sp
28146                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28147 758E           24                     FE  and	al,#$FE
28148                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28149 7590           30E4                       xor	ah,ah
28150 7592           8946         FA            mov	-6[bp],ax
28151                                           !BCC_EOS
28152                                           ! 3792         if (crtc_addr = 0x3d4)
28153                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28154 7595           B8                   03D4  mov	ax,#$3D4
28155 7598           8946         FC            mov	-4[bp],ax
28156 759B           85C0                       test	ax,ax
28157 759D           74           08            je  	.26B
28158                       0000759F            .26C:
28159                                           ! 3793             v |= 0x01;
28160                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28161 759F           8B46         FA            mov	ax,-6[bp]
28162 75A2           0C                     01  or	al,*1
28163 75A4           8946         FA            mov	-6[bp],ax
28164                                           !BCC_EOS
28165                                           ! 3794         outb(0x3c2, v);
28166                       000075A7            .26B:
28167                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28168 75A7           FF76         FA            push	-6[bp]
28169                                           ! Debug: list int = const $3C2 (used reg = )
28170 75AA           B8                   03C2  mov	ax,#$3C2
28171 75AD           50                         push	ax
28172                                           ! Debug: func () void = outb+0 (used reg = )
28173 75AE           E8         0607            call	_outb
28174 75B1           83C4                   04  add	sp,*4
28175                                           !BCC_EOS
28176                                           ! 3795         outb(crtc_addr, 0x11);
28177                                           ! Debug: list int = const $11 (used reg = )
28178 75B4           B8                   0011  mov	ax,*$11
28179 75B7           50                         push	ax
28180                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28181 75B8           FF76         FC            push	-4[bp]
28182                                           ! Debug: func () void = outb+0 (used reg = )
28183 75BB           E8         05FA            call	_outb
28184 75BE           83C4                   04  add	sp,*4
28185                                           !BCC_EOS
28186                                           ! 3796         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28187                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28188 75C1           8B46         08            mov	ax,8[bp]
28189                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28190                                           ! Debug: list unsigned int = ax-7 (used reg = )
28191 75C4           05                   FFF9  add	ax,*-7
28192 75C7           50                         push	ax
28193                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28194 75C8           FF76         06            push	6[bp]
28195                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28196 75CB           E8         057E            call	_read_byte
28197 75CE           83C4                   04  add	sp,*4
28198                                           ! Debug: list unsigned char = al+0 (used reg = )
28199 75D1           30E4                       xor	ah,ah
28200 75D3           50                         push	ax
28201                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28202 75D4           8B46         FC            mov	ax,-4[bp]
28203                                           ! Debug: list unsigned int = ax+1 (used reg = )
28204 75D7           40                         inc	ax
28205 75D8           50                         push	ax
28206                                           ! Debug: func () void = outb+0 (used reg = )
28207 75D9           E8         05DC            call	_outb
28208 75DC           83C4                   04  add	sp,*4
28209                                           !BCC_EOS
28210                                           ! 3797         ar_index = read_byte(ES, addr1 + 0x03);
28211                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28212 75DF           8B46         F8            mov	ax,-8[bp]
28213                                           ! Debug: list unsigned int = ax+3 (used reg = )
28214 75E2           05                   0003  add	ax,*3
28215 75E5           50                         push	ax
28216                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28217 75E6           FF76         06            push	6[bp]
28218                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28219 75E9           E8         0560            call	_read_byte
28220 75EC           83C4                   04  add	sp,*4
28221                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28222 75EF           30E4                       xor	ah,ah
28223 75F1           8946         F6            mov	-$A[bp],ax
28224                                           !BCC_EOS
28225                                           ! 3798         inb(0x3da);
28226                                           ! Debug: list int = const $3DA (used reg = )
28227 75F4           B8                   03DA  mov	ax,#$3DA
28228 75F7           50                         push	ax
28229                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28230 75F8           E8         05A7            call	_inb
28231 75FB           44                         inc	sp
28232 75FC           44                         inc	sp
28233                                           !BCC_EOS
28234                                           ! 3799         for(i=0;i<=0x13;i++) {
28235                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28236 75FD           31C0                       xor	ax,ax
28237 75FF           8946         FE            mov	-2[bp],ax
28238                                           !BCC_EOS
28239                                           !BCC_EOS
28240 7602           EB           3C            jmp .26F
28241                       00007604            .270:
28242                                           ! 3800             outb(0x3c0, i | (ar_index & 0x20));
28243                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28244 7604           8A46         F6            mov	al,-$A[bp]
28245 7607           24                     20  and	al,*$20
28246                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28247                                           ! Debug: expression subtree swapping
28248 7609           30E4                       xor	ah,ah
28249 760B           0B46         FE            or	ax,-2[bp]
28250                                           ! Debug: list unsigned int = ax+0 (used reg = )
28251 760E           50                         push	ax
28252                                           ! Debug: list int = const $3C0 (used reg = )
28253 760F           B8                   03C0  mov	ax,#$3C0
28254 7612           50                         push	ax
28255                                           ! Debug: func () void = outb+0 (used reg = )
28256 7613           E8         05A2            call	_outb
28257 7616           83C4                   04  add	sp,*4
28258                                           !BCC_EOS
28259                                           ! 3801             outb(0x3c0, read_byte(ES, BX)); BX++;
28260                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28261 7619           FF76         08            push	8[bp]
28262                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28263 761C           FF76         06            push	6[bp]
28264                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28265 761F           E8         052A            call	_read_byte
28266 7622           83C4                   04  add	sp,*4
28267                                           ! Debug: list unsigned char = al+0 (used reg = )
28268 7625           30E4                       xor	ah,ah
28269 7627           50                         push	ax
28270                                           ! Debug: list int = const $3C0 (used reg = )
28271 7628           B8                   03C0  mov	ax,#$3C0
28272 762B           50                         push	ax
28273                                           ! Debug: func () void = outb+0 (used reg = )
28274 762C           E8         0589            call	_outb
28275 762F           83C4                   04  add	sp,*4
28276                                           !BCC_EOS
28277                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28278 7632           8B46         08            mov	ax,8[bp]
28279 7635           40                         inc	ax
28280 7636           8946         08            mov	8[bp],ax
28281                                           !BCC_EOS
28282                                           ! 3802         }
28283                                           ! 3803         outb(0x3c0, ar_index);
28284                       00007639            .26E:
28285                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28286 7639           8B46         FE            mov	ax,-2[bp]
28287 763C           40                         inc	ax
28288 763D           8946         FE            mov	-2[bp],ax
28289                       00007640            .26F:
28290                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28291 7640           8B46         FE            mov	ax,-2[bp]
28292 7643           3D                   0013  cmp	ax,*$13
28293 7646           76           BC            jbe	.270
28294                       00007648            .271:
28295                       00007648            .26D:
28296                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28297 7648           FF76         F6            push	-$A[bp]
28298                                           ! Debug: list int = const $3C0 (used reg = )
28299 764B           B8                   03C0  mov	ax,#$3C0
28300 764E           50                         push	ax
28301                                           ! Debug: func () void = outb+0 (used reg = )
28302 764F           E8         0566            call	_outb
28303 7652           83C4                   04  add	sp,*4
28304                                           !BCC_EOS
28305                                           ! 3804         inb(0x3da);
28306                                           ! Debug: list int = const $3DA (used reg = )
28307 7655           B8                   03DA  mov	ax,#$3DA
28308 7658           50                         push	ax
28309                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28310 7659           E8         0546            call	_inb
28311 765C           44                         inc	sp
28312 765D           44                         inc	sp
28313                                           !BCC_EOS
28314                                           ! 3805         for(i=0;i<=8;i++) {
28315                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28316 765E           31C0                       xor	ax,ax
28317 7660           8946         FE            mov	-2[bp],ax
28318                                           !BCC_EOS
28319                                           !BCC_EOS
28320 7663           EB           34            jmp .274
28321                       00007665            .275:
28322                                           ! 3806             outb(0x3ce,i);
28323                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28324 7665           FF76         FE            push	-2[bp]
28325                                           ! Debug: list int = const $3CE (used reg = )
28326 7668           B8                   03CE  mov	ax,#$3CE
28327 766B           50                         push	ax
28328                                           ! Debug: func () void = outb+0 (used reg = )
28329 766C           E8         0549            call	_outb
28330 766F           83C4                   04  add	sp,*4
28331                                           !BCC_EOS
28332                                           ! 3807             outb(0x3cf, read_byte(ES, BX)); BX++;
28333                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28334 7672           FF76         08            push	8[bp]
28335                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28336 7675           FF76         06            push	6[bp]
28337                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28338 7678           E8         04D1            call	_read_byte
28339 767B           83C4                   04  add	sp,*4
28340                                           ! Debug: list unsigned char = al+0 (used reg = )
28341 767E           30E4                       xor	ah,ah
28342 7680           50                         push	ax
28343                                           ! Debug: list int = const $3CF (used reg = )
28344 7681           B8                   03CF  mov	ax,#$3CF
28345 7684           50                         push	ax
28346                                           ! Debug: func () void = outb+0 (used reg = )
28347 7685           E8         0530            call	_outb
28348 7688           83C4                   04  add	sp,*4
28349                                           !BCC_EOS
28350                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28351 768B           8B46         08            mov	ax,8[bp]
28352 768E           40                         inc	ax
28353 768F           8946         08            mov	8[bp],ax
28354                                           !BCC_EOS
28355                                           ! 3808         }
28356                                           ! 3809         BX += 2;
28357                       00007692            .273:
28358                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28359 7692           8B46         FE            mov	ax,-2[bp]
28360 7695           40                         inc	ax
28361 7696           8946         FE            mov	-2[bp],ax
28362                       00007699            .274:
28363                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28364 7699           8B46         FE            mov	ax,-2[bp]
28365 769C           3D                   0008  cmp	ax,*8
28366 769F           76           C4            jbe	.275
28367                       000076A1            .276:
28368                       000076A1            .272:
28369                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28370 76A1           8B46         08            mov	ax,8[bp]
28371 76A4           40                         inc	ax
28372 76A5           40                         inc	ax
28373 76A6           8946         08            mov	8[bp],ax
28374                                           !BCC_EOS
28375                                           ! 3810         BX += 4;
28376                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28377 76A9           8B46         08            mov	ax,8[bp]
28378 76AC           05                   0004  add	ax,*4
28379 76AF           8946         08            mov	8[bp],ax
28380                                           !BCC_EOS
28381                                           ! 3811         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28382                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28383 76B2           FF76         F8            push	-8[bp]
28384                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28385 76B5           FF76         06            push	6[bp]
28386                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28387 76B8           E8         0491            call	_read_byte
28388 76BB           83C4                   04  add	sp,*4
28389                                           ! Debug: list unsigned char = al+0 (used reg = )
28390 76BE           30E4                       xor	ah,ah
28391 76C0           50                         push	ax
28392                                           ! Debug: list int = const $3C4 (used reg = )
28393 76C1           B8                   03C4  mov	ax,#$3C4
28394 76C4           50                         push	ax
28395                                           ! Debug: func () void = outb+0 (used reg = )
28396 76C5           E8         04F0            call	_outb
28397 76C8           83C4                   04  add	sp,*4
28398                                           !BCC_EOS
28399                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28400 76CB           8B46         F8            mov	ax,-8[bp]
28401 76CE           40                         inc	ax
28402 76CF           8946         F8            mov	-8[bp],ax
28403                                           !BCC_EOS
28404                                           ! 3812         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28405                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28406 76D2           FF76         F8            push	-8[bp]
28407                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28408 76D5           FF76         06            push	6[bp]
28409                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28410 76D8           E8         0471            call	_read_byte
28411 76DB           83C4                   04  add	sp,*4
28412                                           ! Debug: list unsigned char = al+0 (used reg = )
28413 76DE           30E4                       xor	ah,ah
28414 76E0           50                         push	ax
28415                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28416 76E1           FF76         FC            push	-4[bp]
28417                                           ! Debug: func () void = outb+0 (used reg = )
28418 76E4           E8         04D1            call	_outb
28419 76E7           83C4                   04  add	sp,*4
28420                                           !BCC_EOS
28421                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28422 76EA           8B46         F8            mov	ax,-8[bp]
28423 76ED           40                         inc	ax
28424 76EE           8946         F8            mov	-8[bp],ax
28425                                           !BCC_EOS
28426                                           ! 3813         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28427                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28428 76F1           FF76         F8            push	-8[bp]
28429                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28430 76F4           FF76         06            push	6[bp]
28431                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28432 76F7           E8         0452            call	_read_byte
28433 76FA           83C4                   04  add	sp,*4
28434                                           ! Debug: list unsigned char = al+0 (used reg = )
28435 76FD           30E4                       xor	ah,ah
28436 76FF           50                         push	ax
28437                                           ! Debug: list int = const $3CE (used reg = )
28438 7700           B8                   03CE  mov	ax,#$3CE
28439 7703           50                         push	ax
28440                                           ! Debug: func () void = outb+0 (used reg = )
28441 7704           E8         04B1            call	_outb
28442 7707           83C4                   04  add	sp,*4
28443                                           !BCC_EOS
28444                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28445 770A           8B46         F8            mov	ax,-8[bp]
28446 770D           40                         inc	ax
28447 770E           8946         F8            mov	-8[bp],ax
28448                                           !BCC_EOS
28449                                           ! 3814         addr1++;
28450                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28451 7711           8B46         F8            mov	ax,-8[bp]
28452 7714           40                         inc	ax
28453 7715           8946         F8            mov	-8[bp],ax
28454                                           !BCC_EOS
28455                                           ! 3815         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28456                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28457 7718           FF76         F8            push	-8[bp]
28458                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28459 771B           FF76         06            push	6[bp]
28460                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28461 771E           E8         042B            call	_read_byte
28462 7721           83C4                   04  add	sp,*4
28463                                           ! Debug: list unsigned char = al+0 (used reg = )
28464 7724           30E4                       xor	ah,ah
28465 7726           50                         push	ax
28466                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28467 7727           8B46         FC            mov	ax,-4[bp]
28468                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28469                                           ! Debug: list unsigned int = ax+6 (used reg = )
28470 772A           05                   0006  add	ax,*6
28471 772D           50                         push	ax
28472                                           ! Debug: func () void = outb+0 (used reg = )
28473 772E           E8         0487            call	_outb
28474 7731           83C4                   04  add	sp,*4
28475                                           !BCC_EOS
28476                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28477 7734           8B46         F8            mov	ax,-8[bp]
28478 7737           40                         inc	ax
28479 7738           8946         F8            mov	-8[bp],ax
28480                                           !BCC_EOS
28481                                           ! 3816     }
28482                                           ! 3817     if (CX & 2) {
28483                       0000773B            .25D:
28484                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28485 773B           8A46         04            mov	al,4[bp]
28486 773E           24                     02  and	al,*2
28487 7740           84C0                       test	al,al
28488 7742   7503    E9         0270            beq 	.277
28489                       00007747            .278:
28490                                           ! 3818         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28491                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28492 7747           FF76         08            push	8[bp]
28493                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28494 774A           FF76         06            push	6[bp]
28495                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28496 774D           E8         03FC            call	_read_byte
28497 7750           83C4                   04  add	sp,*4
28498                                           ! Debug: list unsigned char = al+0 (used reg = )
28499 7753           30E4                       xor	ah,ah
28500 7755           50                         push	ax
28501                                           ! Debug: list int = const $49 (used reg = )
28502 7756           B8                   0049  mov	ax,*$49
28503 7759           50                         push	ax
28504                                           ! Debug: list int = const $40 (used reg = )
28505 775A           B8                   0040  mov	ax,*$40
28506 775D           50                         push	ax
28507                                           ! Debug: func () void = write_byte+0 (used reg = )
28508 775E           E8         0411            call	_write_byte
28509 7761           83C4                   06  add	sp,*6
28510                                           !BCC_EOS
28511                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28512 7764           8B46         08            mov	ax,8[bp]
28513 7767           40                         inc	ax
28514 7768           8946         08            mov	8[bp],ax
28515                                           !BCC_EOS
28516                                           ! 3819         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28517                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28518 776B           FF76         08            push	8[bp]
28519                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28520 776E           FF76         06            push	6[bp]
28521                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28522 7771           E8         03EB            call	_read_word
28523 7774           83C4                   04  add	sp,*4
28524                                           ! Debug: list unsigned short = ax+0 (used reg = )
28525 7777           50                         push	ax
28526                                           ! Debug: list int = const $4A (used reg = )
28527 7778           B8                   004A  mov	ax,*$4A
28528 777B           50                         push	ax
28529                                           ! Debug: list int = const $40 (used reg = )
28530 777C           B8                   0040  mov	ax,*$40
28531 777F           50                         push	ax
28532                                           ! Debug: func () void = write_word+0 (used reg = )
28533 7780           E8         0407            call	_write_word
28534 7783           83C4                   06  add	sp,*6
28535                                           !BCC_EOS
28536                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28537 7786           8B46         08            mov	ax,8[bp]
28538 7789           40                         inc	ax
28539 778A           40                         inc	ax
28540 778B           8946         08            mov	8[bp],ax
28541                                           !BCC_EOS
28542                                           ! 3820         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28543                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28544 778E           FF76         08            push	8[bp]
28545                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28546 7791           FF76         06            push	6[bp]
28547                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28548 7794           E8         03C8            call	_read_word
28549 7797           83C4                   04  add	sp,*4
28550                                           ! Debug: list unsigned short = ax+0 (used reg = )
28551 779A           50                         push	ax
28552                                           ! Debug: list int = const $4C (used reg = )
28553 779B           B8                   004C  mov	ax,*$4C
28554 779E           50                         push	ax
28555                                           ! Debug: list int = const $40 (used reg = )
28556 779F           B8                   0040  mov	ax,*$40
28557 77A2           50                         push	ax
28558                                           ! Debug: func () void = write_word+0 (used reg = )
28559 77A3           E8         03E4            call	_write_word
28560 77A6           83C4                   06  add	sp,*6
28561                                           !BCC_EOS
28562                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28563 77A9           8B46         08            mov	ax,8[bp]
28564 77AC           40                         inc	ax
28565 77AD           40                         inc	ax
28566 77AE           8946         08            mov	8[bp],ax
28567                                           !BCC_EOS
28568                                           ! 3821         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
28569                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28570 77B1           FF76         08            push	8[bp]
28571                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28572 77B4           FF76         06            push	6[bp]
28573                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28574 77B7           E8         03A5            call	_read_word
28575 77BA           83C4                   04  add	sp,*4
28576                                           ! Debug: list unsigned short = ax+0 (used reg = )
28577 77BD           50                         push	ax
28578                                           ! Debug: list int = const $63 (used reg = )
28579 77BE           B8                   0063  mov	ax,*$63
28580 77C1           50                         push	ax
28581                                           ! Debug: list int = const $40 (used reg = )
28582 77C2           B8                   0040  mov	ax,*$40
28583 77C5           50                         push	ax
28584                                           ! Debug: func () void = write_word+0 (used reg = )
28585 77C6           E8         03C1            call	_write_word
28586 77C9           83C4                   06  add	sp,*6
28587                                           !BCC_EOS
28588                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28589 77CC           8B46         08            mov	ax,8[bp]
28590 77CF           40                         inc	ax
28591 77D0           40                         inc	ax
28592 77D1           8946         08            mov	8[bp],ax
28593                                           !BCC_EOS
28594                                           ! 3822         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
28595                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28596 77D4           FF76         08            push	8[bp]
28597                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28598 77D7           FF76         06            push	6[bp]
28599                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28600 77DA           E8         036F            call	_read_byte
28601 77DD           83C4                   04  add	sp,*4
28602                                           ! Debug: list unsigned char = al+0 (used reg = )
28603 77E0           30E4                       xor	ah,ah
28604 77E2           50                         push	ax
28605                                           ! Debug: list int = const $84 (used reg = )
28606 77E3           B8                   0084  mov	ax,#$84
28607 77E6           50                         push	ax
28608                                           ! Debug: list int = const $40 (used reg = )
28609 77E7           B8                   0040  mov	ax,*$40
28610 77EA           50                         push	ax
28611                                           ! Debug: func () void = write_byte+0 (used reg = )
28612 77EB           E8         0384            call	_write_byte
28613 77EE           83C4                   06  add	sp,*6
28614                                           !BCC_EOS
28615                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28616 77F1           8B46         08            mov	ax,8[bp]
28617 77F4           40                         inc	ax
28618 77F5           8946         08            mov	8[bp],ax
28619                                           !BCC_EOS
28620                                           ! 3823         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
28621                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28622 77F8           FF76         08            push	8[bp]
28623                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28624 77FB           FF76         06            push	6[bp]
28625                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28626 77FE           E8         035E            call	_read_word
28627 7801           83C4                   04  add	sp,*4
28628                                           ! Debug: list unsigned short = ax+0 (used reg = )
28629 7804           50                         push	ax
28630                                           ! Debug: list int = const $85 (used reg = )
28631 7805           B8                   0085  mov	ax,#$85
28632 7808           50                         push	ax
28633                                           ! Debug: list int = const $40 (used reg = )
28634 7809           B8                   0040  mov	ax,*$40
28635 780C           50                         push	ax
28636                                           ! Debug: func () void = write_word+0 (used reg = )
28637 780D           E8         037A            call	_write_word
28638 7810           83C4                   06  add	sp,*6
28639                                           !BCC_EOS
28640                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28641 7813           8B46         08            mov	ax,8[bp]
28642 7816           40                         inc	ax
28643 7817           40                         inc	ax
28644 7818           8946         08            mov	8[bp],ax
28645                                           !BCC_EOS
28646                                           ! 3824         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
28647                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28648 781B           FF76         08            push	8[bp]
28649                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28650 781E           FF76         06            push	6[bp]
28651                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28652 7821           E8         0328            call	_read_byte
28653 7824           83C4                   04  add	sp,*4
28654                                           ! Debug: list unsigned char = al+0 (used reg = )
28655 7827           30E4                       xor	ah,ah
28656 7829           50                         push	ax
28657                                           ! Debug: list int = const $87 (used reg = )
28658 782A           B8                   0087  mov	ax,#$87
28659 782D           50                         push	ax
28660                                           ! Debug: list int = const $40 (used reg = )
28661 782E           B8                   0040  mov	ax,*$40
28662 7831           50                         push	ax
28663                                           ! Debug: func () void = write_byte+0 (used reg = )
28664 7832           E8         033D            call	_write_byte
28665 7835           83C4                   06  add	sp,*6
28666                                           !BCC_EOS
28667                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28668 7838           8B46         08            mov	ax,8[bp]
28669 783B           40                         inc	ax
28670 783C           8946         08            mov	8[bp],ax
28671                                           !BCC_EOS
28672                                           ! 3825         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
28673                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28674 783F           FF76         08            push	8[bp]
28675                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28676 7842           FF76         06            push	6[bp]
28677                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28678 7845           E8         0304            call	_read_byte
28679 7848           83C4                   04  add	sp,*4
28680                                           ! Debug: list unsigned char = al+0 (used reg = )
28681 784B           30E4                       xor	ah,ah
28682 784D           50                         push	ax
28683                                           ! Debug: list int = const $88 (used reg = )
28684 784E           B8                   0088  mov	ax,#$88
28685 7851           50                         push	ax
28686                                           ! Debug: list int = const $40 (used reg = )
28687 7852           B8                   0040  mov	ax,*$40
28688 7855           50                         push	ax
28689                                           ! Debug: func () void = write_byte+0 (used reg = )
28690 7856           E8         0319            call	_write_byte
28691 7859           83C4                   06  add	sp,*6
28692                                           !BCC_EOS
28693                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28694 785C           8B46         08            mov	ax,8[bp]
28695 785F           40                         inc	ax
28696 7860           8946         08            mov	8[bp],ax
28697                                           !BCC_EOS
28698                                           ! 3826         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
28699                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28700 7863           FF76         08            push	8[bp]
28701                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28702 7866           FF76         06            push	6[bp]
28703                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28704 7869           E8         02E0            call	_read_byte
28705 786C           83C4                   04  add	sp,*4
28706                                           ! Debug: list unsigned char = al+0 (used reg = )
28707 786F           30E4                       xor	ah,ah
28708 7871           50                         push	ax
28709                                           ! Debug: list int = const $89 (used reg = )
28710 7872           B8                   0089  mov	ax,#$89
28711 7875           50                         push	ax
28712                                           ! Debug: list int = const $40 (used reg = )
28713 7876           B8                   0040  mov	ax,*$40
28714 7879           50                         push	ax
28715                                           ! Debug: func () void = write_byte+0 (used reg = )
28716 787A           E8         02F5            call	_write_byte
28717 787D           83C4                   06  add	sp,*6
28718                                           !BCC_EOS
28719                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28720 7880           8B46         08            mov	ax,8[bp]
28721 7883           40                         inc	ax
28722 7884           8946         08            mov	8[bp],ax
28723                                           !BCC_EOS
28724                                           ! 3827         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
28725                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28726 7887           FF76         08            push	8[bp]
28727                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28728 788A           FF76         06            push	6[bp]
28729                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28730 788D           E8         02CF            call	_read_word
28731 7890           83C4                   04  add	sp,*4
28732                                           ! Debug: list unsigned short = ax+0 (used reg = )
28733 7893           50                         push	ax
28734                                           ! Debug: list int = const $60 (used reg = )
28735 7894           B8                   0060  mov	ax,*$60
28736 7897           50                         push	ax
28737                                           ! Debug: list int = const $40 (used reg = )
28738 7898           B8                   0040  mov	ax,*$40
28739 789B           50                         push	ax
28740                                           ! Debug: func () void = write_word+0 (used reg = )
28741 789C           E8         02EB            call	_write_word
28742 789F           83C4                   06  add	sp,*6
28743                                           !BCC_EOS
28744                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28745 78A2           8B46         08            mov	ax,8[bp]
28746 78A5           40                         inc	ax
28747 78A6           40                         inc	ax
28748 78A7           8946         08            mov	8[bp],ax
28749                                           !BCC_EOS
28750                                           ! 3828         for(i=0;i<8;i++) {
28751                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28752 78AA           31C0                       xor	ax,ax
28753 78AC           8946         FE            mov	-2[bp],ax
28754                                           !BCC_EOS
28755                                           !BCC_EOS
28756 78AF           EB           2F            jmp .27B
28757                       000078B1            .27C:
28758                                           ! 3829             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
28759                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28760 78B1           FF76         08            push	8[bp]
28761                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28762 78B4           FF76         06            push	6[bp]
28763                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28764 78B7           E8         02A5            call	_read_word
28765 78BA           83C4                   04  add	sp,*4
28766                                           ! Debug: list unsigned short = ax+0 (used reg = )
28767 78BD           50                         push	ax
28768                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
28769                                           ! Debug: expression subtree swapping
28770 78BE           8B46         FE            mov	ax,-2[bp]
28771 78C1           D1E0                       shl	ax,*1
28772                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28773                                           ! Debug: expression subtree swapping
28774                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28775 78C3           05                   0050  add	ax,*$50
28776 78C6           50                         push	ax
28777                                           ! Debug: list int = const $40 (used reg = )
28778 78C7           B8                   0040  mov	ax,*$40
28779 78CA           50                         push	ax
28780                                           ! Debug: func () void = write_word+0 (used reg = )
28781 78CB           E8         02BC            call	_write_word
28782 78CE           83C4                   06  add	sp,*6
28783                                           !BCC_EOS
28784                                           ! 3830             BX += 2;
28785                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28786 78D1           8B46         08            mov	ax,8[bp]
28787 78D4           40                         inc	ax
28788 78D5           40                         inc	ax
28789 78D6           8946         08            mov	8[bp],ax
28790                                           !BCC_EOS
28791                                           ! 3831         }
28792                                           ! 3832         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
28793                       000078D9            .27A:
28794                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28795 78D9           8B46         FE            mov	ax,-2[bp]
28796 78DC           40                         inc	ax
28797 78DD           8946         FE            mov	-2[bp],ax
28798                       000078E0            .27B:
28799                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28800 78E0           8B46         FE            mov	ax,-2[bp]
28801 78E3           3D                   0008  cmp	ax,*8
28802 78E6           72           C9            jb 	.27C
28803                       000078E8            .27D:
28804                       000078E8            .279:
28805                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28806 78E8           FF76         08            push	8[bp]
28807                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28808 78EB           FF76         06            push	6[bp]
28809                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28810 78EE           E8         026E            call	_read_word
28811 78F1           83C4                   04  add	sp,*4
28812                                           ! Debug: list unsigned short = ax+0 (used reg = )
28813 78F4           50                         push	ax
28814                                           ! Debug: list int = const $4E (used reg = )
28815 78F5           B8                   004E  mov	ax,*$4E
28816 78F8           50                         push	ax
28817                                           ! Debug: list int = const $40 (used reg = )
28818 78F9           B8                   0040  mov	ax,*$40
28819 78FC           50                         push	ax
28820                                           ! Debug: func () void = write_word+0 (used reg = )
28821 78FD           E8         028A            call	_write_word
28822 7900           83C4                   06  add	sp,*6
28823                                           !BCC_EOS
28824                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28825 7903           8B46         08            mov	ax,8[bp]
28826 7906           40                         inc	ax
28827 7907           40                         inc	ax
28828 7908           8946         08            mov	8[bp],ax
28829                                           !BCC_EOS
28830                                           ! 3833         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
28831                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28832 790B           FF76         08            push	8[bp]
28833                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28834 790E           FF76         06            push	6[bp]
28835                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28836 7911           E8         0238            call	_read_byte
28837 7914           83C4                   04  add	sp,*4
28838                                           ! Debug: list unsigned char = al+0 (used reg = )
28839 7917           30E4                       xor	ah,ah
28840 7919           50                         push	ax
28841                                           ! Debug: list int = const $62 (used reg = )
28842 791A           B8                   0062  mov	ax,*$62
28843 791D           50                         push	ax
28844                                           ! Debug: list int = const $40 (used reg = )
28845 791E           B8                   0040  mov	ax,*$40
28846 7921           50                         push	ax
28847                                           ! Debug: func () void = write_byte+0 (used reg = )
28848 7922           E8         024D            call	_write_byte
28849 7925           83C4                   06  add	sp,*6
28850                                           !BCC_EOS
28851                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28852 7928           8B46         08            mov	ax,8[bp]
28853 792B           40                         inc	ax
28854 792C           8946         08            mov	8[bp],ax
28855                                           !BCC_EOS
28856                                           ! 3834         write_word(0, 0x1f * 4, read_
28857                                           ! 3834 word(ES, BX)); BX += 2;
28858                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28859 792F           FF76         08            push	8[bp]
28860                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28861 7932           FF76         06            push	6[bp]
28862                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28863 7935           E8         0227            call	_read_word
28864 7938           83C4                   04  add	sp,*4
28865                                           ! Debug: list unsigned short = ax+0 (used reg = )
28866 793B           50                         push	ax
28867                                           ! Debug: list int = const $7C (used reg = )
28868 793C           B8                   007C  mov	ax,*$7C
28869 793F           50                         push	ax
28870                                           ! Debug: list int = const 0 (used reg = )
28871 7940           31C0                       xor	ax,ax
28872 7942           50                         push	ax
28873                                           ! Debug: func () void = write_word+0 (used reg = )
28874 7943           E8         0244            call	_write_word
28875 7946           83C4                   06  add	sp,*6
28876                                           !BCC_EOS
28877                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28878 7949           8B46         08            mov	ax,8[bp]
28879 794C           40                         inc	ax
28880 794D           40                         inc	ax
28881 794E           8946         08            mov	8[bp],ax
28882                                           !BCC_EOS
28883                                           ! 3835         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
28884                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28885 7951           FF76         08            push	8[bp]
28886                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28887 7954           FF76         06            push	6[bp]
28888                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28889 7957           E8         0205            call	_read_word
28890 795A           83C4                   04  add	sp,*4
28891                                           ! Debug: list unsigned short = ax+0 (used reg = )
28892 795D           50                         push	ax
28893                                           ! Debug: list int = const $7E (used reg = )
28894 795E           B8                   007E  mov	ax,*$7E
28895 7961           50                         push	ax
28896                                           ! Debug: list int = const 0 (used reg = )
28897 7962           31C0                       xor	ax,ax
28898 7964           50                         push	ax
28899                                           ! Debug: func () void = write_word+0 (used reg = )
28900 7965           E8         0222            call	_write_word
28901 7968           83C4                   06  add	sp,*6
28902                                           !BCC_EOS
28903                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28904 796B           8B46         08            mov	ax,8[bp]
28905 796E           40                         inc	ax
28906 796F           40                         inc	ax
28907 7970           8946         08            mov	8[bp],ax
28908                                           !BCC_EOS
28909                                           ! 3836         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
28910                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28911 7973           FF76         08            push	8[bp]
28912                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28913 7976           FF76         06            push	6[bp]
28914                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28915 7979           E8         01E3            call	_read_word
28916 797C           83C4                   04  add	sp,*4
28917                                           ! Debug: list unsigned short = ax+0 (used reg = )
28918 797F           50                         push	ax
28919                                           ! Debug: list int = const $10C (used reg = )
28920 7980           B8                   010C  mov	ax,#$10C
28921 7983           50                         push	ax
28922                                           ! Debug: list int = const 0 (used reg = )
28923 7984           31C0                       xor	ax,ax
28924 7986           50                         push	ax
28925                                           ! Debug: func () void = write_word+0 (used reg = )
28926 7987           E8         0200            call	_write_word
28927 798A           83C4                   06  add	sp,*6
28928                                           !BCC_EOS
28929                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28930 798D           8B46         08            mov	ax,8[bp]
28931 7990           40                         inc	ax
28932 7991           40                         inc	ax
28933 7992           8946         08            mov	8[bp],ax
28934                                           !BCC_EOS
28935                                           ! 3837         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
28936                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28937 7995           FF76         08            push	8[bp]
28938                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28939 7998           FF76         06            push	6[bp]
28940                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28941 799B           E8         01C1            call	_read_word
28942 799E           83C4                   04  add	sp,*4
28943                                           ! Debug: list unsigned short = ax+0 (used reg = )
28944 79A1           50                         push	ax
28945                                           ! Debug: list int = const $10E (used reg = )
28946 79A2           B8                   010E  mov	ax,#$10E
28947 79A5           50                         push	ax
28948                                           ! Debug: list int = const 0 (used reg = )
28949 79A6           31C0                       xor	ax,ax
28950 79A8           50                         push	ax
28951                                           ! Debug: func () void = write_word+0 (used reg = )
28952 79A9           E8         01DE            call	_write_word
28953 79AC           83C4                   06  add	sp,*6
28954                                           !BCC_EOS
28955                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28956 79AF           8B46         08            mov	ax,8[bp]
28957 79B2           40                         inc	ax
28958 79B3           40                         inc	ax
28959 79B4           8946         08            mov	8[bp],ax
28960                                           !BCC_EOS
28961                                           ! 3838     }
28962                                           ! 3839     if (CX & 4) {
28963                       000079B7            .277:
28964                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
28965 79B7           8A46         04            mov	al,4[bp]
28966 79BA           24                     04  and	al,*4
28967 79BC           84C0                       test	al,al
28968 79BE   7503    E9         0096            beq 	.27E
28969                       000079C3            .27F:
28970                                           ! 3840         BX++;
28971                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28972 79C3           8B46         08            mov	ax,8[bp]
28973 79C6           40                         inc	ax
28974 79C7           8946         08            mov	8[bp],ax
28975                                           !BCC_EOS
28976                                           ! 3841         v = read_byte(ES, BX); BX++;
28977                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28978 79CA           FF76         08            push	8[bp]
28979                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28980 79CD           FF76         06            push	6[bp]
28981                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28982 79D0           E8         0179            call	_read_byte
28983 79D3           83C4                   04  add	sp,*4
28984                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28985 79D6           30E4                       xor	ah,ah
28986 79D8           8946         FA            mov	-6[bp],ax
28987                                           !BCC_EOS
28988                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28989 79DB           8B46         08            mov	ax,8[bp]
28990 79DE           40                         inc	ax
28991 79DF           8946         08            mov	8[bp],ax
28992                                           !BCC_EOS
28993                                           ! 3842         outb(0x3c6, read_byte(ES, BX)); BX++;
28994                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28995 79E2           FF76         08            push	8[bp]
28996                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28997 79E5           FF76         06            push	6[bp]
28998                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28999 79E8           E8         0161            call	_read_byte
29000 79EB           83C4                   04  add	sp,*4
29001                                           ! Debug: list unsigned char = al+0 (used reg = )
29002 79EE           30E4                       xor	ah,ah
29003 79F0           50                         push	ax
29004                                           ! Debug: list int = const $3C6 (used reg = )
29005 79F1           B8                   03C6  mov	ax,#$3C6
29006 79F4           50                         push	ax
29007                                           ! Debug: func () void = outb+0 (used reg = )
29008 79F5           E8         01C0            call	_outb
29009 79F8           83C4                   04  add	sp,*4
29010                                           !BCC_EOS
29011                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29012 79FB           8B46         08            mov	ax,8[bp]
29013 79FE           40                         inc	ax
29014 79FF           8946         08            mov	8[bp],ax
29015                                           !BCC_EOS
29016                                           ! 3843         outb(0x3c8,0x00);
29017                                           ! Debug: list int = const 0 (used reg = )
29018 7A02           31C0                       xor	ax,ax
29019 7A04           50                         push	ax
29020                                           ! Debug: list int = const $3C8 (used reg = )
29021 7A05           B8                   03C8  mov	ax,#$3C8
29022 7A08           50                         push	ax
29023                                           ! Debug: func () void = outb+0 (used reg = )
29024 7A09           E8         01AC            call	_outb
29025 7A0C           83C4                   04  add	sp,*4
29026                                           !BCC_EOS
29027                                           ! 3844         for(i=0;i<256*3;i++) {
29028                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29029 7A0F           31C0                       xor	ax,ax
29030 7A11           8946         FE            mov	-2[bp],ax
29031                                           !BCC_EOS
29032                                           !BCC_EOS
29033 7A14           EB           27            jmp .282
29034                       00007A16            .283:
29035                                           ! 3845             outb(0x3c9, read_byte(ES, BX)); BX++;
29036                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29037 7A16           FF76         08            push	8[bp]
29038                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29039 7A19           FF76         06            push	6[bp]
29040                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29041 7A1C           E8         012D            call	_read_byte
29042 7A1F           83C4                   04  add	sp,*4
29043                                           ! Debug: list unsigned char = al+0 (used reg = )
29044 7A22           30E4                       xor	ah,ah
29045 7A24           50                         push	ax
29046                                           ! Debug: list int = const $3C9 (used reg = )
29047 7A25           B8                   03C9  mov	ax,#$3C9
29048 7A28           50                         push	ax
29049                                           ! Debug: func () void = outb+0 (used reg = )
29050 7A29           E8         018C            call	_outb
29051 7A2C           83C4                   04  add	sp,*4
29052                                           !BCC_EOS
29053                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29054 7A2F           8B46         08            mov	ax,8[bp]
29055 7A32           40                         inc	ax
29056 7A33           8946         08            mov	8[bp],ax
29057                                           !BCC_EOS
29058                                           ! 3846         }
29059                                           ! 3847         BX++;
29060                       00007A36            .281:
29061                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29062 7A36           8B46         FE            mov	ax,-2[bp]
29063 7A39           40                         inc	ax
29064 7A3A           8946         FE            mov	-2[bp],ax
29065                       00007A3D            .282:
29066                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29067 7A3D           8B46         FE            mov	ax,-2[bp]
29068 7A40           3D                   0300  cmp	ax,#$300
29069 7A43           72           D1            jb 	.283
29070                       00007A45            .284:
29071                       00007A45            .280:
29072                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29073 7A45           8B46         08            mov	ax,8[bp]
29074 7A48           40                         inc	ax
29075 7A49           8946         08            mov	8[bp],ax
29076                                           !BCC_EOS
29077                                           ! 3848         outb(0x3c8, v);
29078                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29079 7A4C           FF76         FA            push	-6[bp]
29080                                           ! Debug: list int = const $3C8 (used reg = )
29081 7A4F           B8                   03C8  mov	ax,#$3C8
29082 7A52           50                         push	ax
29083                                           ! Debug: func () void = outb+0 (used reg = )
29084 7A53           E8         0162            call	_outb
29085 7A56           83C4                   04  add	sp,*4
29086                                           !BCC_EOS
29087                                           ! 3849     }
29088                                           ! 3850     return BX;
29089                       00007A59            .27E:
29090 7A59           8B46         08            mov	ax,8[bp]
29091 7A5C           89EC                       mov	sp,bp
29092 7A5E           5D                         pop	bp
29093 7A5F           C3                         ret
29094                                           !BCC_EOS
29095                                           ! 3851 }
29096                                           ! 3852 static Bit8u find_vga_entry(mode)
29097                                           ! 3853 Bit8u mode;
29098                       00007A60            _find_vga_entry:
29099                                           !BCC_EOS
29100                                           ! 3854 {
29101                                           ! 3855  Bit8u i,line=0xFF;
29102 7A60           55                         push	bp
29103 7A61           89E5                       mov	bp,sp
29104 7A63           4C                         dec	sp
29105 7A64           4C                         dec	sp
29106                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29107 7A65           B0                     FF  mov	al,#$FF
29108 7A67           8846         FE            mov	-2[bp],al
29109                                           !BCC_EOS
29110                                           ! 3856  for(i=0;i<=15;i++)
29111                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29112 7A6A           30C0                       xor	al,al
29113 7A6C           8846         FF            mov	-1[bp],al
29114                                           !BCC_EOS
29115                                           !BCC_EOS
29116                                           ! 3857   if(vga_modes[i].svgamode==mode)
29117 7A6F           EB           23            jmp .287
29118                       00007A71            .288:
29119                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29120 7A71           8A46         FF            mov	al,-1[bp]
29121 7A74           30E4                       xor	ah,ah
29122 7A76           B1                     03  mov	cl,*3
29123 7A78           D3E0                       shl	ax,cl
29124 7A7A           89C3                       mov	bx,ax
29125                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29126 7A7C           8A87       01C6            mov	al,_vga_modes[bx]
29127 7A80           3A46         04            cmp	al,4[bp]
29128 7A83           75           08            jne 	.289
29129                       00007A85            .28A:
29130                                           ! 3858    {line=i;
29131                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29132 7A85           8A46         FF            mov	al,-1[bp]
29133 7A88           8846         FE            mov	-2[bp],al
29134                                           !BCC_EOS
29135                                           ! 3859     break;
29136 7A8B           EB           0E            jmp .285
29137                                           !BCC_EOS
29138                                           ! 3860    }
29139                                           ! 3861  return line;
29140                       00007A8D            .289:
29141                       00007A8D            .286:
29142                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29143 7A8D           8A46         FF            mov	al,-1[bp]
29144 7A90           40                         inc	ax
29145 7A91           8846         FF            mov	-1[bp],al
29146                       00007A94            .287:
29147                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29148 7A94           8A46         FF            mov	al,-1[bp]
29149 7A97           3C                     0F  cmp	al,*$F
29150 7A99           76           D6            jbe	.288
29151                       00007A9B            .28B:
29152                       00007A9B            .285:
29153 7A9B           8A46         FE            mov	al,-2[bp]
29154 7A9E           89EC                       mov	sp,bp
29155 7AA0           5D                         pop	bp
29156 7AA1           C3                         ret
29157                                           !BCC_EOS
29158                                           ! 3862 }
29159                                           ! 3863 static void memsetb(seg,offset,value,count)
29160                                           ! Register BX used in function find_vga_entry
29161                                           ! 3864   Bit16u seg;
29162                       00007AA2            _memsetb:
29163                                           !BCC_EOS
29164                                           ! 3865   Bit16u offset;
29165                                           !BCC_EOS
29166                                           ! 3866   Bit16u value;
29167                                           !BCC_EOS
29168                                           ! 3867   Bit16u count;
29169                                           !BCC_EOS
29170                                           ! 3868 {
29171                                           ! 3869 #asm
29172                                           !BCC_ASM
29173                       00000008            _memsetb.count	set	8
29174                       00000002            _memsetb.seg	set	2
29175                       00000006            _memsetb.value	set	6
29176                       00000004            _memsetb.offset	set	4
29177 7AA2           55                           push bp
29178 7AA3           89E5                         mov bp, sp
29179 7AA5           50                             push ax
29180 7AA6           51                             push cx
29181 7AA7           06                             push es
29182 7AA8           57                             push di
29183 7AA9           8B4E         0A                mov cx, 10[bp] ; count
29184 7AAC           83F9                   00      cmp cx, #0x00
29185 7AAF           74           10                je memsetb_end
29186 7AB1           8B46         04                mov ax, 4[bp] ; segment
29187 7AB4           8EC0                           mov es, ax
29188 7AB6           8B46         06                mov ax, 6[bp] ; offset
29189 7AB9           89C7                           mov di, ax
29190 7ABB           8A46         08                mov al, 8[bp] ; value
29191 7ABE           FC                             cld
29192 7ABF           F3                             rep
29193 7AC0           AA                              stosb
29194                       00007AC1            memsetb_end:
29195 7AC1           5F                             pop di
29196 7AC2           07                             pop es
29197 7AC3           59                             pop cx
29198 7AC4           58                             pop ax
29199 7AC5           5D                           pop bp
29200                                           ! 3893 endasm
29201                                           !BCC_ENDASM
29202                                           ! 3894 }
29203 7AC6           C3                         ret
29204                                           ! 3895 static void memsetw(seg,offset,value,count)
29205                                           ! 3896   Bit16u seg;
29206                       00007AC7            _memsetw:
29207                                           !BCC_EOS
29208                                           ! 3897   Bit16u offset;
29209                                           !BCC_EOS
29210                                           ! 3898   Bit16u value;
29211                                           !BCC_EOS
29212                                           ! 3899   Bit16u count;
29213                                           !BCC_EOS
29214                                           ! 3900 {
29215                                           ! 3901 #asm
29216                                           !BCC_ASM
29217                       00000008            _memsetw.count	set	8
29218                       00000002            _memsetw.seg	set	2
29219                       00000006            _memsetw.value	set	6
29220                       00000004            _memsetw.offset	set	4
29221 7AC7           55                           push bp
29222 7AC8           89E5                         mov bp, sp
29223 7ACA           50                             push ax
29224 7ACB           51                             push cx
29225 7ACC           06                             push es
29226 7ACD           57                             push di
29227 7ACE           8B4E         0A                mov cx, 10[bp] ; count
29228 7AD1           83F9                   00      cmp cx, #0x00
29229 7AD4           74           10                je memsetw_end
29230 7AD6           8B46         04                mov ax, 4[bp] ; segment
29231 7AD9           8EC0                           mov es, ax
29232 7ADB           8B46         06                mov ax, 6[bp] ; offset
29233 7ADE           89C7                           mov di, ax
29234 7AE0           8B46         08                mov ax, 8[bp] ; value
29235 7AE3           FC                             cld
29236 7AE4           F3                             rep
29237 7AE5           AB                              stosw
29238                       00007AE6            memsetw_end:
29239 7AE6           5F                             pop di
29240 7AE7           07                             pop es
29241 7AE8           59                             pop cx
29242 7AE9           58                             pop ax
29243 7AEA           5D                           pop bp
29244                                           ! 3925 endasm
29245                                           !BCC_ENDASM
29246                                           ! 3926 }
29247 7AEB           C3                         ret
29248                                           ! 3927 static void memcpyb(dseg,doffset,sseg,soffset,count)
29249                                           ! 3928   Bit16u dseg;
29250                       00007AEC            _memcpyb:
29251                                           !BCC_EOS
29252                                           ! 3929   Bit16u doffset;
29253                                           !BCC_EOS
29254                                           ! 3930   Bit16u sseg;
29255                                           !BCC_EOS
29256                                           ! 3931   Bit16u soffset;
29257                                           !BCC_EOS
29258                                           ! 3932   Bit16u count;
29259                                           !BCC_EOS
29260                                           ! 3933 {
29261                                           ! 3934 #asm
29262                                           !BCC_ASM
29263                       0000000A            _memcpyb.count	set	$A
29264                       00000006            _memcpyb.sseg	set	6
29265                       00000008            _memcpyb.soffset	set	8
29266                       00000002            _memcpyb.dseg	set	2
29267                       00000004            _memcpyb.doffset	set	4
29268 7AEC           55                           push bp
29269 7AED           89E5                         mov bp, sp
29270 7AEF           50                             push ax
29271 7AF0           51                             push cx
29272 7AF1           06                             push es
29273 7AF2           57                             push di
29274 7AF3           1E                             push ds
29275 7AF4           56                             push si
29276 7AF5           8B4E         0C                mov cx, 12[bp] ; count
29277 7AF8           83F9                   00      cmp cx, #0x0000
29278 7AFB           74           17                je memcpyb_end
29279 7AFD           8B46         04                mov ax, 4[bp] ; dsegment
29280 7B00           8EC0                           mov es, ax
29281 7B02           8B46         06                mov ax, 6[bp] ; doffset
29282 7B05           89C7                           mov di, ax
29283 7B07           8B46         08                mov ax, 8[bp] ; ssegment
29284 7B0A           8ED8                           mov ds, ax
29285 7B0C           8B46         0A                mov ax, 10[bp] ; soffset
29286 7B0F           89C6                           mov si, ax
29287 7B11           FC                             cld
29288 7B12           F3                             rep
29289 7B13           A4                              movsb
29290                       00007B14            memcpyb_end:
29291 7B14           5E                             pop si
29292 7B15           1F                             pop ds
29293 7B16           5F                             pop di
29294 7B17           07                             pop es
29295 7B18           59                             pop cx
29296 7B19           58                             pop ax
29297 7B1A           5D                           pop bp
29298                                           ! 3965 endasm
29299                                           !BCC_ENDASM
29300                                           ! 3966 }
29301 7B1B           C3                         ret
29302                                           ! 3967 static void memcpyw(dseg,doffset,sseg,soffset,count)
29303                                           ! 3968   Bit16u dseg;
29304                       00007B1C            _memcpyw:
29305                                           !BCC_EOS
29306                                           ! 3969   Bit16u doffset;
29307                                           !BCC_EOS
29308                                           ! 3970   Bit16u sseg;
29309                                           !BCC_EOS
29310                                           ! 3971   Bit16u soffset;
29311                                           !BCC_EOS
29312                                           ! 3972   Bit16u count;
29313                                           !BCC_EOS
29314                                           ! 3973 {
29315                                           ! 3974 #asm
29316                                           !BCC_ASM
29317                       0000000A            _memcpyw.count	set	$A
29318                       00000006            _memcpyw.sseg	set	6
29319                       00000008            _memcpyw.soffset	set	8
29320                       00000002            _memcpyw.dseg	set	2
29321                       00000004            _memcpyw.doffset	set	4
29322 7B1C           55                           push bp
29323 7B1D           89E5                         mov bp, sp
29324 7B1F           50                             push ax
29325 7B20           51                             push cx
29326 7B21           06                             push es
29327 7B22           57                             push di
29328 7B23           1E                             push ds
29329 7B24           56                             push si
29330 7B25           8B4E         0C                mov cx, 12[bp] ; count
29331 7B28           83F9                   00      cmp cx, #0x0000
29332 7B2B           74           17                je memcpyw_end
29333 7B2D           8B46         04                mov ax, 4[bp] ; dsegment
29334 7B30           8EC0                           mov es, ax
29335 7B32           8B46         06                mov ax, 6[bp] ; doffset
29336 7B35           89C7                           mov di, ax
29337 7B37           8B46         08                mov ax, 8[bp] ; ssegment
29338 7B3A           8ED8                           mov ds, ax
29339 7B3C           8B46         0A                mov ax, 10[bp] ; soffset
29340 7B3F           89C6                           mov si, ax
29341 7B41           FC                             cld
29342 7B42           F3                             rep
29343 7B43           A5                              movsw
29344                       00007B44            memcpyw_end:
29345 7B44           5E                             pop si
29346 7B45           1F                             pop ds
29347 7B46           5F                             pop di
29348 7B47           07                             pop es
29349 7B48           59                             pop cx
29350 7B49           58                             pop ax
29351 7B4A           5D                           pop bp
29352                                           ! 4005 endasm
29353                                           !BCC_ENDASM
29354                                           ! 4006 }
29355 7B4B           C3                         ret
29356                                           ! 4007 static Bit8u
29357                                           ! 4008 read_byte(seg, offset)
29358                                           ! 4009   Bit16u seg;
29359                       00007B4C            _read_byte:
29360                                           !BCC_EOS
29361                                           ! 4010   Bit16u offset;
29362                                           !BCC_EOS
29363                                           ! 4011 {
29364                                           ! 4012 #asm
29365                                           !BCC_ASM
29366                       00000002            _read_byte.seg	set	2
29367                       00000004            _read_byte.offset	set	4
29368 7B4C           55                           push bp
29369 7B4D           89E5                         mov bp, sp
29370 7B4F           53                             push bx
29371 7B50           1E                             push ds
29372 7B51           8B46         04                mov ax, 4[bp] ; segment
29373 7B54           8ED8                           mov ds, ax
29374 7B56           8B5E         06                mov bx, 6[bp] ; offset
29375 7B59           8A07                           mov al, [bx]
29376                                               ;; al = return value (byte)
29377 7B5B           1F                             pop ds
29378 7B5C           5B                             pop bx
29379 7B5D           5D                           pop bp
29380                                           ! 4025 endasm
29381                                           !BCC_ENDASM
29382                                           ! 4026 }
29383 7B5E           C3                         ret
29384                                           ! 4027 static Bit16u
29385                                           ! 4028 read_word(seg, offset)
29386                                           ! 4029   Bit16u seg;
29387                       00007B5F            _read_word:
29388                                           !BCC_EOS
29389                                           ! 4030   Bit16u offset;
29390                                           !BCC_EOS
29391                                           ! 4031 {
29392                                           ! 4032 #asm
29393                                           !BCC_ASM
29394                       00000002            _read_word.seg	set	2
29395                       00000004            _read_word.offset	set	4
29396 7B5F           55                           push bp
29397 7B60           89E5                         mov bp, sp
29398 7B62           53                             push bx
29399 7B63           1E                             push ds
29400 7B64           8B46         04                mov ax, 4[bp] ; segment
29401 7B67           8ED8                           mov ds, ax
29402 7B69           8B5E         06                mov bx, 6[bp] ; offset
29403 7B6C           8B07                           mov ax, [bx]
29404                                               ;; ax = return value (word)
29405 7B6E           1F                             pop ds
29406 7B6F           5B                             pop bx
29407 7B70           5D                           pop bp
29408                                           ! 4045 endasm
29409                                           !BCC_ENDASM
29410                                           ! 4046 }
29411 7B71           C3                         ret
29412                                           ! 4047 static void
29413                                           ! 4048 write_byte(seg, offset, data)
29414                                           ! 4049   Bit16u seg;
29415                       00007B72            _write_byte:
29416                                           !BCC_EOS
29417                                           ! 4050   Bit16u offset;
29418                                           !BCC_EOS
29419                                           ! 4051   Bit8u data;
29420                                           !BCC_EOS
29421                                           ! 4052 {
29422                                           ! 4053 #asm
29423                                           !BCC_ASM
29424                       00000002            _write_byte.seg	set	2
29425                       00000006            _write_byte.data	set	6
29426                       00000004            _write_byte.offset	set	4
29427 7B72           55                           push bp
29428 7B73           89E5                         mov bp, sp
29429 7B75           50                             push ax
29430 7B76           53                             push bx
29431 7B77           1E                             push ds
29432 7B78           8B46         04                mov ax, 4[bp] ; segment
29433 7B7B           8ED8                           mov ds, ax
29434 7B7D           8B5E         06                mov bx, 6[bp] ; offset
29435 7B80           8A46         08                mov al, 8[bp] ; data byte
29436 7B83           8807                           mov [bx], al ; write data byte
29437 7B85           1F                             pop ds
29438 7B86           5B                             pop bx
29439 7B87           58                             pop ax
29440 7B88           5D                           pop bp
29441                                           ! 4068 endasm
29442                                           !BCC_ENDASM
29443                                           ! 4069 }
29444 7B89           C3                         ret
29445                                           ! 4070 static void
29446                                           ! 4071 write_word(seg, offset, data)
29447                                           ! 4072   Bit16u seg;
29448                       00007B8A            _write_word:
29449                                           !BCC_EOS
29450                                           ! 4073   Bit16u offset;
29451                                           !BCC_EOS
29452                                           ! 4074   Bit16u data;
29453                                           !BCC_EOS
29454                                           ! 4075 {
29455                                           ! 4076 #asm
29456                                           !BCC_ASM
29457                       00000002            _write_word.seg	set	2
29458                       00000006            _write_word.data	set	6
29459                       00000004            _write_word.offset	set	4
29460 7B8A           55                           push bp
29461 7B8B           89E5                         mov bp, sp
29462 7B8D           50                             push ax
29463 7B8E           53                             push bx
29464 7B8F           1E                             push ds
29465 7B90           8B46         04                mov ax, 4[bp] ; segment
29466 7B93           8ED8                           mov ds, ax
29467 7B95           8B5E         06                mov bx, 6[bp] ; offset
29468 7B98           8B46         08                mov ax, 8[bp] ; data word
29469 7B9B           8907                           mov [bx], ax ; write data word
29470 7B9D           1F                             pop ds
29471 7B9E           5B                             pop bx
29472 7B9F           58                             pop ax
29473 7BA0           5D                           pop bp
29474                                           ! 4091 endasm
29475                                           !BCC_ENDASM
29476                                           ! 4092 }
29477 7BA1           C3                         ret
29478                                           ! 4093  Bit8u
29479                                           ! 4094 inb(port)
29480                                           ! 4095   Bit16u port;
29481                                           export	_inb
29482                       00007BA2            _inb:
29483                                           !BCC_EOS
29484                                           ! 4096 {
29485                                           ! 4097 #asm
29486                                           !BCC_ASM
29487                       00000002            _inb.port	set	2
29488 7BA2           55                           push bp
29489 7BA3           89E5                         mov bp, sp
29490 7BA5           52                             push dx
29491 7BA6           8B56         04                mov dx, 4[bp]
29492 7BA9           EC                             in al, dx
29493 7BAA           5A                             pop dx
29494 7BAB           5D                           pop bp
29495                                           ! 4105 endasm
29496                                           !BCC_ENDASM
29497                                           ! 4106 }
29498 7BAC           C3                         ret
29499                                           ! 4107   Bit16u
29500                                           ! 4108 inw(port)
29501                                           ! 4109   Bit16u port;
29502                                           export	_inw
29503                       00007BAD            _inw:
29504                                           !BCC_EOS
29505                                           ! 4110 {
29506                                           ! 4111 #asm
29507                                           !BCC_ASM
29508                       00000002            _inw.port	set	2
29509 7BAD           55                           push bp
29510 7BAE           89E5                         mov bp, sp
29511 7BB0           52                             push dx
29512 7BB1           8B56         04                mov dx, 4[bp]
29513 7BB4           ED                             in ax, dx
29514 7BB5           5A                             pop dx
29515 7BB6           5D                           pop bp
29516                                           ! 4119 endasm
29517                                           !BCC_ENDASM
29518                                           ! 4120 }
29519 7BB7           C3                         ret
29520                                           ! 4121   void
29521                                           ! 4122 outb(port, val)
29522                                           ! 4123   Bit16u port;
29523                                           export	_outb
29524                       00007BB8            _outb:
29525                                           !BCC_EOS
29526                                           ! 4124   Bit8u val;
29527                                           !BCC_EOS
29528                                           ! 4125 {
29529                                           ! 4126 #asm
29530                                           !BCC_ASM
29531                       00000004            _outb.val	set	4
29532                       00000002            _outb.port	set	2
29533 7BB8           55                           push bp
29534 7BB9           89E5                         mov bp, sp
29535 7BBB           50                             push ax
29536 7BBC           52                             push dx
29537 7BBD           8B56         04                mov dx, 4[bp]
29538 7BC0           8A46         06                mov al, 6[bp]
29539 7BC3           EE                             out dx, al
29540 7BC4           5A                             pop dx
29541 7BC5           58                             pop ax
29542 7BC6           5D                           pop bp
29543                                           ! 4137 endasm
29544                                           !BCC_ENDASM
29545                                           ! 4138 }
29546 7BC7           C3                         ret
29547                                           ! 4139   void
29548                                           ! 4140 outw(port, val)
29549                                           ! 4141   Bit16u port;
29550                                           export	_outw
29551                       00007BC8            _outw:
29552                                           !BCC_EOS
29553                                           ! 4142   Bit16u val;
29554                                           !BCC_EOS
29555                                           ! 4143 {
29556                                           ! 4144 #asm
29557                                           !BCC_ASM
29558                       00000004            _outw.val	set	4
29559                       00000002            _outw.port	set	2
29560 7BC8           55                           push bp
29561 7BC9           89E5                         mov bp, sp
29562 7BCB           50                             push ax
29563 7BCC           52                             push dx
29564 7BCD           8B56         04                mov dx, 4[bp]
29565 7BD0           8B46         06                mov ax, 6[bp]
29566 7BD3           EF                             out dx, ax
29567 7BD4           5A                             pop dx
29568 7BD5           58                             pop ax
29569 7BD6           5D                           pop bp
29570                                           ! 4155 endasm
29571                                           !BCC_ENDASM
29572                                           ! 4156 }
29573 7BD7           C3                         ret
29574                                           ! 4157 Bit16u get_SS()
29575                                           ! 4158 {
29576                                           export	_get_SS
29577                       00007BD8            _get_SS:
29578                                           ! 4159 #asm
29579                                           !BCC_ASM
29580 7BD8           8CD0                         mov ax, ss
29581                                           ! 4161 endasm
29582                                           !BCC_ENDASM
29583                                           ! 4162 }
29584 7BDA           C3                         ret
29585                                           ! 4163 void printf(s)
29586                                           ! 4164   Bit8u *s;
29587                                           export	_printf
29588                       00007BDB            _printf:
29589                                           !BCC_EOS
29590                                           ! 4165 {
29591                                           ! 4166   Bit8u c, format_char;
29592                                           !BCC_EOS
29593                                           ! 4167   Boolean in_format;
29594                                           !BCC_EOS
29595                                           ! 4168   unsigned format_width, i;
29596                                           !BCC_EOS
29597                                           ! 4169   Bit16u *arg_ptr;
29598                                           !BCC_EOS
29599                                           ! 4170   Bit16u arg_seg, arg, digit, nibble, shift_count;
29600                                           !BCC_EOS
29601                                           ! 4171   arg_ptr = &s;
29602 7BDB           55                         push	bp
29603 7BDC           89E5                       mov	bp,sp
29604 7BDE           83C4                   EC  add	sp,*-$14
29605                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29606 7BE1           8D5E         04            lea	bx,4[bp]
29607 7BE4           895E         F6            mov	-$A[bp],bx
29608                                           !BCC_EOS
29609                                           ! 4172   arg_seg = get_SS();
29610                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
29611 7BE7           E8         FFEE            call	_get_SS
29612                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
29613 7BEA           8946         F4            mov	-$C[bp],ax
29614                                           !BCC_EOS
29615                                           ! 4173   in_format = 0;
29616                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29617 7BED           31C0                       xor	ax,ax
29618 7BEF           8946         FC            mov	-4[bp],ax
29619                                           !BCC_EOS
29620                                           ! 4174   format_width = 0;
29621                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29622 7BF2           31C0                       xor	ax,ax
29623 7BF4           8946         FA            mov	-6[bp],ax
29624                                           !BCC_EOS
29625                                           ! 4175   while (c = read_byte(0xc000, s)) {
29626 7BF7           E9         0106            br 	.28D
29627                       00007BFA            .28E:
29628                                           ! 4176     if ( c == '%' ) {
29629                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
29630 7BFA           8A46         FF            mov	al,-1[bp]
29631 7BFD           3C                     25  cmp	al,*$25
29632 7BFF           75           0E            jne 	.28F
29633                       00007C01            .290:
29634                                           ! 4177       in_format = 1;
29635                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
29636 7C01           B8                   0001  mov	ax,*1
29637 7C04           8946         FC            mov	-4[bp],ax
29638                                           !BCC_EOS
29639                                           ! 4178       format_width = 0;
29640                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29641 7C07           31C0                       xor	ax,ax
29642 7C09           8946         FA            mov	-6[bp],ax
29643                                           !BCC_EOS
29644                                           ! 4179       }
29645                                           ! 4180     else if (in_format) {
29646 7C0C           E9         00EA            br 	.291
29647                       00007C0F            .28F:
29648 7C0F           8B46         FC            mov	ax,-4[bp]
29649 7C12           85C0                       test	ax,ax
29650 7C14   7503    E9         00D0            beq 	.292
29651                       00007C19            .293:
29652                                           ! 4181       if ( (c>='0') && (c<='9') ) {
29653                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29654 7C19           8A46         FF            mov	al,-1[bp]
29655 7C1C           3C                     30  cmp	al,*$30
29656 7C1E           72           28            jb  	.294
29657                       00007C20            .296:
29658                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
29659 7C20           8A46         FF            mov	al,-1[bp]
29660 7C23           3C                     39  cmp	al,*$39
29661 7C25           77           21            ja  	.294
29662                       00007C27            .295:
29663                                           ! 4182         format_width = (format_width * 10) + (c - '0');
29664                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29665 7C27           8A46         FF            mov	al,-1[bp]
29666 7C2A           30E4                       xor	ah,ah
29667 7C2C           05                   FFD0  add	ax,*-$30
29668 7C2F           50                         push	ax
29669                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
29670 7C30           8B46         FA            mov	ax,-6[bp]
29671 7C33           89C2                       mov	dx,ax
29672 7C35           D1E0                       shl	ax,*1
29673 7C37           D1E0                       shl	ax,*1
29674 7C39           01D0                       add	ax,dx
29675 7C3B           D1E0                       shl	ax,*1
29676                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
29677 7C3D           0346         EA            add	ax,-$16[bp]
29678 7C40           44                         inc	sp
29679 7C41           44                         inc	sp
29680                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
29681 7C42           8946         FA            mov	-6[bp],ax
29682                                           !BCC_EOS
29683                                           ! 4183         }
29684                                           ! 4184       else if (c == 'x') {
29685 7C45           E9         009F            br 	.297
29686                       00007C48            .294:
29687                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
29688 7C48           8A46         FF            mov	al,-1[bp]
29689 7C4B           3C                     78  cmp	al,*$78
29690 7C4D   7403    E9         0095            bne 	.298
29691                       00007C52            .299:
29692                                           ! 4185         arg_ptr++;
29693                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29694 7C52           8B5E         F6            mov	bx,-$A[bp]
29695 7C55           43                         inc	bx
29696 7C56           43                         inc	bx
29697 7C57           895E         F6            mov	-$A[bp],bx
29698                                           !BCC_EOS
29699                                           ! 4186         arg = read_word(arg_seg, arg_ptr);
29700                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29701 7C5A           FF76         F6            push	-$A[bp]
29702                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
29703 7C5D           FF76         F4            push	-$C[bp]
29704                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29705 7C60           E8         FEFC            call	_read_word
29706 7C63           83C4                   04  add	sp,*4
29707                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
29708 7C66           8946         F2            mov	-$E[bp],ax
29709                                           !BCC_EOS
29710                                           ! 4187         if (format_width == 0)
29711                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29712 7C69           8B46         FA            mov	ax,-6[bp]
29713 7C6C           85C0                       test	ax,ax
29714 7C6E           75           06            jne 	.29A
29715                       00007C70            .29B:
29716                                           ! 4188           format_width = 4;
29717                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
29718 7C70           B8                   0004  mov	ax,*4
29719 7C73           8946         FA            mov	-6[bp],ax
29720                                           !BCC_EOS
29721                                           ! 4189         i = 0;
29722                       00007C76            .29A:
29723                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
29724 7C76           31C0                       xor	ax,ax
29725 7C78           8946         F8            mov	-8[bp],ax
29726                                           !BCC_EOS
29727                                           ! 4190         digit = format_width - 1;
29728                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
29729 7C7B           8B46         FA            mov	ax,-6[bp]
29730                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
29731 7C7E           48                         dec	ax
29732 7C7F           8946         F0            mov	-$10[bp],ax
29733                                           !BCC_EOS
29734                                           ! 4191         for (i=0; i<format_width; i++) {
29735                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
29736 7C82           31C0                       xor	ax,ax
29737 7C84           8946         F8            mov	-8[bp],ax
29738                                           !BCC_EOS
29739                                           !BCC_EOS
29740 7C87           EB           51            jmp .29E
29741                       00007C89            .29F:
29742                                           ! 4192           nibble = (arg >> (4 * digit)) & 0x000f;
29743                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
29744                                           ! Debug: expression subtree swapping
29745 7C89           8B46         F0            mov	ax,-$10[bp]
29746 7C8C           D1E0                       shl	ax,*1
29747 7C8E           D1E0                       shl	ax,*1
29748                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
29749 7C90           89C3                       mov	bx,ax
29750 7C92           8B46         F2            mov	ax,-$E[bp]
29751 7C95           89D9                       mov	cx,bx
29752 7C97           D3E8                       shr	ax,cl
29753                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
29754 7C99           24                     0F  and	al,*$F
29755                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
29756 7C9B           30E4                       xor	ah,ah
29757 7C9D           8946         EE            mov	-$12[bp],ax
29758                                           !BCC_EOS
29759                                           ! 4193           if (nibble <= 9)
29760                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
29761 7CA0           8B46         EE            mov	ax,-$12[bp]
29762 7CA3           3D                   0009  cmp	ax,*9
29763 7CA6           77           13            ja  	.2A0
29764                       00007CA8            .2A1:
29765                                           ! 4194             outb(0x0500, nibble + '0');
29766                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
29767 7CA8           8B46         EE            mov	ax,-$12[bp]
29768                                           ! Debug: list unsigned int = ax+$30 (used reg = )
29769 7CAB           05                   0030  add	ax,*$30
29770 7CAE           50                         push	ax
29771                                           ! Debug: list int = const $500 (used reg = )
29772 7CAF           B8                   0500  mov	ax,#$500
29773 7CB2           50                         push	ax
29774                                           ! Debug: func () void = outb+0 (used reg = )
29775 7CB3           E8         FF02            call	_outb
29776 7CB6           83C4                   04  add	sp,*4
29777                                           !BCC_EOS
29778                                           ! 4195           else
29779                                           ! 4196             outb(0x0500, (nibble - 10) + 'A');
29780 7CB9           EB           11            jmp .2A2
29781                       00007CBB            .2A0:
29782                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
29783 7CBB           8B46         EE            mov	ax,-$12[bp]
29784                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
29785                                           ! Debug: list unsigned int = ax+$37 (used reg = )
29786 7CBE           05                   0037  add	ax,*$37
29787 7CC1           50                         push	ax
29788                                           ! Debug: list int = const $500 (used reg = )
29789 7CC2           B8                   0500  mov	ax,#$500
29790 7CC5           50                         push	ax
29791                                           ! Debug: func () void = outb+0 (used reg = )
29792 7CC6           E8         FEEF            call	_outb
29793 7CC9           83C4                   04  add	sp,*4
29794                                           !BCC_EOS
29795                                           ! 4197           digit--;
29796                       00007CCC            .2A2:
29797                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
29798 7CCC           8B46         F0            mov	ax,-$10[bp]
29799 7CCF           48                         dec	ax
29800 7CD0           8946         F0            mov	-$10[bp],ax
29801                                           !BCC_EOS
29802                                           ! 4198           }
29803                                           ! 4199         in_format = 0;
29804                       00007CD3            .29D:
29805                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
29806 7CD3           8B46         F8            mov	ax,-8[bp]
29807 7CD6           40                         inc	ax
29808 7CD7           8946         F8            mov	-8[bp],ax
29809                       00007CDA            .29E:
29810                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
29811 7CDA           8B46         F8            mov	ax,-8[bp]
29812 7CDD           3B46         FA            cmp	ax,-6[bp]
29813 7CE0           72           A7            jb 	.29F
29814                       00007CE2            .2A3:
29815                       00007CE2            .29C:
29816                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29817 7CE2           31C0                       xor	ax,ax
29818 7CE4           8946         FC            mov	-4[bp],ax
29819                                           !BCC_EOS
29820                                           ! 4200         }
29821                                           ! 4201       }
29822                       00007CE7            .298:
29823                       00007CE7            .297:
29824                                           ! 4202     else {
29825 7CE7           EB           10            jmp .2A4
29826                       00007CE9            .292:
29827                                           ! 4203       outb(0x0500, c);
29828                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
29829 7CE9           8A46         FF            mov	al,-1[bp]
29830 7CEC           30E4                       xor	ah,ah
29831 7CEE           50                         push	ax
29832                                           ! Debug: list int = const $500 (used reg = )
29833 7CEF           B8                   0500  mov	ax,#$500
29834 7CF2           50                         push	ax
29835                                           ! Debug: func () void = outb+0 (used reg = )
29836 7CF3           E8         FEC2            call	_outb
29837 7CF6           83C4                   04  add	sp,*4
29838                                           !BCC_EOS
29839                                           ! 4204       }
29840                                           ! 4205     s ++;
29841                       00007CF9            .2A4:
29842                       00007CF9            .291:
29843                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
29844 7CF9           8B5E         04            mov	bx,4[bp]
29845 7CFC           43                         inc	bx
29846 7CFD           895E         04            mov	4[bp],bx
29847                                           !BCC_EOS
29848                                           ! 4206     }
29849                                           ! 4207 }
29850                       00007D00            .28D:
29851                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
29852 7D00           FF76         04            push	4[bp]
29853                                           ! Debug: list unsigned int = const $C000 (used reg = )
29854 7D03           B8                   C000  mov	ax,#$C000
29855 7D06           50                         push	ax
29856                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29857 7D07           E8         FE42            call	_read_byte
29858 7D0A           83C4                   04  add	sp,*4
29859                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
29860 7D0D           8846         FF            mov	-1[bp],al
29861 7D10           84C0                       test	al,al
29862 7D12   7403    E9         FEE3            bne 	.28E
29863                       00007D17            .2A5:
29864                       00007D17            .28C:
29865 7D17           89EC                       mov	sp,bp
29866 7D19           5D                         pop	bp
29867 7D1A           C3                         ret
29868                                           ! 4208 #asm
29869                                           !BCC_ASM
29870                       00000002            _printf.s	set	2
29871                                           ;; DATA_SEG_DEFS_HERE
29872                                           ! 4210 endasm
29873                                           !BCC_ENDASM
29874                                           ! 4211 #asm
29875                                           !BCC_ASM
29876                       00000002            _printf.s	set	2
29877 7D1B                        76            .ascii "vgabios ends here"
29878 7D2C                        00            .byte 0x00
29879                       00007D2D            vgabios_end:
29880 7D2D                        CB            .byte 0xCB
29881                                           ;; BLOCK_STRINGS_BEGIN
29882                                           ! 4217 endasm
29883                                           !BCC_ENDASM
29884                                           ! 4218 
29885                                           ! Register BX used in function printf
29886                                           
29887 7D2E                                      .bss
29888                                           
29889                                           ! 0 errors detected

Symbols:
..FFF5                      0 FFFC A   ..FFF6                      0 FFEE A   
..FFF7                      0 FFF4 A   ..FFF8                      0 FFF6 A   
..FFF9                      0 FFEE A   ..FFFA                      0 FFEE A   
..FFFB                      0 FFF2 A   ..FFFC                      0 FFF0 A   
..FFFD                      0 FFE8 A   ..FFFE                      0 FFE8 A   
..FFFF                      0 FFFE A   .1                          0 3AB5 A   
.10                         0 365C A   .100                        0 4D65 A   
.101                        0 4CED A   .102                        0 4D2A A   
.103                        0 4D04 A   .104                        0 4CFD A   
.105                        0 4D52 A   .106                        0 4D5E A   
.107                        0 4D5C A   .108                        0 4D72 A   
.109                        0 4D75 A   .10A                        0 4E08 A   
.10B                        0 4DC3 A   .10C                        0 4DB1 A   
.10D                        0 4D9F A   .10E                        0 4D98 A   
.10F                        0 4D91 A   .11                         0 368B A   
.110                        0 4F4E A   .111                        0 4E2B A   
.112                        0 4E0F A   .113                        0 4EBF A   
.114                        0 4E35 A   .115                        0 4EBC A   
.116                        0 4EAB A   .117                        0 4EB2 A   
.118                        0 4E3F A   .119                        0 4E83 A   
.11A                        0 4E5D A   .11B                        0 4E56 A   
.11C                        0 4EAB A   .11D                        0 4EBC A   
.11E                        0 4F4E A   .11F                        0 4F4E A   
.12                         0 367B A   .120                        0 4F3A A   
.121                        0 4F41 A   .122                        0 4EC9 A   
.123                        0 4F06 A   .124                        0 4EE0 A   
.125                        0 4ED9 A   .126                        0 4F2E A   
.127                        0 4F3A A   .128                        0 4F38 A   
.129                        0 4F4E A   .12A                        0 4FA3 A   
.12B                        0 4F9F A   .12C                        0 5062 A   
.12D                        0 5004 A   .12E                        0 5062 A   
.12F                        0 5093 A   .13                         0 3690 A   
.131                        0 5089 A   .132                        0 5071 A   
.133                        0 5079 A   .134                        0 5081 A   
.135                        0 5100 A   .136                        0 50F0 A   
.137                        0 510E A   .138                        0 51C8 A   
.139                        0 51B6 A   .13A                        0 51BD A   
.13B                        0 5116 A   .13C                        0 51B6 A   
.13D                        0 51A5 A   .13E                        0 51AC A   
.13F                        0 5133 A   .14                         0 36A7 A   
.140                        0 5195 A   .141                        0 517E A   
.142                        0 51A5 A   .143                        0 51B6 A   
.144                        0 51C8 A   .145                        0 53DD A   
.146                        0 53CC A   .147                        0 53D3 A   
.148                        0 521E A   .149                        0 5242 A   
.14A                        0 5239 A   .14B                        0 5304 A   
.14C                        0 5251 A   .14D                        0 526C A   
.14E                        0 525A A   .14F                        0 5271 A   
.15                         0 36BB A   .150                        0 52EE A   
.151                        0 52E0 A   .152                        0 52E7 A   
.153                        0 5278 A   .154                        0 52D6 A   
.155                        0 528F A   .156                        0 52B8 A   
.157                        0 5298 A   .158                        0 52D6 A   
.159                        0 52EE A   .15A                        0 53CC A   
.15B                        0 53CC A   .15C                        0 53C2 A   
.15D                        0 5307 A   .15E                        0 5322 A   
.15F                        0 5310 A   .16                         0 36D4 A   
.160                        0 5327 A   .161                        0 53A8 A   
.162                        0 539A A   .163                        0 53A1 A   
.164                        0 532E A   .165                        0 5390 A   
.166                        0 5345 A   .167                        0 5370 A   
.168                        0 534E A   .169                        0 5390 A   
.16A                        0 53A8 A   .16B                        0 53CC A   
.16C                        0 53DD A   .16D                        0 54B2 A   
.16E                        0 54A1 A   .16F                        0 54A8 A   
.17                         0 36EB A   .170                        0 5427 A   
.171                        0 54A1 A   .172                        0 5493 A   
.173                        0 549A A   .174                        0 544D A   
.175                        0 546F A   .176                        0 5469 A   
.177                        0 54A1 A   .178                        0 54B2 A   
.179                        0 54E6 A   .17A                        0 54E2 A   
.17B                        0 55B1 A   .17C                        0 5547 A   
.17D                        0 56A7 A   .17E                        0 56A7 A   
.17F                        0 568E A   .18                         0 36F9 A   
.180                        0 55E6 A   .181                        0 5687 A   
.183                        0 5671 A   .184                        0 55FA A   
.185                        0 55FA A   .186                        0 5623 A   
.187                        0 564C A   .188                        0 56A7 A   
.189                        0 569A A   .18A                        0 56DB A   
.18B                        0 56D7 A   .18C                        0 57AA A   
.18D                        0 573C A   .18E                        0 57A7 A   
.18F                        0 579B A   .19                         0 3734 A   
.190                        0 5772 A   .191                        0 57A7 A   
.192                        0 58A0 A   .193                        0 58A0 A   
.194                        0 5887 A   .195                        0 57DF A   
.196                        0 5880 A   .198                        0 586A A   
.199                        0 57F3 A   .19A                        0 57F3 A   
.19B                        0 581C A   .19C                        0 5845 A   
.19D                        0 58A0 A   .19E                        0 5893 A   
.19F                        0 594C A   .1A                         0 376E A   
.1A0                        0 5948 A   .1A1                        0 5966 A   
.1A2                        0 5962 A   .1A3                        0 5BB7 A   
.1A5                        0 5B9E A   .1A6                        0 597B A   
.1A7                        0 597B A   .1A8                        0 59FC A   
.1A9                        0 59EE A   .1AA                        0 5A21 A   
.1AB                        0 5A53 A   .1AC                        0 5A37 A   
.1AD                        0 5A6D A   .1AE                        0 5A7F A   
.1AF                        0 5A76 A   .1B                         0 3783 A   
.1B0                        0 5AEB A   .1B1                        0 5AA5 A   
.1B2                        0 5B2B A   .1B3                        0 5B3F A   
.1B4                        0 5B34 A   .1B5                        0 5B55 A   
.1B6                        0 5B6A A   .1B7                        0 5BF1 A   
.1B8                        0 5BED A   .1B9                        0 5C0B A   
.1BA                        0 5C07 A   .1BB                        0 5DA2 A   
.1BD                        0 5D87 A   .1BE                        0 5C20 A   
.1BF                        0 5C20 A   .1C                         0 37A3 A   
.1C0                        0 5CB4 A   .1C1                        0 5CA6 A   
.1C2                        0 5CAD A   .1C3                        0 5C62 A   
.1C4                        0 5CA6 A   .1C5                        0 5C92 A   
.1C6                        0 5CB4 A   .1C7                        0 5CB7 A   
.1C8                        0 5CE3 A   .1C9                        0 5CDA A   
.1CA                        0 5D2E A   .1CB                        0 5D09 A   
.1CC                        0 5D4F A   .1CD                        0 5D51 A   
.1CE                        0 5D80 A   .1CF                        0 5DE2 A   
.1D                         0 37C3 A   .1D0                        0 5DD1 A   
.1D1                        0 5E0C A   .1D2                        0 5E08 A   
.1D3                        0 6071 A   .1D5                        0 604B A   
.1D6                        0 5E5D A   .1D7                        0 5E60 A   
.1D8                        0 5E6E A   .1D9                        0 5E67 A   
.1DA                        0 5E71 A   .1DB                        0 5E79 A   
.1DC                        0 5E83 A   .1DD                        0 5ED0 A   
.1DE                        0 5EC5 A   .1DF                        0 5E83 A   
.1E                         0 37E0 A   .1E0                        0 5ED0 A   
.1E1                        0 5ED3 A   .1E2                        0 5F6E A   
.1E3                        0 5EEC A   .1E4                        0 5F6B A   
.1E5                        0 5F48 A   .1E6                        0 6042 A   
.1E7                        0 6042 A   .1E9                        0 602C A   
.1EA                        0 5FB5 A   .1EB                        0 5FB5 A   
.1EC                        0 5FDE A   .1ED                        0 6007 A   
.1EE                        0 6087 A   .1EF                        0 607B A   
.1F                         0 37FB A   .1F0                        0 615E A   
.1F1                        0 6094 A   .1F2                        0 612E A   
.1F3                        0 60AD A   .1F4                        0 6155 A   
.1F5                        0 6527 A   .1F6                        0 6515 A   
.1F7                        0 651C A   .1F8                        0 645E A   
.1F9                        0 64D1 A   .1FA                        0 64CB A   
.1FB                        0 6527 A   .1FC                        0 6609 A   
.1FD                        0 65F9 A   .1FE                        0 6621 A   
.1FF                        0 6766 A   .20                         0 3818 A   
.200                        0 6757 A   .201                        0 675E A   
.202                        0 671A A   .203                        0 6766 A   
.204                        0 677B A   .205                        0 6770 A   
.206                        0 67FF A   .207                        0 67F0 A   
.208                        0 67F7 A   .209                        0 67B6 A   
.20A                        0 67FF A   .20B                        0 6812 A   
.20C                        0 6809 A   .20D                        0 6890 A   
.20E                        0 6881 A   .20F                        0 6888 A   
.21                         0 3827 A   .210                        0 684D A   
.211                        0 6890 A   .212                        0 68A3 A   
.213                        0 689A A   .214                        0 692E A   
.215                        0 691F A   .216                        0 6926 A   
.217                        0 68EB A   .218                        0 692E A   
.219                        0 6941 A   .21A                        0 6938 A   
.21B                        0 6AC3 A   .21D                        0 6A9E A   
.21E                        0 695B A   .21F                        0 6992 A   
.22                         0 3970 A   .220                        0 69C9 A   
.221                        0 69EC A   .222                        0 6A0F A   
.223                        0 6A32 A   .224                        0 6A54 A   
.225                        0 6A76 A   .226                        0 6A98 A   
.227                        0 6AC1 A   .228                        0 6AB1 A   
.229                        0 6C36 A   .22A                        0 6C24 A   
.22B                        0 6CC0 A   .22C                        0 6CB4 A   
.22D                        0 6C65 A   .22E                        0 6C98 A   
.22F                        0 6C83 A   .230                        0 6CC0 A   
.231                        0 6CD8 A   .232                        0 6CC9 A   
.233                        0 6E63 A   .234                        0 6E5A A   
.235                        0 6E75 A   .236                        0 6E6C A   
.237                        0 6E87 A   .238                        0 6E7E A   
.239                        0 713B A   .23A                        0 6ED5 A   
.23B                        0 6FC0 A   .23C                        0 6FB1 A   
.23D                        0 6FB8 A   .23E                        0 6F85 A   
.23F                        0 6FC0 A   .24                         0 390E A   
.240                        0 702E A   .241                        0 701F A   
.242                        0 7026 A   .243                        0 6FF3 A   
.244                        0 702E A   .245                        0 7081 A   
.246                        0 7072 A   .247                        0 7079 A   
.248                        0 7035 A   .249                        0 7081 A   
.24A                        0 70CC A   .24B                        0 70BD A   
.24C                        0 70C4 A   .24D                        0 7091 A   
.24E                        0 70CC A   .24F                        0 73B7 A   
.25                         0 382D A   .250                        0 7147 A   
.251                        0 72E8 A   .252                        0 72D9 A   
.253                        0 72E0 A   .254                        0 72B1 A   
.255                        0 72E8 A   .256                        0 7478 A   
.257                        0 73C3 A   .258                        0 7462 A   
.259                        0 7453 A   .25A                        0 745A A   
.25B                        0 7434 A   .25C                        0 7462 A   
.25D                        0 773B A   .25E                        0 7491 A   
.25F                        0 7500 A   .26                         0 382D A   
.260                        0 74F1 A   .261                        0 74F8 A   
.262                        0 74C4 A   .263                        0 7500 A   
.264                        0 7585 A   .265                        0 7576 A   
.266                        0 757D A   .267                        0 7541 A   
.268                        0 756F A   .269                        0 7549 A   
.26A                        0 7585 A   .26B                        0 75A7 A   
.26C                        0 759F A   .26D                        0 7648 A   
.26E                        0 7639 A   .26F                        0 7640 A   
.27                         0 3856 A   .270                        0 7604 A   
.271                        0 7648 A   .272                        0 76A1 A   
.273                        0 7692 A   .274                        0 7699 A   
.275                        0 7665 A   .276                        0 76A1 A   
.277                        0 79B7 A   .278                        0 7747 A   
.279                        0 78E8 A   .27A                        0 78D9 A   
.27B                        0 78E0 A   .27C                        0 78B1 A   
.27D                        0 78E8 A   .27E                        0 7A59 A   
.27F                        0 79C3 A   .28                         0 3856 A   
.280                        0 7A45 A   .281                        0 7A36 A   
.282                        0 7A3D A   .283                        0 7A16 A   
.284                        0 7A45 A   .285                        0 7A9B A   
.286                        0 7A8D A   .287                        0 7A94 A   
.288                        0 7A71 A   .289                        0 7A8D A   
.28A                        0 7A85 A   .28B                        0 7A9B A   
.28C                        0 7D17 A   .28D                        0 7D00 A   
.28E                        0 7BFA A   .28F                        0 7C0F A   
.29                         0 386B A   .290                        0 7C01 A   
.291                        0 7CF9 A   .292                        0 7CE9 A   
.293                        0 7C19 A   .294                        0 7C48 A   
.295                        0 7C27 A   .296                        0 7C20 A   
.297                        0 7CE7 A   .298                        0 7CE7 A   
.299                        0 7C52 A   .29A                        0 7C76 A   
.29B                        0 7C70 A   .29C                        0 7CE2 A   
.29D                        0 7CD3 A   .29E                        0 7CDA A   
.29F                        0 7C89 A   .2A                         0 386B A   
.2A0                        0 7CBB A   .2A1                        0 7CA8 A   
.2A2                        0 7CCC A   .2A3                        0 7CE2 A   
.2A4                        0 7CF9 A   .2A5                        0 7D17 A   
.2B                         0 3880 A   .2C                         0 3880 A   
.2D                         0 3895 A   .2E                         0 38A4 A   
.2F                         0 38C2 A   .3                          0 3A65 A   
.30                         0 38D0 A   .31                         0 38DE A   
.32                         0 38EC A   .33                         0 3973 A   
.34                         0 39C0 A   .36                         0 39B4 A   
.37                         0 3978 A   .38                         0 397D A   
.39                         0 399B A   .3A                         0 39C3 A   
.3B                         0 39F7 A   .3C                         0 3A13 A   
.3D                         0 3A57 A   .3F                         0 3A4B A   
.4                          0 3632 A   .40                         0 3A18 A   
.41                         0 3A27 A   .42                         0 3A38 A   
.43                         0 3AB5 A   .44                         0 3A7B A   
.45                         0 3AE7 A   .46                         0 3AE3 A   
.47                         0 3CBC A   .48                         0 3B76 A   
.49                         0 3BE8 A   .4B                         0 3BD8 A   
.4C                         0 3BB6 A   .4D                         0 3BBE A   
.4E                         0 3BC6 A   .4F                         0 3BCE A   
.5                          0 368D A   .50                         0 3CA6 A   
.51                         0 3C94 A   .52                         0 3C9B A   
.53                         0 3BF0 A   .54                         0 3C6D A   
.55                         0 3C11 A   .56                         0 3C94 A   
.57                         0 3CA6 A   .58                         0 3CBC A   
.59                         0 3CAF A   .5A                         0 3D0C A   
.5B                         0 3CFD A   .5C                         0 3D04 A   
.5D                         0 3CCC A   .5E                         0 3D0C A   
.5F                         0 3D91 A   .60                         0 3D82 A   
.61                         0 3D89 A   .62                         0 3D4A A   
.63                         0 3D91 A   .64                         0 3DD8 A   
.65                         0 3DC9 A   .66                         0 3DD0 A   
.67                         0 3D98 A   .68                         0 3DD8 A   
.69                         0 3DF3 A   .6A                         0 3DEE A   
.6B                         0 3DF6 A   .6C                         0 3E4D A   
.6D                         0 3E3E A   .6E                         0 3E45 A   
.6F                         0 3E0D A   .7                          0 3668 A   
.70                         0 3E4D A   .71                         0 3F4E A   
.72                         0 3E8D A   .73                         0 3EC9 A   
.74                         0 3EA3 A   .75                         0 3F4E A   
.76                         0 3EF4 A   .77                         0 3ED0 A   
.78                         0 3F4E A   .79                         0 408B A   
.7A                         0 407D A   .7B                         0 40AD A   
.7C                         0 409E A   .7D                         0 40A5 A   
.7E                         0 4092 A   .7F                         0 40AD A   
.8                          0 3644 A   .80                         0 40D9 A   
.81                         0 40CB A   .82                         0 413F A   
.84                         0 4130 A   .85                         0 40F1 A   
.86                         0 4106 A   .87                         0 411A A   
.88                         0 420D A   .89                         0 41BD A   
.8A                         0 41B6 A   .8B                         0 41AF A   
.8C                         0 41A7 A   .8D                         0 41E6 A   
.8E                         0 41D1 A   .8F                         0 41FA A   
.9                          0 3650 A   .90                         0 426F A   
.91                         0 426B A   .92                         0 435B A   
.93                         0 42A3 A   .94                         0 4393 A   
.95                         0 438F A   .96                         0 43E5 A   
.97                         0 43E1 A   .98                         0 440F A   
.99                         0 440B A   .9A                         0 44A7 A   
.9B                         0 4439 A   .9C                         0 44CB A   
.9D                         0 45F3 A   .9E                         0 45E4 A   
.9F                         0 45EB A   .A                          0 3650 A   
.A0                         0 45A8 A   .A1                         0 45F3 A   
.A2                         0 467E A   .A3                         0 466F A   
.A4                         0 4676 A   .A5                         0 4645 A   
.A6                         0 467E A   .A7                         0 479F A   
.A8                         0 478D A   .A9                         0 4794 A   
.AA                         0 46EC A   .AB                         0 474B A   
.AC                         0 46F5 A   .AD                         0 478D A   
.AE                         0 479F A   .AF                         0 4854 A   
.B                          0 3650 A   .B0                         0 4845 A   
.B1                         0 484C A   .B2                         0 47D7 A   
.B3                         0 4818 A   .B4                         0 47E0 A   
.B5                         0 4845 A   .B6                         0 4854 A   
.B7                         0 486A A   .B8                         0 4866 A   
.B9                         0 4876 A   .BA                         0 4872 A   
.BB                         0 48A0 A   .BC                         0 489C A   
.BD                         0 48DD A   .BE                         0 48CC A   
.BF                         0 48EE A   .C                          0 3650 A   
.C0                         0 48E7 A   .C1                         0 48FF A   
.C2                         0 48F8 A   .C3                         0 490E A   
.C4                         0 4909 A   .C5                         0 4B89 A   
.C6                         0 4936 A   .C7                         0 49C0 A   
.C8                         0 498B A   .C9                         0 4979 A   
.CA                         0 4967 A   .CB                         0 4960 A   
.CC                         0 4959 A   .CD                         0 4B86 A   
.CE                         0 4AA7 A   .CF                         0 49CA A   
.D                          0 3650 A   .D0                         0 4AA4 A   
.D1                         0 4A90 A   .D2                         0 4A97 A   
.D3                         0 49D5 A   .D4                         0 4A35 A   
.D5                         0 49F3 A   .D6                         0 49EC A   
.D7                         0 4A90 A   .D8                         0 4AA4 A   
.D9                         0 4B86 A   .DA                         0 4B86 A   
.DB                         0 4B72 A   .DC                         0 4B79 A   
.DD                         0 4AB2 A   .DE                         0 4B0B A   
.DF                         0 4AC9 A   .E                          0 3650 A   
.E0                         0 4AC2 A   .E1                         0 4B66 A   
.E2                         0 4B72 A   .E3                         0 4B70 A   
.E4                         0 4B86 A   .E5                         0 4F67 A   
.E6                         0 4F67 A   .E8                         0 4F52 A   
.E9                         0 4BBB A   .EA                         0 4BBB A   
.EB                         0 4C4F A   .EC                         0 4BFA A   
.ED                         0 4BE8 A   .EE                         0 4BD6 A   
.EF                         0 4BCF A   .F                          0 3650 A   
.F0                         0 4BC5 A   .F1                         0 4D72 A   
.F2                         0 4CE3 A   .F3                         0 4C59 A   
.F4                         0 4CE0 A   .F5                         0 4CCF A   
.F6                         0 4CD6 A   .F7                         0 4C63 A   
.F8                         0 4CA7 A   .F9                         0 4C81 A   
.FA                         0 4C7A A   .FB                         0 4CCF A   
.FC                         0 4CE0 A   .FD                         0 4D72 A   
.FE                         0 4D72 A   .FF                         0 4D5E A   
_biosfn_alternate_prtsc     0 6B24 A   _biosfn_enable_video_refre+ 0 6C02 A   
_biosfn_get_cursor_pos      0 435F A   _biosfn_get_font_info       0 694A A   
_biosfn_load_gfx_8_14_char+ 0 6947 A   _biosfn_load_gfx_8_16_char+ 0 6949 A   
_biosfn_load_gfx_8_8_chars  0 6945 A   _biosfn_load_gfx_8_8_dd_ch+ 0 6948 A   
_biosfn_load_gfx_user_char+ 0 6946 A   _biosfn_load_text_8_14_pat  0 677F A   
_biosfn_load_text_8_16_pat  0 68B4 A   _biosfn_load_text_8_8_pat   0 6816 A   
_biosfn_load_text_user_pat  0 66E3 A   _biosfn_perform_gray_scale+ 0 643A A   
_biosfn_read_char_attr      0 4F6B A   _biosfn_read_pixel          0 5BBB A   
_biosfn_read_state_info     0 6D0F A   _biosfn_read_video_state_s+ 0 6E8E A   
_biosfn_read_video_state_s+ 0 6E47 A   _biosfn_restore_video_stat+ 0 747F A   
_biosfn_save_video_state    0 6EB2 A   _biosfn_scroll              0 4858 A   
_biosfn_set_active_page     0 43D4 A   _biosfn_set_cursor_pos      0 425E A   
_biosfn_set_cursor_shape    0 4143 A   _biosfn_set_video_mode      0 3AB7 A   
_biosfn_switch_video_inter+ 0 6C01 A   _biosfn_write_char_attr     0 54B6 A   
_biosfn_write_char_only     0 56AB A   _biosfn_write_pixel         0 591C A   
_biosfn_write_string        0 6C03 A   _biosfn_write_teletype      0 5DC4 A   
_dac_regs                   0 0256 A   _display_info               0 35E0 A   
_display_splash_screen      0 35DF A   _display_string             0 35FE A   
_find_vga_entry             0 7A60 A   _get_SS                     0 7BD8 A E 
_get_font_access            0 6542 A   _inb                        0 7BA2 A E 
_int10_func                 0 3625 A   _inw                        0 7BAD A E 
_line_to_vpti               0 0246 A   _memcpyb                    0 7AEC A   
_memcpyw                    0 7B1C A   _memsetb                    0 7AA2 A   
_memsetw                    0 7AC7 A   _outb                       0 7BB8 A E 
_outw                       0 7BC8 A E _palette0                   0 09DA A   
_palette1                   0 0A9A A   _palette2                   0 0B5A A   
_palette3                   0 0C1A A   _printf                     0 7BDB A E 
_read_byte                  0 7B4C A   _read_word                  0 7B5F A   
_release_font_access        0 6565 A   _set_scan_lines             0 659A A   
_static_functionality       0 0F1A A   _vga_modes                  0 01C6 A   
_vgafont14                  0 172A A   _vgafont14alt               0 352A A   
_vgafont16                  0 252A A   _vgafont16alt               0 352B A   
_vgafont8                   0 0F2A A   _vgamem_copy_cga            0 4690 A   
_vgamem_copy_pl4            0 4543 A   _vgamem_fill_cga            0 47A3 A   
_vgamem_fill_pl4            0 4605 A   _video_param_table          0 025A A   
_video_save_pointer_table   0 35C3 A   _write_byte                 0 7B72 A   
_write_gfx_char_cga         0 51DB A   _write_gfx_char_lin         0 53E1 A   
_write_gfx_char_pl4         0 5066 A   _write_word                 0 7B8A A   
biosfn_enable_cursor_emula+ 0 6BDF A   biosfn_enable_default_pale+ 0 6B78 A   
biosfn_enable_grayscale_su+ 0 6BBB A   biosfn_enable_video_addres+ 0 6B9D A   
biosfn_get_all_palette_reg  0 62C7 A   biosfn_get_ega_info         0 6B01 A   
biosfn_get_single_palette_+ 0 6295 A   biosfn_get_video_mode       0 618F A   
biosfn_group_0B             0 58A4 A   biosfn_group_10             0 61B6 A   
biosfn_group_1A             0 6CDC A   biosfn_read_all_dac_reg     0 63B3 A   
biosfn_read_display_code    0 6CE5 A   biosfn_read_overscan_borde+ 0 62B9 A   
biosfn_read_pel_mask        0 63E6 A   biosfn_read_single_dac_reg  0 6398 A   
biosfn_read_video_dac_stat+ 0 63F1 A   biosfn_select_vert_res      0 6B25 A   
biosfn_select_video_dac_co+ 0 6349 A   biosfn_set_all_dac_reg      0 6321 A   
biosfn_set_all_palette_reg  0 623F A   biosfn_set_border_color     0 58AF A   
biosfn_set_display_code     0 6CFA A   biosfn_set_overscan_border+ 0 6237 A   
biosfn_set_palette          0 58EE A   biosfn_set_pel_mask         0 63DB A   
biosfn_set_single_dac_reg   0 6308 A   biosfn_set_single_palette_+ 0 621D A   
biosfn_set_text_block_spec+ 0 68A7 A   biosfn_toggle_intensity     0 626C A   
get_dac_16_page             0 642D A   get_palette_loop            0 62CF A   
idiv_u                      0 6595 A   init_bios_area              0 358B A   
init_vga_card               0 352C A   int10_end                   0 01C4 A   
int10_group_10_unknown      0 621C A   int10_normal                0 01A8 A   
int10_test_0B               0 0144 A   int10_test_1001             0 61BC A   
int10_test_1002             0 61C2 A   int10_test_1003             0 61C8 A   
int10_test_1007             0 61CF A   int10_test_1008             0 61D6 A   
int10_test_1009             0 61DD A   int10_test_1010             0 61E4 A   
int10_test_1012             0 61EB A   int10_test_1013             0 61F2 A   
int10_test_1015             0 61F9 A   int10_test_1017             0 6200 A   
int10_test_1018             0 6207 A   int10_test_1019             0 620E A   
int10_test_101A             0 6215 A   int10_test_101B             0 0199 A   
int10_test_1103             0 014E A   int10_test_12               0 0158 A   
int10_test_1A               0 0139 A   int10_test_BL30             0 0167 A   
int10_test_BL31             0 0171 A   int10_test_BL32             0 017B A   
int10_test_BL33             0 0185 A   int10_test_BL34             0 018F A   
memcpyb_end                 0 7B14 A   memcpyw_end                 0 7B44 A   
memsetb_end                 0 7AC1 A   memsetw_end                 0 7AE6 A   
mode_ega_color              0 6B21 A   msg_vga_init                0 3548 A   
no_actl_reg1                0 6236 A   no_actl_reg2                0 62B8 A   
read_dac_loop               0 63C4 A   set_actl_normal             0 6391 A   
set_cga_palette_loop        0 58FB A   set_dac_16_page             0 638B A   
set_dac_loop                0 6332 A   set_dac_page                0 6377 A   
set_intensity_loop          0 58CD A   set_low_border              0 58C7 A   
set_palette_loop            0 624E A   set_retcode                 0 6B71 A   
set_vert_res                0 6B67 A   vert_res_200                0 6B5D A   
vert_res_350                0 6B53 A   vert_res_400                0 6B47 A   
vgabios_copyright           0 0052 A   vgabios_date                0 0044 A   
vgabios_end                 0 7D2D A   vgabios_entry_point         0 0003 A   
vgabios_init_func           0 0109 A   vgabios_int10_handler       0 012D A   
vgabios_license             0 007E A   vgabios_name                0 0022 A   
vgabios_start               0 0000 A   vgabios_version             0 0038 A   
vgabios_website             0 00B3 A   

00000 errors
00000 warnings
